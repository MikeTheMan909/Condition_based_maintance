
CBM_blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025f4  0800dc50  0800dc50  0001dc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010244  08010244  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010244  08010244  00020244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801024c  0801024c  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801024c  0801024c  0002024c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010250  08010250  00020250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08010254  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009334  200001f8  0801044c  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000952c  0801044c  0003952c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3e9  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bad  00000000  00000000  0004e611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc8  00000000  00000000  000531c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a90  00000000  00000000  00054e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc66  00000000  00000000  00056918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000232f2  00000000  00000000  0007457e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4a9a  00000000  00000000  00097870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0013c30a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008814  00000000  00000000  0013c3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000cf5  00000000  00000000  00144bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc34 	.word	0x0800dc34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800dc34 	.word	0x0800dc34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 8000fa2:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f003 f99c 	bl	80042e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f926 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 faac 	bl	8001508 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb0:	f000 f980 	bl	80012b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fb4:	f000 f9ac 	bl	8001310 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000fb8:	f000 fa7c 	bl	80014b4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000fbc:	f000 f9de 	bl	800137c <MX_TIM2_Init>
  MX_TIM5_Init();
 8000fc0:	f000 fa2a 	bl	8001418 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  c = config();
 8000fc4:	4c7d      	ldr	r4, [pc, #500]	; (80011bc <main+0x220>)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f007 fb99 	bl	8008700 <config>
 8000fce:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8000fd2:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	6828      	ldr	r0, [r5, #0]
 8000fda:	6869      	ldr	r1, [r5, #4]
 8000fdc:	68aa      	ldr	r2, [r5, #8]
 8000fde:	68eb      	ldr	r3, [r5, #12]
 8000fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe2:	7c2b      	ldrb	r3, [r5, #16]
 8000fe4:	7023      	strb	r3, [r4, #0]

    main_print_debug("****************PROGRAM STARTED******************");
 8000fe6:	4b76      	ldr	r3, [pc, #472]	; (80011c0 <main+0x224>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4976      	ldr	r1, [pc, #472]	; (80011c4 <main+0x228>)
 8000fec:	4618      	mov	r0, r3
 8000fee:	f008 fb49 	bl	8009684 <print_debug>
    main_print_debug("Peripherals initialized!");
 8000ff2:	4b73      	ldr	r3, [pc, #460]	; (80011c0 <main+0x224>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4974      	ldr	r1, [pc, #464]	; (80011c8 <main+0x22c>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f008 fb43 	bl	8009684 <print_debug>
    comm_start();
 8000ffe:	f008 fb35 	bl	800966c <comm_start>

    main_print_debug("SPSGRF initialized!");
 8001002:	4b6f      	ldr	r3, [pc, #444]	; (80011c0 <main+0x224>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4971      	ldr	r1, [pc, #452]	; (80011cc <main+0x230>)
 8001008:	4618      	mov	r0, r3
 800100a:	f008 fb3b 	bl	8009684 <print_debug>

    uint8_t data[200];
    uint8_t enc_data[200];
    uint8_t dec_data[200];

    memset(enc_data,0,200);
 800100e:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001012:	22c8      	movs	r2, #200	; 0xc8
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f009 fe7e 	bl	800ad18 <memset>
    uint8_t len;
    struct sensor_values sensor_value;
    struct sensor_values received;
    sensor_readAcceleroRegister(0x00);
 800101c:	2000      	movs	r0, #0
 800101e:	f008 fde7 	bl	8009bf0 <sensor_readAcceleroRegister>
	sensor_setup();
 8001022:	f008 fd85 	bl	8009b30 <sensor_setup>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_print_debug("Main loop begin");
 8001026:	4b66      	ldr	r3, [pc, #408]	; (80011c0 <main+0x224>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4969      	ldr	r1, [pc, #420]	; (80011d0 <main+0x234>)
 800102c:	4618      	mov	r0, r3
 800102e:	f008 fb29 	bl	8009684 <print_debug>
    while (1)
    {
  	  switch(state){
 8001032:	4b68      	ldr	r3, [pc, #416]	; (80011d4 <main+0x238>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b05      	cmp	r3, #5
 8001038:	d8fb      	bhi.n	8001032 <main+0x96>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <main+0xa4>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	080010b1 	.word	0x080010b1
 8001044:	08001101 	.word	0x08001101
 8001048:	08001059 	.word	0x08001059
 800104c:	080010d1 	.word	0x080010d1
 8001050:	080010e9 	.word	0x080010e9
 8001054:	08001129 	.word	0x08001129
  	  case PREP_DATA:
  		  // Neem een aantal samples met de accelerometer en bereken hiervan acceleratie in g (resultaat: acceleration.samples in struct)
  		  accelerometer_sample();
 8001058:	f008 fe5e 	bl	8009d18 <accelerometer_sample>

  		  // Converteer acceleratie naar velocity en vervolgens velocity naar displacement (resultaat: velocity.samples en displacement.samples)
  		  convert_to_velocity();
 800105c:	f009 f9f2 	bl	800a444 <convert_to_velocity>
  		  convert_to_displacement();
 8001060:	f009 fa52 	bl	800a508 <convert_to_displacement>

  		  // Bereken statistieken
  		  vibration_statistics();
 8001064:	f009 fa8a 	bl	800a57c <vibration_statistics>
  		  sensor_fillStruct(&sensor_value);
 8001068:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800106c:	4618      	mov	r0, r3
 800106e:	f008 ffaf 	bl	8009fd0 <sensor_fillStruct>
  		  main_print_debug("Data send request");
 8001072:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <main+0x224>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4958      	ldr	r1, [pc, #352]	; (80011d8 <main+0x23c>)
 8001078:	4618      	mov	r0, r3
 800107a:	f008 fb03 	bl	8009684 <print_debug>
  		  len = comm_request(data,sensor_value);
 800107e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001082:	f5a3 7433 	sub.w	r4, r3, #716	; 0x2cc
 8001086:	f507 7523 	add.w	r5, r7, #652	; 0x28c
 800108a:	4668      	mov	r0, sp
 800108c:	f104 030c 	add.w	r3, r4, #12
 8001090:	2264      	movs	r2, #100	; 0x64
 8001092:	4619      	mov	r1, r3
 8001094:	f009 fe32 	bl	800acfc <memcpy>
 8001098:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800109c:	4628      	mov	r0, r5
 800109e:	f007 fbc7 	bl	8008830 <comm_request>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 3357 	strb.w	r3, [r7, #855]	; 0x357
  		  state = ENCRYPT;
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <main+0x238>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
  		  break;
 80010ae:	e083      	b.n	80011b8 <main+0x21c>
  	  case ENCRYPT:
  		  len = comm_encrypt(data, len, enc_data);
 80010b0:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 80010b4:	f897 1357 	ldrb.w	r1, [r7, #855]	; 0x357
 80010b8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80010bc:	4618      	mov	r0, r3
 80010be:	f008 f87d 	bl	80091bc <comm_encrypt>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f887 3357 	strb.w	r3, [r7, #855]	; 0x357
  		  state = SEND;
 80010c8:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <main+0x238>)
 80010ca:	2203      	movs	r2, #3
 80010cc:	701a      	strb	r2, [r3, #0]
  		  break;
 80010ce:	e073      	b.n	80011b8 <main+0x21c>
  	  case SEND:
  		  comm_send(enc_data, len,GATEWAY_ADDRESS);
 80010d0:	f897 1357 	ldrb.w	r1, [r7, #855]	; 0x357
 80010d4:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80010d8:	2299      	movs	r2, #153	; 0x99
 80010da:	4618      	mov	r0, r3
 80010dc:	f008 f850 	bl	8009180 <comm_send>
  		  state = IDLE;
 80010e0:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <main+0x238>)
 80010e2:	2205      	movs	r2, #5
 80010e4:	701a      	strb	r2, [r3, #0]
  		  break;
 80010e6:	e067      	b.n	80011b8 <main+0x21c>
  	  case RECEIVE:
  		  main_print_debug("Starting RX state");
 80010e8:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <main+0x224>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	493b      	ldr	r1, [pc, #236]	; (80011dc <main+0x240>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f008 fac8 	bl	8009684 <print_debug>
  		  SPSGRF_StartRx();
 80010f4:	f008 fd00 	bl	8009af8 <SPSGRF_StartRx>
  		  state = IDLE;
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <main+0x238>)
 80010fa:	2205      	movs	r2, #5
 80010fc:	701a      	strb	r2, [r3, #0]
  		  break;
 80010fe:	e05b      	b.n	80011b8 <main+0x21c>
  	  case DECRYPT:
  		  comm_decrypt(dec_data,enc_data);
 8001100:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8001104:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f008 f982 	bl	8009414 <comm_decrypt>
  		  comm_received(dec_data,&received);
 8001110:	f107 021c 	add.w	r2, r7, #28
 8001114:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f007 fd00 	bl	8008b20 <comm_received>
  		  state = RECEIVE;
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <main+0x238>)
 8001122:	2204      	movs	r2, #4
 8001124:	701a      	strb	r2, [r3, #0]
  		  break;
 8001126:	e047      	b.n	80011b8 <main+0x21c>

  	  case IDLE:
  		  if(interrupt_flag == 1){
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <main+0x244>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d142      	bne.n	80011b6 <main+0x21a>
  			main_print_debug("Got interrupted");
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <main+0x224>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	492b      	ldr	r1, [pc, #172]	; (80011e4 <main+0x248>)
 8001136:	4618      	mov	r0, r3
 8001138:	f008 faa4 	bl	8009684 <print_debug>
  			interrupt_flag = 0;
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <main+0x244>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
  			if(irqStatus.IRQ_RX_DATA_READY)
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <main+0x24c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <main+0x1c6>
  			{
  				main_print_debug("data received");
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <main+0x224>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4925      	ldr	r1, [pc, #148]	; (80011ec <main+0x250>)
 8001156:	4618      	mov	r0, r3
 8001158:	f008 fa94 	bl	8009684 <print_debug>
  				state = DECRYPT;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <main+0x238>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
  			}
  			if(irqStatus.IRQ_RX_DATA_DISC)
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <main+0x24c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <main+0x1da>
  			{
  				state = RECEIVE;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <main+0x238>)
 8001172:	2204      	movs	r2, #4
 8001174:	701a      	strb	r2, [r3, #0]
  			}
  			if(irqStatus.IRQ_TX_DATA_SENT)
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <main+0x24c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <main+0x1fa>
  			{
  				main_print_debug("Data send!");
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <main+0x224>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4919      	ldr	r1, [pc, #100]	; (80011f0 <main+0x254>)
 800118a:	4618      	mov	r0, r3
 800118c:	f008 fa7a 	bl	8009684 <print_debug>
  				state = RECEIVE;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <main+0x238>)
 8001192:	2204      	movs	r2, #4
 8001194:	701a      	strb	r2, [r3, #0]
  			}
  			if(irqStatus.IRQ_AES_END)
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <main+0x24c>)
 8001198:	78db      	ldrb	r3, [r3, #3]
 800119a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <main+0x21a>
  			{
  				main_print_debug("Encryption done");
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <main+0x224>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4912      	ldr	r1, [pc, #72]	; (80011f4 <main+0x258>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f008 fa6a 	bl	8009684 <print_debug>
  				state = IDLE;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <main+0x238>)
 80011b2:	2205      	movs	r2, #5
 80011b4:	701a      	strb	r2, [r3, #0]
  			}
  		  }
  		  break;
 80011b6:	bf00      	nop
  	  switch(state){
 80011b8:	e73b      	b.n	8001032 <main+0x96>
 80011ba:	bf00      	nop
 80011bc:	20000398 	.word	0x20000398
 80011c0:	20000000 	.word	0x20000000
 80011c4:	0800dc58 	.word	0x0800dc58
 80011c8:	0800dc8c 	.word	0x0800dc8c
 80011cc:	0800dca8 	.word	0x0800dca8
 80011d0:	0800dcbc 	.word	0x0800dcbc
 80011d4:	20000004 	.word	0x20000004
 80011d8:	0800dccc 	.word	0x0800dccc
 80011dc:	0800dce0 	.word	0x0800dce0
 80011e0:	20000394 	.word	0x20000394
 80011e4:	0800dcf4 	.word	0x0800dcf4
 80011e8:	200003ac 	.word	0x200003ac
 80011ec:	0800dd04 	.word	0x0800dd04
 80011f0:	0800dd14 	.word	0x0800dd14
 80011f4:	0800dd20 	.word	0x0800dd20

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f009 fd86 	bl	800ad18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <SystemClock_Config+0xb4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a21      	ldr	r2, [pc, #132]	; (80012ac <SystemClock_Config+0xb4>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <SystemClock_Config+0xb4>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <SystemClock_Config+0xb8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <SystemClock_Config+0xb8>)
 8001242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <SystemClock_Config+0xb8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001254:	2302      	movs	r3, #2
 8001256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800125c:	2310      	movs	r3, #16
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001260:	2300      	movs	r3, #0
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4618      	mov	r0, r3
 800126a:	f005 f809 	bl	8006280 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001274:	f000 f9b4 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f005 fa6c 	bl	8006770 <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800129e:	f000 f99f 	bl	80015e0 <Error_Handler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	3750      	adds	r7, #80	; 0x50
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_I2C1_Init+0x50>)
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <MX_I2C1_Init+0x54>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_I2C1_Init+0x50>)
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_I2C1_Init+0x58>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_I2C1_Init+0x50>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_I2C1_Init+0x50>)
 80012f2:	f003 fb91 	bl	8004a18 <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012fc:	f000 f970 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000214 	.word	0x20000214
 8001308:	40005400 	.word	0x40005400
 800130c:	000186a0 	.word	0x000186a0

08001310 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_SPI1_Init+0x64>)
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <MX_SPI1_Init+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_SPI1_Init+0x64>)
 800131c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_SPI1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_SPI1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_SPI1_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_SPI1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_SPI1_Init+0x64>)
 800133c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001340:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_SPI1_Init+0x64>)
 8001344:	2218      	movs	r2, #24
 8001346:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_SPI1_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_SPI1_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_SPI1_Init+0x64>)
 800135c:	220a      	movs	r2, #10
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_SPI1_Init+0x64>)
 8001362:	f005 fbe5 	bl	8006b30 <HAL_SPI_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800136c:	f000 f938 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000268 	.word	0x20000268
 8001378:	40013000 	.word	0x40013000

0800137c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_TIM2_Init+0x98>)
 800139a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_TIM2_Init+0x98>)
 80013a2:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80013a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_TIM2_Init+0x98>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_TIM2_Init+0x98>)
 80013b0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80013b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_TIM2_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_TIM2_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013c2:	4814      	ldr	r0, [pc, #80]	; (8001414 <MX_TIM2_Init+0x98>)
 80013c4:	f006 f95c 	bl	8007680 <HAL_TIM_Base_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013ce:	f000 f907 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4619      	mov	r1, r3
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <MX_TIM2_Init+0x98>)
 80013e0:	f006 fb37 	bl	8007a52 <HAL_TIM_ConfigClockSource>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013ea:	f000 f8f9 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_TIM2_Init+0x98>)
 80013fc:	f006 fd3c 	bl	8007e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001406:	f000 f8eb 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200002c0 	.word	0x200002c0

08001418 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_TIM5_Init+0x94>)
 8001436:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <MX_TIM5_Init+0x98>)
 8001438:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_TIM5_Init+0x94>)
 800143c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001440:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM5_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_TIM5_Init+0x94>)
 800144a:	2205      	movs	r2, #5
 800144c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_TIM5_Init+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_TIM5_Init+0x94>)
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <MX_TIM5_Init+0x94>)
 800145c:	f006 f910 	bl	8007680 <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001466:	f000 f8bb 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	4619      	mov	r1, r3
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_TIM5_Init+0x94>)
 8001478:	f006 faeb 	bl	8007a52 <HAL_TIM_ConfigClockSource>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001482:	f000 f8ad 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_TIM5_Init+0x94>)
 8001494:	f006 fcf0 	bl	8007e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800149e:	f000 f89f 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000308 	.word	0x20000308
 80014b0:	40000c00 	.word	0x40000c00

080014b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_USART1_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ec:	f006 fd46 	bl	8007f7c <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014f6:	f000 f873 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000350 	.word	0x20000350
 8001504:	40011000 	.word	0x40011000

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <MX_GPIO_Init+0xcc>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <MX_GPIO_Init+0xcc>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <MX_GPIO_Init+0xcc>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <MX_GPIO_Init+0xcc>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <MX_GPIO_Init+0xcc>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_GPIO_Init+0xcc>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_Cs_GPIO_Port, SPI_Cs_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2110      	movs	r1, #16
 800155a:	481f      	ldr	r0, [pc, #124]	; (80015d8 <MX_GPIO_Init+0xd0>)
 800155c:	f003 fa1e 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT_SHUTDOWN_GPIO_Port, SPIRIT_SHUTDOWN_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2102      	movs	r1, #2
 8001564:	481d      	ldr	r0, [pc, #116]	; (80015dc <MX_GPIO_Init+0xd4>)
 8001566:	f003 fa19 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_Cs_Pin */
  GPIO_InitStruct.Pin = SPI_Cs_Pin;
 800156a:	2310      	movs	r3, #16
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_Cs_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4619      	mov	r1, r3
 8001580:	4815      	ldr	r0, [pc, #84]	; (80015d8 <MX_GPIO_Init+0xd0>)
 8001582:	f003 f887 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRIT1_GPIO0_Pin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO0_Pin;
 8001586:	2301      	movs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800158a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO0_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	4619      	mov	r1, r3
 800159a:	4810      	ldr	r0, [pc, #64]	; (80015dc <MX_GPIO_Init+0xd4>)
 800159c:	f003 f87a 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRIT_SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SPIRIT_SHUTDOWN_Pin;
 80015a0:	2302      	movs	r3, #2
 80015a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT_SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4809      	ldr	r0, [pc, #36]	; (80015dc <MX_GPIO_Init+0xd4>)
 80015b8:	f003 f86c 	bl	8004694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2100      	movs	r1, #0
 80015c0:	2006      	movs	r0, #6
 80015c2:	f003 f822 	bl	800460a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015c6:	2006      	movs	r0, #6
 80015c8:	f003 f83b 	bl	8004642 <HAL_NVIC_EnableIRQ>

}
 80015cc:	bf00      	nop
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>
	...

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_MspInit+0x4c>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_MspInit+0x4c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_MspInit+0x4c>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_MspInit+0x4c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_I2C_MspInit+0x84>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12b      	bne.n	80016b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_I2C_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <HAL_I2C_MspInit+0x88>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_I2C_MspInit+0x88>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800167a:	23c0      	movs	r3, #192	; 0xc0
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167e:	2312      	movs	r3, #18
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800168a:	2304      	movs	r3, #4
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <HAL_I2C_MspInit+0x8c>)
 8001696:	f002 fffd 	bl	8004694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_I2C_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_I2C_MspInit+0x88>)
 80016a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_I2C_MspInit+0x88>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40005400 	.word	0x40005400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020400 	.word	0x40020400

080016cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	; (8001750 <HAL_SPI_MspInit+0x84>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d12b      	bne.n	8001746 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_SPI_MspInit+0x88>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_SPI_MspInit+0x88>)
 80016f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_SPI_MspInit+0x88>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_SPI_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <HAL_SPI_MspInit+0x88>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_SPI_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001726:	23e0      	movs	r3, #224	; 0xe0
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001736:	2305      	movs	r3, #5
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <HAL_SPI_MspInit+0x8c>)
 8001742:	f002 ffa7 	bl	8004694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	; 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40013000 	.word	0x40013000
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000

0800175c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176c:	d116      	bne.n	800179c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_TIM_Base_MspInit+0x80>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_TIM_Base_MspInit+0x80>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_TIM_Base_MspInit+0x80>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	201c      	movs	r0, #28
 8001790:	f002 ff3b 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001794:	201c      	movs	r0, #28
 8001796:	f002 ff54 	bl	8004642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800179a:	e01a      	b.n	80017d2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_TIM_Base_MspInit+0x84>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d115      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_TIM_Base_MspInit+0x80>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_TIM_Base_MspInit+0x80>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_TIM_Base_MspInit+0x80>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2032      	movs	r0, #50	; 0x32
 80017c8:	f002 ff1f 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80017cc:	2032      	movs	r0, #50	; 0x32
 80017ce:	f002 ff38 	bl	8004642 <HAL_NVIC_EnableIRQ>
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40000c00 	.word	0x40000c00

080017e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a19      	ldr	r2, [pc, #100]	; (8001868 <HAL_UART_MspInit+0x84>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d12c      	bne.n	8001860 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_UART_MspInit+0x88>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_UART_MspInit+0x88>)
 8001810:	f043 0310 	orr.w	r3, r3, #16
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_UART_MspInit+0x88>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_UART_MspInit+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_UART_MspInit+0x88>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_UART_MspInit+0x88>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800183e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001850:	2307      	movs	r3, #7
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_UART_MspInit+0x8c>)
 800185c:	f002 ff1a 	bl	8004694 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40011000 	.word	0x40011000
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f002 fd60 	bl	8004384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  SpiritIrqGetStatus(&irqStatus);
 80018cc:	4806      	ldr	r0, [pc, #24]	; (80018e8 <EXTI0_IRQHandler+0x20>)
 80018ce:	f000 fbe7 	bl	80020a0 <SpiritIrqGetStatus>
  SpiritIrqClearStatus();
 80018d2:	f000 fc17 	bl	8002104 <SpiritIrqClearStatus>
  interrupt_flag = 1;
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <EXTI0_IRQHandler+0x24>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO0_Pin);
 80018dc:	2001      	movs	r0, #1
 80018de:	f003 f877 	bl	80049d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200003ac 	.word	0x200003ac
 80018ec:	20000394 	.word	0x20000394

080018f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <TIM2_IRQHandler+0x10>)
 80018f6:	f005 ffa4 	bl	8007842 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002c0 	.word	0x200002c0

08001904 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  trigger = true;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <TIM5_IRQHandler+0x14>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800190e:	4803      	ldr	r0, [pc, #12]	; (800191c <TIM5_IRQHandler+0x18>)
 8001910:	f005 ff97 	bl	8007842 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200003e2 	.word	0x200003e2
 800191c:	20000308 	.word	0x20000308

08001920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
	return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_kill>:

int _kill(int pid, int sig)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800193a:	f009 f9b5 	bl	800aca8 <__errno>
 800193e:	4603      	mov	r3, r0
 8001940:	2216      	movs	r2, #22
 8001942:	601a      	str	r2, [r3, #0]
	return -1;
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_exit>:

void _exit (int status)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffe7 	bl	8001930 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001962:	e7fe      	b.n	8001962 <_exit+0x12>

08001964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e00a      	b.n	800198c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001976:	f3af 8000 	nop.w
 800197a:	4601      	mov	r1, r0
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf0      	blt.n	8001976 <_read+0x12>
	}

return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e009      	b.n	80019c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf1      	blt.n	80019b0 <_write+0x12>
	}
	return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_close>:

int _close(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
	return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_isatty>:

int _isatty(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	return 1;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f009 f91a 	bl	800aca8 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20020000 	.word	0x20020000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	200003e4 	.word	0x200003e4
 8001aa8:	20009530 	.word	0x20009530

08001aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <Reset_Handler>:
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopFillZerobss+0x12>
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopFillZerobss+0x16>)
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1a>)
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <LoopFillZerobss+0x1e>)
 8001ada:	2300      	movs	r3, #0
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:
 8001ade:	58d4      	ldr	r4, [r2, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:
 8001ae4:	18c4      	adds	r4, r0, r3
 8001ae6:	428c      	cmp	r4, r1
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <LoopFillZerobss+0x22>)
 8001aec:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <LoopFillZerobss+0x26>)
 8001aee:	2300      	movs	r3, #0
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:
 8001af6:	42a2      	cmp	r2, r4
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>
 8001afa:	f7ff ffd7 	bl	8001aac <SystemInit>
 8001afe:	f009 f8d9 	bl	800acb4 <__libc_init_array>
 8001b02:	f7ff fa4b 	bl	8000f9c <main>
 8001b06:	4770      	bx	lr
 8001b08:	20020000 	.word	0x20020000
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	200001f8 	.word	0x200001f8
 8001b14:	08010254 	.word	0x08010254
 8001b18:	200001f8 	.word	0x200001f8
 8001b1c:	2000952c 	.word	0x2000952c

08001b20 <ADC_IRQHandler>:
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>
	...

08001b24 <SpiritAesMode>:
 * @param  xNewState new state for AES engine.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None
 */
void SpiritAesMode(SpiritFunctionalState xNewState)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Modifies the register value */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8001b32:	f107 030f 	add.w	r3, r7, #15
 8001b36:	461a      	mov	r2, r3
 8001b38:	2101      	movs	r1, #1
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f002 fa9a 	bl	8004074 <RadioSpiReadRegisters>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <SpiritAesMode+0x70>)
 8001b44:	b212      	sxth	r2, r2
 8001b46:	4611      	mov	r1, r2
 8001b48:	7019      	strb	r1, [r3, #0]
 8001b4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b4e:	705a      	strb	r2, [r3, #1]
  if(xNewState == S_ENABLE)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d105      	bne.n	8001b62 <SpiritAesMode+0x3e>
  {
    tempRegValue |= AES_MASK;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	f043 0320 	orr.w	r3, r3, #32
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e004      	b.n	8001b6c <SpiritAesMode+0x48>
  }
  else
  {
    tempRegValue &= ~AES_MASK;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	f023 0320 	bic.w	r3, r3, #32
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the ANA_FUNC_CONF0 register to enable or disable the AES engine */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8001b6c:	f107 030f 	add.w	r3, r7, #15
 8001b70:	461a      	mov	r2, r3
 8001b72:	2101      	movs	r1, #1
 8001b74:	2001      	movs	r0, #1
 8001b76:	f002 fa31 	bl	8003fdc <RadioSpiWriteRegisters>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SpiritAesMode+0x70>)
 8001b7e:	b212      	sxth	r2, r2
 8001b80:	4611      	mov	r1, r2
 8001b82:	7019      	strb	r1, [r3, #0]
 8001b84:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b88:	705a      	strb	r2, [r3, #1]

}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200003f0 	.word	0x200003f0

08001b98 <SpiritAesWriteDataIn>:
 * @param  cDataLength length of data in bytes.
 *         This parameter is an uint8_t.
 * @retval None
 */
void SpiritAesWriteDataIn(uint8_t* pcBufferDataIn, uint8_t cDataLength)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dataInArray[16];

  /* Verifies that there are no more than 16 bytes */
  (cDataLength>16) ? (cDataLength=16) : cDataLength;
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d901      	bls.n	8001bae <SpiritAesWriteDataIn+0x16>
 8001baa:	2310      	movs	r3, #16
 8001bac:	70fb      	strb	r3, [r7, #3]

  /* Fill the dataInArray with the data buffer, using padding */
  for(i=0;i<16;i++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	77fb      	strb	r3, [r7, #31]
 8001bb2:	e01b      	b.n	8001bec <SpiritAesWriteDataIn+0x54>
  {
    (i<(16 - cDataLength)) ? (dataInArray[i]=0):(dataInArray[i]=pcBufferDataIn[15-i]);
 8001bb4:	7ffa      	ldrb	r2, [r7, #31]
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f1c3 0310 	rsb	r3, r3, #16
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	da06      	bge.n	8001bce <SpiritAesWriteDataIn+0x36>
 8001bc0:	7ffb      	ldrb	r3, [r7, #31]
 8001bc2:	3320      	adds	r3, #32
 8001bc4:	443b      	add	r3, r7
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001bcc:	e00b      	b.n	8001be6 <SpiritAesWriteDataIn+0x4e>
 8001bce:	7ffb      	ldrb	r3, [r7, #31]
 8001bd0:	f1c3 030f 	rsb	r3, r3, #15
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	441a      	add	r2, r3
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	3320      	adds	r3, #32
 8001be0:	443b      	add	r3, r7
 8001be2:	f803 2c14 	strb.w	r2, [r3, #-20]
  for(i=0;i<16;i++)
 8001be6:	7ffb      	ldrb	r3, [r7, #31]
 8001be8:	3301      	adds	r3, #1
 8001bea:	77fb      	strb	r3, [r7, #31]
 8001bec:	7ffb      	ldrb	r3, [r7, #31]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	d9e0      	bls.n	8001bb4 <SpiritAesWriteDataIn+0x1c>

  }

  /* Writes the AES_DATA_IN registers */
  g_xStatus = SpiritSpiWriteRegisters(AES_DATA_IN_15_BASE, 16, dataInArray);
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	2080      	movs	r0, #128	; 0x80
 8001bfc:	f002 f9ee 	bl	8003fdc <RadioSpiWriteRegisters>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <SpiritAesWriteDataIn+0x80>)
 8001c04:	b212      	sxth	r2, r2
 8001c06:	4611      	mov	r1, r2
 8001c08:	7019      	strb	r1, [r3, #0]
 8001c0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c0e:	705a      	strb	r2, [r3, #1]

}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200003f0 	.word	0x200003f0

08001c1c <SpiritAesReadDataOut>:
 * @param  cDataLength length of data to read in bytes.
 *         This parameter is a uint8_t.
 * @retval None
 */
void SpiritAesReadDataOut(uint8_t* pcBufferDataOut, uint8_t cDataLength)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  uint8_t address, dataOutArray[16];

  /* Verifies that there are no more than 16 bytes */
  (cDataLength>16) ? (cDataLength=16) : cDataLength;
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d901      	bls.n	8001c32 <SpiritAesReadDataOut+0x16>
 8001c2e:	2310      	movs	r3, #16
 8001c30:	70fb      	strb	r3, [r7, #3]

  /* Evaluates the address of AES_DATA_OUT from which start to read */
  address = AES_DATA_OUT_15_BASE+16-cDataLength;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8001c38:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8001c3c:	33e4      	adds	r3, #228	; 0xe4
 8001c3e:	76fb      	strb	r3, [r7, #27]

  /* Reads the exact number of AES_DATA_OUT registers */
  g_xStatus = (SpiritSpiReadRegisters(address, cDataLength, dataOutArray));
 8001c40:	f107 0208 	add.w	r2, r7, #8
 8001c44:	78f9      	ldrb	r1, [r7, #3]
 8001c46:	7efb      	ldrb	r3, [r7, #27]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 fa13 	bl	8004074 <RadioSpiReadRegisters>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <SpiritAesReadDataOut+0x74>)
 8001c52:	b212      	sxth	r2, r2
 8001c54:	4611      	mov	r1, r2
 8001c56:	7019      	strb	r1, [r3, #0]
 8001c58:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c5c:	705a      	strb	r2, [r3, #1]

  /* Copy in the user buffer the read values changing the order */
  for(int i = (cDataLength-1); i>=0; i--)
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e00c      	b.n	8001c80 <SpiritAesReadDataOut+0x64>
  {
    *pcBufferDataOut = dataOutArray[i];
 8001c66:	f107 0208 	add.w	r2, r7, #8
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	701a      	strb	r2, [r3, #0]
    pcBufferDataOut++;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
  for(int i = (cDataLength-1); i>=0; i--)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	daef      	bge.n	8001c66 <SpiritAesReadDataOut+0x4a>
  }

}
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200003f0 	.word	0x200003f0

08001c94 <SpiritAesWriteKey>:
 *         The last byte of the buffer shall be the less significant byte AES_KEY_15 of the AES key.
 * 	   This parameter is an uint8_t*.
 * @retval None
 */
void SpiritAesWriteKey(uint8_t* pcKey)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint8_t pcTempKey[16]; 
  for (uint8_t i = 0; i < 16; i++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	77fb      	strb	r3, [r7, #31]
 8001ca0:	e00d      	b.n	8001cbe <SpiritAesWriteKey+0x2a>
  {
    pcTempKey[15-i] = pcKey[i];
 8001ca2:	7ffb      	ldrb	r3, [r7, #31]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	441a      	add	r2, r3
 8001ca8:	7ffb      	ldrb	r3, [r7, #31]
 8001caa:	f1c3 030f 	rsb	r3, r3, #15
 8001cae:	7812      	ldrb	r2, [r2, #0]
 8001cb0:	3320      	adds	r3, #32
 8001cb2:	443b      	add	r3, r7
 8001cb4:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (uint8_t i = 0; i < 16; i++)
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	77fb      	strb	r3, [r7, #31]
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d9ee      	bls.n	8001ca2 <SpiritAesWriteKey+0xe>
  }
  
  /* Writes the AES_DATA_IN registers */
  g_xStatus = SpiritSpiWriteRegisters(AES_KEY_IN_15_BASE, 16, pcTempKey);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2070      	movs	r0, #112	; 0x70
 8001cce:	f002 f985 	bl	8003fdc <RadioSpiWriteRegisters>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SpiritAesWriteKey+0x58>)
 8001cd6:	b212      	sxth	r2, r2
 8001cd8:	4611      	mov	r1, r2
 8001cda:	7019      	strb	r1, [r3, #0]
 8001cdc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ce0:	705a      	strb	r2, [r3, #1]

}
 8001ce2:	bf00      	nop
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200003f0 	.word	0x200003f0

08001cf0 <SpiritAesExecuteEncryption>:
 * @brief  Executes the encryption operation.
 * @param  None.
 * @retval None.
 */
void SpiritAesExecuteEncryption(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Sends the COMMAND_AES_ENC command */
  g_xStatus = SpiritSpiCommandStrobes(COMMAND_AES_ENC);
 8001cf4:	206a      	movs	r0, #106	; 0x6a
 8001cf6:	f002 fa09 	bl	800410c <RadioSpiCommandStrobes>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SpiritAesExecuteEncryption+0x20>)
 8001cfe:	b212      	sxth	r2, r2
 8001d00:	4611      	mov	r1, r2
 8001d02:	7019      	strb	r1, [r3, #0]
 8001d04:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d08:	705a      	strb	r2, [r3, #1]

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200003f0 	.word	0x200003f0

08001d14 <SpiritAesDeriveDecKeyExecuteDec>:
 * @brief  Executes the key derivation and the decryption operation.
 * @param  None.
 * @retval None.
 */
void SpiritAesDeriveDecKeyExecuteDec(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Sends the COMMAND_AES_KEY_DEC command */
  g_xStatus = SpiritSpiCommandStrobes(COMMAND_AES_KEY_DEC);
 8001d18:	206d      	movs	r0, #109	; 0x6d
 8001d1a:	f002 f9f7 	bl	800410c <RadioSpiCommandStrobes>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SpiritAesDeriveDecKeyExecuteDec+0x20>)
 8001d22:	b212      	sxth	r2, r2
 8001d24:	4611      	mov	r1, r2
 8001d26:	7019      	strb	r1, [r3, #0]
 8001d28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d2c:	705a      	strb	r2, [r3, #1]

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200003f0 	.word	0x200003f0

08001d38 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001d42:	f107 030f 	add.w	r3, r7, #15
 8001d46:	461a      	mov	r2, r3
 8001d48:	2101      	movs	r1, #1
 8001d4a:	2050      	movs	r0, #80	; 0x50
 8001d4c:	f002 f992 	bl	8004074 <RadioSpiReadRegisters>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <SpiritCalibrationVco+0x6c>)
 8001d54:	b212      	sxth	r2, r2
 8001d56:	4611      	mov	r1, r2
 8001d58:	7019      	strb	r1, [r3, #0]
 8001d5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d5e:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d105      	bne.n	8001d72 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e004      	b.n	8001d7c <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	f023 0302 	bic.w	r3, r3, #2
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001d7c:	f107 030f 	add.w	r3, r7, #15
 8001d80:	461a      	mov	r2, r3
 8001d82:	2101      	movs	r1, #1
 8001d84:	2050      	movs	r0, #80	; 0x50
 8001d86:	f002 f929 	bl	8003fdc <RadioSpiWriteRegisters>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SpiritCalibrationVco+0x6c>)
 8001d8e:	b212      	sxth	r2, r2
 8001d90:	4611      	mov	r1, r2
 8001d92:	7019      	strb	r1, [r3, #0]
 8001d94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d98:	705a      	strb	r2, [r3, #1]

}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200003f0 	.word	0x200003f0

08001da8 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001dae:	1dfb      	adds	r3, r7, #7
 8001db0:	461a      	mov	r2, r3
 8001db2:	2101      	movs	r1, #1
 8001db4:	20e5      	movs	r0, #229	; 0xe5
 8001db6:	f002 f95d 	bl	8004074 <RadioSpiReadRegisters>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <SpiritCalibrationGetVcoCalData+0x34>)
 8001dbe:	b212      	sxth	r2, r2
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	7019      	strb	r1, [r3, #0]
 8001dc4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001dc8:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd0:	b2db      	uxtb	r3, r3

}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200003f0 	.word	0x200003f0

08001de0 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001dea:	f107 030f 	add.w	r3, r7, #15
 8001dee:	461a      	mov	r2, r3
 8001df0:	2101      	movs	r1, #1
 8001df2:	206e      	movs	r0, #110	; 0x6e
 8001df4:	f002 f93e 	bl	8004074 <RadioSpiReadRegisters>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001dfc:	b212      	sxth	r2, r2
 8001dfe:	4611      	mov	r1, r2
 8001e00:	7019      	strb	r1, [r3, #0]
 8001e02:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e06:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001e1c:	f107 030f 	add.w	r3, r7, #15
 8001e20:	461a      	mov	r2, r3
 8001e22:	2101      	movs	r1, #1
 8001e24:	206e      	movs	r0, #110	; 0x6e
 8001e26:	f002 f8d9 	bl	8003fdc <RadioSpiWriteRegisters>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001e2e:	b212      	sxth	r2, r2
 8001e30:	4611      	mov	r1, r2
 8001e32:	7019      	strb	r1, [r3, #0]
 8001e34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e38:	705a      	strb	r2, [r3, #1]

}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200003f0 	.word	0x200003f0

08001e48 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001e52:	f107 030f 	add.w	r3, r7, #15
 8001e56:	461a      	mov	r2, r3
 8001e58:	2101      	movs	r1, #1
 8001e5a:	206f      	movs	r0, #111	; 0x6f
 8001e5c:	f002 f90a 	bl	8004074 <RadioSpiReadRegisters>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001e64:	b212      	sxth	r2, r2
 8001e66:	4611      	mov	r1, r2
 8001e68:	7019      	strb	r1, [r3, #0]
 8001e6a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e6e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001e84:	f107 030f 	add.w	r3, r7, #15
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	206f      	movs	r0, #111	; 0x6f
 8001e8e:	f002 f8a5 	bl	8003fdc <RadioSpiWriteRegisters>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001e96:	b212      	sxth	r2, r2
 8001e98:	4611      	mov	r1, r2
 8001e9a:	7019      	strb	r1, [r3, #0]
 8001e9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ea0:	705a      	strb	r2, [r3, #1]

}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200003f0 	.word	0x200003f0

08001eb0 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001eba:	f107 030f 	add.w	r3, r7, #15
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	209e      	movs	r0, #158	; 0x9e
 8001ec4:	f002 f8d6 	bl	8004074 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	f023 0306 	bic.w	r3, r3, #6
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	e004      	b.n	8001eee <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001eee:	f107 030f 	add.w	r3, r7, #15
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	209e      	movs	r0, #158	; 0x9e
 8001ef8:	f002 f870 	bl	8003fdc <RadioSpiWriteRegisters>
  
}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 f8fb 	bl	800410c <RadioSpiCommandStrobes>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SpiritCmdStrobeCommand+0x2c>)
 8001f1a:	b212      	sxth	r2, r2
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	7019      	strb	r1, [r3, #0]
 8001f20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f24:	705a      	strb	r2, [r3, #1]
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200003f0 	.word	0x200003f0

08001f34 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	785a      	ldrb	r2, [r3, #1]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	789b      	ldrb	r3, [r3, #2]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	f107 020f 	add.w	r2, r7, #15
 8001f56:	2101      	movs	r1, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 f83f 	bl	8003fdc <RadioSpiWriteRegisters>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SpiritGpioInit+0x44>)
 8001f62:	b212      	sxth	r2, r2
 8001f64:	4611      	mov	r1, r2
 8001f66:	7019      	strb	r1, [r3, #0]
 8001f68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f6c:	705a      	strb	r2, [r3, #1]

}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200003f0 	.word	0x200003f0

08001f7c <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	2204      	movs	r2, #4
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 febe 	bl	800ad18 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	461a      	mov	r2, r3
 8001fae:	2104      	movs	r1, #4
 8001fb0:	2090      	movs	r0, #144	; 0x90
 8001fb2:	f002 f813 	bl	8003fdc <RadioSpiWriteRegisters>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <SpiritIrqDeInit+0x54>)
 8001fba:	b212      	sxth	r2, r2
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	7019      	strb	r1, [r3, #0]
 8001fc0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fc4:	705a      	strb	r2, [r3, #1]
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200003f0 	.word	0x200003f0

08001fd4 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2104      	movs	r1, #4
 8001fec:	2090      	movs	r0, #144	; 0x90
 8001fee:	f002 f841 	bl	8004074 <RadioSpiReadRegisters>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <SpiritIrq+0xc8>)
 8001ff6:	b212      	sxth	r2, r2
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	7019      	strb	r1, [r3, #0]
 8001ffc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002000:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8002002:	2300      	movs	r3, #0
 8002004:	74fb      	strb	r3, [r7, #19]
 8002006:	e011      	b.n	800202c <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	3318      	adds	r3, #24
 800200c:	443b      	add	r3, r7
 800200e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002012:	461a      	mov	r2, r3
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	f1c3 0303 	rsb	r3, r3, #3
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	4413      	add	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002026:	7cfb      	ldrb	r3, [r7, #19]
 8002028:	3301      	adds	r3, #1
 800202a:	74fb      	strb	r3, [r7, #19]
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d9ea      	bls.n	8002008 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	43db      	mvns	r3, r3
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e003      	b.n	800204c <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 800204c:	2300      	movs	r3, #0
 800204e:	74bb      	strb	r3, [r7, #18]
 8002050:	e00e      	b.n	8002070 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8002052:	7cbb      	ldrb	r3, [r7, #18]
 8002054:	f1c3 0303 	rsb	r3, r3, #3
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	40da      	lsrs	r2, r3
 800205e:	7cbb      	ldrb	r3, [r7, #18]
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	3318      	adds	r3, #24
 8002064:	443b      	add	r3, r7
 8002066:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 800206a:	7cbb      	ldrb	r3, [r7, #18]
 800206c:	3301      	adds	r3, #1
 800206e:	74bb      	strb	r3, [r7, #18]
 8002070:	7cbb      	ldrb	r3, [r7, #18]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d9ed      	bls.n	8002052 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	461a      	mov	r2, r3
 800207c:	2104      	movs	r1, #4
 800207e:	2090      	movs	r0, #144	; 0x90
 8002080:	f001 ffac 	bl	8003fdc <RadioSpiWriteRegisters>
 8002084:	4602      	mov	r2, r0
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <SpiritIrq+0xc8>)
 8002088:	b212      	sxth	r2, r2
 800208a:	4611      	mov	r1, r2
 800208c:	7019      	strb	r1, [r3, #0]
 800208e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002092:	705a      	strb	r2, [r3, #1]

}
 8002094:	bf00      	nop
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200003f0 	.word	0x200003f0

080020a0 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	461a      	mov	r2, r3
 80020b2:	2104      	movs	r1, #4
 80020b4:	20fa      	movs	r0, #250	; 0xfa
 80020b6:	f001 ffdd 	bl	8004074 <RadioSpiReadRegisters>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <SpiritIrqGetStatus+0x60>)
 80020be:	b212      	sxth	r2, r2
 80020c0:	4611      	mov	r1, r2
 80020c2:	7019      	strb	r1, [r3, #0]
 80020c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020c8:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	74fb      	strb	r3, [r7, #19]
 80020ce:	e00e      	b.n	80020ee <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	f1c3 0303 	rsb	r3, r3, #3
 80020d6:	3318      	adds	r3, #24
 80020d8:	443b      	add	r3, r7
 80020da:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	3301      	adds	r3, #1
 80020ec:	74fb      	strb	r3, [r7, #19]
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d9ed      	bls.n	80020d0 <SpiritIrqGetStatus+0x30>
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200003f0 	.word	0x200003f0

08002104 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	461a      	mov	r2, r3
 800210e:	2104      	movs	r1, #4
 8002110:	20fa      	movs	r0, #250	; 0xfa
 8002112:	f001 ffaf 	bl	8004074 <RadioSpiReadRegisters>
 8002116:	4602      	mov	r2, r0
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <SpiritIrqClearStatus+0x2c>)
 800211a:	b212      	sxth	r2, r2
 800211c:	4611      	mov	r1, r2
 800211e:	7019      	strb	r1, [r3, #0]
 8002120:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002124:	705a      	strb	r2, [r3, #1]

}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200003f0 	.word	0x200003f0

08002134 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	461a      	mov	r2, r3
 800213e:	2101      	movs	r1, #1
 8002140:	20e7      	movs	r0, #231	; 0xe7
 8002142:	f001 ff97 	bl	8004074 <RadioSpiReadRegisters>
 8002146:	4602      	mov	r2, r0
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 800214a:	b212      	sxth	r2, r2
 800214c:	4611      	mov	r1, r2
 800214e:	7019      	strb	r1, [r3, #0]
 8002150:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002154:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800215c:	b2db      	uxtb	r3, r3

}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200003f0 	.word	0x200003f0

0800216c <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 800216c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002170:	b08a      	sub	sp, #40	; 0x28
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a70      	ldr	r2, [pc, #448]	; (800233c <SpiritManagementSetFrequencyBase+0x1d0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d307      	bcc.n	800218e <SpiritManagementSetFrequencyBase+0x22>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a6f      	ldr	r2, [pc, #444]	; (8002340 <SpiritManagementSetFrequencyBase+0x1d4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d803      	bhi.n	800218e <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800218c:	e01a      	b.n	80021c4 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a6c      	ldr	r2, [pc, #432]	; (8002344 <SpiritManagementSetFrequencyBase+0x1d8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d907      	bls.n	80021a6 <SpiritManagementSetFrequencyBase+0x3a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a6b      	ldr	r2, [pc, #428]	; (8002348 <SpiritManagementSetFrequencyBase+0x1dc>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d803      	bhi.n	80021a6 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021a4:	e00e      	b.n	80021c4 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a68      	ldr	r2, [pc, #416]	; (800234c <SpiritManagementSetFrequencyBase+0x1e0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d907      	bls.n	80021be <SpiritManagementSetFrequencyBase+0x52>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a67      	ldr	r2, [pc, #412]	; (8002350 <SpiritManagementSetFrequencyBase+0x1e4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d803      	bhi.n	80021be <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 80021b6:	2302      	movs	r3, #2
 80021b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021bc:	e002      	b.n	80021c4 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 80021be:	2303      	movs	r3, #3
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80021c4:	f000 fff6 	bl	80031b4 <SpiritRadioGetFrequencyOffset>
 80021c8:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80021ca:	f000 ffd3 	bl	8003174 <SpiritRadioGetChannelSpace>
 80021ce:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80021d0:	f000 ffb8 	bl	8003144 <SpiritRadioGetChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80021d8:	6a3a      	ldr	r2, [r7, #32]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	441a      	add	r2, r3
 80021de:	7efb      	ldrb	r3, [r7, #27]
 80021e0:	69f9      	ldr	r1, [r7, #28]
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80021ea:	f001 fdd3 	bl	8003d94 <SpiritRadioGetRefDiv>
 80021ee:	4603      	mov	r3, r0
 80021f0:	3301      	adds	r3, #1
 80021f2:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80021f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d83a      	bhi.n	8002272 <SpiritManagementSetFrequencyBase+0x106>
 80021fc:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <SpiritManagementSetFrequencyBase+0x98>)
 80021fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002202:	bf00      	nop
 8002204:	0800225d 	.word	0x0800225d
 8002208:	08002245 	.word	0x08002245
 800220c:	0800222d 	.word	0x0800222d
 8002210:	08002215 	.word	0x08002215
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	4a4f      	ldr	r2, [pc, #316]	; (8002354 <SpiritManagementSetFrequencyBase+0x1e8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d803      	bhi.n	8002224 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff fe47 	bl	8001eb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002222:	e026      	b.n	8002272 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002224:	2001      	movs	r0, #1
 8002226:	f7ff fe43 	bl	8001eb0 <SpiritCalibrationSelectVco>
    break;
 800222a:	e022      	b.n	8002272 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	4a4a      	ldr	r2, [pc, #296]	; (8002358 <SpiritManagementSetFrequencyBase+0x1ec>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d803      	bhi.n	800223c <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff fe3b 	bl	8001eb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800223a:	e01a      	b.n	8002272 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff fe37 	bl	8001eb0 <SpiritCalibrationSelectVco>
    break;
 8002242:	e016      	b.n	8002272 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	4a45      	ldr	r2, [pc, #276]	; (800235c <SpiritManagementSetFrequencyBase+0x1f0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d803      	bhi.n	8002254 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff fe2f 	bl	8001eb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002252:	e00e      	b.n	8002272 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff fe2b 	bl	8001eb0 <SpiritCalibrationSelectVco>
    break;
 800225a:	e00a      	b.n	8002272 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	4a40      	ldr	r2, [pc, #256]	; (8002360 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d803      	bhi.n	800226c <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002264:	2000      	movs	r0, #0
 8002266:	f7ff fe23 	bl	8001eb0 <SpiritCalibrationSelectVco>
 800226a:	e002      	b.n	8002272 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 800226c:	2001      	movs	r0, #1
 800226e:	f7ff fe1f 	bl	8001eb0 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f000 fe7e 	bl	8002f74 <SpiritRadioSearchWCP>
 8002278:	4603      	mov	r3, r0
 800227a:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7fe f949 	bl	8000514 <__aeabi_ui2d>
 8002282:	4604      	mov	r4, r0
 8002284:	460d      	mov	r5, r1
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800228c:	4935      	ldr	r1, [pc, #212]	; (8002364 <SpiritManagementSetFrequencyBase+0x1f8>)
 800228e:	5c8a      	ldrb	r2, [r1, r2]
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	049b      	lsls	r3, r3, #18
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f94c 	bl	8000534 <__aeabi_i2d>
 800229c:	4680      	mov	r8, r0
 800229e:	4689      	mov	r9, r1
 80022a0:	f001 fdec 	bl	8003e7c <SpiritRadioGetXtalFrequency>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f934 	bl	8000514 <__aeabi_ui2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4640      	mov	r0, r8
 80022b2:	4649      	mov	r1, r9
 80022b4:	f7fe fad2 	bl	800085c <__aeabi_ddiv>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4620      	mov	r0, r4
 80022be:	4629      	mov	r1, r5
 80022c0:	f7fe f9a2 	bl	8000608 <__aeabi_dmul>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fc74 	bl	8000bb8 <__aeabi_d2uiz>
 80022d0:	4603      	mov	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	0d5b      	lsrs	r3, r3, #21
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	7cbb      	ldrb	r3, [r7, #18]
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	0b5b      	lsrs	r3, r3, #13
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	b2da      	uxtb	r2, r3
 8002304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002308:	4917      	ldr	r1, [pc, #92]	; (8002368 <SpiritManagementSetFrequencyBase+0x1fc>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	4313      	orrs	r3, r2
 800230e:	b2db      	uxtb	r3, r3
 8002310:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8002312:	f107 0308 	add.w	r3, r7, #8
 8002316:	461a      	mov	r2, r3
 8002318:	2104      	movs	r1, #4
 800231a:	2008      	movs	r0, #8
 800231c:	f001 fe5e 	bl	8003fdc <RadioSpiWriteRegisters>
 8002320:	4602      	mov	r2, r0
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <SpiritManagementSetFrequencyBase+0x200>)
 8002324:	b212      	sxth	r2, r2
 8002326:	4611      	mov	r1, r2
 8002328:	7019      	strb	r1, [r3, #0]
 800232a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800232e:	705a      	strb	r2, [r3, #1]
}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800233a:	bf00      	nop
 800233c:	2e5f5680 	.word	0x2e5f5680
 8002340:	390c2fe0 	.word	0x390c2fe0
 8002344:	1701e47f 	.word	0x1701e47f
 8002348:	1c146a60 	.word	0x1c146a60
 800234c:	11d260bf 	.word	0x11d260bf
 8002350:	14ced7e0 	.word	0x14ced7e0
 8002354:	099cf4e1 	.word	0x099cf4e1
 8002358:	1339e9c3 	.word	0x1339e9c3
 800235c:	19a28d05 	.word	0x19a28d05
 8002360:	33451a0a 	.word	0x33451a0a
 8002364:	0800fd10 	.word	0x0800fd10
 8002368:	0800fd0c 	.word	0x0800fd0c
 800236c:	200003f0 	.word	0x200003f0

08002370 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800237e:	f001 fd7d 	bl	8003e7c <SpiritRadioGetXtalFrequency>
 8002382:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002384:	2300      	movs	r3, #0
 8002386:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4a57      	ldr	r2, [pc, #348]	; (80024e8 <SpiritManagementWaVcoCalibration+0x178>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d90f      	bls.n	80023b0 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002390:	f001 fd00 	bl	8003d94 <SpiritRadioGetRefDiv>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800239e:	f001 f86b 	bl	8003478 <SpiritRadioGetFrequencyBase>
 80023a2:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f001 fcc5 	bl	8003d34 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fede 	bl	800216c <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 80023b0:	f001 f862 	bl	8003478 <SpiritRadioGetFrequencyBase>
 80023b4:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 80023b6:	2325      	movs	r3, #37	; 0x25
 80023b8:	707b      	strb	r3, [r7, #1]
 80023ba:	1c7b      	adds	r3, r7, #1
 80023bc:	461a      	mov	r2, r3
 80023be:	2101      	movs	r1, #1
 80023c0:	20a1      	movs	r0, #161	; 0xa1
 80023c2:	f001 fe0b 	bl	8003fdc <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f7ff fcb6 	bl	8001d38 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 80023cc:	f001 fdd4 	bl	8003f78 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <SpiritManagementWaVcoCalibration+0x17c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b40      	cmp	r3, #64	; 0x40
 80023dc:	d10d      	bne.n	80023fa <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 80023e2:	2062      	movs	r0, #98	; 0x62
 80023e4:	f7ff fd8e 	bl	8001f04 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80023e8:	f001 fdc6 	bl	8003f78 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80023ec:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <SpiritManagementWaVcoCalibration+0x17c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d1f6      	bne.n	80023e8 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80023fa:	2066      	movs	r0, #102	; 0x66
 80023fc:	f7ff fd82 	bl	8001f04 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002400:	2300      	movs	r3, #0
 8002402:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002404:	f001 fdb8 	bl	8003f78 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002408:	4b38      	ldr	r3, [pc, #224]	; (80024ec <SpiritManagementWaVcoCalibration+0x17c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b13      	cmp	r3, #19
 8002414:	d106      	bne.n	8002424 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 8002416:	7b7b      	ldrb	r3, [r7, #13]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	737a      	strb	r2, [r7, #13]
 800241c:	2b05      	cmp	r3, #5
 800241e:	d101      	bne.n	8002424 <SpiritManagementWaVcoCalibration+0xb4>
 8002420:	2301      	movs	r3, #1
 8002422:	e05d      	b.n	80024e0 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <SpiritManagementWaVcoCalibration+0x17c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d1e8      	bne.n	8002404 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 8002432:	f7ff fcb9 	bl	8001da8 <SpiritCalibrationGetVcoCalData>
 8002436:	4603      	mov	r3, r0
 8002438:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 800243a:	2062      	movs	r0, #98	; 0x62
 800243c:	f7ff fd62 	bl	8001f04 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002440:	f001 fd9a 	bl	8003f78 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <SpiritManagementWaVcoCalibration+0x17c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b03      	cmp	r3, #3
 8002450:	d1f6      	bne.n	8002440 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 8002452:	2065      	movs	r0, #101	; 0x65
 8002454:	f7ff fd56 	bl	8001f04 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002458:	2300      	movs	r3, #0
 800245a:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 800245c:	f001 fd8c 	bl	8003f78 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <SpiritManagementWaVcoCalibration+0x17c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b13      	cmp	r3, #19
 800246c:	d106      	bne.n	800247c <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 800246e:	7b7b      	ldrb	r3, [r7, #13]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	737a      	strb	r2, [r7, #13]
 8002474:	2b05      	cmp	r3, #5
 8002476:	d101      	bne.n	800247c <SpiritManagementWaVcoCalibration+0x10c>
 8002478:	2301      	movs	r3, #1
 800247a:	e031      	b.n	80024e0 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <SpiritManagementWaVcoCalibration+0x17c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b0f      	cmp	r3, #15
 8002488:	d1e8      	bne.n	800245c <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 800248a:	f7ff fc8d 	bl	8001da8 <SpiritCalibrationGetVcoCalData>
 800248e:	4603      	mov	r3, r0
 8002490:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8002492:	2062      	movs	r0, #98	; 0x62
 8002494:	f7ff fd36 	bl	8001f04 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002498:	f001 fd6e 	bl	8003f78 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <SpiritManagementWaVcoCalibration+0x17c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d1f6      	bne.n	8002498 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 80024aa:	7bbb      	ldrb	r3, [r7, #14]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d102      	bne.n	80024b6 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 80024b0:	2063      	movs	r0, #99	; 0x63
 80024b2:	f7ff fd27 	bl	8001f04 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7ff fc3e 	bl	8001d38 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 80024c2:	2000      	movs	r0, #0
 80024c4:	f001 fc36 	bl	8003d34 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff fe4f 	bl	800216c <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fc85 	bl	8001de0 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 80024d6:	78bb      	ldrb	r3, [r7, #2]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fcb5 	bl	8001e48 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	01c9c380 	.word	0x01c9c380
 80024ec:	200003f0 	.word	0x200003f0

080024f0 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <SpiritManagementWaCmdStrobeTx+0x60>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d023      	beq.n	8002548 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <SpiritManagementWaCmdStrobeTx+0x68>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d908      	bls.n	800251c <SpiritManagementWaCmdStrobeTx+0x2c>
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <SpiritManagementWaCmdStrobeTx+0x64>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a13      	ldr	r2, [pc, #76]	; (800255c <SpiritManagementWaCmdStrobeTx+0x6c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d803      	bhi.n	800251c <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8002514:	20c0      	movs	r0, #192	; 0xc0
 8002516:	f001 fb83 	bl	8003c20 <SpiritRadioSetPACwc>
 800251a:	e002      	b.n	8002522 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 800251c:	2000      	movs	r0, #0
 800251e:	f001 fb7f 	bl	8003c20 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 8002522:	2311      	movs	r3, #17
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	461a      	mov	r2, r3
 800252a:	2101      	movs	r1, #1
 800252c:	20a9      	movs	r0, #169	; 0xa9
 800252e:	f001 fd55 	bl	8003fdc <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 8002532:	2320      	movs	r3, #32
 8002534:	71fb      	strb	r3, [r7, #7]
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	461a      	mov	r2, r3
 800253a:	2101      	movs	r1, #1
 800253c:	20a5      	movs	r0, #165	; 0xa5
 800253e:	f001 fd4d 	bl	8003fdc <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 8002542:	4b03      	ldr	r3, [pc, #12]	; (8002550 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
  }
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	2000000c 	.word	0x2000000c
 8002554:	200003e8 	.word	0x200003e8
 8002558:	08f0d17f 	.word	0x08f0d17f
 800255c:	1c03a180 	.word	0x1c03a180

08002560 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d00d      	beq.n	800258c <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002570:	2398      	movs	r3, #152	; 0x98
 8002572:	71fb      	strb	r3, [r7, #7]
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	461a      	mov	r2, r3
 8002578:	2101      	movs	r1, #1
 800257a:	20a5      	movs	r0, #165	; 0xa5
 800257c:	f001 fd2e 	bl	8003fdc <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002580:	2000      	movs	r0, #0
 8002582:	f001 fb4d 	bl	8003c20 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002586:	4b03      	ldr	r3, [pc, #12]	; (8002594 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
  }
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	2000000c 	.word	0x2000000c

08002598 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <SpiritManagementWaTRxFcMem+0x20>)
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <SpiritManagementWaTRxFcMem+0x24>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	2000000c 	.word	0x2000000c
 80025bc:	200003e8 	.word	0x200003e8

080025c0 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 80025c6:	23ca      	movs	r3, #202	; 0xca
 80025c8:	71fb      	strb	r3, [r7, #7]
 80025ca:	1dfb      	adds	r3, r7, #7
 80025cc:	461a      	mov	r2, r3
 80025ce:	2101      	movs	r1, #1
 80025d0:	20b2      	movs	r0, #178	; 0xb2
 80025d2:	f001 fd03 	bl	8003fdc <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80025d6:	2304      	movs	r3, #4
 80025d8:	71fb      	strb	r3, [r7, #7]
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	461a      	mov	r2, r3
 80025de:	2101      	movs	r1, #1
 80025e0:	20a8      	movs	r0, #168	; 0xa8
 80025e2:	f001 fcfb 	bl	8003fdc <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	461a      	mov	r2, r3
 80025ea:	2101      	movs	r1, #1
 80025ec:	20a8      	movs	r0, #168	; 0xa8
 80025ee:	f001 fd41 	bl	8004074 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80025f2:	2300      	movs	r3, #0
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	461a      	mov	r2, r3
 80025fa:	2101      	movs	r1, #1
 80025fc:	20a8      	movs	r0, #168	; 0xa8
 80025fe:	f001 fced 	bl	8003fdc <RadioSpiWriteRegisters>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	461a      	mov	r2, r3
 800261a:	2101      	movs	r1, #1
 800261c:	2051      	movs	r0, #81	; 0x51
 800261e:	f001 fd29 	bl	8004074 <RadioSpiReadRegisters>
 8002622:	4602      	mov	r2, r0
 8002624:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <SpiritPktBasicInit+0x1a8>)
 8002626:	b212      	sxth	r2, r2
 8002628:	4611      	mov	r1, r2
 800262a:	7019      	strb	r1, [r3, #0]
 800262c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002630:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002632:	7a3b      	ldrb	r3, [r7, #8]
 8002634:	f023 0320 	bic.w	r3, r3, #32
 8002638:	b2db      	uxtb	r3, r3
 800263a:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 800263c:	7a3b      	ldrb	r3, [r7, #8]
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	b2db      	uxtb	r3, r3
 8002644:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	461a      	mov	r2, r3
 800264c:	2101      	movs	r1, #1
 800264e:	2051      	movs	r0, #81	; 0x51
 8002650:	f001 fcc4 	bl	8003fdc <RadioSpiWriteRegisters>
 8002654:	4602      	mov	r2, r0
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <SpiritPktBasicInit+0x1a8>)
 8002658:	b212      	sxth	r2, r2
 800265a:	4611      	mov	r1, r2
 800265c:	7019      	strb	r1, [r3, #0]
 800265e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002662:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002664:	f107 0308 	add.w	r3, r7, #8
 8002668:	461a      	mov	r2, r3
 800266a:	2101      	movs	r1, #1
 800266c:	204f      	movs	r0, #79	; 0x4f
 800266e:	f001 fd01 	bl	8004074 <RadioSpiReadRegisters>
 8002672:	4602      	mov	r2, r0
 8002674:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <SpiritPktBasicInit+0x1a8>)
 8002676:	b212      	sxth	r2, r2
 8002678:	4611      	mov	r1, r2
 800267a:	7019      	strb	r1, [r3, #0]
 800267c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002680:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002682:	7a3b      	ldrb	r3, [r7, #8]
 8002684:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002688:	b2db      	uxtb	r3, r3
 800268a:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	461a      	mov	r2, r3
 8002692:	2101      	movs	r1, #1
 8002694:	204f      	movs	r0, #79	; 0x4f
 8002696:	f001 fca1 	bl	8003fdc <RadioSpiWriteRegisters>
 800269a:	4602      	mov	r2, r0
 800269c:	4b45      	ldr	r3, [pc, #276]	; (80027b4 <SpiritPktBasicInit+0x1a8>)
 800269e:	b212      	sxth	r2, r2
 80026a0:	4611      	mov	r1, r2
 80026a2:	7019      	strb	r1, [r3, #0]
 80026a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026a8:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7b1b      	ldrb	r3, [r3, #12]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d102      	bne.n	80026b8 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 80026b2:	2308      	movs	r3, #8
 80026b4:	723b      	strb	r3, [r7, #8]
 80026b6:	e001      	b.n	80026bc <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 80026b8:	2300      	movs	r3, #0
 80026ba:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 80026bc:	7a3a      	ldrb	r2, [r7, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	7adb      	ldrb	r3, [r3, #11]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7a5b      	ldrb	r3, [r3, #9]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <SpiritPktBasicInit+0xca>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7a5b      	ldrb	r3, [r3, #9]
 80026da:	3b01      	subs	r3, #1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	785b      	ldrb	r3, [r3, #1]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7a9b      	ldrb	r3, [r3, #10]
 80026fa:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7b9b      	ldrb	r3, [r3, #14]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d104      	bne.n	800270e <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002704:	7afb      	ldrb	r3, [r7, #11]
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	b2db      	uxtb	r3, r3
 800270c:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7b5b      	ldrb	r3, [r3, #13]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d104      	bne.n	8002720 <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	461a      	mov	r2, r3
 8002726:	2104      	movs	r1, #4
 8002728:	2030      	movs	r0, #48	; 0x30
 800272a:	f001 fc57 	bl	8003fdc <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e01d      	b.n	8002770 <SpiritPktBasicInit+0x164>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	785b      	ldrb	r3, [r3, #1]
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f1c3 0303 	rsb	r3, r3, #3
 8002742:	429a      	cmp	r2, r3
 8002744:	da06      	bge.n	8002754 <SpiritPktBasicInit+0x148>
    {
      tempRegValue[i]=0;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	3310      	adds	r3, #16
 800274a:	443b      	add	r3, r7
 800274c:	2200      	movs	r2, #0
 800274e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002752:	e00a      	b.n	800276a <SpiritPktBasicInit+0x15e>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	40da      	lsrs	r2, r3
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	3310      	adds	r3, #16
 8002764:	443b      	add	r3, r7
 8002766:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	3301      	adds	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d9de      	bls.n	8002734 <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7a9b      	ldrb	r3, [r3, #10]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <SpiritPktBasicInit+0x17a>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 800277e:	2000      	movs	r0, #0
 8002780:	f000 f8fc 	bl	800297c <SpiritPktCommonFilterOnCrc>
 8002784:	e002      	b.n	800278c <SpiritPktBasicInit+0x180>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 8002786:	2001      	movs	r0, #1
 8002788:	f000 f8f8 	bl	800297c <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 800278c:	f107 0308 	add.w	r3, r7, #8
 8002790:	461a      	mov	r2, r3
 8002792:	2104      	movs	r1, #4
 8002794:	2036      	movs	r0, #54	; 0x36
 8002796:	f001 fc21 	bl	8003fdc <RadioSpiWriteRegisters>
 800279a:	4602      	mov	r2, r0
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <SpiritPktBasicInit+0x1a8>)
 800279e:	b212      	sxth	r2, r2
 80027a0:	4611      	mov	r1, r2
 80027a2:	7019      	strb	r1, [r3, #0]
 80027a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027a8:	705a      	strb	r2, [r3, #1]

}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200003f0 	.word	0x200003f0

080027b8 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	461a      	mov	r2, r3
 80027c6:	2101      	movs	r1, #1
 80027c8:	204f      	movs	r0, #79	; 0x4f
 80027ca:	f001 fc53 	bl	8004074 <RadioSpiReadRegisters>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <SpiritPktBasicAddressesInit+0xd8>)
 80027d2:	b212      	sxth	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	7019      	strb	r1, [r3, #0]
 80027d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027dc:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d105      	bne.n	80027f2 <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80027e6:	7b3b      	ldrb	r3, [r7, #12]
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	733b      	strb	r3, [r7, #12]
 80027f0:	e004      	b.n	80027fc <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80027f2:	7b3b      	ldrb	r3, [r7, #12]
 80027f4:	f023 0308 	bic.w	r3, r3, #8
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	789b      	ldrb	r3, [r3, #2]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002804:	7b3b      	ldrb	r3, [r7, #12]
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	b2db      	uxtb	r3, r3
 800280c:	733b      	strb	r3, [r7, #12]
 800280e:	e004      	b.n	800281a <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002810:	7b3b      	ldrb	r3, [r7, #12]
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	b2db      	uxtb	r3, r3
 8002818:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	791b      	ldrb	r3, [r3, #4]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d105      	bne.n	800282e <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002822:	7b3b      	ldrb	r3, [r7, #12]
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	b2db      	uxtb	r3, r3
 800282a:	733b      	strb	r3, [r7, #12]
 800282c:	e004      	b.n	8002838 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800282e:	7b3b      	ldrb	r3, [r7, #12]
 8002830:	f023 0302 	bic.w	r3, r3, #2
 8002834:	b2db      	uxtb	r3, r3
 8002836:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	461a      	mov	r2, r3
 800283e:	2101      	movs	r1, #1
 8002840:	204f      	movs	r0, #79	; 0x4f
 8002842:	f001 fbcb 	bl	8003fdc <RadioSpiWriteRegisters>
 8002846:	4602      	mov	r2, r0
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <SpiritPktBasicAddressesInit+0xd8>)
 800284a:	b212      	sxth	r2, r2
 800284c:	4611      	mov	r1, r2
 800284e:	7019      	strb	r1, [r3, #0]
 8002850:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002854:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	795b      	ldrb	r3, [r3, #5]
 800285a:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	78db      	ldrb	r3, [r3, #3]
 8002860:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	785b      	ldrb	r3, [r3, #1]
 8002866:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	461a      	mov	r2, r3
 800286e:	2103      	movs	r1, #3
 8002870:	204c      	movs	r0, #76	; 0x4c
 8002872:	f001 fbb3 	bl	8003fdc <RadioSpiWriteRegisters>
 8002876:	4602      	mov	r2, r0
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <SpiritPktBasicAddressesInit+0xd8>)
 800287a:	b212      	sxth	r2, r2
 800287c:	4611      	mov	r1, r2
 800287e:	7019      	strb	r1, [r3, #0]
 8002880:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002884:	705a      	strb	r2, [r3, #1]
  
  
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200003f0 	.word	0x200003f0

08002894 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	461a      	mov	r2, r3
 800289e:	2101      	movs	r1, #1
 80028a0:	2030      	movs	r0, #48	; 0x30
 80028a2:	f001 fbe7 	bl	8004074 <RadioSpiReadRegisters>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <SpiritPktBasicGetAddressField+0x3c>)
 80028aa:	b212      	sxth	r2, r2
 80028ac:	4611      	mov	r1, r2
 80028ae:	7019      	strb	r1, [r3, #0]
 80028b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028b4:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	f003 0318 	and.w	r3, r3, #24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 80028c4:	2300      	movs	r3, #0
  }

}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200003f0 	.word	0x200003f0

080028d4 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 80028de:	2300      	movs	r3, #0
 80028e0:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 80028e2:	f7ff ffd7 	bl	8002894 <SpiritPktBasicGetAddressField>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 80028f0:	f000 f828 	bl	8002944 <SpiritPktCommonGetControlLength>
 80028f4:	4603      	mov	r3, r0
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	89fb      	ldrh	r3, [r7, #14]
 80028fa:	4413      	add	r3, r2
 80028fc:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	89fb      	ldrh	r3, [r7, #14]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4413      	add	r3, r2
 8002908:	b2db      	uxtb	r3, r3
 800290a:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 800290c:	88fa      	ldrh	r2, [r7, #6]
 800290e:	89fb      	ldrh	r3, [r7, #14]
 8002910:	4413      	add	r3, r2
 8002912:	121b      	asrs	r3, r3, #8
 8002914:	b2db      	uxtb	r3, r3
 8002916:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002918:	f107 030c 	add.w	r3, r7, #12
 800291c:	461a      	mov	r2, r3
 800291e:	2102      	movs	r1, #2
 8002920:	2034      	movs	r0, #52	; 0x34
 8002922:	f001 fb5b 	bl	8003fdc <RadioSpiWriteRegisters>
 8002926:	4602      	mov	r2, r0
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <SpiritPktBasicSetPayloadLength+0x6c>)
 800292a:	b212      	sxth	r2, r2
 800292c:	4611      	mov	r1, r2
 800292e:	7019      	strb	r1, [r3, #0]
 8002930:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002934:	705a      	strb	r2, [r3, #1]

}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200003f0 	.word	0x200003f0

08002944 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	461a      	mov	r2, r3
 800294e:	2101      	movs	r1, #1
 8002950:	2030      	movs	r0, #48	; 0x30
 8002952:	f001 fb8f 	bl	8004074 <RadioSpiReadRegisters>
 8002956:	4602      	mov	r2, r0
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <SpiritPktCommonGetControlLength+0x34>)
 800295a:	b212      	sxth	r2, r2
 800295c:	4611      	mov	r1, r2
 800295e:	7019      	strb	r1, [r3, #0]
 8002960:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002964:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	b2db      	uxtb	r3, r3

}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200003f0 	.word	0x200003f0

0800297c <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002986:	f107 030f 	add.w	r3, r7, #15
 800298a:	461a      	mov	r2, r3
 800298c:	2101      	movs	r1, #1
 800298e:	204f      	movs	r0, #79	; 0x4f
 8002990:	f001 fb70 	bl	8004074 <RadioSpiReadRegisters>
 8002994:	4602      	mov	r2, r0
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002998:	b212      	sxth	r2, r2
 800299a:	4611      	mov	r1, r2
 800299c:	7019      	strb	r1, [r3, #0]
 800299e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029a2:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d105      	bne.n	80029b6 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	e004      	b.n	80029c0 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80029c0:	f107 030f 	add.w	r3, r7, #15
 80029c4:	461a      	mov	r2, r3
 80029c6:	2101      	movs	r1, #1
 80029c8:	204f      	movs	r0, #79	; 0x4f
 80029ca:	f001 fb07 	bl	8003fdc <RadioSpiWriteRegisters>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SpiritPktCommonFilterOnCrc+0x6c>)
 80029d2:	b212      	sxth	r2, r2
 80029d4:	4611      	mov	r1, r2
 80029d6:	7019      	strb	r1, [r3, #0]
 80029d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029dc:	705a      	strb	r2, [r3, #1]

}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200003f0 	.word	0x200003f0

080029ec <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 80029f6:	1dfb      	adds	r3, r7, #7
 80029f8:	461a      	mov	r2, r3
 80029fa:	2101      	movs	r1, #1
 80029fc:	204b      	movs	r0, #75	; 0x4b
 80029fe:	f001 faed 	bl	8003fdc <RadioSpiWriteRegisters>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <SpiritPktCommonSetDestinationAddress+0x30>)
 8002a06:	b212      	sxth	r2, r2
 8002a08:	4611      	mov	r1, r2
 8002a0a:	7019      	strb	r1, [r3, #0]
 8002a0c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a10:	705a      	strb	r2, [r3, #1]

}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200003f0 	.word	0x200003f0

08002a20 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002a2a:	f107 030f 	add.w	r3, r7, #15
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2101      	movs	r1, #1
 8002a32:	203a      	movs	r0, #58	; 0x3a
 8002a34:	f001 fb1e 	bl	8004074 <RadioSpiReadRegisters>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <SpiritQiSqiCheck+0x6c>)
 8002a3c:	b212      	sxth	r2, r2
 8002a3e:	4611      	mov	r1, r2
 8002a40:	7019      	strb	r1, [r3, #0]
 8002a42:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a46:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	e004      	b.n	8002a64 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	f023 0302 	bic.w	r3, r3, #2
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002a64:	f107 030f 	add.w	r3, r7, #15
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	203a      	movs	r0, #58	; 0x3a
 8002a6e:	f001 fab5 	bl	8003fdc <RadioSpiWriteRegisters>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <SpiritQiSqiCheck+0x6c>)
 8002a76:	b212      	sxth	r2, r2
 8002a78:	4611      	mov	r1, r2
 8002a7a:	7019      	strb	r1, [r3, #0]
 8002a7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a80:	705a      	strb	r2, [r3, #1]

}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200003f0 	.word	0x200003f0

08002a90 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002a9a:	f107 030f 	add.w	r3, r7, #15
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	203a      	movs	r0, #58	; 0x3a
 8002aa4:	f001 fae6 	bl	8004074 <RadioSpiReadRegisters>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <SpiritQiSetSqiThreshold+0x64>)
 8002aac:	b212      	sxth	r2, r2
 8002aae:	4611      	mov	r1, r2
 8002ab0:	7019      	strb	r1, [r3, #0]
 8002ab2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ab6:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002acc:	f107 030f 	add.w	r3, r7, #15
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	203a      	movs	r0, #58	; 0x3a
 8002ad6:	f001 fa81 	bl	8003fdc <RadioSpiWriteRegisters>
 8002ada:	4602      	mov	r2, r0
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <SpiritQiSetSqiThreshold+0x64>)
 8002ade:	b212      	sxth	r2, r2
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	7019      	strb	r1, [r3, #0]
 8002ae4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ae8:	705a      	strb	r2, [r3, #1]

}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200003f0 	.word	0x200003f0

08002af8 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3382      	adds	r3, #130	; 0x82
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002b0c:	f107 030f 	add.w	r3, r7, #15
 8002b10:	461a      	mov	r2, r3
 8002b12:	2101      	movs	r1, #1
 8002b14:	2022      	movs	r0, #34	; 0x22
 8002b16:	f001 fa61 	bl	8003fdc <RadioSpiWriteRegisters>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <SpiritQiSetRssiThresholddBm+0x3c>)
 8002b1e:	b212      	sxth	r2, r2
 8002b20:	4611      	mov	r1, r2
 8002b22:	7019      	strb	r1, [r3, #0]
 8002b24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b28:	705a      	strb	r2, [r3, #1]

}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200003f0 	.word	0x200003f0

08002b38 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	; 0x30
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002b40:	23a0      	movs	r3, #160	; 0xa0
 8002b42:	747b      	strb	r3, [r7, #17]
 8002b44:	f107 0311 	add.w	r3, r7, #17
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	209f      	movs	r0, #159	; 0x9f
 8002b4e:	f001 fa45 	bl	8003fdc <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b70:	eddf 6aae 	vldr	s13, [pc, #696]	; 8002e2c <SpiritRadioInit+0x2f4>
 8002b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b7c:	ee17 3a90 	vmov	r3, s15
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002b82:	2063      	movs	r0, #99	; 0x63
 8002b84:	f001 fac2 	bl	800410c <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73bb      	strb	r3, [r7, #14]
 8002b8c:	e004      	b.n	8002b98 <SpiritRadioInit+0x60>
 8002b8e:	7bbb      	ldrb	r3, [r7, #14]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	73bb      	strb	r3, [r7, #14]
 8002b98:	7bbb      	ldrb	r3, [r7, #14]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2bff      	cmp	r3, #255	; 0xff
 8002b9e:	d1f6      	bne.n	8002b8e <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002ba0:	f001 f9ea 	bl	8003f78 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002ba4:	4ba2      	ldr	r3, [pc, #648]	; (8002e30 <SpiritRadioInit+0x2f8>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d1ea      	bne.n	8002b88 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002bb2:	4ba0      	ldr	r3, [pc, #640]	; (8002e34 <SpiritRadioInit+0x2fc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4aa0      	ldr	r2, [pc, #640]	; (8002e38 <SpiritRadioInit+0x300>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d803      	bhi.n	8002bc4 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f001 f90b 	bl	8003dd8 <SpiritRadioSetDigDiv>
 8002bc2:	e002      	b.n	8002bca <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f001 f907 	bl	8003dd8 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002bca:	2062      	movs	r0, #98	; 0x62
 8002bcc:	f001 fa9e 	bl	800410c <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	737b      	strb	r3, [r7, #13]
 8002bd4:	e004      	b.n	8002be0 <SpiritRadioInit+0xa8>
 8002bd6:	7b7b      	ldrb	r3, [r7, #13]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	737b      	strb	r3, [r7, #13]
 8002be0:	7b7b      	ldrb	r3, [r7, #13]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2bff      	cmp	r3, #255	; 0xff
 8002be6:	d1f6      	bne.n	8002bd6 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002be8:	f001 f9c6 	bl	8003f78 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002bec:	4b90      	ldr	r3, [pc, #576]	; (8002e30 <SpiritRadioInit+0x2f8>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d1ea      	bne.n	8002bd0 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c04:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002e3c <SpiritRadioInit+0x304>
 8002c08:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c0c:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <SpiritRadioInit+0x2fc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c20:	ee17 3a90 	vmov	r3, s15
 8002c24:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002c26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002c36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	025a      	lsls	r2, r3, #9
 8002c42:	4b7c      	ldr	r3, [pc, #496]	; (8002e34 <SpiritRadioInit+0x2fc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fc9d 	bl	8002598 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002c5e:	f107 0310 	add.w	r3, r7, #16
 8002c62:	461a      	mov	r2, r3
 8002c64:	2101      	movs	r1, #1
 8002c66:	20a3      	movs	r0, #163	; 0xa3
 8002c68:	f001 fa04 	bl	8004074 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002c6c:	7c3b      	ldrb	r3, [r7, #16]
 8002c6e:	f023 0302 	bic.w	r3, r3, #2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	743b      	strb	r3, [r7, #16]
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	20a3      	movs	r0, #163	; 0xa3
 8002c80:	f001 f9ac 	bl	8003fdc <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f107 0216 	add.w	r2, r7, #22
 8002c8c:	f107 0117 	add.w	r1, r7, #23
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fc3d 	bl	8003510 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7b5a      	ldrb	r2, [r3, #13]
 8002c9e:	7dbb      	ldrb	r3, [r7, #22]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002ca6:	f107 0310 	add.w	r3, r7, #16
 8002caa:	461a      	mov	r2, r3
 8002cac:	2101      	movs	r1, #1
 8002cae:	201c      	movs	r0, #28
 8002cb0:	f001 f9e0 	bl	8004074 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f107 0214 	add.w	r2, r7, #20
 8002cbc:	f107 0115 	add.w	r1, r7, #21
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fdbd 	bl	8003840 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002cc6:	7d3b      	ldrb	r3, [r7, #20]
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	b25a      	sxtb	r2, r3
 8002ccc:	7c3b      	ldrb	r3, [r7, #16]
 8002cce:	b25b      	sxtb	r3, r3
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	b25a      	sxtb	r2, r3
 8002cda:	7d7b      	ldrb	r3, [r7, #21]
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b25b      	sxtb	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f107 0212 	add.w	r2, r7, #18
 8002cee:	f107 0113 	add.w	r1, r7, #19
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fcbe 	bl	8003674 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	b25a      	sxtb	r2, r3
 8002cfe:	7cbb      	ldrb	r3, [r7, #18]
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002d0a:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <SpiritRadioInit+0x2fc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0b1b      	lsrs	r3, r3, #12
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d18:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002e40 <SpiritRadioInit+0x308>
 8002d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d20:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002e44 <SpiritRadioInit+0x30c>
 8002d24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d28:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002d2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d38:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4c:	dd09      	ble.n	8002d62 <SpiritRadioInit+0x22a>
 8002d4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d56:	edc7 7a00 	vstr	s15, [r7]
 8002d5a:	783b      	ldrb	r3, [r7, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	e006      	b.n	8002d70 <SpiritRadioInit+0x238>
 8002d62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d6a:	edc7 7a00 	vstr	s15, [r7]
 8002d6e:	783b      	ldrb	r3, [r7, #0]
 8002d70:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002d72:	4b30      	ldr	r3, [pc, #192]	; (8002e34 <SpiritRadioInit+0x2fc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a30      	ldr	r2, [pc, #192]	; (8002e38 <SpiritRadioInit+0x300>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d802      	bhi.n	8002d82 <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	777b      	strb	r3, [r7, #29]
 8002d80:	e033      	b.n	8002dea <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002d82:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <SpiritRadioInit+0x2fc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	0b5b      	lsrs	r3, r3, #13
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d90:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002e40 <SpiritRadioInit+0x308>
 8002d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d98:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002e44 <SpiritRadioInit+0x30c>
 8002d9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002da0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002da4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc4:	dd09      	ble.n	8002dda <SpiritRadioInit+0x2a2>
 8002dc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dce:	edc7 7a00 	vstr	s15, [r7]
 8002dd2:	783b      	ldrb	r3, [r7, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	e006      	b.n	8002de8 <SpiritRadioInit+0x2b0>
 8002dda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002de2:	edc7 7a00 	vstr	s15, [r7]
 8002de6:	783b      	ldrb	r3, [r7, #0]
 8002de8:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002dea:	f107 030f 	add.w	r3, r7, #15
 8002dee:	461a      	mov	r2, r3
 8002df0:	2101      	movs	r1, #1
 8002df2:	2007      	movs	r0, #7
 8002df4:	f001 f8f2 	bl	8003fdc <RadioSpiWriteRegisters>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <SpiritRadioInit+0x2f8>)
 8002dfc:	b212      	sxth	r2, r2
 8002dfe:	4611      	mov	r1, r2
 8002e00:	7019      	strb	r1, [r3, #0]
 8002e02:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e06:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <SpiritRadioInit+0x2fc>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <SpiritRadioInit+0x310>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d91e      	bls.n	8002e50 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <SpiritRadioInit+0x2fc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <SpiritRadioInit+0x314>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bf8c      	ite	hi
 8002e1c:	2301      	movhi	r3, #1
 8002e1e:	2300      	movls	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f86c 	bl	8002f00 <SpiritRadioSetXtalFlag>
 8002e28:	e01d      	b.n	8002e66 <SpiritRadioInit+0x32e>
 8002e2a:	bf00      	nop
 8002e2c:	49742400 	.word	0x49742400
 8002e30:	200003f0 	.word	0x200003f0
 8002e34:	200003ec 	.word	0x200003ec
 8002e38:	01c9c37f 	.word	0x01c9c37f
 8002e3c:	48800000 	.word	0x48800000
 8002e40:	49afd520 	.word	0x49afd520
 8002e44:	42800000 	.word	0x42800000
 8002e48:	01c9c380 	.word	0x01c9c380
 8002e4c:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <SpiritRadioInit+0x3bc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <SpiritRadioInit+0x3c0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	bf8c      	ite	hi
 8002e5a:	2301      	movhi	r3, #1
 8002e5c:	2300      	movls	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f84d 	bl	8002f00 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	206c      	movs	r0, #108	; 0x6c
 8002e70:	f001 f8b4 	bl	8003fdc <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002e74:	f107 031c 	add.w	r3, r7, #28
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	200c      	movs	r0, #12
 8002e7e:	f001 f8ad 	bl	8003fdc <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002e82:	f107 0318 	add.w	r3, r7, #24
 8002e86:	461a      	mov	r2, r3
 8002e88:	2104      	movs	r1, #4
 8002e8a:	201a      	movs	r0, #26
 8002e8c:	f001 f8a6 	bl	8003fdc <RadioSpiWriteRegisters>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <SpiritRadioInit+0x3c4>)
 8002e94:	b212      	sxth	r2, r2
 8002e96:	4611      	mov	r1, r2
 8002e98:	7019      	strb	r1, [r3, #0]
 8002e9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e9e:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f000 ff15 	bl	8003cd0 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002eaa:	23e3      	movs	r3, #227	; 0xe3
 8002eac:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	2099      	movs	r0, #153	; 0x99
 8002eb8:	f001 f890 	bl	8003fdc <RadioSpiWriteRegisters>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <SpiritRadioInit+0x3c4>)
 8002ec0:	b212      	sxth	r2, r2
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	7019      	strb	r1, [r3, #0]
 8002ec6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002eca:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002ecc:	2322      	movs	r3, #34	; 0x22
 8002ece:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002ed0:	f107 031c 	add.w	r3, r7, #28
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	20bc      	movs	r0, #188	; 0xbc
 8002eda:	f001 f87f 	bl	8003fdc <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f9aa 	bl	800323c <SpiritRadioSetFrequencyBase>
 8002ee8:	4603      	mov	r3, r0
  
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3730      	adds	r7, #48	; 0x30
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200003ec 	.word	0x200003ec
 8002ef8:	017d783f 	.word	0x017d783f
 8002efc:	200003f0 	.word	0x200003f0

08002f00 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002f0e:	f107 030f 	add.w	r3, r7, #15
 8002f12:	461a      	mov	r2, r3
 8002f14:	2101      	movs	r1, #1
 8002f16:	2001      	movs	r0, #1
 8002f18:	f001 f8ac 	bl	8004074 <RadioSpiReadRegisters>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <SpiritRadioSetXtalFlag+0x70>)
 8002f20:	b212      	sxth	r2, r2
 8002f22:	4611      	mov	r1, r2
 8002f24:	7019      	strb	r1, [r3, #0]
 8002f26:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f2a:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d105      	bne.n	8002f3e <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	e004      	b.n	8002f48 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002f48:	f107 030f 	add.w	r3, r7, #15
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2101      	movs	r1, #1
 8002f50:	2001      	movs	r0, #1
 8002f52:	f001 f843 	bl	8003fdc <RadioSpiWriteRegisters>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <SpiritRadioSetXtalFlag+0x70>)
 8002f5a:	b212      	sxth	r2, r2
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	7019      	strb	r1, [r3, #0]
 8002f60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f64:	705a      	strb	r2, [r3, #1]
  
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200003f0 	.word	0x200003f0

08002f74 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3a      	ldr	r2, [pc, #232]	; (8003074 <SpiritRadioSearchWCP+0x100>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d306      	bcc.n	8002f9e <SpiritRadioSearchWCP+0x2a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a39      	ldr	r2, [pc, #228]	; (8003078 <SpiritRadioSearchWCP+0x104>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d802      	bhi.n	8002f9e <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002f98:	2306      	movs	r3, #6
 8002f9a:	73bb      	strb	r3, [r7, #14]
 8002f9c:	e01f      	b.n	8002fde <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a36      	ldr	r2, [pc, #216]	; (800307c <SpiritRadioSearchWCP+0x108>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d906      	bls.n	8002fb4 <SpiritRadioSearchWCP+0x40>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a35      	ldr	r2, [pc, #212]	; (8003080 <SpiritRadioSearchWCP+0x10c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d802      	bhi.n	8002fb4 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002fae:	230c      	movs	r3, #12
 8002fb0:	73bb      	strb	r3, [r7, #14]
 8002fb2:	e014      	b.n	8002fde <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a33      	ldr	r2, [pc, #204]	; (8003084 <SpiritRadioSearchWCP+0x110>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d906      	bls.n	8002fca <SpiritRadioSearchWCP+0x56>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a32      	ldr	r2, [pc, #200]	; (8003088 <SpiritRadioSearchWCP+0x114>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d802      	bhi.n	8002fca <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	73bb      	strb	r3, [r7, #14]
 8002fc8:	e009      	b.n	8002fde <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	; (800308c <SpiritRadioSearchWCP+0x118>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d905      	bls.n	8002fde <SpiritRadioSearchWCP+0x6a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2e      	ldr	r2, [pc, #184]	; (8003090 <SpiritRadioSearchWCP+0x11c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d801      	bhi.n	8002fde <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a2c      	ldr	r2, [pc, #176]	; (8003094 <SpiritRadioSearchWCP+0x120>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	7bba      	ldrb	r2, [r7, #14]
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002ff0:	f241 631f 	movw	r3, #5663	; 0x161f
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d302      	bcc.n	800300a <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8003004:	230f      	movs	r3, #15
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	e023      	b.n	8003052 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	e005      	b.n	800301c <SpiritRadioSearchWCP+0xa8>
 8003010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3301      	adds	r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003020:	2b0e      	cmp	r3, #14
 8003022:	dc0c      	bgt.n	800303e <SpiritRadioSearchWCP+0xca>
 8003024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003028:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <SpiritRadioSearchWCP+0x124>)
 800302a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800302e:	461a      	mov	r2, r3
 8003030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003034:	fb02 f303 	mul.w	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d8e8      	bhi.n	8003010 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 800303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <SpiritRadioSearchWCP+0xde>
      i--;
 8003046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8003052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003056:	425a      	negs	r2, r3
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	f002 0207 	and.w	r2, r2, #7
 8003060:	bf58      	it	pl
 8003062:	4253      	negpl	r3, r2
 8003064:	b25b      	sxtb	r3, r3
 8003066:	b2db      	uxtb	r3, r3
  
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	2e5f5680 	.word	0x2e5f5680
 8003078:	390c2fe0 	.word	0x390c2fe0
 800307c:	1701e47f 	.word	0x1701e47f
 8003080:	1c146a60 	.word	0x1c146a60
 8003084:	11d260bf 	.word	0x11d260bf
 8003088:	14ced7e0 	.word	0x14ced7e0
 800308c:	08e18f3f 	.word	0x08e18f3f
 8003090:	0a6fd060 	.word	0x0a6fd060
 8003094:	10624dd3 	.word	0x10624dd3
 8003098:	0800fdd0 	.word	0x0800fdd0

0800309c <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	461a      	mov	r2, r3
 80030a6:	2104      	movs	r1, #4
 80030a8:	2008      	movs	r0, #8
 80030aa:	f000 ffe3 	bl	8004074 <RadioSpiReadRegisters>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <SpiritRadioGetSynthWord+0x48>)
 80030b2:	b212      	sxth	r2, r2
 80030b4:	4611      	mov	r1, r2
 80030b6:	7019      	strb	r1, [r3, #0]
 80030b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030bc:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80030be:	793b      	ldrb	r3, [r7, #4]
 80030c0:	055b      	lsls	r3, r3, #21
 80030c2:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80030c6:	797b      	ldrb	r3, [r7, #5]
 80030c8:	035b      	lsls	r3, r3, #13
 80030ca:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80030cc:	79bb      	ldrb	r3, [r7, #6]
 80030ce:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80030d0:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80030d2:	79fa      	ldrb	r2, [r7, #7]
 80030d4:	08d2      	lsrs	r2, r2, #3
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	4413      	add	r3, r2
  
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200003f0 	.word	0x200003f0

080030e8 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	461a      	mov	r2, r3
 80030f2:	2101      	movs	r1, #1
 80030f4:	200b      	movs	r0, #11
 80030f6:	f000 ffbd 	bl	8004074 <RadioSpiReadRegisters>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <SpiritRadioGetBand+0x58>)
 80030fe:	b212      	sxth	r2, r2
 8003100:	4611      	mov	r1, r2
 8003102:	7019      	strb	r1, [r3, #0]
 8003104:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003108:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8003114:	2300      	movs	r3, #0
 8003116:	e00e      	b.n	8003136 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	2b03      	cmp	r3, #3
 8003120:	d101      	bne.n	8003126 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8003122:	2301      	movs	r3, #1
 8003124:	e007      	b.n	8003136 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	2b04      	cmp	r3, #4
 800312e:	d101      	bne.n	8003134 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003130:	2302      	movs	r3, #2
 8003132:	e000      	b.n	8003136 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003134:	2303      	movs	r3, #3
  }
  
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200003f0 	.word	0x200003f0

08003144 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 800314a:	1dfb      	adds	r3, r7, #7
 800314c:	461a      	mov	r2, r3
 800314e:	2101      	movs	r1, #1
 8003150:	206c      	movs	r0, #108	; 0x6c
 8003152:	f000 ff8f 	bl	8004074 <RadioSpiReadRegisters>
 8003156:	4602      	mov	r2, r0
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <SpiritRadioGetChannel+0x2c>)
 800315a:	b212      	sxth	r2, r2
 800315c:	4611      	mov	r1, r2
 800315e:	7019      	strb	r1, [r3, #0]
 8003160:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003164:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8003166:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	200003f0 	.word	0x200003f0

08003174 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	461a      	mov	r2, r3
 800317e:	2101      	movs	r1, #1
 8003180:	200c      	movs	r0, #12
 8003182:	f000 ff77 	bl	8004074 <RadioSpiReadRegisters>
 8003186:	4602      	mov	r2, r0
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <SpiritRadioGetChannelSpace+0x38>)
 800318a:	b212      	sxth	r2, r2
 800318c:	4611      	mov	r1, r2
 800318e:	7019      	strb	r1, [r3, #0]
 8003190:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003194:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	461a      	mov	r2, r3
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <SpiritRadioGetChannelSpace+0x3c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	0bdb      	lsrs	r3, r3, #15
  
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	200003f0 	.word	0x200003f0
 80031b0:	200003ec 	.word	0x200003ec

080031b4 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	461a      	mov	r2, r3
 80031be:	2102      	movs	r1, #2
 80031c0:	200e      	movs	r0, #14
 80031c2:	f000 ff57 	bl	8004074 <RadioSpiReadRegisters>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <SpiritRadioGetFrequencyOffset+0x80>)
 80031ca:	b212      	sxth	r2, r2
 80031cc:	4611      	mov	r1, r2
 80031ce:	7019      	strb	r1, [r3, #0]
 80031d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80031d4:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80031d6:	793b      	ldrb	r3, [r7, #4]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	b29a      	uxth	r2, r3
 80031de:	797b      	ldrb	r3, [r7, #5]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80031f2:	887b      	ldrh	r3, [r7, #2]
 80031f4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80031f8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	807b      	strh	r3, [r7, #2]
 8003200:	e004      	b.n	800320c <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8003202:	887b      	ldrh	r3, [r7, #2]
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	b29b      	uxth	r3, r3
 800320a:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 800320c:	1cbb      	adds	r3, r7, #2
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8003212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <SpiritRadioGetFrequencyOffset+0x84>)
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	da03      	bge.n	800322a <SpiritRadioGetFrequencyOffset+0x76>
 8003222:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003226:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800322a:	149b      	asrs	r3, r3, #18
  
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	200003f0 	.word	0x200003f0
 8003238:	200003ec 	.word	0x200003ec

0800323c <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 800323c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003240:	b08a      	sub	sp, #40	; 0x28
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8003246:	2300      	movs	r3, #0
 8003248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a79      	ldr	r2, [pc, #484]	; (8003434 <SpiritRadioSetFrequencyBase+0x1f8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d307      	bcc.n	8003264 <SpiritRadioSetFrequencyBase+0x28>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a78      	ldr	r2, [pc, #480]	; (8003438 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d803      	bhi.n	8003264 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003262:	e022      	b.n	80032aa <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a75      	ldr	r2, [pc, #468]	; (800343c <SpiritRadioSetFrequencyBase+0x200>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d907      	bls.n	800327c <SpiritRadioSetFrequencyBase+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a74      	ldr	r2, [pc, #464]	; (8003440 <SpiritRadioSetFrequencyBase+0x204>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d803      	bhi.n	800327c <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800327a:	e016      	b.n	80032aa <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a71      	ldr	r2, [pc, #452]	; (8003444 <SpiritRadioSetFrequencyBase+0x208>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d907      	bls.n	8003294 <SpiritRadioSetFrequencyBase+0x58>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a70      	ldr	r2, [pc, #448]	; (8003448 <SpiritRadioSetFrequencyBase+0x20c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d803      	bhi.n	8003294 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 800328c:	2302      	movs	r3, #2
 800328e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003292:	e00a      	b.n	80032aa <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a6d      	ldr	r2, [pc, #436]	; (800344c <SpiritRadioSetFrequencyBase+0x210>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d906      	bls.n	80032aa <SpiritRadioSetFrequencyBase+0x6e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a6c      	ldr	r2, [pc, #432]	; (8003450 <SpiritRadioSetFrequencyBase+0x214>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d802      	bhi.n	80032aa <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 80032a4:	2303      	movs	r3, #3
 80032a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80032aa:	f7ff ff83 	bl	80031b4 <SpiritRadioGetFrequencyOffset>
 80032ae:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80032b0:	f7ff ff60 	bl	8003174 <SpiritRadioGetChannelSpace>
 80032b4:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80032b6:	f7ff ff45 	bl	8003144 <SpiritRadioGetChannel>
 80032ba:	4603      	mov	r3, r0
 80032bc:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80032be:	6a3a      	ldr	r2, [r7, #32]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	441a      	add	r2, r3
 80032c4:	7efb      	ldrb	r3, [r7, #27]
 80032c6:	69f9      	ldr	r1, [r7, #28]
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80032d0:	f000 fd60 	bl	8003d94 <SpiritRadioGetRefDiv>
 80032d4:	4603      	mov	r3, r0
 80032d6:	3301      	adds	r3, #1
 80032d8:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80032da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d839      	bhi.n	8003356 <SpiritRadioSetFrequencyBase+0x11a>
 80032e2:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <SpiritRadioSetFrequencyBase+0xac>)
 80032e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e8:	08003341 	.word	0x08003341
 80032ec:	08003329 	.word	0x08003329
 80032f0:	08003311 	.word	0x08003311
 80032f4:	080032f9 	.word	0x080032f9
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4a56      	ldr	r2, [pc, #344]	; (8003454 <SpiritRadioSetFrequencyBase+0x218>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d803      	bhi.n	8003308 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003300:	2000      	movs	r0, #0
 8003302:	f7fe fdd5 	bl	8001eb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003306:	e026      	b.n	8003356 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003308:	2001      	movs	r0, #1
 800330a:	f7fe fdd1 	bl	8001eb0 <SpiritCalibrationSelectVco>
    break;
 800330e:	e022      	b.n	8003356 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	4a51      	ldr	r2, [pc, #324]	; (8003458 <SpiritRadioSetFrequencyBase+0x21c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d803      	bhi.n	8003320 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003318:	2000      	movs	r0, #0
 800331a:	f7fe fdc9 	bl	8001eb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800331e:	e01a      	b.n	8003356 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003320:	2001      	movs	r0, #1
 8003322:	f7fe fdc5 	bl	8001eb0 <SpiritCalibrationSelectVco>
    break;
 8003326:	e016      	b.n	8003356 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4a4c      	ldr	r2, [pc, #304]	; (800345c <SpiritRadioSetFrequencyBase+0x220>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d803      	bhi.n	8003338 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003330:	2000      	movs	r0, #0
 8003332:	f7fe fdbd 	bl	8001eb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003336:	e00e      	b.n	8003356 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003338:	2001      	movs	r0, #1
 800333a:	f7fe fdb9 	bl	8001eb0 <SpiritCalibrationSelectVco>
    break;
 800333e:	e00a      	b.n	8003356 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	4a47      	ldr	r2, [pc, #284]	; (8003460 <SpiritRadioSetFrequencyBase+0x224>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d803      	bhi.n	8003350 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003348:	2000      	movs	r0, #0
 800334a:	f7fe fdb1 	bl	8001eb0 <SpiritCalibrationSelectVco>
 800334e:	e002      	b.n	8003356 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003350:	2001      	movs	r0, #1
 8003352:	f7fe fdad 	bl	8001eb0 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8003356:	6978      	ldr	r0, [r7, #20]
 8003358:	f7ff fe0c 	bl	8002f74 <SpiritRadioSearchWCP>
 800335c:	4603      	mov	r3, r0
 800335e:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003364:	4a3f      	ldr	r2, [pc, #252]	; (8003464 <SpiritRadioSetFrequencyBase+0x228>)
 8003366:	5cd3      	ldrb	r3, [r2, r3]
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	fb02 f303 	mul.w	r3, r2, r3
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd f8cf 	bl	8000514 <__aeabi_ui2d>
 8003376:	4604      	mov	r4, r0
 8003378:	460d      	mov	r5, r1
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	049b      	lsls	r3, r3, #18
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f8d8 	bl	8000534 <__aeabi_i2d>
 8003384:	4680      	mov	r8, r0
 8003386:	4689      	mov	r9, r1
 8003388:	4b37      	ldr	r3, [pc, #220]	; (8003468 <SpiritRadioSetFrequencyBase+0x22c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd f8c1 	bl	8000514 <__aeabi_ui2d>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4640      	mov	r0, r8
 8003398:	4649      	mov	r1, r9
 800339a:	f7fd fa5f 	bl	800085c <__aeabi_ddiv>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4620      	mov	r0, r4
 80033a4:	4629      	mov	r1, r5
 80033a6:	f7fd f92f 	bl	8000608 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	f7fd fc01 	bl	8000bb8 <__aeabi_d2uiz>
 80033b6:	4603      	mov	r3, r0
 80033b8:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	0d5b      	lsrs	r3, r3, #21
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	7cbb      	ldrb	r3, [r7, #18]
 80033c8:	015b      	lsls	r3, r3, #5
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	0b5b      	lsrs	r3, r3, #13
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033ee:	491f      	ldr	r1, [pc, #124]	; (800346c <SpiritRadioSetFrequencyBase+0x230>)
 80033f0:	5ccb      	ldrb	r3, [r1, r3]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80033f8:	f107 0308 	add.w	r3, r7, #8
 80033fc:	461a      	mov	r2, r3
 80033fe:	2104      	movs	r1, #4
 8003400:	2008      	movs	r0, #8
 8003402:	f000 fdeb 	bl	8003fdc <RadioSpiWriteRegisters>
 8003406:	4602      	mov	r2, r0
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <SpiritRadioSetFrequencyBase+0x234>)
 800340a:	b212      	sxth	r2, r2
 800340c:	4611      	mov	r1, r2
 800340e:	7019      	strb	r1, [r3, #0]
 8003410:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003414:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8003416:	4b17      	ldr	r3, [pc, #92]	; (8003474 <SpiritRadioSetFrequencyBase+0x238>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d103      	bne.n	8003426 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 800341e:	f7fe ffa7 	bl	8002370 <SpiritManagementWaVcoCalibration>
 8003422:	4603      	mov	r3, r0
 8003424:	e000      	b.n	8003428 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3728      	adds	r7, #40	; 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003432:	bf00      	nop
 8003434:	2e5f5680 	.word	0x2e5f5680
 8003438:	390c2fe0 	.word	0x390c2fe0
 800343c:	1701e47f 	.word	0x1701e47f
 8003440:	1c146a60 	.word	0x1c146a60
 8003444:	11d260bf 	.word	0x11d260bf
 8003448:	14ced7e0 	.word	0x14ced7e0
 800344c:	08e18f3f 	.word	0x08e18f3f
 8003450:	0a6fd060 	.word	0x0a6fd060
 8003454:	099cf4e1 	.word	0x099cf4e1
 8003458:	1339e9c3 	.word	0x1339e9c3
 800345c:	19a28d05 	.word	0x19a28d05
 8003460:	33451a0a 	.word	0x33451a0a
 8003464:	0800fd14 	.word	0x0800fd14
 8003468:	200003ec 	.word	0x200003ec
 800346c:	0800fd18 	.word	0x0800fd18
 8003470:	200003f0 	.word	0x200003f0
 8003474:	2000000d 	.word	0x2000000d

08003478 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003480:	f7ff fe0c 	bl	800309c <SpiritRadioGetSynthWord>
 8003484:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8003486:	f7ff fe2f 	bl	80030e8 <SpiritRadioGetBand>
 800348a:	4603      	mov	r3, r0
 800348c:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 800348e:	f000 fc81 	bl	8003d94 <SpiritRadioGetRefDiv>
 8003492:	4603      	mov	r3, r0
 8003494:	3301      	adds	r3, #1
 8003496:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7fd f83b 	bl	8000514 <__aeabi_ui2d>
 800349e:	4604      	mov	r4, r0
 80034a0:	460d      	mov	r5, r1
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <SpiritRadioGetFrequencyBase+0x90>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd f834 	bl	8000514 <__aeabi_ui2d>
 80034ac:	4680      	mov	r8, r0
 80034ae:	4689      	mov	r9, r1
 80034b0:	78bb      	ldrb	r3, [r7, #2]
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	4915      	ldr	r1, [pc, #84]	; (800350c <SpiritRadioGetFrequencyBase+0x94>)
 80034b6:	5c8a      	ldrb	r2, [r1, r2]
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	049b      	lsls	r3, r3, #18
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd f838 	bl	8000534 <__aeabi_i2d>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4640      	mov	r0, r8
 80034ca:	4649      	mov	r1, r9
 80034cc:	f7fd f9c6 	bl	800085c <__aeabi_ddiv>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4620      	mov	r0, r4
 80034d6:	4629      	mov	r1, r5
 80034d8:	f7fd f896 	bl	8000608 <__aeabi_dmul>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	ec43 2b17 	vmov	d7, r2, r3
 80034e4:	eeb0 0a47 	vmov.f32	s0, s14
 80034e8:	eef0 0a67 	vmov.f32	s1, s15
 80034ec:	f00a fb3a 	bl	800db64 <round>
 80034f0:	ec53 2b10 	vmov	r2, r3, d0
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fd fb5e 	bl	8000bb8 <__aeabi_d2uiz>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003508:	200003ec 	.word	0x200003ec
 800350c:	0800fd14 	.word	0x0800fd14

08003510 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 800351c:	2300      	movs	r3, #0
 800351e:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003520:	230f      	movs	r3, #15
 8003522:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003528:	f000 fc86 	bl	8003e38 <SpiritRadioGetDigDiv>
 800352c:	4603      	mov	r3, r0
 800352e:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003530:	e015      	b.n	800355e <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003532:	4b4f      	ldr	r3, [pc, #316]	; (8003670 <SpiritRadioSearchDatarateME+0x160>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800353a:	f1c3 0114 	rsb	r1, r3, #20
 800353e:	7ebb      	ldrb	r3, [r7, #26]
 8003540:	440b      	add	r3, r1
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	429a      	cmp	r2, r3
 800354a:	d302      	bcc.n	8003552 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 800354c:	2301      	movs	r3, #1
 800354e:	763b      	strb	r3, [r7, #24]
 8003550:	e005      	b.n	800355e <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003552:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 800355e:	7e3b      	ldrb	r3, [r7, #24]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <SpiritRadioSearchDatarateME+0x5e>
 8003566:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800356a:	2b00      	cmp	r3, #0
 800356c:	dae1      	bge.n	8003532 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 800356e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003572:	2b00      	cmp	r3, #0
 8003574:	da01      	bge.n	800357a <SpiritRadioSearchDatarateME+0x6a>
 8003576:	2300      	movs	r3, #0
 8003578:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 800357a:	7ffa      	ldrb	r2, [r7, #31]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003580:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003584:	f1c3 0317 	rsb	r3, r3, #23
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	409a      	lsls	r2, r3
 800358c:	4b38      	ldr	r3, [pc, #224]	; (8003670 <SpiritRadioSearchDatarateME+0x160>)
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	7ebb      	ldrb	r3, [r7, #26]
 8003592:	3305      	adds	r3, #5
 8003594:	fa21 f303 	lsr.w	r3, r1, r3
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 800359e:	2300      	movs	r3, #0
 80035a0:	77bb      	strb	r3, [r7, #30]
 80035a2:	e031      	b.n	8003608 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 80035a4:	7e7a      	ldrb	r2, [r7, #25]
 80035a6:	7fbb      	ldrb	r3, [r7, #30]
 80035a8:	4413      	add	r3, r2
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d021      	beq.n	80035f2 <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	7e7b      	ldrb	r3, [r7, #25]
 80035b4:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80035b8:	7fbb      	ldrb	r3, [r7, #30]
 80035ba:	440b      	add	r3, r1
 80035bc:	3b01      	subs	r3, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <SpiritRadioSearchDatarateME+0x160>)
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	7ebb      	ldrb	r3, [r7, #26]
 80035c6:	3305      	adds	r3, #5
 80035c8:	fa21 f303 	lsr.w	r3, r1, r3
 80035cc:	fb03 f100 	mul.w	r1, r3, r0
 80035d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035d4:	f1c3 0317 	rsb	r3, r3, #23
 80035d8:	fa21 f303 	lsr.w	r3, r1, r3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	7fbb      	ldrb	r3, [r7, #30]
 80035e4:	b212      	sxth	r2, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	3320      	adds	r3, #32
 80035ea:	443b      	add	r3, r7
 80035ec:	f823 2c10 	strh.w	r2, [r3, #-16]
 80035f0:	e007      	b.n	8003602 <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80035f2:	7fbb      	ldrb	r3, [r7, #30]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	3320      	adds	r3, #32
 80035f8:	443b      	add	r3, r7
 80035fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80035fe:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 8003602:	7fbb      	ldrb	r3, [r7, #30]
 8003604:	3301      	adds	r3, #1
 8003606:	77bb      	strb	r3, [r7, #30]
 8003608:	7fbb      	ldrb	r3, [r7, #30]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d9ca      	bls.n	80035a4 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 800360e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003612:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003614:	2300      	movs	r3, #0
 8003616:	76fb      	strb	r3, [r7, #27]
 8003618:	e021      	b.n	800365e <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 800361a:	7efb      	ldrb	r3, [r7, #27]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	3320      	adds	r3, #32
 8003620:	443b      	add	r3, r7
 8003622:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	bfb8      	it	lt
 800362a:	425b      	neglt	r3, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	8bba      	ldrh	r2, [r7, #28]
 8003630:	429a      	cmp	r2, r3
 8003632:	d911      	bls.n	8003658 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003634:	7efb      	ldrb	r3, [r7, #27]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	3320      	adds	r3, #32
 800363a:	443b      	add	r3, r7
 800363c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	bfb8      	it	lt
 8003644:	425b      	neglt	r3, r3
 8003646:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003648:	7e7a      	ldrb	r2, [r7, #25]
 800364a:	7efb      	ldrb	r3, [r7, #27]
 800364c:	4413      	add	r3, r2
 800364e:	b2db      	uxtb	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003658:	7efb      	ldrb	r3, [r7, #27]
 800365a:	3301      	adds	r3, #1
 800365c:	76fb      	strb	r3, [r7, #27]
 800365e:	7efb      	ldrb	r3, [r7, #27]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d9da      	bls.n	800361a <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200003ec 	.word	0x200003ec

08003674 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003686:	f000 fbd7 	bl	8003e38 <SpiritRadioGetDigDiv>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003690:	2302      	movs	r3, #2
 8003692:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003696:	e002      	b.n	800369e <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 800369e:	4b63      	ldr	r3, [pc, #396]	; (800382c <SpiritRadioSearchChannelBwME+0x1b8>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	4a61      	ldr	r2, [pc, #388]	; (8003830 <SpiritRadioSearchChannelBwME+0x1bc>)
 80036ac:	fba2 2303 	umull	r2, r3, r2, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036ba:	e006      	b.n	80036ca <SpiritRadioSearchChannelBwME+0x56>
 80036bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036ce:	2b59      	cmp	r3, #89	; 0x59
 80036d0:	dc0f      	bgt.n	80036f2 <SpiritRadioSearchChannelBwME+0x7e>
 80036d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036d6:	4a57      	ldr	r2, [pc, #348]	; (8003834 <SpiritRadioSearchChannelBwME+0x1c0>)
 80036d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036dc:	461a      	mov	r2, r3
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	4a54      	ldr	r2, [pc, #336]	; (8003838 <SpiritRadioSearchChannelBwME+0x1c4>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0adb      	lsrs	r3, r3, #11
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d3e4      	bcc.n	80036bc <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 80036f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d077      	beq.n	80037ea <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80036fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036fe:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003700:	2300      	movs	r3, #0
 8003702:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003706:	e03a      	b.n	800377e <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003708:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800370c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003710:	4413      	add	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	dc06      	bgt.n	8003724 <SpiritRadioSearchChannelBwME+0xb0>
 8003716:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800371a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800371e:	4413      	add	r3, r2
 8003720:	2b5a      	cmp	r3, #90	; 0x5a
 8003722:	dc1e      	bgt.n	8003762 <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	b29a      	uxth	r2, r3
 8003728:	f997 101b 	ldrsb.w	r1, [r7, #27]
 800372c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003730:	440b      	add	r3, r1
 8003732:	3b01      	subs	r3, #1
 8003734:	493f      	ldr	r1, [pc, #252]	; (8003834 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003736:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800373a:	4619      	mov	r1, r3
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	493d      	ldr	r1, [pc, #244]	; (8003838 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003744:	fba1 1303 	umull	r1, r3, r1, r3
 8003748:	0adb      	lsrs	r3, r3, #11
 800374a:	b29b      	uxth	r3, r3
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	b29a      	uxth	r2, r3
 8003750:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003754:	b212      	sxth	r2, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	3328      	adds	r3, #40	; 0x28
 800375a:	443b      	add	r3, r7
 800375c:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003760:	e008      	b.n	8003774 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003762:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	3328      	adds	r3, #40	; 0x28
 800376a:	443b      	add	r3, r7
 800376c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003770:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003774:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003778:	3301      	adds	r3, #1
 800377a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800377e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003782:	2b02      	cmp	r3, #2
 8003784:	d9c0      	bls.n	8003708 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800378a:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 800378c:	2300      	movs	r3, #0
 800378e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003792:	e026      	b.n	80037e2 <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003794:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	3328      	adds	r3, #40	; 0x28
 800379c:	443b      	add	r3, r7
 800379e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bfb8      	it	lt
 80037a6:	425b      	neglt	r3, r3
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d913      	bls.n	80037d8 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 80037b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	3328      	adds	r3, #40	; 0x28
 80037b8:	443b      	add	r3, r7
 80037ba:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bfb8      	it	lt
 80037c2:	425b      	neglt	r3, r3
 80037c4:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 80037c6:	7efa      	ldrb	r2, [r7, #27]
 80037c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037cc:	4413      	add	r3, r2
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 80037d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037dc:	3301      	adds	r3, #1
 80037de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80037e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d9d4      	bls.n	8003794 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80037ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037ee:	4a13      	ldr	r2, [pc, #76]	; (800383c <SpiritRadioSearchChannelBwME+0x1c8>)
 80037f0:	fb82 1203 	smull	r1, r2, r2, r3
 80037f4:	1052      	asrs	r2, r2, #1
 80037f6:	17db      	asrs	r3, r3, #31
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003802:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <SpiritRadioSearchChannelBwME+0x1c8>)
 8003808:	fb83 1302 	smull	r1, r3, r3, r2
 800380c:	1059      	asrs	r1, r3, #1
 800380e:	17d3      	asrs	r3, r2, #31
 8003810:	1ac9      	subs	r1, r1, r3
 8003812:	460b      	mov	r3, r1
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	b25b      	sxtb	r3, r3
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	701a      	strb	r2, [r3, #0]
  
}
 8003822:	bf00      	nop
 8003824:	3728      	adds	r7, #40	; 0x28
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200003ec 	.word	0x200003ec
 8003830:	51eb851f 	.word	0x51eb851f
 8003834:	0800fd1c 	.word	0x0800fd1c
 8003838:	c9a633fd 	.word	0xc9a633fd
 800383c:	38e38e39 	.word	0x38e38e39

08003840 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003840:	b5b0      	push	{r4, r5, r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003850:	4b53      	ldr	r3, [pc, #332]	; (80039a0 <SpiritRadioSearchFreqDevME+0x160>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800385c:	eddf 6a51 	vldr	s13, [pc, #324]	; 80039a4 <SpiritRadioSearchFreqDevME+0x164>
 8003860:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003864:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003868:	2300      	movs	r3, #0
 800386a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800386e:	e028      	b.n	80038c2 <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003874:	2201      	movs	r2, #1
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fe5a 	bl	8000534 <__aeabi_i2d>
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <SpiritRadioSearchFreqDevME+0x168>)
 8003886:	f7fc febf 	bl	8000608 <__aeabi_dmul>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f7fd f991 	bl	8000bb8 <__aeabi_d2uiz>
 8003896:	ee07 0a90 	vmov	s15, r0
 800389a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800389e:	edd7 7a06 	vldr	s15, [r7, #24]
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038aa:	ee17 3a90 	vmov	r3, s15
 80038ae:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d309      	bcc.n	80038cc <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 80038b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038bc:	3301      	adds	r3, #1
 80038be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038c6:	2b09      	cmp	r3, #9
 80038c8:	d9d2      	bls.n	8003870 <SpiritRadioSearchFreqDevME+0x30>
 80038ca:	e000      	b.n	80038ce <SpiritRadioSearchFreqDevME+0x8e>
      break;
 80038cc:	bf00      	nop
  }
  (*pcE) = i;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80038d4:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038dc:	e043      	b.n	8003966 <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 80038e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fc fe24 	bl	8000534 <__aeabi_i2d>
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <SpiritRadioSearchFreqDevME+0x16c>)
 80038f2:	f7fc fcd3 	bl	800029c <__adddf3>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003906:	f7fc ffa9 	bl	800085c <__aeabi_ddiv>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4614      	mov	r4, r2
 8003910:	461d      	mov	r5, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	2301      	movs	r3, #1
 800391a:	4093      	lsls	r3, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fe09 	bl	8000534 <__aeabi_i2d>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4620      	mov	r0, r4
 8003928:	4629      	mov	r1, r5
 800392a:	f7fc fe6d 	bl	8000608 <__aeabi_dmul>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	f7fd f93f 	bl	8000bb8 <__aeabi_d2uiz>
 800393a:	ee07 0a90 	vmov	s15, r0
 800393e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003942:	edd7 7a06 	vldr	s15, [r7, #24]
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800394e:	ee17 3a90 	vmov	r3, s15
 8003952:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	429a      	cmp	r2, r3
 800395a:	d309      	bcc.n	8003970 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 800395c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003960:	3301      	adds	r3, #1
 8003962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800396a:	2b07      	cmp	r3, #7
 800396c:	d9b7      	bls.n	80038de <SpiritRadioSearchFreqDevME+0x9e>
 800396e:	e000      	b.n	8003972 <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003970:	bf00      	nop
  }
  
  (*pcM)=i;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003978:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	1ad2      	subs	r2, r2, r3
 8003980:	69f9      	ldr	r1, [r7, #28]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1acb      	subs	r3, r1, r3
 8003986:	429a      	cmp	r2, r3
 8003988:	d205      	bcs.n	8003996 <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	3b01      	subs	r3, #1
 8003990:	b2da      	uxtb	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	701a      	strb	r2, [r3, #0]
  
}
 8003996:	bf00      	nop
 8003998:	3728      	adds	r7, #40	; 0x28
 800399a:	46bd      	mov	sp, r7
 800399c:	bdb0      	pop	{r4, r5, r7, pc}
 800399e:	bf00      	nop
 80039a0:	200003ec 	.word	0x200003ec
 80039a4:	48800000 	.word	0x48800000
 80039a8:	401e0000 	.word	0x401e0000
 80039ac:	40200000 	.word	0x40200000

080039b0 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 80039bc:	2300      	movs	r3, #0
 80039be:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a74      	ldr	r2, [pc, #464]	; (8003b98 <SpiritRadioGetdBm2Reg+0x1e8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d30c      	bcc.n	80039e6 <SpiritRadioGetdBm2Reg+0x36>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a73      	ldr	r2, [pc, #460]	; (8003b9c <SpiritRadioGetdBm2Reg+0x1ec>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d808      	bhi.n	80039e6 <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a71      	ldr	r2, [pc, #452]	; (8003ba0 <SpiritRadioGetdBm2Reg+0x1f0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d822      	bhi.n	8003a26 <SpiritRadioGetdBm2Reg+0x76>
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
 80039e4:	e01f      	b.n	8003a26 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a6e      	ldr	r2, [pc, #440]	; (8003ba4 <SpiritRadioGetdBm2Reg+0x1f4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d906      	bls.n	80039fc <SpiritRadioGetdBm2Reg+0x4c>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a6d      	ldr	r2, [pc, #436]	; (8003ba8 <SpiritRadioGetdBm2Reg+0x1f8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d802      	bhi.n	80039fc <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 80039f6:	2302      	movs	r3, #2
 80039f8:	75fb      	strb	r3, [r7, #23]
 80039fa:	e014      	b.n	8003a26 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a6b      	ldr	r2, [pc, #428]	; (8003bac <SpiritRadioGetdBm2Reg+0x1fc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d906      	bls.n	8003a12 <SpiritRadioGetdBm2Reg+0x62>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a6a      	ldr	r2, [pc, #424]	; (8003bb0 <SpiritRadioGetdBm2Reg+0x200>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d802      	bhi.n	8003a12 <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	75fb      	strb	r3, [r7, #23]
 8003a10:	e009      	b.n	8003a26 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a67      	ldr	r2, [pc, #412]	; (8003bb4 <SpiritRadioGetdBm2Reg+0x204>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d905      	bls.n	8003a26 <SpiritRadioGetdBm2Reg+0x76>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a66      	ldr	r2, [pc, #408]	; (8003bb8 <SpiritRadioGetdBm2Reg+0x208>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d801      	bhi.n	8003a26 <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8003a22:	2304      	movs	r3, #4
 8003a24:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a36:	dd2f      	ble.n	8003a98 <SpiritRadioGetdBm2Reg+0xe8>
 8003a38:	7dfa      	ldrb	r2, [r7, #23]
 8003a3a:	4960      	ldr	r1, [pc, #384]	; (8003bbc <SpiritRadioGetdBm2Reg+0x20c>)
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	3308      	adds	r3, #8
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a54:	7dfa      	ldrb	r2, [r7, #23]
 8003a56:	4959      	ldr	r1, [pc, #356]	; (8003bbc <SpiritRadioGetdBm2Reg+0x20c>)
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	440b      	add	r3, r1
 8003a62:	330c      	adds	r3, #12
 8003a64:	ed93 6a00 	vldr	s12, [r3]
 8003a68:	7dfa      	ldrb	r2, [r7, #23]
 8003a6a:	4954      	ldr	r1, [pc, #336]	; (8003bbc <SpiritRadioGetdBm2Reg+0x20c>)
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	440b      	add	r3, r1
 8003a76:	3308      	adds	r3, #8
 8003a78:	edd3 6a00 	vldr	s13, [r3]
 8003a7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a84:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a90:	dd02      	ble.n	8003a98 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	75bb      	strb	r3, [r7, #22]
 8003a96:	e035      	b.n	8003b04 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003a98:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa4:	d82e      	bhi.n	8003b04 <SpiritRadioGetdBm2Reg+0x154>
 8003aa6:	7dfa      	ldrb	r2, [r7, #23]
 8003aa8:	4944      	ldr	r1, [pc, #272]	; (8003bbc <SpiritRadioGetdBm2Reg+0x20c>)
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003bc0 <SpiritRadioGetdBm2Reg+0x210>
 8003abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac2:	7dfa      	ldrb	r2, [r7, #23]
 8003ac4:	493d      	ldr	r1, [pc, #244]	; (8003bbc <SpiritRadioGetdBm2Reg+0x20c>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	ed93 6a00 	vldr	s12, [r3]
 8003ad6:	7dfa      	ldrb	r2, [r7, #23]
 8003ad8:	4938      	ldr	r1, [pc, #224]	; (8003bbc <SpiritRadioGetdBm2Reg+0x20c>)
 8003ada:	4613      	mov	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	edd3 6a00 	vldr	s13, [r3]
 8003aea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afe:	d501      	bpl.n	8003b04 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003b00:	2302      	movs	r3, #2
 8003b02:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003b04:	7dfa      	ldrb	r2, [r7, #23]
 8003b06:	7dbb      	ldrb	r3, [r7, #22]
 8003b08:	0059      	lsls	r1, r3, #1
 8003b0a:	482c      	ldr	r0, [pc, #176]	; (8003bbc <SpiritRadioGetdBm2Reg+0x20c>)
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	440b      	add	r3, r1
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4403      	add	r3, r0
 8003b1a:	ed93 7a00 	vldr	s14, [r3]
 8003b1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b26:	7dfa      	ldrb	r2, [r7, #23]
 8003b28:	7dbb      	ldrb	r3, [r7, #22]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	1c59      	adds	r1, r3, #1
 8003b2e:	4823      	ldr	r0, [pc, #140]	; (8003bbc <SpiritRadioGetdBm2Reg+0x20c>)
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	440b      	add	r3, r1
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4403      	add	r3, r0
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b46:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003b4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5a:	d503      	bpl.n	8003b64 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003b5c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e00a      	b.n	8003b7a <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003b64:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b68:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003bc4 <SpiritRadioGetdBm2Reg+0x214>
 8003b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b74:	dd01      	ble.n	8003b7a <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <SpiritRadioGetdBm2Reg+0x218>)
 8003b78:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003b7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b82:	edc7 7a01 	vstr	s15, [r7, #4]
 8003b86:	793b      	ldrb	r3, [r7, #4]
 8003b88:	b2db      	uxtb	r3, r3
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	2e5f5680 	.word	0x2e5f5680
 8003b9c:	390c2fe0 	.word	0x390c2fe0
 8003ba0:	35a4e8ff 	.word	0x35a4e8ff
 8003ba4:	1701e47f 	.word	0x1701e47f
 8003ba8:	1c146a60 	.word	0x1c146a60
 8003bac:	11d260bf 	.word	0x11d260bf
 8003bb0:	14ced7e0 	.word	0x14ced7e0
 8003bb4:	08e18f3f 	.word	0x08e18f3f
 8003bb8:	0a6fd060 	.word	0x0a6fd060
 8003bbc:	0800fdf0 	.word	0x0800fdf0
 8003bc0:	42200000 	.word	0x42200000
 8003bc4:	42b40000 	.word	0x42b40000
 8003bc8:	42b40000 	.word	0x42b40000

08003bcc <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	ed87 0a00 	vstr	s0, [r7]
 8003bd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003bda:	f7ff fc4d 	bl	8003478 <SpiritRadioGetFrequencyBase>
 8003bde:	4603      	mov	r3, r0
 8003be0:	ed97 0a00 	vldr	s0, [r7]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fee3 	bl	80039b0 <SpiritRadioGetdBm2Reg>
 8003bea:	4603      	mov	r3, r0
 8003bec:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	f1c3 0317 	rsb	r3, r3, #23
 8003bf4:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003bf6:	f107 020e 	add.w	r2, r7, #14
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f9ec 	bl	8003fdc <RadioSpiWriteRegisters>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <SpiritRadioSetPALeveldBm+0x50>)
 8003c08:	b212      	sxth	r2, r2
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	7019      	strb	r1, [r3, #0]
 8003c0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c12:	705a      	strb	r2, [r3, #1]
  
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	200003f0 	.word	0x200003f0

08003c20 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003c2a:	f107 030f 	add.w	r3, r7, #15
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2101      	movs	r1, #1
 8003c32:	2018      	movs	r0, #24
 8003c34:	f000 fa1e 	bl	8004074 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003c4c:	f107 030f 	add.w	r3, r7, #15
 8003c50:	461a      	mov	r2, r3
 8003c52:	2101      	movs	r1, #1
 8003c54:	2018      	movs	r0, #24
 8003c56:	f000 f9c1 	bl	8003fdc <RadioSpiWriteRegisters>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <SpiritRadioSetPACwc+0x54>)
 8003c5e:	b212      	sxth	r2, r2
 8003c60:	4611      	mov	r1, r2
 8003c62:	7019      	strb	r1, [r3, #0]
 8003c64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c68:	705a      	strb	r2, [r3, #1]
  
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	200003f0 	.word	0x200003f0

08003c78 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003c82:	f107 030f 	add.w	r3, r7, #15
 8003c86:	461a      	mov	r2, r3
 8003c88:	2101      	movs	r1, #1
 8003c8a:	2018      	movs	r0, #24
 8003c8c:	f000 f9f2 	bl	8004074 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	f023 0307 	bic.w	r3, r3, #7
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003c9a:	7bfa      	ldrb	r2, [r7, #15]
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003ca4:	f107 030f 	add.w	r3, r7, #15
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2101      	movs	r1, #1
 8003cac:	2018      	movs	r0, #24
 8003cae:	f000 f995 	bl	8003fdc <RadioSpiWriteRegisters>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003cb6:	b212      	sxth	r2, r2
 8003cb8:	4611      	mov	r1, r2
 8003cba:	7019      	strb	r1, [r3, #0]
 8003cbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003cc0:	705a      	strb	r2, [r3, #1]
  
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200003f0 	.word	0x200003f0

08003cd0 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003cde:	f107 030f 	add.w	r3, r7, #15
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	201e      	movs	r0, #30
 8003ce8:	f000 f9c4 	bl	8004074 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d105      	bne.n	8003cfe <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e004      	b.n	8003d08 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003d08:	f107 030f 	add.w	r3, r7, #15
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2101      	movs	r1, #1
 8003d10:	201e      	movs	r0, #30
 8003d12:	f000 f963 	bl	8003fdc <RadioSpiWriteRegisters>
 8003d16:	4602      	mov	r2, r0
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <SpiritRadioAFCFreezeOnSync+0x60>)
 8003d1a:	b212      	sxth	r2, r2
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	7019      	strb	r1, [r3, #0]
 8003d20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d24:	705a      	strb	r2, [r3, #1]
  
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200003f0 	.word	0x200003f0

08003d34 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003d3e:	f107 030f 	add.w	r3, r7, #15
 8003d42:	461a      	mov	r2, r3
 8003d44:	2101      	movs	r1, #1
 8003d46:	209e      	movs	r0, #158	; 0x9e
 8003d48:	f000 f994 	bl	8004074 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d105      	bne.n	8003d5e <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	e004      	b.n	8003d68 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003d68:	f107 030f 	add.w	r3, r7, #15
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2101      	movs	r1, #1
 8003d70:	209e      	movs	r0, #158	; 0x9e
 8003d72:	f000 f933 	bl	8003fdc <RadioSpiWriteRegisters>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <SpiritRadioSetRefDiv+0x5c>)
 8003d7a:	b212      	sxth	r2, r2
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	7019      	strb	r1, [r3, #0]
 8003d80:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d84:	705a      	strb	r2, [r3, #1]
  
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200003f0 	.word	0x200003f0

08003d94 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003d9a:	1dfb      	adds	r3, r7, #7
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2101      	movs	r1, #1
 8003da0:	209e      	movs	r0, #158	; 0x9e
 8003da2:	f000 f967 	bl	8004074 <RadioSpiReadRegisters>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <SpiritRadioGetRefDiv+0x40>)
 8003daa:	b212      	sxth	r2, r2
 8003dac:	4611      	mov	r1, r2
 8003dae:	7019      	strb	r1, [r3, #0]
 8003db0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003db4:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	09db      	lsrs	r3, r3, #7
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003dc8:	2300      	movs	r3, #0
  }
  
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200003f0 	.word	0x200003f0

08003dd8 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003de2:	f107 030f 	add.w	r3, r7, #15
 8003de6:	461a      	mov	r2, r3
 8003de8:	2101      	movs	r1, #1
 8003dea:	20b4      	movs	r0, #180	; 0xb4
 8003dec:	f000 f942 	bl	8004074 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	f023 0308 	bic.w	r3, r3, #8
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	73fb      	strb	r3, [r7, #15]
 8003e00:	e004      	b.n	8003e0c <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	f043 0308 	orr.w	r3, r3, #8
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003e0c:	f107 030f 	add.w	r3, r7, #15
 8003e10:	461a      	mov	r2, r3
 8003e12:	2101      	movs	r1, #1
 8003e14:	20b4      	movs	r0, #180	; 0xb4
 8003e16:	f000 f8e1 	bl	8003fdc <RadioSpiWriteRegisters>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <SpiritRadioSetDigDiv+0x5c>)
 8003e1e:	b212      	sxth	r2, r2
 8003e20:	4611      	mov	r1, r2
 8003e22:	7019      	strb	r1, [r3, #0]
 8003e24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e28:	705a      	strb	r2, [r3, #1]
  
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200003f0 	.word	0x200003f0

08003e38 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003e3e:	1dfb      	adds	r3, r7, #7
 8003e40:	461a      	mov	r2, r3
 8003e42:	2101      	movs	r1, #1
 8003e44:	20b4      	movs	r0, #180	; 0xb4
 8003e46:	f000 f915 	bl	8004074 <RadioSpiReadRegisters>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <SpiritRadioGetDigDiv+0x40>)
 8003e4e:	b212      	sxth	r2, r2
 8003e50:	4611      	mov	r1, r2
 8003e52:	7019      	strb	r1, [r3, #0]
 8003e54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e58:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003e6c:	2301      	movs	r3, #1
  }
  
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200003f0 	.word	0x200003f0

08003e7c <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <SpiritRadioGetXtalFrequency+0x14>)
 8003e82:	681b      	ldr	r3, [r3, #0]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	200003ec 	.word	0x200003ec

08003e94 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <SpiritRadioSetXtalFrequency+0x1c>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6013      	str	r3, [r2, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	200003ec 	.word	0x200003ec

08003eb4 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8003ebe:	1dfb      	adds	r3, r7, #7
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	2054      	movs	r0, #84	; 0x54
 8003ec6:	f000 f889 	bl	8003fdc <RadioSpiWriteRegisters>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <SpiritTimerSetRxTimeoutCounter+0x30>)
 8003ece:	b212      	sxth	r2, r2
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	7019      	strb	r1, [r3, #0]
 8003ed4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ed8:	705a      	strb	r2, [r3, #1]

}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200003f0 	.word	0x200003f0

08003ee8 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003ef2:	f107 030c 	add.w	r3, r7, #12
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2102      	movs	r1, #2
 8003efa:	204f      	movs	r0, #79	; 0x4f
 8003efc:	f000 f8ba 	bl	8004074 <RadioSpiReadRegisters>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003f04:	b212      	sxth	r2, r2
 8003f06:	4611      	mov	r1, r2
 8003f08:	7019      	strb	r1, [r3, #0]
 8003f0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f0e:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003f10:	7b3b      	ldrb	r3, [r7, #12]
 8003f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8003f1a:	7b3b      	ldrb	r3, [r7, #12]
 8003f1c:	b25a      	sxtb	r2, r3
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	b25b      	sxtb	r3, r3
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	b25b      	sxtb	r3, r3
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003f32:	7b7b      	ldrb	r3, [r7, #13]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8003f3c:	7b7b      	ldrb	r3, [r7, #13]
 8003f3e:	b25a      	sxtb	r2, r3
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	015b      	lsls	r3, r3, #5
 8003f44:	b25b      	sxtb	r3, r3
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003f4e:	f107 030c 	add.w	r3, r7, #12
 8003f52:	461a      	mov	r2, r3
 8003f54:	2102      	movs	r1, #2
 8003f56:	204f      	movs	r0, #79	; 0x4f
 8003f58:	f000 f840 	bl	8003fdc <RadioSpiWriteRegisters>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003f60:	b212      	sxth	r2, r2
 8003f62:	4611      	mov	r1, r2
 8003f64:	7019      	strb	r1, [r3, #0]
 8003f66:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f6a:	705a      	strb	r2, [r3, #1]

}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200003f0 	.word	0x200003f0

08003f78 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	461a      	mov	r2, r3
 8003f82:	2102      	movs	r1, #2
 8003f84:	20c0      	movs	r0, #192	; 0xc0
 8003f86:	f000 f875 	bl	8004074 <RadioSpiReadRegisters>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <SpiritRefreshStatus+0x3c>)
 8003f8e:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <SpiritRefreshStatus+0x3c>)
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d1f1      	bne.n	8003f7e <SpiritRefreshStatus+0x6>
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <SpiritRefreshStatus+0x40>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d1ea      	bne.n	8003f7e <SpiritRefreshStatus+0x6>

}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200003f0 	.word	0x200003f0
 8003fb8:	200003f1 	.word	0x200003f1

08003fbc <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <RadioSpiInit+0x1c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <RadioSpiInit+0x16>
  {
    Error_Handler();
 8003fce:	f7fd fb07 	bl	80015e0 <Error_Handler>
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000010 	.word	0x20000010

08003fdc <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	603a      	str	r2, [r7, #0]
 8003fe6:	71fb      	strb	r3, [r7, #7]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8003fec:	2300      	movs	r3, #0
 8003fee:	743b      	strb	r3, [r7, #16]
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003ff4:	2006      	movs	r0, #6
 8003ff6:	f000 fb32 	bl	800465e <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2110      	movs	r1, #16
 8003ffe:	481b      	ldr	r0, [pc, #108]	; (800406c <RadioSpiWriteRegisters+0x90>)
 8004000:	f000 fccc 	bl	800499c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <RadioSpiWriteRegisters+0x94>)
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	f107 020c 	add.w	r2, r7, #12
 800400c:	f107 0110 	add.w	r1, r7, #16
 8004010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2302      	movs	r3, #2
 8004018:	f003 f860 	bl	80070dc <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <RadioSpiWriteRegisters+0x94>)
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	79bb      	ldrb	r3, [r7, #6]
 8004022:	b29a      	uxth	r2, r3
 8004024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	f002 fe0a 	bl	8006c42 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800402e:	2201      	movs	r2, #1
 8004030:	2110      	movs	r1, #16
 8004032:	480e      	ldr	r0, [pc, #56]	; (800406c <RadioSpiWriteRegisters+0x90>)
 8004034:	f000 fcb2 	bl	800499c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004038:	2006      	movs	r0, #6
 800403a:	f000 fb02 	bl	8004642 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800403e:	f107 0308 	add.w	r3, r7, #8
 8004042:	3301      	adds	r3, #1
 8004044:	7b3a      	ldrb	r2, [r7, #12]
 8004046:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004048:	f107 0308 	add.w	r3, r7, #8
 800404c:	7b7a      	ldrb	r2, [r7, #13]
 800404e:	701a      	strb	r2, [r3, #0]

  return status;
 8004050:	893b      	ldrh	r3, [r7, #8]
 8004052:	82bb      	strh	r3, [r7, #20]
 8004054:	2300      	movs	r3, #0
 8004056:	7d3a      	ldrb	r2, [r7, #20]
 8004058:	f362 0307 	bfi	r3, r2, #0, #8
 800405c:	7d7a      	ldrb	r2, [r7, #21]
 800405e:	f362 230f 	bfi	r3, r2, #8, #8

}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40020000 	.word	0x40020000
 8004070:	20000010 	.word	0x20000010

08004074 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	4603      	mov	r3, r0
 800407c:	603a      	str	r2, [r7, #0]
 800407e:	71fb      	strb	r3, [r7, #7]
 8004080:	460b      	mov	r3, r1
 8004082:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8004084:	2301      	movs	r3, #1
 8004086:	743b      	strb	r3, [r7, #16]
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800408c:	2006      	movs	r0, #6
 800408e:	f000 fae6 	bl	800465e <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004092:	2200      	movs	r2, #0
 8004094:	2110      	movs	r1, #16
 8004096:	481b      	ldr	r0, [pc, #108]	; (8004104 <RadioSpiReadRegisters+0x90>)
 8004098:	f000 fc80 	bl	800499c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <RadioSpiReadRegisters+0x94>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	f107 020c 	add.w	r2, r7, #12
 80040a4:	f107 0110 	add.w	r1, r7, #16
 80040a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2302      	movs	r3, #2
 80040b0:	f003 f814 	bl	80070dc <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <RadioSpiReadRegisters+0x94>)
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	79bb      	ldrb	r3, [r7, #6]
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	f002 fefa 	bl	8006eba <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80040c6:	2201      	movs	r2, #1
 80040c8:	2110      	movs	r1, #16
 80040ca:	480e      	ldr	r0, [pc, #56]	; (8004104 <RadioSpiReadRegisters+0x90>)
 80040cc:	f000 fc66 	bl	800499c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80040d0:	2006      	movs	r0, #6
 80040d2:	f000 fab6 	bl	8004642 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	3301      	adds	r3, #1
 80040dc:	7b3a      	ldrb	r2, [r7, #12]
 80040de:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80040e0:	f107 0308 	add.w	r3, r7, #8
 80040e4:	7b7a      	ldrb	r2, [r7, #13]
 80040e6:	701a      	strb	r2, [r3, #0]

  return status;
 80040e8:	893b      	ldrh	r3, [r7, #8]
 80040ea:	82bb      	strh	r3, [r7, #20]
 80040ec:	2300      	movs	r3, #0
 80040ee:	7d3a      	ldrb	r2, [r7, #20]
 80040f0:	f362 0307 	bfi	r3, r2, #0, #8
 80040f4:	7d7a      	ldrb	r2, [r7, #21]
 80040f6:	f362 230f 	bfi	r3, r2, #8, #8
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40020000 	.word	0x40020000
 8004108:	20000010 	.word	0x20000010

0800410c <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af02      	add	r7, sp, #8
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	743b      	strb	r3, [r7, #16]
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800411e:	2006      	movs	r0, #6
 8004120:	f000 fa9d 	bl	800465e <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004124:	2200      	movs	r2, #0
 8004126:	2110      	movs	r1, #16
 8004128:	4816      	ldr	r0, [pc, #88]	; (8004184 <RadioSpiCommandStrobes+0x78>)
 800412a:	f000 fc37 	bl	800499c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800412e:	4b16      	ldr	r3, [pc, #88]	; (8004188 <RadioSpiCommandStrobes+0x7c>)
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	f107 020c 	add.w	r2, r7, #12
 8004136:	f107 0110 	add.w	r1, r7, #16
 800413a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	2302      	movs	r3, #2
 8004142:	f002 ffcb 	bl	80070dc <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004146:	2201      	movs	r2, #1
 8004148:	2110      	movs	r1, #16
 800414a:	480e      	ldr	r0, [pc, #56]	; (8004184 <RadioSpiCommandStrobes+0x78>)
 800414c:	f000 fc26 	bl	800499c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004150:	2006      	movs	r0, #6
 8004152:	f000 fa76 	bl	8004642 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004156:	f107 0308 	add.w	r3, r7, #8
 800415a:	3301      	adds	r3, #1
 800415c:	7b3a      	ldrb	r2, [r7, #12]
 800415e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	7b7a      	ldrb	r2, [r7, #13]
 8004166:	701a      	strb	r2, [r3, #0]

  return status;
 8004168:	893b      	ldrh	r3, [r7, #8]
 800416a:	82bb      	strh	r3, [r7, #20]
 800416c:	2300      	movs	r3, #0
 800416e:	7d3a      	ldrb	r2, [r7, #20]
 8004170:	f362 0307 	bfi	r3, r2, #0, #8
 8004174:	7d7a      	ldrb	r2, [r7, #21]
 8004176:	f362 230f 	bfi	r3, r2, #8, #8
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40020000 	.word	0x40020000
 8004188:	20000010 	.word	0x20000010

0800418c <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	4603      	mov	r3, r0
 8004194:	6039      	str	r1, [r7, #0]
 8004196:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004198:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800419c:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800419e:	2006      	movs	r0, #6
 80041a0:	f000 fa5d 	bl	800465e <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80041a4:	2200      	movs	r2, #0
 80041a6:	2110      	movs	r1, #16
 80041a8:	481a      	ldr	r0, [pc, #104]	; (8004214 <RadioSpiWriteFifo+0x88>)
 80041aa:	f000 fbf7 	bl	800499c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80041ae:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <RadioSpiWriteFifo+0x8c>)
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f107 020c 	add.w	r2, r7, #12
 80041b6:	f107 0110 	add.w	r1, r7, #16
 80041ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2302      	movs	r3, #2
 80041c2:	f002 ff8b 	bl	80070dc <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <RadioSpiWriteFifo+0x8c>)
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041d2:	6839      	ldr	r1, [r7, #0]
 80041d4:	f002 fd35 	bl	8006c42 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80041d8:	2201      	movs	r2, #1
 80041da:	2110      	movs	r1, #16
 80041dc:	480d      	ldr	r0, [pc, #52]	; (8004214 <RadioSpiWriteFifo+0x88>)
 80041de:	f000 fbdd 	bl	800499c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80041e2:	2006      	movs	r0, #6
 80041e4:	f000 fa2d 	bl	8004642 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	3301      	adds	r3, #1
 80041ee:	7b3a      	ldrb	r2, [r7, #12]
 80041f0:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80041f2:	f107 0308 	add.w	r3, r7, #8
 80041f6:	7b7a      	ldrb	r2, [r7, #13]
 80041f8:	701a      	strb	r2, [r3, #0]

  return status;
 80041fa:	893b      	ldrh	r3, [r7, #8]
 80041fc:	82bb      	strh	r3, [r7, #20]
 80041fe:	2300      	movs	r3, #0
 8004200:	7d3a      	ldrb	r2, [r7, #20]
 8004202:	f362 0307 	bfi	r3, r2, #0, #8
 8004206:	7d7a      	ldrb	r2, [r7, #21]
 8004208:	f362 230f 	bfi	r3, r2, #8, #8
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40020000 	.word	0x40020000
 8004218:	20000010 	.word	0x20000010

0800421c <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af02      	add	r7, sp, #8
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8004228:	f64f 7301 	movw	r3, #65281	; 0xff01
 800422c:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800422e:	2006      	movs	r0, #6
 8004230:	f000 fa15 	bl	800465e <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004234:	2200      	movs	r2, #0
 8004236:	2110      	movs	r1, #16
 8004238:	481a      	ldr	r0, [pc, #104]	; (80042a4 <RadioSpiReadFifo+0x88>)
 800423a:	f000 fbaf 	bl	800499c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800423e:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <RadioSpiReadFifo+0x8c>)
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	f107 020c 	add.w	r2, r7, #12
 8004246:	f107 0110 	add.w	r1, r7, #16
 800424a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	2302      	movs	r3, #2
 8004252:	f002 ff43 	bl	80070dc <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004256:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <RadioSpiReadFifo+0x8c>)
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	b29a      	uxth	r2, r3
 800425e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004262:	6839      	ldr	r1, [r7, #0]
 8004264:	f002 fe29 	bl	8006eba <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 8004268:	2201      	movs	r2, #1
 800426a:	2110      	movs	r1, #16
 800426c:	480d      	ldr	r0, [pc, #52]	; (80042a4 <RadioSpiReadFifo+0x88>)
 800426e:	f000 fb95 	bl	800499c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004272:	2006      	movs	r0, #6
 8004274:	f000 f9e5 	bl	8004642 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004278:	f107 0308 	add.w	r3, r7, #8
 800427c:	3301      	adds	r3, #1
 800427e:	7b3a      	ldrb	r2, [r7, #12]
 8004280:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	7b7a      	ldrb	r2, [r7, #13]
 8004288:	701a      	strb	r2, [r3, #0]

  return status;
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	82bb      	strh	r3, [r7, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	7d3a      	ldrb	r2, [r7, #20]
 8004292:	f362 0307 	bfi	r3, r2, #0, #8
 8004296:	7d7a      	ldrb	r2, [r7, #21]
 8004298:	f362 230f 	bfi	r3, r2, #8, #8
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40020000 	.word	0x40020000
 80042a8:	20000010 	.word	0x20000010

080042ac <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80042b0:	2201      	movs	r2, #1
 80042b2:	2102      	movs	r1, #2
 80042b4:	4802      	ldr	r0, [pc, #8]	; (80042c0 <RadioEnterShutdown+0x14>)
 80042b6:	f000 fb71 	bl	800499c <HAL_GPIO_WritePin>
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40020400 	.word	0x40020400

080042c4 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80042c8:	2200      	movs	r2, #0
 80042ca:	2102      	movs	r1, #2
 80042cc:	4803      	ldr	r0, [pc, #12]	; (80042dc <RadioExitShutdown+0x18>)
 80042ce:	f000 fb65 	bl	800499c <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 80042d2:	2001      	movs	r0, #1
 80042d4:	f000 f876 	bl	80043c4 <HAL_Delay>
}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40020400 	.word	0x40020400

080042e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_Init+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <HAL_Init+0x40>)
 80042ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_Init+0x40>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <HAL_Init+0x40>)
 80042f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_Init+0x40>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a07      	ldr	r2, [pc, #28]	; (8004320 <HAL_Init+0x40>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004308:	2003      	movs	r0, #3
 800430a:	f000 f973 	bl	80045f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430e:	200f      	movs	r0, #15
 8004310:	f000 f808 	bl	8004324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004314:	f7fd f96a 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40023c00 	.word	0x40023c00

08004324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_InitTick+0x54>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_InitTick+0x58>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800433a:	fbb3 f3f1 	udiv	r3, r3, r1
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f999 	bl	800467a <HAL_SYSTICK_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e00e      	b.n	8004370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d80a      	bhi.n	800436e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004358:	2200      	movs	r2, #0
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	f000 f953 	bl	800460a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004364:	4a06      	ldr	r2, [pc, #24]	; (8004380 <HAL_InitTick+0x5c>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000008 	.word	0x20000008
 800437c:	20000018 	.word	0x20000018
 8004380:	20000014 	.word	0x20000014

08004384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_IncTick+0x20>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_IncTick+0x24>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4413      	add	r3, r2
 8004394:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <HAL_IncTick+0x24>)
 8004396:	6013      	str	r3, [r2, #0]
}
 8004398:	bf00      	nop
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000018 	.word	0x20000018
 80043a8:	200003f4 	.word	0x200003f4

080043ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return uwTick;
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_GetTick+0x14>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	200003f4 	.word	0x200003f4

080043c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043cc:	f7ff ffee 	bl	80043ac <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d005      	beq.n	80043ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <HAL_Delay+0x44>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043ea:	bf00      	nop
 80043ec:	f7ff ffde 	bl	80043ac <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d8f7      	bhi.n	80043ec <HAL_Delay+0x28>
  {
  }
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000018 	.word	0x20000018

0800440c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <__NVIC_SetPriorityGrouping+0x44>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004428:	4013      	ands	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800443c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800443e:	4a04      	ldr	r2, [pc, #16]	; (8004450 <__NVIC_SetPriorityGrouping+0x44>)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	60d3      	str	r3, [r2, #12]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <__NVIC_GetPriorityGrouping+0x18>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	0a1b      	lsrs	r3, r3, #8
 800445e:	f003 0307 	and.w	r3, r3, #7
}
 8004462:	4618      	mov	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	e000ed00 	.word	0xe000ed00

08004470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	db0b      	blt.n	800449a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	4907      	ldr	r1, [pc, #28]	; (80044a8 <__NVIC_EnableIRQ+0x38>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2001      	movs	r0, #1
 8004492:	fa00 f202 	lsl.w	r2, r0, r2
 8004496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	e000e100 	.word	0xe000e100

080044ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	db12      	blt.n	80044e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	490a      	ldr	r1, [pc, #40]	; (80044f0 <__NVIC_DisableIRQ+0x44>)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	2001      	movs	r0, #1
 80044ce:	fa00 f202 	lsl.w	r2, r0, r2
 80044d2:	3320      	adds	r3, #32
 80044d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80044d8:	f3bf 8f4f 	dsb	sy
}
 80044dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044de:	f3bf 8f6f 	isb	sy
}
 80044e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	e000e100 	.word	0xe000e100

080044f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004504:	2b00      	cmp	r3, #0
 8004506:	db0a      	blt.n	800451e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	490c      	ldr	r1, [pc, #48]	; (8004540 <__NVIC_SetPriority+0x4c>)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	0112      	lsls	r2, r2, #4
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	440b      	add	r3, r1
 8004518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800451c:	e00a      	b.n	8004534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	4908      	ldr	r1, [pc, #32]	; (8004544 <__NVIC_SetPriority+0x50>)
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	3b04      	subs	r3, #4
 800452c:	0112      	lsls	r2, r2, #4
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	440b      	add	r3, r1
 8004532:	761a      	strb	r2, [r3, #24]
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000e100 	.word	0xe000e100
 8004544:	e000ed00 	.word	0xe000ed00

08004548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004548:	b480      	push	{r7}
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f1c3 0307 	rsb	r3, r3, #7
 8004562:	2b04      	cmp	r3, #4
 8004564:	bf28      	it	cs
 8004566:	2304      	movcs	r3, #4
 8004568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3304      	adds	r3, #4
 800456e:	2b06      	cmp	r3, #6
 8004570:	d902      	bls.n	8004578 <NVIC_EncodePriority+0x30>
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3b03      	subs	r3, #3
 8004576:	e000      	b.n	800457a <NVIC_EncodePriority+0x32>
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800457c:	f04f 32ff 	mov.w	r2, #4294967295
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43da      	mvns	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	401a      	ands	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004590:	f04f 31ff 	mov.w	r1, #4294967295
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	43d9      	mvns	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a0:	4313      	orrs	r3, r2
         );
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3724      	adds	r7, #36	; 0x24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c0:	d301      	bcc.n	80045c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045c2:	2301      	movs	r3, #1
 80045c4:	e00f      	b.n	80045e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <SysTick_Config+0x40>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ce:	210f      	movs	r1, #15
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	f7ff ff8e 	bl	80044f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <SysTick_Config+0x40>)
 80045da:	2200      	movs	r2, #0
 80045dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045de:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <SysTick_Config+0x40>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	e000e010 	.word	0xe000e010

080045f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ff05 	bl	800440c <__NVIC_SetPriorityGrouping>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800460a:	b580      	push	{r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	4603      	mov	r3, r0
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800461c:	f7ff ff1a 	bl	8004454 <__NVIC_GetPriorityGrouping>
 8004620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	6978      	ldr	r0, [r7, #20]
 8004628:	f7ff ff8e 	bl	8004548 <NVIC_EncodePriority>
 800462c:	4602      	mov	r2, r0
 800462e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff5d 	bl	80044f4 <__NVIC_SetPriority>
}
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff0d 	bl	8004470 <__NVIC_EnableIRQ>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff1d 	bl	80044ac <__NVIC_DisableIRQ>
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ff94 	bl	80045b0 <SysTick_Config>
 8004688:	4603      	mov	r3, r0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e159      	b.n	8004964 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046b0:	2201      	movs	r2, #1
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	f040 8148 	bne.w	800495e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d005      	beq.n	80046e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d130      	bne.n	8004748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	2203      	movs	r2, #3
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800471c:	2201      	movs	r2, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 0201 	and.w	r2, r3, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	2b03      	cmp	r3, #3
 8004752:	d017      	beq.n	8004784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	2203      	movs	r2, #3
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d123      	bne.n	80047d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	08da      	lsrs	r2, r3, #3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3208      	adds	r2, #8
 8004798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	220f      	movs	r2, #15
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	08da      	lsrs	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3208      	adds	r2, #8
 80047d2:	69b9      	ldr	r1, [r7, #24]
 80047d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0203 	and.w	r2, r3, #3
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80a2 	beq.w	800495e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	4b57      	ldr	r3, [pc, #348]	; (800497c <HAL_GPIO_Init+0x2e8>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	4a56      	ldr	r2, [pc, #344]	; (800497c <HAL_GPIO_Init+0x2e8>)
 8004824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004828:	6453      	str	r3, [r2, #68]	; 0x44
 800482a:	4b54      	ldr	r3, [pc, #336]	; (800497c <HAL_GPIO_Init+0x2e8>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004836:	4a52      	ldr	r2, [pc, #328]	; (8004980 <HAL_GPIO_Init+0x2ec>)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	3302      	adds	r3, #2
 800483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	220f      	movs	r2, #15
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a49      	ldr	r2, [pc, #292]	; (8004984 <HAL_GPIO_Init+0x2f0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d019      	beq.n	8004896 <HAL_GPIO_Init+0x202>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a48      	ldr	r2, [pc, #288]	; (8004988 <HAL_GPIO_Init+0x2f4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_GPIO_Init+0x1fe>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a47      	ldr	r2, [pc, #284]	; (800498c <HAL_GPIO_Init+0x2f8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00d      	beq.n	800488e <HAL_GPIO_Init+0x1fa>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a46      	ldr	r2, [pc, #280]	; (8004990 <HAL_GPIO_Init+0x2fc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <HAL_GPIO_Init+0x1f6>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a45      	ldr	r2, [pc, #276]	; (8004994 <HAL_GPIO_Init+0x300>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d101      	bne.n	8004886 <HAL_GPIO_Init+0x1f2>
 8004882:	2304      	movs	r3, #4
 8004884:	e008      	b.n	8004898 <HAL_GPIO_Init+0x204>
 8004886:	2307      	movs	r3, #7
 8004888:	e006      	b.n	8004898 <HAL_GPIO_Init+0x204>
 800488a:	2303      	movs	r3, #3
 800488c:	e004      	b.n	8004898 <HAL_GPIO_Init+0x204>
 800488e:	2302      	movs	r3, #2
 8004890:	e002      	b.n	8004898 <HAL_GPIO_Init+0x204>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_GPIO_Init+0x204>
 8004896:	2300      	movs	r3, #0
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	f002 0203 	and.w	r2, r2, #3
 800489e:	0092      	lsls	r2, r2, #2
 80048a0:	4093      	lsls	r3, r2
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048a8:	4935      	ldr	r1, [pc, #212]	; (8004980 <HAL_GPIO_Init+0x2ec>)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	089b      	lsrs	r3, r3, #2
 80048ae:	3302      	adds	r3, #2
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048b6:	4b38      	ldr	r3, [pc, #224]	; (8004998 <HAL_GPIO_Init+0x304>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048da:	4a2f      	ldr	r2, [pc, #188]	; (8004998 <HAL_GPIO_Init+0x304>)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048e0:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_GPIO_Init+0x304>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004904:	4a24      	ldr	r2, [pc, #144]	; (8004998 <HAL_GPIO_Init+0x304>)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800490a:	4b23      	ldr	r3, [pc, #140]	; (8004998 <HAL_GPIO_Init+0x304>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800492e:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <HAL_GPIO_Init+0x304>)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004934:	4b18      	ldr	r3, [pc, #96]	; (8004998 <HAL_GPIO_Init+0x304>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004958:	4a0f      	ldr	r2, [pc, #60]	; (8004998 <HAL_GPIO_Init+0x304>)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3301      	adds	r3, #1
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2b0f      	cmp	r3, #15
 8004968:	f67f aea2 	bls.w	80046b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	3724      	adds	r7, #36	; 0x24
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800
 8004980:	40013800 	.word	0x40013800
 8004984:	40020000 	.word	0x40020000
 8004988:	40020400 	.word	0x40020400
 800498c:	40020800 	.word	0x40020800
 8004990:	40020c00 	.word	0x40020c00
 8004994:	40021000 	.word	0x40021000
 8004998:	40013c00 	.word	0x40013c00

0800499c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]
 80049a8:	4613      	mov	r3, r2
 80049aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049ac:	787b      	ldrb	r3, [r7, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049b2:	887a      	ldrh	r2, [r7, #2]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049b8:	e003      	b.n	80049c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	041a      	lsls	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	619a      	str	r2, [r3, #24]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d006      	beq.n	80049f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049e6:	4a05      	ldr	r2, [pc, #20]	; (80049fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f806 	bl	8004a00 <HAL_GPIO_EXTI_Callback>
  }
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40013c00 	.word	0x40013c00

08004a00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e12b      	b.n	8004c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc fdfc 	bl	800163c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	; 0x24
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0201 	bic.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f002 f830 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 8004a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4a81      	ldr	r2, [pc, #516]	; (8004c8c <HAL_I2C_Init+0x274>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d807      	bhi.n	8004a9c <HAL_I2C_Init+0x84>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4a80      	ldr	r2, [pc, #512]	; (8004c90 <HAL_I2C_Init+0x278>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	bf94      	ite	ls
 8004a94:	2301      	movls	r3, #1
 8004a96:	2300      	movhi	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e006      	b.n	8004aaa <HAL_I2C_Init+0x92>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a7d      	ldr	r2, [pc, #500]	; (8004c94 <HAL_I2C_Init+0x27c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bf94      	ite	ls
 8004aa4:	2301      	movls	r3, #1
 8004aa6:	2300      	movhi	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e0e7      	b.n	8004c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a78      	ldr	r2, [pc, #480]	; (8004c98 <HAL_I2C_Init+0x280>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0c9b      	lsrs	r3, r3, #18
 8004abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a6a      	ldr	r2, [pc, #424]	; (8004c8c <HAL_I2C_Init+0x274>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d802      	bhi.n	8004aec <HAL_I2C_Init+0xd4>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	e009      	b.n	8004b00 <HAL_I2C_Init+0xe8>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	4a69      	ldr	r2, [pc, #420]	; (8004c9c <HAL_I2C_Init+0x284>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	099b      	lsrs	r3, r3, #6
 8004afe:	3301      	adds	r3, #1
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	495c      	ldr	r1, [pc, #368]	; (8004c8c <HAL_I2C_Init+0x274>)
 8004b1c:	428b      	cmp	r3, r1
 8004b1e:	d819      	bhi.n	8004b54 <HAL_I2C_Init+0x13c>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1e59      	subs	r1, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b34:	400b      	ands	r3, r1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_I2C_Init+0x138>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1e59      	subs	r1, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b48:	3301      	adds	r3, #1
 8004b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4e:	e051      	b.n	8004bf4 <HAL_I2C_Init+0x1dc>
 8004b50:	2304      	movs	r3, #4
 8004b52:	e04f      	b.n	8004bf4 <HAL_I2C_Init+0x1dc>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d111      	bne.n	8004b80 <HAL_I2C_Init+0x168>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1e58      	subs	r0, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	440b      	add	r3, r1
 8004b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e012      	b.n	8004ba6 <HAL_I2C_Init+0x18e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1e58      	subs	r0, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	0099      	lsls	r1, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_Init+0x196>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e022      	b.n	8004bf4 <HAL_I2C_Init+0x1dc>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_I2C_Init+0x1bc>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1e58      	subs	r0, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6859      	ldr	r1, [r3, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	440b      	add	r3, r1
 8004bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd2:	e00f      	b.n	8004bf4 <HAL_I2C_Init+0x1dc>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e58      	subs	r0, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	0099      	lsls	r1, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bea:	3301      	adds	r3, #1
 8004bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	6809      	ldr	r1, [r1, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69da      	ldr	r2, [r3, #28]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6911      	ldr	r1, [r2, #16]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68d2      	ldr	r2, [r2, #12]
 8004c2e:	4311      	orrs	r1, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	000186a0 	.word	0x000186a0
 8004c90:	001e847f 	.word	0x001e847f
 8004c94:	003d08ff 	.word	0x003d08ff
 8004c98:	431bde83 	.word	0x431bde83
 8004c9c:	10624dd3 	.word	0x10624dd3

08004ca0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	461a      	mov	r2, r3
 8004cac:	460b      	mov	r3, r1
 8004cae:	817b      	strh	r3, [r7, #10]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cb4:	f7ff fb7a 	bl	80043ac <HAL_GetTick>
 8004cb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	f040 80e0 	bne.w	8004e88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2319      	movs	r3, #25
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4970      	ldr	r1, [pc, #448]	; (8004e94 <HAL_I2C_Master_Transmit+0x1f4>)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f001 f8f6 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e0d3      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_I2C_Master_Transmit+0x50>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e0cc      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d007      	beq.n	8004d16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2221      	movs	r2, #33	; 0x21
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2210      	movs	r2, #16
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	893a      	ldrh	r2, [r7, #8]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a50      	ldr	r2, [pc, #320]	; (8004e98 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d58:	8979      	ldrh	r1, [r7, #10]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fde2 	bl	8005928 <I2C_MasterRequestWrite>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e08d      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d84:	e066      	b.n	8004e54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	6a39      	ldr	r1, [r7, #32]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f001 f970 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d107      	bne.n	8004dae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e06b      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d11b      	bne.n	8004e28 <HAL_I2C_Master_Transmit+0x188>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d017      	beq.n	8004e28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	6a39      	ldr	r1, [r7, #32]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f001 f960 	bl	80060f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d107      	bne.n	8004e50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e01a      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d194      	bne.n	8004d86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	00100002 	.word	0x00100002
 8004e98:	ffff0000 	.word	0xffff0000

08004e9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08c      	sub	sp, #48	; 0x30
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	817b      	strh	r3, [r7, #10]
 8004eac:	4613      	mov	r3, r2
 8004eae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eb0:	f7ff fa7c 	bl	80043ac <HAL_GetTick>
 8004eb4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	f040 820b 	bne.w	80052da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2319      	movs	r3, #25
 8004eca:	2201      	movs	r2, #1
 8004ecc:	497c      	ldr	r1, [pc, #496]	; (80050c0 <HAL_I2C_Master_Receive+0x224>)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fff8 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
 8004edc:	e1fe      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_I2C_Master_Receive+0x50>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e1f7      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d007      	beq.n	8004f12 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2222      	movs	r2, #34	; 0x22
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	893a      	ldrh	r2, [r7, #8]
 8004f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a5c      	ldr	r2, [pc, #368]	; (80050c4 <HAL_I2C_Master_Receive+0x228>)
 8004f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f54:	8979      	ldrh	r1, [r7, #10]
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fd66 	bl	8005a2c <I2C_MasterRequestRead>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e1b8      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d113      	bne.n	8004f9a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f72:	2300      	movs	r3, #0
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	623b      	str	r3, [r7, #32]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e18c      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d11b      	bne.n	8004fda <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e16c      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d11b      	bne.n	800501a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	e14c      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005028:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005040:	e138      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005046:	2b03      	cmp	r3, #3
 8005048:	f200 80f1 	bhi.w	800522e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005050:	2b01      	cmp	r3, #1
 8005052:	d123      	bne.n	800509c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005056:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f001 f88b 	bl	8006174 <I2C_WaitOnRXNEFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e139      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a
 800509a:	e10b      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d14e      	bne.n	8005142 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	2200      	movs	r2, #0
 80050ac:	4906      	ldr	r1, [pc, #24]	; (80050c8 <HAL_I2C_Master_Receive+0x22c>)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 ff08 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e10e      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
 80050be:	bf00      	nop
 80050c0:	00100002 	.word	0x00100002
 80050c4:	ffff0000 	.word	0xffff0000
 80050c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005140:	e0b8      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	2200      	movs	r2, #0
 800514a:	4966      	ldr	r1, [pc, #408]	; (80052e4 <HAL_I2C_Master_Receive+0x448>)
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 feb9 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0bf      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2200      	movs	r2, #0
 80051a6:	494f      	ldr	r1, [pc, #316]	; (80052e4 <HAL_I2C_Master_Receive+0x448>)
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fe8b 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e091      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800522c:	e042      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800522e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 ff9e 	bl	8006174 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e04c      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b04      	cmp	r3, #4
 8005280:	d118      	bne.n	80052b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f47f aec2 	bne.w	8005042 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e000      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052da:	2302      	movs	r3, #2
  }
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3728      	adds	r7, #40	; 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	00010004 	.word	0x00010004

080052e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	817b      	strh	r3, [r7, #10]
 80052fa:	460b      	mov	r3, r1
 80052fc:	813b      	strh	r3, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005302:	f7ff f853 	bl	80043ac <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b20      	cmp	r3, #32
 8005312:	f040 80d9 	bne.w	80054c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2319      	movs	r3, #25
 800531c:	2201      	movs	r2, #1
 800531e:	496d      	ldr	r1, [pc, #436]	; (80054d4 <HAL_I2C_Mem_Write+0x1ec>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fdcf 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
 800532e:	e0cc      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_I2C_Mem_Write+0x56>
 800533a:	2302      	movs	r3, #2
 800533c:	e0c5      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b01      	cmp	r3, #1
 8005352:	d007      	beq.n	8005364 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2221      	movs	r2, #33	; 0x21
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2240      	movs	r2, #64	; 0x40
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a3a      	ldr	r2, [r7, #32]
 800538e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005394:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a4d      	ldr	r2, [pc, #308]	; (80054d8 <HAL_I2C_Mem_Write+0x1f0>)
 80053a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053a6:	88f8      	ldrh	r0, [r7, #6]
 80053a8:	893a      	ldrh	r2, [r7, #8]
 80053aa:	8979      	ldrh	r1, [r7, #10]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	4603      	mov	r3, r0
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fc06 	bl	8005bc8 <I2C_RequestMemoryWrite>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d052      	beq.n	8005468 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e081      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fe50 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00d      	beq.n	80053f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d107      	bne.n	80053ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e06b      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	781a      	ldrb	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b04      	cmp	r3, #4
 800542e:	d11b      	bne.n	8005468 <HAL_I2C_Mem_Write+0x180>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d017      	beq.n	8005468 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1aa      	bne.n	80053c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fe3c 	bl	80060f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00d      	beq.n	800549c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	2b04      	cmp	r3, #4
 8005486:	d107      	bne.n	8005498 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005496:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e016      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	00100002 	.word	0x00100002
 80054d8:	ffff0000 	.word	0xffff0000

080054dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08c      	sub	sp, #48	; 0x30
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	4608      	mov	r0, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	461a      	mov	r2, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	817b      	strh	r3, [r7, #10]
 80054ee:	460b      	mov	r3, r1
 80054f0:	813b      	strh	r3, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054f6:	f7fe ff59 	bl	80043ac <HAL_GetTick>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b20      	cmp	r3, #32
 8005506:	f040 8208 	bne.w	800591a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2319      	movs	r3, #25
 8005510:	2201      	movs	r2, #1
 8005512:	497b      	ldr	r1, [pc, #492]	; (8005700 <HAL_I2C_Mem_Read+0x224>)
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 fcd5 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
 8005522:	e1fb      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_I2C_Mem_Read+0x56>
 800552e:	2302      	movs	r3, #2
 8005530:	e1f4      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b01      	cmp	r3, #1
 8005546:	d007      	beq.n	8005558 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005566:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2222      	movs	r2, #34	; 0x22
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2240      	movs	r2, #64	; 0x40
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4a5b      	ldr	r2, [pc, #364]	; (8005704 <HAL_I2C_Mem_Read+0x228>)
 8005598:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800559a:	88f8      	ldrh	r0, [r7, #6]
 800559c:	893a      	ldrh	r2, [r7, #8]
 800559e:	8979      	ldrh	r1, [r7, #10]
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	4603      	mov	r3, r0
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fba2 	bl	8005cf4 <I2C_RequestMemoryRead>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e1b0      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d113      	bne.n	80055ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c2:	2300      	movs	r3, #0
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	623b      	str	r3, [r7, #32]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e184      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d11b      	bne.n	800562a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005600:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e164      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562e:	2b02      	cmp	r3, #2
 8005630:	d11b      	bne.n	800566a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005640:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	e144      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005680:	e138      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005686:	2b03      	cmp	r3, #3
 8005688:	f200 80f1 	bhi.w	800586e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005690:	2b01      	cmp	r3, #1
 8005692:	d123      	bne.n	80056dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fd6b 	bl	8006174 <I2C_WaitOnRXNEFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e139      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056da:	e10b      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d14e      	bne.n	8005782 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	2200      	movs	r2, #0
 80056ec:	4906      	ldr	r1, [pc, #24]	; (8005708 <HAL_I2C_Mem_Read+0x22c>)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fbe8 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e10e      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
 80056fe:	bf00      	nop
 8005700:	00100002 	.word	0x00100002
 8005704:	ffff0000 	.word	0xffff0000
 8005708:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800571a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005780:	e0b8      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	2200      	movs	r2, #0
 800578a:	4966      	ldr	r1, [pc, #408]	; (8005924 <HAL_I2C_Mem_Read+0x448>)
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fb99 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0bf      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	2200      	movs	r2, #0
 80057e6:	494f      	ldr	r1, [pc, #316]	; (8005924 <HAL_I2C_Mem_Read+0x448>)
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fb6b 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e091      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800586c:	e042      	b.n	80058f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800586e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fc7e 	bl	8006174 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e04c      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d118      	bne.n	80058f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f47f aec2 	bne.w	8005682 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3728      	adds	r7, #40	; 0x28
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	00010004 	.word	0x00010004

08005928 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	460b      	mov	r3, r1
 8005936:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b08      	cmp	r3, #8
 8005942:	d006      	beq.n	8005952 <I2C_MasterRequestWrite+0x2a>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d003      	beq.n	8005952 <I2C_MasterRequestWrite+0x2a>
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005950:	d108      	bne.n	8005964 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	e00b      	b.n	800597c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	2b12      	cmp	r3, #18
 800596a:	d107      	bne.n	800597c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800597a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fa9b 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a2:	d103      	bne.n	80059ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e035      	b.n	8005a1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059b8:	d108      	bne.n	80059cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059ba:	897b      	ldrh	r3, [r7, #10]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059c8:	611a      	str	r2, [r3, #16]
 80059ca:	e01b      	b.n	8005a04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059cc:	897b      	ldrh	r3, [r7, #10]
 80059ce:	11db      	asrs	r3, r3, #7
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f003 0306 	and.w	r3, r3, #6
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f063 030f 	orn	r3, r3, #15
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	490e      	ldr	r1, [pc, #56]	; (8005a24 <I2C_MasterRequestWrite+0xfc>)
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 fac1 	bl	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e010      	b.n	8005a1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059fa:	897b      	ldrh	r3, [r7, #10]
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4907      	ldr	r1, [pc, #28]	; (8005a28 <I2C_MasterRequestWrite+0x100>)
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fab1 	bl	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	00010008 	.word	0x00010008
 8005a28:	00010002 	.word	0x00010002

08005a2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d006      	beq.n	8005a66 <I2C_MasterRequestRead+0x3a>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d003      	beq.n	8005a66 <I2C_MasterRequestRead+0x3a>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a64:	d108      	bne.n	8005a78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	e00b      	b.n	8005a90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	2b11      	cmp	r3, #17
 8005a7e:	d107      	bne.n	8005a90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fa11 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00d      	beq.n	8005ac4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab6:	d103      	bne.n	8005ac0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e079      	b.n	8005bb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005acc:	d108      	bne.n	8005ae0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ace:	897b      	ldrh	r3, [r7, #10]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f043 0301 	orr.w	r3, r3, #1
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	611a      	str	r2, [r3, #16]
 8005ade:	e05f      	b.n	8005ba0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ae0:	897b      	ldrh	r3, [r7, #10]
 8005ae2:	11db      	asrs	r3, r3, #7
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f003 0306 	and.w	r3, r3, #6
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f063 030f 	orn	r3, r3, #15
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	4930      	ldr	r1, [pc, #192]	; (8005bc0 <I2C_MasterRequestRead+0x194>)
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fa37 	bl	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e054      	b.n	8005bb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b0e:	897b      	ldrh	r3, [r7, #10]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	4929      	ldr	r1, [pc, #164]	; (8005bc4 <I2C_MasterRequestRead+0x198>)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fa27 	bl	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e044      	b.n	8005bb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f9af 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00d      	beq.n	8005b88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b7a:	d103      	bne.n	8005b84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e017      	b.n	8005bb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b88:	897b      	ldrh	r3, [r7, #10]
 8005b8a:	11db      	asrs	r3, r3, #7
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 0306 	and.w	r3, r3, #6
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f063 030e 	orn	r3, r3, #14
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4907      	ldr	r1, [pc, #28]	; (8005bc4 <I2C_MasterRequestRead+0x198>)
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f9e3 	bl	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	00010008 	.word	0x00010008
 8005bc4:	00010002 	.word	0x00010002

08005bc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	817b      	strh	r3, [r7, #10]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	813b      	strh	r3, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f960 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00d      	beq.n	8005c26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c18:	d103      	bne.n	8005c22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e05f      	b.n	8005ce6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c26:	897b      	ldrh	r3, [r7, #10]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	6a3a      	ldr	r2, [r7, #32]
 8005c3a:	492d      	ldr	r1, [pc, #180]	; (8005cf0 <I2C_RequestMemoryWrite+0x128>)
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f998 	bl	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e04c      	b.n	8005ce6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c64:	6a39      	ldr	r1, [r7, #32]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 fa02 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00d      	beq.n	8005c8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d107      	bne.n	8005c8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e02b      	b.n	8005ce6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d105      	bne.n	8005ca0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c94:	893b      	ldrh	r3, [r7, #8]
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	611a      	str	r2, [r3, #16]
 8005c9e:	e021      	b.n	8005ce4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ca0:	893b      	ldrh	r3, [r7, #8]
 8005ca2:	0a1b      	lsrs	r3, r3, #8
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb0:	6a39      	ldr	r1, [r7, #32]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f9dc 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00d      	beq.n	8005cda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d107      	bne.n	8005cd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e005      	b.n	8005ce6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cda:	893b      	ldrh	r3, [r7, #8]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	00010002 	.word	0x00010002

08005cf4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	461a      	mov	r2, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	817b      	strh	r3, [r7, #10]
 8005d06:	460b      	mov	r3, r1
 8005d08:	813b      	strh	r3, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f8c2 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d54:	d103      	bne.n	8005d5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e0aa      	b.n	8005eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d62:	897b      	ldrh	r3, [r7, #10]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	4952      	ldr	r1, [pc, #328]	; (8005ec0 <I2C_RequestMemoryRead+0x1cc>)
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f8fa 	bl	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e097      	b.n	8005eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da0:	6a39      	ldr	r1, [r7, #32]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f964 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d107      	bne.n	8005dc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e076      	b.n	8005eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d105      	bne.n	8005ddc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd0:	893b      	ldrh	r3, [r7, #8]
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	e021      	b.n	8005e20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ddc:	893b      	ldrh	r3, [r7, #8]
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dec:	6a39      	ldr	r1, [r7, #32]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f93e 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00d      	beq.n	8005e16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d107      	bne.n	8005e12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e050      	b.n	8005eb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e16:	893b      	ldrh	r3, [r7, #8]
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e22:	6a39      	ldr	r1, [r7, #32]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f923 	bl	8006070 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00d      	beq.n	8005e4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d107      	bne.n	8005e48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e035      	b.n	8005eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f82b 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00d      	beq.n	8005e90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e82:	d103      	bne.n	8005e8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e013      	b.n	8005eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e90:	897b      	ldrh	r3, [r7, #10]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	6a3a      	ldr	r2, [r7, #32]
 8005ea4:	4906      	ldr	r1, [pc, #24]	; (8005ec0 <I2C_RequestMemoryRead+0x1cc>)
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 f863 	bl	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	00010002 	.word	0x00010002

08005ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ed4:	e025      	b.n	8005f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d021      	beq.n	8005f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ede:	f7fe fa65 	bl	80043ac <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d302      	bcc.n	8005ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d116      	bne.n	8005f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e023      	b.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	0c1b      	lsrs	r3, r3, #16
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d10d      	bne.n	8005f48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	43da      	mvns	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4013      	ands	r3, r2
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2301      	moveq	r3, #1
 8005f40:	2300      	movne	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	e00c      	b.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	43da      	mvns	r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4013      	ands	r3, r2
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bf0c      	ite	eq
 8005f5a:	2301      	moveq	r3, #1
 8005f5c:	2300      	movne	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	461a      	mov	r2, r3
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d0b6      	beq.n	8005ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
 8005f7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f80:	e051      	b.n	8006026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f90:	d123      	bne.n	8005fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005faa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f043 0204 	orr.w	r2, r3, #4
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e046      	b.n	8006068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d021      	beq.n	8006026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe2:	f7fe f9e3 	bl	80043ac <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d302      	bcc.n	8005ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d116      	bne.n	8006026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e020      	b.n	8006068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	0c1b      	lsrs	r3, r3, #16
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b01      	cmp	r3, #1
 800602e:	d10c      	bne.n	800604a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	43da      	mvns	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4013      	ands	r3, r2
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	bf14      	ite	ne
 8006042:	2301      	movne	r3, #1
 8006044:	2300      	moveq	r3, #0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	e00b      	b.n	8006062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	43da      	mvns	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4013      	ands	r3, r2
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf14      	ite	ne
 800605c:	2301      	movne	r3, #1
 800605e:	2300      	moveq	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d18d      	bne.n	8005f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800607c:	e02d      	b.n	80060da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f8ce 	bl	8006220 <I2C_IsAcknowledgeFailed>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e02d      	b.n	80060ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d021      	beq.n	80060da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006096:	f7fe f989 	bl	80043ac <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d302      	bcc.n	80060ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d116      	bne.n	80060da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e007      	b.n	80060ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e4:	2b80      	cmp	r3, #128	; 0x80
 80060e6:	d1ca      	bne.n	800607e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060fe:	e02d      	b.n	800615c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f88d 	bl	8006220 <I2C_IsAcknowledgeFailed>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e02d      	b.n	800616c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d021      	beq.n	800615c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006118:	f7fe f948 	bl	80043ac <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d302      	bcc.n	800612e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d116      	bne.n	800615c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f043 0220 	orr.w	r2, r3, #32
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e007      	b.n	800616c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b04      	cmp	r3, #4
 8006168:	d1ca      	bne.n	8006100 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006180:	e042      	b.n	8006208 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b10      	cmp	r3, #16
 800618e:	d119      	bne.n	80061c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0210 	mvn.w	r2, #16
 8006198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e029      	b.n	8006218 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c4:	f7fe f8f2 	bl	80043ac <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d302      	bcc.n	80061da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d116      	bne.n	8006208 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	f043 0220 	orr.w	r2, r3, #32
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e007      	b.n	8006218 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d1b5      	bne.n	8006182 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006236:	d11b      	bne.n	8006270 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006240:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	f043 0204 	orr.w	r2, r3, #4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
	...

08006280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e267      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d075      	beq.n	800638a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800629e:	4b88      	ldr	r3, [pc, #544]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 030c 	and.w	r3, r3, #12
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d00c      	beq.n	80062c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062aa:	4b85      	ldr	r3, [pc, #532]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d112      	bne.n	80062dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062b6:	4b82      	ldr	r3, [pc, #520]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c2:	d10b      	bne.n	80062dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c4:	4b7e      	ldr	r3, [pc, #504]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d05b      	beq.n	8006388 <HAL_RCC_OscConfig+0x108>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d157      	bne.n	8006388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e242      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e4:	d106      	bne.n	80062f4 <HAL_RCC_OscConfig+0x74>
 80062e6:	4b76      	ldr	r3, [pc, #472]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a75      	ldr	r2, [pc, #468]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e01d      	b.n	8006330 <HAL_RCC_OscConfig+0xb0>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062fc:	d10c      	bne.n	8006318 <HAL_RCC_OscConfig+0x98>
 80062fe:	4b70      	ldr	r3, [pc, #448]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a6f      	ldr	r2, [pc, #444]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	4b6d      	ldr	r3, [pc, #436]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6c      	ldr	r2, [pc, #432]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e00b      	b.n	8006330 <HAL_RCC_OscConfig+0xb0>
 8006318:	4b69      	ldr	r3, [pc, #420]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a68      	ldr	r2, [pc, #416]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 800631e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4b66      	ldr	r3, [pc, #408]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a65      	ldr	r2, [pc, #404]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 800632a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800632e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d013      	beq.n	8006360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006338:	f7fe f838 	bl	80043ac <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006340:	f7fe f834 	bl	80043ac <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b64      	cmp	r3, #100	; 0x64
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e207      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006352:	4b5b      	ldr	r3, [pc, #364]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f0      	beq.n	8006340 <HAL_RCC_OscConfig+0xc0>
 800635e:	e014      	b.n	800638a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006360:	f7fe f824 	bl	80043ac <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006368:	f7fe f820 	bl	80043ac <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b64      	cmp	r3, #100	; 0x64
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e1f3      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800637a:	4b51      	ldr	r3, [pc, #324]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0xe8>
 8006386:	e000      	b.n	800638a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d063      	beq.n	800645e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006396:	4b4a      	ldr	r3, [pc, #296]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00b      	beq.n	80063ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063a2:	4b47      	ldr	r3, [pc, #284]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d11c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ae:	4b44      	ldr	r3, [pc, #272]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d116      	bne.n	80063e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ba:	4b41      	ldr	r3, [pc, #260]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <HAL_RCC_OscConfig+0x152>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d001      	beq.n	80063d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e1c7      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d2:	4b3b      	ldr	r3, [pc, #236]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4937      	ldr	r1, [pc, #220]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e6:	e03a      	b.n	800645e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d020      	beq.n	8006432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063f0:	4b34      	ldr	r3, [pc, #208]	; (80064c4 <HAL_RCC_OscConfig+0x244>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f6:	f7fd ffd9 	bl	80043ac <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063fe:	f7fd ffd5 	bl	80043ac <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e1a8      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006410:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0f0      	beq.n	80063fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800641c:	4b28      	ldr	r3, [pc, #160]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	4925      	ldr	r1, [pc, #148]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 800642c:	4313      	orrs	r3, r2
 800642e:	600b      	str	r3, [r1, #0]
 8006430:	e015      	b.n	800645e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006432:	4b24      	ldr	r3, [pc, #144]	; (80064c4 <HAL_RCC_OscConfig+0x244>)
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fd ffb8 	bl	80043ac <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006440:	f7fd ffb4 	bl	80043ac <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e187      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006452:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f0      	bne.n	8006440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d036      	beq.n	80064d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <HAL_RCC_OscConfig+0x248>)
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006478:	f7fd ff98 	bl	80043ac <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006480:	f7fd ff94 	bl	80043ac <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e167      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0x200>
 800649e:	e01b      	b.n	80064d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064a0:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <HAL_RCC_OscConfig+0x248>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064a6:	f7fd ff81 	bl	80043ac <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ac:	e00e      	b.n	80064cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ae:	f7fd ff7d 	bl	80043ac <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d907      	bls.n	80064cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e150      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
 80064c0:	40023800 	.word	0x40023800
 80064c4:	42470000 	.word	0x42470000
 80064c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064cc:	4b88      	ldr	r3, [pc, #544]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 80064ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1ea      	bne.n	80064ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8097 	beq.w	8006614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e6:	2300      	movs	r3, #0
 80064e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ea:	4b81      	ldr	r3, [pc, #516]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10f      	bne.n	8006516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f6:	2300      	movs	r3, #0
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	4b7d      	ldr	r3, [pc, #500]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	4a7c      	ldr	r2, [pc, #496]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006504:	6413      	str	r3, [r2, #64]	; 0x40
 8006506:	4b7a      	ldr	r3, [pc, #488]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650e:	60bb      	str	r3, [r7, #8]
 8006510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006516:	4b77      	ldr	r3, [pc, #476]	; (80066f4 <HAL_RCC_OscConfig+0x474>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d118      	bne.n	8006554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006522:	4b74      	ldr	r3, [pc, #464]	; (80066f4 <HAL_RCC_OscConfig+0x474>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a73      	ldr	r2, [pc, #460]	; (80066f4 <HAL_RCC_OscConfig+0x474>)
 8006528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800652e:	f7fd ff3d 	bl	80043ac <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006536:	f7fd ff39 	bl	80043ac <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e10c      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006548:	4b6a      	ldr	r3, [pc, #424]	; (80066f4 <HAL_RCC_OscConfig+0x474>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0f0      	beq.n	8006536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d106      	bne.n	800656a <HAL_RCC_OscConfig+0x2ea>
 800655c:	4b64      	ldr	r3, [pc, #400]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006560:	4a63      	ldr	r2, [pc, #396]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	6713      	str	r3, [r2, #112]	; 0x70
 8006568:	e01c      	b.n	80065a4 <HAL_RCC_OscConfig+0x324>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	2b05      	cmp	r3, #5
 8006570:	d10c      	bne.n	800658c <HAL_RCC_OscConfig+0x30c>
 8006572:	4b5f      	ldr	r3, [pc, #380]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006576:	4a5e      	ldr	r2, [pc, #376]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006578:	f043 0304 	orr.w	r3, r3, #4
 800657c:	6713      	str	r3, [r2, #112]	; 0x70
 800657e:	4b5c      	ldr	r3, [pc, #368]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006582:	4a5b      	ldr	r2, [pc, #364]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	6713      	str	r3, [r2, #112]	; 0x70
 800658a:	e00b      	b.n	80065a4 <HAL_RCC_OscConfig+0x324>
 800658c:	4b58      	ldr	r3, [pc, #352]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 800658e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006590:	4a57      	ldr	r2, [pc, #348]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006592:	f023 0301 	bic.w	r3, r3, #1
 8006596:	6713      	str	r3, [r2, #112]	; 0x70
 8006598:	4b55      	ldr	r3, [pc, #340]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 800659a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659c:	4a54      	ldr	r2, [pc, #336]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 800659e:	f023 0304 	bic.w	r3, r3, #4
 80065a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d015      	beq.n	80065d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fd fefe 	bl	80043ac <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b2:	e00a      	b.n	80065ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065b4:	f7fd fefa 	bl	80043ac <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e0cb      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ca:	4b49      	ldr	r3, [pc, #292]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0ee      	beq.n	80065b4 <HAL_RCC_OscConfig+0x334>
 80065d6:	e014      	b.n	8006602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d8:	f7fd fee8 	bl	80043ac <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065de:	e00a      	b.n	80065f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065e0:	f7fd fee4 	bl	80043ac <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e0b5      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f6:	4b3e      	ldr	r3, [pc, #248]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1ee      	bne.n	80065e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006602:	7dfb      	ldrb	r3, [r7, #23]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d105      	bne.n	8006614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006608:	4b39      	ldr	r3, [pc, #228]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 800660a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660c:	4a38      	ldr	r2, [pc, #224]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 800660e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006612:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80a1 	beq.w	8006760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800661e:	4b34      	ldr	r3, [pc, #208]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 030c 	and.w	r3, r3, #12
 8006626:	2b08      	cmp	r3, #8
 8006628:	d05c      	beq.n	80066e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	2b02      	cmp	r3, #2
 8006630:	d141      	bne.n	80066b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006632:	4b31      	ldr	r3, [pc, #196]	; (80066f8 <HAL_RCC_OscConfig+0x478>)
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006638:	f7fd feb8 	bl	80043ac <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006640:	f7fd feb4 	bl	80043ac <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e087      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006652:	4b27      	ldr	r3, [pc, #156]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f0      	bne.n	8006640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	019b      	lsls	r3, r3, #6
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	085b      	lsrs	r3, r3, #1
 8006676:	3b01      	subs	r3, #1
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	061b      	lsls	r3, r3, #24
 8006682:	491b      	ldr	r1, [pc, #108]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006684:	4313      	orrs	r3, r2
 8006686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006688:	4b1b      	ldr	r3, [pc, #108]	; (80066f8 <HAL_RCC_OscConfig+0x478>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668e:	f7fd fe8d 	bl	80043ac <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006696:	f7fd fe89 	bl	80043ac <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e05c      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a8:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x416>
 80066b4:	e054      	b.n	8006760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <HAL_RCC_OscConfig+0x478>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066bc:	f7fd fe76 	bl	80043ac <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066c4:	f7fd fe72 	bl	80043ac <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e045      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d6:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <HAL_RCC_OscConfig+0x470>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f0      	bne.n	80066c4 <HAL_RCC_OscConfig+0x444>
 80066e2:	e03d      	b.n	8006760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d107      	bne.n	80066fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e038      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
 80066f0:	40023800 	.word	0x40023800
 80066f4:	40007000 	.word	0x40007000
 80066f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <HAL_RCC_OscConfig+0x4ec>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d028      	beq.n	800675c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006714:	429a      	cmp	r2, r3
 8006716:	d121      	bne.n	800675c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006722:	429a      	cmp	r2, r3
 8006724:	d11a      	bne.n	800675c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800672c:	4013      	ands	r3, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006734:	4293      	cmp	r3, r2
 8006736:	d111      	bne.n	800675c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	3b01      	subs	r3, #1
 8006746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006748:	429a      	cmp	r2, r3
 800674a:	d107      	bne.n	800675c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006758:	429a      	cmp	r2, r3
 800675a:	d001      	beq.n	8006760 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40023800 	.word	0x40023800

08006770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e0cc      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006784:	4b68      	ldr	r3, [pc, #416]	; (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d90c      	bls.n	80067ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006792:	4b65      	ldr	r3, [pc, #404]	; (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800679a:	4b63      	ldr	r3, [pc, #396]	; (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d001      	beq.n	80067ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0b8      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d020      	beq.n	80067fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067c4:	4b59      	ldr	r3, [pc, #356]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a58      	ldr	r2, [pc, #352]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067dc:	4b53      	ldr	r3, [pc, #332]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	4a52      	ldr	r2, [pc, #328]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e8:	4b50      	ldr	r3, [pc, #320]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	494d      	ldr	r1, [pc, #308]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d044      	beq.n	8006890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d107      	bne.n	800681e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800680e:	4b47      	ldr	r3, [pc, #284]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d119      	bne.n	800684e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e07f      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d003      	beq.n	800682e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800682a:	2b03      	cmp	r3, #3
 800682c:	d107      	bne.n	800683e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682e:	4b3f      	ldr	r3, [pc, #252]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e06f      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800683e:	4b3b      	ldr	r3, [pc, #236]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e067      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800684e:	4b37      	ldr	r3, [pc, #220]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f023 0203 	bic.w	r2, r3, #3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	4934      	ldr	r1, [pc, #208]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	4313      	orrs	r3, r2
 800685e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006860:	f7fd fda4 	bl	80043ac <HAL_GetTick>
 8006864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006866:	e00a      	b.n	800687e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006868:	f7fd fda0 	bl	80043ac <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	f241 3288 	movw	r2, #5000	; 0x1388
 8006876:	4293      	cmp	r3, r2
 8006878:	d901      	bls.n	800687e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e04f      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687e:	4b2b      	ldr	r3, [pc, #172]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 020c 	and.w	r2, r3, #12
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	429a      	cmp	r2, r3
 800688e:	d1eb      	bne.n	8006868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006890:	4b25      	ldr	r3, [pc, #148]	; (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d20c      	bcs.n	80068b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689e:	4b22      	ldr	r3, [pc, #136]	; (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a6:	4b20      	ldr	r3, [pc, #128]	; (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d001      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e032      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068c4:	4b19      	ldr	r3, [pc, #100]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	4916      	ldr	r1, [pc, #88]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068e2:	4b12      	ldr	r3, [pc, #72]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	490e      	ldr	r1, [pc, #56]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068f6:	f000 f821 	bl	800693c <HAL_RCC_GetSysClockFreq>
 80068fa:	4602      	mov	r2, r0
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	091b      	lsrs	r3, r3, #4
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	490a      	ldr	r1, [pc, #40]	; (8006930 <HAL_RCC_ClockConfig+0x1c0>)
 8006908:	5ccb      	ldrb	r3, [r1, r3]
 800690a:	fa22 f303 	lsr.w	r3, r2, r3
 800690e:	4a09      	ldr	r2, [pc, #36]	; (8006934 <HAL_RCC_ClockConfig+0x1c4>)
 8006910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f7fd fd04 	bl	8004324 <HAL_InitTick>

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40023c00 	.word	0x40023c00
 800692c:	40023800 	.word	0x40023800
 8006930:	0800fcf4 	.word	0x0800fcf4
 8006934:	20000008 	.word	0x20000008
 8006938:	20000014 	.word	0x20000014

0800693c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800693c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006940:	b090      	sub	sp, #64	; 0x40
 8006942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	637b      	str	r3, [r7, #52]	; 0x34
 8006948:	2300      	movs	r3, #0
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694c:	2300      	movs	r3, #0
 800694e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006954:	4b59      	ldr	r3, [pc, #356]	; (8006abc <HAL_RCC_GetSysClockFreq+0x180>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 030c 	and.w	r3, r3, #12
 800695c:	2b08      	cmp	r3, #8
 800695e:	d00d      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0x40>
 8006960:	2b08      	cmp	r3, #8
 8006962:	f200 80a1 	bhi.w	8006aa8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_RCC_GetSysClockFreq+0x34>
 800696a:	2b04      	cmp	r3, #4
 800696c:	d003      	beq.n	8006976 <HAL_RCC_GetSysClockFreq+0x3a>
 800696e:	e09b      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006970:	4b53      	ldr	r3, [pc, #332]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006972:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006974:	e09b      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006976:	4b53      	ldr	r3, [pc, #332]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006978:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800697a:	e098      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800697c:	4b4f      	ldr	r3, [pc, #316]	; (8006abc <HAL_RCC_GetSysClockFreq+0x180>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006984:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006986:	4b4d      	ldr	r3, [pc, #308]	; (8006abc <HAL_RCC_GetSysClockFreq+0x180>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d028      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006992:	4b4a      	ldr	r3, [pc, #296]	; (8006abc <HAL_RCC_GetSysClockFreq+0x180>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	099b      	lsrs	r3, r3, #6
 8006998:	2200      	movs	r2, #0
 800699a:	623b      	str	r3, [r7, #32]
 800699c:	627a      	str	r2, [r7, #36]	; 0x24
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80069a4:	2100      	movs	r1, #0
 80069a6:	4b47      	ldr	r3, [pc, #284]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80069a8:	fb03 f201 	mul.w	r2, r3, r1
 80069ac:	2300      	movs	r3, #0
 80069ae:	fb00 f303 	mul.w	r3, r0, r3
 80069b2:	4413      	add	r3, r2
 80069b4:	4a43      	ldr	r2, [pc, #268]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x188>)
 80069b6:	fba0 1202 	umull	r1, r2, r0, r2
 80069ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069bc:	460a      	mov	r2, r1
 80069be:	62ba      	str	r2, [r7, #40]	; 0x28
 80069c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c2:	4413      	add	r3, r2
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c8:	2200      	movs	r2, #0
 80069ca:	61bb      	str	r3, [r7, #24]
 80069cc:	61fa      	str	r2, [r7, #28]
 80069ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80069d6:	f7fa f95f 	bl	8000c98 <__aeabi_uldivmod>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4613      	mov	r3, r2
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e2:	e053      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069e4:	4b35      	ldr	r3, [pc, #212]	; (8006abc <HAL_RCC_GetSysClockFreq+0x180>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	099b      	lsrs	r3, r3, #6
 80069ea:	2200      	movs	r2, #0
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	617a      	str	r2, [r7, #20]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80069f6:	f04f 0b00 	mov.w	fp, #0
 80069fa:	4652      	mov	r2, sl
 80069fc:	465b      	mov	r3, fp
 80069fe:	f04f 0000 	mov.w	r0, #0
 8006a02:	f04f 0100 	mov.w	r1, #0
 8006a06:	0159      	lsls	r1, r3, #5
 8006a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a0c:	0150      	lsls	r0, r2, #5
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	ebb2 080a 	subs.w	r8, r2, sl
 8006a16:	eb63 090b 	sbc.w	r9, r3, fp
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a2e:	ebb2 0408 	subs.w	r4, r2, r8
 8006a32:	eb63 0509 	sbc.w	r5, r3, r9
 8006a36:	f04f 0200 	mov.w	r2, #0
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	00eb      	lsls	r3, r5, #3
 8006a40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a44:	00e2      	lsls	r2, r4, #3
 8006a46:	4614      	mov	r4, r2
 8006a48:	461d      	mov	r5, r3
 8006a4a:	eb14 030a 	adds.w	r3, r4, sl
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	eb45 030b 	adc.w	r3, r5, fp
 8006a54:	607b      	str	r3, [r7, #4]
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a62:	4629      	mov	r1, r5
 8006a64:	028b      	lsls	r3, r1, #10
 8006a66:	4621      	mov	r1, r4
 8006a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	028a      	lsls	r2, r1, #10
 8006a70:	4610      	mov	r0, r2
 8006a72:	4619      	mov	r1, r3
 8006a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a76:	2200      	movs	r2, #0
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	60fa      	str	r2, [r7, #12]
 8006a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a80:	f7fa f90a 	bl	8000c98 <__aeabi_uldivmod>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4613      	mov	r3, r2
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <HAL_RCC_GetSysClockFreq+0x180>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	0c1b      	lsrs	r3, r3, #16
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	3301      	adds	r3, #1
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006aaa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3740      	adds	r7, #64	; 0x40
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	00f42400 	.word	0x00f42400
 8006ac4:	017d7840 	.word	0x017d7840

08006ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006acc:	4b03      	ldr	r3, [pc, #12]	; (8006adc <HAL_RCC_GetHCLKFreq+0x14>)
 8006ace:	681b      	ldr	r3, [r3, #0]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000008 	.word	0x20000008

08006ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ae4:	f7ff fff0 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	0a9b      	lsrs	r3, r3, #10
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	4903      	ldr	r1, [pc, #12]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006af6:	5ccb      	ldrb	r3, [r1, r3]
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40023800 	.word	0x40023800
 8006b04:	0800fd04 	.word	0x0800fd04

08006b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b0c:	f7ff ffdc 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	0b5b      	lsrs	r3, r3, #13
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4903      	ldr	r1, [pc, #12]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b1e:	5ccb      	ldrb	r3, [r1, r3]
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	0800fd04 	.word	0x0800fd04

08006b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e07b      	b.n	8006c3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d108      	bne.n	8006b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b52:	d009      	beq.n	8006b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	61da      	str	r2, [r3, #28]
 8006b5a:	e005      	b.n	8006b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fa fda2 	bl	80016cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bec:	ea42 0103 	orr.w	r1, r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	0c1b      	lsrs	r3, r3, #16
 8006c06:	f003 0104 	and.w	r1, r3, #4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	f003 0210 	and.w	r2, r3, #16
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b088      	sub	sp, #32
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	603b      	str	r3, [r7, #0]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_SPI_Transmit+0x22>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e126      	b.n	8006eb2 <HAL_SPI_Transmit+0x270>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c6c:	f7fd fb9e 	bl	80043ac <HAL_GetTick>
 8006c70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d002      	beq.n	8006c88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c82:	2302      	movs	r3, #2
 8006c84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c86:	e10b      	b.n	8006ea0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_SPI_Transmit+0x52>
 8006c8e:	88fb      	ldrh	r3, [r7, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c98:	e102      	b.n	8006ea0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2203      	movs	r2, #3
 8006c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	88fa      	ldrh	r2, [r7, #6]
 8006cb2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce0:	d10f      	bne.n	8006d02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	d007      	beq.n	8006d20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d28:	d14b      	bne.n	8006dc2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <HAL_SPI_Transmit+0xf6>
 8006d32:	8afb      	ldrh	r3, [r7, #22]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d13e      	bne.n	8006db6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	881a      	ldrh	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	1c9a      	adds	r2, r3, #2
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d5c:	e02b      	b.n	8006db6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d112      	bne.n	8006d92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d70:	881a      	ldrh	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7c:	1c9a      	adds	r2, r3, #2
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d90:	e011      	b.n	8006db6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d92:	f7fd fb0b 	bl	80043ac <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d803      	bhi.n	8006daa <HAL_SPI_Transmit+0x168>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d102      	bne.n	8006db0 <HAL_SPI_Transmit+0x16e>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006db4:	e074      	b.n	8006ea0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1ce      	bne.n	8006d5e <HAL_SPI_Transmit+0x11c>
 8006dc0:	e04c      	b.n	8006e5c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <HAL_SPI_Transmit+0x18e>
 8006dca:	8afb      	ldrh	r3, [r7, #22]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d140      	bne.n	8006e52 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006df6:	e02c      	b.n	8006e52 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d113      	bne.n	8006e2e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	7812      	ldrb	r2, [r2, #0]
 8006e12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e2c:	e011      	b.n	8006e52 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e2e:	f7fd fabd 	bl	80043ac <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d803      	bhi.n	8006e46 <HAL_SPI_Transmit+0x204>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d102      	bne.n	8006e4c <HAL_SPI_Transmit+0x20a>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d102      	bne.n	8006e52 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e50:	e026      	b.n	8006ea0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1cd      	bne.n	8006df8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fbcb 	bl	80075fc <SPI_EndRxTxTransaction>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	77fb      	strb	r3, [r7, #31]
 8006e9c:	e000      	b.n	8006ea0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006eb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b088      	sub	sp, #32
 8006ebe:	af02      	add	r7, sp, #8
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed6:	d112      	bne.n	8006efe <HAL_SPI_Receive+0x44>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10e      	bne.n	8006efe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ee8:	88fa      	ldrh	r2, [r7, #6]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 f8f1 	bl	80070dc <HAL_SPI_TransmitReceive>
 8006efa:	4603      	mov	r3, r0
 8006efc:	e0ea      	b.n	80070d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_SPI_Receive+0x52>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e0e3      	b.n	80070d4 <HAL_SPI_Receive+0x21a>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f14:	f7fd fa4a 	bl	80043ac <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d002      	beq.n	8006f2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f26:	2302      	movs	r3, #2
 8006f28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f2a:	e0ca      	b.n	80070c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_SPI_Receive+0x7e>
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d102      	bne.n	8006f3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f3c:	e0c1      	b.n	80070c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2204      	movs	r2, #4
 8006f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	88fa      	ldrh	r2, [r7, #6]
 8006f56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f84:	d10f      	bne.n	8006fa6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fa4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb0:	2b40      	cmp	r3, #64	; 0x40
 8006fb2:	d007      	beq.n	8006fc4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d162      	bne.n	8007092 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006fcc:	e02e      	b.n	800702c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d115      	bne.n	8007008 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f103 020c 	add.w	r2, r3, #12
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	7812      	ldrb	r2, [r2, #0]
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007006:	e011      	b.n	800702c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007008:	f7fd f9d0 	bl	80043ac <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d803      	bhi.n	8007020 <HAL_SPI_Receive+0x166>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701e:	d102      	bne.n	8007026 <HAL_SPI_Receive+0x16c>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	75fb      	strb	r3, [r7, #23]
          goto error;
 800702a:	e04a      	b.n	80070c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1cb      	bne.n	8006fce <HAL_SPI_Receive+0x114>
 8007036:	e031      	b.n	800709c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b01      	cmp	r3, #1
 8007044:	d113      	bne.n	800706e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68da      	ldr	r2, [r3, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	b292      	uxth	r2, r2
 8007052:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	1c9a      	adds	r2, r3, #2
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007062:	b29b      	uxth	r3, r3
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800706c:	e011      	b.n	8007092 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800706e:	f7fd f99d 	bl	80043ac <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d803      	bhi.n	8007086 <HAL_SPI_Receive+0x1cc>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d102      	bne.n	800708c <HAL_SPI_Receive+0x1d2>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d102      	bne.n	8007092 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007090:	e017      	b.n	80070c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1cd      	bne.n	8007038 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 fa45 	bl	8007530 <SPI_EndRxTransaction>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2220      	movs	r2, #32
 80070b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	75fb      	strb	r3, [r7, #23]
 80070be:	e000      	b.n	80070c2 <HAL_SPI_Receive+0x208>
  }

error :
 80070c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08c      	sub	sp, #48	; 0x30
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070ea:	2301      	movs	r3, #1
 80070ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_SPI_TransmitReceive+0x26>
 80070fe:	2302      	movs	r3, #2
 8007100:	e18a      	b.n	8007418 <HAL_SPI_TransmitReceive+0x33c>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800710a:	f7fd f94f 	bl	80043ac <HAL_GetTick>
 800710e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007120:	887b      	ldrh	r3, [r7, #2]
 8007122:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007128:	2b01      	cmp	r3, #1
 800712a:	d00f      	beq.n	800714c <HAL_SPI_TransmitReceive+0x70>
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007132:	d107      	bne.n	8007144 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d103      	bne.n	8007144 <HAL_SPI_TransmitReceive+0x68>
 800713c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007140:	2b04      	cmp	r3, #4
 8007142:	d003      	beq.n	800714c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007144:	2302      	movs	r3, #2
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800714a:	e15b      	b.n	8007404 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <HAL_SPI_TransmitReceive+0x82>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <HAL_SPI_TransmitReceive+0x82>
 8007158:	887b      	ldrh	r3, [r7, #2]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d103      	bne.n	8007166 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007164:	e14e      	b.n	8007404 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b04      	cmp	r3, #4
 8007170:	d003      	beq.n	800717a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2205      	movs	r2, #5
 8007176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	887a      	ldrh	r2, [r7, #2]
 800718a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	887a      	ldrh	r2, [r7, #2]
 8007190:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	887a      	ldrh	r2, [r7, #2]
 800719c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	887a      	ldrh	r2, [r7, #2]
 80071a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ba:	2b40      	cmp	r3, #64	; 0x40
 80071bc:	d007      	beq.n	80071ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d6:	d178      	bne.n	80072ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_SPI_TransmitReceive+0x10a>
 80071e0:	8b7b      	ldrh	r3, [r7, #26]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d166      	bne.n	80072b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	1c9a      	adds	r2, r3, #2
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800720a:	e053      	b.n	80072b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b02      	cmp	r3, #2
 8007218:	d11b      	bne.n	8007252 <HAL_SPI_TransmitReceive+0x176>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d016      	beq.n	8007252 <HAL_SPI_TransmitReceive+0x176>
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	2b01      	cmp	r3, #1
 8007228:	d113      	bne.n	8007252 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	881a      	ldrh	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	1c9a      	adds	r2, r3, #2
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b01      	cmp	r3, #1
 800725e:	d119      	bne.n	8007294 <HAL_SPI_TransmitReceive+0x1b8>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d014      	beq.n	8007294 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	b292      	uxth	r2, r2
 8007276:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	1c9a      	adds	r2, r3, #2
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007286:	b29b      	uxth	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007290:	2301      	movs	r3, #1
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007294:	f7fd f88a 	bl	80043ac <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d807      	bhi.n	80072b4 <HAL_SPI_TransmitReceive+0x1d8>
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d003      	beq.n	80072b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072b2:	e0a7      	b.n	8007404 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1a6      	bne.n	800720c <HAL_SPI_TransmitReceive+0x130>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1a1      	bne.n	800720c <HAL_SPI_TransmitReceive+0x130>
 80072c8:	e07c      	b.n	80073c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_SPI_TransmitReceive+0x1fc>
 80072d2:	8b7b      	ldrh	r3, [r7, #26]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d16b      	bne.n	80073b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	330c      	adds	r3, #12
 80072e2:	7812      	ldrb	r2, [r2, #0]
 80072e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	3b01      	subs	r3, #1
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072fe:	e057      	b.n	80073b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b02      	cmp	r3, #2
 800730c:	d11c      	bne.n	8007348 <HAL_SPI_TransmitReceive+0x26c>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007312:	b29b      	uxth	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d017      	beq.n	8007348 <HAL_SPI_TransmitReceive+0x26c>
 8007318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731a:	2b01      	cmp	r3, #1
 800731c:	d114      	bne.n	8007348 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	330c      	adds	r3, #12
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b01      	cmp	r3, #1
 8007354:	d119      	bne.n	800738a <HAL_SPI_TransmitReceive+0x2ae>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d014      	beq.n	800738a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007386:	2301      	movs	r3, #1
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800738a:	f7fd f80f 	bl	80043ac <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007396:	429a      	cmp	r2, r3
 8007398:	d803      	bhi.n	80073a2 <HAL_SPI_TransmitReceive+0x2c6>
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d102      	bne.n	80073a8 <HAL_SPI_TransmitReceive+0x2cc>
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d103      	bne.n	80073b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073ae:	e029      	b.n	8007404 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1a2      	bne.n	8007300 <HAL_SPI_TransmitReceive+0x224>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d19d      	bne.n	8007300 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f917 	bl	80075fc <SPI_EndRxTxTransaction>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d006      	beq.n	80073e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2220      	movs	r2, #32
 80073de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80073e0:	e010      	b.n	8007404 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10b      	bne.n	8007402 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073ea:	2300      	movs	r3, #0
 80073ec:	617b      	str	r3, [r7, #20]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	617b      	str	r3, [r7, #20]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	e000      	b.n	8007404 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007414:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007418:	4618      	mov	r0, r3
 800741a:	3730      	adds	r7, #48	; 0x30
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	4613      	mov	r3, r2
 800742e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007430:	f7fc ffbc 	bl	80043ac <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	1a9b      	subs	r3, r3, r2
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	4413      	add	r3, r2
 800743e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007440:	f7fc ffb4 	bl	80043ac <HAL_GetTick>
 8007444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007446:	4b39      	ldr	r3, [pc, #228]	; (800752c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	015b      	lsls	r3, r3, #5
 800744c:	0d1b      	lsrs	r3, r3, #20
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	fb02 f303 	mul.w	r3, r2, r3
 8007454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007456:	e054      	b.n	8007502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d050      	beq.n	8007502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007460:	f7fc ffa4 	bl	80043ac <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	429a      	cmp	r2, r3
 800746e:	d902      	bls.n	8007476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d13d      	bne.n	80074f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800748e:	d111      	bne.n	80074b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007498:	d004      	beq.n	80074a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a2:	d107      	bne.n	80074b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074bc:	d10f      	bne.n	80074de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e017      	b.n	8007522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	3b01      	subs	r3, #1
 8007500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4013      	ands	r3, r2
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	429a      	cmp	r2, r3
 8007510:	bf0c      	ite	eq
 8007512:	2301      	moveq	r3, #1
 8007514:	2300      	movne	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	429a      	cmp	r2, r3
 800751e:	d19b      	bne.n	8007458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20000008 	.word	0x20000008

08007530 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007544:	d111      	bne.n	800756a <SPI_EndRxTransaction+0x3a>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800754e:	d004      	beq.n	800755a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007558:	d107      	bne.n	800756a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007568:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007572:	d12a      	bne.n	80075ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800757c:	d012      	beq.n	80075a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2200      	movs	r2, #0
 8007586:	2180      	movs	r1, #128	; 0x80
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff ff49 	bl	8007420 <SPI_WaitFlagStateUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d02d      	beq.n	80075f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007598:	f043 0220 	orr.w	r2, r3, #32
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e026      	b.n	80075f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2200      	movs	r2, #0
 80075ac:	2101      	movs	r1, #1
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff ff36 	bl	8007420 <SPI_WaitFlagStateUntilTimeout>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d01a      	beq.n	80075f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075be:	f043 0220 	orr.w	r2, r3, #32
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e013      	b.n	80075f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2200      	movs	r2, #0
 80075d2:	2101      	movs	r1, #1
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7ff ff23 	bl	8007420 <SPI_WaitFlagStateUntilTimeout>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e4:	f043 0220 	orr.w	r2, r3, #32
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e000      	b.n	80075f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af02      	add	r7, sp, #8
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007608:	4b1b      	ldr	r3, [pc, #108]	; (8007678 <SPI_EndRxTxTransaction+0x7c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1b      	ldr	r2, [pc, #108]	; (800767c <SPI_EndRxTxTransaction+0x80>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	0d5b      	lsrs	r3, r3, #21
 8007614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007618:	fb02 f303 	mul.w	r3, r2, r3
 800761c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007626:	d112      	bne.n	800764e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2200      	movs	r2, #0
 8007630:	2180      	movs	r1, #128	; 0x80
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff fef4 	bl	8007420 <SPI_WaitFlagStateUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d016      	beq.n	800766c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007642:	f043 0220 	orr.w	r2, r3, #32
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e00f      	b.n	800766e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	3b01      	subs	r3, #1
 8007658:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007664:	2b80      	cmp	r3, #128	; 0x80
 8007666:	d0f2      	beq.n	800764e <SPI_EndRxTxTransaction+0x52>
 8007668:	e000      	b.n	800766c <SPI_EndRxTxTransaction+0x70>
        break;
 800766a:	bf00      	nop
  }

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000008 	.word	0x20000008
 800767c:	165e9f81 	.word	0x165e9f81

08007680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e041      	b.n	8007716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fa f858 	bl	800175c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4619      	mov	r1, r3
 80076be:	4610      	mov	r0, r2
 80076c0:	f000 fac0 	bl	8007c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b01      	cmp	r3, #1
 8007732:	d001      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e044      	b.n	80077c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0201 	orr.w	r2, r2, #1
 800774e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1e      	ldr	r2, [pc, #120]	; (80077d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d018      	beq.n	800778c <HAL_TIM_Base_Start_IT+0x6c>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007762:	d013      	beq.n	800778c <HAL_TIM_Base_Start_IT+0x6c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00e      	beq.n	800778c <HAL_TIM_Base_Start_IT+0x6c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d009      	beq.n	800778c <HAL_TIM_Base_Start_IT+0x6c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a17      	ldr	r2, [pc, #92]	; (80077dc <HAL_TIM_Base_Start_IT+0xbc>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIM_Base_Start_IT+0x6c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a16      	ldr	r2, [pc, #88]	; (80077e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d111      	bne.n	80077b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b06      	cmp	r3, #6
 800779c:	d010      	beq.n	80077c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0201 	orr.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ae:	e007      	b.n	80077c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	40010000 	.word	0x40010000
 80077d4:	40000400 	.word	0x40000400
 80077d8:	40000800 	.word	0x40000800
 80077dc:	40000c00 	.word	0x40000c00
 80077e0:	40014000 	.word	0x40014000

080077e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68da      	ldr	r2, [r3, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0201 	bic.w	r2, r2, #1
 80077fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6a1a      	ldr	r2, [r3, #32]
 8007802:	f241 1311 	movw	r3, #4369	; 0x1111
 8007806:	4013      	ands	r3, r2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10f      	bne.n	800782c <HAL_TIM_Base_Stop_IT+0x48>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6a1a      	ldr	r2, [r3, #32]
 8007812:	f240 4344 	movw	r3, #1092	; 0x444
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d107      	bne.n	800782c <HAL_TIM_Base_Stop_IT+0x48>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0201 	bic.w	r2, r2, #1
 800782a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b02      	cmp	r3, #2
 8007856:	d122      	bne.n	800789e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b02      	cmp	r3, #2
 8007864:	d11b      	bne.n	800789e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f06f 0202 	mvn.w	r2, #2
 800786e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f9bf 	bl	8007c08 <HAL_TIM_IC_CaptureCallback>
 800788a:	e005      	b.n	8007898 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f9b1 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f9c2 	bl	8007c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d122      	bne.n	80078f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d11b      	bne.n	80078f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f06f 0204 	mvn.w	r2, #4
 80078c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f995 	bl	8007c08 <HAL_TIM_IC_CaptureCallback>
 80078de:	e005      	b.n	80078ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f987 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f998 	bl	8007c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f003 0308 	and.w	r3, r3, #8
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d122      	bne.n	8007946 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b08      	cmp	r3, #8
 800790c:	d11b      	bne.n	8007946 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f06f 0208 	mvn.w	r2, #8
 8007916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2204      	movs	r2, #4
 800791c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	f003 0303 	and.w	r3, r3, #3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f96b 	bl	8007c08 <HAL_TIM_IC_CaptureCallback>
 8007932:	e005      	b.n	8007940 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f95d 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f96e 	bl	8007c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f003 0310 	and.w	r3, r3, #16
 8007950:	2b10      	cmp	r3, #16
 8007952:	d122      	bne.n	800799a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f003 0310 	and.w	r3, r3, #16
 800795e:	2b10      	cmp	r3, #16
 8007960:	d11b      	bne.n	800799a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f06f 0210 	mvn.w	r2, #16
 800796a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2208      	movs	r2, #8
 8007970:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f941 	bl	8007c08 <HAL_TIM_IC_CaptureCallback>
 8007986:	e005      	b.n	8007994 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f933 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f944 	bl	8007c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d10e      	bne.n	80079c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d107      	bne.n	80079c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f06f 0201 	mvn.w	r2, #1
 80079be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f90d 	bl	8007be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d0:	2b80      	cmp	r3, #128	; 0x80
 80079d2:	d10e      	bne.n	80079f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079de:	2b80      	cmp	r3, #128	; 0x80
 80079e0:	d107      	bne.n	80079f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fabb 	bl	8007f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d10e      	bne.n	8007a1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0a:	2b40      	cmp	r3, #64	; 0x40
 8007a0c:	d107      	bne.n	8007a1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f909 	bl	8007c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f003 0320 	and.w	r3, r3, #32
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d10e      	bne.n	8007a4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d107      	bne.n	8007a4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f06f 0220 	mvn.w	r2, #32
 8007a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fa85 	bl	8007f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_TIM_ConfigClockSource+0x1c>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e0b4      	b.n	8007bd8 <HAL_TIM_ConfigClockSource+0x186>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa6:	d03e      	beq.n	8007b26 <HAL_TIM_ConfigClockSource+0xd4>
 8007aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aac:	f200 8087 	bhi.w	8007bbe <HAL_TIM_ConfigClockSource+0x16c>
 8007ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab4:	f000 8086 	beq.w	8007bc4 <HAL_TIM_ConfigClockSource+0x172>
 8007ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007abc:	d87f      	bhi.n	8007bbe <HAL_TIM_ConfigClockSource+0x16c>
 8007abe:	2b70      	cmp	r3, #112	; 0x70
 8007ac0:	d01a      	beq.n	8007af8 <HAL_TIM_ConfigClockSource+0xa6>
 8007ac2:	2b70      	cmp	r3, #112	; 0x70
 8007ac4:	d87b      	bhi.n	8007bbe <HAL_TIM_ConfigClockSource+0x16c>
 8007ac6:	2b60      	cmp	r3, #96	; 0x60
 8007ac8:	d050      	beq.n	8007b6c <HAL_TIM_ConfigClockSource+0x11a>
 8007aca:	2b60      	cmp	r3, #96	; 0x60
 8007acc:	d877      	bhi.n	8007bbe <HAL_TIM_ConfigClockSource+0x16c>
 8007ace:	2b50      	cmp	r3, #80	; 0x50
 8007ad0:	d03c      	beq.n	8007b4c <HAL_TIM_ConfigClockSource+0xfa>
 8007ad2:	2b50      	cmp	r3, #80	; 0x50
 8007ad4:	d873      	bhi.n	8007bbe <HAL_TIM_ConfigClockSource+0x16c>
 8007ad6:	2b40      	cmp	r3, #64	; 0x40
 8007ad8:	d058      	beq.n	8007b8c <HAL_TIM_ConfigClockSource+0x13a>
 8007ada:	2b40      	cmp	r3, #64	; 0x40
 8007adc:	d86f      	bhi.n	8007bbe <HAL_TIM_ConfigClockSource+0x16c>
 8007ade:	2b30      	cmp	r3, #48	; 0x30
 8007ae0:	d064      	beq.n	8007bac <HAL_TIM_ConfigClockSource+0x15a>
 8007ae2:	2b30      	cmp	r3, #48	; 0x30
 8007ae4:	d86b      	bhi.n	8007bbe <HAL_TIM_ConfigClockSource+0x16c>
 8007ae6:	2b20      	cmp	r3, #32
 8007ae8:	d060      	beq.n	8007bac <HAL_TIM_ConfigClockSource+0x15a>
 8007aea:	2b20      	cmp	r3, #32
 8007aec:	d867      	bhi.n	8007bbe <HAL_TIM_ConfigClockSource+0x16c>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d05c      	beq.n	8007bac <HAL_TIM_ConfigClockSource+0x15a>
 8007af2:	2b10      	cmp	r3, #16
 8007af4:	d05a      	beq.n	8007bac <HAL_TIM_ConfigClockSource+0x15a>
 8007af6:	e062      	b.n	8007bbe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	6899      	ldr	r1, [r3, #8]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f000 f996 	bl	8007e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	609a      	str	r2, [r3, #8]
      break;
 8007b24:	e04f      	b.n	8007bc6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	6899      	ldr	r1, [r3, #8]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f000 f97f 	bl	8007e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b48:	609a      	str	r2, [r3, #8]
      break;
 8007b4a:	e03c      	b.n	8007bc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	6859      	ldr	r1, [r3, #4]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f000 f8f3 	bl	8007d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2150      	movs	r1, #80	; 0x50
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 f94c 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007b6a:	e02c      	b.n	8007bc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	6859      	ldr	r1, [r3, #4]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f000 f912 	bl	8007da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2160      	movs	r1, #96	; 0x60
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 f93c 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007b8a:	e01c      	b.n	8007bc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	6859      	ldr	r1, [r3, #4]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f000 f8d3 	bl	8007d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2140      	movs	r1, #64	; 0x40
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f92c 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007baa:	e00c      	b.n	8007bc6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f000 f923 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007bbc:	e003      	b.n	8007bc6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc2:	e000      	b.n	8007bc6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007bc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a34      	ldr	r2, [pc, #208]	; (8007d28 <TIM_Base_SetConfig+0xe4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d00f      	beq.n	8007c7c <TIM_Base_SetConfig+0x38>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c62:	d00b      	beq.n	8007c7c <TIM_Base_SetConfig+0x38>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a31      	ldr	r2, [pc, #196]	; (8007d2c <TIM_Base_SetConfig+0xe8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d007      	beq.n	8007c7c <TIM_Base_SetConfig+0x38>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a30      	ldr	r2, [pc, #192]	; (8007d30 <TIM_Base_SetConfig+0xec>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d003      	beq.n	8007c7c <TIM_Base_SetConfig+0x38>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a2f      	ldr	r2, [pc, #188]	; (8007d34 <TIM_Base_SetConfig+0xf0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d108      	bne.n	8007c8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a25      	ldr	r2, [pc, #148]	; (8007d28 <TIM_Base_SetConfig+0xe4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d01b      	beq.n	8007cce <TIM_Base_SetConfig+0x8a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9c:	d017      	beq.n	8007cce <TIM_Base_SetConfig+0x8a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a22      	ldr	r2, [pc, #136]	; (8007d2c <TIM_Base_SetConfig+0xe8>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d013      	beq.n	8007cce <TIM_Base_SetConfig+0x8a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a21      	ldr	r2, [pc, #132]	; (8007d30 <TIM_Base_SetConfig+0xec>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00f      	beq.n	8007cce <TIM_Base_SetConfig+0x8a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a20      	ldr	r2, [pc, #128]	; (8007d34 <TIM_Base_SetConfig+0xf0>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00b      	beq.n	8007cce <TIM_Base_SetConfig+0x8a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1f      	ldr	r2, [pc, #124]	; (8007d38 <TIM_Base_SetConfig+0xf4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d007      	beq.n	8007cce <TIM_Base_SetConfig+0x8a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a1e      	ldr	r2, [pc, #120]	; (8007d3c <TIM_Base_SetConfig+0xf8>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_Base_SetConfig+0x8a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a1d      	ldr	r2, [pc, #116]	; (8007d40 <TIM_Base_SetConfig+0xfc>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d108      	bne.n	8007ce0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a08      	ldr	r2, [pc, #32]	; (8007d28 <TIM_Base_SetConfig+0xe4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d103      	bne.n	8007d14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	615a      	str	r2, [r3, #20]
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40014000 	.word	0x40014000
 8007d3c:	40014400 	.word	0x40014400
 8007d40:	40014800 	.word	0x40014800

08007d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	f023 0201 	bic.w	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 030a 	bic.w	r3, r3, #10
 8007d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	621a      	str	r2, [r3, #32]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b087      	sub	sp, #28
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f023 0210 	bic.w	r2, r3, #16
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	031b      	lsls	r3, r3, #12
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f043 0307 	orr.w	r3, r3, #7
 8007e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	609a      	str	r2, [r3, #8]
}
 8007e2c:	bf00      	nop
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	021a      	lsls	r2, r3, #8
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	609a      	str	r2, [r3, #8]
}
 8007e6c:	bf00      	nop
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e050      	b.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a1c      	ldr	r2, [pc, #112]	; (8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d018      	beq.n	8007f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007edc:	d013      	beq.n	8007f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a18      	ldr	r2, [pc, #96]	; (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00e      	beq.n	8007f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a16      	ldr	r2, [pc, #88]	; (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d009      	beq.n	8007f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a15      	ldr	r2, [pc, #84]	; (8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d004      	beq.n	8007f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d10c      	bne.n	8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	40010000 	.word	0x40010000
 8007f44:	40000400 	.word	0x40000400
 8007f48:	40000800 	.word	0x40000800
 8007f4c:	40000c00 	.word	0x40000c00
 8007f50:	40014000 	.word	0x40014000

08007f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e03f      	b.n	800800e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7f9 fc1e 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	; 0x24
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f929 	bl	8008218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b08a      	sub	sp, #40	; 0x28
 800801a:	af02      	add	r7, sp, #8
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	603b      	str	r3, [r7, #0]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b20      	cmp	r3, #32
 8008034:	d17c      	bne.n	8008130 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <HAL_UART_Transmit+0x2c>
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e075      	b.n	8008132 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_UART_Transmit+0x3e>
 8008050:	2302      	movs	r3, #2
 8008052:	e06e      	b.n	8008132 <HAL_UART_Transmit+0x11c>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2221      	movs	r2, #33	; 0x21
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800806a:	f7fc f99f 	bl	80043ac <HAL_GetTick>
 800806e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	88fa      	ldrh	r2, [r7, #6]
 8008074:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	88fa      	ldrh	r2, [r7, #6]
 800807a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008084:	d108      	bne.n	8008098 <HAL_UART_Transmit+0x82>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800808e:	2300      	movs	r3, #0
 8008090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	61bb      	str	r3, [r7, #24]
 8008096:	e003      	b.n	80080a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800809c:	2300      	movs	r3, #0
 800809e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80080a8:	e02a      	b.n	8008100 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2200      	movs	r2, #0
 80080b2:	2180      	movs	r1, #128	; 0x80
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 f840 	bl	800813a <UART_WaitOnFlagUntilTimeout>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e036      	b.n	8008132 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10b      	bne.n	80080e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	3302      	adds	r3, #2
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	e007      	b.n	80080f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	781a      	ldrb	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	3301      	adds	r3, #1
 80080f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1cf      	bne.n	80080aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2200      	movs	r2, #0
 8008112:	2140      	movs	r1, #64	; 0x40
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 f810 	bl	800813a <UART_WaitOnFlagUntilTimeout>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e006      	b.n	8008132 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	e000      	b.n	8008132 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008130:	2302      	movs	r3, #2
  }
}
 8008132:	4618      	mov	r0, r3
 8008134:	3720      	adds	r7, #32
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b090      	sub	sp, #64	; 0x40
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	603b      	str	r3, [r7, #0]
 8008146:	4613      	mov	r3, r2
 8008148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814a:	e050      	b.n	80081ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800814e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008152:	d04c      	beq.n	80081ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008156:	2b00      	cmp	r3, #0
 8008158:	d007      	beq.n	800816a <UART_WaitOnFlagUntilTimeout+0x30>
 800815a:	f7fc f927 	bl	80043ac <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008166:	429a      	cmp	r2, r3
 8008168:	d241      	bcs.n	80081ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	330c      	adds	r3, #12
 8008170:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	330c      	adds	r3, #12
 8008188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800818a:	637a      	str	r2, [r7, #52]	; 0x34
 800818c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e5      	bne.n	800816a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3314      	adds	r3, #20
 80081a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	613b      	str	r3, [r7, #16]
   return(result);
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f023 0301 	bic.w	r3, r3, #1
 80081b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3314      	adds	r3, #20
 80081bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081be:	623a      	str	r2, [r7, #32]
 80081c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	69f9      	ldr	r1, [r7, #28]
 80081c4:	6a3a      	ldr	r2, [r7, #32]
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e5      	bne.n	800819e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2220      	movs	r2, #32
 80081de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e00f      	b.n	800820e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4013      	ands	r3, r2
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	bf0c      	ite	eq
 80081fe:	2301      	moveq	r3, #1
 8008200:	2300      	movne	r3, #0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	429a      	cmp	r2, r3
 800820a:	d09f      	beq.n	800814c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3740      	adds	r7, #64	; 0x40
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800821c:	b0c0      	sub	sp, #256	; 0x100
 800821e:	af00      	add	r7, sp, #0
 8008220:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	68d9      	ldr	r1, [r3, #12]
 8008236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	ea40 0301 	orr.w	r3, r0, r1
 8008240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	431a      	orrs	r2, r3
 8008250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	431a      	orrs	r2, r3
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	4313      	orrs	r3, r2
 8008260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008270:	f021 010c 	bic.w	r1, r1, #12
 8008274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800827e:	430b      	orrs	r3, r1
 8008280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800828e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008292:	6999      	ldr	r1, [r3, #24]
 8008294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	ea40 0301 	orr.w	r3, r0, r1
 800829e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	4b8f      	ldr	r3, [pc, #572]	; (80084e4 <UART_SetConfig+0x2cc>)
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d005      	beq.n	80082b8 <UART_SetConfig+0xa0>
 80082ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b8d      	ldr	r3, [pc, #564]	; (80084e8 <UART_SetConfig+0x2d0>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d104      	bne.n	80082c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082b8:	f7fe fc26 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 80082bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082c0:	e003      	b.n	80082ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082c2:	f7fe fc0d 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 80082c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d4:	f040 810c 	bne.w	80084f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082dc:	2200      	movs	r2, #0
 80082de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082ea:	4622      	mov	r2, r4
 80082ec:	462b      	mov	r3, r5
 80082ee:	1891      	adds	r1, r2, r2
 80082f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80082f2:	415b      	adcs	r3, r3
 80082f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082fa:	4621      	mov	r1, r4
 80082fc:	eb12 0801 	adds.w	r8, r2, r1
 8008300:	4629      	mov	r1, r5
 8008302:	eb43 0901 	adc.w	r9, r3, r1
 8008306:	f04f 0200 	mov.w	r2, #0
 800830a:	f04f 0300 	mov.w	r3, #0
 800830e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800831a:	4690      	mov	r8, r2
 800831c:	4699      	mov	r9, r3
 800831e:	4623      	mov	r3, r4
 8008320:	eb18 0303 	adds.w	r3, r8, r3
 8008324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008328:	462b      	mov	r3, r5
 800832a:	eb49 0303 	adc.w	r3, r9, r3
 800832e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800833e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008346:	460b      	mov	r3, r1
 8008348:	18db      	adds	r3, r3, r3
 800834a:	653b      	str	r3, [r7, #80]	; 0x50
 800834c:	4613      	mov	r3, r2
 800834e:	eb42 0303 	adc.w	r3, r2, r3
 8008352:	657b      	str	r3, [r7, #84]	; 0x54
 8008354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800835c:	f7f8 fc9c 	bl	8000c98 <__aeabi_uldivmod>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4b61      	ldr	r3, [pc, #388]	; (80084ec <UART_SetConfig+0x2d4>)
 8008366:	fba3 2302 	umull	r2, r3, r3, r2
 800836a:	095b      	lsrs	r3, r3, #5
 800836c:	011c      	lsls	r4, r3, #4
 800836e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008372:	2200      	movs	r2, #0
 8008374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800837c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008380:	4642      	mov	r2, r8
 8008382:	464b      	mov	r3, r9
 8008384:	1891      	adds	r1, r2, r2
 8008386:	64b9      	str	r1, [r7, #72]	; 0x48
 8008388:	415b      	adcs	r3, r3
 800838a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800838c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008390:	4641      	mov	r1, r8
 8008392:	eb12 0a01 	adds.w	sl, r2, r1
 8008396:	4649      	mov	r1, r9
 8008398:	eb43 0b01 	adc.w	fp, r3, r1
 800839c:	f04f 0200 	mov.w	r2, #0
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083b0:	4692      	mov	sl, r2
 80083b2:	469b      	mov	fp, r3
 80083b4:	4643      	mov	r3, r8
 80083b6:	eb1a 0303 	adds.w	r3, sl, r3
 80083ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083be:	464b      	mov	r3, r9
 80083c0:	eb4b 0303 	adc.w	r3, fp, r3
 80083c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083dc:	460b      	mov	r3, r1
 80083de:	18db      	adds	r3, r3, r3
 80083e0:	643b      	str	r3, [r7, #64]	; 0x40
 80083e2:	4613      	mov	r3, r2
 80083e4:	eb42 0303 	adc.w	r3, r2, r3
 80083e8:	647b      	str	r3, [r7, #68]	; 0x44
 80083ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083f2:	f7f8 fc51 	bl	8000c98 <__aeabi_uldivmod>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	4b3b      	ldr	r3, [pc, #236]	; (80084ec <UART_SetConfig+0x2d4>)
 80083fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	2264      	movs	r2, #100	; 0x64
 8008406:	fb02 f303 	mul.w	r3, r2, r3
 800840a:	1acb      	subs	r3, r1, r3
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008412:	4b36      	ldr	r3, [pc, #216]	; (80084ec <UART_SetConfig+0x2d4>)
 8008414:	fba3 2302 	umull	r2, r3, r3, r2
 8008418:	095b      	lsrs	r3, r3, #5
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008420:	441c      	add	r4, r3
 8008422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008426:	2200      	movs	r2, #0
 8008428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800842c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008434:	4642      	mov	r2, r8
 8008436:	464b      	mov	r3, r9
 8008438:	1891      	adds	r1, r2, r2
 800843a:	63b9      	str	r1, [r7, #56]	; 0x38
 800843c:	415b      	adcs	r3, r3
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008444:	4641      	mov	r1, r8
 8008446:	1851      	adds	r1, r2, r1
 8008448:	6339      	str	r1, [r7, #48]	; 0x30
 800844a:	4649      	mov	r1, r9
 800844c:	414b      	adcs	r3, r1
 800844e:	637b      	str	r3, [r7, #52]	; 0x34
 8008450:	f04f 0200 	mov.w	r2, #0
 8008454:	f04f 0300 	mov.w	r3, #0
 8008458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800845c:	4659      	mov	r1, fp
 800845e:	00cb      	lsls	r3, r1, #3
 8008460:	4651      	mov	r1, sl
 8008462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008466:	4651      	mov	r1, sl
 8008468:	00ca      	lsls	r2, r1, #3
 800846a:	4610      	mov	r0, r2
 800846c:	4619      	mov	r1, r3
 800846e:	4603      	mov	r3, r0
 8008470:	4642      	mov	r2, r8
 8008472:	189b      	adds	r3, r3, r2
 8008474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008478:	464b      	mov	r3, r9
 800847a:	460a      	mov	r2, r1
 800847c:	eb42 0303 	adc.w	r3, r2, r3
 8008480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008490:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008498:	460b      	mov	r3, r1
 800849a:	18db      	adds	r3, r3, r3
 800849c:	62bb      	str	r3, [r7, #40]	; 0x28
 800849e:	4613      	mov	r3, r2
 80084a0:	eb42 0303 	adc.w	r3, r2, r3
 80084a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084ae:	f7f8 fbf3 	bl	8000c98 <__aeabi_uldivmod>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4b0d      	ldr	r3, [pc, #52]	; (80084ec <UART_SetConfig+0x2d4>)
 80084b8:	fba3 1302 	umull	r1, r3, r3, r2
 80084bc:	095b      	lsrs	r3, r3, #5
 80084be:	2164      	movs	r1, #100	; 0x64
 80084c0:	fb01 f303 	mul.w	r3, r1, r3
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	3332      	adds	r3, #50	; 0x32
 80084ca:	4a08      	ldr	r2, [pc, #32]	; (80084ec <UART_SetConfig+0x2d4>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	095b      	lsrs	r3, r3, #5
 80084d2:	f003 0207 	and.w	r2, r3, #7
 80084d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4422      	add	r2, r4
 80084de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084e0:	e105      	b.n	80086ee <UART_SetConfig+0x4d6>
 80084e2:	bf00      	nop
 80084e4:	40011000 	.word	0x40011000
 80084e8:	40011400 	.word	0x40011400
 80084ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008502:	4642      	mov	r2, r8
 8008504:	464b      	mov	r3, r9
 8008506:	1891      	adds	r1, r2, r2
 8008508:	6239      	str	r1, [r7, #32]
 800850a:	415b      	adcs	r3, r3
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
 800850e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008512:	4641      	mov	r1, r8
 8008514:	1854      	adds	r4, r2, r1
 8008516:	4649      	mov	r1, r9
 8008518:	eb43 0501 	adc.w	r5, r3, r1
 800851c:	f04f 0200 	mov.w	r2, #0
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	00eb      	lsls	r3, r5, #3
 8008526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800852a:	00e2      	lsls	r2, r4, #3
 800852c:	4614      	mov	r4, r2
 800852e:	461d      	mov	r5, r3
 8008530:	4643      	mov	r3, r8
 8008532:	18e3      	adds	r3, r4, r3
 8008534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008538:	464b      	mov	r3, r9
 800853a:	eb45 0303 	adc.w	r3, r5, r3
 800853e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800854e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800855e:	4629      	mov	r1, r5
 8008560:	008b      	lsls	r3, r1, #2
 8008562:	4621      	mov	r1, r4
 8008564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008568:	4621      	mov	r1, r4
 800856a:	008a      	lsls	r2, r1, #2
 800856c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008570:	f7f8 fb92 	bl	8000c98 <__aeabi_uldivmod>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4b60      	ldr	r3, [pc, #384]	; (80086fc <UART_SetConfig+0x4e4>)
 800857a:	fba3 2302 	umull	r2, r3, r3, r2
 800857e:	095b      	lsrs	r3, r3, #5
 8008580:	011c      	lsls	r4, r3, #4
 8008582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008586:	2200      	movs	r2, #0
 8008588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800858c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008594:	4642      	mov	r2, r8
 8008596:	464b      	mov	r3, r9
 8008598:	1891      	adds	r1, r2, r2
 800859a:	61b9      	str	r1, [r7, #24]
 800859c:	415b      	adcs	r3, r3
 800859e:	61fb      	str	r3, [r7, #28]
 80085a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085a4:	4641      	mov	r1, r8
 80085a6:	1851      	adds	r1, r2, r1
 80085a8:	6139      	str	r1, [r7, #16]
 80085aa:	4649      	mov	r1, r9
 80085ac:	414b      	adcs	r3, r1
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	f04f 0300 	mov.w	r3, #0
 80085b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085bc:	4659      	mov	r1, fp
 80085be:	00cb      	lsls	r3, r1, #3
 80085c0:	4651      	mov	r1, sl
 80085c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085c6:	4651      	mov	r1, sl
 80085c8:	00ca      	lsls	r2, r1, #3
 80085ca:	4610      	mov	r0, r2
 80085cc:	4619      	mov	r1, r3
 80085ce:	4603      	mov	r3, r0
 80085d0:	4642      	mov	r2, r8
 80085d2:	189b      	adds	r3, r3, r2
 80085d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085d8:	464b      	mov	r3, r9
 80085da:	460a      	mov	r2, r1
 80085dc:	eb42 0303 	adc.w	r3, r2, r3
 80085e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80085ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085fc:	4649      	mov	r1, r9
 80085fe:	008b      	lsls	r3, r1, #2
 8008600:	4641      	mov	r1, r8
 8008602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008606:	4641      	mov	r1, r8
 8008608:	008a      	lsls	r2, r1, #2
 800860a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800860e:	f7f8 fb43 	bl	8000c98 <__aeabi_uldivmod>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4b39      	ldr	r3, [pc, #228]	; (80086fc <UART_SetConfig+0x4e4>)
 8008618:	fba3 1302 	umull	r1, r3, r3, r2
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	2164      	movs	r1, #100	; 0x64
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	3332      	adds	r3, #50	; 0x32
 800862a:	4a34      	ldr	r2, [pc, #208]	; (80086fc <UART_SetConfig+0x4e4>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008636:	441c      	add	r4, r3
 8008638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800863c:	2200      	movs	r2, #0
 800863e:	673b      	str	r3, [r7, #112]	; 0x70
 8008640:	677a      	str	r2, [r7, #116]	; 0x74
 8008642:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008646:	4642      	mov	r2, r8
 8008648:	464b      	mov	r3, r9
 800864a:	1891      	adds	r1, r2, r2
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	415b      	adcs	r3, r3
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008656:	4641      	mov	r1, r8
 8008658:	1851      	adds	r1, r2, r1
 800865a:	6039      	str	r1, [r7, #0]
 800865c:	4649      	mov	r1, r9
 800865e:	414b      	adcs	r3, r1
 8008660:	607b      	str	r3, [r7, #4]
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	f04f 0300 	mov.w	r3, #0
 800866a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800866e:	4659      	mov	r1, fp
 8008670:	00cb      	lsls	r3, r1, #3
 8008672:	4651      	mov	r1, sl
 8008674:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008678:	4651      	mov	r1, sl
 800867a:	00ca      	lsls	r2, r1, #3
 800867c:	4610      	mov	r0, r2
 800867e:	4619      	mov	r1, r3
 8008680:	4603      	mov	r3, r0
 8008682:	4642      	mov	r2, r8
 8008684:	189b      	adds	r3, r3, r2
 8008686:	66bb      	str	r3, [r7, #104]	; 0x68
 8008688:	464b      	mov	r3, r9
 800868a:	460a      	mov	r2, r1
 800868c:	eb42 0303 	adc.w	r3, r2, r3
 8008690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	663b      	str	r3, [r7, #96]	; 0x60
 800869c:	667a      	str	r2, [r7, #100]	; 0x64
 800869e:	f04f 0200 	mov.w	r2, #0
 80086a2:	f04f 0300 	mov.w	r3, #0
 80086a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80086aa:	4649      	mov	r1, r9
 80086ac:	008b      	lsls	r3, r1, #2
 80086ae:	4641      	mov	r1, r8
 80086b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086b4:	4641      	mov	r1, r8
 80086b6:	008a      	lsls	r2, r1, #2
 80086b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086bc:	f7f8 faec 	bl	8000c98 <__aeabi_uldivmod>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <UART_SetConfig+0x4e4>)
 80086c6:	fba3 1302 	umull	r1, r3, r3, r2
 80086ca:	095b      	lsrs	r3, r3, #5
 80086cc:	2164      	movs	r1, #100	; 0x64
 80086ce:	fb01 f303 	mul.w	r3, r1, r3
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	3332      	adds	r3, #50	; 0x32
 80086d8:	4a08      	ldr	r2, [pc, #32]	; (80086fc <UART_SetConfig+0x4e4>)
 80086da:	fba2 2303 	umull	r2, r3, r2, r3
 80086de:	095b      	lsrs	r3, r3, #5
 80086e0:	f003 020f 	and.w	r2, r3, #15
 80086e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4422      	add	r2, r4
 80086ec:	609a      	str	r2, [r3, #8]
}
 80086ee:	bf00      	nop
 80086f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086f4:	46bd      	mov	sp, r7
 80086f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086fa:	bf00      	nop
 80086fc:	51eb851f 	.word	0x51eb851f

08008700 <config>:
#include "stdio.h"
#include <string.h>

uint8_t sensor_id = 0xAA;

struct config config(){
 8008700:	b4b0      	push	{r4, r5, r7}
 8008702:	b089      	sub	sp, #36	; 0x24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]

	struct config t;
	uint8_t flag = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	77fb      	strb	r3, [r7, #31]
	set_flag(flag,SEND_TEMP_FLAG);
 800870c:	7ffb      	ldrb	r3, [r7, #31]
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	77fb      	strb	r3, [r7, #31]
	//set_flag(flag,SEND_CO2_FLAG);
	set_flag(flag,SEND_VIBRATION_FLAG);
 8008714:	7ffb      	ldrb	r3, [r7, #31]
 8008716:	f043 0304 	orr.w	r3, r3, #4
 800871a:	77fb      	strb	r3, [r7, #31]

	t.send_flag = flag;
 800871c:	7ffb      	ldrb	r3, [r7, #31]
 800871e:	733b      	strb	r3, [r7, #12]
	memcpy(t.key,"HALLO_adwFegadwa", 16);
 8008720:	4b0c      	ldr	r3, [pc, #48]	; (8008754 <config+0x54>)
 8008722:	f107 040d 	add.w	r4, r7, #13
 8008726:	461d      	mov	r5, r3
 8008728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800872a:	6020      	str	r0, [r4, #0]
 800872c:	6061      	str	r1, [r4, #4]
 800872e:	60a2      	str	r2, [r4, #8]
 8008730:	60e3      	str	r3, [r4, #12]

	return t;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	461d      	mov	r5, r3
 8008736:	f107 040c 	add.w	r4, r7, #12
 800873a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800873c:	6028      	str	r0, [r5, #0]
 800873e:	6069      	str	r1, [r5, #4]
 8008740:	60aa      	str	r2, [r5, #8]
 8008742:	60eb      	str	r3, [r5, #12]
 8008744:	7823      	ldrb	r3, [r4, #0]
 8008746:	742b      	strb	r3, [r5, #16]
}
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	3724      	adds	r7, #36	; 0x24
 800874c:	46bd      	mov	sp, r7
 800874e:	bcb0      	pop	{r4, r5, r7}
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	0800dd30 	.word	0x0800dd30

08008758 <comm_builddata>:

uint8_t gateway_received = 0;
uint8_t message_send = 0;

void comm_builddata(uint8_t *temp, float *value, uint8_t placement, uint8_t type)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4611      	mov	r1, r2
 8008764:	461a      	mov	r2, r3
 8008766:	460b      	mov	r3, r1
 8008768:	71fb      	strb	r3, [r7, #7]
 800876a:	4613      	mov	r3, r2
 800876c:	71bb      	strb	r3, [r7, #6]
//	comm_printf_debug("Value: %f", *value);
	uint16_t int_conv = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	82fb      	strh	r3, [r7, #22]
	if(type == 1){
 8008772:	79bb      	ldrb	r3, [r7, #6]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d111      	bne.n	800879c <comm_builddata+0x44>
		int_conv = *value/ ACC_CONVERTION;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4618      	mov	r0, r3
 800877e:	f7f7 feeb 	bl	8000558 <__aeabi_f2d>
 8008782:	a327      	add	r3, pc, #156	; (adr r3, 8008820 <comm_builddata+0xc8>)
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f7f8 f868 	bl	800085c <__aeabi_ddiv>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4610      	mov	r0, r2
 8008792:	4619      	mov	r1, r3
 8008794:	f7f8 fa10 	bl	8000bb8 <__aeabi_d2uiz>
 8008798:	4603      	mov	r3, r0
 800879a:	82fb      	strh	r3, [r7, #22]

	}
	if(type == 2){
 800879c:	79bb      	ldrb	r3, [r7, #6]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d111      	bne.n	80087c6 <comm_builddata+0x6e>
		int_conv = *value/ VELO_CONVERTION;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7f7 fed6 	bl	8000558 <__aeabi_f2d>
 80087ac:	a31e      	add	r3, pc, #120	; (adr r3, 8008828 <comm_builddata+0xd0>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f7f8 f853 	bl	800085c <__aeabi_ddiv>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4610      	mov	r0, r2
 80087bc:	4619      	mov	r1, r3
 80087be:	f7f8 f9fb 	bl	8000bb8 <__aeabi_d2uiz>
 80087c2:	4603      	mov	r3, r0
 80087c4:	82fb      	strh	r3, [r7, #22]
	}
	if(type == 3){
 80087c6:	79bb      	ldrb	r3, [r7, #6]
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d111      	bne.n	80087f0 <comm_builddata+0x98>
		int_conv = *value/ DISP_CONVERTION;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7f7 fec1 	bl	8000558 <__aeabi_f2d>
 80087d6:	a314      	add	r3, pc, #80	; (adr r3, 8008828 <comm_builddata+0xd0>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	f7f8 f83e 	bl	800085c <__aeabi_ddiv>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4610      	mov	r0, r2
 80087e6:	4619      	mov	r1, r3
 80087e8:	f7f8 f9e6 	bl	8000bb8 <__aeabi_d2uiz>
 80087ec:	4603      	mov	r3, r0
 80087ee:	82fb      	strh	r3, [r7, #22]
	}
//	comm_printf_debug("Value converted: %d", int_conv);
	memset(&temp[placement],(int_conv >>(8)),1);
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	18d0      	adds	r0, r2, r3
 80087f6:	8afb      	ldrh	r3, [r7, #22]
 80087f8:	0a1b      	lsrs	r3, r3, #8
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2201      	movs	r2, #1
 80087fe:	4619      	mov	r1, r3
 8008800:	f002 fa8a 	bl	800ad18 <memset>
	memset(&temp[placement+1],(int_conv >>(8*0)),1);
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	3301      	adds	r3, #1
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	8af9      	ldrh	r1, [r7, #22]
 800880e:	2201      	movs	r2, #1
 8008810:	4618      	mov	r0, r3
 8008812:	f002 fa81 	bl	800ad18 <memset>
}
 8008816:	bf00      	nop
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	00120012 	.word	0x00120012
 8008824:	3f220012 	.word	0x3f220012
 8008828:	c012c013 	.word	0xc012c013
 800882c:	3f72c012 	.word	0x3f72c012

08008830 <comm_request>:

uint8_t comm_request(uint8_t *temp, struct sensor_values sensor_value)
{
 8008830:	b084      	sub	sp, #16
 8008832:	b590      	push	{r4, r7, lr}
 8008834:	b0f7      	sub	sp, #476	; 0x1dc
 8008836:	af00      	add	r7, sp, #0
 8008838:	f507 74ec 	add.w	r4, r7, #472	; 0x1d8
 800883c:	f5a4 74ea 	sub.w	r4, r4, #468	; 0x1d4
 8008840:	6020      	str	r0, [r4, #0]
 8008842:	f507 70f6 	add.w	r0, r7, #492	; 0x1ec
 8008846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//make sensor data ready for send
	int i;
	char tmp[150];
	char chr[300];
	union convert f;
	VECTOR *ptr_data = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	ptr_data = &sensor_value.acc.x;
 8008850:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8008854:	3304      	adds	r3, #4
 8008856:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	f.t = sensor_value.temperature;
 800885a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800885e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008862:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008866:	601a      	str	r2, [r3, #0]
	memset(temp,0,200);
 8008868:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800886c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008870:	22c8      	movs	r2, #200	; 0xc8
 8008872:	2100      	movs	r1, #0
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	f002 fa4f 	bl	800ad18 <memset>
	temp[0] = sensor_id;
 800887a:	4ba4      	ldr	r3, [pc, #656]	; (8008b0c <comm_request+0x2dc>)
 800887c:	781a      	ldrb	r2, [r3, #0]
 800887e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008882:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	701a      	strb	r2, [r3, #0]
	temp[1] = DATAPKT;
 800888a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800888e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	2201      	movs	r2, #1
 8008898:	701a      	strb	r2, [r3, #0]

	for(i= 2; i< 7; i++){
 800889a:	2302      	movs	r3, #2
 800889c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80088a0:	e015      	b.n	80088ce <comm_request+0x9e>
		temp[i] = f.b[i-2];
 80088a2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80088a6:	1e9a      	subs	r2, r3, #2
 80088a8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80088ac:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 80088b0:	f5a1 71ea 	sub.w	r1, r1, #468	; 0x1d4
 80088b4:	6809      	ldr	r1, [r1, #0]
 80088b6:	440b      	add	r3, r1
 80088b8:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 80088bc:	f5a1 71e8 	sub.w	r1, r1, #464	; 0x1d0
 80088c0:	5c8a      	ldrb	r2, [r1, r2]
 80088c2:	701a      	strb	r2, [r3, #0]
	for(i= 2; i< 7; i++){
 80088c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80088c8:	3301      	adds	r3, #1
 80088ca:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80088ce:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80088d2:	2b06      	cmp	r3, #6
 80088d4:	dde5      	ble.n	80088a2 <comm_request+0x72>
	}

	for(i=0; i<3;i++){
 80088d6:	2300      	movs	r3, #0
 80088d8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80088dc:	e048      	b.n	8008970 <comm_request+0x140>
		comm_builddata(temp,&ptr_data->rms, 7+(6*i),1);
 80088de:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80088e2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	461a      	mov	r2, r3
 80088ea:	0052      	lsls	r2, r2, #1
 80088ec:	4413      	add	r3, r2
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	3307      	adds	r3, #7
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80088fa:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 80088fe:	2301      	movs	r3, #1
 8008900:	6800      	ldr	r0, [r0, #0]
 8008902:	f7ff ff29 	bl	8008758 <comm_builddata>
		comm_builddata(temp,&ptr_data->peak, 9+(6*i),1);
 8008906:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800890a:	1d19      	adds	r1, r3, #4
 800890c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008910:	b2db      	uxtb	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	0052      	lsls	r2, r2, #1
 8008916:	4413      	add	r3, r2
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	b2db      	uxtb	r3, r3
 800891c:	3309      	adds	r3, #9
 800891e:	b2da      	uxtb	r2, r3
 8008920:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008924:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8008928:	2301      	movs	r3, #1
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	f7ff ff14 	bl	8008758 <comm_builddata>
		comm_builddata(temp,&ptr_data->crest, 11+(6*i),1);
 8008930:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008934:	f103 0108 	add.w	r1, r3, #8
 8008938:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800893c:	b2db      	uxtb	r3, r3
 800893e:	461a      	mov	r2, r3
 8008940:	0052      	lsls	r2, r2, #1
 8008942:	4413      	add	r3, r2
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	b2db      	uxtb	r3, r3
 8008948:	330b      	adds	r3, #11
 800894a:	b2da      	uxtb	r2, r3
 800894c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008950:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8008954:	2301      	movs	r3, #1
 8008956:	6800      	ldr	r0, [r0, #0]
 8008958:	f7ff fefe 	bl	8008758 <comm_builddata>
		ptr_data++;
 800895c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008960:	330c      	adds	r3, #12
 8008962:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	for(i=0; i<3;i++){
 8008966:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800896a:	3301      	adds	r3, #1
 800896c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008970:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008974:	2b02      	cmp	r3, #2
 8008976:	ddb2      	ble.n	80088de <comm_request+0xae>
	}
	ptr_data = &sensor_value.velo.x;
 8008978:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800897c:	3328      	adds	r3, #40	; 0x28
 800897e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	for(i=0; i<3;i++){
 8008982:	2300      	movs	r3, #0
 8008984:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008988:	e048      	b.n	8008a1c <comm_request+0x1ec>
		comm_builddata(temp,&ptr_data->rms, 25+(6*i),2);
 800898a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800898e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008992:	b2db      	uxtb	r3, r3
 8008994:	461a      	mov	r2, r3
 8008996:	0052      	lsls	r2, r2, #1
 8008998:	4413      	add	r3, r2
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	b2db      	uxtb	r3, r3
 800899e:	3319      	adds	r3, #25
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80089a6:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 80089aa:	2302      	movs	r3, #2
 80089ac:	6800      	ldr	r0, [r0, #0]
 80089ae:	f7ff fed3 	bl	8008758 <comm_builddata>
		comm_builddata(temp,&ptr_data->peak, 27+(6*i),2);
 80089b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80089b6:	1d19      	adds	r1, r3, #4
 80089b8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	0052      	lsls	r2, r2, #1
 80089c2:	4413      	add	r3, r2
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	331b      	adds	r3, #27
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80089d0:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 80089d4:	2302      	movs	r3, #2
 80089d6:	6800      	ldr	r0, [r0, #0]
 80089d8:	f7ff febe 	bl	8008758 <comm_builddata>
		comm_builddata(temp,&ptr_data->crest,29+(6*i),2);
 80089dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80089e0:	f103 0108 	add.w	r1, r3, #8
 80089e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	461a      	mov	r2, r3
 80089ec:	0052      	lsls	r2, r2, #1
 80089ee:	4413      	add	r3, r2
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	331d      	adds	r3, #29
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80089fc:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8008a00:	2302      	movs	r3, #2
 8008a02:	6800      	ldr	r0, [r0, #0]
 8008a04:	f7ff fea8 	bl	8008758 <comm_builddata>
		ptr_data++;
 8008a08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	for(i=0; i<3;i++){
 8008a12:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008a16:	3301      	adds	r3, #1
 8008a18:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008a1c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	ddb2      	ble.n	800898a <comm_request+0x15a>
	}
	ptr_data = &sensor_value.disp.x;
 8008a24:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8008a28:	334c      	adds	r3, #76	; 0x4c
 8008a2a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	for(i=0; i<3;i++){
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008a34:	e02c      	b.n	8008a90 <comm_request+0x260>
		comm_builddata(temp,&ptr_data->rms, 43+(4*i),3);
 8008a36:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8008a3a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	332b      	adds	r3, #43	; 0x2b
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008a4c:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8008a50:	2303      	movs	r3, #3
 8008a52:	6800      	ldr	r0, [r0, #0]
 8008a54:	f7ff fe80 	bl	8008758 <comm_builddata>
		comm_builddata(temp,&ptr_data->peak, 45+(4*i),3);
 8008a58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008a5c:	1d19      	adds	r1, r3, #4
 8008a5e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	332d      	adds	r3, #45	; 0x2d
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008a70:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8008a74:	2303      	movs	r3, #3
 8008a76:	6800      	ldr	r0, [r0, #0]
 8008a78:	f7ff fe6e 	bl	8008758 <comm_builddata>
		ptr_data++;
 8008a7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008a80:	330c      	adds	r3, #12
 8008a82:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	for(i=0; i<3;i++){
 8008a86:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008a90:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	ddce      	ble.n	8008a36 <comm_request+0x206>
	}
	for(i=0; i<55;i++){
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008a9e:	e01c      	b.n	8008ada <comm_request+0x2aa>
		sprintf(tmp,"%02x",temp[i]);
 8008aa0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008aa4:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8008aa8:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 8008aac:	6812      	ldr	r2, [r2, #0]
 8008aae:	4413      	add	r3, r2
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ab8:	4915      	ldr	r1, [pc, #84]	; (8008b10 <comm_request+0x2e0>)
 8008aba:	4618      	mov	r0, r3
 8008abc:	f002 fd9e 	bl	800b5fc <siprintf>
		strcat(chr, tmp);
 8008ac0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ac4:	f107 030c 	add.w	r3, r7, #12
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f002 fdb6 	bl	800b63c <strcat>
	for(i=0; i<55;i++){
 8008ad0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008ada:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008ade:	2b36      	cmp	r3, #54	; 0x36
 8008ae0:	ddde      	ble.n	8008aa0 <comm_request+0x270>
	}
	comm_printf_debug(chr);
 8008ae2:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <comm_request+0x2e4>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f107 020c 	add.w	r2, r7, #12
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fe31 	bl	8009754 <printf_debug>
	message_send = 1;
 8008af2:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <comm_request+0x2e8>)
 8008af4:	2201      	movs	r2, #1
 8008af6:	701a      	strb	r2, [r3, #0]
	return 55;
 8008af8:	2337      	movs	r3, #55	; 0x37
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 8008b00:	46bd      	mov	sp, r7
 8008b02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008b06:	b004      	add	sp, #16
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	20000019 	.word	0x20000019
 8008b10:	0800dd4c 	.word	0x0800dd4c
 8008b14:	2000001c 	.word	0x2000001c
 8008b18:	200003f8 	.word	0x200003f8
 8008b1c:	00000000 	.word	0x00000000

08008b20 <comm_received>:
	}
}


void comm_received(uint8_t *data, struct sensor_values *sensordata)
{
 8008b20:	b590      	push	{r4, r7, lr}
 8008b22:	b08b      	sub	sp, #44	; 0x2c
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
//	char tmp[50];
	union convert f;
	uint16_t tempvalue;
//	uint8_t dataframe[20];
//	uint8_t enc_data[20];
	VECTOR *ptr_xyz = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	627b      	str	r3, [r7, #36]	; 0x24
	ptr_xyz = &sensordata->acc.x;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	3304      	adds	r3, #4
 8008b32:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i= 2; i< 7; i++)
 8008b34:	2302      	movs	r3, #2
 8008b36:	623b      	str	r3, [r7, #32]
 8008b38:	e00c      	b.n	8008b54 <comm_received+0x34>
	{
		f.b[i-2]= data[i];
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	441a      	add	r2, r3
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	3b02      	subs	r3, #2
 8008b44:	7812      	ldrb	r2, [r2, #0]
 8008b46:	3328      	adds	r3, #40	; 0x28
 8008b48:	443b      	add	r3, r7
 8008b4a:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for(int i= 2; i< 7; i++)
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	3301      	adds	r3, #1
 8008b52:	623b      	str	r3, [r7, #32]
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	2b06      	cmp	r3, #6
 8008b58:	ddef      	ble.n	8008b3a <comm_received+0x1a>
	}
	sensordata->temperature = f.t;
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	601a      	str	r2, [r3, #0]
	if(data[1] == DATAPKT){
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3301      	adds	r3, #1
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	f040 8185 	bne.w	8008e76 <comm_received+0x356>
		for(int i=0; i<3; i++)
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	61fb      	str	r3, [r7, #28]
 8008b70:	e08c      	b.n	8008c8c <comm_received+0x16c>
		{
			tempvalue = data[7 + (6*i)] << 8 | data[8 + (6*i)] << 0;
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	4613      	mov	r3, r2
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	4413      	add	r3, r2
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	3307      	adds	r3, #7
 8008b7e:	461a      	mov	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	021b      	lsls	r3, r3, #8
 8008b88:	b219      	sxth	r1, r3
 8008b8a:	69fa      	ldr	r2, [r7, #28]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	005b      	lsls	r3, r3, #1
 8008b90:	4413      	add	r3, r2
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	3308      	adds	r3, #8
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	b21b      	sxth	r3, r3
 8008ba0:	430b      	orrs	r3, r1
 8008ba2:	b21b      	sxth	r3, r3
 8008ba4:	827b      	strh	r3, [r7, #18]
			ptr_xyz->rms = tempvalue * ACC_CONVERTION;
 8008ba6:	8a7b      	ldrh	r3, [r7, #18]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7f7 fcc3 	bl	8000534 <__aeabi_i2d>
 8008bae:	f20f 53c0 	addw	r3, pc, #1472	; 0x5c0
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fd27 	bl	8000608 <__aeabi_dmul>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	f7f8 f819 	bl	8000bf8 <__aeabi_d2f>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	601a      	str	r2, [r3, #0]
			tempvalue = data[9 + (6*i)] << 8 | data[10 + (6*i)] << 0;
 8008bcc:	69fa      	ldr	r2, [r7, #28]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	4413      	add	r3, r2
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	3309      	adds	r3, #9
 8008bd8:	461a      	mov	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4413      	add	r3, r2
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	021b      	lsls	r3, r3, #8
 8008be2:	b219      	sxth	r1, r3
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	4613      	mov	r3, r2
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	4413      	add	r3, r2
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	330a      	adds	r3, #10
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	b21b      	sxth	r3, r3
 8008bfa:	430b      	orrs	r3, r1
 8008bfc:	b21b      	sxth	r3, r3
 8008bfe:	827b      	strh	r3, [r7, #18]
			ptr_xyz->peak = tempvalue * ACC_CONVERTION;
 8008c00:	8a7b      	ldrh	r3, [r7, #18]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7f7 fc96 	bl	8000534 <__aeabi_i2d>
 8008c08:	f20f 5364 	addw	r3, pc, #1380	; 0x564
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f7f7 fcfa 	bl	8000608 <__aeabi_dmul>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4610      	mov	r0, r2
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	f7f7 ffec 	bl	8000bf8 <__aeabi_d2f>
 8008c20:	4602      	mov	r2, r0
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	605a      	str	r2, [r3, #4]
			tempvalue = data[11 + (6*i)] << 8 | data[12 + (6*i)] << 0;
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	4413      	add	r3, r2
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	330b      	adds	r3, #11
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4413      	add	r3, r2
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	021b      	lsls	r3, r3, #8
 8008c3c:	b219      	sxth	r1, r3
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	4613      	mov	r3, r2
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	4413      	add	r3, r2
 8008c46:	005b      	lsls	r3, r3, #1
 8008c48:	330c      	adds	r3, #12
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4413      	add	r3, r2
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	b21b      	sxth	r3, r3
 8008c54:	430b      	orrs	r3, r1
 8008c56:	b21b      	sxth	r3, r3
 8008c58:	827b      	strh	r3, [r7, #18]
			ptr_xyz->crest = tempvalue * ACC_CONVERTION;
 8008c5a:	8a7b      	ldrh	r3, [r7, #18]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7f7 fc69 	bl	8000534 <__aeabi_i2d>
 8008c62:	f20f 530c 	addw	r3, pc, #1292	; 0x50c
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fccd 	bl	8000608 <__aeabi_dmul>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4610      	mov	r0, r2
 8008c74:	4619      	mov	r1, r3
 8008c76:	f7f7 ffbf 	bl	8000bf8 <__aeabi_d2f>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	609a      	str	r2, [r3, #8]

			ptr_xyz++;
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	330c      	adds	r3, #12
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<3; i++)
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	61fb      	str	r3, [r7, #28]
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	f77f af6f 	ble.w	8008b72 <comm_received+0x52>

		}
		ptr_xyz = &sensordata->velo.x;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	3328      	adds	r3, #40	; 0x28
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<3; i++)
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61bb      	str	r3, [r7, #24]
 8008c9e:	e08b      	b.n	8008db8 <comm_received+0x298>
		{
			tempvalue = data[25 + (6*i)] << 8 | data[26 + (6*i)] << 0;
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	4413      	add	r3, r2
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	3319      	adds	r3, #25
 8008cac:	461a      	mov	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	021b      	lsls	r3, r3, #8
 8008cb6:	b219      	sxth	r1, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	4413      	add	r3, r2
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	331a      	adds	r3, #26
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4413      	add	r3, r2
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	b21b      	sxth	r3, r3
 8008cce:	430b      	orrs	r3, r1
 8008cd0:	b21b      	sxth	r3, r3
 8008cd2:	827b      	strh	r3, [r7, #18]
			ptr_xyz->rms = tempvalue * VELO_CONVERTION;
 8008cd4:	8a7b      	ldrh	r3, [r7, #18]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7f7 fc2c 	bl	8000534 <__aeabi_i2d>
 8008cdc:	f20f 4398 	addw	r3, pc, #1176	; 0x498
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f7f7 fc90 	bl	8000608 <__aeabi_dmul>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4610      	mov	r0, r2
 8008cee:	4619      	mov	r1, r3
 8008cf0:	f7f7 ff82 	bl	8000bf8 <__aeabi_d2f>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	601a      	str	r2, [r3, #0]
			tempvalue = data[27 + (6*i)] << 8 | data[28 + (6*i)] << 0;
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	4413      	add	r3, r2
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	331b      	adds	r3, #27
 8008d06:	461a      	mov	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	021b      	lsls	r3, r3, #8
 8008d10:	b219      	sxth	r1, r3
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	4613      	mov	r3, r2
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	4413      	add	r3, r2
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	331c      	adds	r3, #28
 8008d1e:	461a      	mov	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4413      	add	r3, r2
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	b21b      	sxth	r3, r3
 8008d28:	430b      	orrs	r3, r1
 8008d2a:	b21b      	sxth	r3, r3
 8008d2c:	827b      	strh	r3, [r7, #18]
			ptr_xyz->peak = tempvalue * VELO_CONVERTION;
 8008d2e:	8a7b      	ldrh	r3, [r7, #18]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7f7 fbff 	bl	8000534 <__aeabi_i2d>
 8008d36:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	f7f7 fc63 	bl	8000608 <__aeabi_dmul>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4610      	mov	r0, r2
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f7f7 ff55 	bl	8000bf8 <__aeabi_d2f>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	605a      	str	r2, [r3, #4]
			tempvalue = data[29 + (6*i)] << 8 | data[30 + (6*i)] << 0;
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	4613      	mov	r3, r2
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	4413      	add	r3, r2
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	331d      	adds	r3, #29
 8008d60:	461a      	mov	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4413      	add	r3, r2
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	b219      	sxth	r1, r3
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	4413      	add	r3, r2
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	331e      	adds	r3, #30
 8008d78:	461a      	mov	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	b21b      	sxth	r3, r3
 8008d82:	430b      	orrs	r3, r1
 8008d84:	b21b      	sxth	r3, r3
 8008d86:	827b      	strh	r3, [r7, #18]
			ptr_xyz->crest = tempvalue * VELO_CONVERTION;
 8008d88:	8a7b      	ldrh	r3, [r7, #18]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7f7 fbd2 	bl	8000534 <__aeabi_i2d>
 8008d90:	a3f9      	add	r3, pc, #996	; (adr r3, 8009178 <comm_received+0x658>)
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f7f7 fc37 	bl	8000608 <__aeabi_dmul>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4610      	mov	r0, r2
 8008da0:	4619      	mov	r1, r3
 8008da2:	f7f7 ff29 	bl	8000bf8 <__aeabi_d2f>
 8008da6:	4602      	mov	r2, r0
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	609a      	str	r2, [r3, #8]

			ptr_xyz++;
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	330c      	adds	r3, #12
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<3; i++)
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	3301      	adds	r3, #1
 8008db6:	61bb      	str	r3, [r7, #24]
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	f77f af70 	ble.w	8008ca0 <comm_received+0x180>

		}
		ptr_xyz = &sensordata->disp.x;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	334c      	adds	r3, #76	; 0x4c
 8008dc4:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<3; i++)
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]
 8008dca:	e051      	b.n	8008e70 <comm_received+0x350>
		{
			tempvalue = data[43 + (4*i)] << 8 | data[44 + (4*i)] << 0;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	332b      	adds	r3, #43	; 0x2b
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	021b      	lsls	r3, r3, #8
 8008ddc:	b21a      	sxth	r2, r3
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	330b      	adds	r3, #11
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4619      	mov	r1, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	440b      	add	r3, r1
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	b21b      	sxth	r3, r3
 8008dee:	4313      	orrs	r3, r2
 8008df0:	b21b      	sxth	r3, r3
 8008df2:	827b      	strh	r3, [r7, #18]
			ptr_xyz->rms = tempvalue * DISP_CONVERTION;
 8008df4:	8a7b      	ldrh	r3, [r7, #18]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7f7 fb9c 	bl	8000534 <__aeabi_i2d>
 8008dfc:	a3de      	add	r3, pc, #888	; (adr r3, 8009178 <comm_received+0x658>)
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	f7f7 fc01 	bl	8000608 <__aeabi_dmul>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f7f7 fef3 	bl	8000bf8 <__aeabi_d2f>
 8008e12:	4602      	mov	r2, r0
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	601a      	str	r2, [r3, #0]
			tempvalue = data[45 + (4*i)] << 8 | data[46 + (4*i)] << 0;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	332d      	adds	r3, #45	; 0x2d
 8008e1e:	461a      	mov	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4413      	add	r3, r2
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	021b      	lsls	r3, r3, #8
 8008e28:	b21a      	sxth	r2, r3
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	332e      	adds	r3, #46	; 0x2e
 8008e30:	4619      	mov	r1, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	440b      	add	r3, r1
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	b21b      	sxth	r3, r3
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	b21b      	sxth	r3, r3
 8008e3e:	827b      	strh	r3, [r7, #18]
			ptr_xyz->peak = tempvalue * DISP_CONVERTION;
 8008e40:	8a7b      	ldrh	r3, [r7, #18]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7f7 fb76 	bl	8000534 <__aeabi_i2d>
 8008e48:	a3cb      	add	r3, pc, #812	; (adr r3, 8009178 <comm_received+0x658>)
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	f7f7 fbdb 	bl	8000608 <__aeabi_dmul>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4610      	mov	r0, r2
 8008e58:	4619      	mov	r1, r3
 8008e5a:	f7f7 fecd 	bl	8000bf8 <__aeabi_d2f>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	605a      	str	r2, [r3, #4]
			ptr_xyz++;
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	330c      	adds	r3, #12
 8008e68:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<3; i++)
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	ddaa      	ble.n	8008dcc <comm_received+0x2ac>
		}
	}
	comm_printf_debug("value temperature = %f", sensordata->temperature);
 8008e76:	4ba4      	ldr	r3, [pc, #656]	; (8009108 <comm_received+0x5e8>)
 8008e78:	681c      	ldr	r4, [r3, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7f7 fb6a 	bl	8000558 <__aeabi_f2d>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	49a0      	ldr	r1, [pc, #640]	; (800910c <comm_received+0x5ec>)
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 fc62 	bl	8009754 <printf_debug>
	comm_printf_debug("value x acc rms = %f", sensordata->acc.x.rms);
 8008e90:	4b9d      	ldr	r3, [pc, #628]	; (8009108 <comm_received+0x5e8>)
 8008e92:	681c      	ldr	r4, [r3, #0]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7f7 fb5d 	bl	8000558 <__aeabi_f2d>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	499b      	ldr	r1, [pc, #620]	; (8009110 <comm_received+0x5f0>)
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 fc55 	bl	8009754 <printf_debug>
	comm_printf_debug("value x acc peak= %f", sensordata->acc.x.peak);
 8008eaa:	4b97      	ldr	r3, [pc, #604]	; (8009108 <comm_received+0x5e8>)
 8008eac:	681c      	ldr	r4, [r3, #0]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7f7 fb50 	bl	8000558 <__aeabi_f2d>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4995      	ldr	r1, [pc, #596]	; (8009114 <comm_received+0x5f4>)
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f000 fc48 	bl	8009754 <printf_debug>
	comm_printf_debug("value x acc crest = %f", sensordata->acc.x.crest);
 8008ec4:	4b90      	ldr	r3, [pc, #576]	; (8009108 <comm_received+0x5e8>)
 8008ec6:	681c      	ldr	r4, [r3, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7f7 fb43 	bl	8000558 <__aeabi_f2d>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4990      	ldr	r1, [pc, #576]	; (8009118 <comm_received+0x5f8>)
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 fc3b 	bl	8009754 <printf_debug>
	comm_printf_debug("value y acc rms = %f", sensordata->acc.y.rms);
 8008ede:	4b8a      	ldr	r3, [pc, #552]	; (8009108 <comm_received+0x5e8>)
 8008ee0:	681c      	ldr	r4, [r3, #0]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f7 fb36 	bl	8000558 <__aeabi_f2d>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	498a      	ldr	r1, [pc, #552]	; (800911c <comm_received+0x5fc>)
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 fc2e 	bl	8009754 <printf_debug>
	comm_printf_debug("value y acc peak= %f", sensordata->acc.y.peak);
 8008ef8:	4b83      	ldr	r3, [pc, #524]	; (8009108 <comm_received+0x5e8>)
 8008efa:	681c      	ldr	r4, [r3, #0]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7f7 fb29 	bl	8000558 <__aeabi_f2d>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4985      	ldr	r1, [pc, #532]	; (8009120 <comm_received+0x600>)
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f000 fc21 	bl	8009754 <printf_debug>
	comm_printf_debug("value y acc crest= %f", sensordata->acc.y.crest);
 8008f12:	4b7d      	ldr	r3, [pc, #500]	; (8009108 <comm_received+0x5e8>)
 8008f14:	681c      	ldr	r4, [r3, #0]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7f7 fb1c 	bl	8000558 <__aeabi_f2d>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	497f      	ldr	r1, [pc, #508]	; (8009124 <comm_received+0x604>)
 8008f26:	4620      	mov	r0, r4
 8008f28:	f000 fc14 	bl	8009754 <printf_debug>
	comm_printf_debug("value z acc rms= %f", sensordata->acc.z.rms);
 8008f2c:	4b76      	ldr	r3, [pc, #472]	; (8009108 <comm_received+0x5e8>)
 8008f2e:	681c      	ldr	r4, [r3, #0]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f7 fb0f 	bl	8000558 <__aeabi_f2d>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	497a      	ldr	r1, [pc, #488]	; (8009128 <comm_received+0x608>)
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 fc07 	bl	8009754 <printf_debug>
	comm_printf_debug("value z acc peak= %f", sensordata->acc.z.peak);
 8008f46:	4b70      	ldr	r3, [pc, #448]	; (8009108 <comm_received+0x5e8>)
 8008f48:	681c      	ldr	r4, [r3, #0]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7f7 fb02 	bl	8000558 <__aeabi_f2d>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4974      	ldr	r1, [pc, #464]	; (800912c <comm_received+0x60c>)
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 fbfa 	bl	8009754 <printf_debug>
	comm_printf_debug("value z acc crest = %f", sensordata->acc.z.crest);
 8008f60:	4b69      	ldr	r3, [pc, #420]	; (8009108 <comm_received+0x5e8>)
 8008f62:	681c      	ldr	r4, [r3, #0]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7f7 faf5 	bl	8000558 <__aeabi_f2d>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	496f      	ldr	r1, [pc, #444]	; (8009130 <comm_received+0x610>)
 8008f74:	4620      	mov	r0, r4
 8008f76:	f000 fbed 	bl	8009754 <printf_debug>

	comm_printf_debug("value x velo rms= %f", sensordata->velo.x.rms);
 8008f7a:	4b63      	ldr	r3, [pc, #396]	; (8009108 <comm_received+0x5e8>)
 8008f7c:	681c      	ldr	r4, [r3, #0]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7f7 fae8 	bl	8000558 <__aeabi_f2d>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4969      	ldr	r1, [pc, #420]	; (8009134 <comm_received+0x614>)
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 fbe0 	bl	8009754 <printf_debug>
	comm_printf_debug("value x velo peak= %f", sensordata->velo.x.peak);
 8008f94:	4b5c      	ldr	r3, [pc, #368]	; (8009108 <comm_received+0x5e8>)
 8008f96:	681c      	ldr	r4, [r3, #0]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f7 fadb 	bl	8000558 <__aeabi_f2d>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4964      	ldr	r1, [pc, #400]	; (8009138 <comm_received+0x618>)
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 fbd3 	bl	8009754 <printf_debug>
	comm_printf_debug("value x velo crest= %f", sensordata->velo.x.crest);
 8008fae:	4b56      	ldr	r3, [pc, #344]	; (8009108 <comm_received+0x5e8>)
 8008fb0:	681c      	ldr	r4, [r3, #0]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7f7 face 	bl	8000558 <__aeabi_f2d>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	495e      	ldr	r1, [pc, #376]	; (800913c <comm_received+0x61c>)
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 fbc6 	bl	8009754 <printf_debug>
	comm_printf_debug("value y velo rms= %f", sensordata->velo.y.rms);
 8008fc8:	4b4f      	ldr	r3, [pc, #316]	; (8009108 <comm_received+0x5e8>)
 8008fca:	681c      	ldr	r4, [r3, #0]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7f7 fac1 	bl	8000558 <__aeabi_f2d>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4959      	ldr	r1, [pc, #356]	; (8009140 <comm_received+0x620>)
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fbb9 	bl	8009754 <printf_debug>
	comm_printf_debug("value y velo peak= %f", sensordata->velo.y.peak);
 8008fe2:	4b49      	ldr	r3, [pc, #292]	; (8009108 <comm_received+0x5e8>)
 8008fe4:	681c      	ldr	r4, [r3, #0]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f7 fab4 	bl	8000558 <__aeabi_f2d>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4953      	ldr	r1, [pc, #332]	; (8009144 <comm_received+0x624>)
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 fbac 	bl	8009754 <printf_debug>
	comm_printf_debug("value y velo crest= %f", sensordata->velo.y.crest);
 8008ffc:	4b42      	ldr	r3, [pc, #264]	; (8009108 <comm_received+0x5e8>)
 8008ffe:	681c      	ldr	r4, [r3, #0]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009004:	4618      	mov	r0, r3
 8009006:	f7f7 faa7 	bl	8000558 <__aeabi_f2d>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	494e      	ldr	r1, [pc, #312]	; (8009148 <comm_received+0x628>)
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fb9f 	bl	8009754 <printf_debug>
	comm_printf_debug("value z velo rms= %f", sensordata->velo.z.rms);
 8009016:	4b3c      	ldr	r3, [pc, #240]	; (8009108 <comm_received+0x5e8>)
 8009018:	681c      	ldr	r4, [r3, #0]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	4618      	mov	r0, r3
 8009020:	f7f7 fa9a 	bl	8000558 <__aeabi_f2d>
 8009024:	4602      	mov	r2, r0
 8009026:	460b      	mov	r3, r1
 8009028:	4948      	ldr	r1, [pc, #288]	; (800914c <comm_received+0x62c>)
 800902a:	4620      	mov	r0, r4
 800902c:	f000 fb92 	bl	8009754 <printf_debug>
	comm_printf_debug("value z velo peak= %f", sensordata->velo.z.peak);
 8009030:	4b35      	ldr	r3, [pc, #212]	; (8009108 <comm_received+0x5e8>)
 8009032:	681c      	ldr	r4, [r3, #0]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009038:	4618      	mov	r0, r3
 800903a:	f7f7 fa8d 	bl	8000558 <__aeabi_f2d>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4943      	ldr	r1, [pc, #268]	; (8009150 <comm_received+0x630>)
 8009044:	4620      	mov	r0, r4
 8009046:	f000 fb85 	bl	8009754 <printf_debug>
	comm_printf_debug("value z velo crest= %f", sensordata->velo.z.crest);
 800904a:	4b2f      	ldr	r3, [pc, #188]	; (8009108 <comm_received+0x5e8>)
 800904c:	681c      	ldr	r4, [r3, #0]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009052:	4618      	mov	r0, r3
 8009054:	f7f7 fa80 	bl	8000558 <__aeabi_f2d>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	493d      	ldr	r1, [pc, #244]	; (8009154 <comm_received+0x634>)
 800905e:	4620      	mov	r0, r4
 8009060:	f000 fb78 	bl	8009754 <printf_debug>

	comm_printf_debug("value x disp rms= %f", sensordata->disp.x.rms);
 8009064:	4b28      	ldr	r3, [pc, #160]	; (8009108 <comm_received+0x5e8>)
 8009066:	681c      	ldr	r4, [r3, #0]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800906c:	4618      	mov	r0, r3
 800906e:	f7f7 fa73 	bl	8000558 <__aeabi_f2d>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4938      	ldr	r1, [pc, #224]	; (8009158 <comm_received+0x638>)
 8009078:	4620      	mov	r0, r4
 800907a:	f000 fb6b 	bl	8009754 <printf_debug>
	comm_printf_debug("value x disp peak= %f", sensordata->disp.x.peak);
 800907e:	4b22      	ldr	r3, [pc, #136]	; (8009108 <comm_received+0x5e8>)
 8009080:	681c      	ldr	r4, [r3, #0]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009086:	4618      	mov	r0, r3
 8009088:	f7f7 fa66 	bl	8000558 <__aeabi_f2d>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4932      	ldr	r1, [pc, #200]	; (800915c <comm_received+0x63c>)
 8009092:	4620      	mov	r0, r4
 8009094:	f000 fb5e 	bl	8009754 <printf_debug>
	comm_printf_debug("value y disp rms= %f", sensordata->disp.y.rms);
 8009098:	4b1b      	ldr	r3, [pc, #108]	; (8009108 <comm_received+0x5e8>)
 800909a:	681c      	ldr	r4, [r3, #0]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7f7 fa59 	bl	8000558 <__aeabi_f2d>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	492d      	ldr	r1, [pc, #180]	; (8009160 <comm_received+0x640>)
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 fb51 	bl	8009754 <printf_debug>
	comm_printf_debug("value y disp peak= %f", sensordata->disp.y.peak);
 80090b2:	4b15      	ldr	r3, [pc, #84]	; (8009108 <comm_received+0x5e8>)
 80090b4:	681c      	ldr	r4, [r3, #0]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7f7 fa4c 	bl	8000558 <__aeabi_f2d>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4927      	ldr	r1, [pc, #156]	; (8009164 <comm_received+0x644>)
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 fb44 	bl	8009754 <printf_debug>
	comm_printf_debug("value z disp rms= %f", sensordata->disp.z.rms);
 80090cc:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <comm_received+0x5e8>)
 80090ce:	681c      	ldr	r4, [r3, #0]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7f7 fa3f 	bl	8000558 <__aeabi_f2d>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4922      	ldr	r1, [pc, #136]	; (8009168 <comm_received+0x648>)
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 fb37 	bl	8009754 <printf_debug>
	comm_printf_debug("value z disp peak= %f", sensordata->disp.z.peak);
 80090e6:	4b08      	ldr	r3, [pc, #32]	; (8009108 <comm_received+0x5e8>)
 80090e8:	681c      	ldr	r4, [r3, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7f7 fa32 	bl	8000558 <__aeabi_f2d>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	491c      	ldr	r1, [pc, #112]	; (800916c <comm_received+0x64c>)
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 fb2a 	bl	8009754 <printf_debug>
////			comm_send(last_message);
//		}
//	}else{
//		//ERR
//	}
}
 8009100:	bf00      	nop
 8009102:	372c      	adds	r7, #44	; 0x2c
 8009104:	46bd      	mov	sp, r7
 8009106:	bd90      	pop	{r4, r7, pc}
 8009108:	2000001c 	.word	0x2000001c
 800910c:	0800dd54 	.word	0x0800dd54
 8009110:	0800dd6c 	.word	0x0800dd6c
 8009114:	0800dd84 	.word	0x0800dd84
 8009118:	0800dd9c 	.word	0x0800dd9c
 800911c:	0800ddb4 	.word	0x0800ddb4
 8009120:	0800ddcc 	.word	0x0800ddcc
 8009124:	0800dde4 	.word	0x0800dde4
 8009128:	0800ddfc 	.word	0x0800ddfc
 800912c:	0800de10 	.word	0x0800de10
 8009130:	0800de28 	.word	0x0800de28
 8009134:	0800de40 	.word	0x0800de40
 8009138:	0800de58 	.word	0x0800de58
 800913c:	0800de70 	.word	0x0800de70
 8009140:	0800de88 	.word	0x0800de88
 8009144:	0800dea0 	.word	0x0800dea0
 8009148:	0800deb8 	.word	0x0800deb8
 800914c:	0800ded0 	.word	0x0800ded0
 8009150:	0800dee8 	.word	0x0800dee8
 8009154:	0800df00 	.word	0x0800df00
 8009158:	0800df18 	.word	0x0800df18
 800915c:	0800df30 	.word	0x0800df30
 8009160:	0800df48 	.word	0x0800df48
 8009164:	0800df60 	.word	0x0800df60
 8009168:	0800df78 	.word	0x0800df78
 800916c:	0800df90 	.word	0x0800df90
 8009170:	00120012 	.word	0x00120012
 8009174:	3f220012 	.word	0x3f220012
 8009178:	c012c013 	.word	0xc012c013
 800917c:	3f72c012 	.word	0x3f72c012

08009180 <comm_send>:

void comm_send(uint8_t * data,uint8_t len,uint8_t destination)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
 800918c:	4613      	mov	r3, r2
 800918e:	70bb      	strb	r3, [r7, #2]
	SpiritPktBasicSetDestinationAddress(destination);
 8009190:	78bb      	ldrb	r3, [r7, #2]
 8009192:	4618      	mov	r0, r3
 8009194:	f7f9 fc2a 	bl	80029ec <SpiritPktCommonSetDestinationAddress>
	SPSGRF_StartTx(data,len);
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fc87 	bl	8009ab0 <SPSGRF_StartTx>
	memcpy(last_message, data , len);
 80091a2:	78fb      	ldrb	r3, [r7, #3]
 80091a4:	461a      	mov	r2, r3
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4803      	ldr	r0, [pc, #12]	; (80091b8 <comm_send+0x38>)
 80091aa:	f001 fda7 	bl	800acfc <memcpy>
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	200003b0 	.word	0x200003b0

080091bc <comm_encrypt>:

uint8_t comm_encrypt(uint8_t *data, uint8_t len ,uint8_t *enc_data)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b0bc      	sub	sp, #240	; 0xf0
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	460b      	mov	r3, r1
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	72fb      	strb	r3, [r7, #11]
	char temp[100];
	char str[100];
	uint8_t i = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	uint8_t blocks = 0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	uint8_t cur_block =0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	uint8_t rest = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	if(len > 16)
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	2b10      	cmp	r3, #16
 80091e6:	f240 80b3 	bls.w	8009350 <comm_encrypt+0x194>
	{
		blocks = len/16;
 80091ea:	7afb      	ldrb	r3, [r7, #11]
 80091ec:	091b      	lsrs	r3, r3, #4
 80091ee:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		while(1)
		{
			SpiritAesWriteDataIn(data , 16);
 80091f2:	2110      	movs	r1, #16
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7f8 fccf 	bl	8001b98 <SpiritAesWriteDataIn>
			SpiritAesExecuteEncryption();
 80091fa:	f7f8 fd79 	bl	8001cf0 <SpiritAesExecuteEncryption>
			while(!irqStatus.IRQ_AES_END);
 80091fe:	bf00      	nop
 8009200:	4b7e      	ldr	r3, [pc, #504]	; (80093fc <comm_encrypt+0x240>)
 8009202:	78db      	ldrb	r3, [r3, #3]
 8009204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0f8      	beq.n	8009200 <comm_encrypt+0x44>
			SpiritAesReadDataOut(enc_data , 16);
 800920e:	2110      	movs	r1, #16
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7f8 fd03 	bl	8001c1c <SpiritAesReadDataOut>

			strcpy(temp, "data enc:");
 8009216:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800921a:	4a79      	ldr	r2, [pc, #484]	; (8009400 <comm_encrypt+0x244>)
 800921c:	ca07      	ldmia	r2, {r0, r1, r2}
 800921e:	c303      	stmia	r3!, {r0, r1}
 8009220:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i<16; i++)
 8009222:	2300      	movs	r3, #0
 8009224:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009228:	e018      	b.n	800925c <comm_encrypt+0xa0>
			{
				sprintf(str,"%02X", enc_data[i]);
 800922a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	4413      	add	r3, r2
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	f107 0314 	add.w	r3, r7, #20
 800923a:	4972      	ldr	r1, [pc, #456]	; (8009404 <comm_encrypt+0x248>)
 800923c:	4618      	mov	r0, r3
 800923e:	f002 f9dd 	bl	800b5fc <siprintf>
				strcat(temp,str);
 8009242:	f107 0214 	add.w	r2, r7, #20
 8009246:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800924a:	4611      	mov	r1, r2
 800924c:	4618      	mov	r0, r3
 800924e:	f002 f9f5 	bl	800b63c <strcat>
			for(int i = 0; i<16; i++)
 8009252:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009256:	3301      	adds	r3, #1
 8009258:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800925c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009260:	2b0f      	cmp	r3, #15
 8009262:	dde2      	ble.n	800922a <comm_encrypt+0x6e>
			}
			comm_print_debug(temp);
 8009264:	4b68      	ldr	r3, [pc, #416]	; (8009408 <comm_encrypt+0x24c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800926c:	4611      	mov	r1, r2
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fa08 	bl	8009684 <print_debug>
			data = data +16;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3310      	adds	r3, #16
 8009278:	60fb      	str	r3, [r7, #12]
			enc_data = enc_data + 16;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3310      	adds	r3, #16
 800927e:	607b      	str	r3, [r7, #4]
			i = i+ 16;
 8009280:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8009284:	3310      	adds	r3, #16
 8009286:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			cur_block++;
 800928a:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800928e:	3301      	adds	r3, #1
 8009290:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
			if(cur_block >= blocks)
 8009294:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 8009298:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800929c:	429a      	cmp	r2, r3
 800929e:	d3a8      	bcc.n	80091f2 <comm_encrypt+0x36>
			{
				rest = len % 16;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	f003 030f 	and.w	r3, r3, #15
 80092a6:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
				if(rest)
 80092aa:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 809d 	beq.w	80093ee <comm_encrypt+0x232>
				{
					SpiritAesWriteDataIn(data , rest);
 80092b4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80092b8:	4619      	mov	r1, r3
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7f8 fc6c 	bl	8001b98 <SpiritAesWriteDataIn>
					SpiritAesExecuteEncryption();
 80092c0:	f7f8 fd16 	bl	8001cf0 <SpiritAesExecuteEncryption>
					while(!irqStatus.IRQ_AES_END);
 80092c4:	bf00      	nop
 80092c6:	4b4d      	ldr	r3, [pc, #308]	; (80093fc <comm_encrypt+0x240>)
 80092c8:	78db      	ldrb	r3, [r3, #3]
 80092ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d0f8      	beq.n	80092c6 <comm_encrypt+0x10a>
					SpiritAesReadDataOut(enc_data , 16);
 80092d4:	2110      	movs	r1, #16
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7f8 fca0 	bl	8001c1c <SpiritAesReadDataOut>

					strcpy(temp, "data enc:");
 80092dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80092e0:	4a47      	ldr	r2, [pc, #284]	; (8009400 <comm_encrypt+0x244>)
 80092e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80092e4:	c303      	stmia	r3!, {r0, r1}
 80092e6:	801a      	strh	r2, [r3, #0]
					for(int i = 0; i<16; i++){
 80092e8:	2300      	movs	r3, #0
 80092ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092ee:	e018      	b.n	8009322 <comm_encrypt+0x166>
						sprintf(str,"%02X", enc_data[i]);
 80092f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	4413      	add	r3, r2
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	f107 0314 	add.w	r3, r7, #20
 8009300:	4940      	ldr	r1, [pc, #256]	; (8009404 <comm_encrypt+0x248>)
 8009302:	4618      	mov	r0, r3
 8009304:	f002 f97a 	bl	800b5fc <siprintf>
						strcat(temp,str);
 8009308:	f107 0214 	add.w	r2, r7, #20
 800930c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009310:	4611      	mov	r1, r2
 8009312:	4618      	mov	r0, r3
 8009314:	f002 f992 	bl	800b63c <strcat>
					for(int i = 0; i<16; i++){
 8009318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800931c:	3301      	adds	r3, #1
 800931e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009326:	2b0f      	cmp	r3, #15
 8009328:	dde2      	ble.n	80092f0 <comm_encrypt+0x134>
					}
					comm_print_debug(temp);
 800932a:	4b37      	ldr	r3, [pc, #220]	; (8009408 <comm_encrypt+0x24c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f000 f9a5 	bl	8009684 <print_debug>
					//enc_data = enc_data +16;
					blocks++;
 800933a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800933e:	3301      	adds	r3, #1
 8009340:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
					i = i+ 16;
 8009344:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8009348:	3310      	adds	r3, #16
 800934a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				}
				break;
 800934e:	e04e      	b.n	80093ee <comm_encrypt+0x232>
			}

		}
	}else
	{
		SpiritAesWriteDataIn(data , len);
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	4619      	mov	r1, r3
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f7f8 fc1f 	bl	8001b98 <SpiritAesWriteDataIn>
		SpiritAesExecuteEncryption();
 800935a:	f7f8 fcc9 	bl	8001cf0 <SpiritAesExecuteEncryption>
		while(!irqStatus.IRQ_AES_END);
 800935e:	bf00      	nop
 8009360:	4b26      	ldr	r3, [pc, #152]	; (80093fc <comm_encrypt+0x240>)
 8009362:	78db      	ldrb	r3, [r3, #3]
 8009364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0f8      	beq.n	8009360 <comm_encrypt+0x1a4>
		SpiritAesReadDataOut(enc_data , 16);
 800936e:	2110      	movs	r1, #16
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7f8 fc53 	bl	8001c1c <SpiritAesReadDataOut>
		comm_printf_debug("test %d",len);
 8009376:	4b24      	ldr	r3, [pc, #144]	; (8009408 <comm_encrypt+0x24c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	7afa      	ldrb	r2, [r7, #11]
 800937c:	4923      	ldr	r1, [pc, #140]	; (800940c <comm_encrypt+0x250>)
 800937e:	4618      	mov	r0, r3
 8009380:	f000 f9e8 	bl	8009754 <printf_debug>
		strcpy(temp, "data enc:");
 8009384:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009388:	4a1d      	ldr	r2, [pc, #116]	; (8009400 <comm_encrypt+0x244>)
 800938a:	ca07      	ldmia	r2, {r0, r1, r2}
 800938c:	c303      	stmia	r3!, {r0, r1}
 800938e:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i<16; i++)
 8009390:	2300      	movs	r3, #0
 8009392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009396:	e018      	b.n	80093ca <comm_encrypt+0x20e>
		{
			sprintf(str,"%X", enc_data[i]);
 8009398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	4413      	add	r3, r2
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f107 0314 	add.w	r3, r7, #20
 80093a8:	4919      	ldr	r1, [pc, #100]	; (8009410 <comm_encrypt+0x254>)
 80093aa:	4618      	mov	r0, r3
 80093ac:	f002 f926 	bl	800b5fc <siprintf>
			strcat(temp,str);
 80093b0:	f107 0214 	add.w	r2, r7, #20
 80093b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f002 f93e 	bl	800b63c <strcat>
		for(int i = 0; i<16; i++)
 80093c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c4:	3301      	adds	r3, #1
 80093c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ce:	2b0f      	cmp	r3, #15
 80093d0:	dde2      	ble.n	8009398 <comm_encrypt+0x1dc>
		}
		i = i+ 16;
 80093d2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80093d6:	3310      	adds	r3, #16
 80093d8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		comm_print_debug(temp);
 80093dc:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <comm_encrypt+0x24c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f94c 	bl	8009684 <print_debug>
 80093ec:	e000      	b.n	80093f0 <comm_encrypt+0x234>
				break;
 80093ee:	bf00      	nop
	}
	return i;
 80093f0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	37f0      	adds	r7, #240	; 0xf0
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	200003ac 	.word	0x200003ac
 8009400:	0800dfa8 	.word	0x0800dfa8
 8009404:	0800dfb4 	.word	0x0800dfb4
 8009408:	2000001c 	.word	0x2000001c
 800940c:	0800dfbc 	.word	0x0800dfbc
 8009410:	0800dfc4 	.word	0x0800dfc4

08009414 <comm_decrypt>:

void comm_decrypt(uint8_t *data,uint8_t *_data)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b0ea      	sub	sp, #424	; 0x1a8
 8009418:	af00      	add	r7, sp, #0
 800941a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800941e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8009422:	6018      	str	r0, [r3, #0]
 8009424:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8009428:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800942c:	6019      	str	r1, [r3, #0]
	uint8_t len;
	uint8_t rxdata[96];
	uint8_t blocks = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint8_t cur_block =0;
 8009434:	2300      	movs	r3, #0
 8009436:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	uint8_t rest = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
	uint8_t *enc_data = &rxdata[0];
 8009440:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009444:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	len=SpiritLinearFifoReadNumElementsRxFifo();
 8009448:	f7f8 fe74 	bl	8002134 <SpiritLinearFifoReadNumElementsRxFifo>
 800944c:	4603      	mov	r3, r0
 800944e:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
	SPSGRF_GetRxData(rxdata);
 8009452:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fb57 	bl	8009b0a <SPSGRF_GetRxData>

	int i =0;
 800945c:	2300      	movs	r3, #0
 800945e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	char temp[150];
	char str[150];
//	len = 64;
	if(len>16)
 8009462:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8009466:	2b10      	cmp	r3, #16
 8009468:	f240 809d 	bls.w	80095a6 <comm_decrypt+0x192>
	{
		blocks = len/16;
 800946c:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8009470:	091b      	lsrs	r3, r3, #4
 8009472:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		while(1)
		{
			SpiritAesWriteDataIn(enc_data , 16);
 8009476:	2110      	movs	r1, #16
 8009478:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800947c:	f7f8 fb8c 	bl	8001b98 <SpiritAesWriteDataIn>
			SpiritAesDeriveDecKeyExecuteDec();
 8009480:	f7f8 fc48 	bl	8001d14 <SpiritAesDeriveDecKeyExecuteDec>
			while(!irqStatus.IRQ_AES_END);
 8009484:	bf00      	nop
 8009486:	4b75      	ldr	r3, [pc, #468]	; (800965c <comm_decrypt+0x248>)
 8009488:	78db      	ldrb	r3, [r3, #3]
 800948a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0f8      	beq.n	8009486 <comm_decrypt+0x72>
			SpiritAesReadDataOut(data , 16);
 8009494:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8009498:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800949c:	2110      	movs	r1, #16
 800949e:	6818      	ldr	r0, [r3, #0]
 80094a0:	f7f8 fbbc 	bl	8001c1c <SpiritAesReadDataOut>
			memset(temp,0, 100);
 80094a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80094a8:	2264      	movs	r2, #100	; 0x64
 80094aa:	2100      	movs	r1, #0
 80094ac:	4618      	mov	r0, r3
 80094ae:	f001 fc33 	bl	800ad18 <memset>
			strcpy(temp, "data decr:");
 80094b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80094b6:	4a6a      	ldr	r2, [pc, #424]	; (8009660 <comm_decrypt+0x24c>)
 80094b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80094ba:	c303      	stmia	r3!, {r0, r1}
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	3302      	adds	r3, #2
 80094c0:	0c12      	lsrs	r2, r2, #16
 80094c2:	701a      	strb	r2, [r3, #0]
			for(i = 0; i<16; i++)
 80094c4:	2300      	movs	r3, #0
 80094c6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80094ca:	e01c      	b.n	8009506 <comm_decrypt+0xf2>
			{
				sprintf(str,"%02x", data[i]);
 80094cc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80094d0:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80094d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80094d8:	6812      	ldr	r2, [r2, #0]
 80094da:	4413      	add	r3, r2
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f107 0308 	add.w	r3, r7, #8
 80094e4:	495f      	ldr	r1, [pc, #380]	; (8009664 <comm_decrypt+0x250>)
 80094e6:	4618      	mov	r0, r3
 80094e8:	f002 f888 	bl	800b5fc <siprintf>
				strcat(temp,str);
 80094ec:	f107 0208 	add.w	r2, r7, #8
 80094f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80094f4:	4611      	mov	r1, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f002 f8a0 	bl	800b63c <strcat>
			for(i = 0; i<16; i++)
 80094fc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009500:	3301      	adds	r3, #1
 8009502:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8009506:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800950a:	2b0f      	cmp	r3, #15
 800950c:	ddde      	ble.n	80094cc <comm_decrypt+0xb8>
			}
			comm_print_debug(temp);
 800950e:	4b56      	ldr	r3, [pc, #344]	; (8009668 <comm_decrypt+0x254>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f000 f8b3 	bl	8009684 <print_debug>
			data = data + 16;
 800951e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8009522:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8009526:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 800952a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800952e:	6812      	ldr	r2, [r2, #0]
 8009530:	3210      	adds	r2, #16
 8009532:	601a      	str	r2, [r3, #0]
			enc_data = enc_data + 16;
 8009534:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009538:	3310      	adds	r3, #16
 800953a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			cur_block++;
 800953e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8009542:	3301      	adds	r3, #1
 8009544:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			if(cur_block >= blocks)
 8009548:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 800954c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8009550:	429a      	cmp	r2, r3
 8009552:	d390      	bcc.n	8009476 <comm_decrypt+0x62>
			{
				rest = len%16;
 8009554:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
				if(rest)
 8009560:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8009564:	2b00      	cmp	r3, #0
 8009566:	d073      	beq.n	8009650 <comm_decrypt+0x23c>
				{
					SpiritAesWriteDataIn(enc_data , rest);
 8009568:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800956c:	4619      	mov	r1, r3
 800956e:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8009572:	f7f8 fb11 	bl	8001b98 <SpiritAesWriteDataIn>
					SpiritAesDeriveDecKeyExecuteDec();
 8009576:	f7f8 fbcd 	bl	8001d14 <SpiritAesDeriveDecKeyExecuteDec>
					while(!irqStatus.IRQ_AES_END);
 800957a:	bf00      	nop
 800957c:	4b37      	ldr	r3, [pc, #220]	; (800965c <comm_decrypt+0x248>)
 800957e:	78db      	ldrb	r3, [r3, #3]
 8009580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0f8      	beq.n	800957c <comm_decrypt+0x168>
					SpiritAesReadDataOut(data , 16);
 800958a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800958e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8009592:	2110      	movs	r1, #16
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	f7f8 fb41 	bl	8001c1c <SpiritAesReadDataOut>
					blocks++;
 800959a:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800959e:	3301      	adds	r3, #1
 80095a0:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
				}
				break;
 80095a4:	e054      	b.n	8009650 <comm_decrypt+0x23c>
			}
		}
	}else
	{
		SpiritAesWriteDataIn(enc_data, 16);
 80095a6:	2110      	movs	r1, #16
 80095a8:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80095ac:	f7f8 faf4 	bl	8001b98 <SpiritAesWriteDataIn>
		SpiritAesDeriveDecKeyExecuteDec();
 80095b0:	f7f8 fbb0 	bl	8001d14 <SpiritAesDeriveDecKeyExecuteDec>
		while(!irqStatus.IRQ_AES_END);
 80095b4:	bf00      	nop
 80095b6:	4b29      	ldr	r3, [pc, #164]	; (800965c <comm_decrypt+0x248>)
 80095b8:	78db      	ldrb	r3, [r3, #3]
 80095ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0f8      	beq.n	80095b6 <comm_decrypt+0x1a2>

		SpiritAesReadDataOut(data , 13);
 80095c4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80095c8:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80095cc:	210d      	movs	r1, #13
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	f7f8 fb24 	bl	8001c1c <SpiritAesReadDataOut>
		memset(temp,0, 50);
 80095d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80095d8:	2232      	movs	r2, #50	; 0x32
 80095da:	2100      	movs	r1, #0
 80095dc:	4618      	mov	r0, r3
 80095de:	f001 fb9b 	bl	800ad18 <memset>
		strcpy(temp, "data decr:");
 80095e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80095e6:	4a1e      	ldr	r2, [pc, #120]	; (8009660 <comm_decrypt+0x24c>)
 80095e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80095ea:	c303      	stmia	r3!, {r0, r1}
 80095ec:	801a      	strh	r2, [r3, #0]
 80095ee:	3302      	adds	r3, #2
 80095f0:	0c12      	lsrs	r2, r2, #16
 80095f2:	701a      	strb	r2, [r3, #0]
		for(i = 0; i<16; i++)
 80095f4:	2300      	movs	r3, #0
 80095f6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80095fa:	e01c      	b.n	8009636 <comm_decrypt+0x222>
		{
			sprintf(str,"%02x", data[i]);
 80095fc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009600:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8009604:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009608:	6812      	ldr	r2, [r2, #0]
 800960a:	4413      	add	r3, r2
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	f107 0308 	add.w	r3, r7, #8
 8009614:	4913      	ldr	r1, [pc, #76]	; (8009664 <comm_decrypt+0x250>)
 8009616:	4618      	mov	r0, r3
 8009618:	f001 fff0 	bl	800b5fc <siprintf>
			strcat(temp,str);
 800961c:	f107 0208 	add.w	r2, r7, #8
 8009620:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f002 f808 	bl	800b63c <strcat>
		for(i = 0; i<16; i++)
 800962c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8009630:	3301      	adds	r3, #1
 8009632:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8009636:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800963a:	2b0f      	cmp	r3, #15
 800963c:	ddde      	ble.n	80095fc <comm_decrypt+0x1e8>
		}
		comm_print_debug(temp);
 800963e:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <comm_decrypt+0x254>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f000 f81b 	bl	8009684 <print_debug>
	}
	#ifdef DEBUG_ENCRYPTION

	#endif
}
 800964e:	e000      	b.n	8009652 <comm_decrypt+0x23e>
				break;
 8009650:	bf00      	nop
}
 8009652:	bf00      	nop
 8009654:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	200003ac 	.word	0x200003ac
 8009660:	0800dfc8 	.word	0x0800dfc8
 8009664:	0800dd4c 	.word	0x0800dd4c
 8009668:	2000001c 	.word	0x2000001c

0800966c <comm_start>:

void comm_start(){
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
	SPSGRF_Init();
 8009670:	f000 f8ee 	bl	8009850 <SPSGRF_Init>
	SpiritAesWriteKey(c.key);
 8009674:	4802      	ldr	r0, [pc, #8]	; (8009680 <comm_start+0x14>)
 8009676:	f7f8 fb0d 	bl	8001c94 <SpiritAesWriteKey>
	//mesh_init();
}
 800967a:	bf00      	nop
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	20000399 	.word	0x20000399

08009684 <print_debug>:

char debug_level = DBL_DEFAULT;

#ifdef ENABLE_DEBUG

void print_debug(const char *module, const char *text){
 8009684:	b580      	push	{r7, lr}
 8009686:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 800968a:	af00      	add	r7, sp, #0
 800968c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8009690:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8009694:	6018      	str	r0, [r3, #0]
 8009696:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800969a:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800969e:	6019      	str	r1, [r3, #0]
	char tmp_debug[1000]="";
 80096a0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80096a4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	3304      	adds	r3, #4
 80096ae:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80096b2:	2100      	movs	r1, #0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 fb2f 	bl	800ad18 <memset>
	strcat(tmp_debug, module);
 80096ba:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80096be:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80096c2:	f107 0208 	add.w	r2, r7, #8
 80096c6:	6819      	ldr	r1, [r3, #0]
 80096c8:	4610      	mov	r0, r2
 80096ca:	f001 ffb7 	bl	800b63c <strcat>
	strcat(tmp_debug,":\t");
 80096ce:	f107 0308 	add.w	r3, r7, #8
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f6 fd84 	bl	80001e0 <strlen>
 80096d8:	4603      	mov	r3, r0
 80096da:	461a      	mov	r2, r3
 80096dc:	f107 0308 	add.w	r3, r7, #8
 80096e0:	4413      	add	r3, r2
 80096e2:	4a19      	ldr	r2, [pc, #100]	; (8009748 <print_debug+0xc4>)
 80096e4:	8811      	ldrh	r1, [r2, #0]
 80096e6:	7892      	ldrb	r2, [r2, #2]
 80096e8:	8019      	strh	r1, [r3, #0]
 80096ea:	709a      	strb	r2, [r3, #2]
	strcat(tmp_debug,text);
 80096ec:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80096f0:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 80096f4:	f107 0208 	add.w	r2, r7, #8
 80096f8:	6819      	ldr	r1, [r3, #0]
 80096fa:	4610      	mov	r0, r2
 80096fc:	f001 ff9e 	bl	800b63c <strcat>
	strcat(tmp_debug,"\r\n");
 8009700:	f107 0308 	add.w	r3, r7, #8
 8009704:	4618      	mov	r0, r3
 8009706:	f7f6 fd6b 	bl	80001e0 <strlen>
 800970a:	4603      	mov	r3, r0
 800970c:	461a      	mov	r2, r3
 800970e:	f107 0308 	add.w	r3, r7, #8
 8009712:	4413      	add	r3, r2
 8009714:	4a0d      	ldr	r2, [pc, #52]	; (800974c <print_debug+0xc8>)
 8009716:	8811      	ldrh	r1, [r2, #0]
 8009718:	7892      	ldrb	r2, [r2, #2]
 800971a:	8019      	strh	r1, [r3, #0]
 800971c:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*) tmp_debug, strlen(tmp_debug), 100);
 800971e:	f107 0308 	add.w	r3, r7, #8
 8009722:	4618      	mov	r0, r3
 8009724:	f7f6 fd5c 	bl	80001e0 <strlen>
 8009728:	4603      	mov	r3, r0
 800972a:	b29a      	uxth	r2, r3
 800972c:	f107 0108 	add.w	r1, r7, #8
 8009730:	2364      	movs	r3, #100	; 0x64
 8009732:	4807      	ldr	r0, [pc, #28]	; (8009750 <print_debug+0xcc>)
 8009734:	f7fe fc6f 	bl	8008016 <HAL_UART_Transmit>
	HAL_Delay(100);
 8009738:	2064      	movs	r0, #100	; 0x64
 800973a:	f7fa fe43 	bl	80043c4 <HAL_Delay>
}
 800973e:	bf00      	nop
 8009740:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	0800dfd4 	.word	0x0800dfd4
 800974c:	0800dfd8 	.word	0x0800dfd8
 8009750:	20000350 	.word	0x20000350

08009754 <printf_debug>:

void printf_debug(const char *module, const char *text, ...){
 8009754:	b40e      	push	{r1, r2, r3}
 8009756:	b580      	push	{r7, lr}
 8009758:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 800975c:	af00      	add	r7, sp, #0
 800975e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8009762:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8009766:	6018      	str	r0, [r3, #0]
	char tmp_debug[1000]="";
 8009768:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800976c:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8009770:	2200      	movs	r2, #0
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	3304      	adds	r3, #4
 8009776:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800977a:	2100      	movs	r1, #0
 800977c:	4618      	mov	r0, r3
 800977e:	f001 facb 	bl	800ad18 <memset>
	strcat(tmp_debug, module);
 8009782:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8009786:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800978a:	f107 020c 	add.w	r2, r7, #12
 800978e:	6819      	ldr	r1, [r3, #0]
 8009790:	4610      	mov	r0, r2
 8009792:	f001 ff53 	bl	800b63c <strcat>
	strcat(tmp_debug,":\t");
 8009796:	f107 030c 	add.w	r3, r7, #12
 800979a:	4618      	mov	r0, r3
 800979c:	f7f6 fd20 	bl	80001e0 <strlen>
 80097a0:	4603      	mov	r3, r0
 80097a2:	461a      	mov	r2, r3
 80097a4:	f107 030c 	add.w	r3, r7, #12
 80097a8:	4413      	add	r3, r2
 80097aa:	4a26      	ldr	r2, [pc, #152]	; (8009844 <printf_debug+0xf0>)
 80097ac:	8811      	ldrh	r1, [r2, #0]
 80097ae:	7892      	ldrb	r2, [r2, #2]
 80097b0:	8019      	strh	r1, [r3, #0]
 80097b2:	709a      	strb	r2, [r3, #2]
	size_t len = strlen(tmp_debug);
 80097b4:	f107 030c 	add.w	r3, r7, #12
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7f6 fd11 	bl	80001e0 <strlen>
 80097be:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	va_list arglist;
	va_start(arglist, text);
 80097c2:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 80097c6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80097ca:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 80097ce:	601a      	str	r2, [r3, #0]
	vsnprintf(tmp_debug + len, 1000 - len, text, arglist);
 80097d0:	f107 020c 	add.w	r2, r7, #12
 80097d4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80097d8:	18d0      	adds	r0, r2, r3
 80097da:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80097de:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 80097e2:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80097e6:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 80097f0:	f001 ff5e 	bl	800b6b0 <vsniprintf>
	va_end(arglist);
	strcat(tmp_debug,"\r\n");
 80097f4:	f107 030c 	add.w	r3, r7, #12
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7f6 fcf1 	bl	80001e0 <strlen>
 80097fe:	4603      	mov	r3, r0
 8009800:	461a      	mov	r2, r3
 8009802:	f107 030c 	add.w	r3, r7, #12
 8009806:	4413      	add	r3, r2
 8009808:	4a0f      	ldr	r2, [pc, #60]	; (8009848 <printf_debug+0xf4>)
 800980a:	8811      	ldrh	r1, [r2, #0]
 800980c:	7892      	ldrb	r2, [r2, #2]
 800980e:	8019      	strh	r1, [r3, #0]
 8009810:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*) tmp_debug, strlen(tmp_debug), 100);
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	4618      	mov	r0, r3
 8009818:	f7f6 fce2 	bl	80001e0 <strlen>
 800981c:	4603      	mov	r3, r0
 800981e:	b29a      	uxth	r2, r3
 8009820:	f107 010c 	add.w	r1, r7, #12
 8009824:	2364      	movs	r3, #100	; 0x64
 8009826:	4809      	ldr	r0, [pc, #36]	; (800984c <printf_debug+0xf8>)
 8009828:	f7fe fbf5 	bl	8008016 <HAL_UART_Transmit>
	HAL_Delay(100);
 800982c:	2064      	movs	r0, #100	; 0x64
 800982e:	f7fa fdc9 	bl	80043c4 <HAL_Delay>
}
 8009832:	bf00      	nop
 8009834:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 8009838:	46bd      	mov	sp, r7
 800983a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800983e:	b003      	add	sp, #12
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	0800dfd4 	.word	0x0800dfd4
 8009848:	0800dfd8 	.word	0x0800dfd8
 800984c:	20000350 	.word	0x20000350

08009850 <SPSGRF_Init>:
* @retval None
*/
const char *spsgrfmod = "SPSGRF";
#define spsgrf_print_debug(str) print_debug(spsgrfmod, str)
void SPSGRF_Init(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b0a8      	sub	sp, #160	; 0xa0
 8009854:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 8009856:	f7fa fbb1 	bl	8003fbc <RadioSpiInit>

  // restart the radio
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Booting module");
 800985a:	4b85      	ldr	r3, [pc, #532]	; (8009a70 <SPSGRF_Init+0x220>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4985      	ldr	r1, [pc, #532]	; (8009a74 <SPSGRF_Init+0x224>)
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff ff0f 	bl	8009684 <print_debug>
#endif
  SpiritEnterShutdown();
 8009866:	f7fa fd21 	bl	80042ac <RadioEnterShutdown>
  SpiritExitShutdown();
 800986a:	f7fa fd2b 	bl	80042c4 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 800986e:	f7f8 fea7 	bl	80025c0 <SpiritManagementWaExtraCurrent>
  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 8009872:	2300      	movs	r3, #0
 8009874:	70fb      	strb	r3, [r7, #3]
 8009876:	e004      	b.n	8009882 <SPSGRF_Init+0x32>
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	b2db      	uxtb	r3, r3
 800987c:	3301      	adds	r3, #1
 800987e:	b2db      	uxtb	r3, r3
 8009880:	70fb      	strb	r3, [r7, #3]
 8009882:	78fb      	ldrb	r3, [r7, #3]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2bff      	cmp	r3, #255	; 0xff
 8009888:	d1f6      	bne.n	8009878 <SPSGRF_Init+0x28>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 800988a:	f7fa fb75 	bl	8003f78 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 800988e:	4b7a      	ldr	r3, [pc, #488]	; (8009a78 <SPSGRF_Init+0x228>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b03      	cmp	r3, #3
 800989a:	d1ea      	bne.n	8009872 <SPSGRF_Init+0x22>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Initialize radio RF parameters");
 800989c:	4b74      	ldr	r3, [pc, #464]	; (8009a70 <SPSGRF_Init+0x220>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4976      	ldr	r1, [pc, #472]	; (8009a7c <SPSGRF_Init+0x22c>)
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7ff feee 	bl	8009684 <print_debug>
  char tmp[100];
  sprintf(tmp, "Setting frequency to %f",BASE_FREQUENCY);
 80098a8:	1d38      	adds	r0, r7, #4
 80098aa:	a36f      	add	r3, pc, #444	; (adr r3, 8009a68 <SPSGRF_Init+0x218>)
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	4973      	ldr	r1, [pc, #460]	; (8009a80 <SPSGRF_Init+0x230>)
 80098b2:	f001 fea3 	bl	800b5fc <siprintf>
  spsgrf_print_debug(tmp);
 80098b6:	4b6e      	ldr	r3, [pc, #440]	; (8009a70 <SPSGRF_Init+0x220>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	1d3a      	adds	r2, r7, #4
 80098bc:	4611      	mov	r1, r2
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff fee0 	bl	8009684 <print_debug>
  sprintf(tmp, "Setting baudrate to %d",DATARATE);
 80098c4:	1d3b      	adds	r3, r7, #4
 80098c6:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80098ca:	496e      	ldr	r1, [pc, #440]	; (8009a84 <SPSGRF_Init+0x234>)
 80098cc:	4618      	mov	r0, r3
 80098ce:	f001 fe95 	bl	800b5fc <siprintf>
    spsgrf_print_debug(tmp);
 80098d2:	4b67      	ldr	r3, [pc, #412]	; (8009a70 <SPSGRF_Init+0x220>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	1d3a      	adds	r2, r7, #4
 80098d8:	4611      	mov	r1, r2
 80098da:	4618      	mov	r0, r3
 80098dc:	f7ff fed2 	bl	8009684 <print_debug>
#endif
  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 80098e0:	2300      	movs	r3, #0
 80098e2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 80098e6:	4b68      	ldr	r3, [pc, #416]	; (8009a88 <SPSGRF_Init+0x238>)
 80098e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 80098ec:	4b67      	ldr	r3, [pc, #412]	; (8009a8c <SPSGRF_Init+0x23c>)
 80098ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 80098f2:	2300      	movs	r3, #0
 80098f4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 80098f8:	2300      	movs	r3, #0
 80098fa:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  xRadioInit.lDatarate = DATARATE;
 80098fe:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8009902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8009906:	f644 6320 	movw	r3, #20000	; 0x4e20
 800990a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  xRadioInit.lBandwidth = BANDWIDTH;
 800990e:	4b5f      	ldr	r3, [pc, #380]	; (8009a8c <SPSGRF_Init+0x23c>)
 8009910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8009914:	485e      	ldr	r0, [pc, #376]	; (8009a90 <SPSGRF_Init+0x240>)
 8009916:	f7fa fabd 	bl	8003e94 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 800991a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800991e:	4618      	mov	r0, r3
 8009920:	f7f9 f90a 	bl	8002b38 <SpiritRadioInit>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Setting power level");
 8009924:	4b52      	ldr	r3, [pc, #328]	; (8009a70 <SPSGRF_Init+0x220>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	495a      	ldr	r1, [pc, #360]	; (8009a94 <SPSGRF_Init+0x244>)
 800992a:	4618      	mov	r0, r3
 800992c:	f7ff feaa 	bl	8009684 <print_debug>
#endif
  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8009930:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8009a98 <SPSGRF_Init+0x248>
 8009934:	2007      	movs	r0, #7
 8009936:	f7fa f949 	bl	8003bcc <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 800993a:	2007      	movs	r0, #7
 800993c:	f7fa f99c 	bl	8003c78 <SpiritRadioSetPALevelMaxIndex>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configure packet handler to use the Basic packet format");
 8009940:	4b4b      	ldr	r3, [pc, #300]	; (8009a70 <SPSGRF_Init+0x220>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4955      	ldr	r1, [pc, #340]	; (8009a9c <SPSGRF_Init+0x24c>)
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fe9c 	bl	8009684 <print_debug>
#endif
  // Configure packet handler to use the Basic packet format
  xBasicInit.xPreambleLength = PREAMBLE_LENGTH;
 800994c:	2318      	movs	r3, #24
 800994e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  xBasicInit.xSyncLength = SYNC_LENGTH;
 8009952:	2306      	movs	r3, #6
 8009954:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  xBasicInit.lSyncWords = SYNC_WORD;
 8009958:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 800995c:	67bb      	str	r3, [r7, #120]	; 0x78
  xBasicInit.xFixVarLength = LENGTH_TYPE;
 800995e:	2301      	movs	r3, #1
 8009960:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  xBasicInit.cPktLengthWidth = LENGTH_WIDTH;
 8009964:	2307      	movs	r3, #7
 8009966:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  xBasicInit.xCrcMode = CRC_MODE;
 800996a:	2320      	movs	r3, #32
 800996c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  xBasicInit.xControlLength = CONTROL_LENGTH;
 8009970:	2300      	movs	r3, #0
 8009972:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  xBasicInit.xAddressField = EN_ADDRESS;
 8009976:	2301      	movs	r3, #1
 8009978:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  xBasicInit.xFec = EN_FEC;
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  xBasicInit.xDataWhitening = EN_WHITENING;
 8009982:	2301      	movs	r3, #1
 8009984:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  SpiritPktBasicInit(&xBasicInit);
 8009988:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800998c:	4618      	mov	r0, r3
 800998e:	f7f8 fe3d 	bl	800260c <SpiritPktBasicInit>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configuring automatic packet filtering");
 8009992:	4b37      	ldr	r3, [pc, #220]	; (8009a70 <SPSGRF_Init+0x220>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4942      	ldr	r1, [pc, #264]	; (8009aa0 <SPSGRF_Init+0x250>)
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff fe73 	bl	8009684 <print_debug>
#endif
  // Configure destination address criteria for automatic packet filtering
  xBasicAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 800999e:	2301      	movs	r3, #1
 80099a0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  xBasicAddress.cMyAddress = MY_ADDRESS;
 80099a4:	2399      	movs	r3, #153	; 0x99
 80099a6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  xBasicAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 80099aa:	2301      	movs	r3, #1
 80099ac:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  xBasicAddress.cMulticastAddress = MULTICAST_ADDRESS;
 80099b0:	23ee      	movs	r3, #238	; 0xee
 80099b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  xBasicAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 80099b6:	2301      	movs	r3, #1
 80099b8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  xBasicAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 80099bc:	23ff      	movs	r3, #255	; 0xff
 80099be:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  SpiritPktBasicAddressesInit(&xBasicAddress);
 80099c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7f8 fef6 	bl	80027b8 <SpiritPktBasicAddressesInit>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configuring interrupt pin");
 80099cc:	4b28      	ldr	r3, [pc, #160]	; (8009a70 <SPSGRF_Init+0x220>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4934      	ldr	r1, [pc, #208]	; (8009aa4 <SPSGRF_Init+0x254>)
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7ff fe56 	bl	8009684 <print_debug>
#endif
  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_0;
 80099d8:	2305      	movs	r3, #5
 80099da:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 80099de:	2302      	movs	r3, #2
 80099e0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  SpiritGpioInit(&xGpioInit);
 80099ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7f8 faa0 	bl	8001f34 <SpiritGpioInit>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Enable interrupt types");
 80099f4:	4b1e      	ldr	r3, [pc, #120]	; (8009a70 <SPSGRF_Init+0x220>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	492b      	ldr	r1, [pc, #172]	; (8009aa8 <SPSGRF_Init+0x258>)
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff fe42 	bl	8009684 <print_debug>
#endif
  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 8009a00:	2000      	movs	r0, #0
 8009a02:	f7f8 fabb 	bl	8001f7c <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8009a06:	2101      	movs	r1, #1
 8009a08:	2004      	movs	r0, #4
 8009a0a:	f7f8 fae3 	bl	8001fd4 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8009a0e:	2101      	movs	r1, #1
 8009a10:	2001      	movs	r0, #1
 8009a12:	f7f8 fadf 	bl	8001fd4 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8009a16:	2101      	movs	r1, #1
 8009a18:	2002      	movs	r0, #2
 8009a1a:	f7f8 fadb 	bl	8001fd4 <SpiritIrq>
  SpiritIrq(AES_END, S_ENABLE);
 8009a1e:	2101      	movs	r1, #1
 8009a20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009a24:	f7f8 fad6 	bl	8001fd4 <SpiritIrq>
  SpiritIrqClearStatus();
 8009a28:	f7f8 fb6c 	bl	8002104 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	f7f9 f82f 	bl	8002a90 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8009a32:	2001      	movs	r0, #1
 8009a34:	f7f8 fff4 	bl	8002a20 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8009a38:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8009a3c:	f7f9 f85c 	bl	8002af8 <SpiritQiSetRssiThresholddBm>

  SpiritAesMode(S_ENABLE);
 8009a40:	2001      	movs	r0, #1
 8009a42:	f7f8 f86f 	bl	8001b24 <SpiritAesMode>
  spsgrf_print_debug("Set RX timeout to 2000");
#endif
  SpiritTimerSetRxTimeoutMs(2000.0);
#else
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Set RX timeout to infinite");
 8009a46:	4b0a      	ldr	r3, [pc, #40]	; (8009a70 <SPSGRF_Init+0x220>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4918      	ldr	r1, [pc, #96]	; (8009aac <SPSGRF_Init+0x25c>)
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7ff fe19 	bl	8009684 <print_debug>
#endif
  SET_INFINITE_RX_TIMEOUT();
 8009a52:	2000      	movs	r0, #0
 8009a54:	f7fa fa2e 	bl	8003eb4 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8009a58:	2002      	movs	r0, #2
 8009a5a:	f7fa fa45 	bl	8003ee8 <SpiritTimerSetRxTimeoutStopCondition>
}
 8009a5e:	bf00      	nop
 8009a60:	37a0      	adds	r7, #160	; 0xa0
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	80000000 	.word	0x80000000
 8009a6c:	41c9de50 	.word	0x41c9de50
 8009a70:	20000020 	.word	0x20000020
 8009a74:	0800dfe4 	.word	0x0800dfe4
 8009a78:	200003f0 	.word	0x200003f0
 8009a7c:	0800dff4 	.word	0x0800dff4
 8009a80:	0800e014 	.word	0x0800e014
 8009a84:	0800e02c 	.word	0x0800e02c
 8009a88:	33bca100 	.word	0x33bca100
 8009a8c:	000186a0 	.word	0x000186a0
 8009a90:	02faf080 	.word	0x02faf080
 8009a94:	0800e044 	.word	0x0800e044
 8009a98:	4139999a 	.word	0x4139999a
 8009a9c:	0800e058 	.word	0x0800e058
 8009aa0:	0800e090 	.word	0x0800e090
 8009aa4:	0800e0b8 	.word	0x0800e0b8
 8009aa8:	0800e0d4 	.word	0x0800e0d4
 8009aac:	0800e0ec 	.word	0x0800e0ec

08009ab0 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 8009abc:	2072      	movs	r0, #114	; 0x72
 8009abe:	f7f8 fa21 	bl	8001f04 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	2b60      	cmp	r3, #96	; 0x60
 8009ac6:	bf28      	it	cs
 8009ac8:	2360      	movcs	r3, #96	; 0x60
 8009aca:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8009acc:	78fb      	ldrb	r3, [r7, #3]
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fa fb5b 	bl	800418c <RadioSpiWriteFifo>
  SpiritPktBasicSetPayloadLength(txLen);
 8009ad6:	78fb      	ldrb	r3, [r7, #3]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7f8 fefa 	bl	80028d4 <SpiritPktBasicSetPayloadLength>
  SpiritCmdStrobeSabort();
 8009ae0:	2067      	movs	r0, #103	; 0x67
 8009ae2:	f7f8 fa0f 	bl	8001f04 <SpiritCmdStrobeCommand>
  SpiritCmdStrobeTx();
 8009ae6:	f7f8 fd03 	bl	80024f0 <SpiritManagementWaCmdStrobeTx>
 8009aea:	2060      	movs	r0, #96	; 0x60
 8009aec:	f7f8 fa0a 	bl	8001f04 <SpiritCmdStrobeCommand>
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 8009afc:	f7f8 fd30 	bl	8002560 <SpiritManagementWaCmdStrobeRx>
 8009b00:	2061      	movs	r0, #97	; 0x61
 8009b02:	f7f8 f9ff 	bl	8001f04 <SpiritCmdStrobeCommand>
}
 8009b06:	bf00      	nop
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 8009b12:	f7f8 fb0f 	bl	8002134 <SpiritLinearFifoReadNumElementsRxFifo>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	6879      	ldr	r1, [r7, #4]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fa fb7c 	bl	800421c <RadioSpiReadFifo>

  return len;
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <sensor_setup>:
		printf_debug(sensormod, format, ##__VA_ARGS__);

struct L3 vibration;

uint8_t sensor_setup()
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af04      	add	r7, sp, #16
	uint8_t status;
	//Writing 0x00 to CNTL1 (0x1b) puts the sensor in stand-by mode, we can now change the settings
	uint8_t I2C_Tx_Buffer = 0x00;
 8009b36:	2300      	movs	r3, #0
 8009b38:	71bb      	strb	r3, [r7, #6]
	if((status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ACCELEROMETER_I2C_ADDRESS<<1, 0x1b, 1, &I2C_Tx_Buffer, 1, 100)))
 8009b3a:	2364      	movs	r3, #100	; 0x64
 8009b3c:	9302      	str	r3, [sp, #8]
 8009b3e:	2301      	movs	r3, #1
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	1dbb      	adds	r3, r7, #6
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2301      	movs	r3, #1
 8009b48:	221b      	movs	r2, #27
 8009b4a:	213c      	movs	r1, #60	; 0x3c
 8009b4c:	4823      	ldr	r0, [pc, #140]	; (8009bdc <sensor_setup+0xac>)
 8009b4e:	f7fb fbcb 	bl	80052e8 <HAL_I2C_Mem_Write>
 8009b52:	4603      	mov	r3, r0
 8009b54:	71fb      	strb	r3, [r7, #7]
 8009b56:	79fb      	ldrb	r3, [r7, #7]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d006      	beq.n	8009b6a <sensor_setup+0x3a>
	{
		sensor_printf_debug("Error: cannot initialize accelerometer sensor (1), status = %d\r\n", status);
 8009b5c:	4b20      	ldr	r3, [pc, #128]	; (8009be0 <sensor_setup+0xb0>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	79fa      	ldrb	r2, [r7, #7]
 8009b62:	4920      	ldr	r1, [pc, #128]	; (8009be4 <sensor_setup+0xb4>)
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff fdf5 	bl	8009754 <printf_debug>
	}

	//Writing 0x0f to ODCNTL (0x21) sets the output data rate at 25600 Hz
	I2C_Tx_Buffer = 0x0f;
 8009b6a:	230f      	movs	r3, #15
 8009b6c:	71bb      	strb	r3, [r7, #6]
	if((status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ACCELEROMETER_I2C_ADDRESS<<1, 0x21, 1, &I2C_Tx_Buffer, 1, 100)))
 8009b6e:	2364      	movs	r3, #100	; 0x64
 8009b70:	9302      	str	r3, [sp, #8]
 8009b72:	2301      	movs	r3, #1
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	1dbb      	adds	r3, r7, #6
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	2221      	movs	r2, #33	; 0x21
 8009b7e:	213c      	movs	r1, #60	; 0x3c
 8009b80:	4816      	ldr	r0, [pc, #88]	; (8009bdc <sensor_setup+0xac>)
 8009b82:	f7fb fbb1 	bl	80052e8 <HAL_I2C_Mem_Write>
 8009b86:	4603      	mov	r3, r0
 8009b88:	71fb      	strb	r3, [r7, #7]
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d006      	beq.n	8009b9e <sensor_setup+0x6e>
	{
		sensor_printf_debug("Error: cannot initialize accelerometer sensor (2), status = %d\r\n", status);
 8009b90:	4b13      	ldr	r3, [pc, #76]	; (8009be0 <sensor_setup+0xb0>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	79fa      	ldrb	r2, [r7, #7]
 8009b96:	4914      	ldr	r1, [pc, #80]	; (8009be8 <sensor_setup+0xb8>)
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7ff fddb 	bl	8009754 <printf_debug>
	}

	//Writing 0xc0 to CNTL1 (0x1b) puts the sensor in operating mode, high performance mode, range +- 8g
	I2C_Tx_Buffer = 0xc0;
 8009b9e:	23c0      	movs	r3, #192	; 0xc0
 8009ba0:	71bb      	strb	r3, [r7, #6]
	if((status = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ACCELEROMETER_I2C_ADDRESS<<1, 0x1b, 1, &I2C_Tx_Buffer, 1, 100)))
 8009ba2:	2364      	movs	r3, #100	; 0x64
 8009ba4:	9302      	str	r3, [sp, #8]
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	1dbb      	adds	r3, r7, #6
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	2301      	movs	r3, #1
 8009bb0:	221b      	movs	r2, #27
 8009bb2:	213c      	movs	r1, #60	; 0x3c
 8009bb4:	4809      	ldr	r0, [pc, #36]	; (8009bdc <sensor_setup+0xac>)
 8009bb6:	f7fb fb97 	bl	80052e8 <HAL_I2C_Mem_Write>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	71fb      	strb	r3, [r7, #7]
 8009bbe:	79fb      	ldrb	r3, [r7, #7]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d006      	beq.n	8009bd2 <sensor_setup+0xa2>
	{
		sensor_printf_debug("Error: cannot initialize accelerometer sensor (3), status = %d\r\n", status);
 8009bc4:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <sensor_setup+0xb0>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	79fa      	ldrb	r2, [r7, #7]
 8009bca:	4908      	ldr	r1, [pc, #32]	; (8009bec <sensor_setup+0xbc>)
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff fdc1 	bl	8009754 <printf_debug>
	}
	return status;
 8009bd2:	79fb      	ldrb	r3, [r7, #7]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	20000214 	.word	0x20000214
 8009be0:	20000024 	.word	0x20000024
 8009be4:	0800e110 	.word	0x0800e110
 8009be8:	0800e154 	.word	0x0800e154
 8009bec:	0800e198 	.word	0x0800e198

08009bf0 <sensor_readAcceleroRegister>:

void sensor_readAcceleroRegister(uint8_t reg)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af04      	add	r7, sp, #16
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	71fb      	strb	r3, [r7, #7]
	uint8_t I2C_Rx_Buffer[6];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ACCELEROMETER_I2C_ADDRESS<<1, reg, 1, I2C_Rx_Buffer, 4, 100);
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	2364      	movs	r3, #100	; 0x64
 8009c00:	9302      	str	r3, [sp, #8]
 8009c02:	2304      	movs	r3, #4
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	f107 0308 	add.w	r3, r7, #8
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	213c      	movs	r1, #60	; 0x3c
 8009c10:	4811      	ldr	r0, [pc, #68]	; (8009c58 <sensor_readAcceleroRegister+0x68>)
 8009c12:	f7fb fc63 	bl	80054dc <HAL_I2C_Mem_Read>
	sensor_printf_debug("%c",I2C_Rx_Buffer[0]);
 8009c16:	4b11      	ldr	r3, [pc, #68]	; (8009c5c <sensor_readAcceleroRegister+0x6c>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	7a3a      	ldrb	r2, [r7, #8]
 8009c1c:	4910      	ldr	r1, [pc, #64]	; (8009c60 <sensor_readAcceleroRegister+0x70>)
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff fd98 	bl	8009754 <printf_debug>
	sensor_printf_debug("%c",I2C_Rx_Buffer[1]);
 8009c24:	4b0d      	ldr	r3, [pc, #52]	; (8009c5c <sensor_readAcceleroRegister+0x6c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	7a7a      	ldrb	r2, [r7, #9]
 8009c2a:	490d      	ldr	r1, [pc, #52]	; (8009c60 <sensor_readAcceleroRegister+0x70>)
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7ff fd91 	bl	8009754 <printf_debug>
	sensor_printf_debug("%c",I2C_Rx_Buffer[2]);
 8009c32:	4b0a      	ldr	r3, [pc, #40]	; (8009c5c <sensor_readAcceleroRegister+0x6c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	7aba      	ldrb	r2, [r7, #10]
 8009c38:	4909      	ldr	r1, [pc, #36]	; (8009c60 <sensor_readAcceleroRegister+0x70>)
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7ff fd8a 	bl	8009754 <printf_debug>
	sensor_printf_debug("%c",I2C_Rx_Buffer[3]);
 8009c40:	4b06      	ldr	r3, [pc, #24]	; (8009c5c <sensor_readAcceleroRegister+0x6c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	7afa      	ldrb	r2, [r7, #11]
 8009c46:	4906      	ldr	r1, [pc, #24]	; (8009c60 <sensor_readAcceleroRegister+0x70>)
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff fd83 	bl	8009754 <printf_debug>
}
 8009c4e:	bf00      	nop
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	20000214 	.word	0x20000214
 8009c5c:	20000024 	.word	0x20000024
 8009c60:	0800e1dc 	.word	0x0800e1dc

08009c64 <sensor_readTemperature>:
//Temp
float sensor_readTemperature()
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af02      	add	r7, sp, #8
// Point to Temperature Register 0x00 to retrieve its value in the next I2C command
	uint8_t status;
	uint8_t I2C_Tx_Buffer = 0x00;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	70fb      	strb	r3, [r7, #3]
	uint8_t I2C_Rx_Buffer[2];
	int temp = 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
	float temperature;
	if((status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(TEMPERATURE_I2C_ADDRESS<<1), &I2C_Tx_Buffer, 1, 100)))
 8009c72:	1cfa      	adds	r2, r7, #3
 8009c74:	2364      	movs	r3, #100	; 0x64
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	2301      	movs	r3, #1
 8009c7a:	2190      	movs	r1, #144	; 0x90
 8009c7c:	4822      	ldr	r0, [pc, #136]	; (8009d08 <sensor_readTemperature+0xa4>)
 8009c7e:	f7fb f80f 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8009c82:	4603      	mov	r3, r0
 8009c84:	72fb      	strb	r3, [r7, #11]
 8009c86:	7afb      	ldrb	r3, [r7, #11]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d006      	beq.n	8009c9a <sensor_readTemperature+0x36>
	{
		sensor_printf_debug("Error: cannot initialize temperature sensor, status = %d\r\n", status);
 8009c8c:	4b1f      	ldr	r3, [pc, #124]	; (8009d0c <sensor_readTemperature+0xa8>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	7afa      	ldrb	r2, [r7, #11]
 8009c92:	491f      	ldr	r1, [pc, #124]	; (8009d10 <sensor_readTemperature+0xac>)
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff fd5d 	bl	8009754 <printf_debug>
	}

	HAL_Delay(1000); // TODO: Delay really necessary? Alternatively use conversion ready interrupt?
 8009c9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009c9e:	f7fa fb91 	bl	80043c4 <HAL_Delay>

	// Read Temperature Register, 16 bit value in 2 byte format
	if((status = HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(TEMPERATURE_I2C_ADDRESS<<1), I2C_Rx_Buffer, 2, 100)))
 8009ca2:	463a      	mov	r2, r7
 8009ca4:	2364      	movs	r3, #100	; 0x64
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	2302      	movs	r3, #2
 8009caa:	2190      	movs	r1, #144	; 0x90
 8009cac:	4816      	ldr	r0, [pc, #88]	; (8009d08 <sensor_readTemperature+0xa4>)
 8009cae:	f7fb f8f5 	bl	8004e9c <HAL_I2C_Master_Receive>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	72fb      	strb	r3, [r7, #11]
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d006      	beq.n	8009cca <sensor_readTemperature+0x66>
	{
		sensor_printf_debug("Error: cannot sample temperature sensor, status = %d\r\n", status);
 8009cbc:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <sensor_readTemperature+0xa8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	7afa      	ldrb	r2, [r7, #11]
 8009cc2:	4914      	ldr	r1, [pc, #80]	; (8009d14 <sensor_readTemperature+0xb0>)
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7ff fd45 	bl	8009754 <printf_debug>
	}
	temp = I2C_Rx_Buffer[0] << 8 | I2C_Rx_Buffer[1] << 0;
 8009cca:	783b      	ldrb	r3, [r7, #0]
 8009ccc:	021b      	lsls	r3, r3, #8
 8009cce:	787a      	ldrb	r2, [r7, #1]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
	temperature = temp * TEMP_CONVERTION;
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f7f6 fc2d 	bl	8000534 <__aeabi_i2d>
 8009cda:	f04f 0200 	mov.w	r2, #0
 8009cde:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009ce2:	f7f6 fc91 	bl	8000608 <__aeabi_dmul>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4610      	mov	r0, r2
 8009cec:	4619      	mov	r1, r3
 8009cee:	f7f6 ff83 	bl	8000bf8 <__aeabi_d2f>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	607b      	str	r3, [r7, #4]

	return temperature;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	ee07 3a90 	vmov	s15, r3
}
 8009cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000214 	.word	0x20000214
 8009d0c:	20000024 	.word	0x20000024
 8009d10:	0800e1e0 	.word	0x0800e1e0
 8009d14:	0800e21c 	.word	0x0800e21c

08009d18 <accelerometer_sample>:


uint8_t accelerometer_sample()
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	f5ad 5dc1 	sub.w	sp, sp, #6176	; 0x1820
 8009d1e:	af04      	add	r7, sp, #16
	uint8_t status = 0;
 8009d20:	2300      	movs	r3, #0
 8009d22:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8009d26:	f102 020f 	add.w	r2, r2, #15
 8009d2a:	7013      	strb	r3, [r2, #0]

    uint8_t I2C_Rx_Buffer[6]; // 2 bytes per axis * 3 axes = 6;

	int16_t xRaw[VIBRATION_SAMPLE_SIZE] = {11986, 7724, 14961, 9776, 12514, 7741, 19546, 6879, 20257, 9232, 10253, 9112, 16469, 5397, 18479, 21308, 3266, 28107, 7225, 19081, 9749, 18800, 8125, 20564, 18115, 26227, 11978, 28364, 17597, 13796, 13757, 23654, 10539, 24407, 17976, 23601, 18588, 14241, 19406, 14634, 27222, -378, 29984, 21294, 19941, 12306, 23490, 15186, 22502, 17217, 13133, 15515, 25347, 13933, 13306, 20157, 16446, 21126, 10410, 22011, 8901, 22427, 2467, 22693, 1315, 25986, 6362, 20404, 13538, 11757, 8801, 16469, 795, 17384, 16796, 7483, 15015, 19279, 13453, 10844, 10613, 11980, 12257, 16981, 14922, 287, 28248, 4337, 21474, 9786, 15628, 16944, 15793, 9696, 25477, 2601, 20877, 16400, 8370, 21549, 10535, 23517, 14429, 12736, 16832, 23738, -151, 22391, 13676, 21853, 7020, 23613, 16720, 24199, 10778, 28205, 4897, 19144, 23244, 8158, 24682, 13929, 14984, 22440, 13868, 21542, 19491, 14509, 15215, 4914, 21257, 17622, 14662, 16999, 21037, 13340, 25114, 2895, 15172, 17855, 8569, 23303, 4924, 28995, 9608, 18273, 7941, 14065, 12682, 23050, 9465, 18425, 23330, 15185, 14758, 22013, 5214, 21575, -437, 25594, 13694, 16064, 15330, 9285, 28267, 6240, 14527, 13246, 26289, 8011, 20661, 10775, 24597, 1584, 21189, 16464, 17133, 14098, 24785, 15942, 15574, 8641, 19981, 19788, 19660, 4696, 21788, 23831, 5343, 26991, 6576, 28732, 5816, 25566, 6775, 20955, 10279, 16981, 16053, 20627, 11766, 11217, 24953, 12762, 15447, 12921, 23595, 9327, 15089, 22044, 18932, 12500, 22774, 15235, 23219, 4969, 25190, 8401, 29832, 4851, 26809, 18668, 19090, 18008, 21425, 17777, 20023, 16664, 19327, 16711, 20169, 21825, 13625, 18199, 16596, 8223, 17283, 25611, 7306, 20432, 18856, 21020, 5722, 17033, 13025, 12141, 10524, 16461, 22524, 20533, 16431, 2403, 26516, 4285, 14941, 15485, 11432, 18369, 13614, 12523, 26262, 3610, 23777, -1332, 19681, 8908, 11917, 14746, 21471, 7208, 23124, 12845, 16329, 12605, 10897, 22036, 2879, 21954, 11709, 20355, 16845, 7520, 13570, 27562, 8779, 13190, 19220, 27536, 7693, 27623, 13928, 18489, 6595, 21330, 21013, 6916, 25835, 15107, 22522, 13078, 23483, 4818, 25246, 6555, 25411, 8805, 23473, 16198, 15301, 13190, 18141, 14347, 21931, 8147, 26333, 10709, 9819, 20476, 15515, 16528, 5384, 25223, 12149, 21469, 8840, 22972, 9880, 10905, 17829, 7041, 21617, 9206, 14552, 14954, 11043, 11232, 17149, 13121, 14878, 10646, 20169, 4444, 11173, 13741, 11397, 12317, 22380, 1400, 27158, 5054, 13742, 10536, 15231, 17990, 8600, 25327, 19562, 15307, 22092, 10602, 21859, 9803, 18267, 18436, 16103, 26566, 18891, 19985, 19037, 8956, 22091, 20193, 3808, 26177, 20211, 20383, 9793, 24409, 16355, 8117, 26835, 7280, 21477, 14593, 26647, 12562, 13440, 22381, 19999, 15527, 22193, 7152, 27242, 2621, 25743, 3090, 22759, 15742, 15164, 19968, 17510, 7101, 18731, 4211, 19853, 20840, 5308, 22337, 18260, 19185, 6287, 14532, 15153, 15830, 17490, 9547, 20020, 23596, 12098, 14716, 10238, 20541, 15551, 16045, 25931, 13372, 24671, 374, 26145, -4021, 17045, 10223, 26031, 20466, 20992, 7695, 23631, 1625, 8570, 15789, 14490, 22507, 14747, 29035, 20090, 12378, 14557, 8594, 19387, 12346, 3072, 31403, 10806, 28623, 8167, 20390, 18335, 13433, 16866, 19685, 19308, 16415, 24375, 8929, 21199, 8967, 22910, 13104, 20063, 10285, 19089, 14212, 14517, 11929, 23435, 7451, 20887, 3472, 26162, 2874, 24101, 2339, 23606, 15554, 9732, 21996, 12037, 22196, 8445, 20599, 15709, 18093, 15957, 22602, 9143, 22826, 9021, 23675, 7868, 24693, 9086, 23445, 17971, 18670, 4922, 23128, 9573, 11968, 13335, 18913, 20118, 5436, 23864, 10954, 23147, -5806, 20479, 17519, 19703, 9501, 19111, 16264, 17043, 1207, 21430, 7567, 14873, 10947, 10966, 24249, 13023, 19992, 7453, 19973, 8321, 6578, 10233, 23502, 4025, 29446, 8214, 25439, 9548, 14756, 18007, 8112, 18538, 20339, 22504, 27899, 4489, 18266, 27187, 8226, 26185, 15927, 27398, 15858, 31001, 14829, 25998, 11360, 28709, 3301, 21320, 20969, 18309, 18753, 22007, 13138, 19761, 13270, 13617, 19540, 10658, 19858, 10343, 15130, 14780, 9540, 17093, 23116, -1808, 26119, 1912, 12532, 14851, 11672, 16969, 12267, 23937, 11508, 17953, 15536, 12073, 5161, 23932, 5635, 18100, 13148, 25285, 11744, 19863, 9708, 13344, 16502, 14373, 17494, 21572, 20230, 14364, 12884, 23834, 5957, 13731, 27313, -23, 28880, 9233, 26062, 7465, 23799, 8288, 16005, 19557, 26900, 14007, 28493, 11269, 18145, 17737, 14413, 11860, 18561, 13814, 18631, 17128, 15379, 15732, 12908, 24574, -2134, 27316, 17041, 18180, 8064, 23415, 11117, 22768, 21357, 9353, 14265, 20598, 21417, 9104, 20960, 14991, 21887, 12734, 24914, 10413, 26349, 4584, 23002, 2691, 27258, 6755, 23660, 12283, 20882, 12947, 17787, -465, 20132, 21475, 4542, 24855, 25267, 22233, 2950, 16267, 13820, 16043, 13273, 13317, 9888, 28756, 8601, 23538, 7910, 21471, 15787, 14740, 9129, 21987, 12073, 15192, 18743, 2525, 19791, 5779, 25157, 9178, 10643, 13464, 26579, -5233, 20470, 14577, 17256, -383, 25583, 14516, 20277, 8485, 21950, 6808, 21152, 23954, 654, 23406, 6211, 21896, 13949, 22587, 17524, 20593, 6349, 26492, -2898, 25858, 14936, 15440, 20202, 18401, 17101, 24999, 3691, 16035, 18756, 10029, 19804, 15351, 28639, 11630, 22130, 10197, 21074, 10681, 23754, 11700, 16511, 26614, 17961, 14499, 21654, 13060, 19273, 10199, 22749, 16462, 14124, 23114, 591, 29587, 9982, 15069, 21504, 25868, 9453, 19611, 7384, 20758, 7136, 24153, 13791, 19350, 19782, 19285, 15429, 11623, 12956, 20723, 21828, 11188, 14191, 17605, 23694, 9559, 22898, 6193, 20847, 4787, 26991, 10125, 14271, 18047, 9512, 15547, 13510, 8307, 13299, 20690, 13489, 14496, 8541, 18578, 2058, 15214, 9135, 21454, 14259, 16807, 19648, 13881, 5635, 19354, 12980, 25181, 9874, 18939, 25473, 15140, 21684, 14437, 16177, 21274, 20257, 20086, 16054, 24693, 24822, 11801, 23826, 19052, 8425, 25359, 22230, 19654, 18690, 19118, 24536, 13232, 18208, 19906, 20624, 15934, 21980, 19699, 22009, 12798, 8971, 29890, -3288, 25515, 16943, 11760, 15827, 14363, 11425, 24823, 5175, 24489, -736, 11156, 14495, -228, 13296, 9004, 10011, 16197, 9790, 12181, 11002, 5056, 18419, -793, 17157, 4569, 17115, 6527, 15224, 10223, 22649, 8317, 6815, 24902, 12152, 13232, 16684, 18742, 9448, 18578, 12881, 25909, 1852, 28813, 8081, 25778, 12244, 24541, 5358, 25436, 7894, 25742, 12979, 23810, 20521, 15372, 24523, 15845, 22581, 23797, 9967, 25531, 15366, 17187, 25954, 21517, 10000, 19608, 22944, 11543, 25501, 7911, 27858, 6576, 11837, 25281, 1010, 26470, 6768, 17847, 12300, 17034, 5955, 19203, 9235, 20450, 6594, 22287, 4983, 13628, 10855, 6164, 13977, 22900, 3381, 28472, 2983, 17788, 8607, 17232, 11782, 10306, 25075, 8887, 25134, 13034, 17678, 13094, 16841, 11314, 13361, 6988, 27074, 10860, 19009, 13476, 13850, 17126, 20012, 1441, 26192, 17282, 14517, 13291, 20515, 16842, 6871, 28264, 5758, 29217, 9279, 27387, 3993, 22656, 14134, 15969, 23571, 16145, 17381, 18987, 5671, 27165, 5129, 23236, 10003, 10889, 23453, 16495, 16300, 14362, 8063, 16239, 27063, 1281, 25466, 17005, 21674, 7702, 19128, 14895, 14201, 17381, 9369, 23324, 18036, 18400, 10139, 13604, 20477, 15265, 20269};
 8009d2c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009d30:	f103 0310 	add.w	r3, r3, #16
 8009d34:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8009d38:	4a9a      	ldr	r2, [pc, #616]	; (8009fa4 <accelerometer_sample+0x28c>)
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d42:	461a      	mov	r2, r3
 8009d44:	f000 ffda 	bl	800acfc <memcpy>
	int16_t yRaw[VIBRATION_SAMPLE_SIZE] = {20073, 7080, -7340, -1855, 4592, -2209, 13704, -9494, 19549, -2839, -246, -1737, 2600, 205, 9045, -2364, 4628, 4613, -1874, 9933, 9, 2547, 1193, -748, 2194, 1275, 1683, 6699, 1540, 447, -2775, -9365, 6210, -3522, 14289, 1271, 6430, -2411, 3612, -5519, 3088, -14062, 7261, 1953, -517, 13121, -11190, 15530, -5221, 2888, -6334, -1175, -5786, 754, 2126, 12751, -1773, 10823, 475, -6807, 447, -6147, 2310, 7076, 3385, 4599, 4401, -8414, 12001, -12672, 9464, -2764, -2244, 10918, -69, 8870, 2666, 5932, -269, 11971, -16500, 9444, -6756, 5852, 2962, 1557, 13934, -10095, 5132, 7046, -7798, 9248, -848, 2219, 10025, -7971, 6959, 3071, -1807, 11220, -6785, -6, -2069, 337, 2210, 8799, -13069, 16653, -12522, 8505, -8983, 2562, 1476, 5396, 6457, 1926, -6782, 1598, -3551, -6092, 14344, -8067, 5614, 10448, -7750, 7751, -6669, 1943, 3883, -5458, 3438, 4161, -2635, 15838, -4524, 11617, -3948, -5342, -597, 5380, -169, 10218, 1703, 11556, 451, -586, 2224, -13412, 18550, -8237, 6452, 2234, 8948, -2108, 11322, -4300, 2116, 40, -4256, 4715, -5036, 4500, 8245, 3501, 6331, -1903, -786, -5580, -7868, 10121, 1179, 270, 5335, 2289, 8271, -15783, 9012, -9289, 3376, -2141, 3224, -4298, 16478, -6440, 6929, -1640, -956, -1559, -4731, 7533, -1468, 6211, 5497, 31, 2421, -403, -4312, 399, 7626, 1839, 8765, -8450, 9725, -1976, 9344, -5360, 6649, -2332, 11731, -6501, 9980, -3854, 307, 11000, -9183, 4498, -960, 4031, 203, 6455, 1763, 7104, -9753, 13600, -10930, 4878, 3746, -1637, 7887, 2225, -1846, 1393, -2669, -6716, 11994, -12238, 13810, -7067, 7764, 5093, -5272, 2042, -3567, 4110, -2699, -1030, -5386, 16465, -7961, 16702, -9199, 6442, -5509, -5860, 3951, 492, -6929, 22035, -2070, 2616, 13152, -10742, 6854, -9219, 4842, -1434, 1562, 5683, 11865, -2853, 15238, -8252, -2117, -558, -3489, 8600, -13711, 19803, 1911, 8219, 2706, 572, -2868, -3166, -5196, 2261, 4394, -1746, 13171, 2093, -529, 8108, -6265, -3547, 2925, -6014, 3695, -4711, 11134, 4408, 4387, 1892, -5505, -1435, -8822, 7366, -10889, 10472, 4268, 12352, -7037, 5760, 6464, -13613, 10634, -16444, 15769, -10670, 8979, -2932, 15554, -9213, 11238, 244, 1275, -28, 3058, -762, 1864, 4387, 792, -302, 1586, 9422, -4107, 14720, -12157, 13566, -12914, 12113, -7272, 2944, 4608, 13069, -580, 4673, 679, -9285, 7457, -17771, 15222, -8311, 8444, 3805, 13210, 2321, -1642, -2256, 1936, -14293, 3718, -7365, 7989, 11544, 3950, 10866, -4509, 3460, -1626, -9360, -5657, 8366, -13785, 16198, 2857, 5558, 5692, -5623, 9018, -8032, -3233, -4567, 3689, 5301, 8529, 12069, 1209, 6393, -3306, 5248, -21362, 11298, 944, 1521, 14242, 2161, 7546, 2474, -672, 1354, -4512, -5319, 13188, -9731, 21193, -3064, 2570, -2491, 7800, -5584, 5172, -10226, 13841, -2773, 7750, 4712, -4924, 8610, -13865, 7220, -4852, 8062, -1027, 15781, -14231, 10688, -7467, -146, 3589, -2636, 3105, -3765, 5303, 5704, -450, -2333, 5118, -11545, 10878, -6912, 1948, 2097, 4371, 8909, -424, 1992, -2791, -6061, 762, 4528, -7542, 23014, -6922, 15191, 1184, 1733, -276, -3490, -1914, -641, 6021, 3798, 13502, 4114, 12205, -12296, 7280, -12957, 4011, 3327, 7331, 5497, 7215, 11496, -2672, -10892, -1948, -4852, -3969, 10667, 1020, 3922, 7697, 1892, -466, 724, -4249, -1527, -4037, -3102, 11888, -2716, 16461, -10446, 11454, -13306, -3688, -2066, 6880, -1972, 12995, -2124, 3188, -2198, -2738, 1671, -12046, 15003, 6878, 4891, 6321, 2020, -1136, 7868, -3716, -5699, -1630, -1154, 8713, 2335, 13993, 6055, 1914, -6194, -4368, -8806, 8902, -4368, 14403, 11533, -2489, 9740, -7506, 3481, -4565, -2026, -3614, 4565, -6773, 26906, -8992, 11691, 1495, -2416, 198, -14578, 1001, 1952, 3229, 12328, 5584, 4295, 1564, -11590, 4517, -5640, 4525, 2078, -2799, 8724, 5644, -2764, 2657, 6898, -4243, -1978, -13947, 15040, -2729, 10450, 8658, 882, -4487, 3937, -4047, -8149, 557, 7147, 13123, -7962, 14883, -6144, -2350, 2665, -5594, 11420, 179, 654, 7922, 410, 1766, 3885, -7738, 4946, -4634, 7145, 4196, 14939, 10239, -1301, -1910, -4690, -5969, -175, 3514, 5326, 11197, 2803, 19042, -7779, 104, -6813, -354, -1527, 6498, -1048, 996, 12964, -2960, 13228, -5375, -377, -6014, -3206, 5021, -1497, 9020, 10702, 2769, -751, -7554, -8994, 5439, -10135, 11072, -745, 8983, 2305, 7506, -114, 5861, -20502, 6811, -5199, -2632, 9947, -6586, 22645, 2816, 5092, -3276, -2144, -8113, -676, 3621, 9409, 4616, 8056, 7427, -8195, 6125, -7289, 5334, 1732, 1496, 1276, 8882, -2691, 14486, -10209, 6156, -6597, -2533, 7080, 1954, 1905, 5843, 5967, 600, 8743, -20082, 8479, -10793, 10132, -1645, 1155, 7085, -9179, 4818, 679, -5765, 7664, -6286, 608, 5174, -3355, 4960, 6338, -3799, 7168, -13432, 2934, -5161, 1088, 7688, 6326, -5608, 15177, -11118, 8145, -14505, 5773, -2182, 9262, 4115, 5648, -2193, 3054, -130, -2365, 17139, -16696, 13640, 2452, -1012, 8846, -5059, 4947, 1572, -7516, 2606, 7618, 2251, 18803, -9194, 12016, -8733, -5262, -2263, 6811, -5971, 11854, -4091, 16081, -3308, 555, -1157, -9131, 11660, -9258, 163, 523, 5982, 2257, 11951, -7499, 4108, -1088, -14209, 8424, -9531, 12343, 6351, 7732, 1901, -3390, -3434, -1406, -10675, 9911, -3047, 253, 12458, 8997, 12021, -5764, 4564, -6548, -3453, -5946, 3072, -9008, 26992, -1550, 12542, 395, 4785, -4219, -1013, -515, 819, 4756, 4027, 5460, 2801, 5740, 433, 1149, 5333, -8141, 4626, -13202, 7414, 3869, 10335, -2665, 4296, -3954, 11158, -11656, 4840, -9300, -1106, 10883, -8182, 6233, 5765, 1509, -532, 4481, -5145, 2992, -15391, 15446, -10293, 11531, 2741, 3635, 5240, 3934, -3165, 4067, -3137, -650, 5753, -15664, 12392, -8024, 14647, 7453, 576, 8527, -2357, 181, -5214, -6377, -4726, 16848, -8029, 20543, -3578, 6624, -2746, -5849, 3662, -4283, -9512, 19036, -2369, 8773, 11893, -7589, 13817, -17643, 2791, -9645, -2287, 5783, 9985, 2927, 13249, -5136, 3864, -448, -13686, 3605, -17731, 17216, -4696, 10398, 4489, 11792, -4021, 7993, -14758, 5045, -8650, -4928, 5770, 3054, 828, 13153, 1171, 3361, 1714, -9539, 4840, -9377, 5929, -337, 4726, 2461, 9914, 3617, 5332, -4525, -1788, -771, -1839, 4233, -4354, 7221, 12812, -7885, 16181, -10277, 14076, -11750, 5946, -7012, 8722, -8091, 11142, 4504, 5321, 4695, 5034, -807, -561, 194, -4975, -3080, 4475, 9929, 1614, 12581, -11416, 16189, -12836, 3364, -8581, -126, 5191, 4679, 5646, 5378, 4855, -3636, 7225, -21965, 11795, -13418, 822, 3373, 10176, 8004, 1939, 3419, 7613, -13596, 3305, -9145, 3426, 3130, 383, 11614, 2707, 3616, 8521, -5004, -1031, -2677, -4515, 2999, 2467, 1079, 14735, -3480, 14476, -7435, 1903, -7627, 2699, 573, 8362, 3289, 2289, 5177, -826, 9024, -18929, 9214, 4803, -5103, 10705, -1651, 5773, 4524, -2169, 5171, -6692, -3014, 11472, -8969, 15543, 2282, 4200, -1428, 492, -4789, -606, -4256, 9843, 3608, 2810, 5042, -4844, 9702, -11936, 10490, -3600, 8591, -4054, 15920};
 8009d48:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8009d4c:	4a96      	ldr	r2, [pc, #600]	; (8009fa8 <accelerometer_sample+0x290>)
 8009d4e:	3b10      	subs	r3, #16
 8009d50:	4611      	mov	r1, r2
 8009d52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 ffd0 	bl	800acfc <memcpy>
	int16_t zRaw[VIBRATION_SAMPLE_SIZE] = {-14080, -15616, 18432, -18688, 15360, 13568, -17408, 20224, 512, 8448, 7168, -7680, 5632, 9216, -20480, 23808, -12288, 16896, 2048, -12288, 15104, -4864, -8960, 17920, -18176, 13312, 768, -7424, 11776, -9984, 1024, 5120, -20480, 18176, -10496, -3328, 12032, -6912, 8448, -2560, -9472, 15360, -27136, 8960, 11520, -16384, 14848, -6912, 9472, -10496, -10240, 9472, -5120, -9728, 12800, -4352, 8192, -3072, -256, 14336, -24832, 15360, -3328, -768, 10752, 7424, -9472, 21248, -13312, 13568, -10240, 7680, 10240, -12288, 13312, 13312, -10496, 7936, 9728, -5632, 13056, -18944, 27648, -14592, 6400, 8192, -5888, 4096, 4096, -3840, 20224, -18944, 5632, 16128, -17664, 15104, -3328, 3328, 5376, -8704, 5632, -4608, -6400, 22272, -21248, 13056, 17408, -18432, 12032, -8704, 4352, -768, -7680, 15616, 5888, -16384, 12032, -13824, 7936, -9728, -12032, 19712, -8960, -1280, 18432, -16128, 12288, -8704, -4096, 2816, -6656, 13824, 5120, -12032, 24832, -13568, 3328, -3840, -1280, 10752, -3584, -1280, 15872, -10240, 9984, 9472, -19200, 17408, -14080, 9472, -4352, -3328, 20224, -3840, -10496, 25088, -18688, 8960, 768, -7168, 10752, -12800, 20736, -2560, -9984, 13568, -2048, -12544, 12288, -11520, 18688, -16128, 13568, 9728, -14336, 10496, 3584, -8192, 2816, 1536, -2304, 14848, -17408, 21248, -10240, 512, -1536, -10752, 7424, -512, -7936, 16896, -14592, 12032, 2816, -12800, 13056, -11264, 1536, 13568, -13056, 12544, 256, -2560, 9472, -11264, 7424, 5632, -15872, 19968, -18688, 12032, 6144, -13056, 8192, -4096, 256, -256, -7424, 9728, 3840, -18944, 18688, -14080, 4096, -768, -1536, 9984, -7424, -4608, 16384, -14080, 4352, 5888, -11776, 20480, -19200, 7424, -1536, 10240, 5888, -12544, 1792, 19712, -22528, 4096, 7936, -5888, 15616, -13056, 22272, -11520, -1536, 9728, -3072, -13056, 20736, -6656, 13824, -13312, 8448, 11264, -13312, 1792, 5632, -2816, 7936, 1024, -768, 9728, -2816, 14080, -18688, 7680, 14336, -15360, 6912, 5888, 7424, 4608, -6656, 8448, -3072, -16128, 17920, -12288, -2816, 11520, -1792, 5120, -1280, 4352, 8192, -22784, 10752, 3584, -7936, 4864, 5632, 2560, 6144, -13568, 14592, -13312, 6656, -2304, -4352, 5632, 17152, -14080, 12032, -14080, 17664, -1536, -18688, 15872, -7936, 9216, -2048, 512, 2560, 11264, -17408, 24320, -21760, 11008, 5376, -512, 8448, -5376, 2816, 10240, -12288, 11264, 5888, -8448, 24320, -19456, 18688, -9472, 6656, 5376, 2048, 0, 18176, -14592, 15616, 1792, -7168, 4096, -10240, 13824, -6400, 5632, 8960, -4352, -7168, 22784, -23808, 3328, -11264, 11520, 256, -5632, 4864, 7424, -8960, 10752, -7168, -3584, 256, -2304, 6656, -13056, 8448, 15104, -15104, 3072, 1280, -3584, -4608, -10240, 8448, -3072, 5376, -1536, -512, 7168, 256, -18432, 13312, -13568, 12288, 0, 1024, 10752, 3072, -7168, 11776, -19968, 5376, 4608, -2816, 11776, -6144, 13824, -1024, -7168, -3072, 8192, -11008, 20480, -19200, 19456, 3840, -1792, 4864, -17152, 17152, -5632, -8960, 12800, 1536, -7680, 20736, -23296, 17920, -16128, 9984, 3328, -5632, 1792, 8960, -8704, 16896, -12288, 0, 14592, -16128, 11520, -10752, 13056, 9472, -13056, 5632, 12032, -11264, 3584, -12032, 11776, 512, -13056, 21248, -6912, -4864, 14080, -11264, -512, -6912, -4352, 14592, -13056, 19968, 5120, -9728, 8192, -8448, -3328, 5632, -12544, 13056, 4096, 4096, 9984, -10240, 8448, 5120, -16896, 9216, -13056, 18944, -512, -2048, 22272, -15104, -5376, 768, -3072, 3840, -256, -1536, 26368, -24064, 15616, -8448, 3840, -3072, -512, -10496, 20736, -11264, 17152, -11264, 6144, 7936, -12544, 4608, -5632, 5120, 8960, 5120, 2304, 13568, -23552, 19968, -9984, -2560, 10496, -5120, 14080, -2560, 3072, 21504, -11008, -1536, 6400, -14080, 16128, -6400, 12032, 8960, -2816, 5120, 6144, -12800, 13568, -13056, 4096, 11520, -9728, 19200, -16384, 10752, 7680, -19200, 6656, 1280, -5888, -1280, -2048, 13568, -3840, -15360, 10752, -13312, 512, -1024, -16640, 13056, -2048, -3328, -2816, -6144, 14080, -6656, -22784, 16384, -2560, 4352, -2304, 7936, 9984, -10240, 3584, 1792, -16896, 11264, 11520, -6144, 17152, -14592, 19456, -12032, 768, 5888, -9728, 9984, 9728, -4352, 11776, -2560, -3840, 10752, -24064, 13568, -2304, 11776, 5632, 3584, -1536, 11776, -18432, 7168, -9728, 5888, 9472, -12032, 16384, -5120, 7680, 3328, -11520, -3072, 8448, -12800, 8704, -10496, 20480, -5888, -9728, 12800, -10240, -6144, 11264, -14592, 3584, 8704, -4096, 12800, -16896, 15360, 1280, -20480, 11008, -9472, 5632, 12032, -7424, 16896, 3584, -4352, 8960, -25344, 11008, 8960, -13056, 17920, -3328, 10752, -3328, -11264, 16384, -11776, -5632, 9216, -2304, 9216, 3584, -8192, 18432, -24832, 8704, -1024, -7424, 10240, 7168, -12544, 25600, -13568, 9984, -14080, 6400, 8960, -16128, 8704, 10496, -10240, 4608, 10240, -8192, 12544, -25344, 25856, -12288, 3072, -256, 256, 3584, 0, -4864, 17664, -23040, 3072, 15872, -11520, 16384, -8192, 7680, 5120, -6912, -256, 768, -5120, 22784, -17920, 16640, 10752, -9728, 13568, -11008, 10752, -2304, -5376, 11264, 2816, -6144, 13568, -12544, 18688, -10752, -11520, 18432, -11520, 5632, 18432, -17920, 14848, -6656, -9216, 7168, -11776, 10752, 7168, -11008, 19968, -11264, 256, 1280, -10752, 10496, -1792, -11008, 16640, -13312, 13056, 8192, -19200, 15872, -16640, 14080, -11520, -6912, 22016, -9472, -8192, 21504, -21504, 6656, -5120, -7424, 16128, -16640, 15616, -1536, -8192, 13824, 1280, -22016, 16640, -17152, 14848, -12544, 13568, 12288, -6144, 8192, 256, -8960, -512, 3840, -8960, 11776, -16640, 25088, -12800, 2560, 5376, -9216, 3072, 4864, -10752, 19200, -13824, 12544, 1024, -8704, 13056, -8448, 3328, 12032, -11520, 9728, 7936, -3072, 13056, -11776, 13824, 6400, -14080, 18432, -20224, 14080, 9984, -17920, 13568, -1792, 3584, 5632, -13568, 7936, 4352, -23296, 24064, -16896, 8192, 2560, -11008, 10752, -8960, -5376, 14848, -18432, 8704, 4864, -17920, 15616, -17920, 1536, 3328, 2304, 8192, -11776, 768, 18688, -26112, 4352, 8704, -10240, 15360, -19712, 24320, -13312, 256, 12032, -6144, -12800, 12288, -7424, 17152, -9728, 8704, 21248, -22272, 8704, 0, 3328, 5888, 6656, -1024, 18432, -8448, 22784, -13824, 14592, 11008, -19456, 13056, 5888, 1280, 4864, 2816, 10240, 10496, -20224, 26368, -16640, 5632, 512, -6656, 12032, 256, -1792, 22784, -24064, 10752, 1536, -9216, 2048, -2816, 6912, 2816, -12800, 14080, -6912, -2048, 5376, -15872, 7168, 9216, -16128, 7680, -12032, 11008, 5632, -17920, 17152, -7424, 3328, -5120, -3584, -3840, 3840, -12032, 18432, -15360, 10240, 768, -1280, 12288, -18688, 9216, -2816, -2560, 11776, 5120, -9472, 28416, -20736, 13312, -11264, 9472, 5888, -4352, 1024, 22272, -17152, 15872, 6400, -9984, 13312, -21504, 19200, -11264, -1792, 13056, 4096, -7680, 21760, -16896, 6656, -11520, 11520, 3584, -16384, 12800, 9216, -7680, 11776, -4864, 8192, -5376, -9216, 11520, -10496, 5376, 19456, -17152, 7680, 6144, -4864, -5376, -6400, 3328, 512, -4096, 5120, -6400, 8960, 6400, -15616, 7680, -9472, 7936, -2816, -8448, 15872, 2304, -7936, 10496, -14848, 3072, 4096, -4608, 15872, -12032, 13312, -1024, -2560, -2048, 11264, -15104, 13824, -14080, 14592, 5120, -5632, 8192, -16640, 16896, -6656, -6400, 8192, 2560, -15360};
 8009d5c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8009d60:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8009d64:	4a91      	ldr	r2, [pc, #580]	; (8009fac <accelerometer_sample+0x294>)
 8009d66:	4618      	mov	r0, r3
 8009d68:	4611      	mov	r1, r2
 8009d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f000 ffc4 	bl	800acfc <memcpy>

    uint32_t sampleIndex = 0;
 8009d74:	2300      	movs	r3, #0
 8009d76:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8009d7a:	f102 0208 	add.w	r2, r2, #8
 8009d7e:	6013      	str	r3, [r2, #0]

    //TIM5->ARR = (uint32_t)((51200/ACCELEROMETER_SAMPLE_RATE)-1);
	HAL_TIM_Base_Start_IT(&htim5);
 8009d80:	488b      	ldr	r0, [pc, #556]	; (8009fb0 <accelerometer_sample+0x298>)
 8009d82:	f7fd fccd 	bl	8007720 <HAL_TIM_Base_Start_IT>

	// Sample accelerometer
    while(sampleIndex < (VIBRATION_SAMPLE_SIZE))
 8009d86:	e0ae      	b.n	8009ee6 <accelerometer_sample+0x1ce>
	{
		if(trigger)
 8009d88:	4b8a      	ldr	r3, [pc, #552]	; (8009fb4 <accelerometer_sample+0x29c>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 80aa 	beq.w	8009ee6 <accelerometer_sample+0x1ce>
		{
			trigger = false;
 8009d92:	4b88      	ldr	r3, [pc, #544]	; (8009fb4 <accelerometer_sample+0x29c>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	701a      	strb	r2, [r3, #0]
			if((status = HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ACCELEROMETER_I2C_ADDRESS<<1, 0x08, 1, I2C_Rx_Buffer, 6, 100)))
 8009d98:	2364      	movs	r3, #100	; 0x64
 8009d9a:	9302      	str	r3, [sp, #8]
 8009d9c:	2306      	movs	r3, #6
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	2301      	movs	r3, #1
 8009da8:	2208      	movs	r2, #8
 8009daa:	213c      	movs	r1, #60	; 0x3c
 8009dac:	4882      	ldr	r0, [pc, #520]	; (8009fb8 <accelerometer_sample+0x2a0>)
 8009dae:	f7fb fb95 	bl	80054dc <HAL_I2C_Mem_Read>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8009db8:	f102 020f 	add.w	r2, r2, #15
 8009dbc:	7013      	strb	r3, [r2, #0]
 8009dbe:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009dc2:	f103 030f 	add.w	r3, r3, #15
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d032      	beq.n	8009e32 <accelerometer_sample+0x11a>
			{
				sensor_printf_debug("Error: cannot sample accelerometer sensor, status = %d\r\n", status);
 8009dcc:	4b7b      	ldr	r3, [pc, #492]	; (8009fbc <accelerometer_sample+0x2a4>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8009dd4:	f102 020f 	add.w	r2, r2, #15
 8009dd8:	7812      	ldrb	r2, [r2, #0]
 8009dda:	4979      	ldr	r1, [pc, #484]	; (8009fc0 <accelerometer_sample+0x2a8>)
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7ff fcb9 	bl	8009754 <printf_debug>
				xRaw[sampleIndex] = 0;
 8009de2:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009de6:	f103 0310 	add.w	r3, r3, #16
 8009dea:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8009dee:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8009df2:	f102 0208 	add.w	r2, r2, #8
 8009df6:	6812      	ldr	r2, [r2, #0]
 8009df8:	2100      	movs	r1, #0
 8009dfa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				yRaw[sampleIndex] = 0;
 8009dfe:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8009e02:	461a      	mov	r2, r3
 8009e04:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009e08:	f103 0308 	add.w	r3, r3, #8
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	4413      	add	r3, r2
 8009e12:	2200      	movs	r2, #0
 8009e14:	f823 2c10 	strh.w	r2, [r3, #-16]
				zRaw[sampleIndex] = 0;
 8009e18:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8009e1c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8009e20:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8009e24:	f102 0208 	add.w	r2, r2, #8
 8009e28:	6812      	ldr	r2, [r2, #0]
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 8009e30:	e062      	b.n	8009ef8 <accelerometer_sample+0x1e0>
			}
			else
			{
				xRaw[sampleIndex] = I2C_Rx_Buffer[0]<<8 | I2C_Rx_Buffer[1];
 8009e32:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	021b      	lsls	r3, r3, #8
 8009e3a:	b21a      	sxth	r2, r3
 8009e3c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009e40:	f103 0301 	add.w	r3, r3, #1
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	b21b      	sxth	r3, r3
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	b219      	sxth	r1, r3
 8009e4c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009e50:	f103 0310 	add.w	r3, r3, #16
 8009e54:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8009e58:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8009e5c:	f102 0208 	add.w	r2, r2, #8
 8009e60:	6812      	ldr	r2, [r2, #0]
 8009e62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				yRaw[sampleIndex] = I2C_Rx_Buffer[2]<<8 | I2C_Rx_Buffer[3];
 8009e66:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009e6a:	f103 0302 	add.w	r3, r3, #2
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	021b      	lsls	r3, r3, #8
 8009e72:	b21a      	sxth	r2, r3
 8009e74:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009e78:	f103 0303 	add.w	r3, r3, #3
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	b21b      	sxth	r3, r3
 8009e80:	4313      	orrs	r3, r2
 8009e82:	b21a      	sxth	r2, r3
 8009e84:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009e8e:	f103 0308 	add.w	r3, r3, #8
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	440b      	add	r3, r1
 8009e98:	f823 2c10 	strh.w	r2, [r3, #-16]
				zRaw[sampleIndex] = I2C_Rx_Buffer[4]<<8 | I2C_Rx_Buffer[5];
 8009e9c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009ea0:	f103 0304 	add.w	r3, r3, #4
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	021b      	lsls	r3, r3, #8
 8009ea8:	b21a      	sxth	r2, r3
 8009eaa:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009eae:	f103 0305 	add.w	r3, r3, #5
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	b21b      	sxth	r3, r3
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	b219      	sxth	r1, r3
 8009eba:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8009ebe:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8009ec2:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8009ec6:	f102 0208 	add.w	r2, r2, #8
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			sampleIndex++;
 8009ed0:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009ed4:	f103 0308 	add.w	r3, r3, #8
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3301      	adds	r3, #1
 8009edc:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8009ee0:	f102 0208 	add.w	r2, r2, #8
 8009ee4:	6013      	str	r3, [r2, #0]
    while(sampleIndex < (VIBRATION_SAMPLE_SIZE))
 8009ee6:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009eea:	f103 0308 	add.w	r3, r3, #8
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ef4:	f4ff af48 	bcc.w	8009d88 <accelerometer_sample+0x70>
		}
	}

    sampleIndex = 0;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8009efe:	f102 0208 	add.w	r2, r2, #8
 8009f02:	6013      	str	r3, [r2, #0]

    HAL_TIM_Base_Stop_IT(&htim5);
 8009f04:	482a      	ldr	r0, [pc, #168]	; (8009fb0 <accelerometer_sample+0x298>)
 8009f06:	f7fd fc6d 	bl	80077e4 <HAL_TIM_Base_Stop_IT>
//
	// Convert signals to float
	arm_q15_to_float(xRaw, vibration.x.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 8009f0a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8009f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f12:	492c      	ldr	r1, [pc, #176]	; (8009fc4 <accelerometer_sample+0x2ac>)
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 fce3 	bl	800a8e0 <arm_q15_to_float>
	arm_q15_to_float(yRaw, vibration.y.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 8009f1a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8009f1e:	3b10      	subs	r3, #16
 8009f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f24:	4928      	ldr	r1, [pc, #160]	; (8009fc8 <accelerometer_sample+0x2b0>)
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 fcda 	bl	800a8e0 <arm_q15_to_float>
	arm_q15_to_float(zRaw, vibration.z.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 8009f2c:	f107 0310 	add.w	r3, r7, #16
 8009f30:	3b10      	subs	r3, #16
 8009f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f36:	4925      	ldr	r1, [pc, #148]	; (8009fcc <accelerometer_sample+0x2b4>)
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f000 fcd1 	bl	800a8e0 <arm_q15_to_float>

	// Subtract mean from signal to remove DC component
	subtract_mean(vibration.x.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 8009f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f42:	4820      	ldr	r0, [pc, #128]	; (8009fc4 <accelerometer_sample+0x2ac>)
 8009f44:	f000 fc68 	bl	800a818 <subtract_mean>
	subtract_mean(vibration.y.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 8009f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f4c:	481e      	ldr	r0, [pc, #120]	; (8009fc8 <accelerometer_sample+0x2b0>)
 8009f4e:	f000 fc63 	bl	800a818 <subtract_mean>
	subtract_mean(vibration.z.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 8009f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f56:	481d      	ldr	r0, [pc, #116]	; (8009fcc <accelerometer_sample+0x2b4>)
 8009f58:	f000 fc5e 	bl	800a818 <subtract_mean>

	// Scale sensor output to correct value in g
	arm_scale_f32(vibration.x.acceleration.samples, ACCELEROMETER_G_RANGE, vibration.x.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 8009f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f60:	4918      	ldr	r1, [pc, #96]	; (8009fc4 <accelerometer_sample+0x2ac>)
 8009f62:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8009f66:	4817      	ldr	r0, [pc, #92]	; (8009fc4 <accelerometer_sample+0x2ac>)
 8009f68:	f000 fdfc 	bl	800ab64 <arm_scale_f32>
	arm_scale_f32(vibration.y.acceleration.samples, ACCELEROMETER_G_RANGE, vibration.y.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 8009f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f70:	4915      	ldr	r1, [pc, #84]	; (8009fc8 <accelerometer_sample+0x2b0>)
 8009f72:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8009f76:	4814      	ldr	r0, [pc, #80]	; (8009fc8 <accelerometer_sample+0x2b0>)
 8009f78:	f000 fdf4 	bl	800ab64 <arm_scale_f32>
	arm_scale_f32(vibration.z.acceleration.samples, ACCELEROMETER_G_RANGE, vibration.z.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 8009f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f80:	4912      	ldr	r1, [pc, #72]	; (8009fcc <accelerometer_sample+0x2b4>)
 8009f82:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8009f86:	4811      	ldr	r0, [pc, #68]	; (8009fcc <accelerometer_sample+0x2b4>)
 8009f88:	f000 fdec 	bl	800ab64 <arm_scale_f32>

	return status;
 8009f8c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8009f90:	f103 030f 	add.w	r3, r3, #15
 8009f94:	781b      	ldrb	r3, [r3, #0]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	f507 57c0 	add.w	r7, r7, #6144	; 0x1800
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	0800e290 	.word	0x0800e290
 8009fa8:	0800ea90 	.word	0x0800ea90
 8009fac:	0800f290 	.word	0x0800f290
 8009fb0:	20000308 	.word	0x20000308
 8009fb4:	200003e2 	.word	0x200003e2
 8009fb8:	20000214 	.word	0x20000214
 8009fbc:	20000024 	.word	0x20000024
 8009fc0:	0800e254 	.word	0x0800e254
 8009fc4:	200003fc 	.word	0x200003fc
 8009fc8:	2000345c 	.word	0x2000345c
 8009fcc:	200064bc 	.word	0x200064bc

08009fd0 <sensor_fillStruct>:

void sensor_fillStruct(struct sensor_values *sensor_value)
{
 8009fd0:	b590      	push	{r4, r7, lr}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
	 sensor_value->temperature = sensor_readTemperature();
 8009fd8:	f7ff fe44 	bl	8009c64 <sensor_readTemperature>
 8009fdc:	eef0 7a40 	vmov.f32	s15, s0
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	edc3 7a00 	vstr	s15, [r3]
	 sensor_printf_debug("value temp = %f",sensor_value->temperature);
 8009fe6:	4baa      	ldr	r3, [pc, #680]	; (800a290 <sensor_fillStruct+0x2c0>)
 8009fe8:	681c      	ldr	r4, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7f6 fab2 	bl	8000558 <__aeabi_f2d>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	49a6      	ldr	r1, [pc, #664]	; (800a294 <sensor_fillStruct+0x2c4>)
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f7ff fbaa 	bl	8009754 <printf_debug>
	 sensor_value->acc.x.crest = vibration.x.acceleration.crest.new;
 800a000:	4ba5      	ldr	r3, [pc, #660]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a006:	6a1a      	ldr	r2, [r3, #32]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	60da      	str	r2, [r3, #12]
	 sensor_value->acc.x.rms = vibration.x.acceleration.rms.new;
 800a00c:	4ba2      	ldr	r3, [pc, #648]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	605a      	str	r2, [r3, #4]
	 sensor_value->acc.x.peak = vibration.x.acceleration.peak.new;
 800a018:	4b9f      	ldr	r3, [pc, #636]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a01e:	695a      	ldr	r2, [r3, #20]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	609a      	str	r2, [r3, #8]

	 sensor_value->acc.y.crest = vibration.y.acceleration.crest.new;
 800a024:	4b9c      	ldr	r3, [pc, #624]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a026:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a02a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	619a      	str	r2, [r3, #24]
	 sensor_value->acc.y.rms = vibration.y.acceleration.rms.new;
 800a032:	4b99      	ldr	r3, [pc, #612]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a034:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a038:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	611a      	str	r2, [r3, #16]
	 sensor_value->acc.y.peak = vibration.y.acceleration.peak.new;
 800a03e:	4b96      	ldr	r3, [pc, #600]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a040:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a044:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	615a      	str	r2, [r3, #20]

	 sensor_value->acc.z.crest = vibration.z.acceleration.crest.new;
 800a04a:	4b93      	ldr	r3, [pc, #588]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a04c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800a050:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	625a      	str	r2, [r3, #36]	; 0x24
	 sensor_value->acc.z.rms = vibration.z.acceleration.rms.new;
 800a058:	4b8f      	ldr	r3, [pc, #572]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a05a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800a05e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	61da      	str	r2, [r3, #28]
	 sensor_value->acc.z.peak = vibration.z.acceleration.peak.new;
 800a066:	4b8c      	ldr	r3, [pc, #560]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a068:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800a06c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	621a      	str	r2, [r3, #32]

	 sensor_value->velo.x.crest = vibration.x.velocity.crest.new;
 800a074:	4b88      	ldr	r3, [pc, #544]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a076:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a07a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	631a      	str	r2, [r3, #48]	; 0x30
	 sensor_value->velo.x.rms = vibration.x.velocity.rms.new;
 800a080:	4b85      	ldr	r3, [pc, #532]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a082:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	629a      	str	r2, [r3, #40]	; 0x28
	 sensor_value->velo.x.peak = vibration.x.velocity.peak.new;
 800a08c:	4b82      	ldr	r3, [pc, #520]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a08e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	62da      	str	r2, [r3, #44]	; 0x2c

	 sensor_value->velo.y.crest = vibration.y.velocity.crest.new;
 800a098:	4b7f      	ldr	r3, [pc, #508]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a09a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800a09e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	63da      	str	r2, [r3, #60]	; 0x3c
	 sensor_value->velo.y.rms = vibration.y.velocity.rms.new;
 800a0a6:	4b7c      	ldr	r3, [pc, #496]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a0a8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800a0ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	635a      	str	r2, [r3, #52]	; 0x34
	 sensor_value->velo.y.peak = vibration.y.velocity.peak.new;
 800a0b4:	4b78      	ldr	r3, [pc, #480]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a0b6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800a0ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	639a      	str	r2, [r3, #56]	; 0x38

	 sensor_value->velo.z.crest = vibration.z.velocity.crest.new;
 800a0c2:	4b75      	ldr	r3, [pc, #468]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a0c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a0c8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	649a      	str	r2, [r3, #72]	; 0x48
	 sensor_value->velo.z.rms = vibration.z.velocity.rms.new;
 800a0d0:	4b71      	ldr	r3, [pc, #452]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a0d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a0d6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	641a      	str	r2, [r3, #64]	; 0x40
	 sensor_value->velo.z.peak = vibration.z.velocity.peak.new;
 800a0de:	4b6e      	ldr	r3, [pc, #440]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a0e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a0e4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	645a      	str	r2, [r3, #68]	; 0x44

	 sensor_value->disp.x.rms = vibration.x.displacement.rms.new;
 800a0ec:	4b6a      	ldr	r3, [pc, #424]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a0ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a0f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	64da      	str	r2, [r3, #76]	; 0x4c
	 sensor_value->disp.x.peak = vibration.x.displacement.peak.new;
 800a0f8:	4b67      	ldr	r3, [pc, #412]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a0fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a0fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	651a      	str	r2, [r3, #80]	; 0x50

	 sensor_value->disp.y.rms = vibration.y.displacement.rms.new;
 800a104:	4b64      	ldr	r3, [pc, #400]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a106:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a10a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	659a      	str	r2, [r3, #88]	; 0x58
	 sensor_value->disp.y.peak = vibration.y.displacement.peak.new;
 800a112:	4b61      	ldr	r3, [pc, #388]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a114:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a118:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	65da      	str	r2, [r3, #92]	; 0x5c

	 sensor_value->disp.z.rms = vibration.z.displacement.rms.new;
 800a120:	4b5d      	ldr	r3, [pc, #372]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a122:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800a126:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	665a      	str	r2, [r3, #100]	; 0x64
	 sensor_value->disp.z.peak = vibration.z.displacement.peak.new;
 800a12e:	4b5a      	ldr	r3, [pc, #360]	; (800a298 <sensor_fillStruct+0x2c8>)
 800a130:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800a134:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	669a      	str	r2, [r3, #104]	; 0x68

	 sensor_printf_debug("value temperature = %f", sensor_value->temperature);
 800a13c:	4b54      	ldr	r3, [pc, #336]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a13e:	681c      	ldr	r4, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4618      	mov	r0, r3
 800a146:	f7f6 fa07 	bl	8000558 <__aeabi_f2d>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	4953      	ldr	r1, [pc, #332]	; (800a29c <sensor_fillStruct+0x2cc>)
 800a150:	4620      	mov	r0, r4
 800a152:	f7ff faff 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value x acc rms = %f", sensor_value->acc.x.rms);
 800a156:	4b4e      	ldr	r3, [pc, #312]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a158:	681c      	ldr	r4, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	4618      	mov	r0, r3
 800a160:	f7f6 f9fa 	bl	8000558 <__aeabi_f2d>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	494d      	ldr	r1, [pc, #308]	; (800a2a0 <sensor_fillStruct+0x2d0>)
 800a16a:	4620      	mov	r0, r4
 800a16c:	f7ff faf2 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value x acc peak= %f", sensor_value->acc.x.peak);
 800a170:	4b47      	ldr	r3, [pc, #284]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a172:	681c      	ldr	r4, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	4618      	mov	r0, r3
 800a17a:	f7f6 f9ed 	bl	8000558 <__aeabi_f2d>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4948      	ldr	r1, [pc, #288]	; (800a2a4 <sensor_fillStruct+0x2d4>)
 800a184:	4620      	mov	r0, r4
 800a186:	f7ff fae5 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value x acc crest = %f", sensor_value->acc.x.crest);
 800a18a:	4b41      	ldr	r3, [pc, #260]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a18c:	681c      	ldr	r4, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	4618      	mov	r0, r3
 800a194:	f7f6 f9e0 	bl	8000558 <__aeabi_f2d>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4942      	ldr	r1, [pc, #264]	; (800a2a8 <sensor_fillStruct+0x2d8>)
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7ff fad8 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value y acc rms = %f", sensor_value->acc.y.rms);
 800a1a4:	4b3a      	ldr	r3, [pc, #232]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a1a6:	681c      	ldr	r4, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7f6 f9d3 	bl	8000558 <__aeabi_f2d>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	493d      	ldr	r1, [pc, #244]	; (800a2ac <sensor_fillStruct+0x2dc>)
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f7ff facb 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value y acc peak= %f", sensor_value->acc.y.peak);
 800a1be:	4b34      	ldr	r3, [pc, #208]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a1c0:	681c      	ldr	r4, [r3, #0]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	695b      	ldr	r3, [r3, #20]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7f6 f9c6 	bl	8000558 <__aeabi_f2d>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4937      	ldr	r1, [pc, #220]	; (800a2b0 <sensor_fillStruct+0x2e0>)
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f7ff fabe 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value y acc crest= %f", sensor_value->acc.y.crest);
 800a1d8:	4b2d      	ldr	r3, [pc, #180]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a1da:	681c      	ldr	r4, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7f6 f9b9 	bl	8000558 <__aeabi_f2d>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4932      	ldr	r1, [pc, #200]	; (800a2b4 <sensor_fillStruct+0x2e4>)
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f7ff fab1 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value z acc rms= %f", sensor_value->acc.z.rms);
 800a1f2:	4b27      	ldr	r3, [pc, #156]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a1f4:	681c      	ldr	r4, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	69db      	ldr	r3, [r3, #28]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7f6 f9ac 	bl	8000558 <__aeabi_f2d>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	492c      	ldr	r1, [pc, #176]	; (800a2b8 <sensor_fillStruct+0x2e8>)
 800a206:	4620      	mov	r0, r4
 800a208:	f7ff faa4 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value z acc peak= %f", sensor_value->acc.z.peak);
 800a20c:	4b20      	ldr	r3, [pc, #128]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a20e:	681c      	ldr	r4, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	4618      	mov	r0, r3
 800a216:	f7f6 f99f 	bl	8000558 <__aeabi_f2d>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	4927      	ldr	r1, [pc, #156]	; (800a2bc <sensor_fillStruct+0x2ec>)
 800a220:	4620      	mov	r0, r4
 800a222:	f7ff fa97 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value z acc crest = %f", sensor_value->acc.z.crest);
 800a226:	4b1a      	ldr	r3, [pc, #104]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a228:	681c      	ldr	r4, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	4618      	mov	r0, r3
 800a230:	f7f6 f992 	bl	8000558 <__aeabi_f2d>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4921      	ldr	r1, [pc, #132]	; (800a2c0 <sensor_fillStruct+0x2f0>)
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7ff fa8a 	bl	8009754 <printf_debug>

	 sensor_printf_debug("value x velo rms= %f", sensor_value->velo.x.rms);
 800a240:	4b13      	ldr	r3, [pc, #76]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a242:	681c      	ldr	r4, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a248:	4618      	mov	r0, r3
 800a24a:	f7f6 f985 	bl	8000558 <__aeabi_f2d>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	491c      	ldr	r1, [pc, #112]	; (800a2c4 <sensor_fillStruct+0x2f4>)
 800a254:	4620      	mov	r0, r4
 800a256:	f7ff fa7d 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value x velo peak= %f", sensor_value->velo.x.peak);
 800a25a:	4b0d      	ldr	r3, [pc, #52]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a25c:	681c      	ldr	r4, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a262:	4618      	mov	r0, r3
 800a264:	f7f6 f978 	bl	8000558 <__aeabi_f2d>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4916      	ldr	r1, [pc, #88]	; (800a2c8 <sensor_fillStruct+0x2f8>)
 800a26e:	4620      	mov	r0, r4
 800a270:	f7ff fa70 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value x velo crest= %f", sensor_value->velo.x.crest);
 800a274:	4b06      	ldr	r3, [pc, #24]	; (800a290 <sensor_fillStruct+0x2c0>)
 800a276:	681c      	ldr	r4, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7f6 f96b 	bl	8000558 <__aeabi_f2d>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4911      	ldr	r1, [pc, #68]	; (800a2cc <sensor_fillStruct+0x2fc>)
 800a288:	4620      	mov	r0, r4
 800a28a:	f7ff fa63 	bl	8009754 <printf_debug>
 800a28e:	e01f      	b.n	800a2d0 <sensor_fillStruct+0x300>
 800a290:	20000024 	.word	0x20000024
 800a294:	0800fa90 	.word	0x0800fa90
 800a298:	200003fc 	.word	0x200003fc
 800a29c:	0800faa0 	.word	0x0800faa0
 800a2a0:	0800fab8 	.word	0x0800fab8
 800a2a4:	0800fad0 	.word	0x0800fad0
 800a2a8:	0800fae8 	.word	0x0800fae8
 800a2ac:	0800fb00 	.word	0x0800fb00
 800a2b0:	0800fb18 	.word	0x0800fb18
 800a2b4:	0800fb30 	.word	0x0800fb30
 800a2b8:	0800fb48 	.word	0x0800fb48
 800a2bc:	0800fb5c 	.word	0x0800fb5c
 800a2c0:	0800fb74 	.word	0x0800fb74
 800a2c4:	0800fb8c 	.word	0x0800fb8c
 800a2c8:	0800fba4 	.word	0x0800fba4
 800a2cc:	0800fbbc 	.word	0x0800fbbc
	 sensor_printf_debug("value y velo rms= %f", sensor_value->velo.y.rms);
 800a2d0:	4b4f      	ldr	r3, [pc, #316]	; (800a410 <sensor_fillStruct+0x440>)
 800a2d2:	681c      	ldr	r4, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f6 f93d 	bl	8000558 <__aeabi_f2d>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	494c      	ldr	r1, [pc, #304]	; (800a414 <sensor_fillStruct+0x444>)
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f7ff fa35 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value y velo peak= %f", sensor_value->velo.y.peak);
 800a2ea:	4b49      	ldr	r3, [pc, #292]	; (800a410 <sensor_fillStruct+0x440>)
 800a2ec:	681c      	ldr	r4, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7f6 f930 	bl	8000558 <__aeabi_f2d>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4946      	ldr	r1, [pc, #280]	; (800a418 <sensor_fillStruct+0x448>)
 800a2fe:	4620      	mov	r0, r4
 800a300:	f7ff fa28 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value y velo crest= %f", sensor_value->velo.y.crest);
 800a304:	4b42      	ldr	r3, [pc, #264]	; (800a410 <sensor_fillStruct+0x440>)
 800a306:	681c      	ldr	r4, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7f6 f923 	bl	8000558 <__aeabi_f2d>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	4941      	ldr	r1, [pc, #260]	; (800a41c <sensor_fillStruct+0x44c>)
 800a318:	4620      	mov	r0, r4
 800a31a:	f7ff fa1b 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value z velo rms= %f", sensor_value->velo.z.rms);
 800a31e:	4b3c      	ldr	r3, [pc, #240]	; (800a410 <sensor_fillStruct+0x440>)
 800a320:	681c      	ldr	r4, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	4618      	mov	r0, r3
 800a328:	f7f6 f916 	bl	8000558 <__aeabi_f2d>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	493b      	ldr	r1, [pc, #236]	; (800a420 <sensor_fillStruct+0x450>)
 800a332:	4620      	mov	r0, r4
 800a334:	f7ff fa0e 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value z velo peak= %f", sensor_value->velo.z.peak);
 800a338:	4b35      	ldr	r3, [pc, #212]	; (800a410 <sensor_fillStruct+0x440>)
 800a33a:	681c      	ldr	r4, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a340:	4618      	mov	r0, r3
 800a342:	f7f6 f909 	bl	8000558 <__aeabi_f2d>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	4936      	ldr	r1, [pc, #216]	; (800a424 <sensor_fillStruct+0x454>)
 800a34c:	4620      	mov	r0, r4
 800a34e:	f7ff fa01 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value z velo crest= %f", sensor_value->velo.z.crest);
 800a352:	4b2f      	ldr	r3, [pc, #188]	; (800a410 <sensor_fillStruct+0x440>)
 800a354:	681c      	ldr	r4, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7f6 f8fc 	bl	8000558 <__aeabi_f2d>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4930      	ldr	r1, [pc, #192]	; (800a428 <sensor_fillStruct+0x458>)
 800a366:	4620      	mov	r0, r4
 800a368:	f7ff f9f4 	bl	8009754 <printf_debug>

	 sensor_printf_debug("value x disp rms= %f", sensor_value->disp.x.rms);
 800a36c:	4b28      	ldr	r3, [pc, #160]	; (800a410 <sensor_fillStruct+0x440>)
 800a36e:	681c      	ldr	r4, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a374:	4618      	mov	r0, r3
 800a376:	f7f6 f8ef 	bl	8000558 <__aeabi_f2d>
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	492b      	ldr	r1, [pc, #172]	; (800a42c <sensor_fillStruct+0x45c>)
 800a380:	4620      	mov	r0, r4
 800a382:	f7ff f9e7 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value x disp peak= %f", sensor_value->disp.x.peak);
 800a386:	4b22      	ldr	r3, [pc, #136]	; (800a410 <sensor_fillStruct+0x440>)
 800a388:	681c      	ldr	r4, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a38e:	4618      	mov	r0, r3
 800a390:	f7f6 f8e2 	bl	8000558 <__aeabi_f2d>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4925      	ldr	r1, [pc, #148]	; (800a430 <sensor_fillStruct+0x460>)
 800a39a:	4620      	mov	r0, r4
 800a39c:	f7ff f9da 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value y disp rms= %f", sensor_value->disp.y.rms);
 800a3a0:	4b1b      	ldr	r3, [pc, #108]	; (800a410 <sensor_fillStruct+0x440>)
 800a3a2:	681c      	ldr	r4, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7f6 f8d5 	bl	8000558 <__aeabi_f2d>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4920      	ldr	r1, [pc, #128]	; (800a434 <sensor_fillStruct+0x464>)
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f7ff f9cd 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value y disp peak= %f", sensor_value->disp.y.peak);
 800a3ba:	4b15      	ldr	r3, [pc, #84]	; (800a410 <sensor_fillStruct+0x440>)
 800a3bc:	681c      	ldr	r4, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7f6 f8c8 	bl	8000558 <__aeabi_f2d>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	491a      	ldr	r1, [pc, #104]	; (800a438 <sensor_fillStruct+0x468>)
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f7ff f9c0 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value z disp rms= %f", sensor_value->disp.z.rms);
 800a3d4:	4b0e      	ldr	r3, [pc, #56]	; (800a410 <sensor_fillStruct+0x440>)
 800a3d6:	681c      	ldr	r4, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7f6 f8bb 	bl	8000558 <__aeabi_f2d>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	4915      	ldr	r1, [pc, #84]	; (800a43c <sensor_fillStruct+0x46c>)
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f7ff f9b3 	bl	8009754 <printf_debug>
	 sensor_printf_debug("value z disp peak= %f", sensor_value->disp.z.peak);
 800a3ee:	4b08      	ldr	r3, [pc, #32]	; (800a410 <sensor_fillStruct+0x440>)
 800a3f0:	681c      	ldr	r4, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f6 f8ae 	bl	8000558 <__aeabi_f2d>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	490f      	ldr	r1, [pc, #60]	; (800a440 <sensor_fillStruct+0x470>)
 800a402:	4620      	mov	r0, r4
 800a404:	f7ff f9a6 	bl	8009754 <printf_debug>
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd90      	pop	{r4, r7, pc}
 800a410:	20000024 	.word	0x20000024
 800a414:	0800fbd4 	.word	0x0800fbd4
 800a418:	0800fbec 	.word	0x0800fbec
 800a41c:	0800fc04 	.word	0x0800fc04
 800a420:	0800fc1c 	.word	0x0800fc1c
 800a424:	0800fc34 	.word	0x0800fc34
 800a428:	0800fc4c 	.word	0x0800fc4c
 800a42c:	0800fc64 	.word	0x0800fc64
 800a430:	0800fc7c 	.word	0x0800fc7c
 800a434:	0800fc94 	.word	0x0800fc94
 800a438:	0800fcac 	.word	0x0800fcac
 800a43c:	0800fcc4 	.word	0x0800fcc4
 800a440:	0800fcdc 	.word	0x0800fcdc

0800a444 <convert_to_velocity>:
 */

#include "vibration_math.h"

void convert_to_velocity()
{
 800a444:	b580      	push	{r7, lr}
 800a446:	f5ad 5d40 	sub.w	sp, sp, #12288	; 0x3000
 800a44a:	af00      	add	r7, sp, #0
	float32_t z_temp_samples[VIBRATION_SAMPLE_SIZE];

	/* Convert to velocity in mm/s */

	// First convert g to mm/s^2
	arm_scale_f32(vibration.x.acceleration.samples, G_TO_MMS2, x_temp_samples, VIBRATION_SAMPLE_SIZE);
 800a44c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800a450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a454:	4619      	mov	r1, r3
 800a456:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800a4e8 <convert_to_velocity+0xa4>
 800a45a:	4824      	ldr	r0, [pc, #144]	; (800a4ec <convert_to_velocity+0xa8>)
 800a45c:	f000 fb82 	bl	800ab64 <arm_scale_f32>
	arm_scale_f32(vibration.y.acceleration.samples, G_TO_MMS2, y_temp_samples, VIBRATION_SAMPLE_SIZE);
 800a460:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a468:	4619      	mov	r1, r3
 800a46a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800a4e8 <convert_to_velocity+0xa4>
 800a46e:	4820      	ldr	r0, [pc, #128]	; (800a4f0 <convert_to_velocity+0xac>)
 800a470:	f000 fb78 	bl	800ab64 <arm_scale_f32>
	arm_scale_f32(vibration.z.acceleration.samples, G_TO_MMS2, z_temp_samples, VIBRATION_SAMPLE_SIZE);
 800a474:	463b      	mov	r3, r7
 800a476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a47a:	4619      	mov	r1, r3
 800a47c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a4e8 <convert_to_velocity+0xa4>
 800a480:	481c      	ldr	r0, [pc, #112]	; (800a4f4 <convert_to_velocity+0xb0>)
 800a482:	f000 fb6f 	bl	800ab64 <arm_scale_f32>

	// Then calculate the integral (mm/s^2 -> mm/s)
	numerical_integrate(x_temp_samples, vibration.x.velocity.samples, ACCELEROMETER_SAMPLE_RATE, VIBRATION_SAMPLE_SIZE);
 800a486:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800a48a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a48e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a4f8 <convert_to_velocity+0xb4>
 800a492:	491a      	ldr	r1, [pc, #104]	; (800a4fc <convert_to_velocity+0xb8>)
 800a494:	4618      	mov	r0, r3
 800a496:	f000 f9eb 	bl	800a870 <numerical_integrate>
	numerical_integrate(y_temp_samples, vibration.y.velocity.samples, ACCELEROMETER_SAMPLE_RATE, VIBRATION_SAMPLE_SIZE);
 800a49a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800a49e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a4a2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800a4f8 <convert_to_velocity+0xb4>
 800a4a6:	4916      	ldr	r1, [pc, #88]	; (800a500 <convert_to_velocity+0xbc>)
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 f9e1 	bl	800a870 <numerical_integrate>
	numerical_integrate(z_temp_samples, vibration.z.velocity.samples, ACCELEROMETER_SAMPLE_RATE, VIBRATION_SAMPLE_SIZE);
 800a4ae:	463b      	mov	r3, r7
 800a4b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a4b4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a4f8 <convert_to_velocity+0xb4>
 800a4b8:	4912      	ldr	r1, [pc, #72]	; (800a504 <convert_to_velocity+0xc0>)
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 f9d8 	bl	800a870 <numerical_integrate>

	// Remove DC component
	subtract_mean(vibration.x.velocity.samples, VIBRATION_SAMPLE_SIZE);
 800a4c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4c4:	480d      	ldr	r0, [pc, #52]	; (800a4fc <convert_to_velocity+0xb8>)
 800a4c6:	f000 f9a7 	bl	800a818 <subtract_mean>
	subtract_mean(vibration.y.velocity.samples, VIBRATION_SAMPLE_SIZE);
 800a4ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4ce:	480c      	ldr	r0, [pc, #48]	; (800a500 <convert_to_velocity+0xbc>)
 800a4d0:	f000 f9a2 	bl	800a818 <subtract_mean>
	subtract_mean(vibration.z.velocity.samples, VIBRATION_SAMPLE_SIZE);
 800a4d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4d8:	480a      	ldr	r0, [pc, #40]	; (800a504 <convert_to_velocity+0xc0>)
 800a4da:	f000 f99d 	bl	800a818 <subtract_mean>
}
 800a4de:	bf00      	nop
 800a4e0:	f507 5740 	add.w	r7, r7, #12288	; 0x3000
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	46193a9a 	.word	0x46193a9a
 800a4ec:	200003fc 	.word	0x200003fc
 800a4f0:	2000345c 	.word	0x2000345c
 800a4f4:	200064bc 	.word	0x200064bc
 800a4f8:	45480000 	.word	0x45480000
 800a4fc:	20001420 	.word	0x20001420
 800a500:	20004480 	.word	0x20004480
 800a504:	200074e0 	.word	0x200074e0

0800a508 <convert_to_displacement>:

void convert_to_displacement()
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0
	// Calculate the integral (mm/s -> mm)
	numerical_integrate(vibration.x.velocity.samples, vibration.x.displacement.samples, ACCELEROMETER_SAMPLE_RATE, VIBRATION_SAMPLE_SIZE);
 800a50c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a510:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a560 <convert_to_displacement+0x58>
 800a514:	4913      	ldr	r1, [pc, #76]	; (800a564 <convert_to_displacement+0x5c>)
 800a516:	4814      	ldr	r0, [pc, #80]	; (800a568 <convert_to_displacement+0x60>)
 800a518:	f000 f9aa 	bl	800a870 <numerical_integrate>
	numerical_integrate(vibration.y.velocity.samples, vibration.y.displacement.samples, ACCELEROMETER_SAMPLE_RATE, VIBRATION_SAMPLE_SIZE);
 800a51c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a520:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800a560 <convert_to_displacement+0x58>
 800a524:	4911      	ldr	r1, [pc, #68]	; (800a56c <convert_to_displacement+0x64>)
 800a526:	4812      	ldr	r0, [pc, #72]	; (800a570 <convert_to_displacement+0x68>)
 800a528:	f000 f9a2 	bl	800a870 <numerical_integrate>
	numerical_integrate(vibration.z.velocity.samples, vibration.z.displacement.samples, ACCELEROMETER_SAMPLE_RATE, VIBRATION_SAMPLE_SIZE);
 800a52c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a530:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800a560 <convert_to_displacement+0x58>
 800a534:	490f      	ldr	r1, [pc, #60]	; (800a574 <convert_to_displacement+0x6c>)
 800a536:	4810      	ldr	r0, [pc, #64]	; (800a578 <convert_to_displacement+0x70>)
 800a538:	f000 f99a 	bl	800a870 <numerical_integrate>

	// Remove DC component
	subtract_mean(vibration.x.displacement.samples, VIBRATION_SAMPLE_SIZE);
 800a53c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a540:	4808      	ldr	r0, [pc, #32]	; (800a564 <convert_to_displacement+0x5c>)
 800a542:	f000 f969 	bl	800a818 <subtract_mean>
	subtract_mean(vibration.y.displacement.samples, VIBRATION_SAMPLE_SIZE);
 800a546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a54a:	4808      	ldr	r0, [pc, #32]	; (800a56c <convert_to_displacement+0x64>)
 800a54c:	f000 f964 	bl	800a818 <subtract_mean>
	subtract_mean(vibration.z.displacement.samples, VIBRATION_SAMPLE_SIZE);
 800a550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a554:	4807      	ldr	r0, [pc, #28]	; (800a574 <convert_to_displacement+0x6c>)
 800a556:	f000 f95f 	bl	800a818 <subtract_mean>
}
 800a55a:	bf00      	nop
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	45480000 	.word	0x45480000
 800a564:	20002444 	.word	0x20002444
 800a568:	20001420 	.word	0x20001420
 800a56c:	200054a4 	.word	0x200054a4
 800a570:	20004480 	.word	0x20004480
 800a574:	20008504 	.word	0x20008504
 800a578:	200074e0 	.word	0x200074e0

0800a57c <vibration_statistics>:

void vibration_statistics()
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
	uint32_t peakIndex; // unused, necessary parameter for arm_max_f32

	// Calculate statistics for acceleration
	// For x axis
	// RMS (Root Mean Square)
	arm_rms_f32(vibration.x.acceleration.samples, VIBRATION_SAMPLE_SIZE, &vibration.x.acceleration.rms.new);
 800a582:	4a8a      	ldr	r2, [pc, #552]	; (800a7ac <vibration_statistics+0x230>)
 800a584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a588:	4889      	ldr	r0, [pc, #548]	; (800a7b0 <vibration_statistics+0x234>)
 800a58a:	f000 f9f9 	bl	800a980 <arm_rms_f32>

	// Peak (absolute maximum)
	arm_abs_f32(vibration.x.acceleration.samples, vibration.x.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 800a58e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a592:	4987      	ldr	r1, [pc, #540]	; (800a7b0 <vibration_statistics+0x234>)
 800a594:	4886      	ldr	r0, [pc, #536]	; (800a7b0 <vibration_statistics+0x234>)
 800a596:	f000 fb51 	bl	800ac3c <arm_abs_f32>
	arm_max_f32(vibration.x.acceleration.samples, VIBRATION_SAMPLE_SIZE, &vibration.x.acceleration.peak.new, &peakIndex);
 800a59a:	1d3b      	adds	r3, r7, #4
 800a59c:	4a85      	ldr	r2, [pc, #532]	; (800a7b4 <vibration_statistics+0x238>)
 800a59e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5a2:	4883      	ldr	r0, [pc, #524]	; (800a7b0 <vibration_statistics+0x234>)
 800a5a4:	f000 fa76 	bl	800aa94 <arm_max_f32>

	// Crest (RMS divided by peak)
	vibration.x.acceleration.crest.new = vibration.x.acceleration.peak.new / vibration.x.acceleration.rms.new;
 800a5a8:	4b81      	ldr	r3, [pc, #516]	; (800a7b0 <vibration_statistics+0x234>)
 800a5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ae:	edd3 6a05 	vldr	s13, [r3, #20]
 800a5b2:	4b7f      	ldr	r3, [pc, #508]	; (800a7b0 <vibration_statistics+0x234>)
 800a5b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b8:	ed93 7a02 	vldr	s14, [r3, #8]
 800a5bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5c0:	4b7b      	ldr	r3, [pc, #492]	; (800a7b0 <vibration_statistics+0x234>)
 800a5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c6:	edc3 7a08 	vstr	s15, [r3, #32]

	// For y axis
	arm_rms_f32(vibration.y.acceleration.samples, VIBRATION_SAMPLE_SIZE, &vibration.y.acceleration.rms.new);
 800a5ca:	4a7b      	ldr	r2, [pc, #492]	; (800a7b8 <vibration_statistics+0x23c>)
 800a5cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5d0:	487a      	ldr	r0, [pc, #488]	; (800a7bc <vibration_statistics+0x240>)
 800a5d2:	f000 f9d5 	bl	800a980 <arm_rms_f32>
	arm_abs_f32(vibration.y.acceleration.samples, vibration.y.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 800a5d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a5da:	4978      	ldr	r1, [pc, #480]	; (800a7bc <vibration_statistics+0x240>)
 800a5dc:	4877      	ldr	r0, [pc, #476]	; (800a7bc <vibration_statistics+0x240>)
 800a5de:	f000 fb2d 	bl	800ac3c <arm_abs_f32>
	arm_max_f32(vibration.y.acceleration.samples, VIBRATION_SAMPLE_SIZE, &vibration.y.acceleration.peak.new, &peakIndex);
 800a5e2:	1d3b      	adds	r3, r7, #4
 800a5e4:	4a76      	ldr	r2, [pc, #472]	; (800a7c0 <vibration_statistics+0x244>)
 800a5e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5ea:	4874      	ldr	r0, [pc, #464]	; (800a7bc <vibration_statistics+0x240>)
 800a5ec:	f000 fa52 	bl	800aa94 <arm_max_f32>
	vibration.y.acceleration.crest.new = vibration.y.acceleration.peak.new / vibration.y.acceleration.rms.new;
 800a5f0:	4b6f      	ldr	r3, [pc, #444]	; (800a7b0 <vibration_statistics+0x234>)
 800a5f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a5f6:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800a5fa:	4b6d      	ldr	r3, [pc, #436]	; (800a7b0 <vibration_statistics+0x234>)
 800a5fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a600:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800a604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a608:	4b69      	ldr	r3, [pc, #420]	; (800a7b0 <vibration_statistics+0x234>)
 800a60a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a60e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

	// For z axis
	arm_rms_f32(vibration.z.acceleration.samples, VIBRATION_SAMPLE_SIZE, &vibration.z.acceleration.rms.new);
 800a612:	4a6c      	ldr	r2, [pc, #432]	; (800a7c4 <vibration_statistics+0x248>)
 800a614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a618:	486b      	ldr	r0, [pc, #428]	; (800a7c8 <vibration_statistics+0x24c>)
 800a61a:	f000 f9b1 	bl	800a980 <arm_rms_f32>
	arm_abs_f32(vibration.z.acceleration.samples, vibration.z.acceleration.samples, VIBRATION_SAMPLE_SIZE);
 800a61e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a622:	4969      	ldr	r1, [pc, #420]	; (800a7c8 <vibration_statistics+0x24c>)
 800a624:	4868      	ldr	r0, [pc, #416]	; (800a7c8 <vibration_statistics+0x24c>)
 800a626:	f000 fb09 	bl	800ac3c <arm_abs_f32>
	arm_max_f32(vibration.z.acceleration.samples, VIBRATION_SAMPLE_SIZE, &vibration.z.acceleration.peak.new, &peakIndex);
 800a62a:	1d3b      	adds	r3, r7, #4
 800a62c:	4a67      	ldr	r2, [pc, #412]	; (800a7cc <vibration_statistics+0x250>)
 800a62e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a632:	4865      	ldr	r0, [pc, #404]	; (800a7c8 <vibration_statistics+0x24c>)
 800a634:	f000 fa2e 	bl	800aa94 <arm_max_f32>
	vibration.z.acceleration.crest.new = vibration.z.acceleration.peak.new / vibration.z.acceleration.rms.new;
 800a638:	4b5d      	ldr	r3, [pc, #372]	; (800a7b0 <vibration_statistics+0x234>)
 800a63a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800a63e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800a642:	4b5b      	ldr	r3, [pc, #364]	; (800a7b0 <vibration_statistics+0x234>)
 800a644:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800a648:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 800a64c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a650:	4b57      	ldr	r3, [pc, #348]	; (800a7b0 <vibration_statistics+0x234>)
 800a652:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800a656:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0

	// Calculate statistics for velocity
	arm_rms_f32(vibration.x.velocity.samples, VIBRATION_SAMPLE_SIZE, &vibration.x.velocity.rms.new);
 800a65a:	4a5d      	ldr	r2, [pc, #372]	; (800a7d0 <vibration_statistics+0x254>)
 800a65c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a660:	485c      	ldr	r0, [pc, #368]	; (800a7d4 <vibration_statistics+0x258>)
 800a662:	f000 f98d 	bl	800a980 <arm_rms_f32>
	arm_abs_f32(vibration.x.velocity.samples, vibration.x.velocity.samples, VIBRATION_SAMPLE_SIZE);
 800a666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a66a:	495a      	ldr	r1, [pc, #360]	; (800a7d4 <vibration_statistics+0x258>)
 800a66c:	4859      	ldr	r0, [pc, #356]	; (800a7d4 <vibration_statistics+0x258>)
 800a66e:	f000 fae5 	bl	800ac3c <arm_abs_f32>
	arm_max_f32(vibration.x.velocity.samples, VIBRATION_SAMPLE_SIZE, &vibration.x.velocity.peak.new, &peakIndex);
 800a672:	1d3b      	adds	r3, r7, #4
 800a674:	4a58      	ldr	r2, [pc, #352]	; (800a7d8 <vibration_statistics+0x25c>)
 800a676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a67a:	4856      	ldr	r0, [pc, #344]	; (800a7d4 <vibration_statistics+0x258>)
 800a67c:	f000 fa0a 	bl	800aa94 <arm_max_f32>
	vibration.x.velocity.crest.new = vibration.x.velocity.peak.new / vibration.x.velocity.rms.new;
 800a680:	4b4b      	ldr	r3, [pc, #300]	; (800a7b0 <vibration_statistics+0x234>)
 800a682:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a686:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800a68a:	4b49      	ldr	r3, [pc, #292]	; (800a7b0 <vibration_statistics+0x234>)
 800a68c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a690:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800a694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a698:	4b45      	ldr	r3, [pc, #276]	; (800a7b0 <vibration_statistics+0x234>)
 800a69a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a69e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	arm_rms_f32(vibration.y.velocity.samples, VIBRATION_SAMPLE_SIZE, &vibration.y.velocity.rms.new);
 800a6a2:	4a4e      	ldr	r2, [pc, #312]	; (800a7dc <vibration_statistics+0x260>)
 800a6a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a6a8:	484d      	ldr	r0, [pc, #308]	; (800a7e0 <vibration_statistics+0x264>)
 800a6aa:	f000 f969 	bl	800a980 <arm_rms_f32>
	arm_abs_f32(vibration.y.velocity.samples, vibration.y.velocity.samples, VIBRATION_SAMPLE_SIZE);
 800a6ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6b2:	494b      	ldr	r1, [pc, #300]	; (800a7e0 <vibration_statistics+0x264>)
 800a6b4:	484a      	ldr	r0, [pc, #296]	; (800a7e0 <vibration_statistics+0x264>)
 800a6b6:	f000 fac1 	bl	800ac3c <arm_abs_f32>
	arm_max_f32(vibration.y.velocity.samples, VIBRATION_SAMPLE_SIZE, &vibration.y.velocity.peak.new, &peakIndex);
 800a6ba:	1d3b      	adds	r3, r7, #4
 800a6bc:	4a49      	ldr	r2, [pc, #292]	; (800a7e4 <vibration_statistics+0x268>)
 800a6be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a6c2:	4847      	ldr	r0, [pc, #284]	; (800a7e0 <vibration_statistics+0x264>)
 800a6c4:	f000 f9e6 	bl	800aa94 <arm_max_f32>
	vibration.y.velocity.crest.new = vibration.y.velocity.peak.new / vibration.y.velocity.rms.new;
 800a6c8:	4b39      	ldr	r3, [pc, #228]	; (800a7b0 <vibration_statistics+0x234>)
 800a6ca:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800a6ce:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800a6d2:	4b37      	ldr	r3, [pc, #220]	; (800a7b0 <vibration_statistics+0x234>)
 800a6d4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800a6d8:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800a6dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6e0:	4b33      	ldr	r3, [pc, #204]	; (800a7b0 <vibration_statistics+0x234>)
 800a6e2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800a6e6:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

	arm_rms_f32(vibration.z.velocity.samples, VIBRATION_SAMPLE_SIZE, &vibration.z.velocity.rms.new);
 800a6ea:	4a3f      	ldr	r2, [pc, #252]	; (800a7e8 <vibration_statistics+0x26c>)
 800a6ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a6f0:	483e      	ldr	r0, [pc, #248]	; (800a7ec <vibration_statistics+0x270>)
 800a6f2:	f000 f945 	bl	800a980 <arm_rms_f32>
	arm_abs_f32(vibration.z.velocity.samples, vibration.z.velocity.samples, VIBRATION_SAMPLE_SIZE);
 800a6f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6fa:	493c      	ldr	r1, [pc, #240]	; (800a7ec <vibration_statistics+0x270>)
 800a6fc:	483b      	ldr	r0, [pc, #236]	; (800a7ec <vibration_statistics+0x270>)
 800a6fe:	f000 fa9d 	bl	800ac3c <arm_abs_f32>
	arm_max_f32(vibration.z.velocity.samples, VIBRATION_SAMPLE_SIZE, &vibration.z.velocity.peak.new, &peakIndex);
 800a702:	1d3b      	adds	r3, r7, #4
 800a704:	4a3a      	ldr	r2, [pc, #232]	; (800a7f0 <vibration_statistics+0x274>)
 800a706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a70a:	4838      	ldr	r0, [pc, #224]	; (800a7ec <vibration_statistics+0x270>)
 800a70c:	f000 f9c2 	bl	800aa94 <arm_max_f32>
	vibration.z.velocity.crest.new = vibration.z.velocity.peak.new / vibration.z.velocity.rms.new;
 800a710:	4b27      	ldr	r3, [pc, #156]	; (800a7b0 <vibration_statistics+0x234>)
 800a712:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a716:	edd3 6a3e 	vldr	s13, [r3, #248]	; 0xf8
 800a71a:	4b25      	ldr	r3, [pc, #148]	; (800a7b0 <vibration_statistics+0x234>)
 800a71c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a720:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 800a724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a728:	4b21      	ldr	r3, [pc, #132]	; (800a7b0 <vibration_statistics+0x234>)
 800a72a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a72e:	edc3 7a41 	vstr	s15, [r3, #260]	; 0x104

	// Calculate statistics for displacement
	arm_rms_f32(vibration.x.displacement.samples, VIBRATION_SAMPLE_SIZE, &vibration.x.displacement.rms.new);
 800a732:	4a30      	ldr	r2, [pc, #192]	; (800a7f4 <vibration_statistics+0x278>)
 800a734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a738:	482f      	ldr	r0, [pc, #188]	; (800a7f8 <vibration_statistics+0x27c>)
 800a73a:	f000 f921 	bl	800a980 <arm_rms_f32>
	arm_abs_f32(vibration.x.displacement.samples, vibration.x.displacement.samples, VIBRATION_SAMPLE_SIZE);
 800a73e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a742:	492d      	ldr	r1, [pc, #180]	; (800a7f8 <vibration_statistics+0x27c>)
 800a744:	482c      	ldr	r0, [pc, #176]	; (800a7f8 <vibration_statistics+0x27c>)
 800a746:	f000 fa79 	bl	800ac3c <arm_abs_f32>
	arm_max_f32(vibration.x.displacement.samples, VIBRATION_SAMPLE_SIZE, &vibration.x.displacement.peak.new, &peakIndex);
 800a74a:	1d3b      	adds	r3, r7, #4
 800a74c:	4a2b      	ldr	r2, [pc, #172]	; (800a7fc <vibration_statistics+0x280>)
 800a74e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a752:	4829      	ldr	r0, [pc, #164]	; (800a7f8 <vibration_statistics+0x27c>)
 800a754:	f000 f99e 	bl	800aa94 <arm_max_f32>

	arm_rms_f32(vibration.y.displacement.samples, VIBRATION_SAMPLE_SIZE, &vibration.y.displacement.rms.new);
 800a758:	4a29      	ldr	r2, [pc, #164]	; (800a800 <vibration_statistics+0x284>)
 800a75a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a75e:	4829      	ldr	r0, [pc, #164]	; (800a804 <vibration_statistics+0x288>)
 800a760:	f000 f90e 	bl	800a980 <arm_rms_f32>
	arm_abs_f32(vibration.y.displacement.samples, vibration.y.displacement.samples, VIBRATION_SAMPLE_SIZE);
 800a764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a768:	4926      	ldr	r1, [pc, #152]	; (800a804 <vibration_statistics+0x288>)
 800a76a:	4826      	ldr	r0, [pc, #152]	; (800a804 <vibration_statistics+0x288>)
 800a76c:	f000 fa66 	bl	800ac3c <arm_abs_f32>
	arm_max_f32(vibration.y.displacement.samples, VIBRATION_SAMPLE_SIZE, &vibration.y.displacement.peak.new, &peakIndex);
 800a770:	1d3b      	adds	r3, r7, #4
 800a772:	4a25      	ldr	r2, [pc, #148]	; (800a808 <vibration_statistics+0x28c>)
 800a774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a778:	4822      	ldr	r0, [pc, #136]	; (800a804 <vibration_statistics+0x288>)
 800a77a:	f000 f98b 	bl	800aa94 <arm_max_f32>

	arm_rms_f32(vibration.z.displacement.samples, VIBRATION_SAMPLE_SIZE, &vibration.z.displacement.rms.new);
 800a77e:	4a23      	ldr	r2, [pc, #140]	; (800a80c <vibration_statistics+0x290>)
 800a780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a784:	4822      	ldr	r0, [pc, #136]	; (800a810 <vibration_statistics+0x294>)
 800a786:	f000 f8fb 	bl	800a980 <arm_rms_f32>
	arm_abs_f32(vibration.z.displacement.samples, vibration.z.displacement.samples, VIBRATION_SAMPLE_SIZE);
 800a78a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a78e:	4920      	ldr	r1, [pc, #128]	; (800a810 <vibration_statistics+0x294>)
 800a790:	481f      	ldr	r0, [pc, #124]	; (800a810 <vibration_statistics+0x294>)
 800a792:	f000 fa53 	bl	800ac3c <arm_abs_f32>
	arm_max_f32(vibration.z.displacement.samples, VIBRATION_SAMPLE_SIZE, &vibration.z.displacement.peak.new, &peakIndex);
 800a796:	1d3b      	adds	r3, r7, #4
 800a798:	4a1e      	ldr	r2, [pc, #120]	; (800a814 <vibration_statistics+0x298>)
 800a79a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a79e:	481c      	ldr	r0, [pc, #112]	; (800a810 <vibration_statistics+0x294>)
 800a7a0:	f000 f978 	bl	800aa94 <arm_max_f32>
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20001404 	.word	0x20001404
 800a7b0:	200003fc 	.word	0x200003fc
 800a7b4:	20001410 	.word	0x20001410
 800a7b8:	20004464 	.word	0x20004464
 800a7bc:	2000345c 	.word	0x2000345c
 800a7c0:	20004470 	.word	0x20004470
 800a7c4:	200074c4 	.word	0x200074c4
 800a7c8:	200064bc 	.word	0x200064bc
 800a7cc:	200074d0 	.word	0x200074d0
 800a7d0:	20002428 	.word	0x20002428
 800a7d4:	20001420 	.word	0x20001420
 800a7d8:	20002434 	.word	0x20002434
 800a7dc:	20005488 	.word	0x20005488
 800a7e0:	20004480 	.word	0x20004480
 800a7e4:	20005494 	.word	0x20005494
 800a7e8:	200084e8 	.word	0x200084e8
 800a7ec:	200074e0 	.word	0x200074e0
 800a7f0:	200084f4 	.word	0x200084f4
 800a7f4:	2000344c 	.word	0x2000344c
 800a7f8:	20002444 	.word	0x20002444
 800a7fc:	20003458 	.word	0x20003458
 800a800:	200064ac 	.word	0x200064ac
 800a804:	200054a4 	.word	0x200054a4
 800a808:	200064b8 	.word	0x200064b8
 800a80c:	2000950c 	.word	0x2000950c
 800a810:	20008504 	.word	0x20008504
 800a814:	20009518 	.word	0x20009518

0800a818 <subtract_mean>:

void subtract_mean(float32_t *inputVector, uint16_t vectorSize)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	460b      	mov	r3, r1
 800a822:	807b      	strh	r3, [r7, #2]
	float32_t Mean;

	arm_mean_f32(inputVector, vectorSize, &Mean);
 800a824:	887b      	ldrh	r3, [r7, #2]
 800a826:	f107 020c 	add.w	r2, r7, #12
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f8fd 	bl	800aa2c <arm_mean_f32>
	Mean *= -1.0;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	4618      	mov	r0, r3
 800a836:	f7f5 fe8f 	bl	8000558 <__aeabi_f2d>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4610      	mov	r0, r2
 800a840:	4619      	mov	r1, r3
 800a842:	f7f6 f9d9 	bl	8000bf8 <__aeabi_d2f>
 800a846:	4603      	mov	r3, r0
 800a848:	ee07 3a90 	vmov	s15, r3
 800a84c:	eef1 7a67 	vneg.f32	s15, s15
 800a850:	edc7 7a03 	vstr	s15, [r7, #12]
	arm_offset_f32(inputVector, Mean, inputVector, vectorSize);
 800a854:	edd7 7a03 	vldr	s15, [r7, #12]
 800a858:	887b      	ldrh	r3, [r7, #2]
 800a85a:	461a      	mov	r2, r3
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	eeb0 0a67 	vmov.f32	s0, s15
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f9b4 	bl	800abd0 <arm_offset_f32>
}
 800a868:	bf00      	nop
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <numerical_integrate>:

void numerical_integrate(float32_t *inputVector, float32_t *integratedVector, float32_t sampleRate, uint32_t vectorSize)
{
 800a870:	b480      	push	{r7}
 800a872:	b087      	sub	sp, #28
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	ed87 0a01 	vstr	s0, [r7, #4]
 800a87e:	603a      	str	r2, [r7, #0]
	// Start at 0
	integratedVector[0] = 0;
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	f04f 0200 	mov.w	r2, #0
 800a886:	601a      	str	r2, [r3, #0]

	for (uint16_t i = 0; i < vectorSize-1; i++)
 800a888:	2300      	movs	r3, #0
 800a88a:	82fb      	strh	r3, [r7, #22]
 800a88c:	e01b      	b.n	800a8c6 <numerical_integrate+0x56>
	{
		integratedVector[i+1] = integratedVector[i] + (inputVector[i] / sampleRate);
 800a88e:	8afb      	ldrh	r3, [r7, #22]
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	4413      	add	r3, r2
 800a896:	ed93 7a00 	vldr	s14, [r3]
 800a89a:	8afb      	ldrh	r3, [r7, #22]
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	ed93 6a00 	vldr	s12, [r3]
 800a8a6:	edd7 6a01 	vldr	s13, [r7, #4]
 800a8aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a8ae:	8afb      	ldrh	r3, [r7, #22]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8bc:	edc3 7a00 	vstr	s15, [r3]
	for (uint16_t i = 0; i < vectorSize-1; i++)
 800a8c0:	8afb      	ldrh	r3, [r7, #22]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	82fb      	strh	r3, [r7, #22]
 800a8c6:	8afa      	ldrh	r2, [r7, #22]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d3de      	bcc.n	800a88e <numerical_integrate+0x1e>
	}
}
 800a8d0:	bf00      	nop
 800a8d2:	bf00      	nop
 800a8d4:	371c      	adds	r7, #28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
	...

0800a8e0 <arm_q15_to_float>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	0896      	lsrs	r6, r2, #2
 800a8e4:	d038      	beq.n	800a958 <arm_q15_to_float+0x78>
 800a8e6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a97c <arm_q15_to_float+0x9c>
 800a8ea:	f101 0410 	add.w	r4, r1, #16
 800a8ee:	f100 0308 	add.w	r3, r0, #8
 800a8f2:	4635      	mov	r5, r6
 800a8f4:	f933 ec08 	ldrsh.w	lr, [r3, #-8]
 800a8f8:	ee07 ea90 	vmov	s15, lr
 800a8fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a900:	3d01      	subs	r5, #1
 800a902:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a906:	f103 0308 	add.w	r3, r3, #8
 800a90a:	ed44 7a04 	vstr	s15, [r4, #-16]
 800a90e:	f933 ec0e 	ldrsh.w	lr, [r3, #-14]
 800a912:	ee07 ea90 	vmov	s15, lr
 800a916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a91a:	f104 0410 	add.w	r4, r4, #16
 800a91e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a922:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 800a926:	f933 ec0c 	ldrsh.w	lr, [r3, #-12]
 800a92a:	ee07 ea90 	vmov	s15, lr
 800a92e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a932:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a936:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800a93a:	f933 ec0a 	ldrsh.w	lr, [r3, #-10]
 800a93e:	ee07 ea90 	vmov	s15, lr
 800a942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a94a:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800a94e:	d1d1      	bne.n	800a8f4 <arm_q15_to_float+0x14>
 800a950:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800a954:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800a958:	f012 0203 	ands.w	r2, r2, #3
 800a95c:	d00d      	beq.n	800a97a <arm_q15_to_float+0x9a>
 800a95e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a97c <arm_q15_to_float+0x9c>
 800a962:	f930 3b02 	ldrsh.w	r3, [r0], #2
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a96e:	3a01      	subs	r2, #1
 800a970:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a974:	ece1 7a01 	vstmia	r1!, {s15}
 800a978:	d1f3      	bne.n	800a962 <arm_q15_to_float+0x82>
 800a97a:	bd70      	pop	{r4, r5, r6, pc}
 800a97c:	38000000 	.word	0x38000000

0800a980 <arm_rms_f32>:
 800a980:	b530      	push	{r4, r5, lr}
 800a982:	088d      	lsrs	r5, r1, #2
 800a984:	b083      	sub	sp, #12
 800a986:	eddf 5a28 	vldr	s11, [pc, #160]	; 800aa28 <arm_rms_f32+0xa8>
 800a98a:	d020      	beq.n	800a9ce <arm_rms_f32+0x4e>
 800a98c:	f100 0310 	add.w	r3, r0, #16
 800a990:	462c      	mov	r4, r5
 800a992:	ed53 6a04 	vldr	s13, [r3, #-16]
 800a996:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a99a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a99e:	ed13 6a01 	vldr	s12, [r3, #-4]
 800a9a2:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800a9a6:	ee27 7a07 	vmul.f32	s14, s14, s14
 800a9aa:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a9ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a9b2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a9b6:	ee26 6a06 	vmul.f32	s12, s12, s12
 800a9ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9be:	3c01      	subs	r4, #1
 800a9c0:	f103 0310 	add.w	r3, r3, #16
 800a9c4:	ee76 5a27 	vadd.f32	s11, s12, s15
 800a9c8:	d1e3      	bne.n	800a992 <arm_rms_f32+0x12>
 800a9ca:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a9ce:	f011 0303 	ands.w	r3, r1, #3
 800a9d2:	d007      	beq.n	800a9e4 <arm_rms_f32+0x64>
 800a9d4:	ecb0 6a01 	vldmia	r0!, {s12}
 800a9d8:	ee26 6a06 	vmul.f32	s12, s12, s12
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	ee75 5a86 	vadd.f32	s11, s11, s12
 800a9e2:	d1f7      	bne.n	800a9d4 <arm_rms_f32+0x54>
 800a9e4:	ee07 1a90 	vmov	s15, r1
 800a9e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800a9f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fa:	da02      	bge.n	800aa02 <arm_rms_f32+0x82>
 800a9fc:	6013      	str	r3, [r2, #0]
 800a9fe:	b003      	add	sp, #12
 800aa00:	bd30      	pop	{r4, r5, pc}
 800aa02:	eeb1 0ac7 	vsqrt.f32	s0, s14
 800aa06:	eeb4 0a40 	vcmp.f32	s0, s0
 800aa0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa0e:	d103      	bne.n	800aa18 <arm_rms_f32+0x98>
 800aa10:	ed82 0a00 	vstr	s0, [r2]
 800aa14:	b003      	add	sp, #12
 800aa16:	bd30      	pop	{r4, r5, pc}
 800aa18:	eeb0 0a47 	vmov.f32	s0, s14
 800aa1c:	9201      	str	r2, [sp, #4]
 800aa1e:	f003 f8e7 	bl	800dbf0 <sqrtf>
 800aa22:	9a01      	ldr	r2, [sp, #4]
 800aa24:	e7f4      	b.n	800aa10 <arm_rms_f32+0x90>
 800aa26:	bf00      	nop
 800aa28:	00000000 	.word	0x00000000

0800aa2c <arm_mean_f32>:
 800aa2c:	b430      	push	{r4, r5}
 800aa2e:	088d      	lsrs	r5, r1, #2
 800aa30:	eddf 7a17 	vldr	s15, [pc, #92]	; 800aa90 <arm_mean_f32+0x64>
 800aa34:	d018      	beq.n	800aa68 <arm_mean_f32+0x3c>
 800aa36:	f100 0310 	add.w	r3, r0, #16
 800aa3a:	462c      	mov	r4, r5
 800aa3c:	ed13 7a04 	vldr	s14, [r3, #-16]
 800aa40:	ed53 5a03 	vldr	s11, [r3, #-12]
 800aa44:	ed13 6a02 	vldr	s12, [r3, #-8]
 800aa48:	ed53 6a01 	vldr	s13, [r3, #-4]
 800aa4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa50:	3c01      	subs	r4, #1
 800aa52:	ee77 7a25 	vadd.f32	s15, s14, s11
 800aa56:	f103 0310 	add.w	r3, r3, #16
 800aa5a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aa5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa62:	d1eb      	bne.n	800aa3c <arm_mean_f32+0x10>
 800aa64:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800aa68:	f011 0303 	ands.w	r3, r1, #3
 800aa6c:	d005      	beq.n	800aa7a <arm_mean_f32+0x4e>
 800aa6e:	ecb0 7a01 	vldmia	r0!, {s14}
 800aa72:	3b01      	subs	r3, #1
 800aa74:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa78:	d1f9      	bne.n	800aa6e <arm_mean_f32+0x42>
 800aa7a:	ee07 1a10 	vmov	s14, r1
 800aa7e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aa82:	bc30      	pop	{r4, r5}
 800aa84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa88:	edc2 6a00 	vstr	s13, [r2]
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	00000000 	.word	0x00000000

0800aa94 <arm_max_f32>:
 800aa94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa98:	1e4f      	subs	r7, r1, #1
 800aa9a:	ea5f 0897 	movs.w	r8, r7, lsr #2
 800aa9e:	f100 0e04 	add.w	lr, r0, #4
 800aaa2:	edd0 7a00 	vldr	s15, [r0]
 800aaa6:	d058      	beq.n	800ab5a <arm_max_f32+0xc6>
 800aaa8:	3014      	adds	r0, #20
 800aaaa:	46c4      	mov	ip, r8
 800aaac:	2604      	movs	r6, #4
 800aaae:	2400      	movs	r4, #0
 800aab0:	ed10 6a04 	vldr	s12, [r0, #-16]
 800aab4:	ed50 6a03 	vldr	s13, [r0, #-12]
 800aab8:	ed10 7a02 	vldr	s14, [r0, #-8]
 800aabc:	ed50 5a01 	vldr	s11, [r0, #-4]
 800aac0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800aac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac8:	bfc8      	it	gt
 800aaca:	eef0 7a46 	vmovgt.f32	s15, s12
 800aace:	f1a6 0503 	sub.w	r5, r6, #3
 800aad2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800aad6:	bfc8      	it	gt
 800aad8:	462c      	movgt	r4, r5
 800aada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aade:	bf48      	it	mi
 800aae0:	eef0 7a66 	vmovmi.f32	s15, s13
 800aae4:	f1a6 0502 	sub.w	r5, r6, #2
 800aae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaec:	bf48      	it	mi
 800aaee:	462c      	movmi	r4, r5
 800aaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf4:	bf48      	it	mi
 800aaf6:	eef0 7a47 	vmovmi.f32	s15, s14
 800aafa:	f106 35ff 	add.w	r5, r6, #4294967295
 800aafe:	eef4 7ae5 	vcmpe.f32	s15, s11
 800ab02:	bf48      	it	mi
 800ab04:	462c      	movmi	r4, r5
 800ab06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab0a:	bf48      	it	mi
 800ab0c:	4634      	movmi	r4, r6
 800ab0e:	bf48      	it	mi
 800ab10:	eef0 7a65 	vmovmi.f32	s15, s11
 800ab14:	f1bc 0c01 	subs.w	ip, ip, #1
 800ab18:	f100 0010 	add.w	r0, r0, #16
 800ab1c:	f106 0604 	add.w	r6, r6, #4
 800ab20:	d1c6      	bne.n	800aab0 <arm_max_f32+0x1c>
 800ab22:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800ab26:	f017 0003 	ands.w	r0, r7, #3
 800ab2a:	d018      	beq.n	800ab5e <arm_max_f32+0xca>
 800ab2c:	1a08      	subs	r0, r1, r0
 800ab2e:	ecbe 7a01 	vldmia	lr!, {s14}
 800ab32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3a:	bfc8      	it	gt
 800ab3c:	4604      	movgt	r4, r0
 800ab3e:	f100 0001 	add.w	r0, r0, #1
 800ab42:	bfd8      	it	le
 800ab44:	eeb0 7a67 	vmovle.f32	s14, s15
 800ab48:	4281      	cmp	r1, r0
 800ab4a:	eef0 7a47 	vmov.f32	s15, s14
 800ab4e:	d1ee      	bne.n	800ab2e <arm_max_f32+0x9a>
 800ab50:	ed82 7a00 	vstr	s14, [r2]
 800ab54:	601c      	str	r4, [r3, #0]
 800ab56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab5a:	4644      	mov	r4, r8
 800ab5c:	e7e3      	b.n	800ab26 <arm_max_f32+0x92>
 800ab5e:	eeb0 7a67 	vmov.f32	s14, s15
 800ab62:	e7f5      	b.n	800ab50 <arm_max_f32+0xbc>

0800ab64 <arm_scale_f32>:
 800ab64:	b470      	push	{r4, r5, r6}
 800ab66:	0896      	lsrs	r6, r2, #2
 800ab68:	d025      	beq.n	800abb6 <arm_scale_f32+0x52>
 800ab6a:	f100 0410 	add.w	r4, r0, #16
 800ab6e:	f101 0310 	add.w	r3, r1, #16
 800ab72:	4635      	mov	r5, r6
 800ab74:	ed14 6a04 	vldr	s12, [r4, #-16]
 800ab78:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ab7c:	ed14 7a02 	vldr	s14, [r4, #-8]
 800ab80:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ab84:	ee26 6a00 	vmul.f32	s12, s12, s0
 800ab88:	ee66 6a80 	vmul.f32	s13, s13, s0
 800ab8c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800ab90:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ab94:	3d01      	subs	r5, #1
 800ab96:	ed03 6a04 	vstr	s12, [r3, #-16]
 800ab9a:	ed43 6a03 	vstr	s13, [r3, #-12]
 800ab9e:	ed03 7a02 	vstr	s14, [r3, #-8]
 800aba2:	ed43 7a01 	vstr	s15, [r3, #-4]
 800aba6:	f104 0410 	add.w	r4, r4, #16
 800abaa:	f103 0310 	add.w	r3, r3, #16
 800abae:	d1e1      	bne.n	800ab74 <arm_scale_f32+0x10>
 800abb0:	0136      	lsls	r6, r6, #4
 800abb2:	4430      	add	r0, r6
 800abb4:	4431      	add	r1, r6
 800abb6:	f012 0203 	ands.w	r2, r2, #3
 800abba:	d007      	beq.n	800abcc <arm_scale_f32+0x68>
 800abbc:	ecf0 7a01 	vldmia	r0!, {s15}
 800abc0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800abc4:	3a01      	subs	r2, #1
 800abc6:	ece1 7a01 	vstmia	r1!, {s15}
 800abca:	d1f7      	bne.n	800abbc <arm_scale_f32+0x58>
 800abcc:	bc70      	pop	{r4, r5, r6}
 800abce:	4770      	bx	lr

0800abd0 <arm_offset_f32>:
 800abd0:	b470      	push	{r4, r5, r6}
 800abd2:	0896      	lsrs	r6, r2, #2
 800abd4:	d025      	beq.n	800ac22 <arm_offset_f32+0x52>
 800abd6:	f100 0410 	add.w	r4, r0, #16
 800abda:	f101 0310 	add.w	r3, r1, #16
 800abde:	4635      	mov	r5, r6
 800abe0:	ed14 6a04 	vldr	s12, [r4, #-16]
 800abe4:	ed54 6a03 	vldr	s13, [r4, #-12]
 800abe8:	ed14 7a02 	vldr	s14, [r4, #-8]
 800abec:	ed54 7a01 	vldr	s15, [r4, #-4]
 800abf0:	ee36 6a00 	vadd.f32	s12, s12, s0
 800abf4:	ee76 6a80 	vadd.f32	s13, s13, s0
 800abf8:	ee30 7a07 	vadd.f32	s14, s0, s14
 800abfc:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ac00:	3d01      	subs	r5, #1
 800ac02:	ed03 6a04 	vstr	s12, [r3, #-16]
 800ac06:	ed43 6a03 	vstr	s13, [r3, #-12]
 800ac0a:	ed03 7a02 	vstr	s14, [r3, #-8]
 800ac0e:	ed43 7a01 	vstr	s15, [r3, #-4]
 800ac12:	f104 0410 	add.w	r4, r4, #16
 800ac16:	f103 0310 	add.w	r3, r3, #16
 800ac1a:	d1e1      	bne.n	800abe0 <arm_offset_f32+0x10>
 800ac1c:	0136      	lsls	r6, r6, #4
 800ac1e:	4430      	add	r0, r6
 800ac20:	4431      	add	r1, r6
 800ac22:	f012 0203 	ands.w	r2, r2, #3
 800ac26:	d007      	beq.n	800ac38 <arm_offset_f32+0x68>
 800ac28:	ecf0 7a01 	vldmia	r0!, {s15}
 800ac2c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ac30:	3a01      	subs	r2, #1
 800ac32:	ece1 7a01 	vstmia	r1!, {s15}
 800ac36:	d1f7      	bne.n	800ac28 <arm_offset_f32+0x58>
 800ac38:	bc70      	pop	{r4, r5, r6}
 800ac3a:	4770      	bx	lr

0800ac3c <arm_abs_f32>:
 800ac3c:	b470      	push	{r4, r5, r6}
 800ac3e:	0896      	lsrs	r6, r2, #2
 800ac40:	d025      	beq.n	800ac8e <arm_abs_f32+0x52>
 800ac42:	f100 0410 	add.w	r4, r0, #16
 800ac46:	f101 0310 	add.w	r3, r1, #16
 800ac4a:	4635      	mov	r5, r6
 800ac4c:	ed14 6a04 	vldr	s12, [r4, #-16]
 800ac50:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ac54:	ed14 7a02 	vldr	s14, [r4, #-8]
 800ac58:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ac5c:	eeb0 6ac6 	vabs.f32	s12, s12
 800ac60:	eef0 6ae6 	vabs.f32	s13, s13
 800ac64:	eeb0 7ac7 	vabs.f32	s14, s14
 800ac68:	eef0 7ae7 	vabs.f32	s15, s15
 800ac6c:	3d01      	subs	r5, #1
 800ac6e:	ed03 6a04 	vstr	s12, [r3, #-16]
 800ac72:	ed43 6a03 	vstr	s13, [r3, #-12]
 800ac76:	ed03 7a02 	vstr	s14, [r3, #-8]
 800ac7a:	ed43 7a01 	vstr	s15, [r3, #-4]
 800ac7e:	f104 0410 	add.w	r4, r4, #16
 800ac82:	f103 0310 	add.w	r3, r3, #16
 800ac86:	d1e1      	bne.n	800ac4c <arm_abs_f32+0x10>
 800ac88:	0136      	lsls	r6, r6, #4
 800ac8a:	4430      	add	r0, r6
 800ac8c:	4431      	add	r1, r6
 800ac8e:	f012 0203 	ands.w	r2, r2, #3
 800ac92:	d007      	beq.n	800aca4 <arm_abs_f32+0x68>
 800ac94:	ecf0 7a01 	vldmia	r0!, {s15}
 800ac98:	3a01      	subs	r2, #1
 800ac9a:	eef0 7ae7 	vabs.f32	s15, s15
 800ac9e:	ece1 7a01 	vstmia	r1!, {s15}
 800aca2:	d1f7      	bne.n	800ac94 <arm_abs_f32+0x58>
 800aca4:	bc70      	pop	{r4, r5, r6}
 800aca6:	4770      	bx	lr

0800aca8 <__errno>:
 800aca8:	4b01      	ldr	r3, [pc, #4]	; (800acb0 <__errno+0x8>)
 800acaa:	6818      	ldr	r0, [r3, #0]
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	20000028 	.word	0x20000028

0800acb4 <__libc_init_array>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	4d0d      	ldr	r5, [pc, #52]	; (800acec <__libc_init_array+0x38>)
 800acb8:	4c0d      	ldr	r4, [pc, #52]	; (800acf0 <__libc_init_array+0x3c>)
 800acba:	1b64      	subs	r4, r4, r5
 800acbc:	10a4      	asrs	r4, r4, #2
 800acbe:	2600      	movs	r6, #0
 800acc0:	42a6      	cmp	r6, r4
 800acc2:	d109      	bne.n	800acd8 <__libc_init_array+0x24>
 800acc4:	4d0b      	ldr	r5, [pc, #44]	; (800acf4 <__libc_init_array+0x40>)
 800acc6:	4c0c      	ldr	r4, [pc, #48]	; (800acf8 <__libc_init_array+0x44>)
 800acc8:	f002 ffb4 	bl	800dc34 <_init>
 800accc:	1b64      	subs	r4, r4, r5
 800acce:	10a4      	asrs	r4, r4, #2
 800acd0:	2600      	movs	r6, #0
 800acd2:	42a6      	cmp	r6, r4
 800acd4:	d105      	bne.n	800ace2 <__libc_init_array+0x2e>
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acdc:	4798      	blx	r3
 800acde:	3601      	adds	r6, #1
 800ace0:	e7ee      	b.n	800acc0 <__libc_init_array+0xc>
 800ace2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ace6:	4798      	blx	r3
 800ace8:	3601      	adds	r6, #1
 800acea:	e7f2      	b.n	800acd2 <__libc_init_array+0x1e>
 800acec:	0801024c 	.word	0x0801024c
 800acf0:	0801024c 	.word	0x0801024c
 800acf4:	0801024c 	.word	0x0801024c
 800acf8:	08010250 	.word	0x08010250

0800acfc <memcpy>:
 800acfc:	440a      	add	r2, r1
 800acfe:	4291      	cmp	r1, r2
 800ad00:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad04:	d100      	bne.n	800ad08 <memcpy+0xc>
 800ad06:	4770      	bx	lr
 800ad08:	b510      	push	{r4, lr}
 800ad0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad12:	4291      	cmp	r1, r2
 800ad14:	d1f9      	bne.n	800ad0a <memcpy+0xe>
 800ad16:	bd10      	pop	{r4, pc}

0800ad18 <memset>:
 800ad18:	4402      	add	r2, r0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d100      	bne.n	800ad22 <memset+0xa>
 800ad20:	4770      	bx	lr
 800ad22:	f803 1b01 	strb.w	r1, [r3], #1
 800ad26:	e7f9      	b.n	800ad1c <memset+0x4>

0800ad28 <__cvt>:
 800ad28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2c:	ec55 4b10 	vmov	r4, r5, d0
 800ad30:	2d00      	cmp	r5, #0
 800ad32:	460e      	mov	r6, r1
 800ad34:	4619      	mov	r1, r3
 800ad36:	462b      	mov	r3, r5
 800ad38:	bfbb      	ittet	lt
 800ad3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad3e:	461d      	movlt	r5, r3
 800ad40:	2300      	movge	r3, #0
 800ad42:	232d      	movlt	r3, #45	; 0x2d
 800ad44:	700b      	strb	r3, [r1, #0]
 800ad46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad4c:	4691      	mov	r9, r2
 800ad4e:	f023 0820 	bic.w	r8, r3, #32
 800ad52:	bfbc      	itt	lt
 800ad54:	4622      	movlt	r2, r4
 800ad56:	4614      	movlt	r4, r2
 800ad58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad5c:	d005      	beq.n	800ad6a <__cvt+0x42>
 800ad5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad62:	d100      	bne.n	800ad66 <__cvt+0x3e>
 800ad64:	3601      	adds	r6, #1
 800ad66:	2102      	movs	r1, #2
 800ad68:	e000      	b.n	800ad6c <__cvt+0x44>
 800ad6a:	2103      	movs	r1, #3
 800ad6c:	ab03      	add	r3, sp, #12
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	ab02      	add	r3, sp, #8
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	ec45 4b10 	vmov	d0, r4, r5
 800ad78:	4653      	mov	r3, sl
 800ad7a:	4632      	mov	r2, r6
 800ad7c:	f000 fd34 	bl	800b7e8 <_dtoa_r>
 800ad80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad84:	4607      	mov	r7, r0
 800ad86:	d102      	bne.n	800ad8e <__cvt+0x66>
 800ad88:	f019 0f01 	tst.w	r9, #1
 800ad8c:	d022      	beq.n	800add4 <__cvt+0xac>
 800ad8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad92:	eb07 0906 	add.w	r9, r7, r6
 800ad96:	d110      	bne.n	800adba <__cvt+0x92>
 800ad98:	783b      	ldrb	r3, [r7, #0]
 800ad9a:	2b30      	cmp	r3, #48	; 0x30
 800ad9c:	d10a      	bne.n	800adb4 <__cvt+0x8c>
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2300      	movs	r3, #0
 800ada2:	4620      	mov	r0, r4
 800ada4:	4629      	mov	r1, r5
 800ada6:	f7f5 fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 800adaa:	b918      	cbnz	r0, 800adb4 <__cvt+0x8c>
 800adac:	f1c6 0601 	rsb	r6, r6, #1
 800adb0:	f8ca 6000 	str.w	r6, [sl]
 800adb4:	f8da 3000 	ldr.w	r3, [sl]
 800adb8:	4499      	add	r9, r3
 800adba:	2200      	movs	r2, #0
 800adbc:	2300      	movs	r3, #0
 800adbe:	4620      	mov	r0, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	f7f5 fe89 	bl	8000ad8 <__aeabi_dcmpeq>
 800adc6:	b108      	cbz	r0, 800adcc <__cvt+0xa4>
 800adc8:	f8cd 900c 	str.w	r9, [sp, #12]
 800adcc:	2230      	movs	r2, #48	; 0x30
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	454b      	cmp	r3, r9
 800add2:	d307      	bcc.n	800ade4 <__cvt+0xbc>
 800add4:	9b03      	ldr	r3, [sp, #12]
 800add6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800add8:	1bdb      	subs	r3, r3, r7
 800adda:	4638      	mov	r0, r7
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	b004      	add	sp, #16
 800ade0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade4:	1c59      	adds	r1, r3, #1
 800ade6:	9103      	str	r1, [sp, #12]
 800ade8:	701a      	strb	r2, [r3, #0]
 800adea:	e7f0      	b.n	800adce <__cvt+0xa6>

0800adec <__exponent>:
 800adec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adee:	4603      	mov	r3, r0
 800adf0:	2900      	cmp	r1, #0
 800adf2:	bfb8      	it	lt
 800adf4:	4249      	neglt	r1, r1
 800adf6:	f803 2b02 	strb.w	r2, [r3], #2
 800adfa:	bfb4      	ite	lt
 800adfc:	222d      	movlt	r2, #45	; 0x2d
 800adfe:	222b      	movge	r2, #43	; 0x2b
 800ae00:	2909      	cmp	r1, #9
 800ae02:	7042      	strb	r2, [r0, #1]
 800ae04:	dd2a      	ble.n	800ae5c <__exponent+0x70>
 800ae06:	f10d 0407 	add.w	r4, sp, #7
 800ae0a:	46a4      	mov	ip, r4
 800ae0c:	270a      	movs	r7, #10
 800ae0e:	46a6      	mov	lr, r4
 800ae10:	460a      	mov	r2, r1
 800ae12:	fb91 f6f7 	sdiv	r6, r1, r7
 800ae16:	fb07 1516 	mls	r5, r7, r6, r1
 800ae1a:	3530      	adds	r5, #48	; 0x30
 800ae1c:	2a63      	cmp	r2, #99	; 0x63
 800ae1e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ae26:	4631      	mov	r1, r6
 800ae28:	dcf1      	bgt.n	800ae0e <__exponent+0x22>
 800ae2a:	3130      	adds	r1, #48	; 0x30
 800ae2c:	f1ae 0502 	sub.w	r5, lr, #2
 800ae30:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ae34:	1c44      	adds	r4, r0, #1
 800ae36:	4629      	mov	r1, r5
 800ae38:	4561      	cmp	r1, ip
 800ae3a:	d30a      	bcc.n	800ae52 <__exponent+0x66>
 800ae3c:	f10d 0209 	add.w	r2, sp, #9
 800ae40:	eba2 020e 	sub.w	r2, r2, lr
 800ae44:	4565      	cmp	r5, ip
 800ae46:	bf88      	it	hi
 800ae48:	2200      	movhi	r2, #0
 800ae4a:	4413      	add	r3, r2
 800ae4c:	1a18      	subs	r0, r3, r0
 800ae4e:	b003      	add	sp, #12
 800ae50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae56:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ae5a:	e7ed      	b.n	800ae38 <__exponent+0x4c>
 800ae5c:	2330      	movs	r3, #48	; 0x30
 800ae5e:	3130      	adds	r1, #48	; 0x30
 800ae60:	7083      	strb	r3, [r0, #2]
 800ae62:	70c1      	strb	r1, [r0, #3]
 800ae64:	1d03      	adds	r3, r0, #4
 800ae66:	e7f1      	b.n	800ae4c <__exponent+0x60>

0800ae68 <_printf_float>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	ed2d 8b02 	vpush	{d8}
 800ae70:	b08d      	sub	sp, #52	; 0x34
 800ae72:	460c      	mov	r4, r1
 800ae74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ae78:	4616      	mov	r6, r2
 800ae7a:	461f      	mov	r7, r3
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	f001 faa1 	bl	800c3c4 <_localeconv_r>
 800ae82:	f8d0 a000 	ldr.w	sl, [r0]
 800ae86:	4650      	mov	r0, sl
 800ae88:	f7f5 f9aa 	bl	80001e0 <strlen>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	9305      	str	r3, [sp, #20]
 800ae94:	f8d8 3000 	ldr.w	r3, [r8]
 800ae98:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ae9c:	3307      	adds	r3, #7
 800ae9e:	f023 0307 	bic.w	r3, r3, #7
 800aea2:	f103 0208 	add.w	r2, r3, #8
 800aea6:	f8c8 2000 	str.w	r2, [r8]
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aeb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aeb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aeba:	9307      	str	r3, [sp, #28]
 800aebc:	f8cd 8018 	str.w	r8, [sp, #24]
 800aec0:	ee08 0a10 	vmov	s16, r0
 800aec4:	4b9f      	ldr	r3, [pc, #636]	; (800b144 <_printf_float+0x2dc>)
 800aec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeca:	f04f 32ff 	mov.w	r2, #4294967295
 800aece:	f7f5 fe35 	bl	8000b3c <__aeabi_dcmpun>
 800aed2:	bb88      	cbnz	r0, 800af38 <_printf_float+0xd0>
 800aed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aed8:	4b9a      	ldr	r3, [pc, #616]	; (800b144 <_printf_float+0x2dc>)
 800aeda:	f04f 32ff 	mov.w	r2, #4294967295
 800aede:	f7f5 fe0f 	bl	8000b00 <__aeabi_dcmple>
 800aee2:	bb48      	cbnz	r0, 800af38 <_printf_float+0xd0>
 800aee4:	2200      	movs	r2, #0
 800aee6:	2300      	movs	r3, #0
 800aee8:	4640      	mov	r0, r8
 800aeea:	4649      	mov	r1, r9
 800aeec:	f7f5 fdfe 	bl	8000aec <__aeabi_dcmplt>
 800aef0:	b110      	cbz	r0, 800aef8 <_printf_float+0x90>
 800aef2:	232d      	movs	r3, #45	; 0x2d
 800aef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aef8:	4b93      	ldr	r3, [pc, #588]	; (800b148 <_printf_float+0x2e0>)
 800aefa:	4894      	ldr	r0, [pc, #592]	; (800b14c <_printf_float+0x2e4>)
 800aefc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800af00:	bf94      	ite	ls
 800af02:	4698      	movls	r8, r3
 800af04:	4680      	movhi	r8, r0
 800af06:	2303      	movs	r3, #3
 800af08:	6123      	str	r3, [r4, #16]
 800af0a:	9b05      	ldr	r3, [sp, #20]
 800af0c:	f023 0204 	bic.w	r2, r3, #4
 800af10:	6022      	str	r2, [r4, #0]
 800af12:	f04f 0900 	mov.w	r9, #0
 800af16:	9700      	str	r7, [sp, #0]
 800af18:	4633      	mov	r3, r6
 800af1a:	aa0b      	add	r2, sp, #44	; 0x2c
 800af1c:	4621      	mov	r1, r4
 800af1e:	4628      	mov	r0, r5
 800af20:	f000 f9d8 	bl	800b2d4 <_printf_common>
 800af24:	3001      	adds	r0, #1
 800af26:	f040 8090 	bne.w	800b04a <_printf_float+0x1e2>
 800af2a:	f04f 30ff 	mov.w	r0, #4294967295
 800af2e:	b00d      	add	sp, #52	; 0x34
 800af30:	ecbd 8b02 	vpop	{d8}
 800af34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af38:	4642      	mov	r2, r8
 800af3a:	464b      	mov	r3, r9
 800af3c:	4640      	mov	r0, r8
 800af3e:	4649      	mov	r1, r9
 800af40:	f7f5 fdfc 	bl	8000b3c <__aeabi_dcmpun>
 800af44:	b140      	cbz	r0, 800af58 <_printf_float+0xf0>
 800af46:	464b      	mov	r3, r9
 800af48:	2b00      	cmp	r3, #0
 800af4a:	bfbc      	itt	lt
 800af4c:	232d      	movlt	r3, #45	; 0x2d
 800af4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800af52:	487f      	ldr	r0, [pc, #508]	; (800b150 <_printf_float+0x2e8>)
 800af54:	4b7f      	ldr	r3, [pc, #508]	; (800b154 <_printf_float+0x2ec>)
 800af56:	e7d1      	b.n	800aefc <_printf_float+0x94>
 800af58:	6863      	ldr	r3, [r4, #4]
 800af5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800af5e:	9206      	str	r2, [sp, #24]
 800af60:	1c5a      	adds	r2, r3, #1
 800af62:	d13f      	bne.n	800afe4 <_printf_float+0x17c>
 800af64:	2306      	movs	r3, #6
 800af66:	6063      	str	r3, [r4, #4]
 800af68:	9b05      	ldr	r3, [sp, #20]
 800af6a:	6861      	ldr	r1, [r4, #4]
 800af6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800af70:	2300      	movs	r3, #0
 800af72:	9303      	str	r3, [sp, #12]
 800af74:	ab0a      	add	r3, sp, #40	; 0x28
 800af76:	e9cd b301 	strd	fp, r3, [sp, #4]
 800af7a:	ab09      	add	r3, sp, #36	; 0x24
 800af7c:	ec49 8b10 	vmov	d0, r8, r9
 800af80:	9300      	str	r3, [sp, #0]
 800af82:	6022      	str	r2, [r4, #0]
 800af84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af88:	4628      	mov	r0, r5
 800af8a:	f7ff fecd 	bl	800ad28 <__cvt>
 800af8e:	9b06      	ldr	r3, [sp, #24]
 800af90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af92:	2b47      	cmp	r3, #71	; 0x47
 800af94:	4680      	mov	r8, r0
 800af96:	d108      	bne.n	800afaa <_printf_float+0x142>
 800af98:	1cc8      	adds	r0, r1, #3
 800af9a:	db02      	blt.n	800afa2 <_printf_float+0x13a>
 800af9c:	6863      	ldr	r3, [r4, #4]
 800af9e:	4299      	cmp	r1, r3
 800afa0:	dd41      	ble.n	800b026 <_printf_float+0x1be>
 800afa2:	f1ab 0b02 	sub.w	fp, fp, #2
 800afa6:	fa5f fb8b 	uxtb.w	fp, fp
 800afaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800afae:	d820      	bhi.n	800aff2 <_printf_float+0x18a>
 800afb0:	3901      	subs	r1, #1
 800afb2:	465a      	mov	r2, fp
 800afb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800afb8:	9109      	str	r1, [sp, #36]	; 0x24
 800afba:	f7ff ff17 	bl	800adec <__exponent>
 800afbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afc0:	1813      	adds	r3, r2, r0
 800afc2:	2a01      	cmp	r2, #1
 800afc4:	4681      	mov	r9, r0
 800afc6:	6123      	str	r3, [r4, #16]
 800afc8:	dc02      	bgt.n	800afd0 <_printf_float+0x168>
 800afca:	6822      	ldr	r2, [r4, #0]
 800afcc:	07d2      	lsls	r2, r2, #31
 800afce:	d501      	bpl.n	800afd4 <_printf_float+0x16c>
 800afd0:	3301      	adds	r3, #1
 800afd2:	6123      	str	r3, [r4, #16]
 800afd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d09c      	beq.n	800af16 <_printf_float+0xae>
 800afdc:	232d      	movs	r3, #45	; 0x2d
 800afde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afe2:	e798      	b.n	800af16 <_printf_float+0xae>
 800afe4:	9a06      	ldr	r2, [sp, #24]
 800afe6:	2a47      	cmp	r2, #71	; 0x47
 800afe8:	d1be      	bne.n	800af68 <_printf_float+0x100>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1bc      	bne.n	800af68 <_printf_float+0x100>
 800afee:	2301      	movs	r3, #1
 800aff0:	e7b9      	b.n	800af66 <_printf_float+0xfe>
 800aff2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aff6:	d118      	bne.n	800b02a <_printf_float+0x1c2>
 800aff8:	2900      	cmp	r1, #0
 800affa:	6863      	ldr	r3, [r4, #4]
 800affc:	dd0b      	ble.n	800b016 <_printf_float+0x1ae>
 800affe:	6121      	str	r1, [r4, #16]
 800b000:	b913      	cbnz	r3, 800b008 <_printf_float+0x1a0>
 800b002:	6822      	ldr	r2, [r4, #0]
 800b004:	07d0      	lsls	r0, r2, #31
 800b006:	d502      	bpl.n	800b00e <_printf_float+0x1a6>
 800b008:	3301      	adds	r3, #1
 800b00a:	440b      	add	r3, r1
 800b00c:	6123      	str	r3, [r4, #16]
 800b00e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b010:	f04f 0900 	mov.w	r9, #0
 800b014:	e7de      	b.n	800afd4 <_printf_float+0x16c>
 800b016:	b913      	cbnz	r3, 800b01e <_printf_float+0x1b6>
 800b018:	6822      	ldr	r2, [r4, #0]
 800b01a:	07d2      	lsls	r2, r2, #31
 800b01c:	d501      	bpl.n	800b022 <_printf_float+0x1ba>
 800b01e:	3302      	adds	r3, #2
 800b020:	e7f4      	b.n	800b00c <_printf_float+0x1a4>
 800b022:	2301      	movs	r3, #1
 800b024:	e7f2      	b.n	800b00c <_printf_float+0x1a4>
 800b026:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b02a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b02c:	4299      	cmp	r1, r3
 800b02e:	db05      	blt.n	800b03c <_printf_float+0x1d4>
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	6121      	str	r1, [r4, #16]
 800b034:	07d8      	lsls	r0, r3, #31
 800b036:	d5ea      	bpl.n	800b00e <_printf_float+0x1a6>
 800b038:	1c4b      	adds	r3, r1, #1
 800b03a:	e7e7      	b.n	800b00c <_printf_float+0x1a4>
 800b03c:	2900      	cmp	r1, #0
 800b03e:	bfd4      	ite	le
 800b040:	f1c1 0202 	rsble	r2, r1, #2
 800b044:	2201      	movgt	r2, #1
 800b046:	4413      	add	r3, r2
 800b048:	e7e0      	b.n	800b00c <_printf_float+0x1a4>
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	055a      	lsls	r2, r3, #21
 800b04e:	d407      	bmi.n	800b060 <_printf_float+0x1f8>
 800b050:	6923      	ldr	r3, [r4, #16]
 800b052:	4642      	mov	r2, r8
 800b054:	4631      	mov	r1, r6
 800b056:	4628      	mov	r0, r5
 800b058:	47b8      	blx	r7
 800b05a:	3001      	adds	r0, #1
 800b05c:	d12c      	bne.n	800b0b8 <_printf_float+0x250>
 800b05e:	e764      	b.n	800af2a <_printf_float+0xc2>
 800b060:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b064:	f240 80e0 	bls.w	800b228 <_printf_float+0x3c0>
 800b068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b06c:	2200      	movs	r2, #0
 800b06e:	2300      	movs	r3, #0
 800b070:	f7f5 fd32 	bl	8000ad8 <__aeabi_dcmpeq>
 800b074:	2800      	cmp	r0, #0
 800b076:	d034      	beq.n	800b0e2 <_printf_float+0x27a>
 800b078:	4a37      	ldr	r2, [pc, #220]	; (800b158 <_printf_float+0x2f0>)
 800b07a:	2301      	movs	r3, #1
 800b07c:	4631      	mov	r1, r6
 800b07e:	4628      	mov	r0, r5
 800b080:	47b8      	blx	r7
 800b082:	3001      	adds	r0, #1
 800b084:	f43f af51 	beq.w	800af2a <_printf_float+0xc2>
 800b088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b08c:	429a      	cmp	r2, r3
 800b08e:	db02      	blt.n	800b096 <_printf_float+0x22e>
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	07d8      	lsls	r0, r3, #31
 800b094:	d510      	bpl.n	800b0b8 <_printf_float+0x250>
 800b096:	ee18 3a10 	vmov	r3, s16
 800b09a:	4652      	mov	r2, sl
 800b09c:	4631      	mov	r1, r6
 800b09e:	4628      	mov	r0, r5
 800b0a0:	47b8      	blx	r7
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	f43f af41 	beq.w	800af2a <_printf_float+0xc2>
 800b0a8:	f04f 0800 	mov.w	r8, #0
 800b0ac:	f104 091a 	add.w	r9, r4, #26
 800b0b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	4543      	cmp	r3, r8
 800b0b6:	dc09      	bgt.n	800b0cc <_printf_float+0x264>
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	079b      	lsls	r3, r3, #30
 800b0bc:	f100 8105 	bmi.w	800b2ca <_printf_float+0x462>
 800b0c0:	68e0      	ldr	r0, [r4, #12]
 800b0c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0c4:	4298      	cmp	r0, r3
 800b0c6:	bfb8      	it	lt
 800b0c8:	4618      	movlt	r0, r3
 800b0ca:	e730      	b.n	800af2e <_printf_float+0xc6>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	464a      	mov	r2, r9
 800b0d0:	4631      	mov	r1, r6
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	47b8      	blx	r7
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	f43f af27 	beq.w	800af2a <_printf_float+0xc2>
 800b0dc:	f108 0801 	add.w	r8, r8, #1
 800b0e0:	e7e6      	b.n	800b0b0 <_printf_float+0x248>
 800b0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	dc39      	bgt.n	800b15c <_printf_float+0x2f4>
 800b0e8:	4a1b      	ldr	r2, [pc, #108]	; (800b158 <_printf_float+0x2f0>)
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	47b8      	blx	r7
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	f43f af19 	beq.w	800af2a <_printf_float+0xc2>
 800b0f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	d102      	bne.n	800b106 <_printf_float+0x29e>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	07d9      	lsls	r1, r3, #31
 800b104:	d5d8      	bpl.n	800b0b8 <_printf_float+0x250>
 800b106:	ee18 3a10 	vmov	r3, s16
 800b10a:	4652      	mov	r2, sl
 800b10c:	4631      	mov	r1, r6
 800b10e:	4628      	mov	r0, r5
 800b110:	47b8      	blx	r7
 800b112:	3001      	adds	r0, #1
 800b114:	f43f af09 	beq.w	800af2a <_printf_float+0xc2>
 800b118:	f04f 0900 	mov.w	r9, #0
 800b11c:	f104 0a1a 	add.w	sl, r4, #26
 800b120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b122:	425b      	negs	r3, r3
 800b124:	454b      	cmp	r3, r9
 800b126:	dc01      	bgt.n	800b12c <_printf_float+0x2c4>
 800b128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b12a:	e792      	b.n	800b052 <_printf_float+0x1ea>
 800b12c:	2301      	movs	r3, #1
 800b12e:	4652      	mov	r2, sl
 800b130:	4631      	mov	r1, r6
 800b132:	4628      	mov	r0, r5
 800b134:	47b8      	blx	r7
 800b136:	3001      	adds	r0, #1
 800b138:	f43f aef7 	beq.w	800af2a <_printf_float+0xc2>
 800b13c:	f109 0901 	add.w	r9, r9, #1
 800b140:	e7ee      	b.n	800b120 <_printf_float+0x2b8>
 800b142:	bf00      	nop
 800b144:	7fefffff 	.word	0x7fefffff
 800b148:	0800fe6c 	.word	0x0800fe6c
 800b14c:	0800fe70 	.word	0x0800fe70
 800b150:	0800fe78 	.word	0x0800fe78
 800b154:	0800fe74 	.word	0x0800fe74
 800b158:	0800fe7c 	.word	0x0800fe7c
 800b15c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b15e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b160:	429a      	cmp	r2, r3
 800b162:	bfa8      	it	ge
 800b164:	461a      	movge	r2, r3
 800b166:	2a00      	cmp	r2, #0
 800b168:	4691      	mov	r9, r2
 800b16a:	dc37      	bgt.n	800b1dc <_printf_float+0x374>
 800b16c:	f04f 0b00 	mov.w	fp, #0
 800b170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b174:	f104 021a 	add.w	r2, r4, #26
 800b178:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b17a:	9305      	str	r3, [sp, #20]
 800b17c:	eba3 0309 	sub.w	r3, r3, r9
 800b180:	455b      	cmp	r3, fp
 800b182:	dc33      	bgt.n	800b1ec <_printf_float+0x384>
 800b184:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b188:	429a      	cmp	r2, r3
 800b18a:	db3b      	blt.n	800b204 <_printf_float+0x39c>
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	07da      	lsls	r2, r3, #31
 800b190:	d438      	bmi.n	800b204 <_printf_float+0x39c>
 800b192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b194:	9a05      	ldr	r2, [sp, #20]
 800b196:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b198:	1a9a      	subs	r2, r3, r2
 800b19a:	eba3 0901 	sub.w	r9, r3, r1
 800b19e:	4591      	cmp	r9, r2
 800b1a0:	bfa8      	it	ge
 800b1a2:	4691      	movge	r9, r2
 800b1a4:	f1b9 0f00 	cmp.w	r9, #0
 800b1a8:	dc35      	bgt.n	800b216 <_printf_float+0x3ae>
 800b1aa:	f04f 0800 	mov.w	r8, #0
 800b1ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1b2:	f104 0a1a 	add.w	sl, r4, #26
 800b1b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1ba:	1a9b      	subs	r3, r3, r2
 800b1bc:	eba3 0309 	sub.w	r3, r3, r9
 800b1c0:	4543      	cmp	r3, r8
 800b1c2:	f77f af79 	ble.w	800b0b8 <_printf_float+0x250>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4652      	mov	r2, sl
 800b1ca:	4631      	mov	r1, r6
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	47b8      	blx	r7
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	f43f aeaa 	beq.w	800af2a <_printf_float+0xc2>
 800b1d6:	f108 0801 	add.w	r8, r8, #1
 800b1da:	e7ec      	b.n	800b1b6 <_printf_float+0x34e>
 800b1dc:	4613      	mov	r3, r2
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4642      	mov	r2, r8
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	47b8      	blx	r7
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	d1c0      	bne.n	800b16c <_printf_float+0x304>
 800b1ea:	e69e      	b.n	800af2a <_printf_float+0xc2>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	4631      	mov	r1, r6
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	9205      	str	r2, [sp, #20]
 800b1f4:	47b8      	blx	r7
 800b1f6:	3001      	adds	r0, #1
 800b1f8:	f43f ae97 	beq.w	800af2a <_printf_float+0xc2>
 800b1fc:	9a05      	ldr	r2, [sp, #20]
 800b1fe:	f10b 0b01 	add.w	fp, fp, #1
 800b202:	e7b9      	b.n	800b178 <_printf_float+0x310>
 800b204:	ee18 3a10 	vmov	r3, s16
 800b208:	4652      	mov	r2, sl
 800b20a:	4631      	mov	r1, r6
 800b20c:	4628      	mov	r0, r5
 800b20e:	47b8      	blx	r7
 800b210:	3001      	adds	r0, #1
 800b212:	d1be      	bne.n	800b192 <_printf_float+0x32a>
 800b214:	e689      	b.n	800af2a <_printf_float+0xc2>
 800b216:	9a05      	ldr	r2, [sp, #20]
 800b218:	464b      	mov	r3, r9
 800b21a:	4442      	add	r2, r8
 800b21c:	4631      	mov	r1, r6
 800b21e:	4628      	mov	r0, r5
 800b220:	47b8      	blx	r7
 800b222:	3001      	adds	r0, #1
 800b224:	d1c1      	bne.n	800b1aa <_printf_float+0x342>
 800b226:	e680      	b.n	800af2a <_printf_float+0xc2>
 800b228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b22a:	2a01      	cmp	r2, #1
 800b22c:	dc01      	bgt.n	800b232 <_printf_float+0x3ca>
 800b22e:	07db      	lsls	r3, r3, #31
 800b230:	d538      	bpl.n	800b2a4 <_printf_float+0x43c>
 800b232:	2301      	movs	r3, #1
 800b234:	4642      	mov	r2, r8
 800b236:	4631      	mov	r1, r6
 800b238:	4628      	mov	r0, r5
 800b23a:	47b8      	blx	r7
 800b23c:	3001      	adds	r0, #1
 800b23e:	f43f ae74 	beq.w	800af2a <_printf_float+0xc2>
 800b242:	ee18 3a10 	vmov	r3, s16
 800b246:	4652      	mov	r2, sl
 800b248:	4631      	mov	r1, r6
 800b24a:	4628      	mov	r0, r5
 800b24c:	47b8      	blx	r7
 800b24e:	3001      	adds	r0, #1
 800b250:	f43f ae6b 	beq.w	800af2a <_printf_float+0xc2>
 800b254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b258:	2200      	movs	r2, #0
 800b25a:	2300      	movs	r3, #0
 800b25c:	f7f5 fc3c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b260:	b9d8      	cbnz	r0, 800b29a <_printf_float+0x432>
 800b262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b264:	f108 0201 	add.w	r2, r8, #1
 800b268:	3b01      	subs	r3, #1
 800b26a:	4631      	mov	r1, r6
 800b26c:	4628      	mov	r0, r5
 800b26e:	47b8      	blx	r7
 800b270:	3001      	adds	r0, #1
 800b272:	d10e      	bne.n	800b292 <_printf_float+0x42a>
 800b274:	e659      	b.n	800af2a <_printf_float+0xc2>
 800b276:	2301      	movs	r3, #1
 800b278:	4652      	mov	r2, sl
 800b27a:	4631      	mov	r1, r6
 800b27c:	4628      	mov	r0, r5
 800b27e:	47b8      	blx	r7
 800b280:	3001      	adds	r0, #1
 800b282:	f43f ae52 	beq.w	800af2a <_printf_float+0xc2>
 800b286:	f108 0801 	add.w	r8, r8, #1
 800b28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b28c:	3b01      	subs	r3, #1
 800b28e:	4543      	cmp	r3, r8
 800b290:	dcf1      	bgt.n	800b276 <_printf_float+0x40e>
 800b292:	464b      	mov	r3, r9
 800b294:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b298:	e6dc      	b.n	800b054 <_printf_float+0x1ec>
 800b29a:	f04f 0800 	mov.w	r8, #0
 800b29e:	f104 0a1a 	add.w	sl, r4, #26
 800b2a2:	e7f2      	b.n	800b28a <_printf_float+0x422>
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	4642      	mov	r2, r8
 800b2a8:	e7df      	b.n	800b26a <_printf_float+0x402>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	464a      	mov	r2, r9
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	47b8      	blx	r7
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	f43f ae38 	beq.w	800af2a <_printf_float+0xc2>
 800b2ba:	f108 0801 	add.w	r8, r8, #1
 800b2be:	68e3      	ldr	r3, [r4, #12]
 800b2c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2c2:	1a5b      	subs	r3, r3, r1
 800b2c4:	4543      	cmp	r3, r8
 800b2c6:	dcf0      	bgt.n	800b2aa <_printf_float+0x442>
 800b2c8:	e6fa      	b.n	800b0c0 <_printf_float+0x258>
 800b2ca:	f04f 0800 	mov.w	r8, #0
 800b2ce:	f104 0919 	add.w	r9, r4, #25
 800b2d2:	e7f4      	b.n	800b2be <_printf_float+0x456>

0800b2d4 <_printf_common>:
 800b2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d8:	4616      	mov	r6, r2
 800b2da:	4699      	mov	r9, r3
 800b2dc:	688a      	ldr	r2, [r1, #8]
 800b2de:	690b      	ldr	r3, [r1, #16]
 800b2e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	bfb8      	it	lt
 800b2e8:	4613      	movlt	r3, r2
 800b2ea:	6033      	str	r3, [r6, #0]
 800b2ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	b10a      	cbz	r2, 800b2fa <_printf_common+0x26>
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	6033      	str	r3, [r6, #0]
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	0699      	lsls	r1, r3, #26
 800b2fe:	bf42      	ittt	mi
 800b300:	6833      	ldrmi	r3, [r6, #0]
 800b302:	3302      	addmi	r3, #2
 800b304:	6033      	strmi	r3, [r6, #0]
 800b306:	6825      	ldr	r5, [r4, #0]
 800b308:	f015 0506 	ands.w	r5, r5, #6
 800b30c:	d106      	bne.n	800b31c <_printf_common+0x48>
 800b30e:	f104 0a19 	add.w	sl, r4, #25
 800b312:	68e3      	ldr	r3, [r4, #12]
 800b314:	6832      	ldr	r2, [r6, #0]
 800b316:	1a9b      	subs	r3, r3, r2
 800b318:	42ab      	cmp	r3, r5
 800b31a:	dc26      	bgt.n	800b36a <_printf_common+0x96>
 800b31c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b320:	1e13      	subs	r3, r2, #0
 800b322:	6822      	ldr	r2, [r4, #0]
 800b324:	bf18      	it	ne
 800b326:	2301      	movne	r3, #1
 800b328:	0692      	lsls	r2, r2, #26
 800b32a:	d42b      	bmi.n	800b384 <_printf_common+0xb0>
 800b32c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b330:	4649      	mov	r1, r9
 800b332:	4638      	mov	r0, r7
 800b334:	47c0      	blx	r8
 800b336:	3001      	adds	r0, #1
 800b338:	d01e      	beq.n	800b378 <_printf_common+0xa4>
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	68e5      	ldr	r5, [r4, #12]
 800b33e:	6832      	ldr	r2, [r6, #0]
 800b340:	f003 0306 	and.w	r3, r3, #6
 800b344:	2b04      	cmp	r3, #4
 800b346:	bf08      	it	eq
 800b348:	1aad      	subeq	r5, r5, r2
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	6922      	ldr	r2, [r4, #16]
 800b34e:	bf0c      	ite	eq
 800b350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b354:	2500      	movne	r5, #0
 800b356:	4293      	cmp	r3, r2
 800b358:	bfc4      	itt	gt
 800b35a:	1a9b      	subgt	r3, r3, r2
 800b35c:	18ed      	addgt	r5, r5, r3
 800b35e:	2600      	movs	r6, #0
 800b360:	341a      	adds	r4, #26
 800b362:	42b5      	cmp	r5, r6
 800b364:	d11a      	bne.n	800b39c <_printf_common+0xc8>
 800b366:	2000      	movs	r0, #0
 800b368:	e008      	b.n	800b37c <_printf_common+0xa8>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4652      	mov	r2, sl
 800b36e:	4649      	mov	r1, r9
 800b370:	4638      	mov	r0, r7
 800b372:	47c0      	blx	r8
 800b374:	3001      	adds	r0, #1
 800b376:	d103      	bne.n	800b380 <_printf_common+0xac>
 800b378:	f04f 30ff 	mov.w	r0, #4294967295
 800b37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b380:	3501      	adds	r5, #1
 800b382:	e7c6      	b.n	800b312 <_printf_common+0x3e>
 800b384:	18e1      	adds	r1, r4, r3
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	2030      	movs	r0, #48	; 0x30
 800b38a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b38e:	4422      	add	r2, r4
 800b390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b398:	3302      	adds	r3, #2
 800b39a:	e7c7      	b.n	800b32c <_printf_common+0x58>
 800b39c:	2301      	movs	r3, #1
 800b39e:	4622      	mov	r2, r4
 800b3a0:	4649      	mov	r1, r9
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	47c0      	blx	r8
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	d0e6      	beq.n	800b378 <_printf_common+0xa4>
 800b3aa:	3601      	adds	r6, #1
 800b3ac:	e7d9      	b.n	800b362 <_printf_common+0x8e>
	...

0800b3b0 <_printf_i>:
 800b3b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b4:	7e0f      	ldrb	r7, [r1, #24]
 800b3b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b3b8:	2f78      	cmp	r7, #120	; 0x78
 800b3ba:	4691      	mov	r9, r2
 800b3bc:	4680      	mov	r8, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	469a      	mov	sl, r3
 800b3c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b3c6:	d807      	bhi.n	800b3d8 <_printf_i+0x28>
 800b3c8:	2f62      	cmp	r7, #98	; 0x62
 800b3ca:	d80a      	bhi.n	800b3e2 <_printf_i+0x32>
 800b3cc:	2f00      	cmp	r7, #0
 800b3ce:	f000 80d8 	beq.w	800b582 <_printf_i+0x1d2>
 800b3d2:	2f58      	cmp	r7, #88	; 0x58
 800b3d4:	f000 80a3 	beq.w	800b51e <_printf_i+0x16e>
 800b3d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3e0:	e03a      	b.n	800b458 <_printf_i+0xa8>
 800b3e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3e6:	2b15      	cmp	r3, #21
 800b3e8:	d8f6      	bhi.n	800b3d8 <_printf_i+0x28>
 800b3ea:	a101      	add	r1, pc, #4	; (adr r1, 800b3f0 <_printf_i+0x40>)
 800b3ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3f0:	0800b449 	.word	0x0800b449
 800b3f4:	0800b45d 	.word	0x0800b45d
 800b3f8:	0800b3d9 	.word	0x0800b3d9
 800b3fc:	0800b3d9 	.word	0x0800b3d9
 800b400:	0800b3d9 	.word	0x0800b3d9
 800b404:	0800b3d9 	.word	0x0800b3d9
 800b408:	0800b45d 	.word	0x0800b45d
 800b40c:	0800b3d9 	.word	0x0800b3d9
 800b410:	0800b3d9 	.word	0x0800b3d9
 800b414:	0800b3d9 	.word	0x0800b3d9
 800b418:	0800b3d9 	.word	0x0800b3d9
 800b41c:	0800b569 	.word	0x0800b569
 800b420:	0800b48d 	.word	0x0800b48d
 800b424:	0800b54b 	.word	0x0800b54b
 800b428:	0800b3d9 	.word	0x0800b3d9
 800b42c:	0800b3d9 	.word	0x0800b3d9
 800b430:	0800b58b 	.word	0x0800b58b
 800b434:	0800b3d9 	.word	0x0800b3d9
 800b438:	0800b48d 	.word	0x0800b48d
 800b43c:	0800b3d9 	.word	0x0800b3d9
 800b440:	0800b3d9 	.word	0x0800b3d9
 800b444:	0800b553 	.word	0x0800b553
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	1d1a      	adds	r2, r3, #4
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	602a      	str	r2, [r5, #0]
 800b450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b458:	2301      	movs	r3, #1
 800b45a:	e0a3      	b.n	800b5a4 <_printf_i+0x1f4>
 800b45c:	6820      	ldr	r0, [r4, #0]
 800b45e:	6829      	ldr	r1, [r5, #0]
 800b460:	0606      	lsls	r6, r0, #24
 800b462:	f101 0304 	add.w	r3, r1, #4
 800b466:	d50a      	bpl.n	800b47e <_printf_i+0xce>
 800b468:	680e      	ldr	r6, [r1, #0]
 800b46a:	602b      	str	r3, [r5, #0]
 800b46c:	2e00      	cmp	r6, #0
 800b46e:	da03      	bge.n	800b478 <_printf_i+0xc8>
 800b470:	232d      	movs	r3, #45	; 0x2d
 800b472:	4276      	negs	r6, r6
 800b474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b478:	485e      	ldr	r0, [pc, #376]	; (800b5f4 <_printf_i+0x244>)
 800b47a:	230a      	movs	r3, #10
 800b47c:	e019      	b.n	800b4b2 <_printf_i+0x102>
 800b47e:	680e      	ldr	r6, [r1, #0]
 800b480:	602b      	str	r3, [r5, #0]
 800b482:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b486:	bf18      	it	ne
 800b488:	b236      	sxthne	r6, r6
 800b48a:	e7ef      	b.n	800b46c <_printf_i+0xbc>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	6820      	ldr	r0, [r4, #0]
 800b490:	1d19      	adds	r1, r3, #4
 800b492:	6029      	str	r1, [r5, #0]
 800b494:	0601      	lsls	r1, r0, #24
 800b496:	d501      	bpl.n	800b49c <_printf_i+0xec>
 800b498:	681e      	ldr	r6, [r3, #0]
 800b49a:	e002      	b.n	800b4a2 <_printf_i+0xf2>
 800b49c:	0646      	lsls	r6, r0, #25
 800b49e:	d5fb      	bpl.n	800b498 <_printf_i+0xe8>
 800b4a0:	881e      	ldrh	r6, [r3, #0]
 800b4a2:	4854      	ldr	r0, [pc, #336]	; (800b5f4 <_printf_i+0x244>)
 800b4a4:	2f6f      	cmp	r7, #111	; 0x6f
 800b4a6:	bf0c      	ite	eq
 800b4a8:	2308      	moveq	r3, #8
 800b4aa:	230a      	movne	r3, #10
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4b2:	6865      	ldr	r5, [r4, #4]
 800b4b4:	60a5      	str	r5, [r4, #8]
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	bfa2      	ittt	ge
 800b4ba:	6821      	ldrge	r1, [r4, #0]
 800b4bc:	f021 0104 	bicge.w	r1, r1, #4
 800b4c0:	6021      	strge	r1, [r4, #0]
 800b4c2:	b90e      	cbnz	r6, 800b4c8 <_printf_i+0x118>
 800b4c4:	2d00      	cmp	r5, #0
 800b4c6:	d04d      	beq.n	800b564 <_printf_i+0x1b4>
 800b4c8:	4615      	mov	r5, r2
 800b4ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800b4ce:	fb03 6711 	mls	r7, r3, r1, r6
 800b4d2:	5dc7      	ldrb	r7, [r0, r7]
 800b4d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b4d8:	4637      	mov	r7, r6
 800b4da:	42bb      	cmp	r3, r7
 800b4dc:	460e      	mov	r6, r1
 800b4de:	d9f4      	bls.n	800b4ca <_printf_i+0x11a>
 800b4e0:	2b08      	cmp	r3, #8
 800b4e2:	d10b      	bne.n	800b4fc <_printf_i+0x14c>
 800b4e4:	6823      	ldr	r3, [r4, #0]
 800b4e6:	07de      	lsls	r6, r3, #31
 800b4e8:	d508      	bpl.n	800b4fc <_printf_i+0x14c>
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	6861      	ldr	r1, [r4, #4]
 800b4ee:	4299      	cmp	r1, r3
 800b4f0:	bfde      	ittt	le
 800b4f2:	2330      	movle	r3, #48	; 0x30
 800b4f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4fc:	1b52      	subs	r2, r2, r5
 800b4fe:	6122      	str	r2, [r4, #16]
 800b500:	f8cd a000 	str.w	sl, [sp]
 800b504:	464b      	mov	r3, r9
 800b506:	aa03      	add	r2, sp, #12
 800b508:	4621      	mov	r1, r4
 800b50a:	4640      	mov	r0, r8
 800b50c:	f7ff fee2 	bl	800b2d4 <_printf_common>
 800b510:	3001      	adds	r0, #1
 800b512:	d14c      	bne.n	800b5ae <_printf_i+0x1fe>
 800b514:	f04f 30ff 	mov.w	r0, #4294967295
 800b518:	b004      	add	sp, #16
 800b51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51e:	4835      	ldr	r0, [pc, #212]	; (800b5f4 <_printf_i+0x244>)
 800b520:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b524:	6829      	ldr	r1, [r5, #0]
 800b526:	6823      	ldr	r3, [r4, #0]
 800b528:	f851 6b04 	ldr.w	r6, [r1], #4
 800b52c:	6029      	str	r1, [r5, #0]
 800b52e:	061d      	lsls	r5, r3, #24
 800b530:	d514      	bpl.n	800b55c <_printf_i+0x1ac>
 800b532:	07df      	lsls	r7, r3, #31
 800b534:	bf44      	itt	mi
 800b536:	f043 0320 	orrmi.w	r3, r3, #32
 800b53a:	6023      	strmi	r3, [r4, #0]
 800b53c:	b91e      	cbnz	r6, 800b546 <_printf_i+0x196>
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	f023 0320 	bic.w	r3, r3, #32
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	2310      	movs	r3, #16
 800b548:	e7b0      	b.n	800b4ac <_printf_i+0xfc>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	f043 0320 	orr.w	r3, r3, #32
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	2378      	movs	r3, #120	; 0x78
 800b554:	4828      	ldr	r0, [pc, #160]	; (800b5f8 <_printf_i+0x248>)
 800b556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b55a:	e7e3      	b.n	800b524 <_printf_i+0x174>
 800b55c:	0659      	lsls	r1, r3, #25
 800b55e:	bf48      	it	mi
 800b560:	b2b6      	uxthmi	r6, r6
 800b562:	e7e6      	b.n	800b532 <_printf_i+0x182>
 800b564:	4615      	mov	r5, r2
 800b566:	e7bb      	b.n	800b4e0 <_printf_i+0x130>
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	6826      	ldr	r6, [r4, #0]
 800b56c:	6961      	ldr	r1, [r4, #20]
 800b56e:	1d18      	adds	r0, r3, #4
 800b570:	6028      	str	r0, [r5, #0]
 800b572:	0635      	lsls	r5, r6, #24
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	d501      	bpl.n	800b57c <_printf_i+0x1cc>
 800b578:	6019      	str	r1, [r3, #0]
 800b57a:	e002      	b.n	800b582 <_printf_i+0x1d2>
 800b57c:	0670      	lsls	r0, r6, #25
 800b57e:	d5fb      	bpl.n	800b578 <_printf_i+0x1c8>
 800b580:	8019      	strh	r1, [r3, #0]
 800b582:	2300      	movs	r3, #0
 800b584:	6123      	str	r3, [r4, #16]
 800b586:	4615      	mov	r5, r2
 800b588:	e7ba      	b.n	800b500 <_printf_i+0x150>
 800b58a:	682b      	ldr	r3, [r5, #0]
 800b58c:	1d1a      	adds	r2, r3, #4
 800b58e:	602a      	str	r2, [r5, #0]
 800b590:	681d      	ldr	r5, [r3, #0]
 800b592:	6862      	ldr	r2, [r4, #4]
 800b594:	2100      	movs	r1, #0
 800b596:	4628      	mov	r0, r5
 800b598:	f7f4 fe2a 	bl	80001f0 <memchr>
 800b59c:	b108      	cbz	r0, 800b5a2 <_printf_i+0x1f2>
 800b59e:	1b40      	subs	r0, r0, r5
 800b5a0:	6060      	str	r0, [r4, #4]
 800b5a2:	6863      	ldr	r3, [r4, #4]
 800b5a4:	6123      	str	r3, [r4, #16]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ac:	e7a8      	b.n	800b500 <_printf_i+0x150>
 800b5ae:	6923      	ldr	r3, [r4, #16]
 800b5b0:	462a      	mov	r2, r5
 800b5b2:	4649      	mov	r1, r9
 800b5b4:	4640      	mov	r0, r8
 800b5b6:	47d0      	blx	sl
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	d0ab      	beq.n	800b514 <_printf_i+0x164>
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	079b      	lsls	r3, r3, #30
 800b5c0:	d413      	bmi.n	800b5ea <_printf_i+0x23a>
 800b5c2:	68e0      	ldr	r0, [r4, #12]
 800b5c4:	9b03      	ldr	r3, [sp, #12]
 800b5c6:	4298      	cmp	r0, r3
 800b5c8:	bfb8      	it	lt
 800b5ca:	4618      	movlt	r0, r3
 800b5cc:	e7a4      	b.n	800b518 <_printf_i+0x168>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	4649      	mov	r1, r9
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	47d0      	blx	sl
 800b5d8:	3001      	adds	r0, #1
 800b5da:	d09b      	beq.n	800b514 <_printf_i+0x164>
 800b5dc:	3501      	adds	r5, #1
 800b5de:	68e3      	ldr	r3, [r4, #12]
 800b5e0:	9903      	ldr	r1, [sp, #12]
 800b5e2:	1a5b      	subs	r3, r3, r1
 800b5e4:	42ab      	cmp	r3, r5
 800b5e6:	dcf2      	bgt.n	800b5ce <_printf_i+0x21e>
 800b5e8:	e7eb      	b.n	800b5c2 <_printf_i+0x212>
 800b5ea:	2500      	movs	r5, #0
 800b5ec:	f104 0619 	add.w	r6, r4, #25
 800b5f0:	e7f5      	b.n	800b5de <_printf_i+0x22e>
 800b5f2:	bf00      	nop
 800b5f4:	0800fe7e 	.word	0x0800fe7e
 800b5f8:	0800fe8f 	.word	0x0800fe8f

0800b5fc <siprintf>:
 800b5fc:	b40e      	push	{r1, r2, r3}
 800b5fe:	b500      	push	{lr}
 800b600:	b09c      	sub	sp, #112	; 0x70
 800b602:	ab1d      	add	r3, sp, #116	; 0x74
 800b604:	9002      	str	r0, [sp, #8]
 800b606:	9006      	str	r0, [sp, #24]
 800b608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b60c:	4809      	ldr	r0, [pc, #36]	; (800b634 <siprintf+0x38>)
 800b60e:	9107      	str	r1, [sp, #28]
 800b610:	9104      	str	r1, [sp, #16]
 800b612:	4909      	ldr	r1, [pc, #36]	; (800b638 <siprintf+0x3c>)
 800b614:	f853 2b04 	ldr.w	r2, [r3], #4
 800b618:	9105      	str	r1, [sp, #20]
 800b61a:	6800      	ldr	r0, [r0, #0]
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	a902      	add	r1, sp, #8
 800b620:	f001 fbb2 	bl	800cd88 <_svfiprintf_r>
 800b624:	9b02      	ldr	r3, [sp, #8]
 800b626:	2200      	movs	r2, #0
 800b628:	701a      	strb	r2, [r3, #0]
 800b62a:	b01c      	add	sp, #112	; 0x70
 800b62c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b630:	b003      	add	sp, #12
 800b632:	4770      	bx	lr
 800b634:	20000028 	.word	0x20000028
 800b638:	ffff0208 	.word	0xffff0208

0800b63c <strcat>:
 800b63c:	b510      	push	{r4, lr}
 800b63e:	4602      	mov	r2, r0
 800b640:	7814      	ldrb	r4, [r2, #0]
 800b642:	4613      	mov	r3, r2
 800b644:	3201      	adds	r2, #1
 800b646:	2c00      	cmp	r4, #0
 800b648:	d1fa      	bne.n	800b640 <strcat+0x4>
 800b64a:	3b01      	subs	r3, #1
 800b64c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b650:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b654:	2a00      	cmp	r2, #0
 800b656:	d1f9      	bne.n	800b64c <strcat+0x10>
 800b658:	bd10      	pop	{r4, pc}

0800b65a <_vsniprintf_r>:
 800b65a:	b530      	push	{r4, r5, lr}
 800b65c:	4614      	mov	r4, r2
 800b65e:	2c00      	cmp	r4, #0
 800b660:	b09b      	sub	sp, #108	; 0x6c
 800b662:	4605      	mov	r5, r0
 800b664:	461a      	mov	r2, r3
 800b666:	da05      	bge.n	800b674 <_vsniprintf_r+0x1a>
 800b668:	238b      	movs	r3, #139	; 0x8b
 800b66a:	6003      	str	r3, [r0, #0]
 800b66c:	f04f 30ff 	mov.w	r0, #4294967295
 800b670:	b01b      	add	sp, #108	; 0x6c
 800b672:	bd30      	pop	{r4, r5, pc}
 800b674:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b678:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b67c:	bf14      	ite	ne
 800b67e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b682:	4623      	moveq	r3, r4
 800b684:	9302      	str	r3, [sp, #8]
 800b686:	9305      	str	r3, [sp, #20]
 800b688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b68c:	9100      	str	r1, [sp, #0]
 800b68e:	9104      	str	r1, [sp, #16]
 800b690:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b694:	4669      	mov	r1, sp
 800b696:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b698:	f001 fb76 	bl	800cd88 <_svfiprintf_r>
 800b69c:	1c43      	adds	r3, r0, #1
 800b69e:	bfbc      	itt	lt
 800b6a0:	238b      	movlt	r3, #139	; 0x8b
 800b6a2:	602b      	strlt	r3, [r5, #0]
 800b6a4:	2c00      	cmp	r4, #0
 800b6a6:	d0e3      	beq.n	800b670 <_vsniprintf_r+0x16>
 800b6a8:	9b00      	ldr	r3, [sp, #0]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	701a      	strb	r2, [r3, #0]
 800b6ae:	e7df      	b.n	800b670 <_vsniprintf_r+0x16>

0800b6b0 <vsniprintf>:
 800b6b0:	b507      	push	{r0, r1, r2, lr}
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	460a      	mov	r2, r1
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	4803      	ldr	r0, [pc, #12]	; (800b6c8 <vsniprintf+0x18>)
 800b6bc:	6800      	ldr	r0, [r0, #0]
 800b6be:	f7ff ffcc 	bl	800b65a <_vsniprintf_r>
 800b6c2:	b003      	add	sp, #12
 800b6c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6c8:	20000028 	.word	0x20000028

0800b6cc <quorem>:
 800b6cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d0:	6903      	ldr	r3, [r0, #16]
 800b6d2:	690c      	ldr	r4, [r1, #16]
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	4607      	mov	r7, r0
 800b6d8:	f2c0 8081 	blt.w	800b7de <quorem+0x112>
 800b6dc:	3c01      	subs	r4, #1
 800b6de:	f101 0814 	add.w	r8, r1, #20
 800b6e2:	f100 0514 	add.w	r5, r0, #20
 800b6e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ea:	9301      	str	r3, [sp, #4]
 800b6ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b700:	fbb2 f6f3 	udiv	r6, r2, r3
 800b704:	d331      	bcc.n	800b76a <quorem+0x9e>
 800b706:	f04f 0e00 	mov.w	lr, #0
 800b70a:	4640      	mov	r0, r8
 800b70c:	46ac      	mov	ip, r5
 800b70e:	46f2      	mov	sl, lr
 800b710:	f850 2b04 	ldr.w	r2, [r0], #4
 800b714:	b293      	uxth	r3, r2
 800b716:	fb06 e303 	mla	r3, r6, r3, lr
 800b71a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b71e:	b29b      	uxth	r3, r3
 800b720:	ebaa 0303 	sub.w	r3, sl, r3
 800b724:	f8dc a000 	ldr.w	sl, [ip]
 800b728:	0c12      	lsrs	r2, r2, #16
 800b72a:	fa13 f38a 	uxtah	r3, r3, sl
 800b72e:	fb06 e202 	mla	r2, r6, r2, lr
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	9b00      	ldr	r3, [sp, #0]
 800b736:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b73a:	b292      	uxth	r2, r2
 800b73c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b744:	f8bd 3000 	ldrh.w	r3, [sp]
 800b748:	4581      	cmp	r9, r0
 800b74a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b74e:	f84c 3b04 	str.w	r3, [ip], #4
 800b752:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b756:	d2db      	bcs.n	800b710 <quorem+0x44>
 800b758:	f855 300b 	ldr.w	r3, [r5, fp]
 800b75c:	b92b      	cbnz	r3, 800b76a <quorem+0x9e>
 800b75e:	9b01      	ldr	r3, [sp, #4]
 800b760:	3b04      	subs	r3, #4
 800b762:	429d      	cmp	r5, r3
 800b764:	461a      	mov	r2, r3
 800b766:	d32e      	bcc.n	800b7c6 <quorem+0xfa>
 800b768:	613c      	str	r4, [r7, #16]
 800b76a:	4638      	mov	r0, r7
 800b76c:	f001 f8b8 	bl	800c8e0 <__mcmp>
 800b770:	2800      	cmp	r0, #0
 800b772:	db24      	blt.n	800b7be <quorem+0xf2>
 800b774:	3601      	adds	r6, #1
 800b776:	4628      	mov	r0, r5
 800b778:	f04f 0c00 	mov.w	ip, #0
 800b77c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b780:	f8d0 e000 	ldr.w	lr, [r0]
 800b784:	b293      	uxth	r3, r2
 800b786:	ebac 0303 	sub.w	r3, ip, r3
 800b78a:	0c12      	lsrs	r2, r2, #16
 800b78c:	fa13 f38e 	uxtah	r3, r3, lr
 800b790:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b798:	b29b      	uxth	r3, r3
 800b79a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b79e:	45c1      	cmp	r9, r8
 800b7a0:	f840 3b04 	str.w	r3, [r0], #4
 800b7a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7a8:	d2e8      	bcs.n	800b77c <quorem+0xb0>
 800b7aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7b2:	b922      	cbnz	r2, 800b7be <quorem+0xf2>
 800b7b4:	3b04      	subs	r3, #4
 800b7b6:	429d      	cmp	r5, r3
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	d30a      	bcc.n	800b7d2 <quorem+0x106>
 800b7bc:	613c      	str	r4, [r7, #16]
 800b7be:	4630      	mov	r0, r6
 800b7c0:	b003      	add	sp, #12
 800b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c6:	6812      	ldr	r2, [r2, #0]
 800b7c8:	3b04      	subs	r3, #4
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	d1cc      	bne.n	800b768 <quorem+0x9c>
 800b7ce:	3c01      	subs	r4, #1
 800b7d0:	e7c7      	b.n	800b762 <quorem+0x96>
 800b7d2:	6812      	ldr	r2, [r2, #0]
 800b7d4:	3b04      	subs	r3, #4
 800b7d6:	2a00      	cmp	r2, #0
 800b7d8:	d1f0      	bne.n	800b7bc <quorem+0xf0>
 800b7da:	3c01      	subs	r4, #1
 800b7dc:	e7eb      	b.n	800b7b6 <quorem+0xea>
 800b7de:	2000      	movs	r0, #0
 800b7e0:	e7ee      	b.n	800b7c0 <quorem+0xf4>
 800b7e2:	0000      	movs	r0, r0
 800b7e4:	0000      	movs	r0, r0
	...

0800b7e8 <_dtoa_r>:
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	ed2d 8b04 	vpush	{d8-d9}
 800b7f0:	ec57 6b10 	vmov	r6, r7, d0
 800b7f4:	b093      	sub	sp, #76	; 0x4c
 800b7f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b7f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b7fc:	9106      	str	r1, [sp, #24]
 800b7fe:	ee10 aa10 	vmov	sl, s0
 800b802:	4604      	mov	r4, r0
 800b804:	9209      	str	r2, [sp, #36]	; 0x24
 800b806:	930c      	str	r3, [sp, #48]	; 0x30
 800b808:	46bb      	mov	fp, r7
 800b80a:	b975      	cbnz	r5, 800b82a <_dtoa_r+0x42>
 800b80c:	2010      	movs	r0, #16
 800b80e:	f000 fddd 	bl	800c3cc <malloc>
 800b812:	4602      	mov	r2, r0
 800b814:	6260      	str	r0, [r4, #36]	; 0x24
 800b816:	b920      	cbnz	r0, 800b822 <_dtoa_r+0x3a>
 800b818:	4ba7      	ldr	r3, [pc, #668]	; (800bab8 <_dtoa_r+0x2d0>)
 800b81a:	21ea      	movs	r1, #234	; 0xea
 800b81c:	48a7      	ldr	r0, [pc, #668]	; (800babc <_dtoa_r+0x2d4>)
 800b81e:	f001 fbc3 	bl	800cfa8 <__assert_func>
 800b822:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b826:	6005      	str	r5, [r0, #0]
 800b828:	60c5      	str	r5, [r0, #12]
 800b82a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b82c:	6819      	ldr	r1, [r3, #0]
 800b82e:	b151      	cbz	r1, 800b846 <_dtoa_r+0x5e>
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	604a      	str	r2, [r1, #4]
 800b834:	2301      	movs	r3, #1
 800b836:	4093      	lsls	r3, r2
 800b838:	608b      	str	r3, [r1, #8]
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 fe0e 	bl	800c45c <_Bfree>
 800b840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]
 800b846:	1e3b      	subs	r3, r7, #0
 800b848:	bfaa      	itet	ge
 800b84a:	2300      	movge	r3, #0
 800b84c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b850:	f8c8 3000 	strge.w	r3, [r8]
 800b854:	4b9a      	ldr	r3, [pc, #616]	; (800bac0 <_dtoa_r+0x2d8>)
 800b856:	bfbc      	itt	lt
 800b858:	2201      	movlt	r2, #1
 800b85a:	f8c8 2000 	strlt.w	r2, [r8]
 800b85e:	ea33 030b 	bics.w	r3, r3, fp
 800b862:	d11b      	bne.n	800b89c <_dtoa_r+0xb4>
 800b864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b866:	f242 730f 	movw	r3, #9999	; 0x270f
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b870:	4333      	orrs	r3, r6
 800b872:	f000 8592 	beq.w	800c39a <_dtoa_r+0xbb2>
 800b876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b878:	b963      	cbnz	r3, 800b894 <_dtoa_r+0xac>
 800b87a:	4b92      	ldr	r3, [pc, #584]	; (800bac4 <_dtoa_r+0x2dc>)
 800b87c:	e022      	b.n	800b8c4 <_dtoa_r+0xdc>
 800b87e:	4b92      	ldr	r3, [pc, #584]	; (800bac8 <_dtoa_r+0x2e0>)
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	3308      	adds	r3, #8
 800b884:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	9801      	ldr	r0, [sp, #4]
 800b88a:	b013      	add	sp, #76	; 0x4c
 800b88c:	ecbd 8b04 	vpop	{d8-d9}
 800b890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b894:	4b8b      	ldr	r3, [pc, #556]	; (800bac4 <_dtoa_r+0x2dc>)
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	3303      	adds	r3, #3
 800b89a:	e7f3      	b.n	800b884 <_dtoa_r+0x9c>
 800b89c:	2200      	movs	r2, #0
 800b89e:	2300      	movs	r3, #0
 800b8a0:	4650      	mov	r0, sl
 800b8a2:	4659      	mov	r1, fp
 800b8a4:	f7f5 f918 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8a8:	ec4b ab19 	vmov	d9, sl, fp
 800b8ac:	4680      	mov	r8, r0
 800b8ae:	b158      	cbz	r0, 800b8c8 <_dtoa_r+0xe0>
 800b8b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	6013      	str	r3, [r2, #0]
 800b8b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 856b 	beq.w	800c394 <_dtoa_r+0xbac>
 800b8be:	4883      	ldr	r0, [pc, #524]	; (800bacc <_dtoa_r+0x2e4>)
 800b8c0:	6018      	str	r0, [r3, #0]
 800b8c2:	1e43      	subs	r3, r0, #1
 800b8c4:	9301      	str	r3, [sp, #4]
 800b8c6:	e7df      	b.n	800b888 <_dtoa_r+0xa0>
 800b8c8:	ec4b ab10 	vmov	d0, sl, fp
 800b8cc:	aa10      	add	r2, sp, #64	; 0x40
 800b8ce:	a911      	add	r1, sp, #68	; 0x44
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f001 f8ab 	bl	800ca2c <__d2b>
 800b8d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b8da:	ee08 0a10 	vmov	s16, r0
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	f000 8084 	beq.w	800b9ec <_dtoa_r+0x204>
 800b8e4:	ee19 3a90 	vmov	r3, s19
 800b8e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b8f0:	4656      	mov	r6, sl
 800b8f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b8f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b8fe:	4b74      	ldr	r3, [pc, #464]	; (800bad0 <_dtoa_r+0x2e8>)
 800b900:	2200      	movs	r2, #0
 800b902:	4630      	mov	r0, r6
 800b904:	4639      	mov	r1, r7
 800b906:	f7f4 fcc7 	bl	8000298 <__aeabi_dsub>
 800b90a:	a365      	add	r3, pc, #404	; (adr r3, 800baa0 <_dtoa_r+0x2b8>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fe7a 	bl	8000608 <__aeabi_dmul>
 800b914:	a364      	add	r3, pc, #400	; (adr r3, 800baa8 <_dtoa_r+0x2c0>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	f7f4 fcbf 	bl	800029c <__adddf3>
 800b91e:	4606      	mov	r6, r0
 800b920:	4628      	mov	r0, r5
 800b922:	460f      	mov	r7, r1
 800b924:	f7f4 fe06 	bl	8000534 <__aeabi_i2d>
 800b928:	a361      	add	r3, pc, #388	; (adr r3, 800bab0 <_dtoa_r+0x2c8>)
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f7f4 fe6b 	bl	8000608 <__aeabi_dmul>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f4 fcaf 	bl	800029c <__adddf3>
 800b93e:	4606      	mov	r6, r0
 800b940:	460f      	mov	r7, r1
 800b942:	f7f5 f911 	bl	8000b68 <__aeabi_d2iz>
 800b946:	2200      	movs	r2, #0
 800b948:	9000      	str	r0, [sp, #0]
 800b94a:	2300      	movs	r3, #0
 800b94c:	4630      	mov	r0, r6
 800b94e:	4639      	mov	r1, r7
 800b950:	f7f5 f8cc 	bl	8000aec <__aeabi_dcmplt>
 800b954:	b150      	cbz	r0, 800b96c <_dtoa_r+0x184>
 800b956:	9800      	ldr	r0, [sp, #0]
 800b958:	f7f4 fdec 	bl	8000534 <__aeabi_i2d>
 800b95c:	4632      	mov	r2, r6
 800b95e:	463b      	mov	r3, r7
 800b960:	f7f5 f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 800b964:	b910      	cbnz	r0, 800b96c <_dtoa_r+0x184>
 800b966:	9b00      	ldr	r3, [sp, #0]
 800b968:	3b01      	subs	r3, #1
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	9b00      	ldr	r3, [sp, #0]
 800b96e:	2b16      	cmp	r3, #22
 800b970:	d85a      	bhi.n	800ba28 <_dtoa_r+0x240>
 800b972:	9a00      	ldr	r2, [sp, #0]
 800b974:	4b57      	ldr	r3, [pc, #348]	; (800bad4 <_dtoa_r+0x2ec>)
 800b976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	ec51 0b19 	vmov	r0, r1, d9
 800b982:	f7f5 f8b3 	bl	8000aec <__aeabi_dcmplt>
 800b986:	2800      	cmp	r0, #0
 800b988:	d050      	beq.n	800ba2c <_dtoa_r+0x244>
 800b98a:	9b00      	ldr	r3, [sp, #0]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	2300      	movs	r3, #0
 800b992:	930b      	str	r3, [sp, #44]	; 0x2c
 800b994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b996:	1b5d      	subs	r5, r3, r5
 800b998:	1e6b      	subs	r3, r5, #1
 800b99a:	9305      	str	r3, [sp, #20]
 800b99c:	bf45      	ittet	mi
 800b99e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9a2:	9304      	strmi	r3, [sp, #16]
 800b9a4:	2300      	movpl	r3, #0
 800b9a6:	2300      	movmi	r3, #0
 800b9a8:	bf4c      	ite	mi
 800b9aa:	9305      	strmi	r3, [sp, #20]
 800b9ac:	9304      	strpl	r3, [sp, #16]
 800b9ae:	9b00      	ldr	r3, [sp, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	db3d      	blt.n	800ba30 <_dtoa_r+0x248>
 800b9b4:	9b05      	ldr	r3, [sp, #20]
 800b9b6:	9a00      	ldr	r2, [sp, #0]
 800b9b8:	920a      	str	r2, [sp, #40]	; 0x28
 800b9ba:	4413      	add	r3, r2
 800b9bc:	9305      	str	r3, [sp, #20]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9307      	str	r3, [sp, #28]
 800b9c2:	9b06      	ldr	r3, [sp, #24]
 800b9c4:	2b09      	cmp	r3, #9
 800b9c6:	f200 8089 	bhi.w	800badc <_dtoa_r+0x2f4>
 800b9ca:	2b05      	cmp	r3, #5
 800b9cc:	bfc4      	itt	gt
 800b9ce:	3b04      	subgt	r3, #4
 800b9d0:	9306      	strgt	r3, [sp, #24]
 800b9d2:	9b06      	ldr	r3, [sp, #24]
 800b9d4:	f1a3 0302 	sub.w	r3, r3, #2
 800b9d8:	bfcc      	ite	gt
 800b9da:	2500      	movgt	r5, #0
 800b9dc:	2501      	movle	r5, #1
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	f200 8087 	bhi.w	800baf2 <_dtoa_r+0x30a>
 800b9e4:	e8df f003 	tbb	[pc, r3]
 800b9e8:	59383a2d 	.word	0x59383a2d
 800b9ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9f0:	441d      	add	r5, r3
 800b9f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9f6:	2b20      	cmp	r3, #32
 800b9f8:	bfc1      	itttt	gt
 800b9fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba02:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba06:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba0a:	bfda      	itte	le
 800ba0c:	f1c3 0320 	rsble	r3, r3, #32
 800ba10:	fa06 f003 	lslle.w	r0, r6, r3
 800ba14:	4318      	orrgt	r0, r3
 800ba16:	f7f4 fd7d 	bl	8000514 <__aeabi_ui2d>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba22:	3d01      	subs	r5, #1
 800ba24:	930e      	str	r3, [sp, #56]	; 0x38
 800ba26:	e76a      	b.n	800b8fe <_dtoa_r+0x116>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e7b2      	b.n	800b992 <_dtoa_r+0x1aa>
 800ba2c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba2e:	e7b1      	b.n	800b994 <_dtoa_r+0x1ac>
 800ba30:	9b04      	ldr	r3, [sp, #16]
 800ba32:	9a00      	ldr	r2, [sp, #0]
 800ba34:	1a9b      	subs	r3, r3, r2
 800ba36:	9304      	str	r3, [sp, #16]
 800ba38:	4253      	negs	r3, r2
 800ba3a:	9307      	str	r3, [sp, #28]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba40:	e7bf      	b.n	800b9c2 <_dtoa_r+0x1da>
 800ba42:	2300      	movs	r3, #0
 800ba44:	9308      	str	r3, [sp, #32]
 800ba46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	dc55      	bgt.n	800baf8 <_dtoa_r+0x310>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba52:	461a      	mov	r2, r3
 800ba54:	9209      	str	r2, [sp, #36]	; 0x24
 800ba56:	e00c      	b.n	800ba72 <_dtoa_r+0x28a>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e7f3      	b.n	800ba44 <_dtoa_r+0x25c>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba60:	9308      	str	r3, [sp, #32]
 800ba62:	9b00      	ldr	r3, [sp, #0]
 800ba64:	4413      	add	r3, r2
 800ba66:	9302      	str	r3, [sp, #8]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	9303      	str	r3, [sp, #12]
 800ba6e:	bfb8      	it	lt
 800ba70:	2301      	movlt	r3, #1
 800ba72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba74:	2200      	movs	r2, #0
 800ba76:	6042      	str	r2, [r0, #4]
 800ba78:	2204      	movs	r2, #4
 800ba7a:	f102 0614 	add.w	r6, r2, #20
 800ba7e:	429e      	cmp	r6, r3
 800ba80:	6841      	ldr	r1, [r0, #4]
 800ba82:	d93d      	bls.n	800bb00 <_dtoa_r+0x318>
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 fca9 	bl	800c3dc <_Balloc>
 800ba8a:	9001      	str	r0, [sp, #4]
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d13b      	bne.n	800bb08 <_dtoa_r+0x320>
 800ba90:	4b11      	ldr	r3, [pc, #68]	; (800bad8 <_dtoa_r+0x2f0>)
 800ba92:	4602      	mov	r2, r0
 800ba94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba98:	e6c0      	b.n	800b81c <_dtoa_r+0x34>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e7df      	b.n	800ba5e <_dtoa_r+0x276>
 800ba9e:	bf00      	nop
 800baa0:	636f4361 	.word	0x636f4361
 800baa4:	3fd287a7 	.word	0x3fd287a7
 800baa8:	8b60c8b3 	.word	0x8b60c8b3
 800baac:	3fc68a28 	.word	0x3fc68a28
 800bab0:	509f79fb 	.word	0x509f79fb
 800bab4:	3fd34413 	.word	0x3fd34413
 800bab8:	0800fead 	.word	0x0800fead
 800babc:	0800fec4 	.word	0x0800fec4
 800bac0:	7ff00000 	.word	0x7ff00000
 800bac4:	0800fea9 	.word	0x0800fea9
 800bac8:	0800fea0 	.word	0x0800fea0
 800bacc:	0800fe7d 	.word	0x0800fe7d
 800bad0:	3ff80000 	.word	0x3ff80000
 800bad4:	0800ffb8 	.word	0x0800ffb8
 800bad8:	0800ff1f 	.word	0x0800ff1f
 800badc:	2501      	movs	r5, #1
 800bade:	2300      	movs	r3, #0
 800bae0:	9306      	str	r3, [sp, #24]
 800bae2:	9508      	str	r5, [sp, #32]
 800bae4:	f04f 33ff 	mov.w	r3, #4294967295
 800bae8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800baec:	2200      	movs	r2, #0
 800baee:	2312      	movs	r3, #18
 800baf0:	e7b0      	b.n	800ba54 <_dtoa_r+0x26c>
 800baf2:	2301      	movs	r3, #1
 800baf4:	9308      	str	r3, [sp, #32]
 800baf6:	e7f5      	b.n	800bae4 <_dtoa_r+0x2fc>
 800baf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bafa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bafe:	e7b8      	b.n	800ba72 <_dtoa_r+0x28a>
 800bb00:	3101      	adds	r1, #1
 800bb02:	6041      	str	r1, [r0, #4]
 800bb04:	0052      	lsls	r2, r2, #1
 800bb06:	e7b8      	b.n	800ba7a <_dtoa_r+0x292>
 800bb08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb0a:	9a01      	ldr	r2, [sp, #4]
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	2b0e      	cmp	r3, #14
 800bb12:	f200 809d 	bhi.w	800bc50 <_dtoa_r+0x468>
 800bb16:	2d00      	cmp	r5, #0
 800bb18:	f000 809a 	beq.w	800bc50 <_dtoa_r+0x468>
 800bb1c:	9b00      	ldr	r3, [sp, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	dd32      	ble.n	800bb88 <_dtoa_r+0x3a0>
 800bb22:	4ab7      	ldr	r2, [pc, #732]	; (800be00 <_dtoa_r+0x618>)
 800bb24:	f003 030f 	and.w	r3, r3, #15
 800bb28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb30:	9b00      	ldr	r3, [sp, #0]
 800bb32:	05d8      	lsls	r0, r3, #23
 800bb34:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb38:	d516      	bpl.n	800bb68 <_dtoa_r+0x380>
 800bb3a:	4bb2      	ldr	r3, [pc, #712]	; (800be04 <_dtoa_r+0x61c>)
 800bb3c:	ec51 0b19 	vmov	r0, r1, d9
 800bb40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb44:	f7f4 fe8a 	bl	800085c <__aeabi_ddiv>
 800bb48:	f007 070f 	and.w	r7, r7, #15
 800bb4c:	4682      	mov	sl, r0
 800bb4e:	468b      	mov	fp, r1
 800bb50:	2503      	movs	r5, #3
 800bb52:	4eac      	ldr	r6, [pc, #688]	; (800be04 <_dtoa_r+0x61c>)
 800bb54:	b957      	cbnz	r7, 800bb6c <_dtoa_r+0x384>
 800bb56:	4642      	mov	r2, r8
 800bb58:	464b      	mov	r3, r9
 800bb5a:	4650      	mov	r0, sl
 800bb5c:	4659      	mov	r1, fp
 800bb5e:	f7f4 fe7d 	bl	800085c <__aeabi_ddiv>
 800bb62:	4682      	mov	sl, r0
 800bb64:	468b      	mov	fp, r1
 800bb66:	e028      	b.n	800bbba <_dtoa_r+0x3d2>
 800bb68:	2502      	movs	r5, #2
 800bb6a:	e7f2      	b.n	800bb52 <_dtoa_r+0x36a>
 800bb6c:	07f9      	lsls	r1, r7, #31
 800bb6e:	d508      	bpl.n	800bb82 <_dtoa_r+0x39a>
 800bb70:	4640      	mov	r0, r8
 800bb72:	4649      	mov	r1, r9
 800bb74:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb78:	f7f4 fd46 	bl	8000608 <__aeabi_dmul>
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	4680      	mov	r8, r0
 800bb80:	4689      	mov	r9, r1
 800bb82:	107f      	asrs	r7, r7, #1
 800bb84:	3608      	adds	r6, #8
 800bb86:	e7e5      	b.n	800bb54 <_dtoa_r+0x36c>
 800bb88:	f000 809b 	beq.w	800bcc2 <_dtoa_r+0x4da>
 800bb8c:	9b00      	ldr	r3, [sp, #0]
 800bb8e:	4f9d      	ldr	r7, [pc, #628]	; (800be04 <_dtoa_r+0x61c>)
 800bb90:	425e      	negs	r6, r3
 800bb92:	4b9b      	ldr	r3, [pc, #620]	; (800be00 <_dtoa_r+0x618>)
 800bb94:	f006 020f 	and.w	r2, r6, #15
 800bb98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	ec51 0b19 	vmov	r0, r1, d9
 800bba4:	f7f4 fd30 	bl	8000608 <__aeabi_dmul>
 800bba8:	1136      	asrs	r6, r6, #4
 800bbaa:	4682      	mov	sl, r0
 800bbac:	468b      	mov	fp, r1
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2502      	movs	r5, #2
 800bbb2:	2e00      	cmp	r6, #0
 800bbb4:	d17a      	bne.n	800bcac <_dtoa_r+0x4c4>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1d3      	bne.n	800bb62 <_dtoa_r+0x37a>
 800bbba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8082 	beq.w	800bcc6 <_dtoa_r+0x4de>
 800bbc2:	4b91      	ldr	r3, [pc, #580]	; (800be08 <_dtoa_r+0x620>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	4650      	mov	r0, sl
 800bbc8:	4659      	mov	r1, fp
 800bbca:	f7f4 ff8f 	bl	8000aec <__aeabi_dcmplt>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d079      	beq.n	800bcc6 <_dtoa_r+0x4de>
 800bbd2:	9b03      	ldr	r3, [sp, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d076      	beq.n	800bcc6 <_dtoa_r+0x4de>
 800bbd8:	9b02      	ldr	r3, [sp, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dd36      	ble.n	800bc4c <_dtoa_r+0x464>
 800bbde:	9b00      	ldr	r3, [sp, #0]
 800bbe0:	4650      	mov	r0, sl
 800bbe2:	4659      	mov	r1, fp
 800bbe4:	1e5f      	subs	r7, r3, #1
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	4b88      	ldr	r3, [pc, #544]	; (800be0c <_dtoa_r+0x624>)
 800bbea:	f7f4 fd0d 	bl	8000608 <__aeabi_dmul>
 800bbee:	9e02      	ldr	r6, [sp, #8]
 800bbf0:	4682      	mov	sl, r0
 800bbf2:	468b      	mov	fp, r1
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f7f4 fc9c 	bl	8000534 <__aeabi_i2d>
 800bbfc:	4652      	mov	r2, sl
 800bbfe:	465b      	mov	r3, fp
 800bc00:	f7f4 fd02 	bl	8000608 <__aeabi_dmul>
 800bc04:	4b82      	ldr	r3, [pc, #520]	; (800be10 <_dtoa_r+0x628>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	f7f4 fb48 	bl	800029c <__adddf3>
 800bc0c:	46d0      	mov	r8, sl
 800bc0e:	46d9      	mov	r9, fp
 800bc10:	4682      	mov	sl, r0
 800bc12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc16:	2e00      	cmp	r6, #0
 800bc18:	d158      	bne.n	800bccc <_dtoa_r+0x4e4>
 800bc1a:	4b7e      	ldr	r3, [pc, #504]	; (800be14 <_dtoa_r+0x62c>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	4640      	mov	r0, r8
 800bc20:	4649      	mov	r1, r9
 800bc22:	f7f4 fb39 	bl	8000298 <__aeabi_dsub>
 800bc26:	4652      	mov	r2, sl
 800bc28:	465b      	mov	r3, fp
 800bc2a:	4680      	mov	r8, r0
 800bc2c:	4689      	mov	r9, r1
 800bc2e:	f7f4 ff7b 	bl	8000b28 <__aeabi_dcmpgt>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	f040 8295 	bne.w	800c162 <_dtoa_r+0x97a>
 800bc38:	4652      	mov	r2, sl
 800bc3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 ff53 	bl	8000aec <__aeabi_dcmplt>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f040 8289 	bne.w	800c15e <_dtoa_r+0x976>
 800bc4c:	ec5b ab19 	vmov	sl, fp, d9
 800bc50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f2c0 8148 	blt.w	800bee8 <_dtoa_r+0x700>
 800bc58:	9a00      	ldr	r2, [sp, #0]
 800bc5a:	2a0e      	cmp	r2, #14
 800bc5c:	f300 8144 	bgt.w	800bee8 <_dtoa_r+0x700>
 800bc60:	4b67      	ldr	r3, [pc, #412]	; (800be00 <_dtoa_r+0x618>)
 800bc62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc66:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f280 80d5 	bge.w	800be1c <_dtoa_r+0x634>
 800bc72:	9b03      	ldr	r3, [sp, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f300 80d1 	bgt.w	800be1c <_dtoa_r+0x634>
 800bc7a:	f040 826f 	bne.w	800c15c <_dtoa_r+0x974>
 800bc7e:	4b65      	ldr	r3, [pc, #404]	; (800be14 <_dtoa_r+0x62c>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	f7f4 fcbf 	bl	8000608 <__aeabi_dmul>
 800bc8a:	4652      	mov	r2, sl
 800bc8c:	465b      	mov	r3, fp
 800bc8e:	f7f4 ff41 	bl	8000b14 <__aeabi_dcmpge>
 800bc92:	9e03      	ldr	r6, [sp, #12]
 800bc94:	4637      	mov	r7, r6
 800bc96:	2800      	cmp	r0, #0
 800bc98:	f040 8245 	bne.w	800c126 <_dtoa_r+0x93e>
 800bc9c:	9d01      	ldr	r5, [sp, #4]
 800bc9e:	2331      	movs	r3, #49	; 0x31
 800bca0:	f805 3b01 	strb.w	r3, [r5], #1
 800bca4:	9b00      	ldr	r3, [sp, #0]
 800bca6:	3301      	adds	r3, #1
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	e240      	b.n	800c12e <_dtoa_r+0x946>
 800bcac:	07f2      	lsls	r2, r6, #31
 800bcae:	d505      	bpl.n	800bcbc <_dtoa_r+0x4d4>
 800bcb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcb4:	f7f4 fca8 	bl	8000608 <__aeabi_dmul>
 800bcb8:	3501      	adds	r5, #1
 800bcba:	2301      	movs	r3, #1
 800bcbc:	1076      	asrs	r6, r6, #1
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	e777      	b.n	800bbb2 <_dtoa_r+0x3ca>
 800bcc2:	2502      	movs	r5, #2
 800bcc4:	e779      	b.n	800bbba <_dtoa_r+0x3d2>
 800bcc6:	9f00      	ldr	r7, [sp, #0]
 800bcc8:	9e03      	ldr	r6, [sp, #12]
 800bcca:	e794      	b.n	800bbf6 <_dtoa_r+0x40e>
 800bccc:	9901      	ldr	r1, [sp, #4]
 800bcce:	4b4c      	ldr	r3, [pc, #304]	; (800be00 <_dtoa_r+0x618>)
 800bcd0:	4431      	add	r1, r6
 800bcd2:	910d      	str	r1, [sp, #52]	; 0x34
 800bcd4:	9908      	ldr	r1, [sp, #32]
 800bcd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcde:	2900      	cmp	r1, #0
 800bce0:	d043      	beq.n	800bd6a <_dtoa_r+0x582>
 800bce2:	494d      	ldr	r1, [pc, #308]	; (800be18 <_dtoa_r+0x630>)
 800bce4:	2000      	movs	r0, #0
 800bce6:	f7f4 fdb9 	bl	800085c <__aeabi_ddiv>
 800bcea:	4652      	mov	r2, sl
 800bcec:	465b      	mov	r3, fp
 800bcee:	f7f4 fad3 	bl	8000298 <__aeabi_dsub>
 800bcf2:	9d01      	ldr	r5, [sp, #4]
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	468b      	mov	fp, r1
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	f7f4 ff34 	bl	8000b68 <__aeabi_d2iz>
 800bd00:	4606      	mov	r6, r0
 800bd02:	f7f4 fc17 	bl	8000534 <__aeabi_i2d>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	f7f4 fac3 	bl	8000298 <__aeabi_dsub>
 800bd12:	3630      	adds	r6, #48	; 0x30
 800bd14:	f805 6b01 	strb.w	r6, [r5], #1
 800bd18:	4652      	mov	r2, sl
 800bd1a:	465b      	mov	r3, fp
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	4689      	mov	r9, r1
 800bd20:	f7f4 fee4 	bl	8000aec <__aeabi_dcmplt>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d163      	bne.n	800bdf0 <_dtoa_r+0x608>
 800bd28:	4642      	mov	r2, r8
 800bd2a:	464b      	mov	r3, r9
 800bd2c:	4936      	ldr	r1, [pc, #216]	; (800be08 <_dtoa_r+0x620>)
 800bd2e:	2000      	movs	r0, #0
 800bd30:	f7f4 fab2 	bl	8000298 <__aeabi_dsub>
 800bd34:	4652      	mov	r2, sl
 800bd36:	465b      	mov	r3, fp
 800bd38:	f7f4 fed8 	bl	8000aec <__aeabi_dcmplt>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	f040 80b5 	bne.w	800beac <_dtoa_r+0x6c4>
 800bd42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd44:	429d      	cmp	r5, r3
 800bd46:	d081      	beq.n	800bc4c <_dtoa_r+0x464>
 800bd48:	4b30      	ldr	r3, [pc, #192]	; (800be0c <_dtoa_r+0x624>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4650      	mov	r0, sl
 800bd4e:	4659      	mov	r1, fp
 800bd50:	f7f4 fc5a 	bl	8000608 <__aeabi_dmul>
 800bd54:	4b2d      	ldr	r3, [pc, #180]	; (800be0c <_dtoa_r+0x624>)
 800bd56:	4682      	mov	sl, r0
 800bd58:	468b      	mov	fp, r1
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f7f4 fc52 	bl	8000608 <__aeabi_dmul>
 800bd64:	4680      	mov	r8, r0
 800bd66:	4689      	mov	r9, r1
 800bd68:	e7c6      	b.n	800bcf8 <_dtoa_r+0x510>
 800bd6a:	4650      	mov	r0, sl
 800bd6c:	4659      	mov	r1, fp
 800bd6e:	f7f4 fc4b 	bl	8000608 <__aeabi_dmul>
 800bd72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd74:	9d01      	ldr	r5, [sp, #4]
 800bd76:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd78:	4682      	mov	sl, r0
 800bd7a:	468b      	mov	fp, r1
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	4640      	mov	r0, r8
 800bd80:	f7f4 fef2 	bl	8000b68 <__aeabi_d2iz>
 800bd84:	4606      	mov	r6, r0
 800bd86:	f7f4 fbd5 	bl	8000534 <__aeabi_i2d>
 800bd8a:	3630      	adds	r6, #48	; 0x30
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	4640      	mov	r0, r8
 800bd92:	4649      	mov	r1, r9
 800bd94:	f7f4 fa80 	bl	8000298 <__aeabi_dsub>
 800bd98:	f805 6b01 	strb.w	r6, [r5], #1
 800bd9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd9e:	429d      	cmp	r5, r3
 800bda0:	4680      	mov	r8, r0
 800bda2:	4689      	mov	r9, r1
 800bda4:	f04f 0200 	mov.w	r2, #0
 800bda8:	d124      	bne.n	800bdf4 <_dtoa_r+0x60c>
 800bdaa:	4b1b      	ldr	r3, [pc, #108]	; (800be18 <_dtoa_r+0x630>)
 800bdac:	4650      	mov	r0, sl
 800bdae:	4659      	mov	r1, fp
 800bdb0:	f7f4 fa74 	bl	800029c <__adddf3>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4640      	mov	r0, r8
 800bdba:	4649      	mov	r1, r9
 800bdbc:	f7f4 feb4 	bl	8000b28 <__aeabi_dcmpgt>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d173      	bne.n	800beac <_dtoa_r+0x6c4>
 800bdc4:	4652      	mov	r2, sl
 800bdc6:	465b      	mov	r3, fp
 800bdc8:	4913      	ldr	r1, [pc, #76]	; (800be18 <_dtoa_r+0x630>)
 800bdca:	2000      	movs	r0, #0
 800bdcc:	f7f4 fa64 	bl	8000298 <__aeabi_dsub>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4640      	mov	r0, r8
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	f7f4 fe88 	bl	8000aec <__aeabi_dcmplt>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f43f af35 	beq.w	800bc4c <_dtoa_r+0x464>
 800bde2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bde4:	1e6b      	subs	r3, r5, #1
 800bde6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bde8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdec:	2b30      	cmp	r3, #48	; 0x30
 800bdee:	d0f8      	beq.n	800bde2 <_dtoa_r+0x5fa>
 800bdf0:	9700      	str	r7, [sp, #0]
 800bdf2:	e049      	b.n	800be88 <_dtoa_r+0x6a0>
 800bdf4:	4b05      	ldr	r3, [pc, #20]	; (800be0c <_dtoa_r+0x624>)
 800bdf6:	f7f4 fc07 	bl	8000608 <__aeabi_dmul>
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	4689      	mov	r9, r1
 800bdfe:	e7bd      	b.n	800bd7c <_dtoa_r+0x594>
 800be00:	0800ffb8 	.word	0x0800ffb8
 800be04:	0800ff90 	.word	0x0800ff90
 800be08:	3ff00000 	.word	0x3ff00000
 800be0c:	40240000 	.word	0x40240000
 800be10:	401c0000 	.word	0x401c0000
 800be14:	40140000 	.word	0x40140000
 800be18:	3fe00000 	.word	0x3fe00000
 800be1c:	9d01      	ldr	r5, [sp, #4]
 800be1e:	4656      	mov	r6, sl
 800be20:	465f      	mov	r7, fp
 800be22:	4642      	mov	r2, r8
 800be24:	464b      	mov	r3, r9
 800be26:	4630      	mov	r0, r6
 800be28:	4639      	mov	r1, r7
 800be2a:	f7f4 fd17 	bl	800085c <__aeabi_ddiv>
 800be2e:	f7f4 fe9b 	bl	8000b68 <__aeabi_d2iz>
 800be32:	4682      	mov	sl, r0
 800be34:	f7f4 fb7e 	bl	8000534 <__aeabi_i2d>
 800be38:	4642      	mov	r2, r8
 800be3a:	464b      	mov	r3, r9
 800be3c:	f7f4 fbe4 	bl	8000608 <__aeabi_dmul>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4630      	mov	r0, r6
 800be46:	4639      	mov	r1, r7
 800be48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be4c:	f7f4 fa24 	bl	8000298 <__aeabi_dsub>
 800be50:	f805 6b01 	strb.w	r6, [r5], #1
 800be54:	9e01      	ldr	r6, [sp, #4]
 800be56:	9f03      	ldr	r7, [sp, #12]
 800be58:	1bae      	subs	r6, r5, r6
 800be5a:	42b7      	cmp	r7, r6
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	d135      	bne.n	800bece <_dtoa_r+0x6e6>
 800be62:	f7f4 fa1b 	bl	800029c <__adddf3>
 800be66:	4642      	mov	r2, r8
 800be68:	464b      	mov	r3, r9
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	f7f4 fe5b 	bl	8000b28 <__aeabi_dcmpgt>
 800be72:	b9d0      	cbnz	r0, 800beaa <_dtoa_r+0x6c2>
 800be74:	4642      	mov	r2, r8
 800be76:	464b      	mov	r3, r9
 800be78:	4630      	mov	r0, r6
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 fe2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800be80:	b110      	cbz	r0, 800be88 <_dtoa_r+0x6a0>
 800be82:	f01a 0f01 	tst.w	sl, #1
 800be86:	d110      	bne.n	800beaa <_dtoa_r+0x6c2>
 800be88:	4620      	mov	r0, r4
 800be8a:	ee18 1a10 	vmov	r1, s16
 800be8e:	f000 fae5 	bl	800c45c <_Bfree>
 800be92:	2300      	movs	r3, #0
 800be94:	9800      	ldr	r0, [sp, #0]
 800be96:	702b      	strb	r3, [r5, #0]
 800be98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be9a:	3001      	adds	r0, #1
 800be9c:	6018      	str	r0, [r3, #0]
 800be9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f43f acf1 	beq.w	800b888 <_dtoa_r+0xa0>
 800bea6:	601d      	str	r5, [r3, #0]
 800bea8:	e4ee      	b.n	800b888 <_dtoa_r+0xa0>
 800beaa:	9f00      	ldr	r7, [sp, #0]
 800beac:	462b      	mov	r3, r5
 800beae:	461d      	mov	r5, r3
 800beb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800beb4:	2a39      	cmp	r2, #57	; 0x39
 800beb6:	d106      	bne.n	800bec6 <_dtoa_r+0x6de>
 800beb8:	9a01      	ldr	r2, [sp, #4]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d1f7      	bne.n	800beae <_dtoa_r+0x6c6>
 800bebe:	9901      	ldr	r1, [sp, #4]
 800bec0:	2230      	movs	r2, #48	; 0x30
 800bec2:	3701      	adds	r7, #1
 800bec4:	700a      	strb	r2, [r1, #0]
 800bec6:	781a      	ldrb	r2, [r3, #0]
 800bec8:	3201      	adds	r2, #1
 800beca:	701a      	strb	r2, [r3, #0]
 800becc:	e790      	b.n	800bdf0 <_dtoa_r+0x608>
 800bece:	4ba6      	ldr	r3, [pc, #664]	; (800c168 <_dtoa_r+0x980>)
 800bed0:	2200      	movs	r2, #0
 800bed2:	f7f4 fb99 	bl	8000608 <__aeabi_dmul>
 800bed6:	2200      	movs	r2, #0
 800bed8:	2300      	movs	r3, #0
 800beda:	4606      	mov	r6, r0
 800bedc:	460f      	mov	r7, r1
 800bede:	f7f4 fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d09d      	beq.n	800be22 <_dtoa_r+0x63a>
 800bee6:	e7cf      	b.n	800be88 <_dtoa_r+0x6a0>
 800bee8:	9a08      	ldr	r2, [sp, #32]
 800beea:	2a00      	cmp	r2, #0
 800beec:	f000 80d7 	beq.w	800c09e <_dtoa_r+0x8b6>
 800bef0:	9a06      	ldr	r2, [sp, #24]
 800bef2:	2a01      	cmp	r2, #1
 800bef4:	f300 80ba 	bgt.w	800c06c <_dtoa_r+0x884>
 800bef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800befa:	2a00      	cmp	r2, #0
 800befc:	f000 80b2 	beq.w	800c064 <_dtoa_r+0x87c>
 800bf00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf04:	9e07      	ldr	r6, [sp, #28]
 800bf06:	9d04      	ldr	r5, [sp, #16]
 800bf08:	9a04      	ldr	r2, [sp, #16]
 800bf0a:	441a      	add	r2, r3
 800bf0c:	9204      	str	r2, [sp, #16]
 800bf0e:	9a05      	ldr	r2, [sp, #20]
 800bf10:	2101      	movs	r1, #1
 800bf12:	441a      	add	r2, r3
 800bf14:	4620      	mov	r0, r4
 800bf16:	9205      	str	r2, [sp, #20]
 800bf18:	f000 fb58 	bl	800c5cc <__i2b>
 800bf1c:	4607      	mov	r7, r0
 800bf1e:	2d00      	cmp	r5, #0
 800bf20:	dd0c      	ble.n	800bf3c <_dtoa_r+0x754>
 800bf22:	9b05      	ldr	r3, [sp, #20]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	dd09      	ble.n	800bf3c <_dtoa_r+0x754>
 800bf28:	42ab      	cmp	r3, r5
 800bf2a:	9a04      	ldr	r2, [sp, #16]
 800bf2c:	bfa8      	it	ge
 800bf2e:	462b      	movge	r3, r5
 800bf30:	1ad2      	subs	r2, r2, r3
 800bf32:	9204      	str	r2, [sp, #16]
 800bf34:	9a05      	ldr	r2, [sp, #20]
 800bf36:	1aed      	subs	r5, r5, r3
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	9305      	str	r3, [sp, #20]
 800bf3c:	9b07      	ldr	r3, [sp, #28]
 800bf3e:	b31b      	cbz	r3, 800bf88 <_dtoa_r+0x7a0>
 800bf40:	9b08      	ldr	r3, [sp, #32]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 80af 	beq.w	800c0a6 <_dtoa_r+0x8be>
 800bf48:	2e00      	cmp	r6, #0
 800bf4a:	dd13      	ble.n	800bf74 <_dtoa_r+0x78c>
 800bf4c:	4639      	mov	r1, r7
 800bf4e:	4632      	mov	r2, r6
 800bf50:	4620      	mov	r0, r4
 800bf52:	f000 fbfb 	bl	800c74c <__pow5mult>
 800bf56:	ee18 2a10 	vmov	r2, s16
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	4607      	mov	r7, r0
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 fb4a 	bl	800c5f8 <__multiply>
 800bf64:	ee18 1a10 	vmov	r1, s16
 800bf68:	4680      	mov	r8, r0
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 fa76 	bl	800c45c <_Bfree>
 800bf70:	ee08 8a10 	vmov	s16, r8
 800bf74:	9b07      	ldr	r3, [sp, #28]
 800bf76:	1b9a      	subs	r2, r3, r6
 800bf78:	d006      	beq.n	800bf88 <_dtoa_r+0x7a0>
 800bf7a:	ee18 1a10 	vmov	r1, s16
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f000 fbe4 	bl	800c74c <__pow5mult>
 800bf84:	ee08 0a10 	vmov	s16, r0
 800bf88:	2101      	movs	r1, #1
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f000 fb1e 	bl	800c5cc <__i2b>
 800bf90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	4606      	mov	r6, r0
 800bf96:	f340 8088 	ble.w	800c0aa <_dtoa_r+0x8c2>
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	4601      	mov	r1, r0
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f000 fbd4 	bl	800c74c <__pow5mult>
 800bfa4:	9b06      	ldr	r3, [sp, #24]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	f340 8081 	ble.w	800c0b0 <_dtoa_r+0x8c8>
 800bfae:	f04f 0800 	mov.w	r8, #0
 800bfb2:	6933      	ldr	r3, [r6, #16]
 800bfb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfb8:	6918      	ldr	r0, [r3, #16]
 800bfba:	f000 fab7 	bl	800c52c <__hi0bits>
 800bfbe:	f1c0 0020 	rsb	r0, r0, #32
 800bfc2:	9b05      	ldr	r3, [sp, #20]
 800bfc4:	4418      	add	r0, r3
 800bfc6:	f010 001f 	ands.w	r0, r0, #31
 800bfca:	f000 8092 	beq.w	800c0f2 <_dtoa_r+0x90a>
 800bfce:	f1c0 0320 	rsb	r3, r0, #32
 800bfd2:	2b04      	cmp	r3, #4
 800bfd4:	f340 808a 	ble.w	800c0ec <_dtoa_r+0x904>
 800bfd8:	f1c0 001c 	rsb	r0, r0, #28
 800bfdc:	9b04      	ldr	r3, [sp, #16]
 800bfde:	4403      	add	r3, r0
 800bfe0:	9304      	str	r3, [sp, #16]
 800bfe2:	9b05      	ldr	r3, [sp, #20]
 800bfe4:	4403      	add	r3, r0
 800bfe6:	4405      	add	r5, r0
 800bfe8:	9305      	str	r3, [sp, #20]
 800bfea:	9b04      	ldr	r3, [sp, #16]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	dd07      	ble.n	800c000 <_dtoa_r+0x818>
 800bff0:	ee18 1a10 	vmov	r1, s16
 800bff4:	461a      	mov	r2, r3
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 fc02 	bl	800c800 <__lshift>
 800bffc:	ee08 0a10 	vmov	s16, r0
 800c000:	9b05      	ldr	r3, [sp, #20]
 800c002:	2b00      	cmp	r3, #0
 800c004:	dd05      	ble.n	800c012 <_dtoa_r+0x82a>
 800c006:	4631      	mov	r1, r6
 800c008:	461a      	mov	r2, r3
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fbf8 	bl	800c800 <__lshift>
 800c010:	4606      	mov	r6, r0
 800c012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d06e      	beq.n	800c0f6 <_dtoa_r+0x90e>
 800c018:	ee18 0a10 	vmov	r0, s16
 800c01c:	4631      	mov	r1, r6
 800c01e:	f000 fc5f 	bl	800c8e0 <__mcmp>
 800c022:	2800      	cmp	r0, #0
 800c024:	da67      	bge.n	800c0f6 <_dtoa_r+0x90e>
 800c026:	9b00      	ldr	r3, [sp, #0]
 800c028:	3b01      	subs	r3, #1
 800c02a:	ee18 1a10 	vmov	r1, s16
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	220a      	movs	r2, #10
 800c032:	2300      	movs	r3, #0
 800c034:	4620      	mov	r0, r4
 800c036:	f000 fa33 	bl	800c4a0 <__multadd>
 800c03a:	9b08      	ldr	r3, [sp, #32]
 800c03c:	ee08 0a10 	vmov	s16, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 81b1 	beq.w	800c3a8 <_dtoa_r+0xbc0>
 800c046:	2300      	movs	r3, #0
 800c048:	4639      	mov	r1, r7
 800c04a:	220a      	movs	r2, #10
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fa27 	bl	800c4a0 <__multadd>
 800c052:	9b02      	ldr	r3, [sp, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	4607      	mov	r7, r0
 800c058:	f300 808e 	bgt.w	800c178 <_dtoa_r+0x990>
 800c05c:	9b06      	ldr	r3, [sp, #24]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	dc51      	bgt.n	800c106 <_dtoa_r+0x91e>
 800c062:	e089      	b.n	800c178 <_dtoa_r+0x990>
 800c064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c06a:	e74b      	b.n	800bf04 <_dtoa_r+0x71c>
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	1e5e      	subs	r6, r3, #1
 800c070:	9b07      	ldr	r3, [sp, #28]
 800c072:	42b3      	cmp	r3, r6
 800c074:	bfbf      	itttt	lt
 800c076:	9b07      	ldrlt	r3, [sp, #28]
 800c078:	9607      	strlt	r6, [sp, #28]
 800c07a:	1af2      	sublt	r2, r6, r3
 800c07c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c07e:	bfb6      	itet	lt
 800c080:	189b      	addlt	r3, r3, r2
 800c082:	1b9e      	subge	r6, r3, r6
 800c084:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c086:	9b03      	ldr	r3, [sp, #12]
 800c088:	bfb8      	it	lt
 800c08a:	2600      	movlt	r6, #0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	bfb7      	itett	lt
 800c090:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c094:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c098:	1a9d      	sublt	r5, r3, r2
 800c09a:	2300      	movlt	r3, #0
 800c09c:	e734      	b.n	800bf08 <_dtoa_r+0x720>
 800c09e:	9e07      	ldr	r6, [sp, #28]
 800c0a0:	9d04      	ldr	r5, [sp, #16]
 800c0a2:	9f08      	ldr	r7, [sp, #32]
 800c0a4:	e73b      	b.n	800bf1e <_dtoa_r+0x736>
 800c0a6:	9a07      	ldr	r2, [sp, #28]
 800c0a8:	e767      	b.n	800bf7a <_dtoa_r+0x792>
 800c0aa:	9b06      	ldr	r3, [sp, #24]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	dc18      	bgt.n	800c0e2 <_dtoa_r+0x8fa>
 800c0b0:	f1ba 0f00 	cmp.w	sl, #0
 800c0b4:	d115      	bne.n	800c0e2 <_dtoa_r+0x8fa>
 800c0b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0ba:	b993      	cbnz	r3, 800c0e2 <_dtoa_r+0x8fa>
 800c0bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0c0:	0d1b      	lsrs	r3, r3, #20
 800c0c2:	051b      	lsls	r3, r3, #20
 800c0c4:	b183      	cbz	r3, 800c0e8 <_dtoa_r+0x900>
 800c0c6:	9b04      	ldr	r3, [sp, #16]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	9b05      	ldr	r3, [sp, #20]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	9305      	str	r3, [sp, #20]
 800c0d2:	f04f 0801 	mov.w	r8, #1
 800c0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f47f af6a 	bne.w	800bfb2 <_dtoa_r+0x7ca>
 800c0de:	2001      	movs	r0, #1
 800c0e0:	e76f      	b.n	800bfc2 <_dtoa_r+0x7da>
 800c0e2:	f04f 0800 	mov.w	r8, #0
 800c0e6:	e7f6      	b.n	800c0d6 <_dtoa_r+0x8ee>
 800c0e8:	4698      	mov	r8, r3
 800c0ea:	e7f4      	b.n	800c0d6 <_dtoa_r+0x8ee>
 800c0ec:	f43f af7d 	beq.w	800bfea <_dtoa_r+0x802>
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	301c      	adds	r0, #28
 800c0f4:	e772      	b.n	800bfdc <_dtoa_r+0x7f4>
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	dc37      	bgt.n	800c16c <_dtoa_r+0x984>
 800c0fc:	9b06      	ldr	r3, [sp, #24]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	dd34      	ble.n	800c16c <_dtoa_r+0x984>
 800c102:	9b03      	ldr	r3, [sp, #12]
 800c104:	9302      	str	r3, [sp, #8]
 800c106:	9b02      	ldr	r3, [sp, #8]
 800c108:	b96b      	cbnz	r3, 800c126 <_dtoa_r+0x93e>
 800c10a:	4631      	mov	r1, r6
 800c10c:	2205      	movs	r2, #5
 800c10e:	4620      	mov	r0, r4
 800c110:	f000 f9c6 	bl	800c4a0 <__multadd>
 800c114:	4601      	mov	r1, r0
 800c116:	4606      	mov	r6, r0
 800c118:	ee18 0a10 	vmov	r0, s16
 800c11c:	f000 fbe0 	bl	800c8e0 <__mcmp>
 800c120:	2800      	cmp	r0, #0
 800c122:	f73f adbb 	bgt.w	800bc9c <_dtoa_r+0x4b4>
 800c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c128:	9d01      	ldr	r5, [sp, #4]
 800c12a:	43db      	mvns	r3, r3
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	f04f 0800 	mov.w	r8, #0
 800c132:	4631      	mov	r1, r6
 800c134:	4620      	mov	r0, r4
 800c136:	f000 f991 	bl	800c45c <_Bfree>
 800c13a:	2f00      	cmp	r7, #0
 800c13c:	f43f aea4 	beq.w	800be88 <_dtoa_r+0x6a0>
 800c140:	f1b8 0f00 	cmp.w	r8, #0
 800c144:	d005      	beq.n	800c152 <_dtoa_r+0x96a>
 800c146:	45b8      	cmp	r8, r7
 800c148:	d003      	beq.n	800c152 <_dtoa_r+0x96a>
 800c14a:	4641      	mov	r1, r8
 800c14c:	4620      	mov	r0, r4
 800c14e:	f000 f985 	bl	800c45c <_Bfree>
 800c152:	4639      	mov	r1, r7
 800c154:	4620      	mov	r0, r4
 800c156:	f000 f981 	bl	800c45c <_Bfree>
 800c15a:	e695      	b.n	800be88 <_dtoa_r+0x6a0>
 800c15c:	2600      	movs	r6, #0
 800c15e:	4637      	mov	r7, r6
 800c160:	e7e1      	b.n	800c126 <_dtoa_r+0x93e>
 800c162:	9700      	str	r7, [sp, #0]
 800c164:	4637      	mov	r7, r6
 800c166:	e599      	b.n	800bc9c <_dtoa_r+0x4b4>
 800c168:	40240000 	.word	0x40240000
 800c16c:	9b08      	ldr	r3, [sp, #32]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 80ca 	beq.w	800c308 <_dtoa_r+0xb20>
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	9302      	str	r3, [sp, #8]
 800c178:	2d00      	cmp	r5, #0
 800c17a:	dd05      	ble.n	800c188 <_dtoa_r+0x9a0>
 800c17c:	4639      	mov	r1, r7
 800c17e:	462a      	mov	r2, r5
 800c180:	4620      	mov	r0, r4
 800c182:	f000 fb3d 	bl	800c800 <__lshift>
 800c186:	4607      	mov	r7, r0
 800c188:	f1b8 0f00 	cmp.w	r8, #0
 800c18c:	d05b      	beq.n	800c246 <_dtoa_r+0xa5e>
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	4620      	mov	r0, r4
 800c192:	f000 f923 	bl	800c3dc <_Balloc>
 800c196:	4605      	mov	r5, r0
 800c198:	b928      	cbnz	r0, 800c1a6 <_dtoa_r+0x9be>
 800c19a:	4b87      	ldr	r3, [pc, #540]	; (800c3b8 <_dtoa_r+0xbd0>)
 800c19c:	4602      	mov	r2, r0
 800c19e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1a2:	f7ff bb3b 	b.w	800b81c <_dtoa_r+0x34>
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	3202      	adds	r2, #2
 800c1aa:	0092      	lsls	r2, r2, #2
 800c1ac:	f107 010c 	add.w	r1, r7, #12
 800c1b0:	300c      	adds	r0, #12
 800c1b2:	f7fe fda3 	bl	800acfc <memcpy>
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 fb20 	bl	800c800 <__lshift>
 800c1c0:	9b01      	ldr	r3, [sp, #4]
 800c1c2:	f103 0901 	add.w	r9, r3, #1
 800c1c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	9305      	str	r3, [sp, #20]
 800c1ce:	f00a 0301 	and.w	r3, sl, #1
 800c1d2:	46b8      	mov	r8, r7
 800c1d4:	9304      	str	r3, [sp, #16]
 800c1d6:	4607      	mov	r7, r0
 800c1d8:	4631      	mov	r1, r6
 800c1da:	ee18 0a10 	vmov	r0, s16
 800c1de:	f7ff fa75 	bl	800b6cc <quorem>
 800c1e2:	4641      	mov	r1, r8
 800c1e4:	9002      	str	r0, [sp, #8]
 800c1e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1ea:	ee18 0a10 	vmov	r0, s16
 800c1ee:	f000 fb77 	bl	800c8e0 <__mcmp>
 800c1f2:	463a      	mov	r2, r7
 800c1f4:	9003      	str	r0, [sp, #12]
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f000 fb8d 	bl	800c918 <__mdiff>
 800c1fe:	68c2      	ldr	r2, [r0, #12]
 800c200:	f109 3bff 	add.w	fp, r9, #4294967295
 800c204:	4605      	mov	r5, r0
 800c206:	bb02      	cbnz	r2, 800c24a <_dtoa_r+0xa62>
 800c208:	4601      	mov	r1, r0
 800c20a:	ee18 0a10 	vmov	r0, s16
 800c20e:	f000 fb67 	bl	800c8e0 <__mcmp>
 800c212:	4602      	mov	r2, r0
 800c214:	4629      	mov	r1, r5
 800c216:	4620      	mov	r0, r4
 800c218:	9207      	str	r2, [sp, #28]
 800c21a:	f000 f91f 	bl	800c45c <_Bfree>
 800c21e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c222:	ea43 0102 	orr.w	r1, r3, r2
 800c226:	9b04      	ldr	r3, [sp, #16]
 800c228:	430b      	orrs	r3, r1
 800c22a:	464d      	mov	r5, r9
 800c22c:	d10f      	bne.n	800c24e <_dtoa_r+0xa66>
 800c22e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c232:	d02a      	beq.n	800c28a <_dtoa_r+0xaa2>
 800c234:	9b03      	ldr	r3, [sp, #12]
 800c236:	2b00      	cmp	r3, #0
 800c238:	dd02      	ble.n	800c240 <_dtoa_r+0xa58>
 800c23a:	9b02      	ldr	r3, [sp, #8]
 800c23c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c240:	f88b a000 	strb.w	sl, [fp]
 800c244:	e775      	b.n	800c132 <_dtoa_r+0x94a>
 800c246:	4638      	mov	r0, r7
 800c248:	e7ba      	b.n	800c1c0 <_dtoa_r+0x9d8>
 800c24a:	2201      	movs	r2, #1
 800c24c:	e7e2      	b.n	800c214 <_dtoa_r+0xa2c>
 800c24e:	9b03      	ldr	r3, [sp, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	db04      	blt.n	800c25e <_dtoa_r+0xa76>
 800c254:	9906      	ldr	r1, [sp, #24]
 800c256:	430b      	orrs	r3, r1
 800c258:	9904      	ldr	r1, [sp, #16]
 800c25a:	430b      	orrs	r3, r1
 800c25c:	d122      	bne.n	800c2a4 <_dtoa_r+0xabc>
 800c25e:	2a00      	cmp	r2, #0
 800c260:	ddee      	ble.n	800c240 <_dtoa_r+0xa58>
 800c262:	ee18 1a10 	vmov	r1, s16
 800c266:	2201      	movs	r2, #1
 800c268:	4620      	mov	r0, r4
 800c26a:	f000 fac9 	bl	800c800 <__lshift>
 800c26e:	4631      	mov	r1, r6
 800c270:	ee08 0a10 	vmov	s16, r0
 800c274:	f000 fb34 	bl	800c8e0 <__mcmp>
 800c278:	2800      	cmp	r0, #0
 800c27a:	dc03      	bgt.n	800c284 <_dtoa_r+0xa9c>
 800c27c:	d1e0      	bne.n	800c240 <_dtoa_r+0xa58>
 800c27e:	f01a 0f01 	tst.w	sl, #1
 800c282:	d0dd      	beq.n	800c240 <_dtoa_r+0xa58>
 800c284:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c288:	d1d7      	bne.n	800c23a <_dtoa_r+0xa52>
 800c28a:	2339      	movs	r3, #57	; 0x39
 800c28c:	f88b 3000 	strb.w	r3, [fp]
 800c290:	462b      	mov	r3, r5
 800c292:	461d      	mov	r5, r3
 800c294:	3b01      	subs	r3, #1
 800c296:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c29a:	2a39      	cmp	r2, #57	; 0x39
 800c29c:	d071      	beq.n	800c382 <_dtoa_r+0xb9a>
 800c29e:	3201      	adds	r2, #1
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	e746      	b.n	800c132 <_dtoa_r+0x94a>
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	dd07      	ble.n	800c2b8 <_dtoa_r+0xad0>
 800c2a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2ac:	d0ed      	beq.n	800c28a <_dtoa_r+0xaa2>
 800c2ae:	f10a 0301 	add.w	r3, sl, #1
 800c2b2:	f88b 3000 	strb.w	r3, [fp]
 800c2b6:	e73c      	b.n	800c132 <_dtoa_r+0x94a>
 800c2b8:	9b05      	ldr	r3, [sp, #20]
 800c2ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c2be:	4599      	cmp	r9, r3
 800c2c0:	d047      	beq.n	800c352 <_dtoa_r+0xb6a>
 800c2c2:	ee18 1a10 	vmov	r1, s16
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	220a      	movs	r2, #10
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 f8e8 	bl	800c4a0 <__multadd>
 800c2d0:	45b8      	cmp	r8, r7
 800c2d2:	ee08 0a10 	vmov	s16, r0
 800c2d6:	f04f 0300 	mov.w	r3, #0
 800c2da:	f04f 020a 	mov.w	r2, #10
 800c2de:	4641      	mov	r1, r8
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	d106      	bne.n	800c2f2 <_dtoa_r+0xb0a>
 800c2e4:	f000 f8dc 	bl	800c4a0 <__multadd>
 800c2e8:	4680      	mov	r8, r0
 800c2ea:	4607      	mov	r7, r0
 800c2ec:	f109 0901 	add.w	r9, r9, #1
 800c2f0:	e772      	b.n	800c1d8 <_dtoa_r+0x9f0>
 800c2f2:	f000 f8d5 	bl	800c4a0 <__multadd>
 800c2f6:	4639      	mov	r1, r7
 800c2f8:	4680      	mov	r8, r0
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	220a      	movs	r2, #10
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 f8ce 	bl	800c4a0 <__multadd>
 800c304:	4607      	mov	r7, r0
 800c306:	e7f1      	b.n	800c2ec <_dtoa_r+0xb04>
 800c308:	9b03      	ldr	r3, [sp, #12]
 800c30a:	9302      	str	r3, [sp, #8]
 800c30c:	9d01      	ldr	r5, [sp, #4]
 800c30e:	ee18 0a10 	vmov	r0, s16
 800c312:	4631      	mov	r1, r6
 800c314:	f7ff f9da 	bl	800b6cc <quorem>
 800c318:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	f805 ab01 	strb.w	sl, [r5], #1
 800c322:	1aea      	subs	r2, r5, r3
 800c324:	9b02      	ldr	r3, [sp, #8]
 800c326:	4293      	cmp	r3, r2
 800c328:	dd09      	ble.n	800c33e <_dtoa_r+0xb56>
 800c32a:	ee18 1a10 	vmov	r1, s16
 800c32e:	2300      	movs	r3, #0
 800c330:	220a      	movs	r2, #10
 800c332:	4620      	mov	r0, r4
 800c334:	f000 f8b4 	bl	800c4a0 <__multadd>
 800c338:	ee08 0a10 	vmov	s16, r0
 800c33c:	e7e7      	b.n	800c30e <_dtoa_r+0xb26>
 800c33e:	9b02      	ldr	r3, [sp, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	bfc8      	it	gt
 800c344:	461d      	movgt	r5, r3
 800c346:	9b01      	ldr	r3, [sp, #4]
 800c348:	bfd8      	it	le
 800c34a:	2501      	movle	r5, #1
 800c34c:	441d      	add	r5, r3
 800c34e:	f04f 0800 	mov.w	r8, #0
 800c352:	ee18 1a10 	vmov	r1, s16
 800c356:	2201      	movs	r2, #1
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fa51 	bl	800c800 <__lshift>
 800c35e:	4631      	mov	r1, r6
 800c360:	ee08 0a10 	vmov	s16, r0
 800c364:	f000 fabc 	bl	800c8e0 <__mcmp>
 800c368:	2800      	cmp	r0, #0
 800c36a:	dc91      	bgt.n	800c290 <_dtoa_r+0xaa8>
 800c36c:	d102      	bne.n	800c374 <_dtoa_r+0xb8c>
 800c36e:	f01a 0f01 	tst.w	sl, #1
 800c372:	d18d      	bne.n	800c290 <_dtoa_r+0xaa8>
 800c374:	462b      	mov	r3, r5
 800c376:	461d      	mov	r5, r3
 800c378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c37c:	2a30      	cmp	r2, #48	; 0x30
 800c37e:	d0fa      	beq.n	800c376 <_dtoa_r+0xb8e>
 800c380:	e6d7      	b.n	800c132 <_dtoa_r+0x94a>
 800c382:	9a01      	ldr	r2, [sp, #4]
 800c384:	429a      	cmp	r2, r3
 800c386:	d184      	bne.n	800c292 <_dtoa_r+0xaaa>
 800c388:	9b00      	ldr	r3, [sp, #0]
 800c38a:	3301      	adds	r3, #1
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	2331      	movs	r3, #49	; 0x31
 800c390:	7013      	strb	r3, [r2, #0]
 800c392:	e6ce      	b.n	800c132 <_dtoa_r+0x94a>
 800c394:	4b09      	ldr	r3, [pc, #36]	; (800c3bc <_dtoa_r+0xbd4>)
 800c396:	f7ff ba95 	b.w	800b8c4 <_dtoa_r+0xdc>
 800c39a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f47f aa6e 	bne.w	800b87e <_dtoa_r+0x96>
 800c3a2:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <_dtoa_r+0xbd8>)
 800c3a4:	f7ff ba8e 	b.w	800b8c4 <_dtoa_r+0xdc>
 800c3a8:	9b02      	ldr	r3, [sp, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	dcae      	bgt.n	800c30c <_dtoa_r+0xb24>
 800c3ae:	9b06      	ldr	r3, [sp, #24]
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	f73f aea8 	bgt.w	800c106 <_dtoa_r+0x91e>
 800c3b6:	e7a9      	b.n	800c30c <_dtoa_r+0xb24>
 800c3b8:	0800ff1f 	.word	0x0800ff1f
 800c3bc:	0800fe7c 	.word	0x0800fe7c
 800c3c0:	0800fea0 	.word	0x0800fea0

0800c3c4 <_localeconv_r>:
 800c3c4:	4800      	ldr	r0, [pc, #0]	; (800c3c8 <_localeconv_r+0x4>)
 800c3c6:	4770      	bx	lr
 800c3c8:	2000017c 	.word	0x2000017c

0800c3cc <malloc>:
 800c3cc:	4b02      	ldr	r3, [pc, #8]	; (800c3d8 <malloc+0xc>)
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	6818      	ldr	r0, [r3, #0]
 800c3d2:	f000 bc09 	b.w	800cbe8 <_malloc_r>
 800c3d6:	bf00      	nop
 800c3d8:	20000028 	.word	0x20000028

0800c3dc <_Balloc>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	460d      	mov	r5, r1
 800c3e4:	b976      	cbnz	r6, 800c404 <_Balloc+0x28>
 800c3e6:	2010      	movs	r0, #16
 800c3e8:	f7ff fff0 	bl	800c3cc <malloc>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	6260      	str	r0, [r4, #36]	; 0x24
 800c3f0:	b920      	cbnz	r0, 800c3fc <_Balloc+0x20>
 800c3f2:	4b18      	ldr	r3, [pc, #96]	; (800c454 <_Balloc+0x78>)
 800c3f4:	4818      	ldr	r0, [pc, #96]	; (800c458 <_Balloc+0x7c>)
 800c3f6:	2166      	movs	r1, #102	; 0x66
 800c3f8:	f000 fdd6 	bl	800cfa8 <__assert_func>
 800c3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c400:	6006      	str	r6, [r0, #0]
 800c402:	60c6      	str	r6, [r0, #12]
 800c404:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c406:	68f3      	ldr	r3, [r6, #12]
 800c408:	b183      	cbz	r3, 800c42c <_Balloc+0x50>
 800c40a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c412:	b9b8      	cbnz	r0, 800c444 <_Balloc+0x68>
 800c414:	2101      	movs	r1, #1
 800c416:	fa01 f605 	lsl.w	r6, r1, r5
 800c41a:	1d72      	adds	r2, r6, #5
 800c41c:	0092      	lsls	r2, r2, #2
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 fb60 	bl	800cae4 <_calloc_r>
 800c424:	b160      	cbz	r0, 800c440 <_Balloc+0x64>
 800c426:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c42a:	e00e      	b.n	800c44a <_Balloc+0x6e>
 800c42c:	2221      	movs	r2, #33	; 0x21
 800c42e:	2104      	movs	r1, #4
 800c430:	4620      	mov	r0, r4
 800c432:	f000 fb57 	bl	800cae4 <_calloc_r>
 800c436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c438:	60f0      	str	r0, [r6, #12]
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1e4      	bne.n	800c40a <_Balloc+0x2e>
 800c440:	2000      	movs	r0, #0
 800c442:	bd70      	pop	{r4, r5, r6, pc}
 800c444:	6802      	ldr	r2, [r0, #0]
 800c446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c44a:	2300      	movs	r3, #0
 800c44c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c450:	e7f7      	b.n	800c442 <_Balloc+0x66>
 800c452:	bf00      	nop
 800c454:	0800fead 	.word	0x0800fead
 800c458:	0800ff30 	.word	0x0800ff30

0800c45c <_Bfree>:
 800c45c:	b570      	push	{r4, r5, r6, lr}
 800c45e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c460:	4605      	mov	r5, r0
 800c462:	460c      	mov	r4, r1
 800c464:	b976      	cbnz	r6, 800c484 <_Bfree+0x28>
 800c466:	2010      	movs	r0, #16
 800c468:	f7ff ffb0 	bl	800c3cc <malloc>
 800c46c:	4602      	mov	r2, r0
 800c46e:	6268      	str	r0, [r5, #36]	; 0x24
 800c470:	b920      	cbnz	r0, 800c47c <_Bfree+0x20>
 800c472:	4b09      	ldr	r3, [pc, #36]	; (800c498 <_Bfree+0x3c>)
 800c474:	4809      	ldr	r0, [pc, #36]	; (800c49c <_Bfree+0x40>)
 800c476:	218a      	movs	r1, #138	; 0x8a
 800c478:	f000 fd96 	bl	800cfa8 <__assert_func>
 800c47c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c480:	6006      	str	r6, [r0, #0]
 800c482:	60c6      	str	r6, [r0, #12]
 800c484:	b13c      	cbz	r4, 800c496 <_Bfree+0x3a>
 800c486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c488:	6862      	ldr	r2, [r4, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c490:	6021      	str	r1, [r4, #0]
 800c492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c496:	bd70      	pop	{r4, r5, r6, pc}
 800c498:	0800fead 	.word	0x0800fead
 800c49c:	0800ff30 	.word	0x0800ff30

0800c4a0 <__multadd>:
 800c4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a4:	690d      	ldr	r5, [r1, #16]
 800c4a6:	4607      	mov	r7, r0
 800c4a8:	460c      	mov	r4, r1
 800c4aa:	461e      	mov	r6, r3
 800c4ac:	f101 0c14 	add.w	ip, r1, #20
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	f8dc 3000 	ldr.w	r3, [ip]
 800c4b6:	b299      	uxth	r1, r3
 800c4b8:	fb02 6101 	mla	r1, r2, r1, r6
 800c4bc:	0c1e      	lsrs	r6, r3, #16
 800c4be:	0c0b      	lsrs	r3, r1, #16
 800c4c0:	fb02 3306 	mla	r3, r2, r6, r3
 800c4c4:	b289      	uxth	r1, r1
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4cc:	4285      	cmp	r5, r0
 800c4ce:	f84c 1b04 	str.w	r1, [ip], #4
 800c4d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4d6:	dcec      	bgt.n	800c4b2 <__multadd+0x12>
 800c4d8:	b30e      	cbz	r6, 800c51e <__multadd+0x7e>
 800c4da:	68a3      	ldr	r3, [r4, #8]
 800c4dc:	42ab      	cmp	r3, r5
 800c4de:	dc19      	bgt.n	800c514 <__multadd+0x74>
 800c4e0:	6861      	ldr	r1, [r4, #4]
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	3101      	adds	r1, #1
 800c4e6:	f7ff ff79 	bl	800c3dc <_Balloc>
 800c4ea:	4680      	mov	r8, r0
 800c4ec:	b928      	cbnz	r0, 800c4fa <__multadd+0x5a>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	; (800c524 <__multadd+0x84>)
 800c4f2:	480d      	ldr	r0, [pc, #52]	; (800c528 <__multadd+0x88>)
 800c4f4:	21b5      	movs	r1, #181	; 0xb5
 800c4f6:	f000 fd57 	bl	800cfa8 <__assert_func>
 800c4fa:	6922      	ldr	r2, [r4, #16]
 800c4fc:	3202      	adds	r2, #2
 800c4fe:	f104 010c 	add.w	r1, r4, #12
 800c502:	0092      	lsls	r2, r2, #2
 800c504:	300c      	adds	r0, #12
 800c506:	f7fe fbf9 	bl	800acfc <memcpy>
 800c50a:	4621      	mov	r1, r4
 800c50c:	4638      	mov	r0, r7
 800c50e:	f7ff ffa5 	bl	800c45c <_Bfree>
 800c512:	4644      	mov	r4, r8
 800c514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c518:	3501      	adds	r5, #1
 800c51a:	615e      	str	r6, [r3, #20]
 800c51c:	6125      	str	r5, [r4, #16]
 800c51e:	4620      	mov	r0, r4
 800c520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c524:	0800ff1f 	.word	0x0800ff1f
 800c528:	0800ff30 	.word	0x0800ff30

0800c52c <__hi0bits>:
 800c52c:	0c03      	lsrs	r3, r0, #16
 800c52e:	041b      	lsls	r3, r3, #16
 800c530:	b9d3      	cbnz	r3, 800c568 <__hi0bits+0x3c>
 800c532:	0400      	lsls	r0, r0, #16
 800c534:	2310      	movs	r3, #16
 800c536:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c53a:	bf04      	itt	eq
 800c53c:	0200      	lsleq	r0, r0, #8
 800c53e:	3308      	addeq	r3, #8
 800c540:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c544:	bf04      	itt	eq
 800c546:	0100      	lsleq	r0, r0, #4
 800c548:	3304      	addeq	r3, #4
 800c54a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c54e:	bf04      	itt	eq
 800c550:	0080      	lsleq	r0, r0, #2
 800c552:	3302      	addeq	r3, #2
 800c554:	2800      	cmp	r0, #0
 800c556:	db05      	blt.n	800c564 <__hi0bits+0x38>
 800c558:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c55c:	f103 0301 	add.w	r3, r3, #1
 800c560:	bf08      	it	eq
 800c562:	2320      	moveq	r3, #32
 800c564:	4618      	mov	r0, r3
 800c566:	4770      	bx	lr
 800c568:	2300      	movs	r3, #0
 800c56a:	e7e4      	b.n	800c536 <__hi0bits+0xa>

0800c56c <__lo0bits>:
 800c56c:	6803      	ldr	r3, [r0, #0]
 800c56e:	f013 0207 	ands.w	r2, r3, #7
 800c572:	4601      	mov	r1, r0
 800c574:	d00b      	beq.n	800c58e <__lo0bits+0x22>
 800c576:	07da      	lsls	r2, r3, #31
 800c578:	d423      	bmi.n	800c5c2 <__lo0bits+0x56>
 800c57a:	0798      	lsls	r0, r3, #30
 800c57c:	bf49      	itett	mi
 800c57e:	085b      	lsrmi	r3, r3, #1
 800c580:	089b      	lsrpl	r3, r3, #2
 800c582:	2001      	movmi	r0, #1
 800c584:	600b      	strmi	r3, [r1, #0]
 800c586:	bf5c      	itt	pl
 800c588:	600b      	strpl	r3, [r1, #0]
 800c58a:	2002      	movpl	r0, #2
 800c58c:	4770      	bx	lr
 800c58e:	b298      	uxth	r0, r3
 800c590:	b9a8      	cbnz	r0, 800c5be <__lo0bits+0x52>
 800c592:	0c1b      	lsrs	r3, r3, #16
 800c594:	2010      	movs	r0, #16
 800c596:	b2da      	uxtb	r2, r3
 800c598:	b90a      	cbnz	r2, 800c59e <__lo0bits+0x32>
 800c59a:	3008      	adds	r0, #8
 800c59c:	0a1b      	lsrs	r3, r3, #8
 800c59e:	071a      	lsls	r2, r3, #28
 800c5a0:	bf04      	itt	eq
 800c5a2:	091b      	lsreq	r3, r3, #4
 800c5a4:	3004      	addeq	r0, #4
 800c5a6:	079a      	lsls	r2, r3, #30
 800c5a8:	bf04      	itt	eq
 800c5aa:	089b      	lsreq	r3, r3, #2
 800c5ac:	3002      	addeq	r0, #2
 800c5ae:	07da      	lsls	r2, r3, #31
 800c5b0:	d403      	bmi.n	800c5ba <__lo0bits+0x4e>
 800c5b2:	085b      	lsrs	r3, r3, #1
 800c5b4:	f100 0001 	add.w	r0, r0, #1
 800c5b8:	d005      	beq.n	800c5c6 <__lo0bits+0x5a>
 800c5ba:	600b      	str	r3, [r1, #0]
 800c5bc:	4770      	bx	lr
 800c5be:	4610      	mov	r0, r2
 800c5c0:	e7e9      	b.n	800c596 <__lo0bits+0x2a>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	4770      	bx	lr
 800c5c6:	2020      	movs	r0, #32
 800c5c8:	4770      	bx	lr
	...

0800c5cc <__i2b>:
 800c5cc:	b510      	push	{r4, lr}
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	f7ff ff03 	bl	800c3dc <_Balloc>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	b928      	cbnz	r0, 800c5e6 <__i2b+0x1a>
 800c5da:	4b05      	ldr	r3, [pc, #20]	; (800c5f0 <__i2b+0x24>)
 800c5dc:	4805      	ldr	r0, [pc, #20]	; (800c5f4 <__i2b+0x28>)
 800c5de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c5e2:	f000 fce1 	bl	800cfa8 <__assert_func>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	6144      	str	r4, [r0, #20]
 800c5ea:	6103      	str	r3, [r0, #16]
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	bf00      	nop
 800c5f0:	0800ff1f 	.word	0x0800ff1f
 800c5f4:	0800ff30 	.word	0x0800ff30

0800c5f8 <__multiply>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	4691      	mov	r9, r2
 800c5fe:	690a      	ldr	r2, [r1, #16]
 800c600:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c604:	429a      	cmp	r2, r3
 800c606:	bfb8      	it	lt
 800c608:	460b      	movlt	r3, r1
 800c60a:	460c      	mov	r4, r1
 800c60c:	bfbc      	itt	lt
 800c60e:	464c      	movlt	r4, r9
 800c610:	4699      	movlt	r9, r3
 800c612:	6927      	ldr	r7, [r4, #16]
 800c614:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c618:	68a3      	ldr	r3, [r4, #8]
 800c61a:	6861      	ldr	r1, [r4, #4]
 800c61c:	eb07 060a 	add.w	r6, r7, sl
 800c620:	42b3      	cmp	r3, r6
 800c622:	b085      	sub	sp, #20
 800c624:	bfb8      	it	lt
 800c626:	3101      	addlt	r1, #1
 800c628:	f7ff fed8 	bl	800c3dc <_Balloc>
 800c62c:	b930      	cbnz	r0, 800c63c <__multiply+0x44>
 800c62e:	4602      	mov	r2, r0
 800c630:	4b44      	ldr	r3, [pc, #272]	; (800c744 <__multiply+0x14c>)
 800c632:	4845      	ldr	r0, [pc, #276]	; (800c748 <__multiply+0x150>)
 800c634:	f240 115d 	movw	r1, #349	; 0x15d
 800c638:	f000 fcb6 	bl	800cfa8 <__assert_func>
 800c63c:	f100 0514 	add.w	r5, r0, #20
 800c640:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c644:	462b      	mov	r3, r5
 800c646:	2200      	movs	r2, #0
 800c648:	4543      	cmp	r3, r8
 800c64a:	d321      	bcc.n	800c690 <__multiply+0x98>
 800c64c:	f104 0314 	add.w	r3, r4, #20
 800c650:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c654:	f109 0314 	add.w	r3, r9, #20
 800c658:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c65c:	9202      	str	r2, [sp, #8]
 800c65e:	1b3a      	subs	r2, r7, r4
 800c660:	3a15      	subs	r2, #21
 800c662:	f022 0203 	bic.w	r2, r2, #3
 800c666:	3204      	adds	r2, #4
 800c668:	f104 0115 	add.w	r1, r4, #21
 800c66c:	428f      	cmp	r7, r1
 800c66e:	bf38      	it	cc
 800c670:	2204      	movcc	r2, #4
 800c672:	9201      	str	r2, [sp, #4]
 800c674:	9a02      	ldr	r2, [sp, #8]
 800c676:	9303      	str	r3, [sp, #12]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d80c      	bhi.n	800c696 <__multiply+0x9e>
 800c67c:	2e00      	cmp	r6, #0
 800c67e:	dd03      	ble.n	800c688 <__multiply+0x90>
 800c680:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c684:	2b00      	cmp	r3, #0
 800c686:	d05a      	beq.n	800c73e <__multiply+0x146>
 800c688:	6106      	str	r6, [r0, #16]
 800c68a:	b005      	add	sp, #20
 800c68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c690:	f843 2b04 	str.w	r2, [r3], #4
 800c694:	e7d8      	b.n	800c648 <__multiply+0x50>
 800c696:	f8b3 a000 	ldrh.w	sl, [r3]
 800c69a:	f1ba 0f00 	cmp.w	sl, #0
 800c69e:	d024      	beq.n	800c6ea <__multiply+0xf2>
 800c6a0:	f104 0e14 	add.w	lr, r4, #20
 800c6a4:	46a9      	mov	r9, r5
 800c6a6:	f04f 0c00 	mov.w	ip, #0
 800c6aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c6ae:	f8d9 1000 	ldr.w	r1, [r9]
 800c6b2:	fa1f fb82 	uxth.w	fp, r2
 800c6b6:	b289      	uxth	r1, r1
 800c6b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c6bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c6c0:	f8d9 2000 	ldr.w	r2, [r9]
 800c6c4:	4461      	add	r1, ip
 800c6c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c6ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800c6ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c6d2:	b289      	uxth	r1, r1
 800c6d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c6d8:	4577      	cmp	r7, lr
 800c6da:	f849 1b04 	str.w	r1, [r9], #4
 800c6de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c6e2:	d8e2      	bhi.n	800c6aa <__multiply+0xb2>
 800c6e4:	9a01      	ldr	r2, [sp, #4]
 800c6e6:	f845 c002 	str.w	ip, [r5, r2]
 800c6ea:	9a03      	ldr	r2, [sp, #12]
 800c6ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	f1b9 0f00 	cmp.w	r9, #0
 800c6f6:	d020      	beq.n	800c73a <__multiply+0x142>
 800c6f8:	6829      	ldr	r1, [r5, #0]
 800c6fa:	f104 0c14 	add.w	ip, r4, #20
 800c6fe:	46ae      	mov	lr, r5
 800c700:	f04f 0a00 	mov.w	sl, #0
 800c704:	f8bc b000 	ldrh.w	fp, [ip]
 800c708:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c70c:	fb09 220b 	mla	r2, r9, fp, r2
 800c710:	4492      	add	sl, r2
 800c712:	b289      	uxth	r1, r1
 800c714:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c718:	f84e 1b04 	str.w	r1, [lr], #4
 800c71c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c720:	f8be 1000 	ldrh.w	r1, [lr]
 800c724:	0c12      	lsrs	r2, r2, #16
 800c726:	fb09 1102 	mla	r1, r9, r2, r1
 800c72a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c72e:	4567      	cmp	r7, ip
 800c730:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c734:	d8e6      	bhi.n	800c704 <__multiply+0x10c>
 800c736:	9a01      	ldr	r2, [sp, #4]
 800c738:	50a9      	str	r1, [r5, r2]
 800c73a:	3504      	adds	r5, #4
 800c73c:	e79a      	b.n	800c674 <__multiply+0x7c>
 800c73e:	3e01      	subs	r6, #1
 800c740:	e79c      	b.n	800c67c <__multiply+0x84>
 800c742:	bf00      	nop
 800c744:	0800ff1f 	.word	0x0800ff1f
 800c748:	0800ff30 	.word	0x0800ff30

0800c74c <__pow5mult>:
 800c74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c750:	4615      	mov	r5, r2
 800c752:	f012 0203 	ands.w	r2, r2, #3
 800c756:	4606      	mov	r6, r0
 800c758:	460f      	mov	r7, r1
 800c75a:	d007      	beq.n	800c76c <__pow5mult+0x20>
 800c75c:	4c25      	ldr	r4, [pc, #148]	; (800c7f4 <__pow5mult+0xa8>)
 800c75e:	3a01      	subs	r2, #1
 800c760:	2300      	movs	r3, #0
 800c762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c766:	f7ff fe9b 	bl	800c4a0 <__multadd>
 800c76a:	4607      	mov	r7, r0
 800c76c:	10ad      	asrs	r5, r5, #2
 800c76e:	d03d      	beq.n	800c7ec <__pow5mult+0xa0>
 800c770:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c772:	b97c      	cbnz	r4, 800c794 <__pow5mult+0x48>
 800c774:	2010      	movs	r0, #16
 800c776:	f7ff fe29 	bl	800c3cc <malloc>
 800c77a:	4602      	mov	r2, r0
 800c77c:	6270      	str	r0, [r6, #36]	; 0x24
 800c77e:	b928      	cbnz	r0, 800c78c <__pow5mult+0x40>
 800c780:	4b1d      	ldr	r3, [pc, #116]	; (800c7f8 <__pow5mult+0xac>)
 800c782:	481e      	ldr	r0, [pc, #120]	; (800c7fc <__pow5mult+0xb0>)
 800c784:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c788:	f000 fc0e 	bl	800cfa8 <__assert_func>
 800c78c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c790:	6004      	str	r4, [r0, #0]
 800c792:	60c4      	str	r4, [r0, #12]
 800c794:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c79c:	b94c      	cbnz	r4, 800c7b2 <__pow5mult+0x66>
 800c79e:	f240 2171 	movw	r1, #625	; 0x271
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f7ff ff12 	bl	800c5cc <__i2b>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	6003      	str	r3, [r0, #0]
 800c7b2:	f04f 0900 	mov.w	r9, #0
 800c7b6:	07eb      	lsls	r3, r5, #31
 800c7b8:	d50a      	bpl.n	800c7d0 <__pow5mult+0x84>
 800c7ba:	4639      	mov	r1, r7
 800c7bc:	4622      	mov	r2, r4
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7ff ff1a 	bl	800c5f8 <__multiply>
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	4680      	mov	r8, r0
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7ff fe47 	bl	800c45c <_Bfree>
 800c7ce:	4647      	mov	r7, r8
 800c7d0:	106d      	asrs	r5, r5, #1
 800c7d2:	d00b      	beq.n	800c7ec <__pow5mult+0xa0>
 800c7d4:	6820      	ldr	r0, [r4, #0]
 800c7d6:	b938      	cbnz	r0, 800c7e8 <__pow5mult+0x9c>
 800c7d8:	4622      	mov	r2, r4
 800c7da:	4621      	mov	r1, r4
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f7ff ff0b 	bl	800c5f8 <__multiply>
 800c7e2:	6020      	str	r0, [r4, #0]
 800c7e4:	f8c0 9000 	str.w	r9, [r0]
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	e7e4      	b.n	800c7b6 <__pow5mult+0x6a>
 800c7ec:	4638      	mov	r0, r7
 800c7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7f2:	bf00      	nop
 800c7f4:	08010080 	.word	0x08010080
 800c7f8:	0800fead 	.word	0x0800fead
 800c7fc:	0800ff30 	.word	0x0800ff30

0800c800 <__lshift>:
 800c800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c804:	460c      	mov	r4, r1
 800c806:	6849      	ldr	r1, [r1, #4]
 800c808:	6923      	ldr	r3, [r4, #16]
 800c80a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c80e:	68a3      	ldr	r3, [r4, #8]
 800c810:	4607      	mov	r7, r0
 800c812:	4691      	mov	r9, r2
 800c814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c818:	f108 0601 	add.w	r6, r8, #1
 800c81c:	42b3      	cmp	r3, r6
 800c81e:	db0b      	blt.n	800c838 <__lshift+0x38>
 800c820:	4638      	mov	r0, r7
 800c822:	f7ff fddb 	bl	800c3dc <_Balloc>
 800c826:	4605      	mov	r5, r0
 800c828:	b948      	cbnz	r0, 800c83e <__lshift+0x3e>
 800c82a:	4602      	mov	r2, r0
 800c82c:	4b2a      	ldr	r3, [pc, #168]	; (800c8d8 <__lshift+0xd8>)
 800c82e:	482b      	ldr	r0, [pc, #172]	; (800c8dc <__lshift+0xdc>)
 800c830:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c834:	f000 fbb8 	bl	800cfa8 <__assert_func>
 800c838:	3101      	adds	r1, #1
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	e7ee      	b.n	800c81c <__lshift+0x1c>
 800c83e:	2300      	movs	r3, #0
 800c840:	f100 0114 	add.w	r1, r0, #20
 800c844:	f100 0210 	add.w	r2, r0, #16
 800c848:	4618      	mov	r0, r3
 800c84a:	4553      	cmp	r3, sl
 800c84c:	db37      	blt.n	800c8be <__lshift+0xbe>
 800c84e:	6920      	ldr	r0, [r4, #16]
 800c850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c854:	f104 0314 	add.w	r3, r4, #20
 800c858:	f019 091f 	ands.w	r9, r9, #31
 800c85c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c860:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c864:	d02f      	beq.n	800c8c6 <__lshift+0xc6>
 800c866:	f1c9 0e20 	rsb	lr, r9, #32
 800c86a:	468a      	mov	sl, r1
 800c86c:	f04f 0c00 	mov.w	ip, #0
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	fa02 f209 	lsl.w	r2, r2, r9
 800c876:	ea42 020c 	orr.w	r2, r2, ip
 800c87a:	f84a 2b04 	str.w	r2, [sl], #4
 800c87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c882:	4298      	cmp	r0, r3
 800c884:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c888:	d8f2      	bhi.n	800c870 <__lshift+0x70>
 800c88a:	1b03      	subs	r3, r0, r4
 800c88c:	3b15      	subs	r3, #21
 800c88e:	f023 0303 	bic.w	r3, r3, #3
 800c892:	3304      	adds	r3, #4
 800c894:	f104 0215 	add.w	r2, r4, #21
 800c898:	4290      	cmp	r0, r2
 800c89a:	bf38      	it	cc
 800c89c:	2304      	movcc	r3, #4
 800c89e:	f841 c003 	str.w	ip, [r1, r3]
 800c8a2:	f1bc 0f00 	cmp.w	ip, #0
 800c8a6:	d001      	beq.n	800c8ac <__lshift+0xac>
 800c8a8:	f108 0602 	add.w	r6, r8, #2
 800c8ac:	3e01      	subs	r6, #1
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	612e      	str	r6, [r5, #16]
 800c8b2:	4621      	mov	r1, r4
 800c8b4:	f7ff fdd2 	bl	800c45c <_Bfree>
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8be:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	e7c1      	b.n	800c84a <__lshift+0x4a>
 800c8c6:	3904      	subs	r1, #4
 800c8c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8d0:	4298      	cmp	r0, r3
 800c8d2:	d8f9      	bhi.n	800c8c8 <__lshift+0xc8>
 800c8d4:	e7ea      	b.n	800c8ac <__lshift+0xac>
 800c8d6:	bf00      	nop
 800c8d8:	0800ff1f 	.word	0x0800ff1f
 800c8dc:	0800ff30 	.word	0x0800ff30

0800c8e0 <__mcmp>:
 800c8e0:	b530      	push	{r4, r5, lr}
 800c8e2:	6902      	ldr	r2, [r0, #16]
 800c8e4:	690c      	ldr	r4, [r1, #16]
 800c8e6:	1b12      	subs	r2, r2, r4
 800c8e8:	d10e      	bne.n	800c908 <__mcmp+0x28>
 800c8ea:	f100 0314 	add.w	r3, r0, #20
 800c8ee:	3114      	adds	r1, #20
 800c8f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c8f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c8f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c8fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c900:	42a5      	cmp	r5, r4
 800c902:	d003      	beq.n	800c90c <__mcmp+0x2c>
 800c904:	d305      	bcc.n	800c912 <__mcmp+0x32>
 800c906:	2201      	movs	r2, #1
 800c908:	4610      	mov	r0, r2
 800c90a:	bd30      	pop	{r4, r5, pc}
 800c90c:	4283      	cmp	r3, r0
 800c90e:	d3f3      	bcc.n	800c8f8 <__mcmp+0x18>
 800c910:	e7fa      	b.n	800c908 <__mcmp+0x28>
 800c912:	f04f 32ff 	mov.w	r2, #4294967295
 800c916:	e7f7      	b.n	800c908 <__mcmp+0x28>

0800c918 <__mdiff>:
 800c918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91c:	460c      	mov	r4, r1
 800c91e:	4606      	mov	r6, r0
 800c920:	4611      	mov	r1, r2
 800c922:	4620      	mov	r0, r4
 800c924:	4690      	mov	r8, r2
 800c926:	f7ff ffdb 	bl	800c8e0 <__mcmp>
 800c92a:	1e05      	subs	r5, r0, #0
 800c92c:	d110      	bne.n	800c950 <__mdiff+0x38>
 800c92e:	4629      	mov	r1, r5
 800c930:	4630      	mov	r0, r6
 800c932:	f7ff fd53 	bl	800c3dc <_Balloc>
 800c936:	b930      	cbnz	r0, 800c946 <__mdiff+0x2e>
 800c938:	4b3a      	ldr	r3, [pc, #232]	; (800ca24 <__mdiff+0x10c>)
 800c93a:	4602      	mov	r2, r0
 800c93c:	f240 2132 	movw	r1, #562	; 0x232
 800c940:	4839      	ldr	r0, [pc, #228]	; (800ca28 <__mdiff+0x110>)
 800c942:	f000 fb31 	bl	800cfa8 <__assert_func>
 800c946:	2301      	movs	r3, #1
 800c948:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c94c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c950:	bfa4      	itt	ge
 800c952:	4643      	movge	r3, r8
 800c954:	46a0      	movge	r8, r4
 800c956:	4630      	mov	r0, r6
 800c958:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c95c:	bfa6      	itte	ge
 800c95e:	461c      	movge	r4, r3
 800c960:	2500      	movge	r5, #0
 800c962:	2501      	movlt	r5, #1
 800c964:	f7ff fd3a 	bl	800c3dc <_Balloc>
 800c968:	b920      	cbnz	r0, 800c974 <__mdiff+0x5c>
 800c96a:	4b2e      	ldr	r3, [pc, #184]	; (800ca24 <__mdiff+0x10c>)
 800c96c:	4602      	mov	r2, r0
 800c96e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c972:	e7e5      	b.n	800c940 <__mdiff+0x28>
 800c974:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c978:	6926      	ldr	r6, [r4, #16]
 800c97a:	60c5      	str	r5, [r0, #12]
 800c97c:	f104 0914 	add.w	r9, r4, #20
 800c980:	f108 0514 	add.w	r5, r8, #20
 800c984:	f100 0e14 	add.w	lr, r0, #20
 800c988:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c98c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c990:	f108 0210 	add.w	r2, r8, #16
 800c994:	46f2      	mov	sl, lr
 800c996:	2100      	movs	r1, #0
 800c998:	f859 3b04 	ldr.w	r3, [r9], #4
 800c99c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c9a0:	fa1f f883 	uxth.w	r8, r3
 800c9a4:	fa11 f18b 	uxtah	r1, r1, fp
 800c9a8:	0c1b      	lsrs	r3, r3, #16
 800c9aa:	eba1 0808 	sub.w	r8, r1, r8
 800c9ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c9b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c9b6:	fa1f f888 	uxth.w	r8, r8
 800c9ba:	1419      	asrs	r1, r3, #16
 800c9bc:	454e      	cmp	r6, r9
 800c9be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c9c2:	f84a 3b04 	str.w	r3, [sl], #4
 800c9c6:	d8e7      	bhi.n	800c998 <__mdiff+0x80>
 800c9c8:	1b33      	subs	r3, r6, r4
 800c9ca:	3b15      	subs	r3, #21
 800c9cc:	f023 0303 	bic.w	r3, r3, #3
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	3415      	adds	r4, #21
 800c9d4:	42a6      	cmp	r6, r4
 800c9d6:	bf38      	it	cc
 800c9d8:	2304      	movcc	r3, #4
 800c9da:	441d      	add	r5, r3
 800c9dc:	4473      	add	r3, lr
 800c9de:	469e      	mov	lr, r3
 800c9e0:	462e      	mov	r6, r5
 800c9e2:	4566      	cmp	r6, ip
 800c9e4:	d30e      	bcc.n	800ca04 <__mdiff+0xec>
 800c9e6:	f10c 0203 	add.w	r2, ip, #3
 800c9ea:	1b52      	subs	r2, r2, r5
 800c9ec:	f022 0203 	bic.w	r2, r2, #3
 800c9f0:	3d03      	subs	r5, #3
 800c9f2:	45ac      	cmp	ip, r5
 800c9f4:	bf38      	it	cc
 800c9f6:	2200      	movcc	r2, #0
 800c9f8:	441a      	add	r2, r3
 800c9fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c9fe:	b17b      	cbz	r3, 800ca20 <__mdiff+0x108>
 800ca00:	6107      	str	r7, [r0, #16]
 800ca02:	e7a3      	b.n	800c94c <__mdiff+0x34>
 800ca04:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca08:	fa11 f288 	uxtah	r2, r1, r8
 800ca0c:	1414      	asrs	r4, r2, #16
 800ca0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca12:	b292      	uxth	r2, r2
 800ca14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca18:	f84e 2b04 	str.w	r2, [lr], #4
 800ca1c:	1421      	asrs	r1, r4, #16
 800ca1e:	e7e0      	b.n	800c9e2 <__mdiff+0xca>
 800ca20:	3f01      	subs	r7, #1
 800ca22:	e7ea      	b.n	800c9fa <__mdiff+0xe2>
 800ca24:	0800ff1f 	.word	0x0800ff1f
 800ca28:	0800ff30 	.word	0x0800ff30

0800ca2c <__d2b>:
 800ca2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca30:	4689      	mov	r9, r1
 800ca32:	2101      	movs	r1, #1
 800ca34:	ec57 6b10 	vmov	r6, r7, d0
 800ca38:	4690      	mov	r8, r2
 800ca3a:	f7ff fccf 	bl	800c3dc <_Balloc>
 800ca3e:	4604      	mov	r4, r0
 800ca40:	b930      	cbnz	r0, 800ca50 <__d2b+0x24>
 800ca42:	4602      	mov	r2, r0
 800ca44:	4b25      	ldr	r3, [pc, #148]	; (800cadc <__d2b+0xb0>)
 800ca46:	4826      	ldr	r0, [pc, #152]	; (800cae0 <__d2b+0xb4>)
 800ca48:	f240 310a 	movw	r1, #778	; 0x30a
 800ca4c:	f000 faac 	bl	800cfa8 <__assert_func>
 800ca50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ca54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca58:	bb35      	cbnz	r5, 800caa8 <__d2b+0x7c>
 800ca5a:	2e00      	cmp	r6, #0
 800ca5c:	9301      	str	r3, [sp, #4]
 800ca5e:	d028      	beq.n	800cab2 <__d2b+0x86>
 800ca60:	4668      	mov	r0, sp
 800ca62:	9600      	str	r6, [sp, #0]
 800ca64:	f7ff fd82 	bl	800c56c <__lo0bits>
 800ca68:	9900      	ldr	r1, [sp, #0]
 800ca6a:	b300      	cbz	r0, 800caae <__d2b+0x82>
 800ca6c:	9a01      	ldr	r2, [sp, #4]
 800ca6e:	f1c0 0320 	rsb	r3, r0, #32
 800ca72:	fa02 f303 	lsl.w	r3, r2, r3
 800ca76:	430b      	orrs	r3, r1
 800ca78:	40c2      	lsrs	r2, r0
 800ca7a:	6163      	str	r3, [r4, #20]
 800ca7c:	9201      	str	r2, [sp, #4]
 800ca7e:	9b01      	ldr	r3, [sp, #4]
 800ca80:	61a3      	str	r3, [r4, #24]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	bf14      	ite	ne
 800ca86:	2202      	movne	r2, #2
 800ca88:	2201      	moveq	r2, #1
 800ca8a:	6122      	str	r2, [r4, #16]
 800ca8c:	b1d5      	cbz	r5, 800cac4 <__d2b+0x98>
 800ca8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca92:	4405      	add	r5, r0
 800ca94:	f8c9 5000 	str.w	r5, [r9]
 800ca98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca9c:	f8c8 0000 	str.w	r0, [r8]
 800caa0:	4620      	mov	r0, r4
 800caa2:	b003      	add	sp, #12
 800caa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caac:	e7d5      	b.n	800ca5a <__d2b+0x2e>
 800caae:	6161      	str	r1, [r4, #20]
 800cab0:	e7e5      	b.n	800ca7e <__d2b+0x52>
 800cab2:	a801      	add	r0, sp, #4
 800cab4:	f7ff fd5a 	bl	800c56c <__lo0bits>
 800cab8:	9b01      	ldr	r3, [sp, #4]
 800caba:	6163      	str	r3, [r4, #20]
 800cabc:	2201      	movs	r2, #1
 800cabe:	6122      	str	r2, [r4, #16]
 800cac0:	3020      	adds	r0, #32
 800cac2:	e7e3      	b.n	800ca8c <__d2b+0x60>
 800cac4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cac8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cacc:	f8c9 0000 	str.w	r0, [r9]
 800cad0:	6918      	ldr	r0, [r3, #16]
 800cad2:	f7ff fd2b 	bl	800c52c <__hi0bits>
 800cad6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cada:	e7df      	b.n	800ca9c <__d2b+0x70>
 800cadc:	0800ff1f 	.word	0x0800ff1f
 800cae0:	0800ff30 	.word	0x0800ff30

0800cae4 <_calloc_r>:
 800cae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cae6:	fba1 2402 	umull	r2, r4, r1, r2
 800caea:	b94c      	cbnz	r4, 800cb00 <_calloc_r+0x1c>
 800caec:	4611      	mov	r1, r2
 800caee:	9201      	str	r2, [sp, #4]
 800caf0:	f000 f87a 	bl	800cbe8 <_malloc_r>
 800caf4:	9a01      	ldr	r2, [sp, #4]
 800caf6:	4605      	mov	r5, r0
 800caf8:	b930      	cbnz	r0, 800cb08 <_calloc_r+0x24>
 800cafa:	4628      	mov	r0, r5
 800cafc:	b003      	add	sp, #12
 800cafe:	bd30      	pop	{r4, r5, pc}
 800cb00:	220c      	movs	r2, #12
 800cb02:	6002      	str	r2, [r0, #0]
 800cb04:	2500      	movs	r5, #0
 800cb06:	e7f8      	b.n	800cafa <_calloc_r+0x16>
 800cb08:	4621      	mov	r1, r4
 800cb0a:	f7fe f905 	bl	800ad18 <memset>
 800cb0e:	e7f4      	b.n	800cafa <_calloc_r+0x16>

0800cb10 <_free_r>:
 800cb10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb12:	2900      	cmp	r1, #0
 800cb14:	d044      	beq.n	800cba0 <_free_r+0x90>
 800cb16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb1a:	9001      	str	r0, [sp, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f1a1 0404 	sub.w	r4, r1, #4
 800cb22:	bfb8      	it	lt
 800cb24:	18e4      	addlt	r4, r4, r3
 800cb26:	f000 fa9b 	bl	800d060 <__malloc_lock>
 800cb2a:	4a1e      	ldr	r2, [pc, #120]	; (800cba4 <_free_r+0x94>)
 800cb2c:	9801      	ldr	r0, [sp, #4]
 800cb2e:	6813      	ldr	r3, [r2, #0]
 800cb30:	b933      	cbnz	r3, 800cb40 <_free_r+0x30>
 800cb32:	6063      	str	r3, [r4, #4]
 800cb34:	6014      	str	r4, [r2, #0]
 800cb36:	b003      	add	sp, #12
 800cb38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb3c:	f000 ba96 	b.w	800d06c <__malloc_unlock>
 800cb40:	42a3      	cmp	r3, r4
 800cb42:	d908      	bls.n	800cb56 <_free_r+0x46>
 800cb44:	6825      	ldr	r5, [r4, #0]
 800cb46:	1961      	adds	r1, r4, r5
 800cb48:	428b      	cmp	r3, r1
 800cb4a:	bf01      	itttt	eq
 800cb4c:	6819      	ldreq	r1, [r3, #0]
 800cb4e:	685b      	ldreq	r3, [r3, #4]
 800cb50:	1949      	addeq	r1, r1, r5
 800cb52:	6021      	streq	r1, [r4, #0]
 800cb54:	e7ed      	b.n	800cb32 <_free_r+0x22>
 800cb56:	461a      	mov	r2, r3
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	b10b      	cbz	r3, 800cb60 <_free_r+0x50>
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	d9fa      	bls.n	800cb56 <_free_r+0x46>
 800cb60:	6811      	ldr	r1, [r2, #0]
 800cb62:	1855      	adds	r5, r2, r1
 800cb64:	42a5      	cmp	r5, r4
 800cb66:	d10b      	bne.n	800cb80 <_free_r+0x70>
 800cb68:	6824      	ldr	r4, [r4, #0]
 800cb6a:	4421      	add	r1, r4
 800cb6c:	1854      	adds	r4, r2, r1
 800cb6e:	42a3      	cmp	r3, r4
 800cb70:	6011      	str	r1, [r2, #0]
 800cb72:	d1e0      	bne.n	800cb36 <_free_r+0x26>
 800cb74:	681c      	ldr	r4, [r3, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	6053      	str	r3, [r2, #4]
 800cb7a:	4421      	add	r1, r4
 800cb7c:	6011      	str	r1, [r2, #0]
 800cb7e:	e7da      	b.n	800cb36 <_free_r+0x26>
 800cb80:	d902      	bls.n	800cb88 <_free_r+0x78>
 800cb82:	230c      	movs	r3, #12
 800cb84:	6003      	str	r3, [r0, #0]
 800cb86:	e7d6      	b.n	800cb36 <_free_r+0x26>
 800cb88:	6825      	ldr	r5, [r4, #0]
 800cb8a:	1961      	adds	r1, r4, r5
 800cb8c:	428b      	cmp	r3, r1
 800cb8e:	bf04      	itt	eq
 800cb90:	6819      	ldreq	r1, [r3, #0]
 800cb92:	685b      	ldreq	r3, [r3, #4]
 800cb94:	6063      	str	r3, [r4, #4]
 800cb96:	bf04      	itt	eq
 800cb98:	1949      	addeq	r1, r1, r5
 800cb9a:	6021      	streq	r1, [r4, #0]
 800cb9c:	6054      	str	r4, [r2, #4]
 800cb9e:	e7ca      	b.n	800cb36 <_free_r+0x26>
 800cba0:	b003      	add	sp, #12
 800cba2:	bd30      	pop	{r4, r5, pc}
 800cba4:	2000951c 	.word	0x2000951c

0800cba8 <sbrk_aligned>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	4e0e      	ldr	r6, [pc, #56]	; (800cbe4 <sbrk_aligned+0x3c>)
 800cbac:	460c      	mov	r4, r1
 800cbae:	6831      	ldr	r1, [r6, #0]
 800cbb0:	4605      	mov	r5, r0
 800cbb2:	b911      	cbnz	r1, 800cbba <sbrk_aligned+0x12>
 800cbb4:	f000 f9e8 	bl	800cf88 <_sbrk_r>
 800cbb8:	6030      	str	r0, [r6, #0]
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	f000 f9e3 	bl	800cf88 <_sbrk_r>
 800cbc2:	1c43      	adds	r3, r0, #1
 800cbc4:	d00a      	beq.n	800cbdc <sbrk_aligned+0x34>
 800cbc6:	1cc4      	adds	r4, r0, #3
 800cbc8:	f024 0403 	bic.w	r4, r4, #3
 800cbcc:	42a0      	cmp	r0, r4
 800cbce:	d007      	beq.n	800cbe0 <sbrk_aligned+0x38>
 800cbd0:	1a21      	subs	r1, r4, r0
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	f000 f9d8 	bl	800cf88 <_sbrk_r>
 800cbd8:	3001      	adds	r0, #1
 800cbda:	d101      	bne.n	800cbe0 <sbrk_aligned+0x38>
 800cbdc:	f04f 34ff 	mov.w	r4, #4294967295
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	bd70      	pop	{r4, r5, r6, pc}
 800cbe4:	20009520 	.word	0x20009520

0800cbe8 <_malloc_r>:
 800cbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbec:	1ccd      	adds	r5, r1, #3
 800cbee:	f025 0503 	bic.w	r5, r5, #3
 800cbf2:	3508      	adds	r5, #8
 800cbf4:	2d0c      	cmp	r5, #12
 800cbf6:	bf38      	it	cc
 800cbf8:	250c      	movcc	r5, #12
 800cbfa:	2d00      	cmp	r5, #0
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	db01      	blt.n	800cc04 <_malloc_r+0x1c>
 800cc00:	42a9      	cmp	r1, r5
 800cc02:	d905      	bls.n	800cc10 <_malloc_r+0x28>
 800cc04:	230c      	movs	r3, #12
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	2600      	movs	r6, #0
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc10:	4e2e      	ldr	r6, [pc, #184]	; (800cccc <_malloc_r+0xe4>)
 800cc12:	f000 fa25 	bl	800d060 <__malloc_lock>
 800cc16:	6833      	ldr	r3, [r6, #0]
 800cc18:	461c      	mov	r4, r3
 800cc1a:	bb34      	cbnz	r4, 800cc6a <_malloc_r+0x82>
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	4638      	mov	r0, r7
 800cc20:	f7ff ffc2 	bl	800cba8 <sbrk_aligned>
 800cc24:	1c43      	adds	r3, r0, #1
 800cc26:	4604      	mov	r4, r0
 800cc28:	d14d      	bne.n	800ccc6 <_malloc_r+0xde>
 800cc2a:	6834      	ldr	r4, [r6, #0]
 800cc2c:	4626      	mov	r6, r4
 800cc2e:	2e00      	cmp	r6, #0
 800cc30:	d140      	bne.n	800ccb4 <_malloc_r+0xcc>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	4631      	mov	r1, r6
 800cc36:	4638      	mov	r0, r7
 800cc38:	eb04 0803 	add.w	r8, r4, r3
 800cc3c:	f000 f9a4 	bl	800cf88 <_sbrk_r>
 800cc40:	4580      	cmp	r8, r0
 800cc42:	d13a      	bne.n	800ccba <_malloc_r+0xd2>
 800cc44:	6821      	ldr	r1, [r4, #0]
 800cc46:	3503      	adds	r5, #3
 800cc48:	1a6d      	subs	r5, r5, r1
 800cc4a:	f025 0503 	bic.w	r5, r5, #3
 800cc4e:	3508      	adds	r5, #8
 800cc50:	2d0c      	cmp	r5, #12
 800cc52:	bf38      	it	cc
 800cc54:	250c      	movcc	r5, #12
 800cc56:	4629      	mov	r1, r5
 800cc58:	4638      	mov	r0, r7
 800cc5a:	f7ff ffa5 	bl	800cba8 <sbrk_aligned>
 800cc5e:	3001      	adds	r0, #1
 800cc60:	d02b      	beq.n	800ccba <_malloc_r+0xd2>
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	442b      	add	r3, r5
 800cc66:	6023      	str	r3, [r4, #0]
 800cc68:	e00e      	b.n	800cc88 <_malloc_r+0xa0>
 800cc6a:	6822      	ldr	r2, [r4, #0]
 800cc6c:	1b52      	subs	r2, r2, r5
 800cc6e:	d41e      	bmi.n	800ccae <_malloc_r+0xc6>
 800cc70:	2a0b      	cmp	r2, #11
 800cc72:	d916      	bls.n	800cca2 <_malloc_r+0xba>
 800cc74:	1961      	adds	r1, r4, r5
 800cc76:	42a3      	cmp	r3, r4
 800cc78:	6025      	str	r5, [r4, #0]
 800cc7a:	bf18      	it	ne
 800cc7c:	6059      	strne	r1, [r3, #4]
 800cc7e:	6863      	ldr	r3, [r4, #4]
 800cc80:	bf08      	it	eq
 800cc82:	6031      	streq	r1, [r6, #0]
 800cc84:	5162      	str	r2, [r4, r5]
 800cc86:	604b      	str	r3, [r1, #4]
 800cc88:	4638      	mov	r0, r7
 800cc8a:	f104 060b 	add.w	r6, r4, #11
 800cc8e:	f000 f9ed 	bl	800d06c <__malloc_unlock>
 800cc92:	f026 0607 	bic.w	r6, r6, #7
 800cc96:	1d23      	adds	r3, r4, #4
 800cc98:	1af2      	subs	r2, r6, r3
 800cc9a:	d0b6      	beq.n	800cc0a <_malloc_r+0x22>
 800cc9c:	1b9b      	subs	r3, r3, r6
 800cc9e:	50a3      	str	r3, [r4, r2]
 800cca0:	e7b3      	b.n	800cc0a <_malloc_r+0x22>
 800cca2:	6862      	ldr	r2, [r4, #4]
 800cca4:	42a3      	cmp	r3, r4
 800cca6:	bf0c      	ite	eq
 800cca8:	6032      	streq	r2, [r6, #0]
 800ccaa:	605a      	strne	r2, [r3, #4]
 800ccac:	e7ec      	b.n	800cc88 <_malloc_r+0xa0>
 800ccae:	4623      	mov	r3, r4
 800ccb0:	6864      	ldr	r4, [r4, #4]
 800ccb2:	e7b2      	b.n	800cc1a <_malloc_r+0x32>
 800ccb4:	4634      	mov	r4, r6
 800ccb6:	6876      	ldr	r6, [r6, #4]
 800ccb8:	e7b9      	b.n	800cc2e <_malloc_r+0x46>
 800ccba:	230c      	movs	r3, #12
 800ccbc:	603b      	str	r3, [r7, #0]
 800ccbe:	4638      	mov	r0, r7
 800ccc0:	f000 f9d4 	bl	800d06c <__malloc_unlock>
 800ccc4:	e7a1      	b.n	800cc0a <_malloc_r+0x22>
 800ccc6:	6025      	str	r5, [r4, #0]
 800ccc8:	e7de      	b.n	800cc88 <_malloc_r+0xa0>
 800ccca:	bf00      	nop
 800cccc:	2000951c 	.word	0x2000951c

0800ccd0 <__ssputs_r>:
 800ccd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd4:	688e      	ldr	r6, [r1, #8]
 800ccd6:	429e      	cmp	r6, r3
 800ccd8:	4682      	mov	sl, r0
 800ccda:	460c      	mov	r4, r1
 800ccdc:	4690      	mov	r8, r2
 800ccde:	461f      	mov	r7, r3
 800cce0:	d838      	bhi.n	800cd54 <__ssputs_r+0x84>
 800cce2:	898a      	ldrh	r2, [r1, #12]
 800cce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cce8:	d032      	beq.n	800cd50 <__ssputs_r+0x80>
 800ccea:	6825      	ldr	r5, [r4, #0]
 800ccec:	6909      	ldr	r1, [r1, #16]
 800ccee:	eba5 0901 	sub.w	r9, r5, r1
 800ccf2:	6965      	ldr	r5, [r4, #20]
 800ccf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	444b      	add	r3, r9
 800cd00:	106d      	asrs	r5, r5, #1
 800cd02:	429d      	cmp	r5, r3
 800cd04:	bf38      	it	cc
 800cd06:	461d      	movcc	r5, r3
 800cd08:	0553      	lsls	r3, r2, #21
 800cd0a:	d531      	bpl.n	800cd70 <__ssputs_r+0xa0>
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	f7ff ff6b 	bl	800cbe8 <_malloc_r>
 800cd12:	4606      	mov	r6, r0
 800cd14:	b950      	cbnz	r0, 800cd2c <__ssputs_r+0x5c>
 800cd16:	230c      	movs	r3, #12
 800cd18:	f8ca 3000 	str.w	r3, [sl]
 800cd1c:	89a3      	ldrh	r3, [r4, #12]
 800cd1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd22:	81a3      	strh	r3, [r4, #12]
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd2c:	6921      	ldr	r1, [r4, #16]
 800cd2e:	464a      	mov	r2, r9
 800cd30:	f7fd ffe4 	bl	800acfc <memcpy>
 800cd34:	89a3      	ldrh	r3, [r4, #12]
 800cd36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd3e:	81a3      	strh	r3, [r4, #12]
 800cd40:	6126      	str	r6, [r4, #16]
 800cd42:	6165      	str	r5, [r4, #20]
 800cd44:	444e      	add	r6, r9
 800cd46:	eba5 0509 	sub.w	r5, r5, r9
 800cd4a:	6026      	str	r6, [r4, #0]
 800cd4c:	60a5      	str	r5, [r4, #8]
 800cd4e:	463e      	mov	r6, r7
 800cd50:	42be      	cmp	r6, r7
 800cd52:	d900      	bls.n	800cd56 <__ssputs_r+0x86>
 800cd54:	463e      	mov	r6, r7
 800cd56:	6820      	ldr	r0, [r4, #0]
 800cd58:	4632      	mov	r2, r6
 800cd5a:	4641      	mov	r1, r8
 800cd5c:	f000 f966 	bl	800d02c <memmove>
 800cd60:	68a3      	ldr	r3, [r4, #8]
 800cd62:	1b9b      	subs	r3, r3, r6
 800cd64:	60a3      	str	r3, [r4, #8]
 800cd66:	6823      	ldr	r3, [r4, #0]
 800cd68:	4433      	add	r3, r6
 800cd6a:	6023      	str	r3, [r4, #0]
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	e7db      	b.n	800cd28 <__ssputs_r+0x58>
 800cd70:	462a      	mov	r2, r5
 800cd72:	f000 f981 	bl	800d078 <_realloc_r>
 800cd76:	4606      	mov	r6, r0
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d1e1      	bne.n	800cd40 <__ssputs_r+0x70>
 800cd7c:	6921      	ldr	r1, [r4, #16]
 800cd7e:	4650      	mov	r0, sl
 800cd80:	f7ff fec6 	bl	800cb10 <_free_r>
 800cd84:	e7c7      	b.n	800cd16 <__ssputs_r+0x46>
	...

0800cd88 <_svfiprintf_r>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	4698      	mov	r8, r3
 800cd8e:	898b      	ldrh	r3, [r1, #12]
 800cd90:	061b      	lsls	r3, r3, #24
 800cd92:	b09d      	sub	sp, #116	; 0x74
 800cd94:	4607      	mov	r7, r0
 800cd96:	460d      	mov	r5, r1
 800cd98:	4614      	mov	r4, r2
 800cd9a:	d50e      	bpl.n	800cdba <_svfiprintf_r+0x32>
 800cd9c:	690b      	ldr	r3, [r1, #16]
 800cd9e:	b963      	cbnz	r3, 800cdba <_svfiprintf_r+0x32>
 800cda0:	2140      	movs	r1, #64	; 0x40
 800cda2:	f7ff ff21 	bl	800cbe8 <_malloc_r>
 800cda6:	6028      	str	r0, [r5, #0]
 800cda8:	6128      	str	r0, [r5, #16]
 800cdaa:	b920      	cbnz	r0, 800cdb6 <_svfiprintf_r+0x2e>
 800cdac:	230c      	movs	r3, #12
 800cdae:	603b      	str	r3, [r7, #0]
 800cdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb4:	e0d1      	b.n	800cf5a <_svfiprintf_r+0x1d2>
 800cdb6:	2340      	movs	r3, #64	; 0x40
 800cdb8:	616b      	str	r3, [r5, #20]
 800cdba:	2300      	movs	r3, #0
 800cdbc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdbe:	2320      	movs	r3, #32
 800cdc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdc8:	2330      	movs	r3, #48	; 0x30
 800cdca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cf74 <_svfiprintf_r+0x1ec>
 800cdce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdd2:	f04f 0901 	mov.w	r9, #1
 800cdd6:	4623      	mov	r3, r4
 800cdd8:	469a      	mov	sl, r3
 800cdda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdde:	b10a      	cbz	r2, 800cde4 <_svfiprintf_r+0x5c>
 800cde0:	2a25      	cmp	r2, #37	; 0x25
 800cde2:	d1f9      	bne.n	800cdd8 <_svfiprintf_r+0x50>
 800cde4:	ebba 0b04 	subs.w	fp, sl, r4
 800cde8:	d00b      	beq.n	800ce02 <_svfiprintf_r+0x7a>
 800cdea:	465b      	mov	r3, fp
 800cdec:	4622      	mov	r2, r4
 800cdee:	4629      	mov	r1, r5
 800cdf0:	4638      	mov	r0, r7
 800cdf2:	f7ff ff6d 	bl	800ccd0 <__ssputs_r>
 800cdf6:	3001      	adds	r0, #1
 800cdf8:	f000 80aa 	beq.w	800cf50 <_svfiprintf_r+0x1c8>
 800cdfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdfe:	445a      	add	r2, fp
 800ce00:	9209      	str	r2, [sp, #36]	; 0x24
 800ce02:	f89a 3000 	ldrb.w	r3, [sl]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f000 80a2 	beq.w	800cf50 <_svfiprintf_r+0x1c8>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce16:	f10a 0a01 	add.w	sl, sl, #1
 800ce1a:	9304      	str	r3, [sp, #16]
 800ce1c:	9307      	str	r3, [sp, #28]
 800ce1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce22:	931a      	str	r3, [sp, #104]	; 0x68
 800ce24:	4654      	mov	r4, sl
 800ce26:	2205      	movs	r2, #5
 800ce28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce2c:	4851      	ldr	r0, [pc, #324]	; (800cf74 <_svfiprintf_r+0x1ec>)
 800ce2e:	f7f3 f9df 	bl	80001f0 <memchr>
 800ce32:	9a04      	ldr	r2, [sp, #16]
 800ce34:	b9d8      	cbnz	r0, 800ce6e <_svfiprintf_r+0xe6>
 800ce36:	06d0      	lsls	r0, r2, #27
 800ce38:	bf44      	itt	mi
 800ce3a:	2320      	movmi	r3, #32
 800ce3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce40:	0711      	lsls	r1, r2, #28
 800ce42:	bf44      	itt	mi
 800ce44:	232b      	movmi	r3, #43	; 0x2b
 800ce46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ce50:	d015      	beq.n	800ce7e <_svfiprintf_r+0xf6>
 800ce52:	9a07      	ldr	r2, [sp, #28]
 800ce54:	4654      	mov	r4, sl
 800ce56:	2000      	movs	r0, #0
 800ce58:	f04f 0c0a 	mov.w	ip, #10
 800ce5c:	4621      	mov	r1, r4
 800ce5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce62:	3b30      	subs	r3, #48	; 0x30
 800ce64:	2b09      	cmp	r3, #9
 800ce66:	d94e      	bls.n	800cf06 <_svfiprintf_r+0x17e>
 800ce68:	b1b0      	cbz	r0, 800ce98 <_svfiprintf_r+0x110>
 800ce6a:	9207      	str	r2, [sp, #28]
 800ce6c:	e014      	b.n	800ce98 <_svfiprintf_r+0x110>
 800ce6e:	eba0 0308 	sub.w	r3, r0, r8
 800ce72:	fa09 f303 	lsl.w	r3, r9, r3
 800ce76:	4313      	orrs	r3, r2
 800ce78:	9304      	str	r3, [sp, #16]
 800ce7a:	46a2      	mov	sl, r4
 800ce7c:	e7d2      	b.n	800ce24 <_svfiprintf_r+0x9c>
 800ce7e:	9b03      	ldr	r3, [sp, #12]
 800ce80:	1d19      	adds	r1, r3, #4
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	9103      	str	r1, [sp, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	bfbb      	ittet	lt
 800ce8a:	425b      	neglt	r3, r3
 800ce8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ce90:	9307      	strge	r3, [sp, #28]
 800ce92:	9307      	strlt	r3, [sp, #28]
 800ce94:	bfb8      	it	lt
 800ce96:	9204      	strlt	r2, [sp, #16]
 800ce98:	7823      	ldrb	r3, [r4, #0]
 800ce9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ce9c:	d10c      	bne.n	800ceb8 <_svfiprintf_r+0x130>
 800ce9e:	7863      	ldrb	r3, [r4, #1]
 800cea0:	2b2a      	cmp	r3, #42	; 0x2a
 800cea2:	d135      	bne.n	800cf10 <_svfiprintf_r+0x188>
 800cea4:	9b03      	ldr	r3, [sp, #12]
 800cea6:	1d1a      	adds	r2, r3, #4
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	9203      	str	r2, [sp, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	bfb8      	it	lt
 800ceb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ceb4:	3402      	adds	r4, #2
 800ceb6:	9305      	str	r3, [sp, #20]
 800ceb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf84 <_svfiprintf_r+0x1fc>
 800cebc:	7821      	ldrb	r1, [r4, #0]
 800cebe:	2203      	movs	r2, #3
 800cec0:	4650      	mov	r0, sl
 800cec2:	f7f3 f995 	bl	80001f0 <memchr>
 800cec6:	b140      	cbz	r0, 800ceda <_svfiprintf_r+0x152>
 800cec8:	2340      	movs	r3, #64	; 0x40
 800ceca:	eba0 000a 	sub.w	r0, r0, sl
 800cece:	fa03 f000 	lsl.w	r0, r3, r0
 800ced2:	9b04      	ldr	r3, [sp, #16]
 800ced4:	4303      	orrs	r3, r0
 800ced6:	3401      	adds	r4, #1
 800ced8:	9304      	str	r3, [sp, #16]
 800ceda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cede:	4826      	ldr	r0, [pc, #152]	; (800cf78 <_svfiprintf_r+0x1f0>)
 800cee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cee4:	2206      	movs	r2, #6
 800cee6:	f7f3 f983 	bl	80001f0 <memchr>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	d038      	beq.n	800cf60 <_svfiprintf_r+0x1d8>
 800ceee:	4b23      	ldr	r3, [pc, #140]	; (800cf7c <_svfiprintf_r+0x1f4>)
 800cef0:	bb1b      	cbnz	r3, 800cf3a <_svfiprintf_r+0x1b2>
 800cef2:	9b03      	ldr	r3, [sp, #12]
 800cef4:	3307      	adds	r3, #7
 800cef6:	f023 0307 	bic.w	r3, r3, #7
 800cefa:	3308      	adds	r3, #8
 800cefc:	9303      	str	r3, [sp, #12]
 800cefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf00:	4433      	add	r3, r6
 800cf02:	9309      	str	r3, [sp, #36]	; 0x24
 800cf04:	e767      	b.n	800cdd6 <_svfiprintf_r+0x4e>
 800cf06:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	2001      	movs	r0, #1
 800cf0e:	e7a5      	b.n	800ce5c <_svfiprintf_r+0xd4>
 800cf10:	2300      	movs	r3, #0
 800cf12:	3401      	adds	r4, #1
 800cf14:	9305      	str	r3, [sp, #20]
 800cf16:	4619      	mov	r1, r3
 800cf18:	f04f 0c0a 	mov.w	ip, #10
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf22:	3a30      	subs	r2, #48	; 0x30
 800cf24:	2a09      	cmp	r2, #9
 800cf26:	d903      	bls.n	800cf30 <_svfiprintf_r+0x1a8>
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d0c5      	beq.n	800ceb8 <_svfiprintf_r+0x130>
 800cf2c:	9105      	str	r1, [sp, #20]
 800cf2e:	e7c3      	b.n	800ceb8 <_svfiprintf_r+0x130>
 800cf30:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf34:	4604      	mov	r4, r0
 800cf36:	2301      	movs	r3, #1
 800cf38:	e7f0      	b.n	800cf1c <_svfiprintf_r+0x194>
 800cf3a:	ab03      	add	r3, sp, #12
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	462a      	mov	r2, r5
 800cf40:	4b0f      	ldr	r3, [pc, #60]	; (800cf80 <_svfiprintf_r+0x1f8>)
 800cf42:	a904      	add	r1, sp, #16
 800cf44:	4638      	mov	r0, r7
 800cf46:	f7fd ff8f 	bl	800ae68 <_printf_float>
 800cf4a:	1c42      	adds	r2, r0, #1
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	d1d6      	bne.n	800cefe <_svfiprintf_r+0x176>
 800cf50:	89ab      	ldrh	r3, [r5, #12]
 800cf52:	065b      	lsls	r3, r3, #25
 800cf54:	f53f af2c 	bmi.w	800cdb0 <_svfiprintf_r+0x28>
 800cf58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf5a:	b01d      	add	sp, #116	; 0x74
 800cf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf60:	ab03      	add	r3, sp, #12
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	462a      	mov	r2, r5
 800cf66:	4b06      	ldr	r3, [pc, #24]	; (800cf80 <_svfiprintf_r+0x1f8>)
 800cf68:	a904      	add	r1, sp, #16
 800cf6a:	4638      	mov	r0, r7
 800cf6c:	f7fe fa20 	bl	800b3b0 <_printf_i>
 800cf70:	e7eb      	b.n	800cf4a <_svfiprintf_r+0x1c2>
 800cf72:	bf00      	nop
 800cf74:	0801008c 	.word	0x0801008c
 800cf78:	08010096 	.word	0x08010096
 800cf7c:	0800ae69 	.word	0x0800ae69
 800cf80:	0800ccd1 	.word	0x0800ccd1
 800cf84:	08010092 	.word	0x08010092

0800cf88 <_sbrk_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4d06      	ldr	r5, [pc, #24]	; (800cfa4 <_sbrk_r+0x1c>)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4604      	mov	r4, r0
 800cf90:	4608      	mov	r0, r1
 800cf92:	602b      	str	r3, [r5, #0]
 800cf94:	f7f4 fd54 	bl	8001a40 <_sbrk>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	d102      	bne.n	800cfa2 <_sbrk_r+0x1a>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	b103      	cbz	r3, 800cfa2 <_sbrk_r+0x1a>
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	20009524 	.word	0x20009524

0800cfa8 <__assert_func>:
 800cfa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfaa:	4614      	mov	r4, r2
 800cfac:	461a      	mov	r2, r3
 800cfae:	4b09      	ldr	r3, [pc, #36]	; (800cfd4 <__assert_func+0x2c>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	68d8      	ldr	r0, [r3, #12]
 800cfb6:	b14c      	cbz	r4, 800cfcc <__assert_func+0x24>
 800cfb8:	4b07      	ldr	r3, [pc, #28]	; (800cfd8 <__assert_func+0x30>)
 800cfba:	9100      	str	r1, [sp, #0]
 800cfbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfc0:	4906      	ldr	r1, [pc, #24]	; (800cfdc <__assert_func+0x34>)
 800cfc2:	462b      	mov	r3, r5
 800cfc4:	f000 f80e 	bl	800cfe4 <fiprintf>
 800cfc8:	f000 faac 	bl	800d524 <abort>
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <__assert_func+0x38>)
 800cfce:	461c      	mov	r4, r3
 800cfd0:	e7f3      	b.n	800cfba <__assert_func+0x12>
 800cfd2:	bf00      	nop
 800cfd4:	20000028 	.word	0x20000028
 800cfd8:	0801009d 	.word	0x0801009d
 800cfdc:	080100aa 	.word	0x080100aa
 800cfe0:	080100d8 	.word	0x080100d8

0800cfe4 <fiprintf>:
 800cfe4:	b40e      	push	{r1, r2, r3}
 800cfe6:	b503      	push	{r0, r1, lr}
 800cfe8:	4601      	mov	r1, r0
 800cfea:	ab03      	add	r3, sp, #12
 800cfec:	4805      	ldr	r0, [pc, #20]	; (800d004 <fiprintf+0x20>)
 800cfee:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff2:	6800      	ldr	r0, [r0, #0]
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	f000 f897 	bl	800d128 <_vfiprintf_r>
 800cffa:	b002      	add	sp, #8
 800cffc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d000:	b003      	add	sp, #12
 800d002:	4770      	bx	lr
 800d004:	20000028 	.word	0x20000028

0800d008 <__ascii_mbtowc>:
 800d008:	b082      	sub	sp, #8
 800d00a:	b901      	cbnz	r1, 800d00e <__ascii_mbtowc+0x6>
 800d00c:	a901      	add	r1, sp, #4
 800d00e:	b142      	cbz	r2, 800d022 <__ascii_mbtowc+0x1a>
 800d010:	b14b      	cbz	r3, 800d026 <__ascii_mbtowc+0x1e>
 800d012:	7813      	ldrb	r3, [r2, #0]
 800d014:	600b      	str	r3, [r1, #0]
 800d016:	7812      	ldrb	r2, [r2, #0]
 800d018:	1e10      	subs	r0, r2, #0
 800d01a:	bf18      	it	ne
 800d01c:	2001      	movne	r0, #1
 800d01e:	b002      	add	sp, #8
 800d020:	4770      	bx	lr
 800d022:	4610      	mov	r0, r2
 800d024:	e7fb      	b.n	800d01e <__ascii_mbtowc+0x16>
 800d026:	f06f 0001 	mvn.w	r0, #1
 800d02a:	e7f8      	b.n	800d01e <__ascii_mbtowc+0x16>

0800d02c <memmove>:
 800d02c:	4288      	cmp	r0, r1
 800d02e:	b510      	push	{r4, lr}
 800d030:	eb01 0402 	add.w	r4, r1, r2
 800d034:	d902      	bls.n	800d03c <memmove+0x10>
 800d036:	4284      	cmp	r4, r0
 800d038:	4623      	mov	r3, r4
 800d03a:	d807      	bhi.n	800d04c <memmove+0x20>
 800d03c:	1e43      	subs	r3, r0, #1
 800d03e:	42a1      	cmp	r1, r4
 800d040:	d008      	beq.n	800d054 <memmove+0x28>
 800d042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d04a:	e7f8      	b.n	800d03e <memmove+0x12>
 800d04c:	4402      	add	r2, r0
 800d04e:	4601      	mov	r1, r0
 800d050:	428a      	cmp	r2, r1
 800d052:	d100      	bne.n	800d056 <memmove+0x2a>
 800d054:	bd10      	pop	{r4, pc}
 800d056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d05a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d05e:	e7f7      	b.n	800d050 <memmove+0x24>

0800d060 <__malloc_lock>:
 800d060:	4801      	ldr	r0, [pc, #4]	; (800d068 <__malloc_lock+0x8>)
 800d062:	f000 bc1f 	b.w	800d8a4 <__retarget_lock_acquire_recursive>
 800d066:	bf00      	nop
 800d068:	20009528 	.word	0x20009528

0800d06c <__malloc_unlock>:
 800d06c:	4801      	ldr	r0, [pc, #4]	; (800d074 <__malloc_unlock+0x8>)
 800d06e:	f000 bc1a 	b.w	800d8a6 <__retarget_lock_release_recursive>
 800d072:	bf00      	nop
 800d074:	20009528 	.word	0x20009528

0800d078 <_realloc_r>:
 800d078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d07c:	4680      	mov	r8, r0
 800d07e:	4614      	mov	r4, r2
 800d080:	460e      	mov	r6, r1
 800d082:	b921      	cbnz	r1, 800d08e <_realloc_r+0x16>
 800d084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d088:	4611      	mov	r1, r2
 800d08a:	f7ff bdad 	b.w	800cbe8 <_malloc_r>
 800d08e:	b92a      	cbnz	r2, 800d09c <_realloc_r+0x24>
 800d090:	f7ff fd3e 	bl	800cb10 <_free_r>
 800d094:	4625      	mov	r5, r4
 800d096:	4628      	mov	r0, r5
 800d098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d09c:	f000 fc6a 	bl	800d974 <_malloc_usable_size_r>
 800d0a0:	4284      	cmp	r4, r0
 800d0a2:	4607      	mov	r7, r0
 800d0a4:	d802      	bhi.n	800d0ac <_realloc_r+0x34>
 800d0a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0aa:	d812      	bhi.n	800d0d2 <_realloc_r+0x5a>
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	f7ff fd9a 	bl	800cbe8 <_malloc_r>
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d0ed      	beq.n	800d096 <_realloc_r+0x1e>
 800d0ba:	42bc      	cmp	r4, r7
 800d0bc:	4622      	mov	r2, r4
 800d0be:	4631      	mov	r1, r6
 800d0c0:	bf28      	it	cs
 800d0c2:	463a      	movcs	r2, r7
 800d0c4:	f7fd fe1a 	bl	800acfc <memcpy>
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	f7ff fd20 	bl	800cb10 <_free_r>
 800d0d0:	e7e1      	b.n	800d096 <_realloc_r+0x1e>
 800d0d2:	4635      	mov	r5, r6
 800d0d4:	e7df      	b.n	800d096 <_realloc_r+0x1e>

0800d0d6 <__sfputc_r>:
 800d0d6:	6893      	ldr	r3, [r2, #8]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	b410      	push	{r4}
 800d0de:	6093      	str	r3, [r2, #8]
 800d0e0:	da08      	bge.n	800d0f4 <__sfputc_r+0x1e>
 800d0e2:	6994      	ldr	r4, [r2, #24]
 800d0e4:	42a3      	cmp	r3, r4
 800d0e6:	db01      	blt.n	800d0ec <__sfputc_r+0x16>
 800d0e8:	290a      	cmp	r1, #10
 800d0ea:	d103      	bne.n	800d0f4 <__sfputc_r+0x1e>
 800d0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0f0:	f000 b94a 	b.w	800d388 <__swbuf_r>
 800d0f4:	6813      	ldr	r3, [r2, #0]
 800d0f6:	1c58      	adds	r0, r3, #1
 800d0f8:	6010      	str	r0, [r2, #0]
 800d0fa:	7019      	strb	r1, [r3, #0]
 800d0fc:	4608      	mov	r0, r1
 800d0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <__sfputs_r>:
 800d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d106:	4606      	mov	r6, r0
 800d108:	460f      	mov	r7, r1
 800d10a:	4614      	mov	r4, r2
 800d10c:	18d5      	adds	r5, r2, r3
 800d10e:	42ac      	cmp	r4, r5
 800d110:	d101      	bne.n	800d116 <__sfputs_r+0x12>
 800d112:	2000      	movs	r0, #0
 800d114:	e007      	b.n	800d126 <__sfputs_r+0x22>
 800d116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d11a:	463a      	mov	r2, r7
 800d11c:	4630      	mov	r0, r6
 800d11e:	f7ff ffda 	bl	800d0d6 <__sfputc_r>
 800d122:	1c43      	adds	r3, r0, #1
 800d124:	d1f3      	bne.n	800d10e <__sfputs_r+0xa>
 800d126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d128 <_vfiprintf_r>:
 800d128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12c:	460d      	mov	r5, r1
 800d12e:	b09d      	sub	sp, #116	; 0x74
 800d130:	4614      	mov	r4, r2
 800d132:	4698      	mov	r8, r3
 800d134:	4606      	mov	r6, r0
 800d136:	b118      	cbz	r0, 800d140 <_vfiprintf_r+0x18>
 800d138:	6983      	ldr	r3, [r0, #24]
 800d13a:	b90b      	cbnz	r3, 800d140 <_vfiprintf_r+0x18>
 800d13c:	f000 fb14 	bl	800d768 <__sinit>
 800d140:	4b89      	ldr	r3, [pc, #548]	; (800d368 <_vfiprintf_r+0x240>)
 800d142:	429d      	cmp	r5, r3
 800d144:	d11b      	bne.n	800d17e <_vfiprintf_r+0x56>
 800d146:	6875      	ldr	r5, [r6, #4]
 800d148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d14a:	07d9      	lsls	r1, r3, #31
 800d14c:	d405      	bmi.n	800d15a <_vfiprintf_r+0x32>
 800d14e:	89ab      	ldrh	r3, [r5, #12]
 800d150:	059a      	lsls	r2, r3, #22
 800d152:	d402      	bmi.n	800d15a <_vfiprintf_r+0x32>
 800d154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d156:	f000 fba5 	bl	800d8a4 <__retarget_lock_acquire_recursive>
 800d15a:	89ab      	ldrh	r3, [r5, #12]
 800d15c:	071b      	lsls	r3, r3, #28
 800d15e:	d501      	bpl.n	800d164 <_vfiprintf_r+0x3c>
 800d160:	692b      	ldr	r3, [r5, #16]
 800d162:	b9eb      	cbnz	r3, 800d1a0 <_vfiprintf_r+0x78>
 800d164:	4629      	mov	r1, r5
 800d166:	4630      	mov	r0, r6
 800d168:	f000 f96e 	bl	800d448 <__swsetup_r>
 800d16c:	b1c0      	cbz	r0, 800d1a0 <_vfiprintf_r+0x78>
 800d16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d170:	07dc      	lsls	r4, r3, #31
 800d172:	d50e      	bpl.n	800d192 <_vfiprintf_r+0x6a>
 800d174:	f04f 30ff 	mov.w	r0, #4294967295
 800d178:	b01d      	add	sp, #116	; 0x74
 800d17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17e:	4b7b      	ldr	r3, [pc, #492]	; (800d36c <_vfiprintf_r+0x244>)
 800d180:	429d      	cmp	r5, r3
 800d182:	d101      	bne.n	800d188 <_vfiprintf_r+0x60>
 800d184:	68b5      	ldr	r5, [r6, #8]
 800d186:	e7df      	b.n	800d148 <_vfiprintf_r+0x20>
 800d188:	4b79      	ldr	r3, [pc, #484]	; (800d370 <_vfiprintf_r+0x248>)
 800d18a:	429d      	cmp	r5, r3
 800d18c:	bf08      	it	eq
 800d18e:	68f5      	ldreq	r5, [r6, #12]
 800d190:	e7da      	b.n	800d148 <_vfiprintf_r+0x20>
 800d192:	89ab      	ldrh	r3, [r5, #12]
 800d194:	0598      	lsls	r0, r3, #22
 800d196:	d4ed      	bmi.n	800d174 <_vfiprintf_r+0x4c>
 800d198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d19a:	f000 fb84 	bl	800d8a6 <__retarget_lock_release_recursive>
 800d19e:	e7e9      	b.n	800d174 <_vfiprintf_r+0x4c>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a4:	2320      	movs	r3, #32
 800d1a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1ae:	2330      	movs	r3, #48	; 0x30
 800d1b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d374 <_vfiprintf_r+0x24c>
 800d1b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1b8:	f04f 0901 	mov.w	r9, #1
 800d1bc:	4623      	mov	r3, r4
 800d1be:	469a      	mov	sl, r3
 800d1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1c4:	b10a      	cbz	r2, 800d1ca <_vfiprintf_r+0xa2>
 800d1c6:	2a25      	cmp	r2, #37	; 0x25
 800d1c8:	d1f9      	bne.n	800d1be <_vfiprintf_r+0x96>
 800d1ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ce:	d00b      	beq.n	800d1e8 <_vfiprintf_r+0xc0>
 800d1d0:	465b      	mov	r3, fp
 800d1d2:	4622      	mov	r2, r4
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f7ff ff94 	bl	800d104 <__sfputs_r>
 800d1dc:	3001      	adds	r0, #1
 800d1de:	f000 80aa 	beq.w	800d336 <_vfiprintf_r+0x20e>
 800d1e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1e4:	445a      	add	r2, fp
 800d1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800d1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f000 80a2 	beq.w	800d336 <_vfiprintf_r+0x20e>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1fc:	f10a 0a01 	add.w	sl, sl, #1
 800d200:	9304      	str	r3, [sp, #16]
 800d202:	9307      	str	r3, [sp, #28]
 800d204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d208:	931a      	str	r3, [sp, #104]	; 0x68
 800d20a:	4654      	mov	r4, sl
 800d20c:	2205      	movs	r2, #5
 800d20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d212:	4858      	ldr	r0, [pc, #352]	; (800d374 <_vfiprintf_r+0x24c>)
 800d214:	f7f2 ffec 	bl	80001f0 <memchr>
 800d218:	9a04      	ldr	r2, [sp, #16]
 800d21a:	b9d8      	cbnz	r0, 800d254 <_vfiprintf_r+0x12c>
 800d21c:	06d1      	lsls	r1, r2, #27
 800d21e:	bf44      	itt	mi
 800d220:	2320      	movmi	r3, #32
 800d222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d226:	0713      	lsls	r3, r2, #28
 800d228:	bf44      	itt	mi
 800d22a:	232b      	movmi	r3, #43	; 0x2b
 800d22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d230:	f89a 3000 	ldrb.w	r3, [sl]
 800d234:	2b2a      	cmp	r3, #42	; 0x2a
 800d236:	d015      	beq.n	800d264 <_vfiprintf_r+0x13c>
 800d238:	9a07      	ldr	r2, [sp, #28]
 800d23a:	4654      	mov	r4, sl
 800d23c:	2000      	movs	r0, #0
 800d23e:	f04f 0c0a 	mov.w	ip, #10
 800d242:	4621      	mov	r1, r4
 800d244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d248:	3b30      	subs	r3, #48	; 0x30
 800d24a:	2b09      	cmp	r3, #9
 800d24c:	d94e      	bls.n	800d2ec <_vfiprintf_r+0x1c4>
 800d24e:	b1b0      	cbz	r0, 800d27e <_vfiprintf_r+0x156>
 800d250:	9207      	str	r2, [sp, #28]
 800d252:	e014      	b.n	800d27e <_vfiprintf_r+0x156>
 800d254:	eba0 0308 	sub.w	r3, r0, r8
 800d258:	fa09 f303 	lsl.w	r3, r9, r3
 800d25c:	4313      	orrs	r3, r2
 800d25e:	9304      	str	r3, [sp, #16]
 800d260:	46a2      	mov	sl, r4
 800d262:	e7d2      	b.n	800d20a <_vfiprintf_r+0xe2>
 800d264:	9b03      	ldr	r3, [sp, #12]
 800d266:	1d19      	adds	r1, r3, #4
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	9103      	str	r1, [sp, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	bfbb      	ittet	lt
 800d270:	425b      	neglt	r3, r3
 800d272:	f042 0202 	orrlt.w	r2, r2, #2
 800d276:	9307      	strge	r3, [sp, #28]
 800d278:	9307      	strlt	r3, [sp, #28]
 800d27a:	bfb8      	it	lt
 800d27c:	9204      	strlt	r2, [sp, #16]
 800d27e:	7823      	ldrb	r3, [r4, #0]
 800d280:	2b2e      	cmp	r3, #46	; 0x2e
 800d282:	d10c      	bne.n	800d29e <_vfiprintf_r+0x176>
 800d284:	7863      	ldrb	r3, [r4, #1]
 800d286:	2b2a      	cmp	r3, #42	; 0x2a
 800d288:	d135      	bne.n	800d2f6 <_vfiprintf_r+0x1ce>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	1d1a      	adds	r2, r3, #4
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	9203      	str	r2, [sp, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	bfb8      	it	lt
 800d296:	f04f 33ff 	movlt.w	r3, #4294967295
 800d29a:	3402      	adds	r4, #2
 800d29c:	9305      	str	r3, [sp, #20]
 800d29e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d384 <_vfiprintf_r+0x25c>
 800d2a2:	7821      	ldrb	r1, [r4, #0]
 800d2a4:	2203      	movs	r2, #3
 800d2a6:	4650      	mov	r0, sl
 800d2a8:	f7f2 ffa2 	bl	80001f0 <memchr>
 800d2ac:	b140      	cbz	r0, 800d2c0 <_vfiprintf_r+0x198>
 800d2ae:	2340      	movs	r3, #64	; 0x40
 800d2b0:	eba0 000a 	sub.w	r0, r0, sl
 800d2b4:	fa03 f000 	lsl.w	r0, r3, r0
 800d2b8:	9b04      	ldr	r3, [sp, #16]
 800d2ba:	4303      	orrs	r3, r0
 800d2bc:	3401      	adds	r4, #1
 800d2be:	9304      	str	r3, [sp, #16]
 800d2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c4:	482c      	ldr	r0, [pc, #176]	; (800d378 <_vfiprintf_r+0x250>)
 800d2c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2ca:	2206      	movs	r2, #6
 800d2cc:	f7f2 ff90 	bl	80001f0 <memchr>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d03f      	beq.n	800d354 <_vfiprintf_r+0x22c>
 800d2d4:	4b29      	ldr	r3, [pc, #164]	; (800d37c <_vfiprintf_r+0x254>)
 800d2d6:	bb1b      	cbnz	r3, 800d320 <_vfiprintf_r+0x1f8>
 800d2d8:	9b03      	ldr	r3, [sp, #12]
 800d2da:	3307      	adds	r3, #7
 800d2dc:	f023 0307 	bic.w	r3, r3, #7
 800d2e0:	3308      	adds	r3, #8
 800d2e2:	9303      	str	r3, [sp, #12]
 800d2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e6:	443b      	add	r3, r7
 800d2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ea:	e767      	b.n	800d1bc <_vfiprintf_r+0x94>
 800d2ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2f0:	460c      	mov	r4, r1
 800d2f2:	2001      	movs	r0, #1
 800d2f4:	e7a5      	b.n	800d242 <_vfiprintf_r+0x11a>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	3401      	adds	r4, #1
 800d2fa:	9305      	str	r3, [sp, #20]
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	f04f 0c0a 	mov.w	ip, #10
 800d302:	4620      	mov	r0, r4
 800d304:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d308:	3a30      	subs	r2, #48	; 0x30
 800d30a:	2a09      	cmp	r2, #9
 800d30c:	d903      	bls.n	800d316 <_vfiprintf_r+0x1ee>
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d0c5      	beq.n	800d29e <_vfiprintf_r+0x176>
 800d312:	9105      	str	r1, [sp, #20]
 800d314:	e7c3      	b.n	800d29e <_vfiprintf_r+0x176>
 800d316:	fb0c 2101 	mla	r1, ip, r1, r2
 800d31a:	4604      	mov	r4, r0
 800d31c:	2301      	movs	r3, #1
 800d31e:	e7f0      	b.n	800d302 <_vfiprintf_r+0x1da>
 800d320:	ab03      	add	r3, sp, #12
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	462a      	mov	r2, r5
 800d326:	4b16      	ldr	r3, [pc, #88]	; (800d380 <_vfiprintf_r+0x258>)
 800d328:	a904      	add	r1, sp, #16
 800d32a:	4630      	mov	r0, r6
 800d32c:	f7fd fd9c 	bl	800ae68 <_printf_float>
 800d330:	4607      	mov	r7, r0
 800d332:	1c78      	adds	r0, r7, #1
 800d334:	d1d6      	bne.n	800d2e4 <_vfiprintf_r+0x1bc>
 800d336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d338:	07d9      	lsls	r1, r3, #31
 800d33a:	d405      	bmi.n	800d348 <_vfiprintf_r+0x220>
 800d33c:	89ab      	ldrh	r3, [r5, #12]
 800d33e:	059a      	lsls	r2, r3, #22
 800d340:	d402      	bmi.n	800d348 <_vfiprintf_r+0x220>
 800d342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d344:	f000 faaf 	bl	800d8a6 <__retarget_lock_release_recursive>
 800d348:	89ab      	ldrh	r3, [r5, #12]
 800d34a:	065b      	lsls	r3, r3, #25
 800d34c:	f53f af12 	bmi.w	800d174 <_vfiprintf_r+0x4c>
 800d350:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d352:	e711      	b.n	800d178 <_vfiprintf_r+0x50>
 800d354:	ab03      	add	r3, sp, #12
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	462a      	mov	r2, r5
 800d35a:	4b09      	ldr	r3, [pc, #36]	; (800d380 <_vfiprintf_r+0x258>)
 800d35c:	a904      	add	r1, sp, #16
 800d35e:	4630      	mov	r0, r6
 800d360:	f7fe f826 	bl	800b3b0 <_printf_i>
 800d364:	e7e4      	b.n	800d330 <_vfiprintf_r+0x208>
 800d366:	bf00      	nop
 800d368:	08010204 	.word	0x08010204
 800d36c:	08010224 	.word	0x08010224
 800d370:	080101e4 	.word	0x080101e4
 800d374:	0801008c 	.word	0x0801008c
 800d378:	08010096 	.word	0x08010096
 800d37c:	0800ae69 	.word	0x0800ae69
 800d380:	0800d105 	.word	0x0800d105
 800d384:	08010092 	.word	0x08010092

0800d388 <__swbuf_r>:
 800d388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d38a:	460e      	mov	r6, r1
 800d38c:	4614      	mov	r4, r2
 800d38e:	4605      	mov	r5, r0
 800d390:	b118      	cbz	r0, 800d39a <__swbuf_r+0x12>
 800d392:	6983      	ldr	r3, [r0, #24]
 800d394:	b90b      	cbnz	r3, 800d39a <__swbuf_r+0x12>
 800d396:	f000 f9e7 	bl	800d768 <__sinit>
 800d39a:	4b21      	ldr	r3, [pc, #132]	; (800d420 <__swbuf_r+0x98>)
 800d39c:	429c      	cmp	r4, r3
 800d39e:	d12b      	bne.n	800d3f8 <__swbuf_r+0x70>
 800d3a0:	686c      	ldr	r4, [r5, #4]
 800d3a2:	69a3      	ldr	r3, [r4, #24]
 800d3a4:	60a3      	str	r3, [r4, #8]
 800d3a6:	89a3      	ldrh	r3, [r4, #12]
 800d3a8:	071a      	lsls	r2, r3, #28
 800d3aa:	d52f      	bpl.n	800d40c <__swbuf_r+0x84>
 800d3ac:	6923      	ldr	r3, [r4, #16]
 800d3ae:	b36b      	cbz	r3, 800d40c <__swbuf_r+0x84>
 800d3b0:	6923      	ldr	r3, [r4, #16]
 800d3b2:	6820      	ldr	r0, [r4, #0]
 800d3b4:	1ac0      	subs	r0, r0, r3
 800d3b6:	6963      	ldr	r3, [r4, #20]
 800d3b8:	b2f6      	uxtb	r6, r6
 800d3ba:	4283      	cmp	r3, r0
 800d3bc:	4637      	mov	r7, r6
 800d3be:	dc04      	bgt.n	800d3ca <__swbuf_r+0x42>
 800d3c0:	4621      	mov	r1, r4
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f000 f93c 	bl	800d640 <_fflush_r>
 800d3c8:	bb30      	cbnz	r0, 800d418 <__swbuf_r+0x90>
 800d3ca:	68a3      	ldr	r3, [r4, #8]
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	60a3      	str	r3, [r4, #8]
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	1c5a      	adds	r2, r3, #1
 800d3d4:	6022      	str	r2, [r4, #0]
 800d3d6:	701e      	strb	r6, [r3, #0]
 800d3d8:	6963      	ldr	r3, [r4, #20]
 800d3da:	3001      	adds	r0, #1
 800d3dc:	4283      	cmp	r3, r0
 800d3de:	d004      	beq.n	800d3ea <__swbuf_r+0x62>
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	07db      	lsls	r3, r3, #31
 800d3e4:	d506      	bpl.n	800d3f4 <__swbuf_r+0x6c>
 800d3e6:	2e0a      	cmp	r6, #10
 800d3e8:	d104      	bne.n	800d3f4 <__swbuf_r+0x6c>
 800d3ea:	4621      	mov	r1, r4
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	f000 f927 	bl	800d640 <_fflush_r>
 800d3f2:	b988      	cbnz	r0, 800d418 <__swbuf_r+0x90>
 800d3f4:	4638      	mov	r0, r7
 800d3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3f8:	4b0a      	ldr	r3, [pc, #40]	; (800d424 <__swbuf_r+0x9c>)
 800d3fa:	429c      	cmp	r4, r3
 800d3fc:	d101      	bne.n	800d402 <__swbuf_r+0x7a>
 800d3fe:	68ac      	ldr	r4, [r5, #8]
 800d400:	e7cf      	b.n	800d3a2 <__swbuf_r+0x1a>
 800d402:	4b09      	ldr	r3, [pc, #36]	; (800d428 <__swbuf_r+0xa0>)
 800d404:	429c      	cmp	r4, r3
 800d406:	bf08      	it	eq
 800d408:	68ec      	ldreq	r4, [r5, #12]
 800d40a:	e7ca      	b.n	800d3a2 <__swbuf_r+0x1a>
 800d40c:	4621      	mov	r1, r4
 800d40e:	4628      	mov	r0, r5
 800d410:	f000 f81a 	bl	800d448 <__swsetup_r>
 800d414:	2800      	cmp	r0, #0
 800d416:	d0cb      	beq.n	800d3b0 <__swbuf_r+0x28>
 800d418:	f04f 37ff 	mov.w	r7, #4294967295
 800d41c:	e7ea      	b.n	800d3f4 <__swbuf_r+0x6c>
 800d41e:	bf00      	nop
 800d420:	08010204 	.word	0x08010204
 800d424:	08010224 	.word	0x08010224
 800d428:	080101e4 	.word	0x080101e4

0800d42c <__ascii_wctomb>:
 800d42c:	b149      	cbz	r1, 800d442 <__ascii_wctomb+0x16>
 800d42e:	2aff      	cmp	r2, #255	; 0xff
 800d430:	bf85      	ittet	hi
 800d432:	238a      	movhi	r3, #138	; 0x8a
 800d434:	6003      	strhi	r3, [r0, #0]
 800d436:	700a      	strbls	r2, [r1, #0]
 800d438:	f04f 30ff 	movhi.w	r0, #4294967295
 800d43c:	bf98      	it	ls
 800d43e:	2001      	movls	r0, #1
 800d440:	4770      	bx	lr
 800d442:	4608      	mov	r0, r1
 800d444:	4770      	bx	lr
	...

0800d448 <__swsetup_r>:
 800d448:	4b32      	ldr	r3, [pc, #200]	; (800d514 <__swsetup_r+0xcc>)
 800d44a:	b570      	push	{r4, r5, r6, lr}
 800d44c:	681d      	ldr	r5, [r3, #0]
 800d44e:	4606      	mov	r6, r0
 800d450:	460c      	mov	r4, r1
 800d452:	b125      	cbz	r5, 800d45e <__swsetup_r+0x16>
 800d454:	69ab      	ldr	r3, [r5, #24]
 800d456:	b913      	cbnz	r3, 800d45e <__swsetup_r+0x16>
 800d458:	4628      	mov	r0, r5
 800d45a:	f000 f985 	bl	800d768 <__sinit>
 800d45e:	4b2e      	ldr	r3, [pc, #184]	; (800d518 <__swsetup_r+0xd0>)
 800d460:	429c      	cmp	r4, r3
 800d462:	d10f      	bne.n	800d484 <__swsetup_r+0x3c>
 800d464:	686c      	ldr	r4, [r5, #4]
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d46c:	0719      	lsls	r1, r3, #28
 800d46e:	d42c      	bmi.n	800d4ca <__swsetup_r+0x82>
 800d470:	06dd      	lsls	r5, r3, #27
 800d472:	d411      	bmi.n	800d498 <__swsetup_r+0x50>
 800d474:	2309      	movs	r3, #9
 800d476:	6033      	str	r3, [r6, #0]
 800d478:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d47c:	81a3      	strh	r3, [r4, #12]
 800d47e:	f04f 30ff 	mov.w	r0, #4294967295
 800d482:	e03e      	b.n	800d502 <__swsetup_r+0xba>
 800d484:	4b25      	ldr	r3, [pc, #148]	; (800d51c <__swsetup_r+0xd4>)
 800d486:	429c      	cmp	r4, r3
 800d488:	d101      	bne.n	800d48e <__swsetup_r+0x46>
 800d48a:	68ac      	ldr	r4, [r5, #8]
 800d48c:	e7eb      	b.n	800d466 <__swsetup_r+0x1e>
 800d48e:	4b24      	ldr	r3, [pc, #144]	; (800d520 <__swsetup_r+0xd8>)
 800d490:	429c      	cmp	r4, r3
 800d492:	bf08      	it	eq
 800d494:	68ec      	ldreq	r4, [r5, #12]
 800d496:	e7e6      	b.n	800d466 <__swsetup_r+0x1e>
 800d498:	0758      	lsls	r0, r3, #29
 800d49a:	d512      	bpl.n	800d4c2 <__swsetup_r+0x7a>
 800d49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d49e:	b141      	cbz	r1, 800d4b2 <__swsetup_r+0x6a>
 800d4a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4a4:	4299      	cmp	r1, r3
 800d4a6:	d002      	beq.n	800d4ae <__swsetup_r+0x66>
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f7ff fb31 	bl	800cb10 <_free_r>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	6363      	str	r3, [r4, #52]	; 0x34
 800d4b2:	89a3      	ldrh	r3, [r4, #12]
 800d4b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4b8:	81a3      	strh	r3, [r4, #12]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	6063      	str	r3, [r4, #4]
 800d4be:	6923      	ldr	r3, [r4, #16]
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	f043 0308 	orr.w	r3, r3, #8
 800d4c8:	81a3      	strh	r3, [r4, #12]
 800d4ca:	6923      	ldr	r3, [r4, #16]
 800d4cc:	b94b      	cbnz	r3, 800d4e2 <__swsetup_r+0x9a>
 800d4ce:	89a3      	ldrh	r3, [r4, #12]
 800d4d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4d8:	d003      	beq.n	800d4e2 <__swsetup_r+0x9a>
 800d4da:	4621      	mov	r1, r4
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f000 fa09 	bl	800d8f4 <__smakebuf_r>
 800d4e2:	89a0      	ldrh	r0, [r4, #12]
 800d4e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4e8:	f010 0301 	ands.w	r3, r0, #1
 800d4ec:	d00a      	beq.n	800d504 <__swsetup_r+0xbc>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	60a3      	str	r3, [r4, #8]
 800d4f2:	6963      	ldr	r3, [r4, #20]
 800d4f4:	425b      	negs	r3, r3
 800d4f6:	61a3      	str	r3, [r4, #24]
 800d4f8:	6923      	ldr	r3, [r4, #16]
 800d4fa:	b943      	cbnz	r3, 800d50e <__swsetup_r+0xc6>
 800d4fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d500:	d1ba      	bne.n	800d478 <__swsetup_r+0x30>
 800d502:	bd70      	pop	{r4, r5, r6, pc}
 800d504:	0781      	lsls	r1, r0, #30
 800d506:	bf58      	it	pl
 800d508:	6963      	ldrpl	r3, [r4, #20]
 800d50a:	60a3      	str	r3, [r4, #8]
 800d50c:	e7f4      	b.n	800d4f8 <__swsetup_r+0xb0>
 800d50e:	2000      	movs	r0, #0
 800d510:	e7f7      	b.n	800d502 <__swsetup_r+0xba>
 800d512:	bf00      	nop
 800d514:	20000028 	.word	0x20000028
 800d518:	08010204 	.word	0x08010204
 800d51c:	08010224 	.word	0x08010224
 800d520:	080101e4 	.word	0x080101e4

0800d524 <abort>:
 800d524:	b508      	push	{r3, lr}
 800d526:	2006      	movs	r0, #6
 800d528:	f000 fa54 	bl	800d9d4 <raise>
 800d52c:	2001      	movs	r0, #1
 800d52e:	f7f4 fa0f 	bl	8001950 <_exit>
	...

0800d534 <__sflush_r>:
 800d534:	898a      	ldrh	r2, [r1, #12]
 800d536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d53a:	4605      	mov	r5, r0
 800d53c:	0710      	lsls	r0, r2, #28
 800d53e:	460c      	mov	r4, r1
 800d540:	d458      	bmi.n	800d5f4 <__sflush_r+0xc0>
 800d542:	684b      	ldr	r3, [r1, #4]
 800d544:	2b00      	cmp	r3, #0
 800d546:	dc05      	bgt.n	800d554 <__sflush_r+0x20>
 800d548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	dc02      	bgt.n	800d554 <__sflush_r+0x20>
 800d54e:	2000      	movs	r0, #0
 800d550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d556:	2e00      	cmp	r6, #0
 800d558:	d0f9      	beq.n	800d54e <__sflush_r+0x1a>
 800d55a:	2300      	movs	r3, #0
 800d55c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d560:	682f      	ldr	r7, [r5, #0]
 800d562:	602b      	str	r3, [r5, #0]
 800d564:	d032      	beq.n	800d5cc <__sflush_r+0x98>
 800d566:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d568:	89a3      	ldrh	r3, [r4, #12]
 800d56a:	075a      	lsls	r2, r3, #29
 800d56c:	d505      	bpl.n	800d57a <__sflush_r+0x46>
 800d56e:	6863      	ldr	r3, [r4, #4]
 800d570:	1ac0      	subs	r0, r0, r3
 800d572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d574:	b10b      	cbz	r3, 800d57a <__sflush_r+0x46>
 800d576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d578:	1ac0      	subs	r0, r0, r3
 800d57a:	2300      	movs	r3, #0
 800d57c:	4602      	mov	r2, r0
 800d57e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d580:	6a21      	ldr	r1, [r4, #32]
 800d582:	4628      	mov	r0, r5
 800d584:	47b0      	blx	r6
 800d586:	1c43      	adds	r3, r0, #1
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	d106      	bne.n	800d59a <__sflush_r+0x66>
 800d58c:	6829      	ldr	r1, [r5, #0]
 800d58e:	291d      	cmp	r1, #29
 800d590:	d82c      	bhi.n	800d5ec <__sflush_r+0xb8>
 800d592:	4a2a      	ldr	r2, [pc, #168]	; (800d63c <__sflush_r+0x108>)
 800d594:	40ca      	lsrs	r2, r1
 800d596:	07d6      	lsls	r6, r2, #31
 800d598:	d528      	bpl.n	800d5ec <__sflush_r+0xb8>
 800d59a:	2200      	movs	r2, #0
 800d59c:	6062      	str	r2, [r4, #4]
 800d59e:	04d9      	lsls	r1, r3, #19
 800d5a0:	6922      	ldr	r2, [r4, #16]
 800d5a2:	6022      	str	r2, [r4, #0]
 800d5a4:	d504      	bpl.n	800d5b0 <__sflush_r+0x7c>
 800d5a6:	1c42      	adds	r2, r0, #1
 800d5a8:	d101      	bne.n	800d5ae <__sflush_r+0x7a>
 800d5aa:	682b      	ldr	r3, [r5, #0]
 800d5ac:	b903      	cbnz	r3, 800d5b0 <__sflush_r+0x7c>
 800d5ae:	6560      	str	r0, [r4, #84]	; 0x54
 800d5b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5b2:	602f      	str	r7, [r5, #0]
 800d5b4:	2900      	cmp	r1, #0
 800d5b6:	d0ca      	beq.n	800d54e <__sflush_r+0x1a>
 800d5b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5bc:	4299      	cmp	r1, r3
 800d5be:	d002      	beq.n	800d5c6 <__sflush_r+0x92>
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	f7ff faa5 	bl	800cb10 <_free_r>
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	6360      	str	r0, [r4, #52]	; 0x34
 800d5ca:	e7c1      	b.n	800d550 <__sflush_r+0x1c>
 800d5cc:	6a21      	ldr	r1, [r4, #32]
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	47b0      	blx	r6
 800d5d4:	1c41      	adds	r1, r0, #1
 800d5d6:	d1c7      	bne.n	800d568 <__sflush_r+0x34>
 800d5d8:	682b      	ldr	r3, [r5, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d0c4      	beq.n	800d568 <__sflush_r+0x34>
 800d5de:	2b1d      	cmp	r3, #29
 800d5e0:	d001      	beq.n	800d5e6 <__sflush_r+0xb2>
 800d5e2:	2b16      	cmp	r3, #22
 800d5e4:	d101      	bne.n	800d5ea <__sflush_r+0xb6>
 800d5e6:	602f      	str	r7, [r5, #0]
 800d5e8:	e7b1      	b.n	800d54e <__sflush_r+0x1a>
 800d5ea:	89a3      	ldrh	r3, [r4, #12]
 800d5ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5f0:	81a3      	strh	r3, [r4, #12]
 800d5f2:	e7ad      	b.n	800d550 <__sflush_r+0x1c>
 800d5f4:	690f      	ldr	r7, [r1, #16]
 800d5f6:	2f00      	cmp	r7, #0
 800d5f8:	d0a9      	beq.n	800d54e <__sflush_r+0x1a>
 800d5fa:	0793      	lsls	r3, r2, #30
 800d5fc:	680e      	ldr	r6, [r1, #0]
 800d5fe:	bf08      	it	eq
 800d600:	694b      	ldreq	r3, [r1, #20]
 800d602:	600f      	str	r7, [r1, #0]
 800d604:	bf18      	it	ne
 800d606:	2300      	movne	r3, #0
 800d608:	eba6 0807 	sub.w	r8, r6, r7
 800d60c:	608b      	str	r3, [r1, #8]
 800d60e:	f1b8 0f00 	cmp.w	r8, #0
 800d612:	dd9c      	ble.n	800d54e <__sflush_r+0x1a>
 800d614:	6a21      	ldr	r1, [r4, #32]
 800d616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d618:	4643      	mov	r3, r8
 800d61a:	463a      	mov	r2, r7
 800d61c:	4628      	mov	r0, r5
 800d61e:	47b0      	blx	r6
 800d620:	2800      	cmp	r0, #0
 800d622:	dc06      	bgt.n	800d632 <__sflush_r+0xfe>
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d62a:	81a3      	strh	r3, [r4, #12]
 800d62c:	f04f 30ff 	mov.w	r0, #4294967295
 800d630:	e78e      	b.n	800d550 <__sflush_r+0x1c>
 800d632:	4407      	add	r7, r0
 800d634:	eba8 0800 	sub.w	r8, r8, r0
 800d638:	e7e9      	b.n	800d60e <__sflush_r+0xda>
 800d63a:	bf00      	nop
 800d63c:	20400001 	.word	0x20400001

0800d640 <_fflush_r>:
 800d640:	b538      	push	{r3, r4, r5, lr}
 800d642:	690b      	ldr	r3, [r1, #16]
 800d644:	4605      	mov	r5, r0
 800d646:	460c      	mov	r4, r1
 800d648:	b913      	cbnz	r3, 800d650 <_fflush_r+0x10>
 800d64a:	2500      	movs	r5, #0
 800d64c:	4628      	mov	r0, r5
 800d64e:	bd38      	pop	{r3, r4, r5, pc}
 800d650:	b118      	cbz	r0, 800d65a <_fflush_r+0x1a>
 800d652:	6983      	ldr	r3, [r0, #24]
 800d654:	b90b      	cbnz	r3, 800d65a <_fflush_r+0x1a>
 800d656:	f000 f887 	bl	800d768 <__sinit>
 800d65a:	4b14      	ldr	r3, [pc, #80]	; (800d6ac <_fflush_r+0x6c>)
 800d65c:	429c      	cmp	r4, r3
 800d65e:	d11b      	bne.n	800d698 <_fflush_r+0x58>
 800d660:	686c      	ldr	r4, [r5, #4]
 800d662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d0ef      	beq.n	800d64a <_fflush_r+0xa>
 800d66a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d66c:	07d0      	lsls	r0, r2, #31
 800d66e:	d404      	bmi.n	800d67a <_fflush_r+0x3a>
 800d670:	0599      	lsls	r1, r3, #22
 800d672:	d402      	bmi.n	800d67a <_fflush_r+0x3a>
 800d674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d676:	f000 f915 	bl	800d8a4 <__retarget_lock_acquire_recursive>
 800d67a:	4628      	mov	r0, r5
 800d67c:	4621      	mov	r1, r4
 800d67e:	f7ff ff59 	bl	800d534 <__sflush_r>
 800d682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d684:	07da      	lsls	r2, r3, #31
 800d686:	4605      	mov	r5, r0
 800d688:	d4e0      	bmi.n	800d64c <_fflush_r+0xc>
 800d68a:	89a3      	ldrh	r3, [r4, #12]
 800d68c:	059b      	lsls	r3, r3, #22
 800d68e:	d4dd      	bmi.n	800d64c <_fflush_r+0xc>
 800d690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d692:	f000 f908 	bl	800d8a6 <__retarget_lock_release_recursive>
 800d696:	e7d9      	b.n	800d64c <_fflush_r+0xc>
 800d698:	4b05      	ldr	r3, [pc, #20]	; (800d6b0 <_fflush_r+0x70>)
 800d69a:	429c      	cmp	r4, r3
 800d69c:	d101      	bne.n	800d6a2 <_fflush_r+0x62>
 800d69e:	68ac      	ldr	r4, [r5, #8]
 800d6a0:	e7df      	b.n	800d662 <_fflush_r+0x22>
 800d6a2:	4b04      	ldr	r3, [pc, #16]	; (800d6b4 <_fflush_r+0x74>)
 800d6a4:	429c      	cmp	r4, r3
 800d6a6:	bf08      	it	eq
 800d6a8:	68ec      	ldreq	r4, [r5, #12]
 800d6aa:	e7da      	b.n	800d662 <_fflush_r+0x22>
 800d6ac:	08010204 	.word	0x08010204
 800d6b0:	08010224 	.word	0x08010224
 800d6b4:	080101e4 	.word	0x080101e4

0800d6b8 <std>:
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	b510      	push	{r4, lr}
 800d6bc:	4604      	mov	r4, r0
 800d6be:	e9c0 3300 	strd	r3, r3, [r0]
 800d6c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6c6:	6083      	str	r3, [r0, #8]
 800d6c8:	8181      	strh	r1, [r0, #12]
 800d6ca:	6643      	str	r3, [r0, #100]	; 0x64
 800d6cc:	81c2      	strh	r2, [r0, #14]
 800d6ce:	6183      	str	r3, [r0, #24]
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	2208      	movs	r2, #8
 800d6d4:	305c      	adds	r0, #92	; 0x5c
 800d6d6:	f7fd fb1f 	bl	800ad18 <memset>
 800d6da:	4b05      	ldr	r3, [pc, #20]	; (800d6f0 <std+0x38>)
 800d6dc:	6263      	str	r3, [r4, #36]	; 0x24
 800d6de:	4b05      	ldr	r3, [pc, #20]	; (800d6f4 <std+0x3c>)
 800d6e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d6e2:	4b05      	ldr	r3, [pc, #20]	; (800d6f8 <std+0x40>)
 800d6e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6e6:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <std+0x44>)
 800d6e8:	6224      	str	r4, [r4, #32]
 800d6ea:	6323      	str	r3, [r4, #48]	; 0x30
 800d6ec:	bd10      	pop	{r4, pc}
 800d6ee:	bf00      	nop
 800d6f0:	0800da0d 	.word	0x0800da0d
 800d6f4:	0800da2f 	.word	0x0800da2f
 800d6f8:	0800da67 	.word	0x0800da67
 800d6fc:	0800da8b 	.word	0x0800da8b

0800d700 <_cleanup_r>:
 800d700:	4901      	ldr	r1, [pc, #4]	; (800d708 <_cleanup_r+0x8>)
 800d702:	f000 b8af 	b.w	800d864 <_fwalk_reent>
 800d706:	bf00      	nop
 800d708:	0800d641 	.word	0x0800d641

0800d70c <__sfmoreglue>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	2268      	movs	r2, #104	; 0x68
 800d710:	1e4d      	subs	r5, r1, #1
 800d712:	4355      	muls	r5, r2
 800d714:	460e      	mov	r6, r1
 800d716:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d71a:	f7ff fa65 	bl	800cbe8 <_malloc_r>
 800d71e:	4604      	mov	r4, r0
 800d720:	b140      	cbz	r0, 800d734 <__sfmoreglue+0x28>
 800d722:	2100      	movs	r1, #0
 800d724:	e9c0 1600 	strd	r1, r6, [r0]
 800d728:	300c      	adds	r0, #12
 800d72a:	60a0      	str	r0, [r4, #8]
 800d72c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d730:	f7fd faf2 	bl	800ad18 <memset>
 800d734:	4620      	mov	r0, r4
 800d736:	bd70      	pop	{r4, r5, r6, pc}

0800d738 <__sfp_lock_acquire>:
 800d738:	4801      	ldr	r0, [pc, #4]	; (800d740 <__sfp_lock_acquire+0x8>)
 800d73a:	f000 b8b3 	b.w	800d8a4 <__retarget_lock_acquire_recursive>
 800d73e:	bf00      	nop
 800d740:	20009529 	.word	0x20009529

0800d744 <__sfp_lock_release>:
 800d744:	4801      	ldr	r0, [pc, #4]	; (800d74c <__sfp_lock_release+0x8>)
 800d746:	f000 b8ae 	b.w	800d8a6 <__retarget_lock_release_recursive>
 800d74a:	bf00      	nop
 800d74c:	20009529 	.word	0x20009529

0800d750 <__sinit_lock_acquire>:
 800d750:	4801      	ldr	r0, [pc, #4]	; (800d758 <__sinit_lock_acquire+0x8>)
 800d752:	f000 b8a7 	b.w	800d8a4 <__retarget_lock_acquire_recursive>
 800d756:	bf00      	nop
 800d758:	2000952a 	.word	0x2000952a

0800d75c <__sinit_lock_release>:
 800d75c:	4801      	ldr	r0, [pc, #4]	; (800d764 <__sinit_lock_release+0x8>)
 800d75e:	f000 b8a2 	b.w	800d8a6 <__retarget_lock_release_recursive>
 800d762:	bf00      	nop
 800d764:	2000952a 	.word	0x2000952a

0800d768 <__sinit>:
 800d768:	b510      	push	{r4, lr}
 800d76a:	4604      	mov	r4, r0
 800d76c:	f7ff fff0 	bl	800d750 <__sinit_lock_acquire>
 800d770:	69a3      	ldr	r3, [r4, #24]
 800d772:	b11b      	cbz	r3, 800d77c <__sinit+0x14>
 800d774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d778:	f7ff bff0 	b.w	800d75c <__sinit_lock_release>
 800d77c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d780:	6523      	str	r3, [r4, #80]	; 0x50
 800d782:	4b13      	ldr	r3, [pc, #76]	; (800d7d0 <__sinit+0x68>)
 800d784:	4a13      	ldr	r2, [pc, #76]	; (800d7d4 <__sinit+0x6c>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	62a2      	str	r2, [r4, #40]	; 0x28
 800d78a:	42a3      	cmp	r3, r4
 800d78c:	bf04      	itt	eq
 800d78e:	2301      	moveq	r3, #1
 800d790:	61a3      	streq	r3, [r4, #24]
 800d792:	4620      	mov	r0, r4
 800d794:	f000 f820 	bl	800d7d8 <__sfp>
 800d798:	6060      	str	r0, [r4, #4]
 800d79a:	4620      	mov	r0, r4
 800d79c:	f000 f81c 	bl	800d7d8 <__sfp>
 800d7a0:	60a0      	str	r0, [r4, #8]
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f000 f818 	bl	800d7d8 <__sfp>
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	60e0      	str	r0, [r4, #12]
 800d7ac:	2104      	movs	r1, #4
 800d7ae:	6860      	ldr	r0, [r4, #4]
 800d7b0:	f7ff ff82 	bl	800d6b8 <std>
 800d7b4:	68a0      	ldr	r0, [r4, #8]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	2109      	movs	r1, #9
 800d7ba:	f7ff ff7d 	bl	800d6b8 <std>
 800d7be:	68e0      	ldr	r0, [r4, #12]
 800d7c0:	2202      	movs	r2, #2
 800d7c2:	2112      	movs	r1, #18
 800d7c4:	f7ff ff78 	bl	800d6b8 <std>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	61a3      	str	r3, [r4, #24]
 800d7cc:	e7d2      	b.n	800d774 <__sinit+0xc>
 800d7ce:	bf00      	nop
 800d7d0:	0800fe68 	.word	0x0800fe68
 800d7d4:	0800d701 	.word	0x0800d701

0800d7d8 <__sfp>:
 800d7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7da:	4607      	mov	r7, r0
 800d7dc:	f7ff ffac 	bl	800d738 <__sfp_lock_acquire>
 800d7e0:	4b1e      	ldr	r3, [pc, #120]	; (800d85c <__sfp+0x84>)
 800d7e2:	681e      	ldr	r6, [r3, #0]
 800d7e4:	69b3      	ldr	r3, [r6, #24]
 800d7e6:	b913      	cbnz	r3, 800d7ee <__sfp+0x16>
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	f7ff ffbd 	bl	800d768 <__sinit>
 800d7ee:	3648      	adds	r6, #72	; 0x48
 800d7f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	d503      	bpl.n	800d800 <__sfp+0x28>
 800d7f8:	6833      	ldr	r3, [r6, #0]
 800d7fa:	b30b      	cbz	r3, 800d840 <__sfp+0x68>
 800d7fc:	6836      	ldr	r6, [r6, #0]
 800d7fe:	e7f7      	b.n	800d7f0 <__sfp+0x18>
 800d800:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d804:	b9d5      	cbnz	r5, 800d83c <__sfp+0x64>
 800d806:	4b16      	ldr	r3, [pc, #88]	; (800d860 <__sfp+0x88>)
 800d808:	60e3      	str	r3, [r4, #12]
 800d80a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d80e:	6665      	str	r5, [r4, #100]	; 0x64
 800d810:	f000 f847 	bl	800d8a2 <__retarget_lock_init_recursive>
 800d814:	f7ff ff96 	bl	800d744 <__sfp_lock_release>
 800d818:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d81c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d820:	6025      	str	r5, [r4, #0]
 800d822:	61a5      	str	r5, [r4, #24]
 800d824:	2208      	movs	r2, #8
 800d826:	4629      	mov	r1, r5
 800d828:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d82c:	f7fd fa74 	bl	800ad18 <memset>
 800d830:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d834:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d838:	4620      	mov	r0, r4
 800d83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d83c:	3468      	adds	r4, #104	; 0x68
 800d83e:	e7d9      	b.n	800d7f4 <__sfp+0x1c>
 800d840:	2104      	movs	r1, #4
 800d842:	4638      	mov	r0, r7
 800d844:	f7ff ff62 	bl	800d70c <__sfmoreglue>
 800d848:	4604      	mov	r4, r0
 800d84a:	6030      	str	r0, [r6, #0]
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d1d5      	bne.n	800d7fc <__sfp+0x24>
 800d850:	f7ff ff78 	bl	800d744 <__sfp_lock_release>
 800d854:	230c      	movs	r3, #12
 800d856:	603b      	str	r3, [r7, #0]
 800d858:	e7ee      	b.n	800d838 <__sfp+0x60>
 800d85a:	bf00      	nop
 800d85c:	0800fe68 	.word	0x0800fe68
 800d860:	ffff0001 	.word	0xffff0001

0800d864 <_fwalk_reent>:
 800d864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d868:	4606      	mov	r6, r0
 800d86a:	4688      	mov	r8, r1
 800d86c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d870:	2700      	movs	r7, #0
 800d872:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d876:	f1b9 0901 	subs.w	r9, r9, #1
 800d87a:	d505      	bpl.n	800d888 <_fwalk_reent+0x24>
 800d87c:	6824      	ldr	r4, [r4, #0]
 800d87e:	2c00      	cmp	r4, #0
 800d880:	d1f7      	bne.n	800d872 <_fwalk_reent+0xe>
 800d882:	4638      	mov	r0, r7
 800d884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d888:	89ab      	ldrh	r3, [r5, #12]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d907      	bls.n	800d89e <_fwalk_reent+0x3a>
 800d88e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d892:	3301      	adds	r3, #1
 800d894:	d003      	beq.n	800d89e <_fwalk_reent+0x3a>
 800d896:	4629      	mov	r1, r5
 800d898:	4630      	mov	r0, r6
 800d89a:	47c0      	blx	r8
 800d89c:	4307      	orrs	r7, r0
 800d89e:	3568      	adds	r5, #104	; 0x68
 800d8a0:	e7e9      	b.n	800d876 <_fwalk_reent+0x12>

0800d8a2 <__retarget_lock_init_recursive>:
 800d8a2:	4770      	bx	lr

0800d8a4 <__retarget_lock_acquire_recursive>:
 800d8a4:	4770      	bx	lr

0800d8a6 <__retarget_lock_release_recursive>:
 800d8a6:	4770      	bx	lr

0800d8a8 <__swhatbuf_r>:
 800d8a8:	b570      	push	{r4, r5, r6, lr}
 800d8aa:	460e      	mov	r6, r1
 800d8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b0:	2900      	cmp	r1, #0
 800d8b2:	b096      	sub	sp, #88	; 0x58
 800d8b4:	4614      	mov	r4, r2
 800d8b6:	461d      	mov	r5, r3
 800d8b8:	da08      	bge.n	800d8cc <__swhatbuf_r+0x24>
 800d8ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	602a      	str	r2, [r5, #0]
 800d8c2:	061a      	lsls	r2, r3, #24
 800d8c4:	d410      	bmi.n	800d8e8 <__swhatbuf_r+0x40>
 800d8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ca:	e00e      	b.n	800d8ea <__swhatbuf_r+0x42>
 800d8cc:	466a      	mov	r2, sp
 800d8ce:	f000 f903 	bl	800dad8 <_fstat_r>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	dbf1      	blt.n	800d8ba <__swhatbuf_r+0x12>
 800d8d6:	9a01      	ldr	r2, [sp, #4]
 800d8d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8e0:	425a      	negs	r2, r3
 800d8e2:	415a      	adcs	r2, r3
 800d8e4:	602a      	str	r2, [r5, #0]
 800d8e6:	e7ee      	b.n	800d8c6 <__swhatbuf_r+0x1e>
 800d8e8:	2340      	movs	r3, #64	; 0x40
 800d8ea:	2000      	movs	r0, #0
 800d8ec:	6023      	str	r3, [r4, #0]
 800d8ee:	b016      	add	sp, #88	; 0x58
 800d8f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d8f4 <__smakebuf_r>:
 800d8f4:	898b      	ldrh	r3, [r1, #12]
 800d8f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8f8:	079d      	lsls	r5, r3, #30
 800d8fa:	4606      	mov	r6, r0
 800d8fc:	460c      	mov	r4, r1
 800d8fe:	d507      	bpl.n	800d910 <__smakebuf_r+0x1c>
 800d900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d904:	6023      	str	r3, [r4, #0]
 800d906:	6123      	str	r3, [r4, #16]
 800d908:	2301      	movs	r3, #1
 800d90a:	6163      	str	r3, [r4, #20]
 800d90c:	b002      	add	sp, #8
 800d90e:	bd70      	pop	{r4, r5, r6, pc}
 800d910:	ab01      	add	r3, sp, #4
 800d912:	466a      	mov	r2, sp
 800d914:	f7ff ffc8 	bl	800d8a8 <__swhatbuf_r>
 800d918:	9900      	ldr	r1, [sp, #0]
 800d91a:	4605      	mov	r5, r0
 800d91c:	4630      	mov	r0, r6
 800d91e:	f7ff f963 	bl	800cbe8 <_malloc_r>
 800d922:	b948      	cbnz	r0, 800d938 <__smakebuf_r+0x44>
 800d924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d928:	059a      	lsls	r2, r3, #22
 800d92a:	d4ef      	bmi.n	800d90c <__smakebuf_r+0x18>
 800d92c:	f023 0303 	bic.w	r3, r3, #3
 800d930:	f043 0302 	orr.w	r3, r3, #2
 800d934:	81a3      	strh	r3, [r4, #12]
 800d936:	e7e3      	b.n	800d900 <__smakebuf_r+0xc>
 800d938:	4b0d      	ldr	r3, [pc, #52]	; (800d970 <__smakebuf_r+0x7c>)
 800d93a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d93c:	89a3      	ldrh	r3, [r4, #12]
 800d93e:	6020      	str	r0, [r4, #0]
 800d940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d944:	81a3      	strh	r3, [r4, #12]
 800d946:	9b00      	ldr	r3, [sp, #0]
 800d948:	6163      	str	r3, [r4, #20]
 800d94a:	9b01      	ldr	r3, [sp, #4]
 800d94c:	6120      	str	r0, [r4, #16]
 800d94e:	b15b      	cbz	r3, 800d968 <__smakebuf_r+0x74>
 800d950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d954:	4630      	mov	r0, r6
 800d956:	f000 f8d1 	bl	800dafc <_isatty_r>
 800d95a:	b128      	cbz	r0, 800d968 <__smakebuf_r+0x74>
 800d95c:	89a3      	ldrh	r3, [r4, #12]
 800d95e:	f023 0303 	bic.w	r3, r3, #3
 800d962:	f043 0301 	orr.w	r3, r3, #1
 800d966:	81a3      	strh	r3, [r4, #12]
 800d968:	89a0      	ldrh	r0, [r4, #12]
 800d96a:	4305      	orrs	r5, r0
 800d96c:	81a5      	strh	r5, [r4, #12]
 800d96e:	e7cd      	b.n	800d90c <__smakebuf_r+0x18>
 800d970:	0800d701 	.word	0x0800d701

0800d974 <_malloc_usable_size_r>:
 800d974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d978:	1f18      	subs	r0, r3, #4
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	bfbc      	itt	lt
 800d97e:	580b      	ldrlt	r3, [r1, r0]
 800d980:	18c0      	addlt	r0, r0, r3
 800d982:	4770      	bx	lr

0800d984 <_raise_r>:
 800d984:	291f      	cmp	r1, #31
 800d986:	b538      	push	{r3, r4, r5, lr}
 800d988:	4604      	mov	r4, r0
 800d98a:	460d      	mov	r5, r1
 800d98c:	d904      	bls.n	800d998 <_raise_r+0x14>
 800d98e:	2316      	movs	r3, #22
 800d990:	6003      	str	r3, [r0, #0]
 800d992:	f04f 30ff 	mov.w	r0, #4294967295
 800d996:	bd38      	pop	{r3, r4, r5, pc}
 800d998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d99a:	b112      	cbz	r2, 800d9a2 <_raise_r+0x1e>
 800d99c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9a0:	b94b      	cbnz	r3, 800d9b6 <_raise_r+0x32>
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f000 f830 	bl	800da08 <_getpid_r>
 800d9a8:	462a      	mov	r2, r5
 800d9aa:	4601      	mov	r1, r0
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9b2:	f000 b817 	b.w	800d9e4 <_kill_r>
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d00a      	beq.n	800d9d0 <_raise_r+0x4c>
 800d9ba:	1c59      	adds	r1, r3, #1
 800d9bc:	d103      	bne.n	800d9c6 <_raise_r+0x42>
 800d9be:	2316      	movs	r3, #22
 800d9c0:	6003      	str	r3, [r0, #0]
 800d9c2:	2001      	movs	r0, #1
 800d9c4:	e7e7      	b.n	800d996 <_raise_r+0x12>
 800d9c6:	2400      	movs	r4, #0
 800d9c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	4798      	blx	r3
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	e7e0      	b.n	800d996 <_raise_r+0x12>

0800d9d4 <raise>:
 800d9d4:	4b02      	ldr	r3, [pc, #8]	; (800d9e0 <raise+0xc>)
 800d9d6:	4601      	mov	r1, r0
 800d9d8:	6818      	ldr	r0, [r3, #0]
 800d9da:	f7ff bfd3 	b.w	800d984 <_raise_r>
 800d9de:	bf00      	nop
 800d9e0:	20000028 	.word	0x20000028

0800d9e4 <_kill_r>:
 800d9e4:	b538      	push	{r3, r4, r5, lr}
 800d9e6:	4d07      	ldr	r5, [pc, #28]	; (800da04 <_kill_r+0x20>)
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	4608      	mov	r0, r1
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	602b      	str	r3, [r5, #0]
 800d9f2:	f7f3 ff9d 	bl	8001930 <_kill>
 800d9f6:	1c43      	adds	r3, r0, #1
 800d9f8:	d102      	bne.n	800da00 <_kill_r+0x1c>
 800d9fa:	682b      	ldr	r3, [r5, #0]
 800d9fc:	b103      	cbz	r3, 800da00 <_kill_r+0x1c>
 800d9fe:	6023      	str	r3, [r4, #0]
 800da00:	bd38      	pop	{r3, r4, r5, pc}
 800da02:	bf00      	nop
 800da04:	20009524 	.word	0x20009524

0800da08 <_getpid_r>:
 800da08:	f7f3 bf8a 	b.w	8001920 <_getpid>

0800da0c <__sread>:
 800da0c:	b510      	push	{r4, lr}
 800da0e:	460c      	mov	r4, r1
 800da10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da14:	f000 f894 	bl	800db40 <_read_r>
 800da18:	2800      	cmp	r0, #0
 800da1a:	bfab      	itete	ge
 800da1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da1e:	89a3      	ldrhlt	r3, [r4, #12]
 800da20:	181b      	addge	r3, r3, r0
 800da22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da26:	bfac      	ite	ge
 800da28:	6563      	strge	r3, [r4, #84]	; 0x54
 800da2a:	81a3      	strhlt	r3, [r4, #12]
 800da2c:	bd10      	pop	{r4, pc}

0800da2e <__swrite>:
 800da2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da32:	461f      	mov	r7, r3
 800da34:	898b      	ldrh	r3, [r1, #12]
 800da36:	05db      	lsls	r3, r3, #23
 800da38:	4605      	mov	r5, r0
 800da3a:	460c      	mov	r4, r1
 800da3c:	4616      	mov	r6, r2
 800da3e:	d505      	bpl.n	800da4c <__swrite+0x1e>
 800da40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da44:	2302      	movs	r3, #2
 800da46:	2200      	movs	r2, #0
 800da48:	f000 f868 	bl	800db1c <_lseek_r>
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	4632      	mov	r2, r6
 800da5a:	463b      	mov	r3, r7
 800da5c:	4628      	mov	r0, r5
 800da5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da62:	f000 b817 	b.w	800da94 <_write_r>

0800da66 <__sseek>:
 800da66:	b510      	push	{r4, lr}
 800da68:	460c      	mov	r4, r1
 800da6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da6e:	f000 f855 	bl	800db1c <_lseek_r>
 800da72:	1c43      	adds	r3, r0, #1
 800da74:	89a3      	ldrh	r3, [r4, #12]
 800da76:	bf15      	itete	ne
 800da78:	6560      	strne	r0, [r4, #84]	; 0x54
 800da7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da82:	81a3      	strheq	r3, [r4, #12]
 800da84:	bf18      	it	ne
 800da86:	81a3      	strhne	r3, [r4, #12]
 800da88:	bd10      	pop	{r4, pc}

0800da8a <__sclose>:
 800da8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da8e:	f000 b813 	b.w	800dab8 <_close_r>
	...

0800da94 <_write_r>:
 800da94:	b538      	push	{r3, r4, r5, lr}
 800da96:	4d07      	ldr	r5, [pc, #28]	; (800dab4 <_write_r+0x20>)
 800da98:	4604      	mov	r4, r0
 800da9a:	4608      	mov	r0, r1
 800da9c:	4611      	mov	r1, r2
 800da9e:	2200      	movs	r2, #0
 800daa0:	602a      	str	r2, [r5, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	f7f3 ff7b 	bl	800199e <_write>
 800daa8:	1c43      	adds	r3, r0, #1
 800daaa:	d102      	bne.n	800dab2 <_write_r+0x1e>
 800daac:	682b      	ldr	r3, [r5, #0]
 800daae:	b103      	cbz	r3, 800dab2 <_write_r+0x1e>
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	bd38      	pop	{r3, r4, r5, pc}
 800dab4:	20009524 	.word	0x20009524

0800dab8 <_close_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	4d06      	ldr	r5, [pc, #24]	; (800dad4 <_close_r+0x1c>)
 800dabc:	2300      	movs	r3, #0
 800dabe:	4604      	mov	r4, r0
 800dac0:	4608      	mov	r0, r1
 800dac2:	602b      	str	r3, [r5, #0]
 800dac4:	f7f3 ff87 	bl	80019d6 <_close>
 800dac8:	1c43      	adds	r3, r0, #1
 800daca:	d102      	bne.n	800dad2 <_close_r+0x1a>
 800dacc:	682b      	ldr	r3, [r5, #0]
 800dace:	b103      	cbz	r3, 800dad2 <_close_r+0x1a>
 800dad0:	6023      	str	r3, [r4, #0]
 800dad2:	bd38      	pop	{r3, r4, r5, pc}
 800dad4:	20009524 	.word	0x20009524

0800dad8 <_fstat_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4d07      	ldr	r5, [pc, #28]	; (800daf8 <_fstat_r+0x20>)
 800dadc:	2300      	movs	r3, #0
 800dade:	4604      	mov	r4, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	4611      	mov	r1, r2
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	f7f3 ff82 	bl	80019ee <_fstat>
 800daea:	1c43      	adds	r3, r0, #1
 800daec:	d102      	bne.n	800daf4 <_fstat_r+0x1c>
 800daee:	682b      	ldr	r3, [r5, #0]
 800daf0:	b103      	cbz	r3, 800daf4 <_fstat_r+0x1c>
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	bd38      	pop	{r3, r4, r5, pc}
 800daf6:	bf00      	nop
 800daf8:	20009524 	.word	0x20009524

0800dafc <_isatty_r>:
 800dafc:	b538      	push	{r3, r4, r5, lr}
 800dafe:	4d06      	ldr	r5, [pc, #24]	; (800db18 <_isatty_r+0x1c>)
 800db00:	2300      	movs	r3, #0
 800db02:	4604      	mov	r4, r0
 800db04:	4608      	mov	r0, r1
 800db06:	602b      	str	r3, [r5, #0]
 800db08:	f7f3 ff81 	bl	8001a0e <_isatty>
 800db0c:	1c43      	adds	r3, r0, #1
 800db0e:	d102      	bne.n	800db16 <_isatty_r+0x1a>
 800db10:	682b      	ldr	r3, [r5, #0]
 800db12:	b103      	cbz	r3, 800db16 <_isatty_r+0x1a>
 800db14:	6023      	str	r3, [r4, #0]
 800db16:	bd38      	pop	{r3, r4, r5, pc}
 800db18:	20009524 	.word	0x20009524

0800db1c <_lseek_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4d07      	ldr	r5, [pc, #28]	; (800db3c <_lseek_r+0x20>)
 800db20:	4604      	mov	r4, r0
 800db22:	4608      	mov	r0, r1
 800db24:	4611      	mov	r1, r2
 800db26:	2200      	movs	r2, #0
 800db28:	602a      	str	r2, [r5, #0]
 800db2a:	461a      	mov	r2, r3
 800db2c:	f7f3 ff7a 	bl	8001a24 <_lseek>
 800db30:	1c43      	adds	r3, r0, #1
 800db32:	d102      	bne.n	800db3a <_lseek_r+0x1e>
 800db34:	682b      	ldr	r3, [r5, #0]
 800db36:	b103      	cbz	r3, 800db3a <_lseek_r+0x1e>
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	bd38      	pop	{r3, r4, r5, pc}
 800db3c:	20009524 	.word	0x20009524

0800db40 <_read_r>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	4d07      	ldr	r5, [pc, #28]	; (800db60 <_read_r+0x20>)
 800db44:	4604      	mov	r4, r0
 800db46:	4608      	mov	r0, r1
 800db48:	4611      	mov	r1, r2
 800db4a:	2200      	movs	r2, #0
 800db4c:	602a      	str	r2, [r5, #0]
 800db4e:	461a      	mov	r2, r3
 800db50:	f7f3 ff08 	bl	8001964 <_read>
 800db54:	1c43      	adds	r3, r0, #1
 800db56:	d102      	bne.n	800db5e <_read_r+0x1e>
 800db58:	682b      	ldr	r3, [r5, #0]
 800db5a:	b103      	cbz	r3, 800db5e <_read_r+0x1e>
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	20009524 	.word	0x20009524

0800db64 <round>:
 800db64:	ec51 0b10 	vmov	r0, r1, d0
 800db68:	b570      	push	{r4, r5, r6, lr}
 800db6a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800db6e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800db72:	2c13      	cmp	r4, #19
 800db74:	ee10 2a10 	vmov	r2, s0
 800db78:	460b      	mov	r3, r1
 800db7a:	dc19      	bgt.n	800dbb0 <round+0x4c>
 800db7c:	2c00      	cmp	r4, #0
 800db7e:	da09      	bge.n	800db94 <round+0x30>
 800db80:	3401      	adds	r4, #1
 800db82:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800db86:	d103      	bne.n	800db90 <round+0x2c>
 800db88:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800db8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800db90:	2200      	movs	r2, #0
 800db92:	e028      	b.n	800dbe6 <round+0x82>
 800db94:	4d15      	ldr	r5, [pc, #84]	; (800dbec <round+0x88>)
 800db96:	4125      	asrs	r5, r4
 800db98:	ea01 0605 	and.w	r6, r1, r5
 800db9c:	4332      	orrs	r2, r6
 800db9e:	d00e      	beq.n	800dbbe <round+0x5a>
 800dba0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dba4:	fa42 f404 	asr.w	r4, r2, r4
 800dba8:	4423      	add	r3, r4
 800dbaa:	ea23 0305 	bic.w	r3, r3, r5
 800dbae:	e7ef      	b.n	800db90 <round+0x2c>
 800dbb0:	2c33      	cmp	r4, #51	; 0x33
 800dbb2:	dd07      	ble.n	800dbc4 <round+0x60>
 800dbb4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dbb8:	d101      	bne.n	800dbbe <round+0x5a>
 800dbba:	f7f2 fb6f 	bl	800029c <__adddf3>
 800dbbe:	ec41 0b10 	vmov	d0, r0, r1
 800dbc2:	bd70      	pop	{r4, r5, r6, pc}
 800dbc4:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800dbc8:	f04f 35ff 	mov.w	r5, #4294967295
 800dbcc:	40f5      	lsrs	r5, r6
 800dbce:	4228      	tst	r0, r5
 800dbd0:	d0f5      	beq.n	800dbbe <round+0x5a>
 800dbd2:	2101      	movs	r1, #1
 800dbd4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800dbd8:	fa01 f404 	lsl.w	r4, r1, r4
 800dbdc:	1912      	adds	r2, r2, r4
 800dbde:	bf28      	it	cs
 800dbe0:	185b      	addcs	r3, r3, r1
 800dbe2:	ea22 0205 	bic.w	r2, r2, r5
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	4610      	mov	r0, r2
 800dbea:	e7e8      	b.n	800dbbe <round+0x5a>
 800dbec:	000fffff 	.word	0x000fffff

0800dbf0 <sqrtf>:
 800dbf0:	b508      	push	{r3, lr}
 800dbf2:	ed2d 8b02 	vpush	{d8}
 800dbf6:	eeb0 8a40 	vmov.f32	s16, s0
 800dbfa:	f000 f817 	bl	800dc2c <__ieee754_sqrtf>
 800dbfe:	eeb4 8a48 	vcmp.f32	s16, s16
 800dc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc06:	d60c      	bvs.n	800dc22 <sqrtf+0x32>
 800dc08:	eddf 8a07 	vldr	s17, [pc, #28]	; 800dc28 <sqrtf+0x38>
 800dc0c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc14:	d505      	bpl.n	800dc22 <sqrtf+0x32>
 800dc16:	f7fd f847 	bl	800aca8 <__errno>
 800dc1a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dc1e:	2321      	movs	r3, #33	; 0x21
 800dc20:	6003      	str	r3, [r0, #0]
 800dc22:	ecbd 8b02 	vpop	{d8}
 800dc26:	bd08      	pop	{r3, pc}
 800dc28:	00000000 	.word	0x00000000

0800dc2c <__ieee754_sqrtf>:
 800dc2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dc30:	4770      	bx	lr
	...

0800dc34 <_init>:
 800dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc36:	bf00      	nop
 800dc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3a:	bc08      	pop	{r3}
 800dc3c:	469e      	mov	lr, r3
 800dc3e:	4770      	bx	lr

0800dc40 <_fini>:
 800dc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc42:	bf00      	nop
 800dc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc46:	bc08      	pop	{r3}
 800dc48:	469e      	mov	lr, r3
 800dc4a:	4770      	bx	lr
