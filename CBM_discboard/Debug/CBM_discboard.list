
CBM_discboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2b4  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  0800d4f0  0800d4f0  0001d4f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dd74  0800dd74  0001dd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dd7c  0800dd7c  0001dd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dd80  0800dd80  0001dd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  20000000  0800dd84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000165  200001f4  0800df78  000201f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000607  20000359  0800df78  00020359  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ee48  00000000  00000000  0002022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055ca  00000000  00000000  0004f072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001730  00000000  00000000  00054640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001558  00000000  00000000  00055d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036b23  00000000  00000000  000572c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e892  00000000  00000000  0008ddeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149456  00000000  00000000  000ac67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f5ad3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000705c  00000000  00000000  001f5b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001f4 	.word	0x200001f4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800d4d4 	.word	0x0800d4d4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f8 	.word	0x200001f8
 8000274:	0800d4d4 	.word	0x0800d4d4

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_uldivmod>:
 8000bf0:	b953      	cbnz	r3, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf2:	b94a      	cbnz	r2, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	2800      	cmpeq	r0, #0
 8000bfa:	bf1c      	itt	ne
 8000bfc:	f04f 31ff 	movne.w	r1, #4294967295
 8000c00:	f04f 30ff 	movne.w	r0, #4294967295
 8000c04:	f000 b980 	b.w	8000f08 <__aeabi_idiv0>
 8000c08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c10:	f000 f806 	bl	8000c20 <__udivmoddi4>
 8000c14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1c:	b004      	add	sp, #16
 8000c1e:	4770      	bx	lr

08000c20 <__udivmoddi4>:
 8000c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c26:	4604      	mov	r4, r0
 8000c28:	4688      	mov	r8, r1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 8084 	bne.w	8000d38 <__udivmoddi4+0x118>
 8000c30:	428a      	cmp	r2, r1
 8000c32:	4617      	mov	r7, r2
 8000c34:	d943      	bls.n	8000cbe <__udivmoddi4+0x9e>
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	b142      	cbz	r2, 8000c4e <__udivmoddi4+0x2e>
 8000c3c:	f1c2 0020 	rsb	r0, r2, #32
 8000c40:	4091      	lsls	r1, r2
 8000c42:	4097      	lsls	r7, r2
 8000c44:	fa24 f000 	lsr.w	r0, r4, r0
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	ea40 0801 	orr.w	r8, r0, r1
 8000c4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c52:	0c23      	lsrs	r3, r4, #16
 8000c54:	fa1f fe87 	uxth.w	lr, r7
 8000c58:	fbb8 f6fc 	udiv	r6, r8, ip
 8000c5c:	fb0c 8116 	mls	r1, ip, r6, r8
 8000c60:	fb06 f00e 	mul.w	r0, r6, lr
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	4298      	cmp	r0, r3
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x5c>
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	f106 31ff 	add.w	r1, r6, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x5a>
 8000c74:	4298      	cmp	r0, r3
 8000c76:	f200 8131 	bhi.w	8000edc <__udivmoddi4+0x2bc>
 8000c7a:	460e      	mov	r6, r1
 8000c7c:	1a19      	subs	r1, r3, r0
 8000c7e:	b2a3      	uxth	r3, r4
 8000c80:	fbb1 f0fc 	udiv	r0, r1, ip
 8000c84:	fb0c 1110 	mls	r1, ip, r0, r1
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	45a6      	cmp	lr, r4
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0x84>
 8000c94:	193c      	adds	r4, r7, r4
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x82>
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	f200 811a 	bhi.w	8000ed6 <__udivmoddi4+0x2b6>
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0x98>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xa2>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d152      	bne.n	8000d70 <__udivmoddi4+0x150>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	0c21      	lsrs	r1, r4, #16
 8000cd8:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cdc:	fb0e 301c 	mls	r0, lr, ip, r3
 8000ce0:	fb08 f90c 	mul.w	r9, r8, ip
 8000ce4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ce8:	4589      	cmp	r9, r1
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000cf2:	bf2c      	ite	cs
 8000cf4:	2001      	movcs	r0, #1
 8000cf6:	2000      	movcc	r0, #0
 8000cf8:	4589      	cmp	r9, r1
 8000cfa:	d902      	bls.n	8000d02 <__udivmoddi4+0xe2>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	f000 80f0 	beq.w	8000ee2 <__udivmoddi4+0x2c2>
 8000d02:	469c      	mov	ip, r3
 8000d04:	eba1 0109 	sub.w	r1, r1, r9
 8000d08:	b2a3      	uxth	r3, r4
 8000d0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d12:	fb08 f800 	mul.w	r8, r8, r0
 8000d16:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1a:	45a0      	cmp	r8, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x10e>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x10c>
 8000d26:	45a0      	cmp	r8, r4
 8000d28:	f200 80d2 	bhi.w	8000ed0 <__udivmoddi4+0x2b0>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	eba4 0408 	sub.w	r4, r4, r8
 8000d32:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d36:	e7ba      	b.n	8000cae <__udivmoddi4+0x8e>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d909      	bls.n	8000d50 <__udivmoddi4+0x130>
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	f000 80be 	beq.w	8000ebe <__udivmoddi4+0x29e>
 8000d42:	2600      	movs	r6, #0
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	4630      	mov	r0, r6
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d50:	fab3 f683 	clz	r6, r3
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0x1d4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	f0c0 80b3 	bcc.w	8000ec4 <__udivmoddi4+0x2a4>
 8000d5e:	4282      	cmp	r2, r0
 8000d60:	f240 80b0 	bls.w	8000ec4 <__udivmoddi4+0x2a4>
 8000d64:	4630      	mov	r0, r6
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0a6      	beq.n	8000cb8 <__udivmoddi4+0x98>
 8000d6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d6e:	e7a3      	b.n	8000cb8 <__udivmoddi4+0x98>
 8000d70:	4097      	lsls	r7, r2
 8000d72:	f1c2 0320 	rsb	r3, r2, #32
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	fa1f f887 	uxth.w	r8, r7
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d90:	0c1e      	lsrs	r6, r3, #16
 8000d92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d96:	fb00 fc08 	mul.w	ip, r0, r8
 8000d9a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000d9e:	458c      	cmp	ip, r1
 8000da0:	d90e      	bls.n	8000dc0 <__udivmoddi4+0x1a0>
 8000da2:	1879      	adds	r1, r7, r1
 8000da4:	f100 36ff 	add.w	r6, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	f04f 0901 	movcs.w	r9, #1
 8000dae:	f04f 0900 	movcc.w	r9, #0
 8000db2:	458c      	cmp	ip, r1
 8000db4:	d903      	bls.n	8000dbe <__udivmoddi4+0x19e>
 8000db6:	f1b9 0f00 	cmp.w	r9, #0
 8000dba:	f000 8096 	beq.w	8000eea <__udivmoddi4+0x2ca>
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	eba1 010c 	sub.w	r1, r1, ip
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dca:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dce:	fb06 fc08 	mul.w	ip, r6, r8
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	458c      	cmp	ip, r1
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1ca>
 8000dda:	1879      	adds	r1, r7, r1
 8000ddc:	f106 33ff 	add.w	r3, r6, #4294967295
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x1c8>
 8000de2:	458c      	cmp	ip, r1
 8000de4:	f200 8088 	bhi.w	8000ef8 <__udivmoddi4+0x2d8>
 8000de8:	461e      	mov	r6, r3
 8000dea:	eba1 030c 	sub.w	r3, r1, ip
 8000dee:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000df2:	e770      	b.n	8000cd6 <__udivmoddi4+0xb6>
 8000df4:	f1c6 0720 	rsb	r7, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa02 fc06 	lsl.w	ip, r2, r6
 8000e00:	fa01 fe06 	lsl.w	lr, r1, r6
 8000e04:	40fa      	lsrs	r2, r7
 8000e06:	fa20 f807 	lsr.w	r8, r0, r7
 8000e0a:	40f9      	lsrs	r1, r7
 8000e0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000e10:	4322      	orrs	r2, r4
 8000e12:	ea48 040e 	orr.w	r4, r8, lr
 8000e16:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa1f f982 	uxth.w	r9, r2
 8000e22:	fbb1 faf8 	udiv	sl, r1, r8
 8000e26:	fb08 111a 	mls	r1, r8, sl, r1
 8000e2a:	fb0a f009 	mul.w	r0, sl, r9
 8000e2e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000e32:	4570      	cmp	r0, lr
 8000e34:	d90e      	bls.n	8000e54 <__udivmoddi4+0x234>
 8000e36:	eb12 0e0e 	adds.w	lr, r2, lr
 8000e3a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e3e:	bf2c      	ite	cs
 8000e40:	f04f 0b01 	movcs.w	fp, #1
 8000e44:	f04f 0b00 	movcc.w	fp, #0
 8000e48:	4570      	cmp	r0, lr
 8000e4a:	d902      	bls.n	8000e52 <__udivmoddi4+0x232>
 8000e4c:	f1bb 0f00 	cmp.w	fp, #0
 8000e50:	d04e      	beq.n	8000ef0 <__udivmoddi4+0x2d0>
 8000e52:	468a      	mov	sl, r1
 8000e54:	ebae 0e00 	sub.w	lr, lr, r0
 8000e58:	b2a4      	uxth	r4, r4
 8000e5a:	fbbe f0f8 	udiv	r0, lr, r8
 8000e5e:	fb08 ee10 	mls	lr, r8, r0, lr
 8000e62:	fb00 f909 	mul.w	r9, r0, r9
 8000e66:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8000e6a:	45f1      	cmp	r9, lr
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x25e>
 8000e6e:	eb12 0e0e 	adds.w	lr, r2, lr
 8000e72:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e76:	d201      	bcs.n	8000e7c <__udivmoddi4+0x25c>
 8000e78:	45f1      	cmp	r9, lr
 8000e7a:	d840      	bhi.n	8000efe <__udivmoddi4+0x2de>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8000e82:	ebae 0e09 	sub.w	lr, lr, r9
 8000e86:	fba0 890c 	umull	r8, r9, r0, ip
 8000e8a:	45ce      	cmp	lr, r9
 8000e8c:	4641      	mov	r1, r8
 8000e8e:	464c      	mov	r4, r9
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0x278>
 8000e92:	d106      	bne.n	8000ea2 <__udivmoddi4+0x282>
 8000e94:	4543      	cmp	r3, r8
 8000e96:	d204      	bcs.n	8000ea2 <__udivmoddi4+0x282>
 8000e98:	3801      	subs	r0, #1
 8000e9a:	ebb8 010c 	subs.w	r1, r8, ip
 8000e9e:	eb69 0402 	sbc.w	r4, r9, r2
 8000ea2:	b37d      	cbz	r5, 8000f04 <__udivmoddi4+0x2e4>
 8000ea4:	1a5a      	subs	r2, r3, r1
 8000ea6:	eb6e 0e04 	sbc.w	lr, lr, r4
 8000eaa:	40f2      	lsrs	r2, r6
 8000eac:	fa0e f707 	lsl.w	r7, lr, r7
 8000eb0:	fa2e f306 	lsr.w	r3, lr, r6
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	4317      	orrs	r7, r2
 8000eb8:	e9c5 7300 	strd	r7, r3, [r5]
 8000ebc:	e6fc      	b.n	8000cb8 <__udivmoddi4+0x98>
 8000ebe:	462e      	mov	r6, r5
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	e6f9      	b.n	8000cb8 <__udivmoddi4+0x98>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	4688      	mov	r8, r1
 8000ece:	e74a      	b.n	8000d66 <__udivmoddi4+0x146>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	e72b      	b.n	8000d2e <__udivmoddi4+0x10e>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	e6e3      	b.n	8000ca4 <__udivmoddi4+0x84>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	e6cc      	b.n	8000c7c <__udivmoddi4+0x5c>
 8000ee2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	e70c      	b.n	8000d04 <__udivmoddi4+0xe4>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4439      	add	r1, r7
 8000eee:	e767      	b.n	8000dc0 <__udivmoddi4+0x1a0>
 8000ef0:	f1aa 0a02 	sub.w	sl, sl, #2
 8000ef4:	4496      	add	lr, r2
 8000ef6:	e7ad      	b.n	8000e54 <__udivmoddi4+0x234>
 8000ef8:	3e02      	subs	r6, #2
 8000efa:	4439      	add	r1, r7
 8000efc:	e775      	b.n	8000dea <__udivmoddi4+0x1ca>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4496      	add	lr, r2
 8000f02:	e7bc      	b.n	8000e7e <__udivmoddi4+0x25e>
 8000f04:	462e      	mov	r6, r5
 8000f06:	e6d7      	b.n	8000cb8 <__udivmoddi4+0x98>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f003 fa17 	bl	8004344 <HAL_Init>
  HAL_PWREx_EnableVddIO2();
 8000f16:	f003 fec5 	bl	8004ca4 <HAL_PWREx_EnableVddIO2>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f8e9 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f000 f9fd 	bl	800131c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f22:	f000 f939 	bl	8001198 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f26:	f000 f9ad 	bl	8001284 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_print_debug("****************PROGRAM STARTED******************");
 8000f2a:	4b61      	ldr	r3, [pc, #388]	; (80010b0 <main+0x1a4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4961      	ldr	r1, [pc, #388]	; (80010b4 <main+0x1a8>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f009 f9db 	bl	800a2ec <print_debug>
  main_print_debug("Peripherals initialized!");
 8000f36:	4b5e      	ldr	r3, [pc, #376]	; (80010b0 <main+0x1a4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	495f      	ldr	r1, [pc, #380]	; (80010b8 <main+0x1ac>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f009 f9d5 	bl	800a2ec <print_debug>
  SPSGRF_Init();
 8000f42:	f009 fa2d 	bl	800a3a0 <SPSGRF_Init>
  main_print_debug("SPSGRF initialized!");
 8000f46:	4b5a      	ldr	r3, [pc, #360]	; (80010b0 <main+0x1a4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	495c      	ldr	r1, [pc, #368]	; (80010bc <main+0x1b0>)
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f009 f9cd 	bl	800a2ec <print_debug>
  char test2[20];
  uint8_t rxdata[20];
  SpiritIrqs irqStatus;
  int i = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_print_debug("Main loop begin");
 8000f56:	4b56      	ldr	r3, [pc, #344]	; (80010b0 <main+0x1a4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4959      	ldr	r1, [pc, #356]	; (80010c0 <main+0x1b4>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f009 f9c5 	bl	800a2ec <print_debug>
  while (1)
  {
	  switch(state){
 8000f62:	4b58      	ldr	r3, [pc, #352]	; (80010c4 <main+0x1b8>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d8fb      	bhi.n	8000f62 <main+0x56>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <main+0x64>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000f81 	.word	0x08000f81
 8000f74:	08000fa5 	.word	0x08000fa5
 8000f78:	08000fbd 	.word	0x08000fbd
 8000f7c:	08001071 	.word	0x08001071
	  case SEND:
		  main_print_debug("Data send request");
 8000f80:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <main+0x1a4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4950      	ldr	r1, [pc, #320]	; (80010c8 <main+0x1bc>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f009 f9b0 	bl	800a2ec <print_debug>
		  comm_request(test2);
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	4618      	mov	r0, r3
 8000f92:	f009 f981 	bl	800a298 <comm_request>
		  HAL_Delay(20);
 8000f96:	2014      	movs	r0, #20
 8000f98:	f003 fa58 	bl	800444c <HAL_Delay>
		  state = IDLE;
 8000f9c:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <main+0x1b8>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	701a      	strb	r2, [r3, #0]
		  break;
 8000fa2:	e084      	b.n	80010ae <main+0x1a2>
	  case RECEIVE:
		  main_print_debug("Starting RX state");
 8000fa4:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <main+0x1a4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4948      	ldr	r1, [pc, #288]	; (80010cc <main+0x1c0>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f009 f99e 	bl	800a2ec <print_debug>
		  SPSGRF_StartRx();
 8000fb0:	f009 fb43 	bl	800a63a <SPSGRF_StartRx>
		  state = IDLE;
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <main+0x1b8>)
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	701a      	strb	r2, [r3, #0]
		  break;
 8000fba:	e078      	b.n	80010ae <main+0x1a2>
	  case INTERRUPT:
		  main_print_debug("Got interrupted");
 8000fbc:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <main+0x1a4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4943      	ldr	r1, [pc, #268]	; (80010d0 <main+0x1c4>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f009 f992 	bl	800a2ec <print_debug>
		  SpiritIrqGetStatus(&irqStatus);
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 f896 	bl	80020fc <SpiritIrqGetStatus>
		  SpiritIrqClearStatus();
 8000fd0:	f001 f8c6 	bl	8002160 <SpiritIrqClearStatus>
		  if(irqStatus.IRQ_RX_DATA_READY)
 8000fd4:	783b      	ldrb	r3, [r7, #0]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d019      	beq.n	8001014 <main+0x108>
		  {
			  main_print_debug("data received");
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <main+0x1a4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	493b      	ldr	r1, [pc, #236]	; (80010d4 <main+0x1c8>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f009 f980 	bl	800a2ec <print_debug>
			  SPSGRF_GetRxData(rxdata);
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f009 fb2c 	bl	800a64c <SPSGRF_GetRxData>
			  main_print_debug("data:");
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <main+0x1a4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4937      	ldr	r1, [pc, #220]	; (80010d8 <main+0x1cc>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f009 f976 	bl	800a2ec <print_debug>
			  main_print_debug((char *)rxdata);
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <main+0x1a4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	1d3a      	adds	r2, r7, #4
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f009 f96f 	bl	800a2ec <print_debug>
			  // do something...
			  state = IDLE;
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <main+0x1b8>)
 8001010:	2203      	movs	r2, #3
 8001012:	701a      	strb	r2, [r3, #0]
		  }
		  if(irqStatus.IRQ_RX_DATA_DISC)
 8001014:	783b      	ldrb	r3, [r7, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <main+0x11a>
		  {
			  // do something...
			  state = IDLE;
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <main+0x1b8>)
 8001022:	2203      	movs	r2, #3
 8001024:	701a      	strb	r2, [r3, #0]
		  }
		  if(irqStatus.IRQ_TX_DATA_SENT)
 8001026:	783b      	ldrb	r3, [r7, #0]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d009      	beq.n	8001046 <main+0x13a>
		  {
			  main_print_debug("Data send!");
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <main+0x1a4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4929      	ldr	r1, [pc, #164]	; (80010dc <main+0x1d0>)
 8001038:	4618      	mov	r0, r3
 800103a:	f009 f957 	bl	800a2ec <print_debug>
			  // do something...
			  state = IDLE;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <main+0x1b8>)
 8001040:	2203      	movs	r2, #3
 8001042:	701a      	strb	r2, [r3, #0]
			  break;
 8001044:	e033      	b.n	80010ae <main+0x1a2>
		  }
		  if(irqStatus.IRQ_RX_TIMEOUT)
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	f003 0320 	and.w	r3, r3, #32
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <main+0x14c>
		  {
			  // do something...
			  state = IDLE;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <main+0x1b8>)
 8001054:	2203      	movs	r2, #3
 8001056:	701a      	strb	r2, [r3, #0]
		  }
		  if(receive){
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <main+0x1d4>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <main+0x15c>
			  state = RECEIVE;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <main+0x1b8>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
		  }else{
			  state = IDLE;
		  }
		  break;
 8001066:	e022      	b.n	80010ae <main+0x1a2>
			  state = IDLE;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <main+0x1b8>)
 800106a:	2203      	movs	r2, #3
 800106c:	701a      	strb	r2, [r3, #0]
		  break;
 800106e:	e01e      	b.n	80010ae <main+0x1a2>
	  case IDLE:
		  if(HAL_GPIO_ReadPin(GPIOC, USER_Button_Pin)){
 8001070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001074:	481b      	ldr	r0, [pc, #108]	; (80010e4 <main+0x1d8>)
 8001076:	f003 fd27 	bl	8004ac8 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d012      	beq.n	80010a6 <main+0x19a>
			  main_print_debug("Button pressed");
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <main+0x1a4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4918      	ldr	r1, [pc, #96]	; (80010e8 <main+0x1dc>)
 8001086:	4618      	mov	r0, r3
 8001088:	f009 f930 	bl	800a2ec <print_debug>
			  state = SEND;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <main+0x1b8>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
			  sprintf(test2, "hallo! %d", i);
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001098:	4914      	ldr	r1, [pc, #80]	; (80010ec <main+0x1e0>)
 800109a:	4618      	mov	r0, r3
 800109c:	f009 ff86 	bl	800afac <siprintf>
			  i++;
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	3301      	adds	r3, #1
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		  HAL_Delay(100);
 80010a6:	2064      	movs	r0, #100	; 0x64
 80010a8:	f003 f9d0 	bl	800444c <HAL_Delay>
		  break;
 80010ac:	bf00      	nop
	  switch(state){
 80010ae:	e758      	b.n	8000f62 <main+0x56>
 80010b0:	20000000 	.word	0x20000000
 80010b4:	0800d4f8 	.word	0x0800d4f8
 80010b8:	0800d52c 	.word	0x0800d52c
 80010bc:	0800d548 	.word	0x0800d548
 80010c0:	0800d55c 	.word	0x0800d55c
 80010c4:	20000004 	.word	0x20000004
 80010c8:	0800d56c 	.word	0x0800d56c
 80010cc:	0800d580 	.word	0x0800d580
 80010d0:	0800d594 	.word	0x0800d594
 80010d4:	0800d5a4 	.word	0x0800d5a4
 80010d8:	0800d5b4 	.word	0x0800d5b4
 80010dc:	0800d5bc 	.word	0x0800d5bc
 80010e0:	20000005 	.word	0x20000005
 80010e4:	42020800 	.word	0x42020800
 80010e8:	0800d5c8 	.word	0x0800d5c8
 80010ec:	0800d5d8 	.word	0x0800d5d8

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09e      	sub	sp, #120	; 0x78
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2260      	movs	r2, #96	; 0x60
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fae0 	bl	800a6c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8001114:	2000      	movs	r0, #0
 8001116:	f003 fd43 	bl	8004ba0 <HAL_PWREx_ControlVoltageScaling>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001120:	f000 fbec 	bl	80018fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001124:	2310      	movs	r3, #16
 8001126:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800112c:	2310      	movs	r3, #16
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001134:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001136:	2300      	movs	r3, #0
 8001138:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fdd0 	bl	8004ce4 <HAL_RCC_OscConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800114a:	f000 fbd7 	bl	80018fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114e:	231f      	movs	r3, #31
 8001150:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fc2a 	bl	80059c4 <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001176:	f000 fbc1 	bl	80018fc <Error_Handler>
  }
  __HAL_RCC_PWR_CLK_DISABLE();
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SystemClock_Config+0xa4>)
 800117c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <SystemClock_Config+0xa4>)
 8001182:	f023 0304 	bic.w	r3, r3, #4
 8001186:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800118a:	bf00      	nop
 800118c:	3778      	adds	r7, #120	; 0x78
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	46020c00 	.word	0x46020c00

08001198 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <MX_SPI1_Init+0xe4>)
 80011aa:	4a35      	ldr	r2, [pc, #212]	; (8001280 <MX_SPI1_Init+0xe8>)
 80011ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ae:	4b33      	ldr	r3, [pc, #204]	; (800127c <MX_SPI1_Init+0xe4>)
 80011b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <MX_SPI1_Init+0xe4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <MX_SPI1_Init+0xe4>)
 80011be:	2207      	movs	r2, #7
 80011c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <MX_SPI1_Init+0xe4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c8:	4b2c      	ldr	r3, [pc, #176]	; (800127c <MX_SPI1_Init+0xe4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ce:	4b2b      	ldr	r3, [pc, #172]	; (800127c <MX_SPI1_Init+0xe4>)
 80011d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <MX_SPI1_Init+0xe4>)
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <MX_SPI1_Init+0xe4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <MX_SPI1_Init+0xe4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <MX_SPI1_Init+0xe4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_SPI1_Init+0xe4>)
 80011f2:	2207      	movs	r2, #7
 80011f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_SPI1_Init+0xe4>)
 80011f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_SPI1_Init+0xe4>)
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_SPI1_Init+0xe4>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_SPI1_Init+0xe4>)
 800120c:	2200      	movs	r2, #0
 800120e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_SPI1_Init+0xe4>)
 8001212:	2200      	movs	r2, #0
 8001214:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_SPI1_Init+0xe4>)
 8001218:	2200      	movs	r2, #0
 800121a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_SPI1_Init+0xe4>)
 800121e:	2200      	movs	r2, #0
 8001220:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_SPI1_Init+0xe4>)
 8001224:	2200      	movs	r2, #0
 8001226:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_SPI1_Init+0xe4>)
 800122a:	2200      	movs	r2, #0
 800122c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_SPI1_Init+0xe4>)
 8001230:	2200      	movs	r2, #0
 8001232:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_SPI1_Init+0xe4>)
 8001236:	2200      	movs	r2, #0
 8001238:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_SPI1_Init+0xe4>)
 800123c:	2200      	movs	r2, #0
 800123e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <MX_SPI1_Init+0xe4>)
 8001242:	f007 f99f 	bl	8008584 <HAL_SPI_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_SPI1_Init+0xb8>
  {
    Error_Handler();
 800124c:	f000 fb56 	bl	80018fc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001254:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001258:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_SPI1_Init+0xe4>)
 8001264:	f008 fab7 	bl	80097d6 <HAL_SPIEx_SetConfigAutonomousMode>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_SPI1_Init+0xda>
  {
    Error_Handler();
 800126e:	f000 fb45 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002b4 	.word	0x200002b4
 8001280:	40013000 	.word	0x40013000

08001284 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MX_USART1_UART_Init+0x90>)
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <MX_USART1_UART_Init+0x94>)
 800128c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_USART1_UART_Init+0x90>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_USART1_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_USART1_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_USART1_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_USART1_UART_Init+0x90>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_USART1_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_USART1_UART_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_USART1_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_USART1_UART_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_USART1_UART_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012cc:	4811      	ldr	r0, [pc, #68]	; (8001314 <MX_USART1_UART_Init+0x90>)
 80012ce:	f008 fac3 	bl	8009858 <HAL_UART_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012d8:	f000 fb10 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012dc:	2100      	movs	r1, #0
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <MX_USART1_UART_Init+0x90>)
 80012e0:	f008 ff10 	bl	800a104 <HAL_UARTEx_SetTxFifoThreshold>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012ea:	f000 fb07 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <MX_USART1_UART_Init+0x90>)
 80012f2:	f008 ff45 	bl	800a180 <HAL_UARTEx_SetRxFifoThreshold>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012fc:	f000 fafe 	bl	80018fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_USART1_UART_Init+0x90>)
 8001302:	f008 fec6 	bl	800a092 <HAL_UARTEx_DisableFifoMode>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800130c:	f000 faf6 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000224 	.word	0x20000224
 8001318:	40013800 	.word	0x40013800

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001332:	4bbf      	ldr	r3, [pc, #764]	; (8001630 <MX_GPIO_Init+0x314>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001338:	4abd      	ldr	r2, [pc, #756]	; (8001630 <MX_GPIO_Init+0x314>)
 800133a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001342:	4bbb      	ldr	r3, [pc, #748]	; (8001630 <MX_GPIO_Init+0x314>)
 8001344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134c:	623b      	str	r3, [r7, #32]
 800134e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	4bb7      	ldr	r3, [pc, #732]	; (8001630 <MX_GPIO_Init+0x314>)
 8001352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001356:	4ab6      	ldr	r2, [pc, #728]	; (8001630 <MX_GPIO_Init+0x314>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001360:	4bb3      	ldr	r3, [pc, #716]	; (8001630 <MX_GPIO_Init+0x314>)
 8001362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4bb0      	ldr	r3, [pc, #704]	; (8001630 <MX_GPIO_Init+0x314>)
 8001370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001374:	4aae      	ldr	r2, [pc, #696]	; (8001630 <MX_GPIO_Init+0x314>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800137e:	4bac      	ldr	r3, [pc, #688]	; (8001630 <MX_GPIO_Init+0x314>)
 8001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800138c:	4ba8      	ldr	r3, [pc, #672]	; (8001630 <MX_GPIO_Init+0x314>)
 800138e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001392:	4aa7      	ldr	r2, [pc, #668]	; (8001630 <MX_GPIO_Init+0x314>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001398:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800139c:	4ba4      	ldr	r3, [pc, #656]	; (8001630 <MX_GPIO_Init+0x314>)
 800139e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	4ba1      	ldr	r3, [pc, #644]	; (8001630 <MX_GPIO_Init+0x314>)
 80013ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b0:	4a9f      	ldr	r2, [pc, #636]	; (8001630 <MX_GPIO_Init+0x314>)
 80013b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013ba:	4b9d      	ldr	r3, [pc, #628]	; (8001630 <MX_GPIO_Init+0x314>)
 80013bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	4b99      	ldr	r3, [pc, #612]	; (8001630 <MX_GPIO_Init+0x314>)
 80013ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ce:	4a98      	ldr	r2, [pc, #608]	; (8001630 <MX_GPIO_Init+0x314>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013d8:	4b95      	ldr	r3, [pc, #596]	; (8001630 <MX_GPIO_Init+0x314>)
 80013da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b92      	ldr	r3, [pc, #584]	; (8001630 <MX_GPIO_Init+0x314>)
 80013e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ec:	4a90      	ldr	r2, [pc, #576]	; (8001630 <MX_GPIO_Init+0x314>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013f6:	4b8e      	ldr	r3, [pc, #568]	; (8001630 <MX_GPIO_Init+0x314>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001404:	4b8a      	ldr	r3, [pc, #552]	; (8001630 <MX_GPIO_Init+0x314>)
 8001406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800140a:	4a89      	ldr	r2, [pc, #548]	; (8001630 <MX_GPIO_Init+0x314>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001414:	4b86      	ldr	r3, [pc, #536]	; (8001630 <MX_GPIO_Init+0x314>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001422:	4b83      	ldr	r3, [pc, #524]	; (8001630 <MX_GPIO_Init+0x314>)
 8001424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001428:	4a81      	ldr	r2, [pc, #516]	; (8001630 <MX_GPIO_Init+0x314>)
 800142a:	f043 0320 	orr.w	r3, r3, #32
 800142e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001432:	4b7f      	ldr	r3, [pc, #508]	; (8001630 <MX_GPIO_Init+0x314>)
 8001434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2120      	movs	r1, #32
 8001444:	487b      	ldr	r0, [pc, #492]	; (8001634 <MX_GPIO_Init+0x318>)
 8001446:	f003 fb57 	bl	8004af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	21c2      	movs	r1, #194	; 0xc2
 800144e:	487a      	ldr	r0, [pc, #488]	; (8001638 <MX_GPIO_Init+0x31c>)
 8001450:	f003 fb52 	bl	8004af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145a:	4878      	ldr	r0, [pc, #480]	; (800163c <MX_GPIO_Init+0x320>)
 800145c:	f003 fb4c 	bl	8004af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	21c0      	movs	r1, #192	; 0xc0
 8001464:	4876      	ldr	r0, [pc, #472]	; (8001640 <MX_GPIO_Init+0x324>)
 8001466:	f003 fb47 	bl	8004af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001470:	4874      	ldr	r0, [pc, #464]	; (8001644 <MX_GPIO_Init+0x328>)
 8001472:	f003 fb41 	bl	8004af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2110      	movs	r1, #16
 800147a:	4870      	ldr	r0, [pc, #448]	; (800163c <MX_GPIO_Init+0x320>)
 800147c:	f003 fb3c 	bl	8004af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001486:	4870      	ldr	r0, [pc, #448]	; (8001648 <MX_GPIO_Init+0x32c>)
 8001488:	f003 fb36 	bl	8004af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 800148c:	f248 0324 	movw	r3, #32804	; 0x8024
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	4867      	ldr	r0, [pc, #412]	; (8001640 <MX_GPIO_Init+0x324>)
 80014a2:	f003 f939 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_UART4_RX_Pin WRLS_UART4_TX_Pin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 80014a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014b8:	2308      	movs	r3, #8
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c0:	4619      	mov	r1, r3
 80014c2:	4862      	ldr	r0, [pc, #392]	; (800164c <MX_GPIO_Init+0x330>)
 80014c4:	f003 f928 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 80014c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ce:	2303      	movs	r3, #3
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	4857      	ldr	r0, [pc, #348]	; (800163c <MX_GPIO_Init+0x320>)
 80014de:	f003 f91b 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_F_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 80014e2:	2320      	movs	r3, #32
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80014f2:	2305      	movs	r3, #5
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	4854      	ldr	r0, [pc, #336]	; (8001650 <MX_GPIO_Init+0x334>)
 80014fe:	f003 f90b 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO5_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8001502:	2301      	movs	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001512:	2303      	movs	r3, #3
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	4619      	mov	r1, r3
 800151c:	484c      	ldr	r0, [pc, #304]	; (8001650 <MX_GPIO_Init+0x334>)
 800151e:	f003 f8fb 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO7_Pin OCTOSPI_F_IO5_Pin OCTOSPI_F_IO6_Pin OCTOSPI_F_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8001522:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001534:	2305      	movs	r3, #5
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	483e      	ldr	r0, [pc, #248]	; (8001638 <MX_GPIO_Init+0x31c>)
 8001540:	f003 f8ea 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8001544:	2308      	movs	r3, #8
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4838      	ldr	r0, [pc, #224]	; (8001638 <MX_GPIO_Init+0x31c>)
 8001558:	f003 f8de 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 800155c:	2320      	movs	r3, #32
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	4830      	ldr	r0, [pc, #192]	; (8001634 <MX_GPIO_Init+0x318>)
 8001574:	f003 f8d0 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_SPI2_MOSI_Pin WRLS_SPI2_MISO_Pin WRLS_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8001578:	231a      	movs	r3, #26
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001588:	2305      	movs	r3, #5
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	4830      	ldr	r0, [pc, #192]	; (8001654 <MX_GPIO_Init+0x338>)
 8001594:	f003 f8c0 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8001598:	2308      	movs	r3, #8
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80015a8:	2303      	movs	r3, #3
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	4825      	ldr	r0, [pc, #148]	; (8001648 <MX_GPIO_Init+0x32c>)
 80015b4:	f003 f8b0 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80015b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015be:	2312      	movs	r3, #18
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ca:	2304      	movs	r3, #4
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	4817      	ldr	r0, [pc, #92]	; (8001634 <MX_GPIO_Init+0x318>)
 80015d6:	f003 f89f 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO7_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80015ea:	230a      	movs	r3, #10
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4817      	ldr	r0, [pc, #92]	; (8001654 <MX_GPIO_Init+0x338>)
 80015f6:	f003 f88f 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO0_Pin OCTOSPI_F_IO1_Pin OCTOSPI_F_IO2_Pin OCTOSPI_F_IO3_Pin
                           OCTOSPI_F_CLK_P_Pin OCTOSPI_F_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 80015fa:	f241 031f 	movw	r3, #4127	; 0x101f
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800160c:	2305      	movs	r3, #5
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001614:	4619      	mov	r1, r3
 8001616:	480b      	ldr	r0, [pc, #44]	; (8001644 <MX_GPIO_Init+0x328>)
 8001618:	f003 f87e 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 800161c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162e:	e013      	b.n	8001658 <MX_GPIO_Init+0x33c>
 8001630:	46020c00 	.word	0x46020c00
 8001634:	42020400 	.word	0x42020400
 8001638:	42021c00 	.word	0x42021c00
 800163c:	42020000 	.word	0x42020000
 8001640:	42021800 	.word	0x42021800
 8001644:	42021400 	.word	0x42021400
 8001648:	42021000 	.word	0x42021000
 800164c:	42020800 	.word	0x42020800
 8001650:	42022000 	.word	0x42022000
 8001654:	42020c00 	.word	0x42020c00
 8001658:	4619      	mov	r1, r3
 800165a:	489f      	ldr	r0, [pc, #636]	; (80018d8 <MX_GPIO_Init+0x5bc>)
 800165c:	f003 f85c 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001660:	2330      	movs	r3, #48	; 0x30
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001664:	2312      	movs	r3, #18
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001670:	2304      	movs	r3, #4
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	4898      	ldr	r0, [pc, #608]	; (80018dc <MX_GPIO_Init+0x5c0>)
 800167c:	f003 f84c 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8001680:	23c2      	movs	r3, #194	; 0xc2
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	4891      	ldr	r0, [pc, #580]	; (80018dc <MX_GPIO_Init+0x5c0>)
 8001698:	f003 f83e 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_IO0_Pin OCTOSPI_R_IO2_Pin OCTOSPI_R_IO1_Pin OCTOSPI_R_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 800169c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80016ae:	230a      	movs	r3, #10
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	4619      	mov	r1, r3
 80016b8:	4889      	ldr	r0, [pc, #548]	; (80018e0 <MX_GPIO_Init+0x5c4>)
 80016ba:	f003 f82d 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 80016be:	2304      	movs	r3, #4
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80016ce:	2303      	movs	r3, #3
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d6:	4619      	mov	r1, r3
 80016d8:	4880      	ldr	r0, [pc, #512]	; (80018dc <MX_GPIO_Init+0x5c0>)
 80016da:	f003 f81d 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_C_P_Pin USB_C_PA11_Pin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 80016de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80016f0:	230a      	movs	r3, #10
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	487a      	ldr	r0, [pc, #488]	; (80018e4 <MX_GPIO_Init+0x5c8>)
 80016fc:	f003 f80c 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPIRIT1_SDN_Pin PA4 */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin|GPIO_PIN_4;
 8001700:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4872      	ldr	r0, [pc, #456]	; (80018e4 <MX_GPIO_Init+0x5c8>)
 800171a:	f002 fffd 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|WRLS_WKUP_B_Pin;
 800171e:	23c0      	movs	r3, #192	; 0xc0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	486c      	ldr	r0, [pc, #432]	; (80018e8 <MX_GPIO_Init+0x5cc>)
 8001736:	f002 ffef 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 800173a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 800174c:	2306      	movs	r3, #6
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	4862      	ldr	r0, [pc, #392]	; (80018e0 <MX_GPIO_Init+0x5c4>)
 8001758:	f002 ffde 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_SDINx_Pin MIC_CCK0_Pin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 800175c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 800176e:	2303      	movs	r3, #3
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	485c      	ldr	r0, [pc, #368]	; (80018ec <MX_GPIO_Init+0x5d0>)
 800177a:	f002 ffcd 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin Mems_INT_IIS2MDCD9_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin|Mems_INT_IIS2MDCD9_Pin;
 800177e:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	4857      	ldr	r0, [pc, #348]	; (80018f0 <MX_GPIO_Init+0x5d4>)
 8001794:	f002 ffc0 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO6_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 8001798:	2308      	movs	r3, #8
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80017a8:	230a      	movs	r3, #10
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4849      	ldr	r0, [pc, #292]	; (80018d8 <MX_GPIO_Init+0x5bc>)
 80017b4:	f002 ffb0 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 80017b8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	4847      	ldr	r0, [pc, #284]	; (80018ec <MX_GPIO_Init+0x5d0>)
 80017ce:	f002 ffa3 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_CLK_P_Pin OCTOSPI_R_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80017d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80017e4:	230a      	movs	r3, #10
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4841      	ldr	r0, [pc, #260]	; (80018f4 <MX_GPIO_Init+0x5d8>)
 80017f0:	f002 ff92 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 80017f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	4835      	ldr	r0, [pc, #212]	; (80018e0 <MX_GPIO_Init+0x5c4>)
 800180a:	f002 ff85 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRIT_INTR_Pin */
  GPIO_InitStruct.Pin = SPIRIT_INTR_Pin;
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <MX_GPIO_Init+0x5dc>)
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPIRIT_INTR_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	4619      	mov	r1, r3
 8001820:	4832      	ldr	r0, [pc, #200]	; (80018ec <MX_GPIO_Init+0x5d0>)
 8001822:	f002 ff79 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8001826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001838:	2305      	movs	r3, #5
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	482c      	ldr	r0, [pc, #176]	; (80018f4 <MX_GPIO_Init+0x5d8>)
 8001844:	f002 ff68 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 8001848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184e:	2303      	movs	r3, #3
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	4825      	ldr	r0, [pc, #148]	; (80018f4 <MX_GPIO_Init+0x5d8>)
 800185e:	f002 ff5b 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8001862:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	4819      	ldr	r0, [pc, #100]	; (80018e0 <MX_GPIO_Init+0x5c4>)
 800187c:	f002 ff4c 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001880:	2302      	movs	r3, #2
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001890:	2306      	movs	r3, #6
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	4816      	ldr	r0, [pc, #88]	; (80018f4 <MX_GPIO_Init+0x5d8>)
 800189c:	f002 ff3c 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80018a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_GPIO_Init+0x5d0>)
 80018ba:	f002 ff2d 	bl	8004718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI7_IRQn, 1, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2101      	movs	r1, #1
 80018c2:	2012      	movs	r0, #18
 80018c4:	f002 fee5 	bl	8004692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80018c8:	2012      	movs	r0, #18
 80018ca:	f002 fefc 	bl	80046c6 <HAL_NVIC_EnableIRQ>

}
 80018ce:	bf00      	nop
 80018d0:	3738      	adds	r7, #56	; 0x38
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	42020800 	.word	0x42020800
 80018dc:	42021c00 	.word	0x42021c00
 80018e0:	42021400 	.word	0x42021400
 80018e4:	42020000 	.word	0x42020000
 80018e8:	42021800 	.word	0x42021800
 80018ec:	42021000 	.word	0x42021000
 80018f0:	42020c00 	.word	0x42020c00
 80018f4:	42020400 	.word	0x42020400
 80018f8:	10210000 	.word	0x10210000

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_MspInit+0x30>)
 8001910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001914:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x30>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x30>)
 8001920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800192c:	f003 f9ca 	bl	8004cc4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	46020c00 	.word	0x46020c00

0800193c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b0ba      	sub	sp, #232	; 0xe8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	22c0      	movs	r2, #192	; 0xc0
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f008 feb1 	bl	800a6c4 <memset>
  if(hspi->Instance==SPI1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <HAL_SPI_MspInit+0xc4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d144      	bne.n	80019f6 <HAL_SPI_MspInit+0xba>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800196c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001970:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001972:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4618      	mov	r0, r3
 8001980:	f004 fb66 	bl	8006050 <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
 800198a:	f7ff ffb7 	bl	80018fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_SPI_MspInit+0xc8>)
 8001990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001994:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <HAL_SPI_MspInit+0xc8>)
 8001996:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800199a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_SPI_MspInit+0xc8>)
 80019a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80019a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_SPI_MspInit+0xc8>)
 80019ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_SPI_MspInit+0xc8>)
 80019b4:	f043 0310 	orr.w	r3, r3, #16
 80019b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_SPI_MspInit+0xc8>)
 80019be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE14     ------> SPI1_MISO
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 80019ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80019ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019e4:	2305      	movs	r3, #5
 80019e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <HAL_SPI_MspInit+0xcc>)
 80019f2:	f002 fe91 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	37e8      	adds	r7, #232	; 0xe8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40013000 	.word	0x40013000
 8001a04:	46020c00 	.word	0x46020c00
 8001a08:	42021000 	.word	0x42021000

08001a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b0ba      	sub	sp, #232	; 0xe8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	22c0      	movs	r2, #192	; 0xc0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f008 fe49 	bl	800a6c4 <memset>
  if(huart->Instance==USART1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a24      	ldr	r2, [pc, #144]	; (8001ac8 <HAL_UART_MspInit+0xbc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d141      	bne.n	8001ac0 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a40:	2300      	movs	r3, #0
 8001a42:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 fb01 	bl	8006050 <HAL_RCCEx_PeriphCLKConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a54:	f7ff ff52 	bl	80018fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a58:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <HAL_UART_MspInit+0xc0>)
 8001a5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <HAL_UART_MspInit+0xc0>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_UART_MspInit+0xc0>)
 8001a6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_UART_MspInit+0xc0>)
 8001a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a7c:	4a13      	ldr	r2, [pc, #76]	; (8001acc <HAL_UART_MspInit+0xc0>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_UART_MspInit+0xc0>)
 8001a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001a94:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <HAL_UART_MspInit+0xc4>)
 8001abc:	f002 fe2c 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	37e8      	adds	r7, #232	; 0xe8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	46020c00 	.word	0x46020c00
 8001ad0:	42020000 	.word	0x42020000

08001ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <NMI_Handler+0x4>

08001ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <BusFault_Handler+0x4>

08001aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <UsageFault_Handler+0x4>

08001af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b20:	f002 fc74 	bl	800440c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <EXTI7_IRQHandler>:
/**
  * @brief This function handles EXTI Line7 interrupt.
  */

void EXTI7_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */
  state = INTERRUPT;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <EXTI7_IRQHandler+0x14>)
 8001b2e:	2202      	movs	r2, #2
 8001b30:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OCTOSPI_R_IO7_Pin);
 8001b32:	2080      	movs	r0, #128	; 0x80
 8001b34:	f002 fff8 	bl	8004b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000004 	.word	0x20000004

08001b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	return 1;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_kill>:

int _kill(int pid, int sig)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b5a:	f008 fd89 	bl	800a670 <__errno>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2216      	movs	r2, #22
 8001b62:	601a      	str	r2, [r3, #0]
	return -1;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_exit>:

void _exit (int status)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ffe7 	bl	8001b50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b82:	e7fe      	b.n	8001b82 <_exit+0x12>

08001b84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e00a      	b.n	8001bac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b96:	e000      	b.n	8001b9a <_read+0x16>
 8001b98:	bf00      	nop
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	b2ca      	uxtb	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf0      	blt.n	8001b96 <_read+0x12>
	}

return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e009      	b.n	8001be4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	60ba      	str	r2, [r7, #8]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	e000      	b.n	8001bde <_write+0x20>
 8001bdc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dbf1      	blt.n	8001bd0 <_write+0x12>
	}
	return len;
 8001bec:	687b      	ldr	r3, [r7, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_close>:

int _close(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
	return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_isatty>:

int _isatty(int file)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	return 1;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c68:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <_sbrk+0x5c>)
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <_sbrk+0x60>)
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <_sbrk+0x64>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <_sbrk+0x68>)
 8001c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d207      	bcs.n	8001ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c90:	f008 fcee 	bl	800a670 <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	220c      	movs	r2, #12
 8001c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	e009      	b.n	8001cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <_sbrk+0x64>)
 8001cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200c0000 	.word	0x200c0000
 8001cc0:	00000400 	.word	0x00000400
 8001cc4:	20000210 	.word	0x20000210
 8001cc8:	20000360 	.word	0x20000360

08001ccc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <SystemInit+0x68>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <SystemInit+0x68>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <SystemInit+0x6c>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <SystemInit+0x6c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <SystemInit+0x6c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <SystemInit+0x6c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <SystemInit+0x6c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <SystemInit+0x6c>)
 8001cfe:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d02:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d06:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <SystemInit+0x6c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <SystemInit+0x6c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <SystemInit+0x6c>)
 8001d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <SystemInit+0x6c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SystemInit+0x68>)
 8001d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d26:	609a      	str	r2, [r3, #8]
  #endif
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00
 8001d38:	46020c00 	.word	0x46020c00

08001d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d42:	e003      	b.n	8001d4c <LoopCopyDataInit>

08001d44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d4a:	3104      	adds	r1, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d4c:	480b      	ldr	r0, [pc, #44]	; (8001d7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d54:	d3f6      	bcc.n	8001d44 <CopyDataInit>
	ldr	r2, =_sbss
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d58:	e002      	b.n	8001d60 <LoopFillZerobss>

08001d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d5c:	f842 3b04 	str.w	r3, [r2], #4

08001d60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <LoopForever+0x16>)
	cmp	r2, r3
 8001d62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d64:	d3f9      	bcc.n	8001d5a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d66:	f7ff ffb1 	bl	8001ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f008 fc87 	bl	800a67c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6e:	f7ff f8cd 	bl	8000f0c <main>

08001d72 <LoopForever>:

LoopForever:
    b LoopForever
 8001d72:	e7fe      	b.n	8001d72 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d74:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001d78:	0800dd84 	.word	0x0800dd84
	ldr	r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d80:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8001d84:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8001d88:	20000359 	.word	0x20000359

08001d8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_IRQHandler>
	...

08001d90 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001d9a:	f107 030f 	add.w	r3, r7, #15
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2101      	movs	r1, #1
 8001da2:	2050      	movs	r0, #80	; 0x50
 8001da4:	f002 f98e 	bl	80040c4 <RadioSpiReadRegisters>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <SpiritCalibrationVco+0x6c>)
 8001dac:	b212      	sxth	r2, r2
 8001dae:	4611      	mov	r1, r2
 8001db0:	7019      	strb	r1, [r3, #0]
 8001db2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001db6:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d105      	bne.n	8001dca <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e004      	b.n	8001dd4 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	f023 0302 	bic.w	r3, r3, #2
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001dd4:	f107 030f 	add.w	r3, r7, #15
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2101      	movs	r1, #1
 8001ddc:	2050      	movs	r0, #80	; 0x50
 8001dde:	f002 f923 	bl	8004028 <RadioSpiWriteRegisters>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SpiritCalibrationVco+0x6c>)
 8001de6:	b212      	sxth	r2, r2
 8001de8:	4611      	mov	r1, r2
 8001dea:	7019      	strb	r1, [r3, #0]
 8001dec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001df0:	705a      	strb	r2, [r3, #1]

}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000344 	.word	0x20000344

08001e00 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	20e5      	movs	r0, #229	; 0xe5
 8001e0e:	f002 f959 	bl	80040c4 <RadioSpiReadRegisters>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <SpiritCalibrationGetVcoCalData+0x34>)
 8001e16:	b212      	sxth	r2, r2
 8001e18:	4611      	mov	r1, r2
 8001e1a:	7019      	strb	r1, [r3, #0]
 8001e1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e20:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e28:	b2db      	uxtb	r3, r3

}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000344 	.word	0x20000344

08001e38 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001e42:	f107 030f 	add.w	r3, r7, #15
 8001e46:	461a      	mov	r2, r3
 8001e48:	2101      	movs	r1, #1
 8001e4a:	206e      	movs	r0, #110	; 0x6e
 8001e4c:	f002 f93a 	bl	80040c4 <RadioSpiReadRegisters>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001e54:	b212      	sxth	r2, r2
 8001e56:	4611      	mov	r1, r2
 8001e58:	7019      	strb	r1, [r3, #0]
 8001e5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e5e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001e74:	f107 030f 	add.w	r3, r7, #15
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	206e      	movs	r0, #110	; 0x6e
 8001e7e:	f002 f8d3 	bl	8004028 <RadioSpiWriteRegisters>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001e86:	b212      	sxth	r2, r2
 8001e88:	4611      	mov	r1, r2
 8001e8a:	7019      	strb	r1, [r3, #0]
 8001e8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e90:	705a      	strb	r2, [r3, #1]

}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000344 	.word	0x20000344

08001ea0 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001eaa:	f107 030f 	add.w	r3, r7, #15
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	206f      	movs	r0, #111	; 0x6f
 8001eb4:	f002 f906 	bl	80040c4 <RadioSpiReadRegisters>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001ebc:	b212      	sxth	r2, r2
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	7019      	strb	r1, [r3, #0]
 8001ec2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ec6:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001edc:	f107 030f 	add.w	r3, r7, #15
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	206f      	movs	r0, #111	; 0x6f
 8001ee6:	f002 f89f 	bl	8004028 <RadioSpiWriteRegisters>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001eee:	b212      	sxth	r2, r2
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	7019      	strb	r1, [r3, #0]
 8001ef4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ef8:	705a      	strb	r2, [r3, #1]

}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000344 	.word	0x20000344

08001f08 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001f12:	f107 030f 	add.w	r3, r7, #15
 8001f16:	461a      	mov	r2, r3
 8001f18:	2101      	movs	r1, #1
 8001f1a:	209e      	movs	r0, #158	; 0x9e
 8001f1c:	f002 f8d2 	bl	80040c4 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	f023 0306 	bic.w	r3, r3, #6
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d105      	bne.n	8001f3c <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	e004      	b.n	8001f46 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001f46:	f107 030f 	add.w	r3, r7, #15
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	209e      	movs	r0, #158	; 0x9e
 8001f50:	f002 f86a 	bl	8004028 <RadioSpiWriteRegisters>
  
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 f8f9 	bl	8004160 <RadioSpiCommandStrobes>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <SpiritCmdStrobeCommand+0x2c>)
 8001f72:	b212      	sxth	r2, r2
 8001f74:	4611      	mov	r1, r2
 8001f76:	7019      	strb	r1, [r3, #0]
 8001f78:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f7c:	705a      	strb	r2, [r3, #1]
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000344 	.word	0x20000344

08001f8c <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	785a      	ldrb	r2, [r3, #1]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	789b      	ldrb	r3, [r3, #2]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f107 020f 	add.w	r2, r7, #15
 8001fae:	2101      	movs	r1, #1
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 f839 	bl	8004028 <RadioSpiWriteRegisters>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <SpiritGpioInit+0x44>)
 8001fba:	b212      	sxth	r2, r2
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	7019      	strb	r1, [r3, #0]
 8001fc0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fc4:	705a      	strb	r2, [r3, #1]

}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000344 	.word	0x20000344

08001fd4 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	2204      	movs	r2, #4
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f008 fb68 	bl	800a6c4 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	461a      	mov	r2, r3
 8002006:	2104      	movs	r1, #4
 8002008:	2090      	movs	r0, #144	; 0x90
 800200a:	f002 f80d 	bl	8004028 <RadioSpiWriteRegisters>
 800200e:	4602      	mov	r2, r0
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SpiritIrqDeInit+0x54>)
 8002012:	b212      	sxth	r2, r2
 8002014:	4611      	mov	r1, r2
 8002016:	7019      	strb	r1, [r3, #0]
 8002018:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800201c:	705a      	strb	r2, [r3, #1]
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000344 	.word	0x20000344

0800202c <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	461a      	mov	r2, r3
 8002042:	2104      	movs	r1, #4
 8002044:	2090      	movs	r0, #144	; 0x90
 8002046:	f002 f83d 	bl	80040c4 <RadioSpiReadRegisters>
 800204a:	4602      	mov	r2, r0
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <SpiritIrq+0xcc>)
 800204e:	b212      	sxth	r2, r2
 8002050:	4611      	mov	r1, r2
 8002052:	7019      	strb	r1, [r3, #0]
 8002054:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002058:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	74fb      	strb	r3, [r7, #19]
 800205e:	e012      	b.n	8002086 <SpiritIrq+0x5a>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	f107 0218 	add.w	r2, r7, #24
 8002066:	4413      	add	r3, r2
 8002068:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800206c:	461a      	mov	r2, r3
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	f1c3 0303 	rsb	r3, r3, #3
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4413      	add	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	3301      	adds	r3, #1
 8002084:	74fb      	strb	r3, [r7, #19]
 8002086:	7cfb      	ldrb	r3, [r7, #19]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d9e9      	bls.n	8002060 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <SpiritIrq+0x72>
  {
    tempValue &= (~xIrq);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	43db      	mvns	r3, r3
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	e003      	b.n	80020a6 <SpiritIrq+0x7a>
  }
  else
  {
    tempValue |= (xIrq);
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	74bb      	strb	r3, [r7, #18]
 80020aa:	e00f      	b.n	80020cc <SpiritIrq+0xa0>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80020ac:	7cbb      	ldrb	r3, [r7, #18]
 80020ae:	f1c3 0303 	rsb	r3, r3, #3
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	40da      	lsrs	r2, r3
 80020b8:	7cbb      	ldrb	r3, [r7, #18]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	f107 0118 	add.w	r1, r7, #24
 80020c0:	440b      	add	r3, r1
 80020c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 80020c6:	7cbb      	ldrb	r3, [r7, #18]
 80020c8:	3301      	adds	r3, #1
 80020ca:	74bb      	strb	r3, [r7, #18]
 80020cc:	7cbb      	ldrb	r3, [r7, #18]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d9ec      	bls.n	80020ac <SpiritIrq+0x80>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	461a      	mov	r2, r3
 80020d8:	2104      	movs	r1, #4
 80020da:	2090      	movs	r0, #144	; 0x90
 80020dc:	f001 ffa4 	bl	8004028 <RadioSpiWriteRegisters>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SpiritIrq+0xcc>)
 80020e4:	b212      	sxth	r2, r2
 80020e6:	4611      	mov	r1, r2
 80020e8:	7019      	strb	r1, [r3, #0]
 80020ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020ee:	705a      	strb	r2, [r3, #1]

}
 80020f0:	bf00      	nop
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000344 	.word	0x20000344

080020fc <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	461a      	mov	r2, r3
 800210e:	2104      	movs	r1, #4
 8002110:	20fa      	movs	r0, #250	; 0xfa
 8002112:	f001 ffd7 	bl	80040c4 <RadioSpiReadRegisters>
 8002116:	4602      	mov	r2, r0
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <SpiritIrqGetStatus+0x60>)
 800211a:	b212      	sxth	r2, r2
 800211c:	4611      	mov	r1, r2
 800211e:	7019      	strb	r1, [r3, #0]
 8002120:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002124:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8002126:	2300      	movs	r3, #0
 8002128:	74fb      	strb	r3, [r7, #19]
 800212a:	e00f      	b.n	800214c <SpiritIrqGetStatus+0x50>
  {
    *pIrqPointer = tempRegValue[3-i];
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	f1c3 0303 	rsb	r3, r3, #3
 8002132:	f107 0218 	add.w	r2, r7, #24
 8002136:	4413      	add	r3, r2
 8002138:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002146:	7cfb      	ldrb	r3, [r7, #19]
 8002148:	3301      	adds	r3, #1
 800214a:	74fb      	strb	r3, [r7, #19]
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d9ec      	bls.n	800212c <SpiritIrqGetStatus+0x30>
  }
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000344 	.word	0x20000344

08002160 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	461a      	mov	r2, r3
 800216a:	2104      	movs	r1, #4
 800216c:	20fa      	movs	r0, #250	; 0xfa
 800216e:	f001 ffa9 	bl	80040c4 <RadioSpiReadRegisters>
 8002172:	4602      	mov	r2, r0
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SpiritIrqClearStatus+0x2c>)
 8002176:	b212      	sxth	r2, r2
 8002178:	4611      	mov	r1, r2
 800217a:	7019      	strb	r1, [r3, #0]
 800217c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002180:	705a      	strb	r2, [r3, #1]

}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000344 	.word	0x20000344

08002190 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	461a      	mov	r2, r3
 800219a:	2101      	movs	r1, #1
 800219c:	20e7      	movs	r0, #231	; 0xe7
 800219e:	f001 ff91 	bl	80040c4 <RadioSpiReadRegisters>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 80021a6:	b212      	sxth	r2, r2
 80021a8:	4611      	mov	r1, r2
 80021aa:	7019      	strb	r1, [r3, #0]
 80021ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021b0:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b8:	b2db      	uxtb	r3, r3

}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000344 	.word	0x20000344

080021c8 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 80021c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021cc:	b08a      	sub	sp, #40	; 0x28
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a70      	ldr	r2, [pc, #448]	; (8002398 <SpiritManagementSetFrequencyBase+0x1d0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d307      	bcc.n	80021ea <SpiritManagementSetFrequencyBase+0x22>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a6f      	ldr	r2, [pc, #444]	; (800239c <SpiritManagementSetFrequencyBase+0x1d4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d803      	bhi.n	80021ea <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021e8:	e01a      	b.n	8002220 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a6c      	ldr	r2, [pc, #432]	; (80023a0 <SpiritManagementSetFrequencyBase+0x1d8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d907      	bls.n	8002202 <SpiritManagementSetFrequencyBase+0x3a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a6b      	ldr	r2, [pc, #428]	; (80023a4 <SpiritManagementSetFrequencyBase+0x1dc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d803      	bhi.n	8002202 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002200:	e00e      	b.n	8002220 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a68      	ldr	r2, [pc, #416]	; (80023a8 <SpiritManagementSetFrequencyBase+0x1e0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d907      	bls.n	800221a <SpiritManagementSetFrequencyBase+0x52>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a67      	ldr	r2, [pc, #412]	; (80023ac <SpiritManagementSetFrequencyBase+0x1e4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d803      	bhi.n	800221a <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8002212:	2302      	movs	r3, #2
 8002214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002218:	e002      	b.n	8002220 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 800221a:	2303      	movs	r3, #3
 800221c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002220:	f000 ffe2 	bl	80031e8 <SpiritRadioGetFrequencyOffset>
 8002224:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002226:	f000 ffbf 	bl	80031a8 <SpiritRadioGetChannelSpace>
 800222a:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800222c:	f000 ffa4 	bl	8003178 <SpiritRadioGetChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002234:	6a3a      	ldr	r2, [r7, #32]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	441a      	add	r2, r3
 800223a:	7efb      	ldrb	r3, [r7, #27]
 800223c:	69f9      	ldr	r1, [r7, #28]
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002246:	f001 fdc7 	bl	8003dd8 <SpiritRadioGetRefDiv>
 800224a:	4603      	mov	r3, r0
 800224c:	3301      	adds	r3, #1
 800224e:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8002250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002254:	2b03      	cmp	r3, #3
 8002256:	d83a      	bhi.n	80022ce <SpiritManagementSetFrequencyBase+0x106>
 8002258:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <SpiritManagementSetFrequencyBase+0x98>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	080022b9 	.word	0x080022b9
 8002264:	080022a1 	.word	0x080022a1
 8002268:	08002289 	.word	0x08002289
 800226c:	08002271 	.word	0x08002271
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4a4f      	ldr	r2, [pc, #316]	; (80023b0 <SpiritManagementSetFrequencyBase+0x1e8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d803      	bhi.n	8002280 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002278:	2000      	movs	r0, #0
 800227a:	f7ff fe45 	bl	8001f08 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800227e:	e026      	b.n	80022ce <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002280:	2001      	movs	r0, #1
 8002282:	f7ff fe41 	bl	8001f08 <SpiritCalibrationSelectVco>
    break;
 8002286:	e022      	b.n	80022ce <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	4a4a      	ldr	r2, [pc, #296]	; (80023b4 <SpiritManagementSetFrequencyBase+0x1ec>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d803      	bhi.n	8002298 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002290:	2000      	movs	r0, #0
 8002292:	f7ff fe39 	bl	8001f08 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002296:	e01a      	b.n	80022ce <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff fe35 	bl	8001f08 <SpiritCalibrationSelectVco>
    break;
 800229e:	e016      	b.n	80022ce <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	4a45      	ldr	r2, [pc, #276]	; (80023b8 <SpiritManagementSetFrequencyBase+0x1f0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d803      	bhi.n	80022b0 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7ff fe2d 	bl	8001f08 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80022ae:	e00e      	b.n	80022ce <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80022b0:	2001      	movs	r0, #1
 80022b2:	f7ff fe29 	bl	8001f08 <SpiritCalibrationSelectVco>
    break;
 80022b6:	e00a      	b.n	80022ce <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4a40      	ldr	r2, [pc, #256]	; (80023bc <SpiritManagementSetFrequencyBase+0x1f4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d803      	bhi.n	80022c8 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff fe21 	bl	8001f08 <SpiritCalibrationSelectVco>
 80022c6:	e002      	b.n	80022ce <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7ff fe1d 	bl	8001f08 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f000 fe6a 	bl	8002fa8 <SpiritRadioSearchWCP>
 80022d4:	4603      	mov	r3, r0
 80022d6:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fe f917 	bl	800050c <__aeabi_ui2d>
 80022de:	4604      	mov	r4, r0
 80022e0:	460d      	mov	r5, r1
 80022e2:	7cfb      	ldrb	r3, [r7, #19]
 80022e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80022e8:	4935      	ldr	r1, [pc, #212]	; (80023c0 <SpiritManagementSetFrequencyBase+0x1f8>)
 80022ea:	5c8a      	ldrb	r2, [r1, r2]
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	049b      	lsls	r3, r3, #18
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f91a 	bl	800052c <__aeabi_i2d>
 80022f8:	4680      	mov	r8, r0
 80022fa:	4689      	mov	r9, r1
 80022fc:	f001 fde0 	bl	8003ec0 <SpiritRadioGetXtalFrequency>
 8002300:	4603      	mov	r3, r0
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f902 	bl	800050c <__aeabi_ui2d>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4640      	mov	r0, r8
 800230e:	4649      	mov	r1, r9
 8002310:	f7fe faa0 	bl	8000854 <__aeabi_ddiv>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4620      	mov	r0, r4
 800231a:	4629      	mov	r1, r5
 800231c:	f7fe f970 	bl	8000600 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fc42 	bl	8000bb0 <__aeabi_d2uiz>
 800232c:	4603      	mov	r3, r0
 800232e:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	0d5b      	lsrs	r3, r3, #21
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	b2da      	uxtb	r2, r3
 800233c:	7cbb      	ldrb	r3, [r7, #18]
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b2db      	uxtb	r3, r3
 8002346:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	0b5b      	lsrs	r3, r3, #13
 800234c:	b2db      	uxtb	r3, r3
 800234e:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	b2db      	uxtb	r3, r3
 8002356:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	b2da      	uxtb	r2, r3
 8002360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002364:	4917      	ldr	r1, [pc, #92]	; (80023c4 <SpiritManagementSetFrequencyBase+0x1fc>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	4313      	orrs	r3, r2
 800236a:	b2db      	uxtb	r3, r3
 800236c:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 800236e:	f107 0308 	add.w	r3, r7, #8
 8002372:	461a      	mov	r2, r3
 8002374:	2104      	movs	r1, #4
 8002376:	2008      	movs	r0, #8
 8002378:	f001 fe56 	bl	8004028 <RadioSpiWriteRegisters>
 800237c:	4602      	mov	r2, r0
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <SpiritManagementSetFrequencyBase+0x200>)
 8002380:	b212      	sxth	r2, r2
 8002382:	4611      	mov	r1, r2
 8002384:	7019      	strb	r1, [r3, #0]
 8002386:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800238a:	705a      	strb	r2, [r3, #1]
}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	; 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002396:	bf00      	nop
 8002398:	2e5f5680 	.word	0x2e5f5680
 800239c:	390c2fe0 	.word	0x390c2fe0
 80023a0:	1701e47f 	.word	0x1701e47f
 80023a4:	1c146a60 	.word	0x1c146a60
 80023a8:	11d260bf 	.word	0x11d260bf
 80023ac:	14ced7e0 	.word	0x14ced7e0
 80023b0:	099cf4e1 	.word	0x099cf4e1
 80023b4:	1339e9c3 	.word	0x1339e9c3
 80023b8:	19a28d05 	.word	0x19a28d05
 80023bc:	33451a0a 	.word	0x33451a0a
 80023c0:	0800d790 	.word	0x0800d790
 80023c4:	0800d78c 	.word	0x0800d78c
 80023c8:	20000344 	.word	0x20000344

080023cc <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 80023da:	f001 fd71 	bl	8003ec0 <SpiritRadioGetXtalFrequency>
 80023de:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4a57      	ldr	r2, [pc, #348]	; (8002544 <SpiritManagementWaVcoCalibration+0x178>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d90f      	bls.n	800240c <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 80023ec:	f001 fcf4 	bl	8003dd8 <SpiritRadioGetRefDiv>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 80023fa:	f001 f857 	bl	80034ac <SpiritRadioGetFrequencyBase>
 80023fe:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002400:	2001      	movs	r0, #1
 8002402:	f001 fcb9 	bl	8003d78 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fede 	bl	80021c8 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 800240c:	f001 f84e 	bl	80034ac <SpiritRadioGetFrequencyBase>
 8002410:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8002412:	2325      	movs	r3, #37	; 0x25
 8002414:	707b      	strb	r3, [r7, #1]
 8002416:	1c7b      	adds	r3, r7, #1
 8002418:	461a      	mov	r2, r3
 800241a:	2101      	movs	r1, #1
 800241c:	20a1      	movs	r0, #161	; 0xa1
 800241e:	f001 fe03 	bl	8004028 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff fcb4 	bl	8001d90 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002428:	f001 fdc8 	bl	8003fbc <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 800242c:	4b46      	ldr	r3, [pc, #280]	; (8002548 <SpiritManagementWaVcoCalibration+0x17c>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	d10d      	bne.n	8002456 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 800243a:	2301      	movs	r3, #1
 800243c:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 800243e:	2062      	movs	r0, #98	; 0x62
 8002440:	f7ff fd8c 	bl	8001f5c <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8002444:	f001 fdba 	bl	8003fbc <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002448:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <SpiritManagementWaVcoCalibration+0x17c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b03      	cmp	r3, #3
 8002454:	d1f6      	bne.n	8002444 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 8002456:	2066      	movs	r0, #102	; 0x66
 8002458:	f7ff fd80 	bl	8001f5c <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 800245c:	2300      	movs	r3, #0
 800245e:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002460:	f001 fdac 	bl	8003fbc <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002464:	4b38      	ldr	r3, [pc, #224]	; (8002548 <SpiritManagementWaVcoCalibration+0x17c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b13      	cmp	r3, #19
 8002470:	d106      	bne.n	8002480 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 8002472:	7b7b      	ldrb	r3, [r7, #13]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	737a      	strb	r2, [r7, #13]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d101      	bne.n	8002480 <SpiritManagementWaVcoCalibration+0xb4>
 800247c:	2301      	movs	r3, #1
 800247e:	e05d      	b.n	800253c <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <SpiritManagementWaVcoCalibration+0x17c>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b0f      	cmp	r3, #15
 800248c:	d1e8      	bne.n	8002460 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 800248e:	f7ff fcb7 	bl	8001e00 <SpiritCalibrationGetVcoCalData>
 8002492:	4603      	mov	r3, r0
 8002494:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8002496:	2062      	movs	r0, #98	; 0x62
 8002498:	f7ff fd60 	bl	8001f5c <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 800249c:	f001 fd8e 	bl	8003fbc <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80024a0:	4b29      	ldr	r3, [pc, #164]	; (8002548 <SpiritManagementWaVcoCalibration+0x17c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d1f6      	bne.n	800249c <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80024ae:	2065      	movs	r0, #101	; 0x65
 80024b0:	f7ff fd54 	bl	8001f5c <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80024b8:	f001 fd80 	bl	8003fbc <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <SpiritManagementWaVcoCalibration+0x17c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b13      	cmp	r3, #19
 80024c8:	d106      	bne.n	80024d8 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 80024ca:	7b7b      	ldrb	r3, [r7, #13]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	737a      	strb	r2, [r7, #13]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d101      	bne.n	80024d8 <SpiritManagementWaVcoCalibration+0x10c>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e031      	b.n	800253c <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <SpiritManagementWaVcoCalibration+0x17c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	d1e8      	bne.n	80024b8 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 80024e6:	f7ff fc8b 	bl	8001e00 <SpiritCalibrationGetVcoCalData>
 80024ea:	4603      	mov	r3, r0
 80024ec:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 80024ee:	2062      	movs	r0, #98	; 0x62
 80024f0:	f7ff fd34 	bl	8001f5c <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80024f4:	f001 fd62 	bl	8003fbc <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <SpiritManagementWaVcoCalibration+0x17c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b03      	cmp	r3, #3
 8002504:	d1f6      	bne.n	80024f4 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002506:	7bbb      	ldrb	r3, [r7, #14]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 800250c:	2063      	movs	r0, #99	; 0x63
 800250e:	f7ff fd25 	bl	8001f5c <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8002512:	2000      	movs	r0, #0
 8002514:	f7ff fc3c 	bl	8001d90 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 800251e:	2000      	movs	r0, #0
 8002520:	f001 fc2a 	bl	8003d78 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff fe4f 	bl	80021c8 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fc83 	bl	8001e38 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8002532:	78bb      	ldrb	r3, [r7, #2]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fcb3 	bl	8001ea0 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	01c9c380 	.word	0x01c9c380
 8002548:	20000344 	.word	0x20000344

0800254c <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 8002552:	4b16      	ldr	r3, [pc, #88]	; (80025ac <SpiritManagementWaCmdStrobeTx+0x60>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d023      	beq.n	80025a4 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <SpiritManagementWaCmdStrobeTx+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <SpiritManagementWaCmdStrobeTx+0x68>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d908      	bls.n	8002578 <SpiritManagementWaCmdStrobeTx+0x2c>
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <SpiritManagementWaCmdStrobeTx+0x6c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d803      	bhi.n	8002578 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8002570:	20c0      	movs	r0, #192	; 0xc0
 8002572:	f001 fb77 	bl	8003c64 <SpiritRadioSetPACwc>
 8002576:	e002      	b.n	800257e <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8002578:	2000      	movs	r0, #0
 800257a:	f001 fb73 	bl	8003c64 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 800257e:	2311      	movs	r3, #17
 8002580:	71fb      	strb	r3, [r7, #7]
 8002582:	1dfb      	adds	r3, r7, #7
 8002584:	461a      	mov	r2, r3
 8002586:	2101      	movs	r1, #1
 8002588:	20a9      	movs	r0, #169	; 0xa9
 800258a:	f001 fd4d 	bl	8004028 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 800258e:	2320      	movs	r3, #32
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	1dfb      	adds	r3, r7, #7
 8002594:	461a      	mov	r2, r3
 8002596:	2101      	movs	r1, #1
 8002598:	20a5      	movs	r0, #165	; 0xa5
 800259a:	f001 fd45 	bl	8004028 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 800259e:	4b03      	ldr	r3, [pc, #12]	; (80025ac <SpiritManagementWaCmdStrobeTx+0x60>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
  }
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	2000000c 	.word	0x2000000c
 80025b0:	20000214 	.word	0x20000214
 80025b4:	08f0d17f 	.word	0x08f0d17f
 80025b8:	1c03a180 	.word	0x1c03a180

080025bc <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <SpiritManagementWaCmdStrobeRx+0x34>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d00d      	beq.n	80025e8 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 80025cc:	2398      	movs	r3, #152	; 0x98
 80025ce:	71fb      	strb	r3, [r7, #7]
 80025d0:	1dfb      	adds	r3, r7, #7
 80025d2:	461a      	mov	r2, r3
 80025d4:	2101      	movs	r1, #1
 80025d6:	20a5      	movs	r0, #165	; 0xa5
 80025d8:	f001 fd26 	bl	8004028 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 80025dc:	2000      	movs	r0, #0
 80025de:	f001 fb41 	bl	8003c64 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 80025e2:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <SpiritManagementWaCmdStrobeRx+0x34>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
  }
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	2000000c 	.word	0x2000000c

080025f4 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SpiritManagementWaTRxFcMem+0x20>)
 80025fe:	2202      	movs	r2, #2
 8002600:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <SpiritManagementWaTRxFcMem+0x24>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	2000000c 	.word	0x2000000c
 8002618:	20000214 	.word	0x20000214

0800261c <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002622:	23ca      	movs	r3, #202	; 0xca
 8002624:	71fb      	strb	r3, [r7, #7]
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	461a      	mov	r2, r3
 800262a:	2101      	movs	r1, #1
 800262c:	20b2      	movs	r0, #178	; 0xb2
 800262e:	f001 fcfb 	bl	8004028 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002632:	2304      	movs	r3, #4
 8002634:	71fb      	strb	r3, [r7, #7]
 8002636:	1dfb      	adds	r3, r7, #7
 8002638:	461a      	mov	r2, r3
 800263a:	2101      	movs	r1, #1
 800263c:	20a8      	movs	r0, #168	; 0xa8
 800263e:	f001 fcf3 	bl	8004028 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	461a      	mov	r2, r3
 8002646:	2101      	movs	r1, #1
 8002648:	20a8      	movs	r0, #168	; 0xa8
 800264a:	f001 fd3b 	bl	80040c4 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 800264e:	2300      	movs	r3, #0
 8002650:	71fb      	strb	r3, [r7, #7]
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	461a      	mov	r2, r3
 8002656:	2101      	movs	r1, #1
 8002658:	20a8      	movs	r0, #168	; 0xa8
 800265a:	f001 fce5 	bl	8004028 <RadioSpiWriteRegisters>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	461a      	mov	r2, r3
 8002676:	2101      	movs	r1, #1
 8002678:	2051      	movs	r0, #81	; 0x51
 800267a:	f001 fd23 	bl	80040c4 <RadioSpiReadRegisters>
 800267e:	4602      	mov	r2, r0
 8002680:	4b64      	ldr	r3, [pc, #400]	; (8002814 <SpiritPktBasicInit+0x1ac>)
 8002682:	b212      	sxth	r2, r2
 8002684:	4611      	mov	r1, r2
 8002686:	7019      	strb	r1, [r3, #0]
 8002688:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800268c:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 800268e:	7a3b      	ldrb	r3, [r7, #8]
 8002690:	f023 0320 	bic.w	r3, r3, #32
 8002694:	b2db      	uxtb	r3, r3
 8002696:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002698:	7a3b      	ldrb	r3, [r7, #8]
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	461a      	mov	r2, r3
 80026a8:	2101      	movs	r1, #1
 80026aa:	2051      	movs	r0, #81	; 0x51
 80026ac:	f001 fcbc 	bl	8004028 <RadioSpiWriteRegisters>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b58      	ldr	r3, [pc, #352]	; (8002814 <SpiritPktBasicInit+0x1ac>)
 80026b4:	b212      	sxth	r2, r2
 80026b6:	4611      	mov	r1, r2
 80026b8:	7019      	strb	r1, [r3, #0]
 80026ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026be:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80026c0:	f107 0308 	add.w	r3, r7, #8
 80026c4:	461a      	mov	r2, r3
 80026c6:	2101      	movs	r1, #1
 80026c8:	204f      	movs	r0, #79	; 0x4f
 80026ca:	f001 fcfb 	bl	80040c4 <RadioSpiReadRegisters>
 80026ce:	4602      	mov	r2, r0
 80026d0:	4b50      	ldr	r3, [pc, #320]	; (8002814 <SpiritPktBasicInit+0x1ac>)
 80026d2:	b212      	sxth	r2, r2
 80026d4:	4611      	mov	r1, r2
 80026d6:	7019      	strb	r1, [r3, #0]
 80026d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026dc:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 80026de:	7a3b      	ldrb	r3, [r7, #8]
 80026e0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	461a      	mov	r2, r3
 80026ee:	2101      	movs	r1, #1
 80026f0:	204f      	movs	r0, #79	; 0x4f
 80026f2:	f001 fc99 	bl	8004028 <RadioSpiWriteRegisters>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4b46      	ldr	r3, [pc, #280]	; (8002814 <SpiritPktBasicInit+0x1ac>)
 80026fa:	b212      	sxth	r2, r2
 80026fc:	4611      	mov	r1, r2
 80026fe:	7019      	strb	r1, [r3, #0]
 8002700:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002704:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7b1b      	ldrb	r3, [r3, #12]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d102      	bne.n	8002714 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 800270e:	2308      	movs	r3, #8
 8002710:	723b      	strb	r3, [r7, #8]
 8002712:	e001      	b.n	8002718 <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 8002714:	2300      	movs	r3, #0
 8002716:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 8002718:	7a3a      	ldrb	r2, [r7, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7adb      	ldrb	r3, [r3, #11]
 800271e:	4313      	orrs	r3, r2
 8002720:	b2db      	uxtb	r3, r3
 8002722:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7a5b      	ldrb	r3, [r3, #9]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <SpiritPktBasicInit+0xca>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7a5b      	ldrb	r3, [r3, #9]
 8002736:	3b01      	subs	r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	785b      	ldrb	r3, [r3, #1]
 8002744:	4313      	orrs	r3, r2
 8002746:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 800274c:	4313      	orrs	r3, r2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7a9b      	ldrb	r3, [r3, #10]
 8002756:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7b9b      	ldrb	r3, [r3, #14]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d104      	bne.n	800276a <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002760:	7afb      	ldrb	r3, [r7, #11]
 8002762:	f043 0310 	orr.w	r3, r3, #16
 8002766:	b2db      	uxtb	r3, r3
 8002768:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	7b5b      	ldrb	r3, [r3, #13]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d104      	bne.n	800277c <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002772:	7afb      	ldrb	r3, [r7, #11]
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	461a      	mov	r2, r3
 8002782:	2104      	movs	r1, #4
 8002784:	2030      	movs	r0, #48	; 0x30
 8002786:	f001 fc4f 	bl	8004028 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	e01f      	b.n	80027d0 <SpiritPktBasicInit+0x168>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f1c3 0303 	rsb	r3, r3, #3
 800279e:	429a      	cmp	r2, r3
 80027a0:	da07      	bge.n	80027b2 <SpiritPktBasicInit+0x14a>
    {
      tempRegValue[i]=0;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	f107 0210 	add.w	r2, r7, #16
 80027a8:	4413      	add	r3, r2
 80027aa:	2200      	movs	r2, #0
 80027ac:	f803 2c08 	strb.w	r2, [r3, #-8]
 80027b0:	e00b      	b.n	80027ca <SpiritPktBasicInit+0x162>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	40da      	lsrs	r2, r3
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f107 0110 	add.w	r1, r7, #16
 80027c4:	440b      	add	r3, r1
 80027c6:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	3301      	adds	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d9dc      	bls.n	8002790 <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7a9b      	ldrb	r3, [r3, #10]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <SpiritPktBasicInit+0x17e>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 80027de:	2000      	movs	r0, #0
 80027e0:	f000 f8fc 	bl	80029dc <SpiritPktCommonFilterOnCrc>
 80027e4:	e002      	b.n	80027ec <SpiritPktBasicInit+0x184>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f000 f8f8 	bl	80029dc <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	461a      	mov	r2, r3
 80027f2:	2104      	movs	r1, #4
 80027f4:	2036      	movs	r0, #54	; 0x36
 80027f6:	f001 fc17 	bl	8004028 <RadioSpiWriteRegisters>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SpiritPktBasicInit+0x1ac>)
 80027fe:	b212      	sxth	r2, r2
 8002800:	4611      	mov	r1, r2
 8002802:	7019      	strb	r1, [r3, #0]
 8002804:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002808:	705a      	strb	r2, [r3, #1]

}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000344 	.word	0x20000344

08002818 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	461a      	mov	r2, r3
 8002826:	2101      	movs	r1, #1
 8002828:	204f      	movs	r0, #79	; 0x4f
 800282a:	f001 fc4b 	bl	80040c4 <RadioSpiReadRegisters>
 800282e:	4602      	mov	r2, r0
 8002830:	4b2f      	ldr	r3, [pc, #188]	; (80028f0 <SpiritPktBasicAddressesInit+0xd8>)
 8002832:	b212      	sxth	r2, r2
 8002834:	4611      	mov	r1, r2
 8002836:	7019      	strb	r1, [r3, #0]
 8002838:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800283c:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002846:	7b3b      	ldrb	r3, [r7, #12]
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	b2db      	uxtb	r3, r3
 800284e:	733b      	strb	r3, [r7, #12]
 8002850:	e004      	b.n	800285c <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002852:	7b3b      	ldrb	r3, [r7, #12]
 8002854:	f023 0308 	bic.w	r3, r3, #8
 8002858:	b2db      	uxtb	r3, r3
 800285a:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	789b      	ldrb	r3, [r3, #2]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002864:	7b3b      	ldrb	r3, [r7, #12]
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	b2db      	uxtb	r3, r3
 800286c:	733b      	strb	r3, [r7, #12]
 800286e:	e004      	b.n	800287a <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002870:	7b3b      	ldrb	r3, [r7, #12]
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	b2db      	uxtb	r3, r3
 8002878:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	791b      	ldrb	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d105      	bne.n	800288e <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002882:	7b3b      	ldrb	r3, [r7, #12]
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	b2db      	uxtb	r3, r3
 800288a:	733b      	strb	r3, [r7, #12]
 800288c:	e004      	b.n	8002898 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800288e:	7b3b      	ldrb	r3, [r7, #12]
 8002890:	f023 0302 	bic.w	r3, r3, #2
 8002894:	b2db      	uxtb	r3, r3
 8002896:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002898:	f107 030c 	add.w	r3, r7, #12
 800289c:	461a      	mov	r2, r3
 800289e:	2101      	movs	r1, #1
 80028a0:	204f      	movs	r0, #79	; 0x4f
 80028a2:	f001 fbc1 	bl	8004028 <RadioSpiWriteRegisters>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <SpiritPktBasicAddressesInit+0xd8>)
 80028aa:	b212      	sxth	r2, r2
 80028ac:	4611      	mov	r1, r2
 80028ae:	7019      	strb	r1, [r3, #0]
 80028b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028b4:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	795b      	ldrb	r3, [r3, #5]
 80028ba:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	78db      	ldrb	r3, [r3, #3]
 80028c0:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	461a      	mov	r2, r3
 80028ce:	2103      	movs	r1, #3
 80028d0:	204c      	movs	r0, #76	; 0x4c
 80028d2:	f001 fba9 	bl	8004028 <RadioSpiWriteRegisters>
 80028d6:	4602      	mov	r2, r0
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <SpiritPktBasicAddressesInit+0xd8>)
 80028da:	b212      	sxth	r2, r2
 80028dc:	4611      	mov	r1, r2
 80028de:	7019      	strb	r1, [r3, #0]
 80028e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028e4:	705a      	strb	r2, [r3, #1]
  
  
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000344 	.word	0x20000344

080028f4 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	461a      	mov	r2, r3
 80028fe:	2101      	movs	r1, #1
 8002900:	2030      	movs	r0, #48	; 0x30
 8002902:	f001 fbdf 	bl	80040c4 <RadioSpiReadRegisters>
 8002906:	4602      	mov	r2, r0
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <SpiritPktBasicGetAddressField+0x3c>)
 800290a:	b212      	sxth	r2, r2
 800290c:	4611      	mov	r1, r2
 800290e:	7019      	strb	r1, [r3, #0]
 8002910:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002914:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	f003 0318 	and.w	r3, r3, #24
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 8002924:	2300      	movs	r3, #0
  }

}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000344 	.word	0x20000344

08002934 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 800293e:	2300      	movs	r3, #0
 8002940:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 8002942:	f7ff ffd7 	bl	80028f4 <SpiritPktBasicGetAddressField>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 800294c:	2301      	movs	r3, #1
 800294e:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8002950:	f000 f828 	bl	80029a4 <SpiritPktCommonGetControlLength>
 8002954:	4603      	mov	r3, r0
 8002956:	b29a      	uxth	r2, r3
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	4413      	add	r3, r2
 800295c:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	4413      	add	r3, r2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	89fb      	ldrh	r3, [r7, #14]
 8002970:	4413      	add	r3, r2
 8002972:	121b      	asrs	r3, r3, #8
 8002974:	b2db      	uxtb	r3, r3
 8002976:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	461a      	mov	r2, r3
 800297e:	2102      	movs	r1, #2
 8002980:	2034      	movs	r0, #52	; 0x34
 8002982:	f001 fb51 	bl	8004028 <RadioSpiWriteRegisters>
 8002986:	4602      	mov	r2, r0
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <SpiritPktBasicSetPayloadLength+0x6c>)
 800298a:	b212      	sxth	r2, r2
 800298c:	4611      	mov	r1, r2
 800298e:	7019      	strb	r1, [r3, #0]
 8002990:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002994:	705a      	strb	r2, [r3, #1]

}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000344 	.word	0x20000344

080029a4 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80029aa:	1dfb      	adds	r3, r7, #7
 80029ac:	461a      	mov	r2, r3
 80029ae:	2101      	movs	r1, #1
 80029b0:	2030      	movs	r0, #48	; 0x30
 80029b2:	f001 fb87 	bl	80040c4 <RadioSpiReadRegisters>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <SpiritPktCommonGetControlLength+0x34>)
 80029ba:	b212      	sxth	r2, r2
 80029bc:	4611      	mov	r1, r2
 80029be:	7019      	strb	r1, [r3, #0]
 80029c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029c4:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	b2db      	uxtb	r3, r3

}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000344 	.word	0x20000344

080029dc <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80029e6:	f107 030f 	add.w	r3, r7, #15
 80029ea:	461a      	mov	r2, r3
 80029ec:	2101      	movs	r1, #1
 80029ee:	204f      	movs	r0, #79	; 0x4f
 80029f0:	f001 fb68 	bl	80040c4 <RadioSpiReadRegisters>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <SpiritPktCommonFilterOnCrc+0x6c>)
 80029f8:	b212      	sxth	r2, r2
 80029fa:	4611      	mov	r1, r2
 80029fc:	7019      	strb	r1, [r3, #0]
 80029fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a02:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e004      	b.n	8002a20 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002a20:	f107 030f 	add.w	r3, r7, #15
 8002a24:	461a      	mov	r2, r3
 8002a26:	2101      	movs	r1, #1
 8002a28:	204f      	movs	r0, #79	; 0x4f
 8002a2a:	f001 fafd 	bl	8004028 <RadioSpiWriteRegisters>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002a32:	b212      	sxth	r2, r2
 8002a34:	4611      	mov	r1, r2
 8002a36:	7019      	strb	r1, [r3, #0]
 8002a38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a3c:	705a      	strb	r2, [r3, #1]

}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000344 	.word	0x20000344

08002a4c <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002a56:	f107 030f 	add.w	r3, r7, #15
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	203a      	movs	r0, #58	; 0x3a
 8002a60:	f001 fb30 	bl	80040c4 <RadioSpiReadRegisters>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <SpiritQiSqiCheck+0x6c>)
 8002a68:	b212      	sxth	r2, r2
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	7019      	strb	r1, [r3, #0]
 8002a6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a72:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d105      	bne.n	8002a86 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e004      	b.n	8002a90 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	f023 0302 	bic.w	r3, r3, #2
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002a90:	f107 030f 	add.w	r3, r7, #15
 8002a94:	461a      	mov	r2, r3
 8002a96:	2101      	movs	r1, #1
 8002a98:	203a      	movs	r0, #58	; 0x3a
 8002a9a:	f001 fac5 	bl	8004028 <RadioSpiWriteRegisters>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SpiritQiSqiCheck+0x6c>)
 8002aa2:	b212      	sxth	r2, r2
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	7019      	strb	r1, [r3, #0]
 8002aa8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002aac:	705a      	strb	r2, [r3, #1]

}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000344 	.word	0x20000344

08002abc <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002ac6:	f107 030f 	add.w	r3, r7, #15
 8002aca:	461a      	mov	r2, r3
 8002acc:	2101      	movs	r1, #1
 8002ace:	203a      	movs	r0, #58	; 0x3a
 8002ad0:	f001 faf8 	bl	80040c4 <RadioSpiReadRegisters>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <SpiritQiSetSqiThreshold+0x64>)
 8002ad8:	b212      	sxth	r2, r2
 8002ada:	4611      	mov	r1, r2
 8002adc:	7019      	strb	r1, [r3, #0]
 8002ade:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ae2:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002af8:	f107 030f 	add.w	r3, r7, #15
 8002afc:	461a      	mov	r2, r3
 8002afe:	2101      	movs	r1, #1
 8002b00:	203a      	movs	r0, #58	; 0x3a
 8002b02:	f001 fa91 	bl	8004028 <RadioSpiWriteRegisters>
 8002b06:	4602      	mov	r2, r0
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <SpiritQiSetSqiThreshold+0x64>)
 8002b0a:	b212      	sxth	r2, r2
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	7019      	strb	r1, [r3, #0]
 8002b10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b14:	705a      	strb	r2, [r3, #1]

}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000344 	.word	0x20000344

08002b24 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3382      	adds	r3, #130	; 0x82
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002b38:	f107 030f 	add.w	r3, r7, #15
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2022      	movs	r0, #34	; 0x22
 8002b42:	f001 fa71 	bl	8004028 <RadioSpiWriteRegisters>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <SpiritQiSetRssiThresholddBm+0x3c>)
 8002b4a:	b212      	sxth	r2, r2
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	7019      	strb	r1, [r3, #0]
 8002b50:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b54:	705a      	strb	r2, [r3, #1]

}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000344 	.word	0x20000344

08002b64 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08c      	sub	sp, #48	; 0x30
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002b6c:	23a0      	movs	r3, #160	; 0xa0
 8002b6e:	747b      	strb	r3, [r7, #17]
 8002b70:	f107 0311 	add.w	r3, r7, #17
 8002b74:	461a      	mov	r2, r3
 8002b76:	2101      	movs	r1, #1
 8002b78:	209f      	movs	r0, #159	; 0x9f
 8002b7a:	f001 fa55 	bl	8004028 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b9c:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8002e60 <SpiritRadioInit+0x2fc>
 8002ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba8:	ee17 3a90 	vmov	r3, s15
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002bae:	2063      	movs	r0, #99	; 0x63
 8002bb0:	f001 fad6 	bl	8004160 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73bb      	strb	r3, [r7, #14]
 8002bb8:	e004      	b.n	8002bc4 <SpiritRadioInit+0x60>
 8002bba:	7bbb      	ldrb	r3, [r7, #14]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	73bb      	strb	r3, [r7, #14]
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2bff      	cmp	r3, #255	; 0xff
 8002bca:	d1f6      	bne.n	8002bba <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002bcc:	f001 f9f6 	bl	8003fbc <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002bd0:	4ba4      	ldr	r3, [pc, #656]	; (8002e64 <SpiritRadioInit+0x300>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d1ea      	bne.n	8002bb4 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002bde:	4ba2      	ldr	r3, [pc, #648]	; (8002e68 <SpiritRadioInit+0x304>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4aa2      	ldr	r2, [pc, #648]	; (8002e6c <SpiritRadioInit+0x308>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d803      	bhi.n	8002bf0 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002be8:	2000      	movs	r0, #0
 8002bea:	f001 f917 	bl	8003e1c <SpiritRadioSetDigDiv>
 8002bee:	e002      	b.n	8002bf6 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f001 f913 	bl	8003e1c <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002bf6:	2062      	movs	r0, #98	; 0x62
 8002bf8:	f001 fab2 	bl	8004160 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	737b      	strb	r3, [r7, #13]
 8002c00:	e004      	b.n	8002c0c <SpiritRadioInit+0xa8>
 8002c02:	7b7b      	ldrb	r3, [r7, #13]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	737b      	strb	r3, [r7, #13]
 8002c0c:	7b7b      	ldrb	r3, [r7, #13]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2bff      	cmp	r3, #255	; 0xff
 8002c12:	d1f6      	bne.n	8002c02 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002c14:	f001 f9d2 	bl	8003fbc <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002c18:	4b92      	ldr	r3, [pc, #584]	; (8002e64 <SpiritRadioInit+0x300>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d1ea      	bne.n	8002bfc <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	ee07 3a90 	vmov	s15, r3
 8002c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c30:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002e70 <SpiritRadioInit+0x30c>
 8002c34:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c38:	4b8b      	ldr	r3, [pc, #556]	; (8002e68 <SpiritRadioInit+0x304>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c4c:	ee17 3a90 	vmov	r3, s15
 8002c50:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002c52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002c62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	025a      	lsls	r2, r3, #9
 8002c6e:	4b7e      	ldr	r3, [pc, #504]	; (8002e68 <SpiritRadioInit+0x304>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fcb5 	bl	80025f4 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002c8a:	f107 0310 	add.w	r3, r7, #16
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2101      	movs	r1, #1
 8002c92:	20a3      	movs	r0, #163	; 0xa3
 8002c94:	f001 fa16 	bl	80040c4 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002c98:	7c3b      	ldrb	r3, [r7, #16]
 8002c9a:	f023 0302 	bic.w	r3, r3, #2
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	743b      	strb	r3, [r7, #16]
 8002ca2:	f107 0310 	add.w	r3, r7, #16
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2101      	movs	r1, #1
 8002caa:	20a3      	movs	r0, #163	; 0xa3
 8002cac:	f001 f9bc 	bl	8004028 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f107 0216 	add.w	r2, r7, #22
 8002cb8:	f107 0117 	add.w	r1, r7, #23
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fc41 	bl	8003544 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7b5a      	ldrb	r2, [r3, #13]
 8002cca:	7dbb      	ldrb	r3, [r7, #22]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002cd2:	f107 0310 	add.w	r3, r7, #16
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2101      	movs	r1, #1
 8002cda:	201c      	movs	r0, #28
 8002cdc:	f001 f9f2 	bl	80040c4 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f107 0214 	add.w	r2, r7, #20
 8002ce8:	f107 0115 	add.w	r1, r7, #21
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fdc9 	bl	8003884 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002cf2:	7d3b      	ldrb	r3, [r7, #20]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	b25a      	sxtb	r2, r3
 8002cf8:	7c3b      	ldrb	r3, [r7, #16]
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b25a      	sxtb	r2, r3
 8002d06:	7d7b      	ldrb	r3, [r7, #21]
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f107 0212 	add.w	r2, r7, #18
 8002d1a:	f107 0113 	add.w	r1, r7, #19
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fcc6 	bl	80036b0 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	b25a      	sxtb	r2, r3
 8002d2a:	7cbb      	ldrb	r3, [r7, #18]
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	b25b      	sxtb	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002d36:	4b4c      	ldr	r3, [pc, #304]	; (8002e68 <SpiritRadioInit+0x304>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	0b1b      	lsrs	r3, r3, #12
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d44:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002e74 <SpiritRadioInit+0x310>
 8002d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d4c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002e78 <SpiritRadioInit+0x314>
 8002d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d54:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002d58:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d64:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d78:	dd0a      	ble.n	8002d90 <SpiritRadioInit+0x22c>
 8002d7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d82:	edc7 7a00 	vstr	s15, [r7]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e007      	b.n	8002da0 <SpiritRadioInit+0x23c>
 8002d90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d98:	edc7 7a00 	vstr	s15, [r7]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <SpiritRadioInit+0x304>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <SpiritRadioInit+0x308>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d802      	bhi.n	8002db2 <SpiritRadioInit+0x24e>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	777b      	strb	r3, [r7, #29]
 8002db0:	e035      	b.n	8002e1e <SpiritRadioInit+0x2ba>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002db2:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <SpiritRadioInit+0x304>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	0b5b      	lsrs	r3, r3, #13
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dc0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002e74 <SpiritRadioInit+0x310>
 8002dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002e78 <SpiritRadioInit+0x314>
 8002dcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dd0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002dd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	dd0a      	ble.n	8002e0c <SpiritRadioInit+0x2a8>
 8002df6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfe:	edc7 7a00 	vstr	s15, [r7]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e007      	b.n	8002e1c <SpiritRadioInit+0x2b8>
 8002e0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e14:	edc7 7a00 	vstr	s15, [r7]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002e1e:	f107 030f 	add.w	r3, r7, #15
 8002e22:	461a      	mov	r2, r3
 8002e24:	2101      	movs	r1, #1
 8002e26:	2007      	movs	r0, #7
 8002e28:	f001 f8fe 	bl	8004028 <RadioSpiWriteRegisters>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <SpiritRadioInit+0x300>)
 8002e30:	b212      	sxth	r2, r2
 8002e32:	4611      	mov	r1, r2
 8002e34:	7019      	strb	r1, [r3, #0]
 8002e36:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e3a:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <SpiritRadioInit+0x304>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <SpiritRadioInit+0x318>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d91e      	bls.n	8002e84 <SpiritRadioInit+0x320>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <SpiritRadioInit+0x304>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <SpiritRadioInit+0x31c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	bf8c      	ite	hi
 8002e50:	2301      	movhi	r3, #1
 8002e52:	2300      	movls	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f86c 	bl	8002f34 <SpiritRadioSetXtalFlag>
 8002e5c:	e01d      	b.n	8002e9a <SpiritRadioInit+0x336>
 8002e5e:	bf00      	nop
 8002e60:	49742400 	.word	0x49742400
 8002e64:	20000344 	.word	0x20000344
 8002e68:	20000218 	.word	0x20000218
 8002e6c:	01c9c37f 	.word	0x01c9c37f
 8002e70:	48800000 	.word	0x48800000
 8002e74:	49afd520 	.word	0x49afd520
 8002e78:	42800000 	.word	0x42800000
 8002e7c:	01c9c380 	.word	0x01c9c380
 8002e80:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002e84:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <SpiritRadioInit+0x3c4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a28      	ldr	r2, [pc, #160]	; (8002f2c <SpiritRadioInit+0x3c8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	bf8c      	ite	hi
 8002e8e:	2301      	movhi	r3, #1
 8002e90:	2300      	movls	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f84d 	bl	8002f34 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	206c      	movs	r0, #108	; 0x6c
 8002ea4:	f001 f8c0 	bl	8004028 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	461a      	mov	r2, r3
 8002eae:	2104      	movs	r1, #4
 8002eb0:	200c      	movs	r0, #12
 8002eb2:	f001 f8b9 	bl	8004028 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002eb6:	f107 0318 	add.w	r3, r7, #24
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	201a      	movs	r0, #26
 8002ec0:	f001 f8b2 	bl	8004028 <RadioSpiWriteRegisters>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <SpiritRadioInit+0x3cc>)
 8002ec8:	b212      	sxth	r2, r2
 8002eca:	4611      	mov	r1, r2
 8002ecc:	7019      	strb	r1, [r3, #0]
 8002ece:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ed2:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f000 ff1d 	bl	8003d14 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002ede:	23e3      	movs	r3, #227	; 0xe3
 8002ee0:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002ee2:	f107 031c 	add.w	r3, r7, #28
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2102      	movs	r1, #2
 8002eea:	2099      	movs	r0, #153	; 0x99
 8002eec:	f001 f89c 	bl	8004028 <RadioSpiWriteRegisters>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <SpiritRadioInit+0x3cc>)
 8002ef4:	b212      	sxth	r2, r2
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	7019      	strb	r1, [r3, #0]
 8002efa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002efe:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002f00:	2322      	movs	r3, #34	; 0x22
 8002f02:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	20bc      	movs	r0, #188	; 0xbc
 8002f0e:	f001 f88b 	bl	8004028 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f9aa 	bl	8003270 <SpiritRadioSetFrequencyBase>
 8002f1c:	4603      	mov	r3, r0
  
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3730      	adds	r7, #48	; 0x30
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000218 	.word	0x20000218
 8002f2c:	017d783f 	.word	0x017d783f
 8002f30:	20000344 	.word	0x20000344

08002f34 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002f42:	f107 030f 	add.w	r3, r7, #15
 8002f46:	461a      	mov	r2, r3
 8002f48:	2101      	movs	r1, #1
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f001 f8ba 	bl	80040c4 <RadioSpiReadRegisters>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <SpiritRadioSetXtalFlag+0x70>)
 8002f54:	b212      	sxth	r2, r2
 8002f56:	4611      	mov	r1, r2
 8002f58:	7019      	strb	r1, [r3, #0]
 8002f5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f5e:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d105      	bne.n	8002f72 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	73fb      	strb	r3, [r7, #15]
 8002f70:	e004      	b.n	8002f7c <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002f7c:	f107 030f 	add.w	r3, r7, #15
 8002f80:	461a      	mov	r2, r3
 8002f82:	2101      	movs	r1, #1
 8002f84:	2001      	movs	r0, #1
 8002f86:	f001 f84f 	bl	8004028 <RadioSpiWriteRegisters>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <SpiritRadioSetXtalFlag+0x70>)
 8002f8e:	b212      	sxth	r2, r2
 8002f90:	4611      	mov	r1, r2
 8002f92:	7019      	strb	r1, [r3, #0]
 8002f94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f98:	705a      	strb	r2, [r3, #1]
  
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000344 	.word	0x20000344

08002fa8 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a3a      	ldr	r2, [pc, #232]	; (80030a8 <SpiritRadioSearchWCP+0x100>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d306      	bcc.n	8002fd2 <SpiritRadioSearchWCP+0x2a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a39      	ldr	r2, [pc, #228]	; (80030ac <SpiritRadioSearchWCP+0x104>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d802      	bhi.n	8002fd2 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002fcc:	2306      	movs	r3, #6
 8002fce:	73bb      	strb	r3, [r7, #14]
 8002fd0:	e01f      	b.n	8003012 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a36      	ldr	r2, [pc, #216]	; (80030b0 <SpiritRadioSearchWCP+0x108>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d906      	bls.n	8002fe8 <SpiritRadioSearchWCP+0x40>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a35      	ldr	r2, [pc, #212]	; (80030b4 <SpiritRadioSearchWCP+0x10c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d802      	bhi.n	8002fe8 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	73bb      	strb	r3, [r7, #14]
 8002fe6:	e014      	b.n	8003012 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a33      	ldr	r2, [pc, #204]	; (80030b8 <SpiritRadioSearchWCP+0x110>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d906      	bls.n	8002ffe <SpiritRadioSearchWCP+0x56>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a32      	ldr	r2, [pc, #200]	; (80030bc <SpiritRadioSearchWCP+0x114>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d802      	bhi.n	8002ffe <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	73bb      	strb	r3, [r7, #14]
 8002ffc:	e009      	b.n	8003012 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a2f      	ldr	r2, [pc, #188]	; (80030c0 <SpiritRadioSearchWCP+0x118>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d905      	bls.n	8003012 <SpiritRadioSearchWCP+0x6a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a2e      	ldr	r2, [pc, #184]	; (80030c4 <SpiritRadioSearchWCP+0x11c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d801      	bhi.n	8003012 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 800300e:	2320      	movs	r3, #32
 8003010:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <SpiritRadioSearchWCP+0x120>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	099b      	lsrs	r3, r3, #6
 800301c:	7bba      	ldrb	r2, [r7, #14]
 800301e:	fb02 f303 	mul.w	r3, r2, r3
 8003022:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8003024:	f241 631f 	movw	r3, #5663	; 0x161f
 8003028:	461a      	mov	r2, r3
 800302a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302e:	fb03 f302 	mul.w	r3, r3, r2
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	429a      	cmp	r2, r3
 8003036:	d302      	bcc.n	800303e <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8003038:	230f      	movs	r3, #15
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e023      	b.n	8003086 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e005      	b.n	8003050 <SpiritRadioSearchWCP+0xa8>
 8003044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	3301      	adds	r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003054:	2b0e      	cmp	r3, #14
 8003056:	dc0c      	bgt.n	8003072 <SpiritRadioSearchWCP+0xca>
 8003058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305c:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <SpiritRadioSearchWCP+0x124>)
 800305e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003062:	461a      	mov	r2, r3
 8003064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003068:	fb03 f302 	mul.w	r3, r3, r2
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	d8e8      	bhi.n	8003044 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8003072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <SpiritRadioSearchWCP+0xde>
      i--;
 800307a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8003086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308a:	425a      	negs	r2, r3
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	f002 0207 	and.w	r2, r2, #7
 8003094:	bf58      	it	pl
 8003096:	4253      	negpl	r3, r2
 8003098:	b25b      	sxtb	r3, r3
 800309a:	b2db      	uxtb	r3, r3
  
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	2e5f5680 	.word	0x2e5f5680
 80030ac:	390c2fe0 	.word	0x390c2fe0
 80030b0:	1701e47f 	.word	0x1701e47f
 80030b4:	1c146a60 	.word	0x1c146a60
 80030b8:	11d260bf 	.word	0x11d260bf
 80030bc:	14ced7e0 	.word	0x14ced7e0
 80030c0:	08e18f3f 	.word	0x08e18f3f
 80030c4:	0a6fd060 	.word	0x0a6fd060
 80030c8:	10624dd3 	.word	0x10624dd3
 80030cc:	0800d850 	.word	0x0800d850

080030d0 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	461a      	mov	r2, r3
 80030da:	2104      	movs	r1, #4
 80030dc:	2008      	movs	r0, #8
 80030de:	f000 fff1 	bl	80040c4 <RadioSpiReadRegisters>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <SpiritRadioGetSynthWord+0x48>)
 80030e6:	b212      	sxth	r2, r2
 80030e8:	4611      	mov	r1, r2
 80030ea:	7019      	strb	r1, [r3, #0]
 80030ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030f0:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80030f2:	793b      	ldrb	r3, [r7, #4]
 80030f4:	055b      	lsls	r3, r3, #21
 80030f6:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80030fa:	797b      	ldrb	r3, [r7, #5]
 80030fc:	035b      	lsls	r3, r3, #13
 80030fe:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8003100:	79bb      	ldrb	r3, [r7, #6]
 8003102:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003104:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8003106:	79fa      	ldrb	r2, [r7, #7]
 8003108:	08d2      	lsrs	r2, r2, #3
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	4413      	add	r3, r2
  
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000344 	.word	0x20000344

0800311c <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8003122:	1dfb      	adds	r3, r7, #7
 8003124:	461a      	mov	r2, r3
 8003126:	2101      	movs	r1, #1
 8003128:	200b      	movs	r0, #11
 800312a:	f000 ffcb 	bl	80040c4 <RadioSpiReadRegisters>
 800312e:	4602      	mov	r2, r0
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <SpiritRadioGetBand+0x58>)
 8003132:	b212      	sxth	r2, r2
 8003134:	4611      	mov	r1, r2
 8003136:	7019      	strb	r1, [r3, #0]
 8003138:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800313c:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8003148:	2300      	movs	r3, #0
 800314a:	e00e      	b.n	800316a <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	2b03      	cmp	r3, #3
 8003154:	d101      	bne.n	800315a <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8003156:	2301      	movs	r3, #1
 8003158:	e007      	b.n	800316a <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	2b04      	cmp	r3, #4
 8003162:	d101      	bne.n	8003168 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003164:	2302      	movs	r3, #2
 8003166:	e000      	b.n	800316a <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003168:	2303      	movs	r3, #3
  }
  
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000344 	.word	0x20000344

08003178 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 800317e:	1dfb      	adds	r3, r7, #7
 8003180:	461a      	mov	r2, r3
 8003182:	2101      	movs	r1, #1
 8003184:	206c      	movs	r0, #108	; 0x6c
 8003186:	f000 ff9d 	bl	80040c4 <RadioSpiReadRegisters>
 800318a:	4602      	mov	r2, r0
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <SpiritRadioGetChannel+0x2c>)
 800318e:	b212      	sxth	r2, r2
 8003190:	4611      	mov	r1, r2
 8003192:	7019      	strb	r1, [r3, #0]
 8003194:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003198:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 800319a:	79fb      	ldrb	r3, [r7, #7]
  
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000344 	.word	0x20000344

080031a8 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 80031ae:	1dfb      	adds	r3, r7, #7
 80031b0:	461a      	mov	r2, r3
 80031b2:	2101      	movs	r1, #1
 80031b4:	200c      	movs	r0, #12
 80031b6:	f000 ff85 	bl	80040c4 <RadioSpiReadRegisters>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <SpiritRadioGetChannelSpace+0x38>)
 80031be:	b212      	sxth	r2, r2
 80031c0:	4611      	mov	r1, r2
 80031c2:	7019      	strb	r1, [r3, #0]
 80031c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80031c8:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <SpiritRadioGetChannelSpace+0x3c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fb03 f302 	mul.w	r3, r3, r2
 80031d6:	0bdb      	lsrs	r3, r3, #15
  
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000344 	.word	0x20000344
 80031e4:	20000218 	.word	0x20000218

080031e8 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	461a      	mov	r2, r3
 80031f2:	2102      	movs	r1, #2
 80031f4:	200e      	movs	r0, #14
 80031f6:	f000 ff65 	bl	80040c4 <RadioSpiReadRegisters>
 80031fa:	4602      	mov	r2, r0
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <SpiritRadioGetFrequencyOffset+0x80>)
 80031fe:	b212      	sxth	r2, r2
 8003200:	4611      	mov	r1, r2
 8003202:	7019      	strb	r1, [r3, #0]
 8003204:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003208:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 800320a:	793b      	ldrb	r3, [r7, #4]
 800320c:	b29b      	uxth	r3, r3
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	b29a      	uxth	r2, r3
 8003212:	797b      	ldrb	r3, [r7, #5]
 8003214:	b29b      	uxth	r3, r3
 8003216:	4413      	add	r3, r2
 8003218:	b29b      	uxth	r3, r3
 800321a:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800322c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8003230:	b29b      	uxth	r3, r3
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	e004      	b.n	8003240 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	b29b      	uxth	r3, r3
 800323e:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8003240:	1cbb      	adds	r3, r7, #2
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8003246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324a:	4a08      	ldr	r2, [pc, #32]	; (800326c <SpiritRadioGetFrequencyOffset+0x84>)
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	da03      	bge.n	800325e <SpiritRadioGetFrequencyOffset+0x76>
 8003256:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800325a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800325e:	149b      	asrs	r3, r3, #18
  
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000344 	.word	0x20000344
 800326c:	20000218 	.word	0x20000218

08003270 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8003270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003274:	b08a      	sub	sp, #40	; 0x28
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 800327a:	2300      	movs	r3, #0
 800327c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a79      	ldr	r2, [pc, #484]	; (8003468 <SpiritRadioSetFrequencyBase+0x1f8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d307      	bcc.n	8003298 <SpiritRadioSetFrequencyBase+0x28>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a78      	ldr	r2, [pc, #480]	; (800346c <SpiritRadioSetFrequencyBase+0x1fc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d803      	bhi.n	8003298 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003290:	2300      	movs	r3, #0
 8003292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003296:	e022      	b.n	80032de <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a75      	ldr	r2, [pc, #468]	; (8003470 <SpiritRadioSetFrequencyBase+0x200>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d907      	bls.n	80032b0 <SpiritRadioSetFrequencyBase+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a74      	ldr	r2, [pc, #464]	; (8003474 <SpiritRadioSetFrequencyBase+0x204>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d803      	bhi.n	80032b0 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032ae:	e016      	b.n	80032de <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a71      	ldr	r2, [pc, #452]	; (8003478 <SpiritRadioSetFrequencyBase+0x208>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d907      	bls.n	80032c8 <SpiritRadioSetFrequencyBase+0x58>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a70      	ldr	r2, [pc, #448]	; (800347c <SpiritRadioSetFrequencyBase+0x20c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d803      	bhi.n	80032c8 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 80032c0:	2302      	movs	r3, #2
 80032c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032c6:	e00a      	b.n	80032de <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a6d      	ldr	r2, [pc, #436]	; (8003480 <SpiritRadioSetFrequencyBase+0x210>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d906      	bls.n	80032de <SpiritRadioSetFrequencyBase+0x6e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a6c      	ldr	r2, [pc, #432]	; (8003484 <SpiritRadioSetFrequencyBase+0x214>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d802      	bhi.n	80032de <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 80032d8:	2303      	movs	r3, #3
 80032da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80032de:	f7ff ff83 	bl	80031e8 <SpiritRadioGetFrequencyOffset>
 80032e2:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80032e4:	f7ff ff60 	bl	80031a8 <SpiritRadioGetChannelSpace>
 80032e8:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80032ea:	f7ff ff45 	bl	8003178 <SpiritRadioGetChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80032f2:	6a3a      	ldr	r2, [r7, #32]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	441a      	add	r2, r3
 80032f8:	7efb      	ldrb	r3, [r7, #27]
 80032fa:	69f9      	ldr	r1, [r7, #28]
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003304:	f000 fd68 	bl	8003dd8 <SpiritRadioGetRefDiv>
 8003308:	4603      	mov	r3, r0
 800330a:	3301      	adds	r3, #1
 800330c:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 800330e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003312:	2b03      	cmp	r3, #3
 8003314:	d839      	bhi.n	800338a <SpiritRadioSetFrequencyBase+0x11a>
 8003316:	a201      	add	r2, pc, #4	; (adr r2, 800331c <SpiritRadioSetFrequencyBase+0xac>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	08003375 	.word	0x08003375
 8003320:	0800335d 	.word	0x0800335d
 8003324:	08003345 	.word	0x08003345
 8003328:	0800332d 	.word	0x0800332d
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	4a56      	ldr	r2, [pc, #344]	; (8003488 <SpiritRadioSetFrequencyBase+0x218>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d803      	bhi.n	800333c <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003334:	2000      	movs	r0, #0
 8003336:	f7fe fde7 	bl	8001f08 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800333a:	e026      	b.n	800338a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 800333c:	2001      	movs	r0, #1
 800333e:	f7fe fde3 	bl	8001f08 <SpiritCalibrationSelectVco>
    break;
 8003342:	e022      	b.n	800338a <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4a51      	ldr	r2, [pc, #324]	; (800348c <SpiritRadioSetFrequencyBase+0x21c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d803      	bhi.n	8003354 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800334c:	2000      	movs	r0, #0
 800334e:	f7fe fddb 	bl	8001f08 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003352:	e01a      	b.n	800338a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003354:	2001      	movs	r0, #1
 8003356:	f7fe fdd7 	bl	8001f08 <SpiritCalibrationSelectVco>
    break;
 800335a:	e016      	b.n	800338a <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4a4c      	ldr	r2, [pc, #304]	; (8003490 <SpiritRadioSetFrequencyBase+0x220>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d803      	bhi.n	800336c <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003364:	2000      	movs	r0, #0
 8003366:	f7fe fdcf 	bl	8001f08 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800336a:	e00e      	b.n	800338a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 800336c:	2001      	movs	r0, #1
 800336e:	f7fe fdcb 	bl	8001f08 <SpiritCalibrationSelectVco>
    break;
 8003372:	e00a      	b.n	800338a <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	4a47      	ldr	r2, [pc, #284]	; (8003494 <SpiritRadioSetFrequencyBase+0x224>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d803      	bhi.n	8003384 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fe fdc3 	bl	8001f08 <SpiritCalibrationSelectVco>
 8003382:	e002      	b.n	800338a <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003384:	2001      	movs	r0, #1
 8003386:	f7fe fdbf 	bl	8001f08 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f7ff fe0c 	bl	8002fa8 <SpiritRadioSearchWCP>
 8003390:	4603      	mov	r3, r0
 8003392:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003398:	4a3f      	ldr	r2, [pc, #252]	; (8003498 <SpiritRadioSetFrequencyBase+0x228>)
 800339a:	5cd3      	ldrb	r3, [r2, r3]
 800339c:	461a      	mov	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	fb03 f302 	mul.w	r3, r3, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd f8b1 	bl	800050c <__aeabi_ui2d>
 80033aa:	4604      	mov	r4, r0
 80033ac:	460d      	mov	r5, r1
 80033ae:	7cfb      	ldrb	r3, [r7, #19]
 80033b0:	049b      	lsls	r3, r3, #18
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd f8ba 	bl	800052c <__aeabi_i2d>
 80033b8:	4680      	mov	r8, r0
 80033ba:	4689      	mov	r9, r1
 80033bc:	4b37      	ldr	r3, [pc, #220]	; (800349c <SpiritRadioSetFrequencyBase+0x22c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd f8a3 	bl	800050c <__aeabi_ui2d>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4640      	mov	r0, r8
 80033cc:	4649      	mov	r1, r9
 80033ce:	f7fd fa41 	bl	8000854 <__aeabi_ddiv>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4620      	mov	r0, r4
 80033d8:	4629      	mov	r1, r5
 80033da:	f7fd f911 	bl	8000600 <__aeabi_dmul>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	f7fd fbe3 	bl	8000bb0 <__aeabi_d2uiz>
 80033ea:	4603      	mov	r3, r0
 80033ec:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	0d5b      	lsrs	r3, r3, #21
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	7cbb      	ldrb	r3, [r7, #18]
 80033fc:	015b      	lsls	r3, r3, #5
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	4313      	orrs	r3, r2
 8003402:	b2db      	uxtb	r3, r3
 8003404:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	0b5b      	lsrs	r3, r3, #13
 800340a:	b2db      	uxtb	r3, r3
 800340c:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	b2db      	uxtb	r3, r3
 8003414:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	b2da      	uxtb	r2, r3
 800341e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003422:	491f      	ldr	r1, [pc, #124]	; (80034a0 <SpiritRadioSetFrequencyBase+0x230>)
 8003424:	5ccb      	ldrb	r3, [r1, r3]
 8003426:	4313      	orrs	r3, r2
 8003428:	b2db      	uxtb	r3, r3
 800342a:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 800342c:	f107 0308 	add.w	r3, r7, #8
 8003430:	461a      	mov	r2, r3
 8003432:	2104      	movs	r1, #4
 8003434:	2008      	movs	r0, #8
 8003436:	f000 fdf7 	bl	8004028 <RadioSpiWriteRegisters>
 800343a:	4602      	mov	r2, r0
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <SpiritRadioSetFrequencyBase+0x234>)
 800343e:	b212      	sxth	r2, r2
 8003440:	4611      	mov	r1, r2
 8003442:	7019      	strb	r1, [r3, #0]
 8003444:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003448:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <SpiritRadioSetFrequencyBase+0x238>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d103      	bne.n	800345a <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8003452:	f7fe ffbb 	bl	80023cc <SpiritManagementWaVcoCalibration>
 8003456:	4603      	mov	r3, r0
 8003458:	e000      	b.n	800345c <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003466:	bf00      	nop
 8003468:	2e5f5680 	.word	0x2e5f5680
 800346c:	390c2fe0 	.word	0x390c2fe0
 8003470:	1701e47f 	.word	0x1701e47f
 8003474:	1c146a60 	.word	0x1c146a60
 8003478:	11d260bf 	.word	0x11d260bf
 800347c:	14ced7e0 	.word	0x14ced7e0
 8003480:	08e18f3f 	.word	0x08e18f3f
 8003484:	0a6fd060 	.word	0x0a6fd060
 8003488:	099cf4e1 	.word	0x099cf4e1
 800348c:	1339e9c3 	.word	0x1339e9c3
 8003490:	19a28d05 	.word	0x19a28d05
 8003494:	33451a0a 	.word	0x33451a0a
 8003498:	0800d794 	.word	0x0800d794
 800349c:	20000218 	.word	0x20000218
 80034a0:	0800d798 	.word	0x0800d798
 80034a4:	20000344 	.word	0x20000344
 80034a8:	2000000d 	.word	0x2000000d

080034ac <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 80034ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 80034b4:	f7ff fe0c 	bl	80030d0 <SpiritRadioGetSynthWord>
 80034b8:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 80034ba:	f7ff fe2f 	bl	800311c <SpiritRadioGetBand>
 80034be:	4603      	mov	r3, r0
 80034c0:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 80034c2:	f000 fc89 	bl	8003dd8 <SpiritRadioGetRefDiv>
 80034c6:	4603      	mov	r3, r0
 80034c8:	3301      	adds	r3, #1
 80034ca:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd f81d 	bl	800050c <__aeabi_ui2d>
 80034d2:	4604      	mov	r4, r0
 80034d4:	460d      	mov	r5, r1
 80034d6:	4b19      	ldr	r3, [pc, #100]	; (800353c <SpiritRadioGetFrequencyBase+0x90>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd f816 	bl	800050c <__aeabi_ui2d>
 80034e0:	4680      	mov	r8, r0
 80034e2:	4689      	mov	r9, r1
 80034e4:	78bb      	ldrb	r3, [r7, #2]
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	4915      	ldr	r1, [pc, #84]	; (8003540 <SpiritRadioGetFrequencyBase+0x94>)
 80034ea:	5c8a      	ldrb	r2, [r1, r2]
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	049b      	lsls	r3, r3, #18
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd f81a 	bl	800052c <__aeabi_i2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4640      	mov	r0, r8
 80034fe:	4649      	mov	r1, r9
 8003500:	f7fd f9a8 	bl	8000854 <__aeabi_ddiv>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4620      	mov	r0, r4
 800350a:	4629      	mov	r1, r5
 800350c:	f7fd f878 	bl	8000600 <__aeabi_dmul>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	ec43 2b17 	vmov	d7, r2, r3
 8003518:	eeb0 0a47 	vmov.f32	s0, s14
 800351c:	eef0 0a67 	vmov.f32	s1, s15
 8003520:	f009 ff92 	bl	800d448 <round>
 8003524:	ec53 2b10 	vmov	r2, r3, d0
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	f7fd fb40 	bl	8000bb0 <__aeabi_d2uiz>
 8003530:	4603      	mov	r3, r0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800353c:	20000218 	.word	0x20000218
 8003540:	0800d794 	.word	0x0800d794

08003544 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003550:	2300      	movs	r3, #0
 8003552:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003554:	230f      	movs	r3, #15
 8003556:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 800355c:	f000 fc8e 	bl	8003e7c <SpiritRadioGetDigDiv>
 8003560:	4603      	mov	r3, r0
 8003562:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003564:	e015      	b.n	8003592 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003566:	4b51      	ldr	r3, [pc, #324]	; (80036ac <SpiritRadioSearchDatarateME+0x168>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800356e:	f1c3 0114 	rsb	r1, r3, #20
 8003572:	7ebb      	ldrb	r3, [r7, #26]
 8003574:	440b      	add	r3, r1
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	429a      	cmp	r2, r3
 800357e:	d302      	bcc.n	8003586 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003580:	2301      	movs	r3, #1
 8003582:	763b      	strb	r3, [r7, #24]
 8003584:	e005      	b.n	8003592 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003586:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003592:	7e3b      	ldrb	r3, [r7, #24]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <SpiritRadioSearchDatarateME+0x5e>
 800359a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	dae1      	bge.n	8003566 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 80035a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da01      	bge.n	80035ae <SpiritRadioSearchDatarateME+0x6a>
 80035aa:	2300      	movs	r3, #0
 80035ac:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 80035ae:	7ffa      	ldrb	r2, [r7, #31]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 80035b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035b8:	f1c3 0317 	rsb	r3, r3, #23
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	409a      	lsls	r2, r3
 80035c0:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <SpiritRadioSearchDatarateME+0x168>)
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	7ebb      	ldrb	r3, [r7, #26]
 80035c6:	3305      	adds	r3, #5
 80035c8:	fa21 f303 	lsr.w	r3, r1, r3
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	77bb      	strb	r3, [r7, #30]
 80035d6:	e033      	b.n	8003640 <SpiritRadioSearchDatarateME+0xfc>
  {
    if((cMantissaTmp+j-1))
 80035d8:	7e7a      	ldrb	r2, [r7, #25]
 80035da:	7fbb      	ldrb	r3, [r7, #30]
 80035dc:	4413      	add	r3, r2
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d022      	beq.n	8003628 <SpiritRadioSearchDatarateME+0xe4>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	7e7b      	ldrb	r3, [r7, #25]
 80035e8:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80035ec:	7fbb      	ldrb	r3, [r7, #30]
 80035ee:	440b      	add	r3, r1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <SpiritRadioSearchDatarateME+0x168>)
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	7ebb      	ldrb	r3, [r7, #26]
 80035fa:	3305      	adds	r3, #5
 80035fc:	fa21 f303 	lsr.w	r3, r1, r3
 8003600:	fb03 f100 	mul.w	r1, r3, r0
 8003604:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003608:	f1c3 0317 	rsb	r3, r3, #23
 800360c:	fa21 f303 	lsr.w	r3, r1, r3
 8003610:	b29b      	uxth	r3, r3
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	b29a      	uxth	r2, r3
 8003616:	7fbb      	ldrb	r3, [r7, #30]
 8003618:	b212      	sxth	r2, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	f107 0120 	add.w	r1, r7, #32
 8003620:	440b      	add	r3, r1
 8003622:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003626:	e008      	b.n	800363a <SpiritRadioSearchDatarateME+0xf6>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 8003628:	7fbb      	ldrb	r3, [r7, #30]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	f107 0220 	add.w	r2, r7, #32
 8003630:	4413      	add	r3, r2
 8003632:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003636:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 800363a:	7fbb      	ldrb	r3, [r7, #30]
 800363c:	3301      	adds	r3, #1
 800363e:	77bb      	strb	r3, [r7, #30]
 8003640:	7fbb      	ldrb	r3, [r7, #30]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d9c8      	bls.n	80035d8 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800364a:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 800364c:	2300      	movs	r3, #0
 800364e:	76fb      	strb	r3, [r7, #27]
 8003650:	e023      	b.n	800369a <SpiritRadioSearchDatarateME+0x156>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003652:	7efb      	ldrb	r3, [r7, #27]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	f107 0220 	add.w	r2, r7, #32
 800365a:	4413      	add	r3, r2
 800365c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	bfb8      	it	lt
 8003664:	425b      	neglt	r3, r3
 8003666:	b29b      	uxth	r3, r3
 8003668:	8bba      	ldrh	r2, [r7, #28]
 800366a:	429a      	cmp	r2, r3
 800366c:	d912      	bls.n	8003694 <SpiritRadioSearchDatarateME+0x150>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 800366e:	7efb      	ldrb	r3, [r7, #27]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	f107 0220 	add.w	r2, r7, #32
 8003676:	4413      	add	r3, r2
 8003678:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	bfb8      	it	lt
 8003680:	425b      	neglt	r3, r3
 8003682:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003684:	7e7a      	ldrb	r2, [r7, #25]
 8003686:	7efb      	ldrb	r3, [r7, #27]
 8003688:	4413      	add	r3, r2
 800368a:	b2db      	uxtb	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003694:	7efb      	ldrb	r3, [r7, #27]
 8003696:	3301      	adds	r3, #1
 8003698:	76fb      	strb	r3, [r7, #27]
 800369a:	7efb      	ldrb	r3, [r7, #27]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d9d8      	bls.n	8003652 <SpiritRadioSearchDatarateME+0x10e>
    }
  }
  
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000218 	.word	0x20000218

080036b0 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 80036c2:	f000 fbdb 	bl	8003e7c <SpiritRadioGetDigDiv>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 80036cc:	2302      	movs	r3, #2
 80036ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80036d2:	e002      	b.n	80036da <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 80036da:	4b65      	ldr	r3, [pc, #404]	; (8003870 <SpiritRadioSearchChannelBwME+0x1c0>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	4a63      	ldr	r2, [pc, #396]	; (8003874 <SpiritRadioSearchChannelBwME+0x1c4>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036f6:	e006      	b.n	8003706 <SpiritRadioSearchChannelBwME+0x56>
 80036f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	3301      	adds	r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003706:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800370a:	2b59      	cmp	r3, #89	; 0x59
 800370c:	dc0f      	bgt.n	800372e <SpiritRadioSearchChannelBwME+0x7e>
 800370e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003712:	4a59      	ldr	r2, [pc, #356]	; (8003878 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003718:	461a      	mov	r2, r3
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fb03 f302 	mul.w	r3, r3, r2
 8003720:	4a56      	ldr	r2, [pc, #344]	; (800387c <SpiritRadioSearchChannelBwME+0x1cc>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0adb      	lsrs	r3, r3, #11
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	429a      	cmp	r2, r3
 800372c:	d3e4      	bcc.n	80036f8 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 800372e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003732:	2b00      	cmp	r3, #0
 8003734:	d07b      	beq.n	800382e <SpiritRadioSearchChannelBwME+0x17e>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800373a:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 800373c:	2300      	movs	r3, #0
 800373e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003742:	e03c      	b.n	80037be <SpiritRadioSearchChannelBwME+0x10e>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003744:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003748:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800374c:	4413      	add	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	dc06      	bgt.n	8003760 <SpiritRadioSearchChannelBwME+0xb0>
 8003752:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003756:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800375a:	4413      	add	r3, r2
 800375c:	2b5a      	cmp	r3, #90	; 0x5a
 800375e:	dc1f      	bgt.n	80037a0 <SpiritRadioSearchChannelBwME+0xf0>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	b29a      	uxth	r2, r3
 8003764:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003768:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800376c:	440b      	add	r3, r1
 800376e:	3b01      	subs	r3, #1
 8003770:	4941      	ldr	r1, [pc, #260]	; (8003878 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003772:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003776:	4619      	mov	r1, r3
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	fb03 f301 	mul.w	r3, r3, r1
 800377e:	493f      	ldr	r1, [pc, #252]	; (800387c <SpiritRadioSearchChannelBwME+0x1cc>)
 8003780:	fba1 1303 	umull	r1, r3, r1, r3
 8003784:	0adb      	lsrs	r3, r3, #11
 8003786:	b29b      	uxth	r3, r3
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	b29a      	uxth	r2, r3
 800378c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003790:	b212      	sxth	r2, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003798:	440b      	add	r3, r1
 800379a:	f823 2c14 	strh.w	r2, [r3, #-20]
 800379e:	e009      	b.n	80037b4 <SpiritRadioSearchChannelBwME+0x104>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 80037a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037aa:	4413      	add	r3, r2
 80037ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80037b0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 80037b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80037b8:	3301      	adds	r3, #1
 80037ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80037be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d9be      	bls.n	8003744 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 80037c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ca:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80037d2:	e028      	b.n	8003826 <SpiritRadioSearchChannelBwME+0x176>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 80037d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037de:	4413      	add	r3, r2
 80037e0:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bfb8      	it	lt
 80037e8:	425b      	neglt	r3, r3
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d914      	bls.n	800381c <SpiritRadioSearchChannelBwME+0x16c>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 80037f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037fc:	4413      	add	r3, r2
 80037fe:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	bfb8      	it	lt
 8003806:	425b      	neglt	r3, r3
 8003808:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 800380a:	7efa      	ldrb	r2, [r7, #27]
 800380c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003810:	4413      	add	r3, r2
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 800381c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003820:	3301      	adds	r3, #1
 8003822:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003826:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800382a:	2b02      	cmp	r3, #2
 800382c:	d9d2      	bls.n	80037d4 <SpiritRadioSearchChannelBwME+0x124>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 800382e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <SpiritRadioSearchChannelBwME+0x1d0>)
 8003834:	fb82 1203 	smull	r1, r2, r2, r3
 8003838:	1052      	asrs	r2, r2, #1
 800383a:	17db      	asrs	r3, r3, #31
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	b25b      	sxtb	r3, r3
 8003840:	b2da      	uxtb	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003846:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <SpiritRadioSearchChannelBwME+0x1d0>)
 800384c:	fb83 1302 	smull	r1, r3, r3, r2
 8003850:	1059      	asrs	r1, r3, #1
 8003852:	17d3      	asrs	r3, r2, #31
 8003854:	1ac9      	subs	r1, r1, r3
 8003856:	460b      	mov	r3, r1
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	440b      	add	r3, r1
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	b25b      	sxtb	r3, r3
 8003860:	b2da      	uxtb	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	701a      	strb	r2, [r3, #0]
  
}
 8003866:	bf00      	nop
 8003868:	3728      	adds	r7, #40	; 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000218 	.word	0x20000218
 8003874:	51eb851f 	.word	0x51eb851f
 8003878:	0800d79c 	.word	0x0800d79c
 800387c:	c9a633fd 	.word	0xc9a633fd
 8003880:	38e38e39 	.word	0x38e38e39

08003884 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003884:	b5b0      	push	{r4, r5, r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <SpiritRadioSearchFreqDevME+0x160>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	ee07 3a90 	vmov	s15, r3
 800389c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038a0:	eddf 6a51 	vldr	s13, [pc, #324]	; 80039e8 <SpiritRadioSearchFreqDevME+0x164>
 80038a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038a8:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038b2:	e028      	b.n	8003906 <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 80038b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b8:	2201      	movs	r2, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fc fe34 	bl	800052c <__aeabi_i2d>
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	4b48      	ldr	r3, [pc, #288]	; (80039ec <SpiritRadioSearchFreqDevME+0x168>)
 80038ca:	f7fc fe99 	bl	8000600 <__aeabi_dmul>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	f7fd f96b 	bl	8000bb0 <__aeabi_d2uiz>
 80038da:	ee07 0a90 	vmov	s15, r0
 80038de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ee:	ee17 3a90 	vmov	r3, s15
 80038f2:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d309      	bcc.n	8003910 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 80038fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003900:	3301      	adds	r3, #1
 8003902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800390a:	2b09      	cmp	r3, #9
 800390c:	d9d2      	bls.n	80038b4 <SpiritRadioSearchFreqDevME+0x30>
 800390e:	e000      	b.n	8003912 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003910:	bf00      	nop
  }
  (*pcE) = i;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003918:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 800391a:	2300      	movs	r3, #0
 800391c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003920:	e043      	b.n	80039aa <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800392a:	4618      	mov	r0, r3
 800392c:	f7fc fdfe 	bl	800052c <__aeabi_i2d>
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <SpiritRadioSearchFreqDevME+0x16c>)
 8003936:	f7fc fcad 	bl	8000294 <__adddf3>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800394a:	f7fc ff83 	bl	8000854 <__aeabi_ddiv>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4614      	mov	r4, r2
 8003954:	461d      	mov	r5, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	2301      	movs	r3, #1
 800395e:	4093      	lsls	r3, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fde3 	bl	800052c <__aeabi_i2d>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4620      	mov	r0, r4
 800396c:	4629      	mov	r1, r5
 800396e:	f7fc fe47 	bl	8000600 <__aeabi_dmul>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f7fd f919 	bl	8000bb0 <__aeabi_d2uiz>
 800397e:	ee07 0a90 	vmov	s15, r0
 8003982:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003986:	edd7 7a06 	vldr	s15, [r7, #24]
 800398a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003992:	ee17 3a90 	vmov	r3, s15
 8003996:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	429a      	cmp	r2, r3
 800399e:	d309      	bcc.n	80039b4 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 80039a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039a4:	3301      	adds	r3, #1
 80039a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ae:	2b07      	cmp	r3, #7
 80039b0:	d9b7      	bls.n	8003922 <SpiritRadioSearchFreqDevME+0x9e>
 80039b2:	e000      	b.n	80039b6 <SpiritRadioSearchFreqDevME+0x132>
      break;
 80039b4:	bf00      	nop
  }
  
  (*pcM)=i;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039bc:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	1ad2      	subs	r2, r2, r3
 80039c4:	69f9      	ldr	r1, [r7, #28]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1acb      	subs	r3, r1, r3
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d205      	bcs.n	80039da <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	701a      	strb	r2, [r3, #0]
  
}
 80039da:	bf00      	nop
 80039dc:	3728      	adds	r7, #40	; 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bdb0      	pop	{r4, r5, r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000218 	.word	0x20000218
 80039e8:	48800000 	.word	0x48800000
 80039ec:	401e0000 	.word	0x401e0000
 80039f0:	40200000 	.word	0x40200000

080039f4 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a74      	ldr	r2, [pc, #464]	; (8003bdc <SpiritRadioGetdBm2Reg+0x1e8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d30c      	bcc.n	8003a2a <SpiritRadioGetdBm2Reg+0x36>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a73      	ldr	r2, [pc, #460]	; (8003be0 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d808      	bhi.n	8003a2a <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a71      	ldr	r2, [pc, #452]	; (8003be4 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d822      	bhi.n	8003a6a <SpiritRadioGetdBm2Reg+0x76>
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
 8003a28:	e01f      	b.n	8003a6a <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <SpiritRadioGetdBm2Reg+0x1f4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d906      	bls.n	8003a40 <SpiritRadioGetdBm2Reg+0x4c>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a6d      	ldr	r2, [pc, #436]	; (8003bec <SpiritRadioGetdBm2Reg+0x1f8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d802      	bhi.n	8003a40 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	75fb      	strb	r3, [r7, #23]
 8003a3e:	e014      	b.n	8003a6a <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a6b      	ldr	r2, [pc, #428]	; (8003bf0 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d906      	bls.n	8003a56 <SpiritRadioGetdBm2Reg+0x62>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a6a      	ldr	r2, [pc, #424]	; (8003bf4 <SpiritRadioGetdBm2Reg+0x200>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d802      	bhi.n	8003a56 <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003a50:	2303      	movs	r3, #3
 8003a52:	75fb      	strb	r3, [r7, #23]
 8003a54:	e009      	b.n	8003a6a <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a67      	ldr	r2, [pc, #412]	; (8003bf8 <SpiritRadioGetdBm2Reg+0x204>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d905      	bls.n	8003a6a <SpiritRadioGetdBm2Reg+0x76>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a66      	ldr	r2, [pc, #408]	; (8003bfc <SpiritRadioGetdBm2Reg+0x208>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d801      	bhi.n	8003a6a <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8003a66:	2304      	movs	r3, #4
 8003a68:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003a6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7a:	dd2f      	ble.n	8003adc <SpiritRadioGetdBm2Reg+0xe8>
 8003a7c:	7dfa      	ldrb	r2, [r7, #23]
 8003a7e:	4960      	ldr	r1, [pc, #384]	; (8003c00 <SpiritRadioGetdBm2Reg+0x20c>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	440b      	add	r3, r1
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	edd3 7a00 	vldr	s15, [r3]
 8003a90:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a98:	7dfa      	ldrb	r2, [r7, #23]
 8003a9a:	4959      	ldr	r1, [pc, #356]	; (8003c00 <SpiritRadioGetdBm2Reg+0x20c>)
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4413      	add	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	440b      	add	r3, r1
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	ed93 6a00 	vldr	s12, [r3]
 8003aac:	7dfa      	ldrb	r2, [r7, #23]
 8003aae:	4954      	ldr	r1, [pc, #336]	; (8003c00 <SpiritRadioGetdBm2Reg+0x20c>)
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	440b      	add	r3, r1
 8003aba:	3308      	adds	r3, #8
 8003abc:	edd3 6a00 	vldr	s13, [r3]
 8003ac0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	dd02      	ble.n	8003adc <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75bb      	strb	r3, [r7, #22]
 8003ada:	e035      	b.n	8003b48 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003adc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	d82e      	bhi.n	8003b48 <SpiritRadioGetdBm2Reg+0x154>
 8003aea:	7dfa      	ldrb	r2, [r7, #23]
 8003aec:	4944      	ldr	r1, [pc, #272]	; (8003c00 <SpiritRadioGetdBm2Reg+0x20c>)
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	440b      	add	r3, r1
 8003af8:	3308      	adds	r3, #8
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003c04 <SpiritRadioGetdBm2Reg+0x210>
 8003b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b06:	7dfa      	ldrb	r2, [r7, #23]
 8003b08:	493d      	ldr	r1, [pc, #244]	; (8003c00 <SpiritRadioGetdBm2Reg+0x20c>)
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	330c      	adds	r3, #12
 8003b16:	ed93 6a00 	vldr	s12, [r3]
 8003b1a:	7dfa      	ldrb	r2, [r7, #23]
 8003b1c:	4938      	ldr	r1, [pc, #224]	; (8003c00 <SpiritRadioGetdBm2Reg+0x20c>)
 8003b1e:	4613      	mov	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4413      	add	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	440b      	add	r3, r1
 8003b28:	3308      	adds	r3, #8
 8003b2a:	edd3 6a00 	vldr	s13, [r3]
 8003b2e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b36:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b42:	d501      	bpl.n	8003b48 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003b44:	2302      	movs	r3, #2
 8003b46:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003b48:	7dfa      	ldrb	r2, [r7, #23]
 8003b4a:	7dbb      	ldrb	r3, [r7, #22]
 8003b4c:	0059      	lsls	r1, r3, #1
 8003b4e:	482c      	ldr	r0, [pc, #176]	; (8003c00 <SpiritRadioGetdBm2Reg+0x20c>)
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	440b      	add	r3, r1
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4403      	add	r3, r0
 8003b5e:	ed93 7a00 	vldr	s14, [r3]
 8003b62:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b6a:	7dfa      	ldrb	r2, [r7, #23]
 8003b6c:	7dbb      	ldrb	r3, [r7, #22]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	1c59      	adds	r1, r3, #1
 8003b72:	4823      	ldr	r0, [pc, #140]	; (8003c00 <SpiritRadioGetdBm2Reg+0x20c>)
 8003b74:	4613      	mov	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	440b      	add	r3, r1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4403      	add	r3, r0
 8003b82:	edd3 7a00 	vldr	s15, [r3]
 8003b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8a:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003b8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	d503      	bpl.n	8003ba8 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003ba0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e00a      	b.n	8003bbe <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003ba8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bac:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003c08 <SpiritRadioGetdBm2Reg+0x214>
 8003bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	dd01      	ble.n	8003bbe <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8003bba:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <SpiritRadioGetdBm2Reg+0x218>)
 8003bbc:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003bbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8003bca:	793b      	ldrb	r3, [r7, #4]
 8003bcc:	b2db      	uxtb	r3, r3
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	2e5f5680 	.word	0x2e5f5680
 8003be0:	390c2fe0 	.word	0x390c2fe0
 8003be4:	35a4e8ff 	.word	0x35a4e8ff
 8003be8:	1701e47f 	.word	0x1701e47f
 8003bec:	1c146a60 	.word	0x1c146a60
 8003bf0:	11d260bf 	.word	0x11d260bf
 8003bf4:	14ced7e0 	.word	0x14ced7e0
 8003bf8:	08e18f3f 	.word	0x08e18f3f
 8003bfc:	0a6fd060 	.word	0x0a6fd060
 8003c00:	0800d870 	.word	0x0800d870
 8003c04:	42200000 	.word	0x42200000
 8003c08:	42b40000 	.word	0x42b40000
 8003c0c:	42b40000 	.word	0x42b40000

08003c10 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	ed87 0a00 	vstr	s0, [r7]
 8003c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003c1e:	f7ff fc45 	bl	80034ac <SpiritRadioGetFrequencyBase>
 8003c22:	4603      	mov	r3, r0
 8003c24:	ed97 0a00 	vldr	s0, [r7]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fee3 	bl	80039f4 <SpiritRadioGetdBm2Reg>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	f1c3 0317 	rsb	r3, r3, #23
 8003c38:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003c3a:	f107 020e 	add.w	r2, r7, #14
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2101      	movs	r1, #1
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f9f0 	bl	8004028 <RadioSpiWriteRegisters>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <SpiritRadioSetPALeveldBm+0x50>)
 8003c4c:	b212      	sxth	r2, r2
 8003c4e:	4611      	mov	r1, r2
 8003c50:	7019      	strb	r1, [r3, #0]
 8003c52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c56:	705a      	strb	r2, [r3, #1]
  
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000344 	.word	0x20000344

08003c64 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003c6e:	f107 030f 	add.w	r3, r7, #15
 8003c72:	461a      	mov	r2, r3
 8003c74:	2101      	movs	r1, #1
 8003c76:	2018      	movs	r0, #24
 8003c78:	f000 fa24 	bl	80040c4 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003c90:	f107 030f 	add.w	r3, r7, #15
 8003c94:	461a      	mov	r2, r3
 8003c96:	2101      	movs	r1, #1
 8003c98:	2018      	movs	r0, #24
 8003c9a:	f000 f9c5 	bl	8004028 <RadioSpiWriteRegisters>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <SpiritRadioSetPACwc+0x54>)
 8003ca2:	b212      	sxth	r2, r2
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	7019      	strb	r1, [r3, #0]
 8003ca8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003cac:	705a      	strb	r2, [r3, #1]
  
}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000344 	.word	0x20000344

08003cbc <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003cc6:	f107 030f 	add.w	r3, r7, #15
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2101      	movs	r1, #1
 8003cce:	2018      	movs	r0, #24
 8003cd0:	f000 f9f8 	bl	80040c4 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	f023 0307 	bic.w	r3, r3, #7
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003ce8:	f107 030f 	add.w	r3, r7, #15
 8003cec:	461a      	mov	r2, r3
 8003cee:	2101      	movs	r1, #1
 8003cf0:	2018      	movs	r0, #24
 8003cf2:	f000 f999 	bl	8004028 <RadioSpiWriteRegisters>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003cfa:	b212      	sxth	r2, r2
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	7019      	strb	r1, [r3, #0]
 8003d00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d04:	705a      	strb	r2, [r3, #1]
  
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000344 	.word	0x20000344

08003d14 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003d22:	f107 030f 	add.w	r3, r7, #15
 8003d26:	461a      	mov	r2, r3
 8003d28:	2101      	movs	r1, #1
 8003d2a:	201e      	movs	r0, #30
 8003d2c:	f000 f9ca 	bl	80040c4 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	73fb      	strb	r3, [r7, #15]
 8003d40:	e004      	b.n	8003d4c <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003d4c:	f107 030f 	add.w	r3, r7, #15
 8003d50:	461a      	mov	r2, r3
 8003d52:	2101      	movs	r1, #1
 8003d54:	201e      	movs	r0, #30
 8003d56:	f000 f967 	bl	8004028 <RadioSpiWriteRegisters>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <SpiritRadioAFCFreezeOnSync+0x60>)
 8003d5e:	b212      	sxth	r2, r2
 8003d60:	4611      	mov	r1, r2
 8003d62:	7019      	strb	r1, [r3, #0]
 8003d64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d68:	705a      	strb	r2, [r3, #1]
  
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000344 	.word	0x20000344

08003d78 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003d82:	f107 030f 	add.w	r3, r7, #15
 8003d86:	461a      	mov	r2, r3
 8003d88:	2101      	movs	r1, #1
 8003d8a:	209e      	movs	r0, #158	; 0x9e
 8003d8c:	f000 f99a 	bl	80040c4 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d105      	bne.n	8003da2 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e004      	b.n	8003dac <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003dac:	f107 030f 	add.w	r3, r7, #15
 8003db0:	461a      	mov	r2, r3
 8003db2:	2101      	movs	r1, #1
 8003db4:	209e      	movs	r0, #158	; 0x9e
 8003db6:	f000 f937 	bl	8004028 <RadioSpiWriteRegisters>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <SpiritRadioSetRefDiv+0x5c>)
 8003dbe:	b212      	sxth	r2, r2
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	7019      	strb	r1, [r3, #0]
 8003dc4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003dc8:	705a      	strb	r2, [r3, #1]
  
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000344 	.word	0x20000344

08003dd8 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003dde:	1dfb      	adds	r3, r7, #7
 8003de0:	461a      	mov	r2, r3
 8003de2:	2101      	movs	r1, #1
 8003de4:	209e      	movs	r0, #158	; 0x9e
 8003de6:	f000 f96d 	bl	80040c4 <RadioSpiReadRegisters>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <SpiritRadioGetRefDiv+0x40>)
 8003dee:	b212      	sxth	r2, r2
 8003df0:	4611      	mov	r1, r2
 8003df2:	7019      	strb	r1, [r3, #0]
 8003df4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003df8:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	09db      	lsrs	r3, r3, #7
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003e0c:	2300      	movs	r3, #0
  }
  
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000344 	.word	0x20000344

08003e1c <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003e26:	f107 030f 	add.w	r3, r7, #15
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	20b4      	movs	r0, #180	; 0xb4
 8003e30:	f000 f948 	bl	80040c4 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d105      	bne.n	8003e46 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	f023 0308 	bic.w	r3, r3, #8
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	73fb      	strb	r3, [r7, #15]
 8003e44:	e004      	b.n	8003e50 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	f043 0308 	orr.w	r3, r3, #8
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003e50:	f107 030f 	add.w	r3, r7, #15
 8003e54:	461a      	mov	r2, r3
 8003e56:	2101      	movs	r1, #1
 8003e58:	20b4      	movs	r0, #180	; 0xb4
 8003e5a:	f000 f8e5 	bl	8004028 <RadioSpiWriteRegisters>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <SpiritRadioSetDigDiv+0x5c>)
 8003e62:	b212      	sxth	r2, r2
 8003e64:	4611      	mov	r1, r2
 8003e66:	7019      	strb	r1, [r3, #0]
 8003e68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e6c:	705a      	strb	r2, [r3, #1]
  
}
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000344 	.word	0x20000344

08003e7c <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003e82:	1dfb      	adds	r3, r7, #7
 8003e84:	461a      	mov	r2, r3
 8003e86:	2101      	movs	r1, #1
 8003e88:	20b4      	movs	r0, #180	; 0xb4
 8003e8a:	f000 f91b 	bl	80040c4 <RadioSpiReadRegisters>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <SpiritRadioGetDigDiv+0x40>)
 8003e92:	b212      	sxth	r2, r2
 8003e94:	4611      	mov	r1, r2
 8003e96:	7019      	strb	r1, [r3, #0]
 8003e98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e9c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	08db      	lsrs	r3, r3, #3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003eb0:	2301      	movs	r3, #1
  }
  
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000344 	.word	0x20000344

08003ec0 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <SpiritRadioGetXtalFrequency+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000218 	.word	0x20000218

08003ed8 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <SpiritRadioSetXtalFrequency+0x1c>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000218 	.word	0x20000218

08003ef8 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8003f02:	1dfb      	adds	r3, r7, #7
 8003f04:	461a      	mov	r2, r3
 8003f06:	2101      	movs	r1, #1
 8003f08:	2054      	movs	r0, #84	; 0x54
 8003f0a:	f000 f88d 	bl	8004028 <RadioSpiWriteRegisters>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <SpiritTimerSetRxTimeoutCounter+0x30>)
 8003f12:	b212      	sxth	r2, r2
 8003f14:	4611      	mov	r1, r2
 8003f16:	7019      	strb	r1, [r3, #0]
 8003f18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f1c:	705a      	strb	r2, [r3, #1]

}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000344 	.word	0x20000344

08003f2c <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003f36:	f107 030c 	add.w	r3, r7, #12
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	204f      	movs	r0, #79	; 0x4f
 8003f40:	f000 f8c0 	bl	80040c4 <RadioSpiReadRegisters>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003f48:	b212      	sxth	r2, r2
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	7019      	strb	r1, [r3, #0]
 8003f4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f52:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003f54:	7b3b      	ldrb	r3, [r7, #12]
 8003f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8003f5e:	7b3b      	ldrb	r3, [r7, #12]
 8003f60:	b25a      	sxtb	r2, r3
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	b25b      	sxtb	r3, r3
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	b25b      	sxtb	r3, r3
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003f76:	7b7b      	ldrb	r3, [r7, #13]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8003f80:	7b7b      	ldrb	r3, [r7, #13]
 8003f82:	b25a      	sxtb	r2, r3
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	015b      	lsls	r3, r3, #5
 8003f88:	b25b      	sxtb	r3, r3
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003f92:	f107 030c 	add.w	r3, r7, #12
 8003f96:	461a      	mov	r2, r3
 8003f98:	2102      	movs	r1, #2
 8003f9a:	204f      	movs	r0, #79	; 0x4f
 8003f9c:	f000 f844 	bl	8004028 <RadioSpiWriteRegisters>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003fa4:	b212      	sxth	r2, r2
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	7019      	strb	r1, [r3, #0]
 8003faa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003fae:	705a      	strb	r2, [r3, #1]

}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000344 	.word	0x20000344

08003fbc <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	20c0      	movs	r0, #192	; 0xc0
 8003fca:	f000 f87b 	bl	80040c4 <RadioSpiReadRegisters>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <SpiritRefreshStatus+0x44>)
 8003fd2:	b212      	sxth	r2, r2
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	7019      	strb	r1, [r3, #0]
 8003fd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003fdc:	705a      	strb	r2, [r3, #1]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003fde:	4b08      	ldr	r3, [pc, #32]	; (8004000 <SpiritRefreshStatus+0x44>)
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d1ec      	bne.n	8003fc2 <SpiritRefreshStatus+0x6>
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <SpiritRefreshStatus+0x48>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d1e5      	bne.n	8003fc2 <SpiritRefreshStatus+0x6>

}
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000344 	.word	0x20000344
 8004004:	20000345 	.word	0x20000345

08004008 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <RadioSpiInit+0x1c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <RadioSpiInit+0x16>
  {
    Error_Handler();
 800401a:	f7fd fc6f 	bl	80018fc <Error_Handler>
  }
}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000010 	.word	0x20000010

08004028 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	4603      	mov	r3, r0
 8004030:	603a      	str	r2, [r7, #0]
 8004032:	71fb      	strb	r3, [r7, #7]
 8004034:	460b      	mov	r3, r1
 8004036:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8004038:	2300      	movs	r3, #0
 800403a:	743b      	strb	r3, [r7, #16]
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004040:	2012      	movs	r0, #18
 8004042:	f000 fb4e 	bl	80046e2 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8004046:	2200      	movs	r2, #0
 8004048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800404c:	481b      	ldr	r0, [pc, #108]	; (80040bc <RadioSpiWriteRegisters+0x94>)
 800404e:	f000 fd53 	bl	8004af8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <RadioSpiWriteRegisters+0x98>)
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	f107 020c 	add.w	r2, r7, #12
 800405a:	f107 0110 	add.w	r1, r7, #16
 800405e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2302      	movs	r3, #2
 8004066:	f004 ffbf 	bl	8008fe8 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800406a:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <RadioSpiWriteRegisters+0x98>)
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	79bb      	ldrb	r3, [r7, #6]
 8004070:	b29a      	uxth	r2, r3
 8004072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004076:	6839      	ldr	r1, [r7, #0]
 8004078:	f004 fb7c 	bl	8008774 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800407c:	2201      	movs	r2, #1
 800407e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004082:	480e      	ldr	r0, [pc, #56]	; (80040bc <RadioSpiWriteRegisters+0x94>)
 8004084:	f000 fd38 	bl	8004af8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004088:	2012      	movs	r0, #18
 800408a:	f000 fb1c 	bl	80046c6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800408e:	f107 0308 	add.w	r3, r7, #8
 8004092:	3301      	adds	r3, #1
 8004094:	7b3a      	ldrb	r2, [r7, #12]
 8004096:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004098:	f107 0308 	add.w	r3, r7, #8
 800409c:	7b7a      	ldrb	r2, [r7, #13]
 800409e:	701a      	strb	r2, [r3, #0]

  return status;
 80040a0:	893b      	ldrh	r3, [r7, #8]
 80040a2:	82bb      	strh	r3, [r7, #20]
 80040a4:	2300      	movs	r3, #0
 80040a6:	7d3a      	ldrb	r2, [r7, #20]
 80040a8:	f362 0307 	bfi	r3, r2, #0, #8
 80040ac:	7d7a      	ldrb	r2, [r7, #21]
 80040ae:	f362 230f 	bfi	r3, r2, #8, #8

}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	42021000 	.word	0x42021000
 80040c0:	20000010 	.word	0x20000010

080040c4 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	4603      	mov	r3, r0
 80040cc:	603a      	str	r2, [r7, #0]
 80040ce:	71fb      	strb	r3, [r7, #7]
 80040d0:	460b      	mov	r3, r1
 80040d2:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 80040d4:	2301      	movs	r3, #1
 80040d6:	743b      	strb	r3, [r7, #16]
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80040dc:	2012      	movs	r0, #18
 80040de:	f000 fb00 	bl	80046e2 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80040e2:	2200      	movs	r2, #0
 80040e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040e8:	481b      	ldr	r0, [pc, #108]	; (8004158 <RadioSpiReadRegisters+0x94>)
 80040ea:	f000 fd05 	bl	8004af8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80040ee:	4b1b      	ldr	r3, [pc, #108]	; (800415c <RadioSpiReadRegisters+0x98>)
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	f107 020c 	add.w	r2, r7, #12
 80040f6:	f107 0110 	add.w	r1, r7, #16
 80040fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2302      	movs	r3, #2
 8004102:	f004 ff71 	bl	8008fe8 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <RadioSpiReadRegisters+0x98>)
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	79bb      	ldrb	r3, [r7, #6]
 800410c:	b29a      	uxth	r2, r3
 800410e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004112:	6839      	ldr	r1, [r7, #0]
 8004114:	f004 fd40 	bl	8008b98 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004118:	2201      	movs	r2, #1
 800411a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800411e:	480e      	ldr	r0, [pc, #56]	; (8004158 <RadioSpiReadRegisters+0x94>)
 8004120:	f000 fcea 	bl	8004af8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004124:	2012      	movs	r0, #18
 8004126:	f000 face 	bl	80046c6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800412a:	f107 0308 	add.w	r3, r7, #8
 800412e:	3301      	adds	r3, #1
 8004130:	7b3a      	ldrb	r2, [r7, #12]
 8004132:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004134:	f107 0308 	add.w	r3, r7, #8
 8004138:	7b7a      	ldrb	r2, [r7, #13]
 800413a:	701a      	strb	r2, [r3, #0]

  return status;
 800413c:	893b      	ldrh	r3, [r7, #8]
 800413e:	82bb      	strh	r3, [r7, #20]
 8004140:	2300      	movs	r3, #0
 8004142:	7d3a      	ldrb	r2, [r7, #20]
 8004144:	f362 0307 	bfi	r3, r2, #0, #8
 8004148:	7d7a      	ldrb	r2, [r7, #21]
 800414a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	42021000 	.word	0x42021000
 800415c:	20000010 	.word	0x20000010

08004160 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af02      	add	r7, sp, #8
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	743b      	strb	r3, [r7, #16]
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004172:	2012      	movs	r0, #18
 8004174:	f000 fab5 	bl	80046e2 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004178:	2200      	movs	r2, #0
 800417a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800417e:	4817      	ldr	r0, [pc, #92]	; (80041dc <RadioSpiCommandStrobes+0x7c>)
 8004180:	f000 fcba 	bl	8004af8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004184:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <RadioSpiCommandStrobes+0x80>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	f107 020c 	add.w	r2, r7, #12
 800418c:	f107 0110 	add.w	r1, r7, #16
 8004190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2302      	movs	r3, #2
 8004198:	f004 ff26 	bl	8008fe8 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800419c:	2201      	movs	r2, #1
 800419e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041a2:	480e      	ldr	r0, [pc, #56]	; (80041dc <RadioSpiCommandStrobes+0x7c>)
 80041a4:	f000 fca8 	bl	8004af8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80041a8:	2012      	movs	r0, #18
 80041aa:	f000 fa8c 	bl	80046c6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80041ae:	f107 0308 	add.w	r3, r7, #8
 80041b2:	3301      	adds	r3, #1
 80041b4:	7b3a      	ldrb	r2, [r7, #12]
 80041b6:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80041b8:	f107 0308 	add.w	r3, r7, #8
 80041bc:	7b7a      	ldrb	r2, [r7, #13]
 80041be:	701a      	strb	r2, [r3, #0]

  return status;
 80041c0:	893b      	ldrh	r3, [r7, #8]
 80041c2:	82bb      	strh	r3, [r7, #20]
 80041c4:	2300      	movs	r3, #0
 80041c6:	7d3a      	ldrb	r2, [r7, #20]
 80041c8:	f362 0307 	bfi	r3, r2, #0, #8
 80041cc:	7d7a      	ldrb	r2, [r7, #21]
 80041ce:	f362 230f 	bfi	r3, r2, #8, #8
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	42021000 	.word	0x42021000
 80041e0:	20000010 	.word	0x20000010

080041e4 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	4603      	mov	r3, r0
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 80041f0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80041f4:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80041f6:	2012      	movs	r0, #18
 80041f8:	f000 fa73 	bl	80046e2 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80041fc:	2200      	movs	r2, #0
 80041fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004202:	481b      	ldr	r0, [pc, #108]	; (8004270 <RadioSpiWriteFifo+0x8c>)
 8004204:	f000 fc78 	bl	8004af8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <RadioSpiWriteFifo+0x90>)
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	f107 020c 	add.w	r2, r7, #12
 8004210:	f107 0110 	add.w	r1, r7, #16
 8004214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	2302      	movs	r3, #2
 800421c:	f004 fee4 	bl	8008fe8 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <RadioSpiWriteFifo+0x90>)
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	b29a      	uxth	r2, r3
 8004228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	f004 faa1 	bl	8008774 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004232:	2201      	movs	r2, #1
 8004234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004238:	480d      	ldr	r0, [pc, #52]	; (8004270 <RadioSpiWriteFifo+0x8c>)
 800423a:	f000 fc5d 	bl	8004af8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800423e:	2012      	movs	r0, #18
 8004240:	f000 fa41 	bl	80046c6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004244:	f107 0308 	add.w	r3, r7, #8
 8004248:	3301      	adds	r3, #1
 800424a:	7b3a      	ldrb	r2, [r7, #12]
 800424c:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	7b7a      	ldrb	r2, [r7, #13]
 8004254:	701a      	strb	r2, [r3, #0]

  return status;
 8004256:	893b      	ldrh	r3, [r7, #8]
 8004258:	82bb      	strh	r3, [r7, #20]
 800425a:	2300      	movs	r3, #0
 800425c:	7d3a      	ldrb	r2, [r7, #20]
 800425e:	f362 0307 	bfi	r3, r2, #0, #8
 8004262:	7d7a      	ldrb	r2, [r7, #21]
 8004264:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	42021000 	.word	0x42021000
 8004274:	20000010 	.word	0x20000010

08004278 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af02      	add	r7, sp, #8
 800427e:	4603      	mov	r3, r0
 8004280:	6039      	str	r1, [r7, #0]
 8004282:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8004284:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004288:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800428a:	2012      	movs	r0, #18
 800428c:	f000 fa29 	bl	80046e2 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004290:	2200      	movs	r2, #0
 8004292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004296:	481b      	ldr	r0, [pc, #108]	; (8004304 <RadioSpiReadFifo+0x8c>)
 8004298:	f000 fc2e 	bl	8004af8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <RadioSpiReadFifo+0x90>)
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	f107 020c 	add.w	r2, r7, #12
 80042a4:	f107 0110 	add.w	r1, r7, #16
 80042a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2302      	movs	r3, #2
 80042b0:	f004 fe9a 	bl	8008fe8 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80042b4:	4b14      	ldr	r3, [pc, #80]	; (8004308 <RadioSpiReadFifo+0x90>)
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042c0:	6839      	ldr	r1, [r7, #0]
 80042c2:	f004 fc69 	bl	8008b98 <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 80042c6:	2201      	movs	r2, #1
 80042c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042cc:	480d      	ldr	r0, [pc, #52]	; (8004304 <RadioSpiReadFifo+0x8c>)
 80042ce:	f000 fc13 	bl	8004af8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80042d2:	2012      	movs	r0, #18
 80042d4:	f000 f9f7 	bl	80046c6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80042d8:	f107 0308 	add.w	r3, r7, #8
 80042dc:	3301      	adds	r3, #1
 80042de:	7b3a      	ldrb	r2, [r7, #12]
 80042e0:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80042e2:	f107 0308 	add.w	r3, r7, #8
 80042e6:	7b7a      	ldrb	r2, [r7, #13]
 80042e8:	701a      	strb	r2, [r3, #0]

  return status;
 80042ea:	893b      	ldrh	r3, [r7, #8]
 80042ec:	82bb      	strh	r3, [r7, #20]
 80042ee:	2300      	movs	r3, #0
 80042f0:	7d3a      	ldrb	r2, [r7, #20]
 80042f2:	f362 0307 	bfi	r3, r2, #0, #8
 80042f6:	7d7a      	ldrb	r2, [r7, #21]
 80042f8:	f362 230f 	bfi	r3, r2, #8, #8
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	42021000 	.word	0x42021000
 8004308:	20000010 	.word	0x20000010

0800430c <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8004310:	2201      	movs	r2, #1
 8004312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004316:	4802      	ldr	r0, [pc, #8]	; (8004320 <RadioEnterShutdown+0x14>)
 8004318:	f000 fbee 	bl	8004af8 <HAL_GPIO_WritePin>
}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}
 8004320:	42020000 	.word	0x42020000

08004324 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 8004328:	2200      	movs	r2, #0
 800432a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800432e:	4804      	ldr	r0, [pc, #16]	; (8004340 <RadioExitShutdown+0x1c>)
 8004330:	f000 fbe2 	bl	8004af8 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 8004334:	2001      	movs	r0, #1
 8004336:	f000 f889 	bl	800444c <HAL_Delay>
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	42020000 	.word	0x42020000

08004344 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <HAL_Init+0x4c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a10      	ldr	r2, [pc, #64]	; (8004390 <HAL_Init+0x4c>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004354:	2003      	movs	r0, #3
 8004356:	f000 f991 	bl	800467c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800435a:	f001 fc95 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 800435e:	4602      	mov	r2, r0
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_Init+0x50>)
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	490b      	ldr	r1, [pc, #44]	; (8004398 <HAL_Init+0x54>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
 8004370:	4a0a      	ldr	r2, [pc, #40]	; (800439c <HAL_Init+0x58>)
 8004372:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004374:	200f      	movs	r0, #15
 8004376:	f000 f813 	bl	80043a0 <HAL_InitTick>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e002      	b.n	800438a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004384:	f7fd fac0 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40022000 	.word	0x40022000
 8004394:	46020c00 	.word	0x46020c00
 8004398:	0800d734 	.word	0x0800d734
 800439c:	20000008 	.word	0x20000008

080043a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80043a8:	4b15      	ldr	r3, [pc, #84]	; (8004400 <HAL_InitTick+0x60>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e021      	b.n	80043f8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_InitTick+0x64>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <HAL_InitTick+0x60>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	4619      	mov	r1, r3
 80043be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f997 	bl	80046fe <HAL_SYSTICK_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e00e      	b.n	80043f8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b0f      	cmp	r3, #15
 80043de:	d80a      	bhi.n	80043f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043e0:	2200      	movs	r2, #0
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	f000 f953 	bl	8004692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043ec:	4a06      	ldr	r2, [pc, #24]	; (8004408 <HAL_InitTick+0x68>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000018 	.word	0x20000018
 8004404:	20000008 	.word	0x20000008
 8004408:	20000014 	.word	0x20000014

0800440c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_IncTick+0x20>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_IncTick+0x24>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4413      	add	r3, r2
 800441c:	4a04      	ldr	r2, [pc, #16]	; (8004430 <HAL_IncTick+0x24>)
 800441e:	6013      	str	r3, [r2, #0]
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000018 	.word	0x20000018
 8004430:	20000348 	.word	0x20000348

08004434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return uwTick;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_GetTick+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000348 	.word	0x20000348

0800444c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004454:	f7ff ffee 	bl	8004434 <HAL_GetTick>
 8004458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d005      	beq.n	8004472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <HAL_Delay+0x44>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004472:	bf00      	nop
 8004474:	f7ff ffde 	bl	8004434 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	429a      	cmp	r2, r3
 8004482:	d8f7      	bhi.n	8004474 <HAL_Delay+0x28>
  {
  }
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000018 	.word	0x20000018

08004494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <__NVIC_SetPriorityGrouping+0x44>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044b0:	4013      	ands	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044c6:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <__NVIC_SetPriorityGrouping+0x44>)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	60d3      	str	r3, [r2, #12]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e0:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <__NVIC_GetPriorityGrouping+0x18>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	f003 0307 	and.w	r3, r3, #7
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	2b00      	cmp	r3, #0
 8004508:	db0b      	blt.n	8004522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	f003 021f 	and.w	r2, r3, #31
 8004510:	4907      	ldr	r1, [pc, #28]	; (8004530 <__NVIC_EnableIRQ+0x38>)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2001      	movs	r0, #1
 800451a:	fa00 f202 	lsl.w	r2, r0, r2
 800451e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000e100 	.word	0xe000e100

08004534 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	2b00      	cmp	r3, #0
 8004544:	db12      	blt.n	800456c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	f003 021f 	and.w	r2, r3, #31
 800454c:	490a      	ldr	r1, [pc, #40]	; (8004578 <__NVIC_DisableIRQ+0x44>)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2001      	movs	r0, #1
 8004556:	fa00 f202 	lsl.w	r2, r0, r2
 800455a:	3320      	adds	r3, #32
 800455c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004560:	f3bf 8f4f 	dsb	sy
}
 8004564:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004566:	f3bf 8f6f 	isb	sy
}
 800456a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100

0800457c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	6039      	str	r1, [r7, #0]
 8004586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458c:	2b00      	cmp	r3, #0
 800458e:	db0a      	blt.n	80045a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	490c      	ldr	r1, [pc, #48]	; (80045c8 <__NVIC_SetPriority+0x4c>)
 8004596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	440b      	add	r3, r1
 80045a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a4:	e00a      	b.n	80045bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	4908      	ldr	r1, [pc, #32]	; (80045cc <__NVIC_SetPriority+0x50>)
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	3b04      	subs	r3, #4
 80045b4:	0112      	lsls	r2, r2, #4
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	440b      	add	r3, r1
 80045ba:	761a      	strb	r2, [r3, #24]
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	e000e100 	.word	0xe000e100
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f1c3 0307 	rsb	r3, r3, #7
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	bf28      	it	cs
 80045ee:	2304      	movcs	r3, #4
 80045f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2b06      	cmp	r3, #6
 80045f8:	d902      	bls.n	8004600 <NVIC_EncodePriority+0x30>
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3b03      	subs	r3, #3
 80045fe:	e000      	b.n	8004602 <NVIC_EncodePriority+0x32>
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004604:	f04f 32ff 	mov.w	r2, #4294967295
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43da      	mvns	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	401a      	ands	r2, r3
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004618:	f04f 31ff 	mov.w	r1, #4294967295
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	43d9      	mvns	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004628:	4313      	orrs	r3, r2
         );
}
 800462a:	4618      	mov	r0, r3
 800462c:	3724      	adds	r7, #36	; 0x24
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3b01      	subs	r3, #1
 8004644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004648:	d301      	bcc.n	800464e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800464a:	2301      	movs	r3, #1
 800464c:	e00f      	b.n	800466e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <SysTick_Config+0x40>)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3b01      	subs	r3, #1
 8004654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004656:	210f      	movs	r1, #15
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	f7ff ff8e 	bl	800457c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <SysTick_Config+0x40>)
 8004662:	2200      	movs	r2, #0
 8004664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <SysTick_Config+0x40>)
 8004668:	2207      	movs	r2, #7
 800466a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	e000e010 	.word	0xe000e010

0800467c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ff05 	bl	8004494 <__NVIC_SetPriorityGrouping>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b086      	sub	sp, #24
 8004696:	af00      	add	r7, sp, #0
 8004698:	4603      	mov	r3, r0
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046a0:	f7ff ff1c 	bl	80044dc <__NVIC_GetPriorityGrouping>
 80046a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ff90 	bl	80045d0 <NVIC_EncodePriority>
 80046b0:	4602      	mov	r2, r0
 80046b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff5f 	bl	800457c <__NVIC_SetPriority>
}
 80046be:	bf00      	nop
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	4603      	mov	r3, r0
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff0f 	bl	80044f8 <__NVIC_EnableIRQ>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	4603      	mov	r3, r0
 80046ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff1f 	bl	8004534 <__NVIC_DisableIRQ>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ff96 	bl	8004638 <SysTick_Config>
 800470c:	4603      	mov	r3, r0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800472a:	e1ba      	b.n	8004aa2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	4013      	ands	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 81aa 	beq.w	8004a9c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a55      	ldr	r2, [pc, #340]	; (80048a0 <HAL_GPIO_Init+0x188>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d15d      	bne.n	800480c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004756:	2201      	movs	r2, #1
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43db      	mvns	r3, r3
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	4013      	ands	r3, r2
 8004764:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 0201 	and.w	r2, r3, #1
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	4313      	orrs	r3, r2
 8004778:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004780:	4a48      	ldr	r2, [pc, #288]	; (80048a4 <HAL_GPIO_Init+0x18c>)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004788:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800478a:	4a46      	ldr	r2, [pc, #280]	; (80048a4 <HAL_GPIO_Init+0x18c>)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3208      	adds	r2, #8
 800479e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	220f      	movs	r2, #15
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	4013      	ands	r3, r2
 80047b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	220b      	movs	r2, #11
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	08da      	lsrs	r2, r3, #3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3208      	adds	r2, #8
 80047d6:	69f9      	ldr	r1, [r7, #28]
 80047d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	2203      	movs	r2, #3
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	2202      	movs	r2, #2
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	4313      	orrs	r3, r2
 8004802:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e067      	b.n	80048dc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d003      	beq.n	800481c <HAL_GPIO_Init+0x104>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b12      	cmp	r3, #18
 800481a:	d145      	bne.n	80048a8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	08da      	lsrs	r2, r3, #3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3208      	adds	r2, #8
 8004824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004828:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	220f      	movs	r2, #15
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	4013      	ands	r3, r2
 800483e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 020f 	and.w	r2, r3, #15
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	4313      	orrs	r3, r2
 8004858:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	08da      	lsrs	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3208      	adds	r2, #8
 8004862:	69f9      	ldr	r1, [r7, #28]
 8004864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	2203      	movs	r2, #3
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	4013      	ands	r3, r2
 800487e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 0203 	and.w	r2, r3, #3
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	4313      	orrs	r3, r2
 8004894:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e01e      	b.n	80048dc <HAL_GPIO_Init+0x1c4>
 800489e:	bf00      	nop
 80048a0:	46020000 	.word	0x46020000
 80048a4:	0800d8e8 	.word	0x0800d8e8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	2203      	movs	r2, #3
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	4013      	ands	r3, r2
 80048be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0203 	and.w	r2, r3, #3
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d00b      	beq.n	80048fc <HAL_GPIO_Init+0x1e4>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d007      	beq.n	80048fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048f0:	2b11      	cmp	r3, #17
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b12      	cmp	r3, #18
 80048fa:	d130      	bne.n	800495e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	2203      	movs	r2, #3
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	4013      	ands	r3, r2
 8004912:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	4313      	orrs	r3, r2
 8004924:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004932:	2201      	movs	r2, #1
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	4013      	ands	r3, r2
 8004940:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 0201 	and.w	r2, r3, #1
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	4313      	orrs	r3, r2
 8004956:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d017      	beq.n	8004996 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	2203      	movs	r2, #3
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	4013      	ands	r3, r2
 800497c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	4313      	orrs	r3, r2
 800498e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d07c      	beq.n	8004a9c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80049a2:	4a47      	ldr	r2, [pc, #284]	; (8004ac0 <HAL_GPIO_Init+0x3a8>)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3318      	adds	r3, #24
 80049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	220f      	movs	r2, #15
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	0a9a      	lsrs	r2, r3, #10
 80049ca:	4b3e      	ldr	r3, [pc, #248]	; (8004ac4 <HAL_GPIO_Init+0x3ac>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	f002 0203 	and.w	r2, r2, #3
 80049d4:	00d2      	lsls	r2, r2, #3
 80049d6:	4093      	lsls	r3, r2
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80049de:	4938      	ldr	r1, [pc, #224]	; (8004ac0 <HAL_GPIO_Init+0x3a8>)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	3318      	adds	r3, #24
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80049ec:	4b34      	ldr	r3, [pc, #208]	; (8004ac0 <HAL_GPIO_Init+0x3a8>)
 80049ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_Init+0x2fa>
        {
          tmp |= iocurrent;
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004a12:	4a2b      	ldr	r2, [pc, #172]	; (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        tmp = EXTI->EMR1;
 8004a1a:	4b29      	ldr	r3, [pc, #164]	; (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a20:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x328>
        {
          tmp |= iocurrent;
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004a40:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x354>
        {
          tmp |= iocurrent;
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004a6c:	4a14      	ldr	r2, [pc, #80]	; (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x37e>
        {
          tmp |= iocurrent;
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <HAL_GPIO_Init+0x3a8>)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	6053      	str	r3, [r2, #4]
      }
    }
    position++;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f47f ae3d 	bne.w	800472c <HAL_GPIO_Init+0x14>
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	3724      	adds	r7, #36	; 0x24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	46022000 	.word	0x46022000
 8004ac4:	002f7f7f 	.word	0x002f7f7f

08004ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	887b      	ldrh	r3, [r7, #2]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
 8004ae4:	e001      	b.n	8004aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
 8004b04:	4613      	mov	r3, r2
 8004b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b08:	787b      	ldrb	r3, [r7, #1]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b0e:	887a      	ldrh	r2, [r7, #2]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004b14:	e002      	b.n	8004b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004b32:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d006      	beq.n	8004b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004b3e:	4a0c      	ldr	r2, [pc, #48]	; (8004b70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f814 	bl	8004b74 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d006      	beq.n	8004b66 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004b58:	4a05      	ldr	r2, [pc, #20]	; (8004b70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f812 	bl	8004b8a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	46022000 	.word	0x46022000

08004b74 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	4603      	mov	r3, r0
 8004b92:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004ba8:	4b34      	ldr	r3, [pc, #208]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bb0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d101      	bne.n	8004bbe <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e057      	b.n	8004c6e <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d90a      	bls.n	8004bdc <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	4a2a      	ldr	r2, [pc, #168]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd8:	60d3      	str	r3, [r2, #12]
 8004bda:	e007      	b.n	8004bec <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004bdc:	4b27      	ldr	r3, [pc, #156]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004be4:	4925      	ldr	r1, [pc, #148]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is rised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a24      	ldr	r2, [pc, #144]	; (8004c84 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	099b      	lsrs	r3, r3, #6
 8004bf8:	2232      	movs	r2, #50	; 0x32
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	4a21      	ldr	r2, [pc, #132]	; (8004c84 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	099b      	lsrs	r3, r3, #6
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004c0a:	e002      	b.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004c12:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <HAL_PWREx_ControlVoltageScaling+0x84>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f3      	bne.n	8004c0c <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01b      	beq.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is rised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	099b      	lsrs	r3, r3, #6
 8004c36:	2232      	movs	r2, #50	; 0x32
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	099b      	lsrs	r3, r3, #6
 8004c44:	3301      	adds	r3, #1
 8004c46:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004c48:	e002      	b.n	8004c50 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f3      	bne.n	8004c4a <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e000      	b.n	8004c6e <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	46020800 	.word	0x46020800
 8004c80:	20000008 	.word	0x20000008
 8004c84:	10624dd3 	.word	0x10624dd3

08004c88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	46020800 	.word	0x46020800

08004ca4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cb2:	6113      	str	r3, [r2, #16]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	46020800 	.word	0x46020800

08004cc4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	46020800 	.word	0x46020800

08004ce4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	; 0x30
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004cec:	2300      	movs	r3, #0
 8004cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f000 be58 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cfe:	4ba2      	ldr	r3, [pc, #648]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d08:	4b9f      	ldr	r3, [pc, #636]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 816f 	beq.w	8004ffe <HAL_RCC_OscConfig+0x31a>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <HAL_RCC_OscConfig+0x52>
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	f040 80e1 	bne.w	8004ef0 <HAL_RCC_OscConfig+0x20c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	f040 80dd 	bne.w	8004ef0 <HAL_RCC_OscConfig+0x20c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d36:	4b94      	ldr	r3, [pc, #592]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d006      	beq.n	8004d50 <HAL_RCC_OscConfig+0x6c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f000 be2f 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d54:	4b8c      	ldr	r3, [pc, #560]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <HAL_RCC_OscConfig+0x86>
 8004d60:	4b89      	ldr	r3, [pc, #548]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d68:	e005      	b.n	8004d76 <HAL_RCC_OscConfig+0x92>
 8004d6a:	4b87      	ldr	r3, [pc, #540]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d70:	041b      	lsls	r3, r3, #16
 8004d72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d255      	bcs.n	8004e26 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 f8dd 	bl	8005f44 <RCC_SetFlashLatencyFromMSIRange>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	f000 be0c 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004d96:	4b7c      	ldr	r3, [pc, #496]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	4a7b      	ldr	r2, [pc, #492]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004d9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004da0:	6093      	str	r3, [r2, #8]
 8004da2:	4b79      	ldr	r3, [pc, #484]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	4976      	ldr	r1, [pc, #472]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004dbc:	d309      	bcc.n	8004dd2 <HAL_RCC_OscConfig+0xee>
 8004dbe:	4b72      	ldr	r3, [pc, #456]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f023 021f 	bic.w	r2, r3, #31
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	496f      	ldr	r1, [pc, #444]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60cb      	str	r3, [r1, #12]
 8004dd0:	e07e      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1ec>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	da0a      	bge.n	8004df0 <HAL_RCC_OscConfig+0x10c>
 8004dda:	4b6b      	ldr	r3, [pc, #428]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	015b      	lsls	r3, r3, #5
 8004de8:	4967      	ldr	r1, [pc, #412]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60cb      	str	r3, [r1, #12]
 8004dee:	e06f      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1ec>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d30a      	bcc.n	8004e10 <HAL_RCC_OscConfig+0x12c>
 8004dfa:	4b63      	ldr	r3, [pc, #396]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	029b      	lsls	r3, r3, #10
 8004e08:	495f      	ldr	r1, [pc, #380]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60cb      	str	r3, [r1, #12]
 8004e0e:	e05f      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1ec>
 8004e10:	4b5d      	ldr	r3, [pc, #372]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	03db      	lsls	r3, r3, #15
 8004e1e:	495a      	ldr	r1, [pc, #360]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60cb      	str	r3, [r1, #12]
 8004e24:	e054      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004e26:	4b58      	ldr	r3, [pc, #352]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	4a57      	ldr	r2, [pc, #348]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e30:	6093      	str	r3, [r2, #8]
 8004e32:	4b55      	ldr	r3, [pc, #340]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	4952      	ldr	r1, [pc, #328]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004e4c:	d309      	bcc.n	8004e62 <HAL_RCC_OscConfig+0x17e>
 8004e4e:	4b4e      	ldr	r3, [pc, #312]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f023 021f 	bic.w	r2, r3, #31
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	494b      	ldr	r1, [pc, #300]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60cb      	str	r3, [r1, #12]
 8004e60:	e028      	b.n	8004eb4 <HAL_RCC_OscConfig+0x1d0>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da0a      	bge.n	8004e80 <HAL_RCC_OscConfig+0x19c>
 8004e6a:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	015b      	lsls	r3, r3, #5
 8004e78:	4943      	ldr	r1, [pc, #268]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60cb      	str	r3, [r1, #12]
 8004e7e:	e019      	b.n	8004eb4 <HAL_RCC_OscConfig+0x1d0>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e88:	d30a      	bcc.n	8004ea0 <HAL_RCC_OscConfig+0x1bc>
 8004e8a:	4b3f      	ldr	r3, [pc, #252]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	029b      	lsls	r3, r3, #10
 8004e98:	493b      	ldr	r1, [pc, #236]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60cb      	str	r3, [r1, #12]
 8004e9e:	e009      	b.n	8004eb4 <HAL_RCC_OscConfig+0x1d0>
 8004ea0:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	03db      	lsls	r3, r3, #15
 8004eae:	4936      	ldr	r1, [pc, #216]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 f840 	bl	8005f44 <RCC_SetFlashLatencyFromMSIRange>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f000 bd6f 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004ed0:	f000 ffe2 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ed4:	4b2d      	ldr	r3, [pc, #180]	; (8004f8c <HAL_RCC_OscConfig+0x2a8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fa61 	bl	80043a0 <HAL_InitTick>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK)
 8004ee2:	7ffb      	ldrb	r3, [r7, #31]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8089 	beq.w	8004ffc <HAL_RCC_OscConfig+0x318>
        {
          return status;
 8004eea:	7ffb      	ldrb	r3, [r7, #31]
 8004eec:	f000 bd5f 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d066      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004ef8:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f04:	f7ff fa96 	bl	8004434 <HAL_GetTick>
 8004f08:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004f0a:	e009      	b.n	8004f20 <HAL_RCC_OscConfig+0x23c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f0c:	f7ff fa92 	bl	8004434 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d902      	bls.n	8004f20 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	f000 bd47 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0ef      	beq.n	8004f0c <HAL_RCC_OscConfig+0x228>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004f32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f36:	6093      	str	r3, [r2, #8]
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	4910      	ldr	r1, [pc, #64]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004f52:	d309      	bcc.n	8004f68 <HAL_RCC_OscConfig+0x284>
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f023 021f 	bic.w	r2, r3, #31
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	4909      	ldr	r1, [pc, #36]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60cb      	str	r3, [r1, #12]
 8004f66:	e04a      	b.n	8004ffe <HAL_RCC_OscConfig+0x31a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	da0f      	bge.n	8004f90 <HAL_RCC_OscConfig+0x2ac>
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	015b      	lsls	r3, r3, #5
 8004f7e:	4902      	ldr	r1, [pc, #8]	; (8004f88 <HAL_RCC_OscConfig+0x2a4>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60cb      	str	r3, [r1, #12]
 8004f84:	e03b      	b.n	8004ffe <HAL_RCC_OscConfig+0x31a>
 8004f86:	bf00      	nop
 8004f88:	46020c00 	.word	0x46020c00
 8004f8c:	20000014 	.word	0x20000014
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f98:	d30a      	bcc.n	8004fb0 <HAL_RCC_OscConfig+0x2cc>
 8004f9a:	4b94      	ldr	r3, [pc, #592]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	029b      	lsls	r3, r3, #10
 8004fa8:	4990      	ldr	r1, [pc, #576]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60cb      	str	r3, [r1, #12]
 8004fae:	e026      	b.n	8004ffe <HAL_RCC_OscConfig+0x31a>
 8004fb0:	4b8e      	ldr	r3, [pc, #568]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	03db      	lsls	r3, r3, #15
 8004fbe:	498b      	ldr	r1, [pc, #556]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60cb      	str	r3, [r1, #12]
 8004fc4:	e01b      	b.n	8004ffe <HAL_RCC_OscConfig+0x31a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004fc6:	4b89      	ldr	r3, [pc, #548]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a88      	ldr	r2, [pc, #544]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004fd2:	f7ff fa2f 	bl	8004434 <HAL_GetTick>
 8004fd6:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004fd8:	e009      	b.n	8004fee <HAL_RCC_OscConfig+0x30a>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fda:	f7ff fa2b 	bl	8004434 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d902      	bls.n	8004fee <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	f000 bce0 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004fee:	4b7f      	ldr	r3, [pc, #508]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ef      	bne.n	8004fda <HAL_RCC_OscConfig+0x2f6>
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x31a>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ffc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 808d 	beq.w	8005126 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	2b08      	cmp	r3, #8
 8005010:	d005      	beq.n	800501e <HAL_RCC_OscConfig+0x33a>
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	2b0c      	cmp	r3, #12
 8005016:	d10f      	bne.n	8005038 <HAL_RCC_OscConfig+0x354>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	2b03      	cmp	r3, #3
 800501c:	d10c      	bne.n	8005038 <HAL_RCC_OscConfig+0x354>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501e:	4b73      	ldr	r3, [pc, #460]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d07c      	beq.n	8005124 <HAL_RCC_OscConfig+0x440>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d178      	bne.n	8005124 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f000 bcbb 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d106      	bne.n	8005050 <HAL_RCC_OscConfig+0x36c>
 8005042:	4b6a      	ldr	r3, [pc, #424]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a69      	ldr	r2, [pc, #420]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	e03b      	b.n	80050c8 <HAL_RCC_OscConfig+0x3e4>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005058:	d112      	bne.n	8005080 <HAL_RCC_OscConfig+0x39c>
 800505a:	4b64      	ldr	r3, [pc, #400]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a63      	ldr	r2, [pc, #396]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	4b61      	ldr	r3, [pc, #388]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a60      	ldr	r2, [pc, #384]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 800506c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b5e      	ldr	r3, [pc, #376]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a5d      	ldr	r2, [pc, #372]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e023      	b.n	80050c8 <HAL_RCC_OscConfig+0x3e4>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005088:	d112      	bne.n	80050b0 <HAL_RCC_OscConfig+0x3cc>
 800508a:	4b58      	ldr	r3, [pc, #352]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a57      	ldr	r2, [pc, #348]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	4b55      	ldr	r3, [pc, #340]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a54      	ldr	r2, [pc, #336]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 800509c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	4b52      	ldr	r3, [pc, #328]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a51      	ldr	r2, [pc, #324]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0x3e4>
 80050b0:	4b4e      	ldr	r3, [pc, #312]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a4d      	ldr	r2, [pc, #308]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b4b      	ldr	r3, [pc, #300]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a4a      	ldr	r2, [pc, #296]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80050c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d014      	beq.n	80050fa <HAL_RCC_OscConfig+0x416>
      {
        tickstart = HAL_GetTick();
 80050d0:	f7ff f9b0 	bl	8004434 <HAL_GetTick>
 80050d4:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050d6:	e009      	b.n	80050ec <HAL_RCC_OscConfig+0x408>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d8:	f7ff f9ac 	bl	8004434 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d902      	bls.n	80050ec <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	f000 bc61 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ec:	4b3f      	ldr	r3, [pc, #252]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0ef      	beq.n	80050d8 <HAL_RCC_OscConfig+0x3f4>
 80050f8:	e015      	b.n	8005126 <HAL_RCC_OscConfig+0x442>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80050fa:	f7ff f99b 	bl	8004434 <HAL_GetTick>
 80050fe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005100:	e009      	b.n	8005116 <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005102:	f7ff f997 	bl	8004434 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b64      	cmp	r3, #100	; 0x64
 800510e:	d902      	bls.n	8005116 <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	f000 bc4c 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005116:	4b35      	ldr	r3, [pc, #212]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1ef      	bne.n	8005102 <HAL_RCC_OscConfig+0x41e>
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x442>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d064      	beq.n	80051fc <HAL_RCC_OscConfig+0x518>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	2b04      	cmp	r3, #4
 8005136:	d005      	beq.n	8005144 <HAL_RCC_OscConfig+0x460>
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d11a      	bne.n	8005174 <HAL_RCC_OscConfig+0x490>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	2b02      	cmp	r3, #2
 8005142:	d117      	bne.n	8005174 <HAL_RCC_OscConfig+0x490>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005144:	4b29      	ldr	r3, [pc, #164]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514c:	2b00      	cmp	r3, #0
 800514e:	d006      	beq.n	800515e <HAL_RCC_OscConfig+0x47a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	f000 bc28 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800515e:	4b23      	ldr	r3, [pc, #140]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	491f      	ldr	r1, [pc, #124]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 800516e:	4313      	orrs	r3, r2
 8005170:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005172:	e043      	b.n	80051fc <HAL_RCC_OscConfig+0x518>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d024      	beq.n	80051c6 <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800517c:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1a      	ldr	r2, [pc, #104]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 8005182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005186:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005188:	f7ff f954 	bl	8004434 <HAL_GetTick>
 800518c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800518e:	e009      	b.n	80051a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005190:	f7ff f950 	bl	8004434 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d902      	bls.n	80051a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	f000 bc05 	b.w	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051a4:	4b11      	ldr	r3, [pc, #68]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0ef      	beq.n	8005190 <HAL_RCC_OscConfig+0x4ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80051b0:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	490b      	ldr	r1, [pc, #44]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	610b      	str	r3, [r1, #16]
 80051c4:	e01a      	b.n	80051fc <HAL_RCC_OscConfig+0x518>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a08      	ldr	r2, [pc, #32]	; (80051ec <HAL_RCC_OscConfig+0x508>)
 80051cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051d2:	f7ff f92f 	bl	8004434 <HAL_GetTick>
 80051d6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCC_OscConfig+0x50c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051da:	f7ff f92b 	bl	8004434 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d903      	bls.n	80051f0 <HAL_RCC_OscConfig+0x50c>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e3e0      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
 80051ec:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051f0:	4baf      	ldr	r3, [pc, #700]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ee      	bne.n	80051da <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80c7 	beq.w	8005398 <HAL_RCC_OscConfig+0x6b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005210:	4ba7      	ldr	r3, [pc, #668]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d111      	bne.n	8005242 <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800521e:	4ba4      	ldr	r3, [pc, #656]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005224:	4aa2      	ldr	r2, [pc, #648]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800522e:	4ba0      	ldr	r3, [pc, #640]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005242:	4b9c      	ldr	r3, [pc, #624]	; (80054b4 <HAL_RCC_OscConfig+0x7d0>)
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d118      	bne.n	8005280 <HAL_RCC_OscConfig+0x59c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800524e:	4b99      	ldr	r3, [pc, #612]	; (80054b4 <HAL_RCC_OscConfig+0x7d0>)
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	4a98      	ldr	r2, [pc, #608]	; (80054b4 <HAL_RCC_OscConfig+0x7d0>)
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800525a:	f7ff f8eb 	bl	8004434 <HAL_GetTick>
 800525e:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x590>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005262:	f7ff f8e7 	bl	8004434 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e39c      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005274:	4b8f      	ldr	r3, [pc, #572]	; (80054b4 <HAL_RCC_OscConfig+0x7d0>)
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCC_OscConfig+0x57e>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05f      	beq.n	8005348 <HAL_RCC_OscConfig+0x664>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005288:	4b89      	ldr	r3, [pc, #548]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 800528a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800528e:	61bb      	str	r3, [r7, #24]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	429a      	cmp	r2, r3
 800529c:	d037      	beq.n	800530e <HAL_RCC_OscConfig+0x62a>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d006      	beq.n	80052b6 <HAL_RCC_OscConfig+0x5d2>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_OscConfig+0x5d2>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e37b      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01b      	beq.n	80052f8 <HAL_RCC_OscConfig+0x614>
        {
          __HAL_RCC_LSI_DISABLE();
 80052c0:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 80052c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052c6:	4a7a      	ldr	r2, [pc, #488]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 80052c8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80052cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80052d0:	f7ff f8b0 	bl	8004434 <HAL_GetTick>
 80052d4:	6238      	str	r0, [r7, #32]

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x606>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d8:	f7ff f8ac 	bl	8004434 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x606>
            {
              return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e361      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80052ea:	4b71      	ldr	r3, [pc, #452]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 80052ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1ef      	bne.n	80052d8 <HAL_RCC_OscConfig+0x5f4>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80052f8:	4b6d      	ldr	r3, [pc, #436]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 80052fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	496a      	ldr	r1, [pc, #424]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800530e:	4b68      	ldr	r3, [pc, #416]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005314:	4a66      	ldr	r2, [pc, #408]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800531a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800531e:	f7ff f889 	bl	8004434 <HAL_GetTick>
 8005322:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x654>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005326:	f7ff f885 	bl	8004434 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x654>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e33a      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005338:	4b5d      	ldr	r3, [pc, #372]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 800533a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800533e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0ef      	beq.n	8005326 <HAL_RCC_OscConfig+0x642>
 8005346:	e01b      	b.n	8005380 <HAL_RCC_OscConfig+0x69c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005348:	4b59      	ldr	r3, [pc, #356]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 800534a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800534e:	4a58      	ldr	r2, [pc, #352]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005350:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005354:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005358:	f7ff f86c 	bl	8004434 <HAL_GetTick>
 800535c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x68e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005360:	f7ff f868 	bl	8004434 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x68e>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e31d      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005372:	4b4f      	ldr	r3, [pc, #316]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ef      	bne.n	8005360 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005380:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005384:	2b01      	cmp	r3, #1
 8005386:	d107      	bne.n	8005398 <HAL_RCC_OscConfig+0x6b4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005388:	4b49      	ldr	r3, [pc, #292]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 800538a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538e:	4a48      	ldr	r2, [pc, #288]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005390:	f023 0304 	bic.w	r3, r3, #4
 8005394:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8112 	beq.w	80055ca <HAL_RCC_OscConfig+0x8e6>
  {
    FlagStatus pwrclkchanged = RESET;
 80053a6:	2300      	movs	r3, #0
 80053a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ac:	4b40      	ldr	r3, [pc, #256]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d111      	bne.n	80053de <HAL_RCC_OscConfig+0x6fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ba:	4b3d      	ldr	r3, [pc, #244]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 80053bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c0:	4a3b      	ldr	r2, [pc, #236]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 80053c2:	f043 0304 	orr.w	r3, r3, #4
 80053c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80053ca:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 80053cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053de:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <HAL_RCC_OscConfig+0x7d0>)
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d118      	bne.n	800541c <HAL_RCC_OscConfig+0x738>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80053ea:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <HAL_RCC_OscConfig+0x7d0>)
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	4a31      	ldr	r2, [pc, #196]	; (80054b4 <HAL_RCC_OscConfig+0x7d0>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053f6:	f7ff f81d 	bl	8004434 <HAL_GetTick>
 80053fa:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x72c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fe:	f7ff f819 	bl	8004434 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x72c>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e2ce      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005410:	4b28      	ldr	r3, [pc, #160]	; (80054b4 <HAL_RCC_OscConfig+0x7d0>)
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x71a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01f      	beq.n	8005468 <HAL_RCC_OscConfig+0x784>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d010      	beq.n	8005456 <HAL_RCC_OscConfig+0x772>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005434:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800543a:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 800543c:	f043 0304 	orr.w	r3, r3, #4
 8005440:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800544a:	4a19      	ldr	r2, [pc, #100]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005454:	e018      	b.n	8005488 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005456:	4b16      	ldr	r3, [pc, #88]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800545c:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005466:	e00f      	b.n	8005488 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005468:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 800546a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800546e:	4a10      	ldr	r2, [pc, #64]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005478:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 800547a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800547e:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <HAL_RCC_OscConfig+0x7cc>)
 8005480:	f023 0304 	bic.w	r3, r3, #4
 8005484:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d058      	beq.n	8005542 <HAL_RCC_OscConfig+0x85e>
    {
      tickstart = HAL_GetTick();
 8005490:	f7fe ffd0 	bl	8004434 <HAL_GetTick>
 8005494:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005496:	e00f      	b.n	80054b8 <HAL_RCC_OscConfig+0x7d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005498:	f7fe ffcc 	bl	8004434 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d906      	bls.n	80054b8 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e27f      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
 80054ae:	bf00      	nop
 80054b0:	46020c00 	.word	0x46020c00
 80054b4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054b8:	4ba4      	ldr	r3, [pc, #656]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80054ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0e8      	beq.n	8005498 <HAL_RCC_OscConfig+0x7b4>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01b      	beq.n	800550a <HAL_RCC_OscConfig+0x826>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80054d2:	4b9e      	ldr	r3, [pc, #632]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80054d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054d8:	4a9c      	ldr	r2, [pc, #624]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80054da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_OscConfig+0x816>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e4:	f7fe ffa6 	bl	8004434 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x816>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e259      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80054fa:	4b94      	ldr	r3, [pc, #592]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80054fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ed      	beq.n	80054e4 <HAL_RCC_OscConfig+0x800>
 8005508:	e053      	b.n	80055b2 <HAL_RCC_OscConfig+0x8ce>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800550a:	4b90      	ldr	r3, [pc, #576]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 800550c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005510:	4a8e      	ldr	r2, [pc, #568]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005516:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_OscConfig+0x84e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7fe ff8a 	bl	8004434 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x84e>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e23d      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005532:	4b86      	ldr	r3, [pc, #536]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1ed      	bne.n	800551c <HAL_RCC_OscConfig+0x838>
 8005540:	e037      	b.n	80055b2 <HAL_RCC_OscConfig+0x8ce>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005542:	f7fe ff77 	bl	8004434 <HAL_GetTick>
 8005546:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005548:	e00a      	b.n	8005560 <HAL_RCC_OscConfig+0x87c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554a:	f7fe ff73 	bl	8004434 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	; 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x87c>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e226      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005560:	4b7a      	ldr	r3, [pc, #488]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1ed      	bne.n	800554a <HAL_RCC_OscConfig+0x866>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800556e:	4b77      	ldr	r3, [pc, #476]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01a      	beq.n	80055b2 <HAL_RCC_OscConfig+0x8ce>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800557c:	4b73      	ldr	r3, [pc, #460]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 800557e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005582:	4a72      	ldr	r2, [pc, #456]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005588:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_OscConfig+0x8c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7fe ff51 	bl	8004434 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	; 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x8c0>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e204      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055a4:	4b69      	ldr	r3, [pc, #420]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80055a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1ed      	bne.n	800558e <HAL_RCC_OscConfig+0x8aa>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d107      	bne.n	80055ca <HAL_RCC_OscConfig+0x8e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ba:	4b64      	ldr	r3, [pc, #400]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80055bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c0:	4a62      	ldr	r2, [pc, #392]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80055c2:	f023 0304 	bic.w	r3, r3, #4
 80055c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d036      	beq.n	8005644 <HAL_RCC_OscConfig+0x960>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d019      	beq.n	8005612 <HAL_RCC_OscConfig+0x92e>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80055de:	4b5b      	ldr	r3, [pc, #364]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a5a      	ldr	r2, [pc, #360]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80055e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055e8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80055ea:	f7fe ff23 	bl	8004434 <HAL_GetTick>
 80055ee:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x920>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055f2:	f7fe ff1f 	bl	8004434 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x920>
        {
          return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e1d4      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005604:	4b51      	ldr	r3, [pc, #324]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x90e>
 8005610:	e018      	b.n	8005644 <HAL_RCC_OscConfig+0x960>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005612:	4b4e      	ldr	r3, [pc, #312]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a4d      	ldr	r2, [pc, #308]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800561c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800561e:	f7fe ff09 	bl	8004434 <HAL_GetTick>
 8005622:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x954>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005626:	f7fe ff05 	bl	8004434 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x954>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e1ba      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005638:	4b44      	ldr	r3, [pc, #272]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f0      	bne.n	8005626 <HAL_RCC_OscConfig+0x942>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	2b00      	cmp	r3, #0
 800564e:	d036      	beq.n	80056be <HAL_RCC_OscConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	2b00      	cmp	r3, #0
 8005656:	d019      	beq.n	800568c <HAL_RCC_OscConfig+0x9a8>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005658:	4b3c      	ldr	r3, [pc, #240]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a3b      	ldr	r2, [pc, #236]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 800565e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005662:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005664:	f7fe fee6 	bl	8004434 <HAL_GetTick>
 8005668:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x99a>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800566c:	f7fe fee2 	bl	8004434 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x99a>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e197      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800567e:	4b33      	ldr	r3, [pc, #204]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x988>
 800568a:	e018      	b.n	80056be <HAL_RCC_OscConfig+0x9da>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800568c:	4b2f      	ldr	r3, [pc, #188]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a2e      	ldr	r2, [pc, #184]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005696:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005698:	f7fe fecc 	bl	8004434 <HAL_GetTick>
 800569c:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x9ce>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80056a0:	f7fe fec8 	bl	8004434 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e17d      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80056b2:	4b26      	ldr	r3, [pc, #152]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x9bc>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d07f      	beq.n	80057ca <HAL_RCC_OscConfig+0xae6>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d062      	beq.n	8005798 <HAL_RCC_OscConfig+0xab4>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80056d2:	4b1e      	ldr	r3, [pc, #120]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	4a1d      	ldr	r2, [pc, #116]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80056d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056dc:	6093      	str	r3, [r2, #8]
 80056de:	4b1b      	ldr	r3, [pc, #108]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	4918      	ldr	r1, [pc, #96]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80056f8:	d309      	bcc.n	800570e <HAL_RCC_OscConfig+0xa2a>
 80056fa:	4b14      	ldr	r3, [pc, #80]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f023 021f 	bic.w	r2, r3, #31
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	4911      	ldr	r1, [pc, #68]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005708:	4313      	orrs	r3, r2
 800570a:	60cb      	str	r3, [r1, #12]
 800570c:	e02a      	b.n	8005764 <HAL_RCC_OscConfig+0xa80>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b00      	cmp	r3, #0
 8005714:	da0a      	bge.n	800572c <HAL_RCC_OscConfig+0xa48>
 8005716:	4b0d      	ldr	r3, [pc, #52]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	015b      	lsls	r3, r3, #5
 8005724:	4909      	ldr	r1, [pc, #36]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005726:	4313      	orrs	r3, r2
 8005728:	60cb      	str	r3, [r1, #12]
 800572a:	e01b      	b.n	8005764 <HAL_RCC_OscConfig+0xa80>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005734:	d30c      	bcc.n	8005750 <HAL_RCC_OscConfig+0xa6c>
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	029b      	lsls	r3, r3, #10
 8005744:	4901      	ldr	r1, [pc, #4]	; (800574c <HAL_RCC_OscConfig+0xa68>)
 8005746:	4313      	orrs	r3, r2
 8005748:	60cb      	str	r3, [r1, #12]
 800574a:	e00b      	b.n	8005764 <HAL_RCC_OscConfig+0xa80>
 800574c:	46020c00 	.word	0x46020c00
 8005750:	4b99      	ldr	r3, [pc, #612]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	03db      	lsls	r3, r3, #15
 800575e:	4996      	ldr	r1, [pc, #600]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005760:	4313      	orrs	r3, r2
 8005762:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005764:	4b94      	ldr	r3, [pc, #592]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a93      	ldr	r2, [pc, #588]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800576a:	f043 0310 	orr.w	r3, r3, #16
 800576e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005770:	f7fe fe60 	bl	8004434 <HAL_GetTick>
 8005774:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0xaa6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005778:	f7fe fe5c 	bl	8004434 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0xaa6>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e111      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800578a:	4b8b      	ldr	r3, [pc, #556]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0xa94>
 8005796:	e018      	b.n	80057ca <HAL_RCC_OscConfig+0xae6>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005798:	4b87      	ldr	r3, [pc, #540]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a86      	ldr	r2, [pc, #536]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800579e:	f023 0310 	bic.w	r3, r3, #16
 80057a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057a4:	f7fe fe46 	bl	8004434 <HAL_GetTick>
 80057a8:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0xada>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80057ac:	f7fe fe42 	bl	8004434 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0xada>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0f7      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80057be:	4b7e      	ldr	r3, [pc, #504]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0xac8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80ec 	beq.w	80059ac <HAL_RCC_OscConfig+0xcc8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057d4:	4b78      	ldr	r3, [pc, #480]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	f000 80e3 	beq.w	80059a8 <HAL_RCC_OscConfig+0xcc4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	f040 80be 	bne.w	8005968 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80057ec:	4b72      	ldr	r3, [pc, #456]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a71      	ldr	r2, [pc, #452]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80057f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80057f8:	f7fe fe1c 	bl	8004434 <HAL_GetTick>
 80057fc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0xb2e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005800:	f7fe fe18 	bl	8004434 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0xb2e>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e0cd      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005812:	4b69      	ldr	r3, [pc, #420]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0xb1c>
          }
        }

        /* Enable PWR CLK */
        __HAL_RCC_PWR_CLK_ENABLE();
 800581e:	4b66      	ldr	r3, [pc, #408]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005824:	4a64      	ldr	r2, [pc, #400]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005826:	f043 0304 	orr.w	r3, r3, #4
 800582a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800582e:	4b62      	ldr	r3, [pc, #392]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	68fb      	ldr	r3, [r7, #12]

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800583c:	4b5f      	ldr	r3, [pc, #380]	; (80059bc <HAL_RCC_OscConfig+0xcd8>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005844:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005848:	d102      	bne.n	8005850 <HAL_RCC_OscConfig+0xb6c>
        {
          pwrboosten = SET;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005850:	4b5a      	ldr	r3, [pc, #360]	; (80059bc <HAL_RCC_OscConfig+0xcd8>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4a59      	ldr	r2, [pc, #356]	; (80059bc <HAL_RCC_OscConfig+0xcd8>)
 8005856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585a:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800585c:	4b56      	ldr	r3, [pc, #344]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005864:	f023 0303 	bic.w	r3, r3, #3
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005870:	3a01      	subs	r2, #1
 8005872:	0212      	lsls	r2, r2, #8
 8005874:	4311      	orrs	r1, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800587a:	430a      	orrs	r2, r1
 800587c:	494e      	ldr	r1, [pc, #312]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800587e:	4313      	orrs	r3, r2
 8005880:	628b      	str	r3, [r1, #40]	; 0x28
 8005882:	4b4d      	ldr	r3, [pc, #308]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005886:	4b4e      	ldr	r3, [pc, #312]	; (80059c0 <HAL_RCC_OscConfig+0xcdc>)
 8005888:	4013      	ands	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800588e:	3a01      	subs	r2, #1
 8005890:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005898:	3a01      	subs	r2, #1
 800589a:	0252      	lsls	r2, r2, #9
 800589c:	b292      	uxth	r2, r2
 800589e:	4311      	orrs	r1, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058a4:	3a01      	subs	r2, #1
 80058a6:	0412      	lsls	r2, r2, #16
 80058a8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80058ac:	4311      	orrs	r1, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80058b2:	3a01      	subs	r2, #1
 80058b4:	0612      	lsls	r2, r2, #24
 80058b6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80058ba:	430a      	orrs	r2, r1
 80058bc:	493e      	ldr	r1, [pc, #248]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80058c2:	4b3d      	ldr	r3, [pc, #244]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	4a3c      	ldr	r2, [pc, #240]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80058c8:	f023 0310 	bic.w	r3, r3, #16
 80058cc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80058ce:	4b3a      	ldr	r3, [pc, #232]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058de:	00d2      	lsls	r2, r2, #3
 80058e0:	4935      	ldr	r1, [pc, #212]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80058e6:	4b34      	ldr	r3, [pc, #208]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	4a33      	ldr	r2, [pc, #204]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80058ec:	f043 0310 	orr.w	r3, r3, #16
 80058f0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80058f2:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	f023 020c 	bic.w	r2, r3, #12
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	492e      	ldr	r1, [pc, #184]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005900:	4313      	orrs	r3, r2
 8005902:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005908:	2b01      	cmp	r3, #1
 800590a:	d105      	bne.n	8005918 <HAL_RCC_OscConfig+0xc34>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800590c:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_RCC_OscConfig+0xcd8>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a2a      	ldr	r2, [pc, #168]	; (80059bc <HAL_RCC_OscConfig+0xcd8>)
 8005912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005916:	60d3      	str	r3, [r2, #12]
        }

        /*Disable PWR clk */
        __HAL_RCC_PWR_CLK_DISABLE();
 8005918:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800591a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800591e:	4a26      	ldr	r2, [pc, #152]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005920:	f023 0304 	bic.w	r3, r3, #4
 8005924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005928:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	4a22      	ldr	r2, [pc, #136]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800592e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005932:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005934:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800593a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800593e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005940:	f7fe fd78 	bl	8004434 <HAL_GetTick>
 8005944:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005948:	f7fe fd74 	bl	8004434 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e029      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800595a:	4b17      	ldr	r3, [pc, #92]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0xc64>
 8005966:	e021      	b.n	80059ac <HAL_RCC_OscConfig+0xcc8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005968:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a12      	ldr	r2, [pc, #72]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800596e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005972:	6013      	str	r3, [r2, #0]

        /* Disable main PLL outputs to save power if no PLLs on */
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
 8005974:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800597a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800597e:	6293      	str	r3, [r2, #40]	; 0x28

        tickstart = HAL_GetTick();
 8005980:	f7fe fd58 	bl	8004434 <HAL_GetTick>
 8005984:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0xcb6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005988:	f7fe fd54 	bl	8004434 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0xcb6>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e009      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <HAL_RCC_OscConfig+0xcd4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0xca4>
 80059a6:	e001      	b.n	80059ac <HAL_RCC_OscConfig+0xcc8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <HAL_RCC_OscConfig+0xcca>
    }
  }
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3730      	adds	r7, #48	; 0x30
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	46020c00 	.word	0x46020c00
 80059bc:	46020800 	.word	0x46020800
 80059c0:	80800000 	.word	0x80800000

080059c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e146      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059d8:	4ba5      	ldr	r3, [pc, #660]	; (8005c70 <HAL_RCC_ClockConfig+0x2ac>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d910      	bls.n	8005a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e6:	4ba2      	ldr	r3, [pc, #648]	; (8005c70 <HAL_RCC_ClockConfig+0x2ac>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 020f 	bic.w	r2, r3, #15
 80059ee:	49a0      	ldr	r1, [pc, #640]	; (8005c70 <HAL_RCC_ClockConfig+0x2ac>)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f6:	4b9e      	ldr	r3, [pc, #632]	; (8005c70 <HAL_RCC_ClockConfig+0x2ac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d001      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e12e      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80be 	beq.w	8005b92 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d137      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a1e:	4b95      	ldr	r3, [pc, #596]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a24:	4a93      	ldr	r2, [pc, #588]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005a26:	f043 0304 	orr.w	r3, r3, #4
 8005a2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005a2e:	4b91      	ldr	r3, [pc, #580]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
      tickstart = HAL_GetTick();
 8005a3c:	f7fe fcfa 	bl	8004434 <HAL_GetTick>
 8005a40:	6178      	str	r0, [r7, #20]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005a42:	4b8d      	ldr	r3, [pc, #564]	; (8005c78 <HAL_RCC_ClockConfig+0x2b4>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00f      	beq.n	8005a6e <HAL_RCC_ClockConfig+0xaa>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_ClockConfig+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005a50:	f7fe fcf0 	bl	8004434 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_ClockConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e101      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005a62:	4b85      	ldr	r3, [pc, #532]	; (8005c78 <HAL_RCC_ClockConfig+0x2b4>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f0      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x8c>
          }
        }
      }

      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6e:	4b81      	ldr	r3, [pc, #516]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a74:	4a7f      	ldr	r2, [pc, #508]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005a76:	f023 0304 	bic.w	r3, r3, #4
 8005a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005a7e:	4b7d      	ldr	r3, [pc, #500]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d121      	bne.n	8005ace <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e0eb      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d107      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a96:	4b77      	ldr	r3, [pc, #476]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d115      	bne.n	8005ace <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e0df      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <HAL_RCC_ClockConfig+0xfa>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005aae:	4b71      	ldr	r3, [pc, #452]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d109      	bne.n	8005ace <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e0d3      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005abe:	4b6d      	ldr	r3, [pc, #436]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e0cb      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005ace:	4b69      	ldr	r3, [pc, #420]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f023 0203 	bic.w	r2, r3, #3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4966      	ldr	r1, [pc, #408]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005ae0:	f7fe fca8 	bl	8004434 <HAL_GetTick>
 8005ae4:	6178      	str	r0, [r7, #20]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d112      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x150>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aee:	e00a      	b.n	8005b06 <HAL_RCC_ClockConfig+0x142>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af0:	f7fe fca0 	bl	8004434 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e0af      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b06:	4b5b      	ldr	r3, [pc, #364]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f003 030c 	and.w	r3, r3, #12
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d1ee      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x12c>
 8005b12:	e03e      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ce>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d112      	bne.n	8005b42 <HAL_RCC_ClockConfig+0x17e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b1c:	e00a      	b.n	8005b34 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b1e:	f7fe fc89 	bl	8004434 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e098      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b34:	4b4f      	ldr	r3, [pc, #316]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f003 030c 	and.w	r3, r3, #12
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d1ee      	bne.n	8005b1e <HAL_RCC_ClockConfig+0x15a>
 8005b40:	e027      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ce>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d11d      	bne.n	8005b86 <HAL_RCC_ClockConfig+0x1c2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b4a:	e00a      	b.n	8005b62 <HAL_RCC_ClockConfig+0x19e>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b4c:	f7fe fc72 	bl	8004434 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_ClockConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e081      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b62:	4b44      	ldr	r3, [pc, #272]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1ee      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x188>
 8005b6e:	e010      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ce>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b70:	f7fe fc60 	bl	8004434 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_ClockConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e06f      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b86:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f003 030c 	and.w	r3, r3, #12
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d1ee      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005b9e:	4b35      	ldr	r3, [pc, #212]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f023 020f 	bic.w	r2, r3, #15
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	4932      	ldr	r1, [pc, #200]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	492a      	ldr	r1, [pc, #168]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005bda:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	4922      	ldr	r1, [pc, #136]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x248>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005bfa:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	491b      	ldr	r1, [pc, #108]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	624b      	str	r3, [r1, #36]	; 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c0c:	4b18      	ldr	r3, [pc, #96]	; (8005c70 <HAL_RCC_ClockConfig+0x2ac>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d210      	bcs.n	8005c3c <HAL_RCC_ClockConfig+0x278>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1a:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <HAL_RCC_ClockConfig+0x2ac>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 020f 	bic.w	r2, r3, #15
 8005c22:	4913      	ldr	r1, [pc, #76]	; (8005c70 <HAL_RCC_ClockConfig+0x2ac>)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <HAL_RCC_ClockConfig+0x2ac>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d001      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x278>
    {
      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e014      	b.n	8005c66 <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005c3c:	f000 f824 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8005c40:	4602      	mov	r2, r0
 8005c42:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <HAL_RCC_ClockConfig+0x2b0>)
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	490c      	ldr	r1, [pc, #48]	; (8005c7c <HAL_RCC_ClockConfig+0x2b8>)
 8005c4c:	5ccb      	ldrb	r3, [r1, r3]
 8005c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c52:	4a0b      	ldr	r2, [pc, #44]	; (8005c80 <HAL_RCC_ClockConfig+0x2bc>)
 8005c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <HAL_RCC_ClockConfig+0x2c0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe fba0 	bl	80043a0 <HAL_InitTick>
 8005c60:	4603      	mov	r3, r0
 8005c62:	74fb      	strb	r3, [r7, #19]

  return status;
 8005c64:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40022000 	.word	0x40022000
 8005c74:	46020c00 	.word	0x46020c00
 8005c78:	46020800 	.word	0x46020800
 8005c7c:	0800d734 	.word	0x0800d734
 8005c80:	20000008 	.word	0x20000008
 8005c84:	20000014 	.word	0x20000014

08005c88 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b08b      	sub	sp, #44	; 0x2c
 8005c8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c96:	4b7b      	ldr	r3, [pc, #492]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 030c 	and.w	r3, r3, #12
 8005c9e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ca0:	4b78      	ldr	r3, [pc, #480]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <HAL_RCC_GetSysClockFreq+0x34>
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	2b0c      	cmp	r3, #12
 8005cb4:	d121      	bne.n	8005cfa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d11e      	bne.n	8005cfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005cbc:	4b71      	ldr	r3, [pc, #452]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d107      	bne.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005cc8:	4b6e      	ldr	r3, [pc, #440]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cce:	0b1b      	lsrs	r3, r3, #12
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd6:	e005      	b.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005cd8:	4b6a      	ldr	r3, [pc, #424]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	0f1b      	lsrs	r3, r3, #28
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ce4:	4a68      	ldr	r2, [pc, #416]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d110      	bne.n	8005d16 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cf8:	e00d      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cfa:	4b62      	ldr	r3, [pc, #392]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d102      	bne.n	8005d0c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d06:	4b61      	ldr	r3, [pc, #388]	; (8005e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	e004      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d101      	bne.n	8005d16 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d12:	4b5e      	ldr	r3, [pc, #376]	; (8005e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d14:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b0c      	cmp	r3, #12
 8005d1a:	f040 80ac 	bne.w	8005e76 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005d1e:	4b59      	ldr	r3, [pc, #356]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005d28:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	0a1b      	lsrs	r3, r3, #8
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	3301      	adds	r3, #1
 8005d34:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005d36:	4b53      	ldr	r3, [pc, #332]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d42:	4b50      	ldr	r3, [pc, #320]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	08db      	lsrs	r3, r3, #3
 8005d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8086 	beq.w	8005e72 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d003      	beq.n	8005d74 <HAL_RCC_GetSysClockFreq+0xec>
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d022      	beq.n	8005db8 <HAL_RCC_GetSysClockFreq+0x130>
 8005d72:	e043      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005e90 <HAL_RCC_GetSysClockFreq+0x208>
 8005d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d86:	4b3f      	ldr	r3, [pc, #252]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d96:	ed97 6a01 	vldr	s12, [r7, #4]
 8005d9a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005e94 <HAL_RCC_GetSysClockFreq+0x20c>
 8005d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005db6:	e046      	b.n	8005e46 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005e90 <HAL_RCC_GetSysClockFreq+0x208>
 8005dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dca:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005dda:	ed97 6a01 	vldr	s12, [r7, #4]
 8005dde:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005e94 <HAL_RCC_GetSysClockFreq+0x20c>
 8005de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005dfa:	e024      	b.n	8005e46 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005e24:	ed97 6a01 	vldr	s12, [r7, #4]
 8005e28:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005e94 <HAL_RCC_GetSysClockFreq+0x20c>
 8005e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e40:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005e44:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005e46:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4a:	0e1b      	lsrs	r3, r3, #24
 8005e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e50:	3301      	adds	r3, #1
 8005e52:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e6a:	ee17 3a90 	vmov	r3, s15
 8005e6e:	623b      	str	r3, [r7, #32]
 8005e70:	e001      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005e76:	6a3b      	ldr	r3, [r7, #32]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	372c      	adds	r7, #44	; 0x2c
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	46020c00 	.word	0x46020c00
 8005e88:	0800d74c 	.word	0x0800d74c
 8005e8c:	00f42400 	.word	0x00f42400
 8005e90:	4b742400 	.word	0x4b742400
 8005e94:	46000000 	.word	0x46000000

08005e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005e9c:	f7ff fef4 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <HAL_RCC_GetHCLKFreq+0x28>)
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	4906      	ldr	r1, [pc, #24]	; (8005ec4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005eac:	5ccb      	ldrb	r3, [r1, r3]
 8005eae:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb2:	4a05      	ldr	r2, [pc, #20]	; (8005ec8 <HAL_RCC_GetHCLKFreq+0x30>)
 8005eb4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005eb6:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <HAL_RCC_GetHCLKFreq+0x30>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	46020c00 	.word	0x46020c00
 8005ec4:	0800d734 	.word	0x0800d734
 8005ec8:	20000008 	.word	0x20000008

08005ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005ed0:	f7ff ffe2 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	091b      	lsrs	r3, r3, #4
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	4903      	ldr	r1, [pc, #12]	; (8005ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ee2:	5ccb      	ldrb	r3, [r1, r3]
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	46020c00 	.word	0x46020c00
 8005ef0:	0800d744 	.word	0x0800d744

08005ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005ef8:	f7ff ffce 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005efc:	4602      	mov	r2, r0
 8005efe:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	4903      	ldr	r1, [pc, #12]	; (8005f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f0a:	5ccb      	ldrb	r3, [r1, r3]
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	46020c00 	.word	0x46020c00
 8005f18:	0800d744 	.word	0x0800d744

08005f1c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005f20:	f7ff ffba 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005f24:	4602      	mov	r2, r0
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	091b      	lsrs	r3, r3, #4
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	4903      	ldr	r1, [pc, #12]	; (8005f40 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005f32:	5ccb      	ldrb	r3, [r1, r3]
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	46020c00 	.word	0x46020c00
 8005f40:	0800d744 	.word	0x0800d744

08005f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f4c:	4b3e      	ldr	r3, [pc, #248]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f5a:	f7fe fe95 	bl	8004c88 <HAL_PWREx_GetVoltageRange>
 8005f5e:	6178      	str	r0, [r7, #20]
 8005f60:	e019      	b.n	8005f96 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f62:	4b39      	ldr	r3, [pc, #228]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f68:	4a37      	ldr	r2, [pc, #220]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f6a:	f043 0304 	orr.w	r3, r3, #4
 8005f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005f72:	4b35      	ldr	r3, [pc, #212]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f80:	f7fe fe82 	bl	8004c88 <HAL_PWREx_GetVoltageRange>
 8005f84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f86:	4b30      	ldr	r3, [pc, #192]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f8c:	4a2e      	ldr	r2, [pc, #184]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f8e:	f023 0304 	bic.w	r3, r3, #4
 8005f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f9c:	d003      	beq.n	8005fa6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa4:	d109      	bne.n	8005fba <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fac:	d202      	bcs.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005fae:	2301      	movs	r3, #1
 8005fb0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005fb2:	e033      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005fb8:	e030      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fc0:	d208      	bcs.n	8005fd4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc8:	d102      	bne.n	8005fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005fca:	2303      	movs	r3, #3
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	e025      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e035      	b.n	8006040 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fda:	d90f      	bls.n	8005ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>

      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fe8:	d902      	bls.n	8005ff0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	e015      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	e012      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	e00f      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006002:	d109      	bne.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0xd4>

        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600a:	d102      	bne.n	8006012 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800600c:	2301      	movs	r3, #1
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	e004      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006012:	2302      	movs	r3, #2
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	e001      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006018:	2301      	movs	r3, #1
 800601a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800601c:	4b0b      	ldr	r3, [pc, #44]	; (800604c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f023 020f 	bic.w	r2, r3, #15
 8006024:	4909      	ldr	r1, [pc, #36]	; (800604c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	d001      	beq.n	800603e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	46020c00 	.word	0x46020c00
 800604c:	40022000 	.word	0x40022000

08006050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006058:	2300      	movs	r3, #0
 800605a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800605c:	2300      	movs	r3, #0
 800605e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800606c:	4bae      	ldr	r3, [pc, #696]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800606e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006072:	f023 0203 	bic.w	r2, r3, #3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607a:	49ab      	ldr	r1, [pc, #684]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800608e:	4ba6      	ldr	r3, [pc, #664]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006094:	f023 020c 	bic.w	r2, r3, #12
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609c:	49a2      	ldr	r1, [pc, #648]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80060b0:	4b9d      	ldr	r3, [pc, #628]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80060b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060be:	499a      	ldr	r1, [pc, #616]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80060d2:	4b95      	ldr	r3, [pc, #596]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80060d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e0:	4991      	ldr	r1, [pc, #580]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80060f4:	4b8c      	ldr	r3, [pc, #560]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80060f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006102:	4989      	ldr	r1, [pc, #548]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006116:	4b84      	ldr	r3, [pc, #528]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800611c:	f023 0207 	bic.w	r2, r3, #7
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006124:	4980      	ldr	r1, [pc, #512]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006138:	4b7b      	ldr	r3, [pc, #492]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800613a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800613e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006146:	4978      	ldr	r1, [pc, #480]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800615a:	4b73      	ldr	r3, [pc, #460]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800615c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006160:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006168:	496f      	ldr	r1, [pc, #444]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800617c:	4b6a      	ldr	r3, [pc, #424]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800617e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006182:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800618a:	4967      	ldr	r1, [pc, #412]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800619e:	4b62      	ldr	r3, [pc, #392]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80061a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ac:	495e      	ldr	r1, [pc, #376]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80061c0:	4b59      	ldr	r3, [pc, #356]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80061c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ce:	4956      	ldr	r1, [pc, #344]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80061e2:	4b51      	ldr	r3, [pc, #324]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80061e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061f0:	494d      	ldr	r1, [pc, #308]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006204:	4b48      	ldr	r3, [pc, #288]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006206:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800620a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006212:	4945      	ldr	r1, [pc, #276]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d042      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800622c:	2b80      	cmp	r3, #128	; 0x80
 800622e:	d028      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8006230:	2b80      	cmp	r3, #128	; 0x80
 8006232:	d823      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006234:	2b60      	cmp	r3, #96	; 0x60
 8006236:	d026      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8006238:	2b60      	cmp	r3, #96	; 0x60
 800623a:	d81f      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d006      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	d81b      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8006248:	2b20      	cmp	r3, #32
 800624a:	d00f      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800624c:	e016      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800624e:	4b36      	ldr	r3, [pc, #216]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	4a35      	ldr	r2, [pc, #212]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006258:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800625a:	e015      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3304      	adds	r3, #4
 8006260:	4618      	mov	r0, r3
 8006262:	f002 f85f 	bl	8008324 <RCCEx_PLL2_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800626a:	e00d      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3328      	adds	r3, #40	; 0x28
 8006270:	4618      	mov	r0, r3
 8006272:	f002 f8ef 	bl	8008454 <RCCEx_PLL3_Config>
 8006276:	4603      	mov	r3, r0
 8006278:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800627a:	e005      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x238>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	74fb      	strb	r3, [r7, #19]
        break;
 8006280:	e002      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 8006286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006288:	7cfb      	ldrb	r3, [r7, #19]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10c      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800628e:	4b26      	ldr	r3, [pc, #152]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006290:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006294:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800629e:	4922      	ldr	r1, [pc, #136]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80062a6:	e001      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x25c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	7cfb      	ldrb	r3, [r7, #19]
 80062aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d04c      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c2:	d02e      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c8:	d828      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80062ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ce:	d02d      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80062d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d4:	d822      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80062d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062da:	d008      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80062dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e0:	d81c      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80062e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ea:	d00f      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80062ec:	e016      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062ee:	4b0e      	ldr	r3, [pc, #56]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	4a0d      	ldr	r2, [pc, #52]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80062f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062fa:	e018      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f002 f80f 	bl	8008324 <RCCEx_PLL2_Config>
 8006306:	4603      	mov	r3, r0
 8006308:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800630a:	e010      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3328      	adds	r3, #40	; 0x28
 8006310:	4618      	mov	r0, r3
 8006312:	f002 f89f 	bl	8008454 <RCCEx_PLL3_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800631a:	e008      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	74fb      	strb	r3, [r7, #19]
        break;
 8006320:	e005      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x2de>
        break;
 8006322:	bf00      	nop
 8006324:	e003      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006326:	bf00      	nop
 8006328:	46020c00 	.word	0x46020c00
        break;
 800632c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632e:	7cfb      	ldrb	r3, [r7, #19]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10c      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006334:	4bb7      	ldr	r3, [pc, #732]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006336:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800633a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006344:	49b3      	ldr	r1, [pc, #716]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800634c:	e001      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x302>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634e:	7cfb      	ldrb	r3, [r7, #19]
 8006350:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d03e      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006364:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006368:	d025      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 800636a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800636e:	d81f      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006374:	d01f      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8006376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800637a:	d819      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800637c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006380:	d019      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8006382:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006386:	d813      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638c:	d008      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800638e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006392:	d80d      	bhi.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00e      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8006398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639c:	d00b      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 800639e:	e007      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 ffbd 	bl	8008324 <RCCEx_PLL2_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	74fb      	strb	r3, [r7, #19]
        break;
 80063ae:	e003      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	74fb      	strb	r3, [r7, #19]
        break;
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        break;
 80063b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b8:	7cfb      	ldrb	r3, [r7, #19]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10c      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x388>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80063be:	4b95      	ldr	r3, [pc, #596]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063ce:	4991      	ldr	r1, [pc, #580]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80063d6:	e001      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d8:	7cfb      	ldrb	r3, [r7, #19]
 80063da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d036      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d81b      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x3da>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006431 	.word	0x08006431
 80063fc:	0800640d 	.word	0x0800640d
 8006400:	0800641b 	.word	0x0800641b
 8006404:	08006431 	.word	0x08006431
 8006408:	08006431 	.word	0x08006431
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800640c:	4b81      	ldr	r3, [pc, #516]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	4a80      	ldr	r2, [pc, #512]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006416:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006418:	e00b      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3328      	adds	r3, #40	; 0x28
 800641e:	4618      	mov	r0, r3
 8006420:	f002 f818 	bl	8008454 <RCCEx_PLL3_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	74fb      	strb	r3, [r7, #19]
        break;
 8006428:	e003      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	74fb      	strb	r3, [r7, #19]
        break;
 800642e:	e000      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        break;
 8006430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006432:	7cfb      	ldrb	r3, [r7, #19]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10c      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x402>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006438:	4b76      	ldr	r3, [pc, #472]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800643a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800643e:	f023 0207 	bic.w	r2, r3, #7
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006448:	4972      	ldr	r1, [pc, #456]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006450:	e001      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x406>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006452:	7cfb      	ldrb	r3, [r7, #19]
 8006454:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d042      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));

    switch (pPeriphClkInit->Adf1ClockSelection)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800646c:	d025      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800646e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006472:	d81f      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006474:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006478:	d021      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x46e>
 800647a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800647e:	d819      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006484:	d00e      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
 8006486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800648a:	d813      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d018      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x472>
 8006490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006494:	d10e      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006496:	4b5f      	ldr	r3, [pc, #380]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	4a5e      	ldr	r2, [pc, #376]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800649c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80064a2:	e00f      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3328      	adds	r3, #40	; 0x28
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 ffd3 	bl	8008454 <RCCEx_PLL3_Config>
 80064ae:	4603      	mov	r3, r0
 80064b0:	74fb      	strb	r3, [r7, #19]
        break;
 80064b2:	e007      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	74fb      	strb	r3, [r7, #19]
        break;
 80064b8:	e004      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 80064ba:	bf00      	nop
 80064bc:	e002      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 80064be:	bf00      	nop
 80064c0:	e000      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 80064c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10c      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80064ca:	4b52      	ldr	r3, [pc, #328]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064da:	494e      	ldr	r1, [pc, #312]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80064e2:	e001      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80a0 	beq.w	8006636 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064f6:	2300      	movs	r3, #0
 80064f8:	747b      	strb	r3, [r7, #17]
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064fa:	4b46      	ldr	r3, [pc, #280]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d110      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x4da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006508:	4b42      	ldr	r3, [pc, #264]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800650a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800650e:	4a41      	ldr	r2, [pc, #260]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006510:	f043 0304 	orr.w	r3, r3, #4
 8006514:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006518:	4b3e      	ldr	r3, [pc, #248]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800651a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	60bb      	str	r3, [r7, #8]
 8006524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006526:	2301      	movs	r3, #1
 8006528:	747b      	strb	r3, [r7, #17]
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800652a:	4b3b      	ldr	r3, [pc, #236]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	4a3a      	ldr	r2, [pc, #232]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006530:	f043 0301 	orr.w	r3, r3, #1
 8006534:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006536:	f7fd ff7d 	bl	8004434 <HAL_GetTick>
 800653a:	60f8      	str	r0, [r7, #12]

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800653c:	e009      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800653e:	f7fd ff79 	bl	8004434 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d902      	bls.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        ret = HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	74fb      	strb	r3, [r7, #19]
        break;
 8006550:	e005      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x50e>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006552:	4b31      	ldr	r3, [pc, #196]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ef      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      }
    }

    if (ret == HAL_OK)
 800655e:	7cfb      	ldrb	r3, [r7, #19]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d15b      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006564:	4b2b      	ldr	r3, [pc, #172]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800656a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656e:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01f      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	429a      	cmp	r2, r3
 8006580:	d019      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x566>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006582:	4b24      	ldr	r3, [pc, #144]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800658e:	4b21      	ldr	r3, [pc, #132]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006594:	4a1f      	ldr	r2, [pc, #124]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800659a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800659e:	4b1d      	ldr	r3, [pc, #116]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065a4:	4a1b      	ldr	r2, [pc, #108]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065ae:	4a19      	ldr	r2, [pc, #100]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d016      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fd ff38 	bl	8004434 <HAL_GetTick>
 80065c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065c6:	e00b      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c8:	f7fd ff34 	bl	8004434 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d902      	bls.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x590>
          {
            ret = HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	74fb      	strb	r3, [r7, #19]
            break;
 80065de:	e006      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0ec      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
          }
        }
      }

      if (ret == HAL_OK)
 80065ee:	7cfb      	ldrb	r3, [r7, #19]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10c      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x5be>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80065f4:	4b07      	ldr	r3, [pc, #28]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006604:	4903      	ldr	r1, [pc, #12]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
 800660c:	e008      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800660e:	7cfb      	ldrb	r3, [r7, #19]
 8006610:	74bb      	strb	r3, [r7, #18]
 8006612:	e005      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006614:	46020c00 	.word	0x46020c00
 8006618:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661c:	7cfb      	ldrb	r3, [r7, #19]
 800661e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006620:	7c7b      	ldrb	r3, [r7, #17]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d107      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006626:	4bab      	ldr	r3, [pc, #684]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800662c:	4aa9      	ldr	r2, [pc, #676]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800662e:	f023 0304 	bic.w	r3, r3, #4
 8006632:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d03a      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x668>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(pPeriphClkInit->Clk48ClockSelection));

    switch (pPeriphClkInit->Clk48ClockSelection)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006648:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800664c:	d01f      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x63e>
 800664e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006652:	d819      	bhi.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8006654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006658:	d00f      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800665a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800665e:	d813      	bhi.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d016      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006668:	d10e      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      case RCC_CLK48CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3304      	adds	r3, #4
 800666e:	4618      	mov	r0, r3
 8006670:	f001 fe58 	bl	8008324 <RCCEx_PLL2_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	74fb      	strb	r3, [r7, #19]
        break;
 8006678:	e00c      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_PLL1:
        /* Enable CLK48 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800667a:	4b96      	ldr	r3, [pc, #600]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667e:	4a95      	ldr	r2, [pc, #596]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006684:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006686:	e005      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_HSI48:
        break;
      case RCC_CLK48CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	74fb      	strb	r3, [r7, #19]
        break;
 800668c:	e002      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 8006692:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006694:	7cfb      	ldrb	r3, [r7, #19]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10c      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->Clk48ClockSelection);
 800669a:	4b8e      	ldr	r3, [pc, #568]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800669c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066aa:	498a      	ldr	r1, [pc, #552]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80066b2:	e001      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x668>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	7cfb      	ldrb	r3, [r7, #19]
 80066b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d027      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ce:	d00a      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d4:	d804      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x69a>
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066de:	d006      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x69e>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	74fb      	strb	r3, [r7, #19]
        break;
 80066e4:	e004      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 80066e6:	bf00      	nop
 80066e8:	e002      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 80066ea:	bf00      	nop
 80066ec:	e000      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 80066ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10c      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80066f6:	4b77      	ldr	r3, [pc, #476]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80066f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006706:	4973      	ldr	r1, [pc, #460]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800670e:	e001      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006710:	7cfb      	ldrb	r3, [r7, #19]
 8006712:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006720:	4b6c      	ldr	r3, [pc, #432]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006722:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006726:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006730:	4968      	ldr	r1, [pc, #416]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d017      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800674a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800674e:	d105      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x70c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006750:	4b60      	ldr	r3, [pc, #384]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	4a5f      	ldr	r2, [pc, #380]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800675a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800675c:	4b5d      	ldr	r3, [pc, #372]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800675e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006762:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800676c:	4959      	ldr	r1, [pc, #356]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006780:	4b54      	ldr	r3, [pc, #336]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006790:	4950      	ldr	r1, [pc, #320]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80067a4:	4b4b      	ldr	r3, [pc, #300]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80067a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067b4:	4947      	ldr	r1, [pc, #284]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00b      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80067c8:	4b42      	ldr	r3, [pc, #264]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80067ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067ce:	f023 0218 	bic.w	r2, r3, #24
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80067d8:	493e      	ldr	r1, [pc, #248]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d023      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067f6:	d105      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f8:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	4a35      	ldr	r2, [pc, #212]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80067fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006802:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800680a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800680e:	d105      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    {
      /* Enable PLL2 Q CLK output */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006810:	4b30      	ldr	r3, [pc, #192]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	4a2f      	ldr	r2, [pc, #188]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681a:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800681c:	4b2d      	ldr	r3, [pc, #180]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800681e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800682c:	4929      	ldr	r1, [pc, #164]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d032      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800684a:	d00e      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800684c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006850:	d813      	bhi.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d014      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8006856:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800685a:	d10e      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x82a>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685c:	4b1d      	ldr	r3, [pc, #116]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8006862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006866:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006868:	e00b      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x832>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f001 fd58 	bl	8008324 <RCCEx_PLL2_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	74fb      	strb	r3, [r7, #19]
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006878:	e003      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x832>
      default:
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	74fb      	strb	r3, [r7, #19]
        break;
 800687e:	e000      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x832>
        break;
 8006880:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006882:	7cfb      	ldrb	r3, [r7, #19]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10c      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006888:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800688a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800688e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006898:	490e      	ldr	r1, [pc, #56]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800689a:	4313      	orrs	r3, r2
 800689c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80068a0:	e001      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	7cfb      	ldrb	r3, [r7, #19]
 80068a4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00b      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80068b2:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80068b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068b8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068c2:	4904      	ldr	r1, [pc, #16]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  return status;
 80068ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	46020c00 	.word	0x46020c00

080068d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80068d8:	b480      	push	{r7}
 80068da:	b089      	sub	sp, #36	; 0x24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80068e0:	4bac      	ldr	r3, [pc, #688]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80068ea:	4baa      	ldr	r3, [pc, #680]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80068f4:	4ba7      	ldr	r3, [pc, #668]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	0a1b      	lsrs	r3, r3, #8
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	3301      	adds	r3, #1
 8006900:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006902:	4ba4      	ldr	r3, [pc, #656]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	f003 0310 	and.w	r3, r3, #16
 800690a:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800690c:	4ba1      	ldr	r3, [pc, #644]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	08db      	lsrs	r3, r3, #3
 8006912:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	fb02 f303 	mul.w	r3, r2, r3
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006924:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 8123 	beq.w	8006b76 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b03      	cmp	r3, #3
 8006934:	d062      	beq.n	80069fc <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b03      	cmp	r3, #3
 800693a:	f200 8081 	bhi.w	8006a40 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d024      	beq.n	800698e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d17a      	bne.n	8006a40 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	ee07 3a90 	vmov	s15, r3
 8006950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006954:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006b98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695c:	4b8d      	ldr	r3, [pc, #564]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800695e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006964:	ee07 3a90 	vmov	s15, r3
 8006968:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800696c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006970:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006b9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006974:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006978:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800697c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006980:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006988:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800698c:	e08f      	b.n	8006aae <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800698e:	4b81      	ldr	r3, [pc, #516]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800699a:	4b7e      	ldr	r3, [pc, #504]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	0f1b      	lsrs	r3, r3, #28
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	e006      	b.n	80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 80069a6:	4b7b      	ldr	r3, [pc, #492]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80069a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069ac:	041b      	lsls	r3, r3, #16
 80069ae:	0f1b      	lsrs	r3, r3, #28
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	4a7a      	ldr	r2, [pc, #488]	; (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80069b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	ee07 3a90 	vmov	s15, r3
 80069c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069da:	ed97 6a02 	vldr	s12, [r7, #8]
 80069de:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006b9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80069e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80069f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069fa:	e058      	b.n	8006aae <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a06:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006b98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0e:	4b61      	ldr	r3, [pc, #388]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a22:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006b9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a3e:	e036      	b.n	8006aae <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006a40:	4b54      	ldr	r3, [pc, #336]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006a4c:	4b51      	ldr	r3, [pc, #324]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	0f1b      	lsrs	r3, r3, #28
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	e006      	b.n	8006a66 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006a58:	4b4e      	ldr	r3, [pc, #312]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	0f1b      	lsrs	r3, r3, #28
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	4a4e      	ldr	r2, [pc, #312]	; (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	ee07 3a90 	vmov	s15, r3
 8006a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a90:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006b9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aac:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006aae:	4b39      	ldr	r3, [pc, #228]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d017      	beq.n	8006aea <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006aba:	4b36      	ldr	r3, [pc, #216]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	0a5b      	lsrs	r3, r3, #9
 8006ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac4:	ee07 3a90 	vmov	s15, r3
 8006ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ad0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ae0:	ee17 2a90 	vmov	r2, s15
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e002      	b.n	8006af0 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006af0:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d017      	beq.n	8006b2c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006afc:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b00:	0c1b      	lsrs	r3, r3, #16
 8006b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b12:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b22:	ee17 2a90 	vmov	r2, s15
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]
 8006b2a:	e002      	b.n	8006b32 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006b32:	4b18      	ldr	r3, [pc, #96]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d017      	beq.n	8006b6e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b3e:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b42:	0e1b      	lsrs	r3, r3, #24
 8006b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b48:	ee07 3a90 	vmov	s15, r3
 8006b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006b50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b54:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b58:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b64:	ee17 2a90 	vmov	r2, s15
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	609a      	str	r2, [r3, #8]
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }
}
 8006b6c:	e00c      	b.n	8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	609a      	str	r2, [r3, #8]
}
 8006b74:	e008      	b.n	8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	609a      	str	r2, [r3, #8]
}
 8006b88:	bf00      	nop
 8006b8a:	3724      	adds	r7, #36	; 0x24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	46020c00 	.word	0x46020c00
 8006b98:	4b742400 	.word	0x4b742400
 8006b9c:	46000000 	.word	0x46000000
 8006ba0:	0800d74c 	.word	0x0800d74c

08006ba4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b089      	sub	sp, #36	; 0x24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006bac:	4bac      	ldr	r3, [pc, #688]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006bb6:	4baa      	ldr	r3, [pc, #680]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006bc0:	4ba7      	ldr	r3, [pc, #668]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	0a1b      	lsrs	r3, r3, #8
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	3301      	adds	r3, #1
 8006bcc:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006bce:	4ba4      	ldr	r3, [pc, #656]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	f003 0310 	and.w	r3, r3, #16
 8006bd6:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006bd8:	4ba1      	ldr	r3, [pc, #644]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	08db      	lsrs	r3, r3, #3
 8006bde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	fb02 f303 	mul.w	r3, r2, r3
 8006be8:	ee07 3a90 	vmov	s15, r3
 8006bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8123 	beq.w	8006e42 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d062      	beq.n	8006cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	f200 8081 	bhi.w	8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d024      	beq.n	8006c5a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d17a      	bne.n	8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	ee07 3a90 	vmov	s15, r3
 8006c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c20:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c28:	4b8d      	ldr	r3, [pc, #564]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c38:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c3c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c58:	e08f      	b.n	8006d7a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006c5a:	4b81      	ldr	r3, [pc, #516]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006c66:	4b7e      	ldr	r3, [pc, #504]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	0f1b      	lsrs	r3, r3, #28
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	e006      	b.n	8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006c72:	4b7b      	ldr	r3, [pc, #492]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c78:	041b      	lsls	r3, r3, #16
 8006c7a:	0f1b      	lsrs	r3, r3, #28
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	4a7a      	ldr	r2, [pc, #488]	; (8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006caa:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cc6:	e058      	b.n	8006d7a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cda:	4b61      	ldr	r3, [pc, #388]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cee:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d0a:	e036      	b.n	8006d7a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006d0c:	4b54      	ldr	r3, [pc, #336]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006d18:	4b51      	ldr	r3, [pc, #324]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	0f1b      	lsrs	r3, r3, #28
 8006d1e:	f003 030f 	and.w	r3, r3, #15
 8006d22:	e006      	b.n	8006d32 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006d24:	4b4e      	ldr	r3, [pc, #312]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d2a:	041b      	lsls	r3, r3, #16
 8006d2c:	0f1b      	lsrs	r3, r3, #28
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	4a4e      	ldr	r2, [pc, #312]	; (8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d38:	ee07 3a90 	vmov	s15, r3
 8006d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	ee07 3a90 	vmov	s15, r3
 8006d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d58:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d5c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d78:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006d7a:	4b39      	ldr	r3, [pc, #228]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d017      	beq.n	8006db6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d86:	4b36      	ldr	r3, [pc, #216]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	0a5b      	lsrs	r3, r3, #9
 8006d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dac:	ee17 2a90 	vmov	r2, s15
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	e002      	b.n	8006dbc <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006dbc:	4b28      	ldr	r3, [pc, #160]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d017      	beq.n	8006df8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006dc8:	4b25      	ldr	r3, [pc, #148]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dcc:	0c1b      	lsrs	r3, r3, #16
 8006dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dde:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dee:	ee17 2a90 	vmov	r2, s15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	605a      	str	r2, [r3, #4]
 8006df6:	e002      	b.n	8006dfe <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006dfe:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d017      	beq.n	8006e3a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e0a:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	0e1b      	lsrs	r3, r3, #24
 8006e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e14:	ee07 3a90 	vmov	s15, r3
 8006e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e20:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e30:	ee17 2a90 	vmov	r2, s15
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e38:	e00c      	b.n	8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	e008      	b.n	8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	609a      	str	r2, [r3, #8]
}
 8006e54:	bf00      	nop
 8006e56:	3724      	adds	r7, #36	; 0x24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	46020c00 	.word	0x46020c00
 8006e64:	4b742400 	.word	0x4b742400
 8006e68:	46000000 	.word	0x46000000
 8006e6c:	0800d74c 	.word	0x0800d74c

08006e70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	; 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006e78:	4bac      	ldr	r3, [pc, #688]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e80:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006e82:	4baa      	ldr	r3, [pc, #680]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006e8c:	4ba7      	ldr	r3, [pc, #668]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e90:	0a1b      	lsrs	r3, r3, #8
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	3301      	adds	r3, #1
 8006e98:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006e9a:	4ba4      	ldr	r3, [pc, #656]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006ea4:	4ba1      	ldr	r3, [pc, #644]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea8:	08db      	lsrs	r3, r3, #3
 8006eaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	fb02 f303 	mul.w	r3, r2, r3
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 8123 	beq.w	800710e <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d062      	beq.n	8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	f200 8081 	bhi.w	8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d024      	beq.n	8006f26 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d17a      	bne.n	8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eec:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef4:	4b8d      	ldr	r3, [pc, #564]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efc:	ee07 3a90 	vmov	s15, r3
 8006f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f04:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f08:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8007134 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f20:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006f24:	e08f      	b.n	8007046 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006f26:	4b81      	ldr	r3, [pc, #516]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8006f32:	4b7e      	ldr	r3, [pc, #504]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	0f1b      	lsrs	r3, r3, #28
 8006f38:	f003 030f 	and.w	r3, r3, #15
 8006f3c:	e006      	b.n	8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8006f3e:	4b7b      	ldr	r3, [pc, #492]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f44:	041b      	lsls	r3, r3, #16
 8006f46:	0f1b      	lsrs	r3, r3, #28
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	4a7a      	ldr	r2, [pc, #488]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	ee07 3a90 	vmov	s15, r3
 8006f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f76:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007134 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f92:	e058      	b.n	8007046 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa6:	4b61      	ldr	r3, [pc, #388]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fba:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007134 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fd6:	e036      	b.n	8007046 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006fd8:	4b54      	ldr	r3, [pc, #336]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8006fe4:	4b51      	ldr	r3, [pc, #324]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	0f1b      	lsrs	r3, r3, #28
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	e006      	b.n	8006ffe <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8006ff0:	4b4e      	ldr	r3, [pc, #312]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	0f1b      	lsrs	r3, r3, #28
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	4a4e      	ldr	r2, [pc, #312]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	ee07 3a90 	vmov	s15, r3
 8007020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007024:	ed97 6a02 	vldr	s12, [r7, #8]
 8007028:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007134 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800702c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007038:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800703c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007044:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007046:	4b39      	ldr	r3, [pc, #228]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d017      	beq.n	8007082 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007052:	4b36      	ldr	r3, [pc, #216]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007056:	0a5b      	lsrs	r3, r3, #9
 8007058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800705c:	ee07 3a90 	vmov	s15, r3
 8007060:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007068:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800706c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007078:	ee17 2a90 	vmov	r2, s15
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	e002      	b.n	8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007088:	4b28      	ldr	r3, [pc, #160]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d017      	beq.n	80070c4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007094:	4b25      	ldr	r3, [pc, #148]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007098:	0c1b      	lsrs	r3, r3, #16
 800709a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80070a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070aa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ba:	ee17 2a90 	vmov	r2, s15
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	605a      	str	r2, [r3, #4]
 80070c2:	e002      	b.n	80070ca <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80070ca:	4b18      	ldr	r3, [pc, #96]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d017      	beq.n	8007106 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070d6:	4b15      	ldr	r3, [pc, #84]	; (800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070da:	0e1b      	lsrs	r3, r3, #24
 80070dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80070e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ec:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070fc:	ee17 2a90 	vmov	r2, s15
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007104:	e00c      	b.n	8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	609a      	str	r2, [r3, #8]
}
 800710c:	e008      	b.n	8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	609a      	str	r2, [r3, #8]
}
 8007120:	bf00      	nop
 8007122:	3724      	adds	r7, #36	; 0x24
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	46020c00 	.word	0x46020c00
 8007130:	4b742400 	.word	0x4b742400
 8007134:	46000000 	.word	0x46000000
 8007138:	0800d74c 	.word	0x0800d74c

0800713c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08e      	sub	sp, #56	; 0x38
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800714a:	d145      	bne.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800714c:	4bcc      	ldr	r3, [pc, #816]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800714e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007156:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007158:	4bc9      	ldr	r3, [pc, #804]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800715a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b02      	cmp	r3, #2
 8007164:	d108      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800716c:	d104      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
    {
      frequency = LSE_VALUE;
 800716e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
 8007174:	f001 b8cd 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007178:	4bc1      	ldr	r3, [pc, #772]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800717a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800717e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007186:	d114      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800718e:	d110      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007190:	4bbb      	ldr	r3, [pc, #748]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8007192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800719a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800719e:	d103      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      {
        frequency = LSI_VALUE / 128U;
 80071a0:	23fa      	movs	r3, #250	; 0xfa
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071a4:	f001 b8b5 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
      else
      {
        frequency = LSI_VALUE;
 80071a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071ae:	f001 b8b0 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80071b2:	4bb3      	ldr	r3, [pc, #716]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071be:	d107      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071c6:	d103      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
    {
      frequency = HSE_VALUE / 32U;
 80071c8:	4bae      	ldr	r3, [pc, #696]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
 80071cc:	f001 b8a1 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
 80071d4:	f001 b89d 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071de:	f001 806d 	beq.w	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071e8:	f201 8090 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071f2:	f000 86d3 	beq.w	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071fc:	f201 8086 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007206:	f001 8004 	beq.w	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x10d6>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007210:	f201 807c 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800721a:	f000 878b 	beq.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007224:	f201 8072 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800722e:	f000 8732 	beq.w	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007238:	f201 8068 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007242:	f000 86d9 	beq.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800724c:	f201 805e 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007256:	f000 8592 	beq.w	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007260:	f201 8054 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800726a:	f000 81f6 	beq.w	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007274:	f201 804a 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800727e:	f000 8194 	beq.w	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007288:	f201 8040 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007292:	f000 847f 	beq.w	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800729c:	f201 8036 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a6:	f000 842a 	beq.w	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b0:	f201 802c 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ba:	f000 83bd 	beq.w	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c4:	f201 8022 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ce:	f000 80f1 	beq.w	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d8:	f201 8018 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e2:	f000 8095 	beq.w	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ec:	f201 800e 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f6:	f000 8131 	beq.w	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	f201 8004 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730a:	f000 855e 	beq.w	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007314:	f200 87fa 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800731e:	f000 85f8 	beq.w	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007328:	f200 87f0 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007332:	f000 859c 	beq.w	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800733c:	f200 87e6 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007346:	f000 84d0 	beq.w	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007350:	f200 87dc 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b80      	cmp	r3, #128	; 0x80
 8007358:	f000 849b 	beq.w	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	f200 87d4 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b20      	cmp	r3, #32
 8007368:	d84c      	bhi.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 87cd 	beq.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	3b01      	subs	r3, #1
 8007376:	2b1f      	cmp	r3, #31
 8007378:	f200 87c8 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x248>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	08007755 	.word	0x08007755
 8007388:	080077c3 	.word	0x080077c3
 800738c:	0800830d 	.word	0x0800830d
 8007390:	08007831 	.word	0x08007831
 8007394:	0800830d 	.word	0x0800830d
 8007398:	0800830d 	.word	0x0800830d
 800739c:	0800830d 	.word	0x0800830d
 80073a0:	0800789f 	.word	0x0800789f
 80073a4:	0800830d 	.word	0x0800830d
 80073a8:	0800830d 	.word	0x0800830d
 80073ac:	0800830d 	.word	0x0800830d
 80073b0:	0800830d 	.word	0x0800830d
 80073b4:	0800830d 	.word	0x0800830d
 80073b8:	0800830d 	.word	0x0800830d
 80073bc:	0800830d 	.word	0x0800830d
 80073c0:	0800790d 	.word	0x0800790d
 80073c4:	0800830d 	.word	0x0800830d
 80073c8:	0800830d 	.word	0x0800830d
 80073cc:	0800830d 	.word	0x0800830d
 80073d0:	0800830d 	.word	0x0800830d
 80073d4:	0800830d 	.word	0x0800830d
 80073d8:	0800830d 	.word	0x0800830d
 80073dc:	0800830d 	.word	0x0800830d
 80073e0:	0800830d 	.word	0x0800830d
 80073e4:	0800830d 	.word	0x0800830d
 80073e8:	0800830d 	.word	0x0800830d
 80073ec:	0800830d 	.word	0x0800830d
 80073f0:	0800830d 	.word	0x0800830d
 80073f4:	0800830d 	.word	0x0800830d
 80073f8:	0800830d 	.word	0x0800830d
 80073fc:	0800830d 	.word	0x0800830d
 8007400:	08007981 	.word	0x08007981
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b40      	cmp	r3, #64	; 0x40
 8007408:	f000 841d 	beq.w	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800740c:	f000 bf7e 	b.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
    {
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007410:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8007412:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007416:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800741a:	633b      	str	r3, [r7, #48]	; 0x30
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	2b80      	cmp	r3, #128	; 0x80
 8007420:	d036      	beq.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	2b80      	cmp	r3, #128	; 0x80
 8007426:	d840      	bhi.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	2b60      	cmp	r3, #96	; 0x60
 800742c:	d02c      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	2b60      	cmp	r3, #96	; 0x60
 8007432:	d83a      	bhi.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	2b40      	cmp	r3, #64	; 0x40
 8007438:	d009      	beq.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d834      	bhi.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	2b20      	cmp	r3, #32
 800744a:	d010      	beq.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800744c:	e02d      	b.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x36e>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800744e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff fa40 	bl	80068d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800745c:	e028      	b.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800745e:	f107 0318 	add.w	r3, r7, #24
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff fb9e 	bl	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800746c:	e020      	b.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800746e:	f107 030c 	add.w	r3, r7, #12
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fcfc 	bl	8006e70 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800747c:	e018      	b.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 800747e:	bf00      	nop
 8007480:	46020c00 	.word	0x46020c00
 8007484:	0007a120 	.word	0x0007a120

          case RCC_SAI1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007488:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800748e:	e00f      	b.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007490:	4bab      	ldr	r3, [pc, #684]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749c:	d102      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            {
              frequency = HSI_VALUE;
 800749e:	4ba9      	ldr	r3, [pc, #676]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 80074a2:	e005      	b.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
              frequency = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074a8:	e002      	b.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          default :
          {
            frequency = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074ae:	bf00      	nop
          }
        }
        break;
 80074b0:	f000 bf2f 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80074b4:	4ba2      	ldr	r3, [pc, #648]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80074b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c6:	d037      	beq.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ce:	d840      	bhi.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d6:	d02b      	beq.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074de:	d838      	bhi.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e6:	d00b      	beq.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ee:	d830      	bhi.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00c      	beq.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fc:	d010      	beq.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 80074fe:	e028      	b.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x416>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff f9e7 	bl	80068d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800750e:	e023      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007510:	f107 0318 	add.w	r3, r7, #24
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff fb45 	bl	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800751e:	e01b      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007520:	f107 030c 	add.w	r3, r7, #12
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fca3 	bl	8006e70 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800752e:	e013      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007530:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007534:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007536:	e00f      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007538:	4b81      	ldr	r3, [pc, #516]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007544:	d102      	bne.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
            {
              frequency = HSI_VALUE;
 8007546:	4b7f      	ldr	r3, [pc, #508]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8007548:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800754a:	e005      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              frequency = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007550:	e002      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          default :

            frequency = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007556:	bf00      	nop

        }
        break;
 8007558:	f000 bedb 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      case RCC_PERIPHCLK_SAES:
        /* Get the current SAES source */
        srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800755c:	4b78      	ldr	r3, [pc, #480]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800755e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007566:	633b      	str	r3, [r7, #48]	; 0x30

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007568:	4b75      	ldr	r3, [pc, #468]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007574:	d105      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        {
          frequency = HSI_VALUE;
 800757c:	4b71      	ldr	r3, [pc, #452]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
 8007580:	e011      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007582:	4b6f      	ldr	r3, [pc, #444]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800758a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800758e:	d106      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007596:	d102      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
        {
          frequency = HSI_VALUE >> 1U;
 8007598:	4b6b      	ldr	r3, [pc, #428]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
 800759c:	e003      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        /* Clock not enabled for SAES */
        else
        {
          frequency = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80075a2:	f000 beb6 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80075a6:	f000 beb4 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_CLK48:

        srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 80075aa:	4b65      	ldr	r3, [pc, #404]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80075ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075b0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80075b4:	633b      	str	r3, [r7, #48]	; 0x30
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80075bc:	d030      	beq.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80075c4:	d844      	bhi.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075cc:	d00b      	beq.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075d4:	d83c      	bhi.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d014      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075e2:	d008      	beq.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80075e4:	e034      	b.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x514>

        switch (srcclk)
        {
          case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff f974 	bl	80068d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075f4:	e02f      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075f6:	f107 0318 	add.w	r3, r7, #24
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fad2 	bl	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007604:	e027      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007606:	4b4e      	ldr	r3, [pc, #312]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800760e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007612:	d102      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
            {
              frequency = HSI48_VALUE;
 8007614:	4b4d      	ldr	r3, [pc, #308]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8007618:	e01d      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
              frequency = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800761e:	e01a      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007620:	4b47      	ldr	r3, [pc, #284]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800762c:	4b44      	ldr	r3, [pc, #272]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	0e1b      	lsrs	r3, r3, #24
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	e006      	b.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8007638:	4b41      	ldr	r3, [pc, #260]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800763a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	0e1b      	lsrs	r3, r3, #24
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	4a42      	ldr	r2, [pc, #264]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8007648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800764e:	e002      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          default :

            frequency = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007654:	bf00      	nop

        }
        break;
 8007656:	f000 be5c 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SDMMC:
        srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800765a:	4b39      	ldr	r3, [pc, #228]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800765c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007664:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	2b00      	cmp	r3, #0
 800766a:	d157      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 800766c:	4b34      	ldr	r3, [pc, #208]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800766e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007672:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007676:	633b      	str	r3, [r7, #48]	; 0x30
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800767e:	d030      	beq.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007686:	d844      	bhi.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800768e:	d00b      	beq.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007696:	d83c      	bhi.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	2b00      	cmp	r3, #0
 800769c:	d014      	beq.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076a4:	d008      	beq.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 80076a6:	e034      	b.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>

          switch (srcclk)
          {
            case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */
            {
              HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff f913 	bl	80068d8 <HAL_RCCEx_GetPLL1ClockFreq>
              frequency = pll1_clocks.PLL1_Q_Frequency;
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80076b6:	e02f      	b.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */
            {
              HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076b8:	f107 0318 	add.w	r3, r7, #24
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff fa71 	bl	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq>
              frequency = pll2_clocks.PLL2_Q_Frequency;
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80076c6:	e027      	b.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */
            {
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80076c8:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d4:	d102      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
              {
                frequency = HSI48_VALUE;
 80076d6:	4b1d      	ldr	r3, [pc, #116]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
              }
              else
              {
                frequency = 0U;
              }
              break;
 80076da:	e01d      	b.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
                frequency = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80076e0:	e01a      	b.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
            {
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076e2:	4b17      	ldr	r3, [pc, #92]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80076ee:	4b14      	ldr	r3, [pc, #80]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	0e1b      	lsrs	r3, r3, #24
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	e006      	b.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80076fa:	4b11      	ldr	r3, [pc, #68]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80076fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007700:	041b      	lsls	r3, r3, #16
 8007702:	0e1b      	lsrs	r3, r3, #24
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	4a11      	ldr	r2, [pc, #68]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 800770a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007710:	e002      	b.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            default :
            {
              frequency = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007716:	bf00      	nop
            }
          }
          break;
 8007718:	f000 bdfb 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        }
        else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007722:	d108      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007728:	4618      	mov	r0, r3
 800772a:	f7ff f8d5 	bl	80068d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_P_Frequency;
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007732:	f000 bdee 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800773a:	f000 bdea 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800773e:	bf00      	nop
 8007740:	46020c00 	.word	0x46020c00
 8007744:	00f42400 	.word	0x00f42400
 8007748:	007a1200 	.word	0x007a1200
 800774c:	02dc6c00 	.word	0x02dc6c00
 8007750:	0800d74c 	.word	0x0800d74c

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007754:	4bad      	ldr	r3, [pc, #692]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	2b00      	cmp	r3, #0
 8007764:	d104      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007766:	f7fe fbc5 	bl	8005ef4 <HAL_RCC_GetPCLK2Freq>
 800776a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800776c:	f000 bdd1 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	2b01      	cmp	r3, #1
 8007774:	d104      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
          frequency = HAL_RCC_GetSysClockFreq();
 8007776:	f7fe fa87 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 800777a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800777c:	f000 bdc9 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007780:	4ba2      	ldr	r3, [pc, #648]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778c:	d105      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	2b02      	cmp	r3, #2
 8007792:	d102      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          frequency = HSI_VALUE;
 8007794:	4b9e      	ldr	r3, [pc, #632]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
 8007798:	e011      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800779a:	4b9c      	ldr	r3, [pc, #624]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800779c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d106      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d103      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          frequency = LSE_VALUE;
 80077ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
 80077b4:	e003      	b.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          frequency = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077ba:	f000 bdaa 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80077be:	f000 bda8 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80077c2:	4b92      	ldr	r3, [pc, #584]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80077c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077c8:	f003 030c 	and.w	r3, r3, #12
 80077cc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d104      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80077d4:	f7fe fb7a 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 80077d8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80077da:	f000 bd9a 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	2b04      	cmp	r3, #4
 80077e2:	d104      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          frequency = HAL_RCC_GetSysClockFreq();
 80077e4:	f7fe fa50 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 80077e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80077ea:	f000 bd92 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80077ee:	4b87      	ldr	r3, [pc, #540]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077fa:	d105      	bne.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d102      	bne.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
          frequency = HSI_VALUE;
 8007802:	4b83      	ldr	r3, [pc, #524]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
 8007806:	e011      	b.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007808:	4b80      	ldr	r3, [pc, #512]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800780a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b02      	cmp	r3, #2
 8007814:	d106      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	2b0c      	cmp	r3, #12
 800781a:	d103      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = LSE_VALUE;
 800781c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
 8007822:	e003      	b.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007828:	f000 bd73 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800782c:	f000 bd71 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007830:	4b76      	ldr	r3, [pc, #472]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007836:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800783a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	2b00      	cmp	r3, #0
 8007840:	d104      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007842:	f7fe fb43 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8007846:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007848:	f000 bd63 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	2b10      	cmp	r3, #16
 8007850:	d104      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = HAL_RCC_GetSysClockFreq();
 8007852:	f7fe fa19 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8007856:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007858:	f000 bd5b 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800785c:	4b6b      	ldr	r3, [pc, #428]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007868:	d105      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	2b20      	cmp	r3, #32
 800786e:	d102      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          frequency = HSI_VALUE;
 8007870:	4b67      	ldr	r3, [pc, #412]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
 8007874:	e011      	b.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007876:	4b65      	ldr	r3, [pc, #404]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b02      	cmp	r3, #2
 8007882:	d106      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	2b30      	cmp	r3, #48	; 0x30
 8007888:	d103      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = LSE_VALUE;
 800788a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788e:	637b      	str	r3, [r7, #52]	; 0x34
 8007890:	e003      	b.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007896:	f000 bd3c 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800789a:	f000 bd3a 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800789e:	4b5b      	ldr	r3, [pc, #364]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80078a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078a8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d104      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078b0:	f7fe fb0c 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 80078b4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80078b6:	f000 bd2c 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d104      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          frequency = HAL_RCC_GetSysClockFreq();
 80078c0:	f7fe f9e2 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 80078c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80078c6:	f000 bd24 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80078ca:	4b50      	ldr	r3, [pc, #320]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d6:	d105      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	2b80      	cmp	r3, #128	; 0x80
 80078dc:	d102      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HSI_VALUE;
 80078de:	4b4c      	ldr	r3, [pc, #304]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
 80078e2:	e011      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80078e4:	4b49      	ldr	r3, [pc, #292]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80078e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d106      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	2bc0      	cmp	r3, #192	; 0xc0
 80078f6:	d103      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = LSE_VALUE;
 80078f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34
 80078fe:	e003      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
          frequency = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007904:	f000 bd05 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007908:	f000 bd03 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800790c:	4b3f      	ldr	r3, [pc, #252]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800790e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007916:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800791e:	f7fe fad5 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8007922:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007924:	f000 bcf5 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792e:	d104      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
          frequency = HAL_RCC_GetSysClockFreq();
 8007930:	f7fe f9aa 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8007934:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007936:	f000 bcec 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800793a:	4b34      	ldr	r3, [pc, #208]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007946:	d106      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800794e:	d102      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
          frequency = HSI_VALUE;
 8007950:	4b2f      	ldr	r3, [pc, #188]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
 8007954:	e012      	b.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007956:	4b2d      	ldr	r3, [pc, #180]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b02      	cmp	r3, #2
 8007962:	d107      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800796a:	d103      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          frequency = LSE_VALUE;
 800796c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007970:	637b      	str	r3, [r7, #52]	; 0x34
 8007972:	e003      	b.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
          frequency = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007978:	f000 bccb 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800797c:	f000 bcc9 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007980:	4b22      	ldr	r3, [pc, #136]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007992:	f7fe fac3 	bl	8005f1c <HAL_RCC_GetPCLK3Freq>
 8007996:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007998:	f000 bcbb 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d104      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80079a2:	f7fe f971 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 80079a6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80079a8:	f000 bcb3 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80079ac:	4b17      	ldr	r3, [pc, #92]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b8:	d105      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d102      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HSI_VALUE;
 80079c0:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80079c2:	637b      	str	r3, [r7, #52]	; 0x34
 80079c4:	e036      	b.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80079c6:	4b11      	ldr	r3, [pc, #68]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80079c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d106      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d103      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          frequency = LSE_VALUE;
 80079da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079de:	637b      	str	r3, [r7, #52]	; 0x34
 80079e0:	e028      	b.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80079e2:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d11e      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d11b      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079f4:	4b05      	ldr	r3, [pc, #20]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d009      	beq.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8007a00:	4b02      	ldr	r3, [pc, #8]	; (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	0e1b      	lsrs	r3, r3, #24
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	e00a      	b.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007a0c:	46020c00 	.word	0x46020c00
 8007a10:	00f42400 	.word	0x00f42400
 8007a14:	4bb0      	ldr	r3, [pc, #704]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007a16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a1a:	041b      	lsls	r3, r3, #16
 8007a1c:	0e1b      	lsrs	r3, r3, #24
 8007a1e:	f003 030f 	and.w	r3, r3, #15
 8007a22:	4aae      	ldr	r2, [pc, #696]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 8007a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2a:	e003      	b.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a30:	f000 bc6f 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007a34:	f000 bc6d 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADCDAC:

        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007a38:	4ba7      	ldr	r3, [pc, #668]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007a3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a3e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007a42:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4a:	d104      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        {
          frequency = HAL_RCC_GetSysClockFreq();
 8007a4c:	f7fe f91c 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8007a50:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADC */
        else
        {
          frequency = 0U;
        }
        break;
 8007a52:	f000 bc5e 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5c:	d108      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a5e:	f107 0318 	add.w	r3, r7, #24
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff f89e 	bl	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a6c:	f000 bc51 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetHCLKFreq();
 8007a76:	f7fe fa0f 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8007a7a:	6378      	str	r0, [r7, #52]	; 0x34
          break;
 8007a7c:	f000 bc49 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007a86:	d118      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007a88:	4b93      	ldr	r3, [pc, #588]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007a94:	4b90      	ldr	r3, [pc, #576]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	0f1b      	lsrs	r3, r3, #28
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	e006      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8007aa0:	4b8d      	ldr	r3, [pc, #564]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	0f1b      	lsrs	r3, r3, #28
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	4a8b      	ldr	r2, [pc, #556]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 8007ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007ab6:	f000 bc2c 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007aba:	4b87      	ldr	r3, [pc, #540]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ac6:	d106      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ace:	d102      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
          frequency = HSE_VALUE;
 8007ad0:	4b83      	ldr	r3, [pc, #524]	; (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8007ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad4:	e011      	b.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007ad6:	4b80      	ldr	r3, [pc, #512]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae2:	d106      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aea:	d102      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          frequency = HSI_VALUE;
 8007aec:	4b7c      	ldr	r3, [pc, #496]	; (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8007aee:	637b      	str	r3, [r7, #52]	; 0x34
 8007af0:	e003      	b.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          frequency = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007af6:	f000 bc0c 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007afa:	f000 bc0a 	b.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_MDF1:
        /* Get the current MDF1 source */
        srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007afe:	4b76      	ldr	r3, [pc, #472]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007b00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	633b      	str	r3, [r7, #48]	; 0x30
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d83d      	bhi.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007b10:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007b4d 	.word	0x08007b4d
 8007b1c:	08007b2d 	.word	0x08007b2d
 8007b20:	08007b3d 	.word	0x08007b3d
 8007b24:	08007b55 	.word	0x08007b55
 8007b28:	08007b5d 	.word	0x08007b5d

        switch (srcclk)
        {
          case RCC_MDF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fe fed1 	bl	80068d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b3a:	e02a      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b3c:	f107 030c 	add.w	r3, r7, #12
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff f995 	bl	8006e70 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b4a:	e022      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 8007b4c:	f7fe f9a4 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8007b50:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007b52:	e01e      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007b54:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b5a:	e01a      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b5c:	4b5e      	ldr	r3, [pc, #376]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8007b68:	4b5b      	ldr	r3, [pc, #364]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	0e1b      	lsrs	r3, r3, #24
 8007b6e:	f003 030f 	and.w	r3, r3, #15
 8007b72:	e006      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007b74:	4b58      	ldr	r3, [pc, #352]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b7a:	041b      	lsls	r3, r3, #16
 8007b7c:	0e1b      	lsrs	r3, r3, #24
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	4a56      	ldr	r2, [pc, #344]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 8007b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b8a:	e002      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          default:

            frequency = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b90:	bf00      	nop

        }
        break;
 8007b92:	e3be      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADF1:
        /* Get the current ADF1 source */
        srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007b94:	4b50      	ldr	r3, [pc, #320]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007b96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b9a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ba6:	d032      	beq.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bae:	d846      	bhi.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bb6:	d026      	beq.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bbe:	d83e      	bhi.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bc6:	d012      	beq.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bce:	d836      	bhi.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d013      	beq.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bdc:	d12f      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0xb02>

        switch (srcclk)
        {
          case RCC_ADF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fe78 	bl	80068d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007bec:	e02a      	b.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bee:	f107 030c 	add.w	r3, r7, #12
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff f93c 	bl	8006e70 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007bfc:	e022      	b.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 8007bfe:	f7fe f94b 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8007c02:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007c04:	e01e      	b.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007c06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007c0a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c0c:	e01a      	b.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c0e:	4b32      	ldr	r3, [pc, #200]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8007c1a:	4b2f      	ldr	r3, [pc, #188]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	0e1b      	lsrs	r3, r3, #24
 8007c20:	f003 030f 	and.w	r3, r3, #15
 8007c24:	e006      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8007c26:	4b2c      	ldr	r3, [pc, #176]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c2c:	041b      	lsls	r3, r3, #16
 8007c2e:	0e1b      	lsrs	r3, r3, #24
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	4a29      	ldr	r2, [pc, #164]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 8007c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c3c:	e002      	b.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          default:

            frequency = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c42:	bf00      	nop
        }
        break;
 8007c44:	e365      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c46:	4b24      	ldr	r3, [pc, #144]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c50:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c58:	f7fe f938 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8007c5c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c5e:	e358      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c66:	d103      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c68:	f7fe f80e 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8007c6c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c6e:	e350      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007c70:	4b19      	ldr	r3, [pc, #100]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c7c:	d106      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c84:	d102      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HSI_VALUE;
 8007c86:	4b16      	ldr	r3, [pc, #88]	; (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8007c88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c8a:	e342      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c90:	e33f      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007c92:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c9c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d103      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ca4:	f7fe f912 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8007ca8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007caa:	e332      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb2:	d103      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          frequency = HAL_RCC_GetSysClockFreq();
 8007cb4:	f7fd ffe8 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8007cb8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007cba:	e32a      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007cbc:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc8:	d10c      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd0:	d108      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
          frequency = HSI_VALUE;
 8007cd2:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8007cd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cd6:	e31c      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007cd8:	46020c00 	.word	0x46020c00
 8007cdc:	0800d74c 	.word	0x0800d74c
 8007ce0:	00f42400 	.word	0x00f42400
          frequency = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ce8:	e313      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007cea:	4ba9      	ldr	r3, [pc, #676]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007cf0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	2bc0      	cmp	r3, #192	; 0xc0
 8007cfa:	d024      	beq.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8007d00:	d839      	bhi.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	2b80      	cmp	r3, #128	; 0x80
 8007d06:	d00d      	beq.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	2b80      	cmp	r3, #128	; 0x80
 8007d0c:	d833      	bhi.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	2b40      	cmp	r3, #64	; 0x40
 8007d18:	d011      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 8007d1a:	e02c      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>

        switch (srcclk)
        {
          case RCC_I2C3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007d1c:	f7fe f8fe 	bl	8005f1c <HAL_RCC_GetPCLK3Freq>
 8007d20:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007d22:	e02b      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_HSI:
          {
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d24:	4b9a      	ldr	r3, [pc, #616]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d30:	d102      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
            {
              frequency = HSI_VALUE;
 8007d32:	4b98      	ldr	r3, [pc, #608]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8007d36:	e021      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d3c:	e01e      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_SYSCLK:
          {
            frequency = HAL_RCC_GetSysClockFreq();
 8007d3e:	f7fd ffa3 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8007d42:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007d44:	e01a      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_MSIK:
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007d46:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007d52:	4b8f      	ldr	r3, [pc, #572]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	0f1b      	lsrs	r3, r3, #28
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	e006      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
 8007d5e:	4b8c      	ldr	r3, [pc, #560]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d64:	041b      	lsls	r3, r3, #16
 8007d66:	0f1b      	lsrs	r3, r3, #28
 8007d68:	f003 030f 	and.w	r3, r3, #15
 8007d6c:	4a8a      	ldr	r2, [pc, #552]	; (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 8007d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d74:	e002      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          default:
          {
            frequency = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d7a:	bf00      	nop
          }
        }
        break;
 8007d7c:	e2c9      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007d7e:	4b84      	ldr	r3, [pc, #528]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d103      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d90:	f7fe f89c 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8007d94:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d96:	e2bc      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d9e:	d103      	bne.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007da0:	f7fd ff72 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8007da4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007da6:	e2b4      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007da8:	4b79      	ldr	r3, [pc, #484]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db4:	d106      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dbc:	d102      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
          frequency = HSI_VALUE;
 8007dbe:	4b75      	ldr	r3, [pc, #468]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8007dc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dc2:	e2a6      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dc8:	e2a3      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM34:
        /* Get the current LPTIM34 source */
        srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007dca:	4b71      	ldr	r3, [pc, #452]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d117      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ddc:	4b6c      	ldr	r3, [pc, #432]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 8007de8:	4b69      	ldr	r3, [pc, #420]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	0e1b      	lsrs	r3, r3, #24
 8007dee:	f003 030f 	and.w	r3, r3, #15
 8007df2:	e006      	b.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
 8007df4:	4b66      	ldr	r3, [pc, #408]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dfa:	041b      	lsls	r3, r3, #16
 8007dfc:	0e1b      	lsrs	r3, r3, #24
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	4a65      	ldr	r2, [pc, #404]	; (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 8007e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM34 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e0a:	e282      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007e0c:	4b60      	ldr	r3, [pc, #384]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e1a:	d107      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e22:	d103      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
          frequency = LSI_VALUE;
 8007e24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2a:	e01f      	b.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007e2c:	4b58      	ldr	r3, [pc, #352]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e38:	d106      	bne.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e40:	d102      	bne.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
          frequency = HSI_VALUE;
 8007e42:	4b54      	ldr	r3, [pc, #336]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34
 8007e46:	e011      	b.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007e48:	4b51      	ldr	r3, [pc, #324]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d107      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e5c:	d103      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = LSE_VALUE;
 8007e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e62:	637b      	str	r3, [r7, #52]	; 0x34
 8007e64:	e002      	b.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
          frequency = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e6a:	e252      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007e6c:	e251      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007e6e:	4b48      	ldr	r3, [pc, #288]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e78:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d117      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e80:	4b43      	ldr	r3, [pc, #268]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
 8007e8c:	4b40      	ldr	r3, [pc, #256]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	0e1b      	lsrs	r3, r3, #24
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	e006      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
 8007e98:	4b3d      	ldr	r3, [pc, #244]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e9e:	041b      	lsls	r3, r3, #16
 8007ea0:	0e1b      	lsrs	r3, r3, #24
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	4a3c      	ldr	r2, [pc, #240]	; (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 8007ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eac:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007eae:	e230      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007eb0:	4b37      	ldr	r3, [pc, #220]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007eb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ebe:	d107      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec6:	d103      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
          frequency = LSI_VALUE;
 8007ec8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ece:	e01f      	b.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007ed0:	4b2f      	ldr	r3, [pc, #188]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007edc:	d106      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee4:	d102      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
          frequency = HSI_VALUE;
 8007ee6:	4b2b      	ldr	r3, [pc, #172]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8007ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eea:	e011      	b.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007eec:	4b28      	ldr	r3, [pc, #160]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d107      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f00:	d103      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
          frequency = LSE_VALUE;
 8007f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34
 8007f08:	e002      	b.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
          frequency = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f0e:	e200      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007f10:	e1ff      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007f12:	4b1f      	ldr	r3, [pc, #124]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007f1c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d103      	bne.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f24:	f7fd ffd2 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8007f28:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f2a:	e1f2      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007f2c:	4b18      	ldr	r3, [pc, #96]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f3a:	d107      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f42:	d103      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
          frequency = LSI_VALUE;
 8007f44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34
 8007f4a:	e01f      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007f4c:	4b10      	ldr	r3, [pc, #64]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f58:	d106      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f60:	d102      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HSI_VALUE;
 8007f62:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8007f64:	637b      	str	r3, [r7, #52]	; 0x34
 8007f66:	e011      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007f68:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8007f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d107      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007f7c:	d103      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = LSE_VALUE;
 8007f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f82:	637b      	str	r3, [r7, #52]	; 0x34
 8007f84:	e002      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
          frequency = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f8a:	e1c2      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007f8c:	e1c1      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8007f8e:	bf00      	nop
 8007f90:	46020c00 	.word	0x46020c00
 8007f94:	00f42400 	.word	0x00f42400
 8007f98:	0800d74c 	.word	0x0800d74c

      case RCC_PERIPHCLK_FDCAN1:
        /* Get the current FDCAN1 kernel source */
        srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007f9c:	4bb0      	ldr	r3, [pc, #704]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fa2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007fa6:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007fa8:	4bad      	ldr	r3, [pc, #692]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fb4:	d105      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d102      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
        {
          frequency = HSE_VALUE;
 8007fbc:	4ba9      	ldr	r3, [pc, #676]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007fbe:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007fc0:	e1a7      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fc8:	d107      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fc82 	bl	80068d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fd8:	e19b      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fe0:	d107      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe2:	f107 0318 	add.w	r3, r7, #24
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe fddc 	bl	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ff0:	e18f      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ff6:	e18c      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007ff8:	4b99      	ldr	r3, [pc, #612]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8007ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ffe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008002:	633b      	str	r3, [r7, #48]	; 0x30
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800800a:	d028      	beq.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008012:	d83c      	bhi.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800801a:	d013      	beq.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008022:	d834      	bhi.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008030:	d004      	beq.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8008032:	e02c      	b.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PCLK2:

            frequency = HAL_RCC_GetPCLK2Freq();
 8008034:	f7fd ff5e 	bl	8005ef4 <HAL_RCC_GetPCLK2Freq>
 8008038:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800803a:	e02b      	b.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800803c:	f7fd fe24 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8008040:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008042:	e027      	b.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008044:	4b86      	ldr	r3, [pc, #536]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800804c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008050:	d102      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
            {
              frequency = HSI_VALUE;
 8008052:	4b84      	ldr	r3, [pc, #528]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8008056:	e01d      	b.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
              frequency = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800805c:	e01a      	b.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800805e:	4b80      	ldr	r3, [pc, #512]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800806a:	4b7d      	ldr	r3, [pc, #500]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	0e1b      	lsrs	r3, r3, #24
 8008070:	f003 030f 	and.w	r3, r3, #15
 8008074:	e006      	b.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8008076:	4b7a      	ldr	r3, [pc, #488]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8008078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800807c:	041b      	lsls	r3, r3, #16
 800807e:	0e1b      	lsrs	r3, r3, #24
 8008080:	f003 030f 	and.w	r3, r3, #15
 8008084:	4a78      	ldr	r2, [pc, #480]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 8008086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800808a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800808c:	e002      	b.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          default:

            frequency = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008092:	bf00      	nop

        }
        break;
 8008094:	e13d      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008096:	4b72      	ldr	r3, [pc, #456]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8008098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800809c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080a0:	633b      	str	r3, [r7, #48]	; 0x30
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080a8:	d028      	beq.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xfc0>
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080b0:	d83c      	bhi.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b8:	d013      	beq.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c0:	d834      	bhi.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf96>
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ce:	d004      	beq.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 80080d0:	e02c      	b.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PCLK1:

            frequency = HAL_RCC_GetPCLK1Freq();
 80080d2:	f7fd fefb 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 80080d6:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80080d8:	e02b      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 80080da:	f7fd fdd5 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 80080de:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80080e0:	e027      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080e2:	4b5f      	ldr	r3, [pc, #380]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ee:	d102      	bne.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            {
              frequency = HSI_VALUE;
 80080f0:	4b5c      	ldr	r3, [pc, #368]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80080f2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 80080f4:	e01d      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>
              frequency = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080fa:	e01a      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080fc:	4b58      	ldr	r3, [pc, #352]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d005      	beq.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008108:	4b55      	ldr	r3, [pc, #340]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	0e1b      	lsrs	r3, r3, #24
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	e006      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0xfe6>
 8008114:	4b52      	ldr	r3, [pc, #328]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8008116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800811a:	041b      	lsls	r3, r3, #16
 800811c:	0e1b      	lsrs	r3, r3, #24
 800811e:	f003 030f 	and.w	r3, r3, #15
 8008122:	4a51      	ldr	r2, [pc, #324]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 8008124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008128:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800812a:	e002      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          default:

            frequency = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008130:	bf00      	nop

        }
        break;
 8008132:	e0ee      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008134:	4b4a      	ldr	r3, [pc, #296]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8008136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800813a:	f003 0318 	and.w	r3, r3, #24
 800813e:	633b      	str	r3, [r7, #48]	; 0x30
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	2b18      	cmp	r3, #24
 8008144:	d861      	bhi.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
 8008146:	a201      	add	r2, pc, #4	; (adr r2, 800814c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814c:	080081b1 	.word	0x080081b1
 8008150:	0800820b 	.word	0x0800820b
 8008154:	0800820b 	.word	0x0800820b
 8008158:	0800820b 	.word	0x0800820b
 800815c:	0800820b 	.word	0x0800820b
 8008160:	0800820b 	.word	0x0800820b
 8008164:	0800820b 	.word	0x0800820b
 8008168:	0800820b 	.word	0x0800820b
 800816c:	080081b9 	.word	0x080081b9
 8008170:	0800820b 	.word	0x0800820b
 8008174:	0800820b 	.word	0x0800820b
 8008178:	0800820b 	.word	0x0800820b
 800817c:	0800820b 	.word	0x0800820b
 8008180:	0800820b 	.word	0x0800820b
 8008184:	0800820b 	.word	0x0800820b
 8008188:	0800820b 	.word	0x0800820b
 800818c:	080081c1 	.word	0x080081c1
 8008190:	0800820b 	.word	0x0800820b
 8008194:	0800820b 	.word	0x0800820b
 8008198:	0800820b 	.word	0x0800820b
 800819c:	0800820b 	.word	0x0800820b
 80081a0:	0800820b 	.word	0x0800820b
 80081a4:	0800820b 	.word	0x0800820b
 80081a8:	0800820b 	.word	0x0800820b
 80081ac:	080081db 	.word	0x080081db
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PCLK3:

            frequency = HAL_RCC_GetPCLK3Freq();
 80081b0:	f7fd feb4 	bl	8005f1c <HAL_RCC_GetPCLK3Freq>
 80081b4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80081b6:	e02b      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 80081b8:	f7fd fd66 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 80081bc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80081be:	e027      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081c0:	4b27      	ldr	r3, [pc, #156]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081cc:	d102      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
            {
              frequency = HSI_VALUE;
 80081ce:	4b25      	ldr	r3, [pc, #148]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80081d0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 80081d2:	e01d      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
              frequency = 0U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081d8:	e01a      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081da:	4b21      	ldr	r3, [pc, #132]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b6>
 80081e6:	4b1e      	ldr	r3, [pc, #120]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	0e1b      	lsrs	r3, r3, #24
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	e006      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80081f2:	4b1b      	ldr	r3, [pc, #108]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80081f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081f8:	041b      	lsls	r3, r3, #16
 80081fa:	0e1b      	lsrs	r3, r3, #24
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	4a19      	ldr	r2, [pc, #100]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 8008202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008206:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008208:	e002      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          default:

            frequency = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800820e:	bf00      	nop
        }
        break;
 8008210:	e07f      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008212:	4b13      	ldr	r3, [pc, #76]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8008214:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008218:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800821c:	633b      	str	r3, [r7, #48]	; 0x30
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008224:	d013      	beq.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800822c:	d842      	bhi.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008234:	d01a      	beq.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800823c:	d83a      	bhi.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01b      	beq.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x1140>
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800824a:	d01b      	beq.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x1148>
 800824c:	e032      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_PLL2:

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800824e:	f107 0318 	add.w	r3, r7, #24
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe fca6 	bl	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800825c:	e02d      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800825e:	bf00      	nop
 8008260:	46020c00 	.word	0x46020c00
 8008264:	00f42400 	.word	0x00f42400
 8008268:	0800d74c 	.word	0x0800d74c

          case RCC_OSPICLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800826c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008270:	4618      	mov	r0, r3
 8008272:	f7fe fb31 	bl	80068d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800827a:	e01e      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800827c:	f7fd fd04 	bl	8005c88 <HAL_RCC_GetSysClockFreq>
 8008280:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008282:	e01a      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008284:	4b25      	ldr	r3, [pc, #148]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d005      	beq.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 8008290:	4b22      	ldr	r3, [pc, #136]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	0e1b      	lsrs	r3, r3, #24
 8008296:	f003 030f 	and.w	r3, r3, #15
 800829a:	e006      	b.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x116e>
 800829c:	4b1f      	ldr	r3, [pc, #124]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800829e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082a2:	041b      	lsls	r3, r3, #16
 80082a4:	0e1b      	lsrs	r3, r3, #24
 80082a6:	f003 030f 	and.w	r3, r3, #15
 80082aa:	4a1d      	ldr	r2, [pc, #116]	; (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 80082ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082b2:	e002      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          default:

            frequency = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082b8:	bf00      	nop
        }
        break;
 80082ba:	e02a      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_DAC1:
        /* Get the current DAC1 kernel source */
        srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80082bc:	4b17      	ldr	r3, [pc, #92]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 80082be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c6:	633b      	str	r3, [r7, #48]	; 0x30
        /* Check if LSE is ready and if DAC1 clock selection is LSE */
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80082c8:	4b14      	ldr	r3, [pc, #80]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 80082ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d106      	bne.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
        {
          frequency = LSE_VALUE;
 80082dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082e0:	637b      	str	r3, [r7, #52]	; 0x34
 80082e2:	e012      	b.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Check if LSI is ready and if DAC1 clock selection is LSI */
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80082e4:	4b0d      	ldr	r3, [pc, #52]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 80082e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082f2:	d107      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082fa:	d103      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
        {
          frequency = LSI_VALUE;
 80082fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008300:	637b      	str	r3, [r7, #52]	; 0x34
 8008302:	e002      	b.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Clock not enabled for DAC1*/
        else
        {
          frequency = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008308:	e003      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800830a:	e002      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      default:
         frequency = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008310:	bf00      	nop
    }
  }
  return (frequency);
 8008312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008314:	4618      	mov	r0, r3
 8008316:	3738      	adds	r7, #56	; 0x38
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	46020c00 	.word	0x46020c00
 8008320:	0800d74c 	.word	0x0800d74c

08008324 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800832c:	4b47      	ldr	r3, [pc, #284]	; (800844c <RCCEx_PLL2_Config+0x128>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a46      	ldr	r2, [pc, #280]	; (800844c <RCCEx_PLL2_Config+0x128>)
 8008332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008336:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008338:	f7fc f87c 	bl	8004434 <HAL_GetTick>
 800833c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800833e:	e008      	b.n	8008352 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008340:	f7fc f878 	bl	8004434 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e077      	b.n	8008442 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008352:	4b3e      	ldr	r3, [pc, #248]	; (800844c <RCCEx_PLL2_Config+0x128>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1f0      	bne.n	8008340 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800835e:	4b3b      	ldr	r3, [pc, #236]	; (800844c <RCCEx_PLL2_Config+0x128>)
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008366:	f023 0303 	bic.w	r3, r3, #3
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6811      	ldr	r1, [r2, #0]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6852      	ldr	r2, [r2, #4]
 8008372:	3a01      	subs	r2, #1
 8008374:	0212      	lsls	r2, r2, #8
 8008376:	430a      	orrs	r2, r1
 8008378:	4934      	ldr	r1, [pc, #208]	; (800844c <RCCEx_PLL2_Config+0x128>)
 800837a:	4313      	orrs	r3, r2
 800837c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800837e:	4b33      	ldr	r3, [pc, #204]	; (800844c <RCCEx_PLL2_Config+0x128>)
 8008380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008382:	4b33      	ldr	r3, [pc, #204]	; (8008450 <RCCEx_PLL2_Config+0x12c>)
 8008384:	4013      	ands	r3, r2
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6892      	ldr	r2, [r2, #8]
 800838a:	3a01      	subs	r2, #1
 800838c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	68d2      	ldr	r2, [r2, #12]
 8008394:	3a01      	subs	r2, #1
 8008396:	0252      	lsls	r2, r2, #9
 8008398:	b292      	uxth	r2, r2
 800839a:	4311      	orrs	r1, r2
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6912      	ldr	r2, [r2, #16]
 80083a0:	3a01      	subs	r2, #1
 80083a2:	0412      	lsls	r2, r2, #16
 80083a4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80083a8:	4311      	orrs	r1, r2
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6952      	ldr	r2, [r2, #20]
 80083ae:	3a01      	subs	r2, #1
 80083b0:	0612      	lsls	r2, r2, #24
 80083b2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80083b6:	430a      	orrs	r2, r1
 80083b8:	4924      	ldr	r1, [pc, #144]	; (800844c <RCCEx_PLL2_Config+0x128>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80083be:	4b23      	ldr	r3, [pc, #140]	; (800844c <RCCEx_PLL2_Config+0x128>)
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	f023 020c 	bic.w	r2, r3, #12
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	4920      	ldr	r1, [pc, #128]	; (800844c <RCCEx_PLL2_Config+0x128>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80083d0:	4b1e      	ldr	r3, [pc, #120]	; (800844c <RCCEx_PLL2_Config+0x128>)
 80083d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	491c      	ldr	r1, [pc, #112]	; (800844c <RCCEx_PLL2_Config+0x128>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80083de:	4b1b      	ldr	r3, [pc, #108]	; (800844c <RCCEx_PLL2_Config+0x128>)
 80083e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e2:	4a1a      	ldr	r2, [pc, #104]	; (800844c <RCCEx_PLL2_Config+0x128>)
 80083e4:	f023 0310 	bic.w	r3, r3, #16
 80083e8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083ea:	4b18      	ldr	r3, [pc, #96]	; (800844c <RCCEx_PLL2_Config+0x128>)
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	69d2      	ldr	r2, [r2, #28]
 80083fa:	00d2      	lsls	r2, r2, #3
 80083fc:	4913      	ldr	r1, [pc, #76]	; (800844c <RCCEx_PLL2_Config+0x128>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008402:	4b12      	ldr	r3, [pc, #72]	; (800844c <RCCEx_PLL2_Config+0x128>)
 8008404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008406:	4a11      	ldr	r2, [pc, #68]	; (800844c <RCCEx_PLL2_Config+0x128>)
 8008408:	f043 0310 	orr.w	r3, r3, #16
 800840c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800840e:	4b0f      	ldr	r3, [pc, #60]	; (800844c <RCCEx_PLL2_Config+0x128>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a0e      	ldr	r2, [pc, #56]	; (800844c <RCCEx_PLL2_Config+0x128>)
 8008414:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008418:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800841a:	f7fc f80b 	bl	8004434 <HAL_GetTick>
 800841e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008420:	e008      	b.n	8008434 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008422:	f7fc f807 	bl	8004434 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	2b02      	cmp	r3, #2
 800842e:	d901      	bls.n	8008434 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e006      	b.n	8008442 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008434:	4b05      	ldr	r3, [pc, #20]	; (800844c <RCCEx_PLL2_Config+0x128>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0f0      	beq.n	8008422 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008440:	2300      	movs	r3, #0

}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	46020c00 	.word	0x46020c00
 8008450:	80800000 	.word	0x80800000

08008454 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters N & P & optionally M as well as PLL3 output clock(s)
  * @note   PLL3 is temporary disable to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800845c:	4b47      	ldr	r3, [pc, #284]	; (800857c <RCCEx_PLL3_Config+0x128>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a46      	ldr	r2, [pc, #280]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008466:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008468:	f7fb ffe4 	bl	8004434 <HAL_GetTick>
 800846c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800846e:	e008      	b.n	8008482 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008470:	f7fb ffe0 	bl	8004434 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b02      	cmp	r3, #2
 800847c:	d901      	bls.n	8008482 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e077      	b.n	8008572 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008482:	4b3e      	ldr	r3, [pc, #248]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f0      	bne.n	8008470 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800848e:	4b3b      	ldr	r3, [pc, #236]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008496:	f023 0303 	bic.w	r3, r3, #3
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6811      	ldr	r1, [r2, #0]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6852      	ldr	r2, [r2, #4]
 80084a2:	3a01      	subs	r2, #1
 80084a4:	0212      	lsls	r2, r2, #8
 80084a6:	430a      	orrs	r2, r1
 80084a8:	4934      	ldr	r1, [pc, #208]	; (800857c <RCCEx_PLL3_Config+0x128>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	630b      	str	r3, [r1, #48]	; 0x30
 80084ae:	4b33      	ldr	r3, [pc, #204]	; (800857c <RCCEx_PLL3_Config+0x128>)
 80084b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084b2:	4b33      	ldr	r3, [pc, #204]	; (8008580 <RCCEx_PLL3_Config+0x12c>)
 80084b4:	4013      	ands	r3, r2
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	6892      	ldr	r2, [r2, #8]
 80084ba:	3a01      	subs	r2, #1
 80084bc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	68d2      	ldr	r2, [r2, #12]
 80084c4:	3a01      	subs	r2, #1
 80084c6:	0252      	lsls	r2, r2, #9
 80084c8:	b292      	uxth	r2, r2
 80084ca:	4311      	orrs	r1, r2
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6912      	ldr	r2, [r2, #16]
 80084d0:	3a01      	subs	r2, #1
 80084d2:	0412      	lsls	r2, r2, #16
 80084d4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80084d8:	4311      	orrs	r1, r2
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	6952      	ldr	r2, [r2, #20]
 80084de:	3a01      	subs	r2, #1
 80084e0:	0612      	lsls	r2, r2, #24
 80084e2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80084e6:	430a      	orrs	r2, r1
 80084e8:	4924      	ldr	r1, [pc, #144]	; (800857c <RCCEx_PLL3_Config+0x128>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80084ee:	4b23      	ldr	r3, [pc, #140]	; (800857c <RCCEx_PLL3_Config+0x128>)
 80084f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f2:	f023 020c 	bic.w	r2, r3, #12
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	4920      	ldr	r1, [pc, #128]	; (800857c <RCCEx_PLL3_Config+0x128>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008500:	4b1e      	ldr	r3, [pc, #120]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	491c      	ldr	r1, [pc, #112]	; (800857c <RCCEx_PLL3_Config+0x128>)
 800850a:	4313      	orrs	r3, r2
 800850c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800850e:	4b1b      	ldr	r3, [pc, #108]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008512:	4a1a      	ldr	r2, [pc, #104]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008514:	f023 0310 	bic.w	r3, r3, #16
 8008518:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800851a:	4b18      	ldr	r3, [pc, #96]	; (800857c <RCCEx_PLL3_Config+0x128>)
 800851c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800851e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008522:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	69d2      	ldr	r2, [r2, #28]
 800852a:	00d2      	lsls	r2, r2, #3
 800852c:	4913      	ldr	r1, [pc, #76]	; (800857c <RCCEx_PLL3_Config+0x128>)
 800852e:	4313      	orrs	r3, r2
 8008530:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008532:	4b12      	ldr	r3, [pc, #72]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	4a11      	ldr	r2, [pc, #68]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008538:	f043 0310 	orr.w	r3, r3, #16
 800853c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800853e:	4b0f      	ldr	r3, [pc, #60]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a0e      	ldr	r2, [pc, #56]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008548:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800854a:	f7fb ff73 	bl	8004434 <HAL_GetTick>
 800854e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008550:	e008      	b.n	8008564 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008552:	f7fb ff6f 	bl	8004434 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	2b02      	cmp	r3, #2
 800855e:	d901      	bls.n	8008564 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e006      	b.n	8008572 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008564:	4b05      	ldr	r3, [pc, #20]	; (800857c <RCCEx_PLL3_Config+0x128>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d0f0      	beq.n	8008552 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	46020c00 	.word	0x46020c00
 8008580:	80800000 	.word	0x80800000

08008584 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e0dd      	b.n	8008752 <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a70      	ldr	r2, [pc, #448]	; (800875c <HAL_SPI_Init+0x1d8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d004      	beq.n	80085aa <HAL_SPI_Init+0x26>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a6e      	ldr	r2, [pc, #440]	; (8008760 <HAL_SPI_Init+0x1dc>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	e000      	b.n	80085ac <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80085aa:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a69      	ldr	r2, [pc, #420]	; (800875c <HAL_SPI_Init+0x1d8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d004      	beq.n	80085c6 <HAL_SPI_Init+0x42>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a67      	ldr	r2, [pc, #412]	; (8008760 <HAL_SPI_Init+0x1dc>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d105      	bne.n	80085d2 <HAL_SPI_Init+0x4e>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	2b0f      	cmp	r3, #15
 80085cc:	d901      	bls.n	80085d2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e0bf      	b.n	8008752 <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 f8e4 	bl	80097a0 <SPI_GetPacketSize>
 80085d8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a5f      	ldr	r2, [pc, #380]	; (800875c <HAL_SPI_Init+0x1d8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d004      	beq.n	80085ee <HAL_SPI_Init+0x6a>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a5d      	ldr	r2, [pc, #372]	; (8008760 <HAL_SPI_Init+0x1dc>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d102      	bne.n	80085f4 <HAL_SPI_Init+0x70>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d816      	bhi.n	8008622 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80085f8:	4a5a      	ldr	r2, [pc, #360]	; (8008764 <HAL_SPI_Init+0x1e0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d00e      	beq.n	800861c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a59      	ldr	r2, [pc, #356]	; (8008768 <HAL_SPI_Init+0x1e4>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d009      	beq.n	800861c <HAL_SPI_Init+0x98>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a57      	ldr	r2, [pc, #348]	; (800876c <HAL_SPI_Init+0x1e8>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d004      	beq.n	800861c <HAL_SPI_Init+0x98>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a56      	ldr	r2, [pc, #344]	; (8008770 <HAL_SPI_Init+0x1ec>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d104      	bne.n	8008626 <HAL_SPI_Init+0xa2>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b10      	cmp	r3, #16
 8008620:	d901      	bls.n	8008626 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e095      	b.n	8008752 <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d106      	bne.n	8008640 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7f9 f97e 	bl	800193c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0201 	bic.w	r2, r2, #1
 8008656:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008662:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800866c:	d119      	bne.n	80086a2 <HAL_SPI_Init+0x11e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008676:	d103      	bne.n	8008680 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10c      	bne.n	80086a2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800868c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008690:	d107      	bne.n	80086a2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69da      	ldr	r2, [r3, #28]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	431a      	orrs	r2, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b4:	ea42 0103 	orr.w	r1, r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	431a      	orrs	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	431a      	orrs	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f6:	431a      	orrs	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	431a      	orrs	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008702:	431a      	orrs	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870e:	ea42 0103 	orr.w	r1, r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	46002000 	.word	0x46002000
 8008760:	56002000 	.word	0x56002000
 8008764:	40013000 	.word	0x40013000
 8008768:	50013000 	.word	0x50013000
 800876c:	40003800 	.word	0x40003800
 8008770:	50003800 	.word	0x50003800

08008774 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af02      	add	r7, sp, #8
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	4613      	mov	r3, r2
 8008782:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3320      	adds	r3, #32
 800878a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008796:	2b01      	cmp	r3, #1
 8008798:	d101      	bne.n	800879e <HAL_SPI_Transmit+0x2a>
 800879a:	2302      	movs	r3, #2
 800879c:	e1f7      	b.n	8008b8e <HAL_SPI_Transmit+0x41a>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087a6:	f7fb fe45 	bl	8004434 <HAL_GetTick>
 80087aa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d007      	beq.n	80087c8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80087b8:	2302      	movs	r3, #2
 80087ba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80087c4:	7efb      	ldrb	r3, [r7, #27]
 80087c6:	e1e2      	b.n	8008b8e <HAL_SPI_Transmit+0x41a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d002      	beq.n	80087d4 <HAL_SPI_Transmit+0x60>
 80087ce:	88fb      	ldrh	r3, [r7, #6]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d107      	bne.n	80087e4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80087e0:	7efb      	ldrb	r3, [r7, #27]
 80087e2:	e1d4      	b.n	8008b8e <HAL_SPI_Transmit+0x41a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2203      	movs	r2, #3
 80087e8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	88fa      	ldrh	r2, [r7, #6]
 80087fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	88fa      	ldrh	r2, [r7, #6]
 8008806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008834:	d107      	bne.n	8008846 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008844:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	0c1b      	lsrs	r3, r3, #16
 800884e:	041b      	lsls	r3, r3, #16
 8008850:	88f9      	ldrh	r1, [r7, #6]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	6812      	ldr	r2, [r2, #0]
 8008856:	430b      	orrs	r3, r1
 8008858:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f042 0201 	orr.w	r2, r2, #1
 8008868:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10c      	bne.n	8008892 <HAL_SPI_Transmit+0x11e>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008880:	d107      	bne.n	8008892 <HAL_SPI_Transmit+0x11e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008890:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	2b0f      	cmp	r3, #15
 8008898:	d95b      	bls.n	8008952 <HAL_SPI_Transmit+0x1de>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4aa1      	ldr	r2, [pc, #644]	; (8008b24 <HAL_SPI_Transmit+0x3b0>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d04f      	beq.n	8008944 <HAL_SPI_Transmit+0x1d0>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a9f      	ldr	r2, [pc, #636]	; (8008b28 <HAL_SPI_Transmit+0x3b4>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d04a      	beq.n	8008944 <HAL_SPI_Transmit+0x1d0>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a9e      	ldr	r2, [pc, #632]	; (8008b2c <HAL_SPI_Transmit+0x3b8>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d045      	beq.n	8008944 <HAL_SPI_Transmit+0x1d0>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a9c      	ldr	r2, [pc, #624]	; (8008b30 <HAL_SPI_Transmit+0x3bc>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d147      	bne.n	8008952 <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80088c2:	e03f      	b.n	8008944 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d114      	bne.n	80088fc <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6812      	ldr	r2, [r2, #0]
 80088dc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80088fa:	e023      	b.n	8008944 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088fc:	f7fb fd9a 	bl	8004434 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d803      	bhi.n	8008914 <HAL_SPI_Transmit+0x1a0>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	d102      	bne.n	800891a <HAL_SPI_Transmit+0x1a6>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d114      	bne.n	8008944 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 fe72 	bl	8009604 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800892e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e124      	b.n	8008b8e <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800894a:	b29b      	uxth	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1b9      	bne.n	80088c4 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008950:	e0f7      	b.n	8008b42 <HAL_SPI_Transmit+0x3ce>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	2b07      	cmp	r3, #7
 8008958:	f240 80ec 	bls.w	8008b34 <HAL_SPI_Transmit+0x3c0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800895c:	e05d      	b.n	8008a1a <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	f003 0302 	and.w	r3, r3, #2
 8008968:	2b02      	cmp	r3, #2
 800896a:	d132      	bne.n	80089d2 <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008972:	b29b      	uxth	r3, r3
 8008974:	2b01      	cmp	r3, #1
 8008976:	d918      	bls.n	80089aa <HAL_SPI_Transmit+0x236>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897c:	2b00      	cmp	r3, #0
 800897e:	d014      	beq.n	80089aa <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6812      	ldr	r2, [r2, #0]
 800898a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008990:	1d1a      	adds	r2, r3, #4
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b02      	subs	r3, #2
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80089a8:	e037      	b.n	8008a1a <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ae:	881a      	ldrh	r2, [r3, #0]
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b8:	1c9a      	adds	r2, r3, #2
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80089d0:	e023      	b.n	8008a1a <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089d2:	f7fb fd2f 	bl	8004434 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d803      	bhi.n	80089ea <HAL_SPI_Transmit+0x276>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e8:	d102      	bne.n	80089f0 <HAL_SPI_Transmit+0x27c>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d114      	bne.n	8008a1a <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fe07 	bl	8009604 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e0b9      	b.n	8008b8e <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d19b      	bne.n	800895e <HAL_SPI_Transmit+0x1ea>
 8008a26:	e08c      	b.n	8008b42 <HAL_SPI_Transmit+0x3ce>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d152      	bne.n	8008adc <HAL_SPI_Transmit+0x368>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d918      	bls.n	8008a74 <HAL_SPI_Transmit+0x300>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a46:	2b40      	cmp	r3, #64	; 0x40
 8008a48:	d914      	bls.n	8008a74 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6812      	ldr	r2, [r2, #0]
 8008a54:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a5a:	1d1a      	adds	r2, r3, #4
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	3b04      	subs	r3, #4
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a72:	e05f      	b.n	8008b34 <HAL_SPI_Transmit+0x3c0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d917      	bls.n	8008ab0 <HAL_SPI_Transmit+0x33c>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d013      	beq.n	8008ab0 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a8c:	881a      	ldrh	r2, [r3, #0]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a96:	1c9a      	adds	r2, r3, #2
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	3b02      	subs	r3, #2
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008aae:	e041      	b.n	8008b34 <HAL_SPI_Transmit+0x3c0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3320      	adds	r3, #32
 8008aba:	7812      	ldrb	r2, [r2, #0]
 8008abc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008ada:	e02b      	b.n	8008b34 <HAL_SPI_Transmit+0x3c0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008adc:	f7fb fcaa 	bl	8004434 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d803      	bhi.n	8008af4 <HAL_SPI_Transmit+0x380>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d102      	bne.n	8008afa <HAL_SPI_Transmit+0x386>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d11c      	bne.n	8008b34 <HAL_SPI_Transmit+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 fd82 	bl	8009604 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e034      	b.n	8008b8e <HAL_SPI_Transmit+0x41a>
 8008b24:	40013000 	.word	0x40013000
 8008b28:	50013000 	.word	0x50013000
 8008b2c:	40003800 	.word	0x40003800
 8008b30:	50003800 	.word	0x50003800
    while (hspi->TxXferCount > 0UL)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f47f af73 	bne.w	8008a28 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2108      	movs	r1, #8
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 fdf9 	bl	8009744 <SPI_WaitOnFlagUntilTimeout>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d007      	beq.n	8008b68 <HAL_SPI_Transmit+0x3f4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b5e:	f043 0220 	orr.w	r2, r3, #32
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fd4b 	bl	8009604 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <HAL_SPI_Transmit+0x418>
  {
    return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e000      	b.n	8008b8e <HAL_SPI_Transmit+0x41a>
  }
  return errorcode;
 8008b8c:	7efb      	ldrb	r3, [r7, #27]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3720      	adds	r7, #32
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop

08008b98 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	; 0x28
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3330      	adds	r3, #48	; 0x30
 8008bb2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bbc:	d112      	bne.n	8008be4 <HAL_SPI_Receive+0x4c>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10e      	bne.n	8008be4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2204      	movs	r2, #4
 8008bca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008bce:	88fa      	ldrh	r2, [r7, #6]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	68b9      	ldr	r1, [r7, #8]
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 fa04 	bl	8008fe8 <HAL_SPI_TransmitReceive>
 8008be0:	4603      	mov	r3, r0
 8008be2:	e1fc      	b.n	8008fde <HAL_SPI_Receive+0x446>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <HAL_SPI_Receive+0x5a>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e1f5      	b.n	8008fde <HAL_SPI_Receive+0x446>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bfa:	f7fb fc1b 	bl	8004434 <HAL_GetTick>
 8008bfe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d007      	beq.n	8008c1c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008c18:	7ffb      	ldrb	r3, [r7, #31]
 8008c1a:	e1e0      	b.n	8008fde <HAL_SPI_Receive+0x446>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <HAL_SPI_Receive+0x90>
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d107      	bne.n	8008c38 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008c34:	7ffb      	ldrb	r3, [r7, #31]
 8008c36:	e1d2      	b.n	8008fde <HAL_SPI_Receive+0x446>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2204      	movs	r2, #4
 8008c3c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	88fa      	ldrh	r2, [r7, #6]
 8008c52:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	88fa      	ldrh	r2, [r7, #6]
 8008c5a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008c88:	d107      	bne.n	8008c9a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c98:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	0c1b      	lsrs	r3, r3, #16
 8008ca2:	041b      	lsls	r3, r3, #16
 8008ca4:	88f9      	ldrh	r1, [r7, #6]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	6812      	ldr	r2, [r2, #0]
 8008caa:	430b      	orrs	r3, r1
 8008cac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f042 0201 	orr.w	r2, r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10c      	bne.n	8008ce6 <HAL_SPI_Receive+0x14e>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cd4:	d107      	bne.n	8008ce6 <HAL_SPI_Receive+0x14e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ce4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	2b0f      	cmp	r3, #15
 8008cec:	d95c      	bls.n	8008da8 <HAL_SPI_Receive+0x210>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4aa0      	ldr	r2, [pc, #640]	; (8008f74 <HAL_SPI_Receive+0x3dc>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d050      	beq.n	8008d9a <HAL_SPI_Receive+0x202>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a9e      	ldr	r2, [pc, #632]	; (8008f78 <HAL_SPI_Receive+0x3e0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d04b      	beq.n	8008d9a <HAL_SPI_Receive+0x202>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a9d      	ldr	r2, [pc, #628]	; (8008f7c <HAL_SPI_Receive+0x3e4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d046      	beq.n	8008d9a <HAL_SPI_Receive+0x202>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a9b      	ldr	r2, [pc, #620]	; (8008f80 <HAL_SPI_Receive+0x3e8>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d148      	bne.n	8008da8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008d16:	e040      	b.n	8008d9a <HAL_SPI_Receive+0x202>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695a      	ldr	r2, [r3, #20]
 8008d1e:	f248 0308 	movw	r3, #32776	; 0x8008
 8008d22:	4013      	ands	r3, r2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d014      	beq.n	8008d52 <HAL_SPI_Receive+0x1ba>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d32:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d38:	1d1a      	adds	r2, r3, #4
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008d50:	e023      	b.n	8008d9a <HAL_SPI_Receive+0x202>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d52:	f7fb fb6f 	bl	8004434 <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d803      	bhi.n	8008d6a <HAL_SPI_Receive+0x1d2>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d68:	d102      	bne.n	8008d70 <HAL_SPI_Receive+0x1d8>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d114      	bne.n	8008d9a <HAL_SPI_Receive+0x202>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 fc47 	bl	8009604 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e121      	b.n	8008fde <HAL_SPI_Receive+0x446>
    while (hspi->RxXferCount > 0UL)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1b8      	bne.n	8008d18 <HAL_SPI_Receive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008da6:	e0f4      	b.n	8008f92 <HAL_SPI_Receive+0x3fa>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	2b07      	cmp	r3, #7
 8008dae:	f240 80e9 	bls.w	8008f84 <HAL_SPI_Receive+0x3ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008db2:	e05b      	b.n	8008e6c <HAL_SPI_Receive+0x2d4>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d030      	beq.n	8008e24 <HAL_SPI_Receive+0x28c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d014      	beq.n	8008dfa <HAL_SPI_Receive+0x262>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008dda:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008de0:	1d1a      	adds	r2, r3, #4
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	3b02      	subs	r3, #2
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008df8:	e038      	b.n	8008e6c <HAL_SPI_Receive+0x2d4>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	8812      	ldrh	r2, [r2, #0]
 8008e02:	b292      	uxth	r2, r2
 8008e04:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e0a:	1c9a      	adds	r2, r3, #2
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount--;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008e22:	e023      	b.n	8008e6c <HAL_SPI_Receive+0x2d4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e24:	f7fb fb06 	bl	8004434 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d803      	bhi.n	8008e3c <HAL_SPI_Receive+0x2a4>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d102      	bne.n	8008e42 <HAL_SPI_Receive+0x2aa>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d114      	bne.n	8008e6c <HAL_SPI_Receive+0x2d4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 fbde 	bl	8009604 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e0b8      	b.n	8008fde <HAL_SPI_Receive+0x446>
    while (hspi->RxXferCount > 0UL)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d19d      	bne.n	8008db4 <HAL_SPI_Receive+0x21c>
 8008e78:	e08b      	b.n	8008f92 <HAL_SPI_Receive+0x3fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d050      	beq.n	8008f2a <HAL_SPI_Receive+0x392>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d014      	beq.n	8008ec0 <HAL_SPI_Receive+0x328>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ea0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ea6:	1d1a      	adds	r2, r3, #4
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	3b04      	subs	r3, #4
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008ebe:	e061      	b.n	8008f84 <HAL_SPI_Receive+0x3ec>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ece:	d914      	bls.n	8008efa <HAL_SPI_Receive+0x362>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	8812      	ldrh	r2, [r2, #0]
 8008ed8:	b292      	uxth	r2, r2
 8008eda:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee0:	1c9a      	adds	r2, r3, #2
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	3b02      	subs	r3, #2
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008ef8:	e044      	b.n	8008f84 <HAL_SPI_Receive+0x3ec>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f06:	7812      	ldrb	r2, [r2, #0]
 8008f08:	b2d2      	uxtb	r2, r2
 8008f0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008f28:	e02c      	b.n	8008f84 <HAL_SPI_Receive+0x3ec>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f2a:	f7fb fa83 	bl	8004434 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d803      	bhi.n	8008f42 <HAL_SPI_Receive+0x3aa>
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d102      	bne.n	8008f48 <HAL_SPI_Receive+0x3b0>
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d11d      	bne.n	8008f84 <HAL_SPI_Receive+0x3ec>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fb5b 	bl	8009604 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e035      	b.n	8008fde <HAL_SPI_Receive+0x446>
 8008f72:	bf00      	nop
 8008f74:	40013000 	.word	0x40013000
 8008f78:	50013000 	.word	0x50013000
 8008f7c:	40003800 	.word	0x40003800
 8008f80:	50003800 	.word	0x50003800
    while (hspi->RxXferCount > 0UL)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f47f af74 	bne.w	8008e7a <HAL_SPI_Receive+0x2e2>
      }
    }
  }

  /* Wait for Rx (and CRC) data to be received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2108      	movs	r1, #8
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fbd1 	bl	8009744 <SPI_WaitOnFlagUntilTimeout>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d007      	beq.n	8008fb8 <HAL_SPI_Receive+0x420>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fae:	f043 0220 	orr.w	r2, r3, #32
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 fb23 	bl	8009604 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <HAL_SPI_Receive+0x444>
  {
    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <HAL_SPI_Receive+0x446>
  }
  return errorcode;
 8008fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3720      	adds	r7, #32
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop

08008fe8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08e      	sub	sp, #56	; 0x38
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3320      	adds	r3, #32
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3330      	adds	r3, #48	; 0x30
 800900a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009012:	2b01      	cmp	r3, #1
 8009014:	d101      	bne.n	800901a <HAL_SPI_TransmitReceive+0x32>
 8009016:	2302      	movs	r3, #2
 8009018:	e2ef      	b.n	80095fa <HAL_SPI_TransmitReceive+0x612>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009022:	f7fb fa07 	bl	8004434 <HAL_GetTick>
 8009026:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8009028:	887b      	ldrh	r3, [r7, #2]
 800902a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800902c:	887b      	ldrh	r3, [r7, #2]
 800902e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009036:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800903e:	7efb      	ldrb	r3, [r7, #27]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d014      	beq.n	800906e <HAL_SPI_TransmitReceive+0x86>
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800904a:	d106      	bne.n	800905a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8009054:	7efb      	ldrb	r3, [r7, #27]
 8009056:	2b04      	cmp	r3, #4
 8009058:	d009      	beq.n	800906e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800905a:	2302      	movs	r3, #2
 800905c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8009068:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800906c:	e2c5      	b.n	80095fa <HAL_SPI_TransmitReceive+0x612>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d005      	beq.n	8009080 <HAL_SPI_TransmitReceive+0x98>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <HAL_SPI_TransmitReceive+0x98>
 800907a:	887b      	ldrh	r3, [r7, #2]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d109      	bne.n	8009094 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800908e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009092:	e2b2      	b.n	80095fa <HAL_SPI_TransmitReceive+0x612>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b04      	cmp	r3, #4
 800909e:	d003      	beq.n	80090a8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2205      	movs	r2, #5
 80090a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	887a      	ldrh	r2, [r7, #2]
 80090ba:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	887a      	ldrh	r2, [r7, #2]
 80090c2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	887a      	ldrh	r2, [r7, #2]
 80090d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	887a      	ldrh	r2, [r7, #2]
 80090d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	0c1b      	lsrs	r3, r3, #16
 80090f0:	041b      	lsls	r3, r3, #16
 80090f2:	8879      	ldrh	r1, [r7, #2]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	6812      	ldr	r2, [r2, #0]
 80090f8:	430b      	orrs	r3, r1
 80090fa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0201 	orr.w	r2, r2, #1
 800910a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10c      	bne.n	8009134 <HAL_SPI_TransmitReceive+0x14c>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009122:	d107      	bne.n	8009134 <HAL_SPI_TransmitReceive+0x14c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009132:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	2b0f      	cmp	r3, #15
 800913a:	f240 8085 	bls.w	8009248 <HAL_SPI_TransmitReceive+0x260>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a9c      	ldr	r2, [pc, #624]	; (80093b4 <HAL_SPI_TransmitReceive+0x3cc>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d078      	beq.n	800923a <HAL_SPI_TransmitReceive+0x252>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a9a      	ldr	r2, [pc, #616]	; (80093b8 <HAL_SPI_TransmitReceive+0x3d0>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d073      	beq.n	800923a <HAL_SPI_TransmitReceive+0x252>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a99      	ldr	r2, [pc, #612]	; (80093bc <HAL_SPI_TransmitReceive+0x3d4>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d06e      	beq.n	800923a <HAL_SPI_TransmitReceive+0x252>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a97      	ldr	r2, [pc, #604]	; (80093c0 <HAL_SPI_TransmitReceive+0x3d8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d170      	bne.n	8009248 <HAL_SPI_TransmitReceive+0x260>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009166:	e068      	b.n	800923a <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b02      	cmp	r3, #2
 8009174:	d11a      	bne.n	80091ac <HAL_SPI_TransmitReceive+0x1c4>
 8009176:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009178:	2b00      	cmp	r3, #0
 800917a:	d017      	beq.n	80091ac <HAL_SPI_TransmitReceive+0x1c4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800918c:	1d1a      	adds	r2, r3, #4
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80091aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	695a      	ldr	r2, [r3, #20]
 80091b2:	f248 0308 	movw	r3, #32776	; 0x8008
 80091b6:	4013      	ands	r3, r2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d01a      	beq.n	80091f2 <HAL_SPI_TransmitReceive+0x20a>
 80091bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d017      	beq.n	80091f2 <HAL_SPI_TransmitReceive+0x20a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80091cc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d2:	1d1a      	adds	r2, r3, #4
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80091de:	b29b      	uxth	r3, r3
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80091f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091f2:	f7fb f91f 	bl	8004434 <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091fe:	429a      	cmp	r2, r3
 8009200:	d803      	bhi.n	800920a <HAL_SPI_TransmitReceive+0x222>
 8009202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009208:	d102      	bne.n	8009210 <HAL_SPI_TransmitReceive+0x228>
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	2b00      	cmp	r3, #0
 800920e:	d114      	bne.n	800923a <HAL_SPI_TransmitReceive+0x252>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f9f7 	bl	8009604 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009224:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e1df      	b.n	80095fa <HAL_SPI_TransmitReceive+0x612>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800923a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800923c:	2b00      	cmp	r3, #0
 800923e:	d193      	bne.n	8009168 <HAL_SPI_TransmitReceive+0x180>
 8009240:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d190      	bne.n	8009168 <HAL_SPI_TransmitReceive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009246:	e1b1      	b.n	80095ac <HAL_SPI_TransmitReceive+0x5c4>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	2b07      	cmp	r3, #7
 800924e:	f240 81a5 	bls.w	800959c <HAL_SPI_TransmitReceive+0x5b4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009252:	e0a6      	b.n	80093a2 <HAL_SPI_TransmitReceive+0x3ba>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	f003 0302 	and.w	r3, r3, #2
 800925e:	2b02      	cmp	r3, #2
 8009260:	d139      	bne.n	80092d6 <HAL_SPI_TransmitReceive+0x2ee>
 8009262:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009264:	2b00      	cmp	r3, #0
 8009266:	d036      	beq.n	80092d6 <HAL_SPI_TransmitReceive+0x2ee>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009268:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800926a:	2b01      	cmp	r3, #1
 800926c:	d91c      	bls.n	80092a8 <HAL_SPI_TransmitReceive+0x2c0>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d018      	beq.n	80092a8 <HAL_SPI_TransmitReceive+0x2c0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6812      	ldr	r2, [r2, #0]
 8009280:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009286:	1d1a      	adds	r2, r3, #4
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009292:	b29b      	uxth	r3, r3
 8009294:	3b02      	subs	r3, #2
 8009296:	b29a      	uxth	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_TxXferCount = hspi->TxXferCount;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80092a6:	e016      	b.n	80092d6 <HAL_SPI_TransmitReceive+0x2ee>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ac:	881a      	ldrh	r2, [r3, #0]
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b6:	1c9a      	adds	r2, r3, #2
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	3b01      	subs	r3, #1
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_TxXferCount = hspi->TxXferCount;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d03a      	beq.n	800935a <HAL_SPI_TransmitReceive+0x372>
 80092e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d037      	beq.n	800935a <HAL_SPI_TransmitReceive+0x372>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d018      	beq.n	800932a <HAL_SPI_TransmitReceive+0x342>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009300:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009302:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009308:	1d1a      	adds	r2, r3, #4
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b02      	subs	r3, #2
 8009318:	b29a      	uxth	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009326:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009328:	e017      	b.n	800935a <HAL_SPI_TransmitReceive+0x372>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932e:	6a3a      	ldr	r2, [r7, #32]
 8009330:	8812      	ldrh	r2, [r2, #0]
 8009332:	b292      	uxth	r2, r2
 8009334:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933a:	1c9a      	adds	r2, r3, #2
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount--;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009346:	b29b      	uxth	r3, r3
 8009348:	3b01      	subs	r3, #1
 800934a:	b29a      	uxth	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009358:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800935a:	f7fb f86b 	bl	8004434 <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009366:	429a      	cmp	r2, r3
 8009368:	d803      	bhi.n	8009372 <HAL_SPI_TransmitReceive+0x38a>
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009370:	d102      	bne.n	8009378 <HAL_SPI_TransmitReceive+0x390>
 8009372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009374:	2b00      	cmp	r3, #0
 8009376:	d114      	bne.n	80093a2 <HAL_SPI_TransmitReceive+0x3ba>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 f943 	bl	8009604 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800938c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e12b      	b.n	80095fa <HAL_SPI_TransmitReceive+0x612>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80093a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f47f af55 	bne.w	8009254 <HAL_SPI_TransmitReceive+0x26c>
 80093aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f47f af51 	bne.w	8009254 <HAL_SPI_TransmitReceive+0x26c>
 80093b2:	e0fb      	b.n	80095ac <HAL_SPI_TransmitReceive+0x5c4>
 80093b4:	40013000 	.word	0x40013000
 80093b8:	50013000 	.word	0x50013000
 80093bc:	40003800 	.word	0x40003800
 80093c0:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d15a      	bne.n	8009488 <HAL_SPI_TransmitReceive+0x4a0>
 80093d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d057      	beq.n	8009488 <HAL_SPI_TransmitReceive+0x4a0>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80093d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d91c      	bls.n	8009418 <HAL_SPI_TransmitReceive+0x430>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e2:	2b40      	cmp	r3, #64	; 0x40
 80093e4:	d918      	bls.n	8009418 <HAL_SPI_TransmitReceive+0x430>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6812      	ldr	r2, [r2, #0]
 80093f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093f6:	1d1a      	adds	r2, r3, #4
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009402:	b29b      	uxth	r3, r3
 8009404:	3b04      	subs	r3, #4
 8009406:	b29a      	uxth	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_TxXferCount = hspi->TxXferCount;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009414:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009416:	e037      	b.n	8009488 <HAL_SPI_TransmitReceive+0x4a0>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009418:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800941a:	2b01      	cmp	r3, #1
 800941c:	d91b      	bls.n	8009456 <HAL_SPI_TransmitReceive+0x46e>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009422:	2b00      	cmp	r3, #0
 8009424:	d017      	beq.n	8009456 <HAL_SPI_TransmitReceive+0x46e>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800942a:	881a      	ldrh	r2, [r3, #0]
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009434:	1c9a      	adds	r2, r3, #2
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009440:	b29b      	uxth	r3, r3
 8009442:	3b02      	subs	r3, #2
 8009444:	b29a      	uxth	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_TxXferCount = hspi->TxXferCount;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009452:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009454:	e018      	b.n	8009488 <HAL_SPI_TransmitReceive+0x4a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3320      	adds	r3, #32
 8009460:	7812      	ldrb	r2, [r2, #0]
 8009462:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	b29a      	uxth	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_TxXferCount = hspi->TxXferCount;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009486:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d05e      	beq.n	8009554 <HAL_SPI_TransmitReceive+0x56c>
 8009496:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009498:	2b00      	cmp	r3, #0
 800949a:	d05b      	beq.n	8009554 <HAL_SPI_TransmitReceive+0x56c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d018      	beq.n	80094dc <HAL_SPI_TransmitReceive+0x4f4>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80094b4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ba:	1d1a      	adds	r2, r3, #4
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b04      	subs	r3, #4
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80094d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80094da:	e03b      	b.n	8009554 <HAL_SPI_TransmitReceive+0x56c>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80094e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ea:	d918      	bls.n	800951e <HAL_SPI_TransmitReceive+0x536>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f0:	6a3a      	ldr	r2, [r7, #32]
 80094f2:	8812      	ldrh	r2, [r2, #0]
 80094f4:	b292      	uxth	r2, r2
 80094f6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094fc:	1c9a      	adds	r2, r3, #2
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009508:	b29b      	uxth	r3, r3
 800950a:	3b02      	subs	r3, #2
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800951a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800951c:	e01a      	b.n	8009554 <HAL_SPI_TransmitReceive+0x56c>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952a:	7812      	ldrb	r2, [r2, #0]
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009540:	b29b      	uxth	r3, r3
 8009542:	3b01      	subs	r3, #1
 8009544:	b29a      	uxth	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009552:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009554:	f7fa ff6e 	bl	8004434 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009560:	429a      	cmp	r2, r3
 8009562:	d803      	bhi.n	800956c <HAL_SPI_TransmitReceive+0x584>
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956a:	d102      	bne.n	8009572 <HAL_SPI_TransmitReceive+0x58a>
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	2b00      	cmp	r3, #0
 8009570:	d114      	bne.n	800959c <HAL_SPI_TransmitReceive+0x5b4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 f846 	bl	8009604 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009586:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e02e      	b.n	80095fa <HAL_SPI_TransmitReceive+0x612>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800959c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f47f af10 	bne.w	80093c4 <HAL_SPI_TransmitReceive+0x3dc>
 80095a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f47f af0c 	bne.w	80093c4 <HAL_SPI_TransmitReceive+0x3dc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80095ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	2200      	movs	r2, #0
 80095b4:	2108      	movs	r1, #8
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 f8c4 	bl	8009744 <SPI_WaitOnFlagUntilTimeout>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d007      	beq.n	80095d2 <HAL_SPI_TransmitReceive+0x5ea>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c8:	f043 0220 	orr.w	r2, r3, #32
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 f816 	bl	8009604 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <HAL_SPI_TransmitReceive+0x60e>
  {
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e001      	b.n	80095fa <HAL_SPI_TransmitReceive+0x612>
  }
  return errorcode;
 80095f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3730      	adds	r7, #48	; 0x30
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop

08009604 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699a      	ldr	r2, [r3, #24]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0208 	orr.w	r2, r2, #8
 8009622:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	699a      	ldr	r2, [r3, #24]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f042 0210 	orr.w	r2, r2, #16
 8009632:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0201 	bic.w	r2, r2, #1
 8009642:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	6812      	ldr	r2, [r2, #0]
 800964e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8009652:	f023 0303 	bic.w	r3, r3, #3
 8009656:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689a      	ldr	r2, [r3, #8]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009666:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b04      	cmp	r3, #4
 8009672:	d014      	beq.n	800969e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00f      	beq.n	800969e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009684:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	699a      	ldr	r2, [r3, #24]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f042 0220 	orr.w	r2, r2, #32
 800969c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d014      	beq.n	80096d4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00f      	beq.n	80096d4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096ba:	f043 0204 	orr.w	r2, r3, #4
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	699a      	ldr	r2, [r3, #24]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00f      	beq.n	80096fe <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e4:	f043 0201 	orr.w	r2, r3, #1
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	699a      	ldr	r2, [r3, #24]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00f      	beq.n	8009728 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970e:	f043 0208 	orr.w	r2, r3, #8
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	699a      	ldr	r2, [r3, #24]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009726:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8009738:	bf00      	nop
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	4613      	mov	r3, r2
 8009752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009754:	e010      	b.n	8009778 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009756:	f7fa fe6d 	bl	8004434 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	429a      	cmp	r2, r3
 8009764:	d803      	bhi.n	800976e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d102      	bne.n	8009774 <SPI_WaitOnFlagUntilTimeout+0x30>
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e00f      	b.n	8009798 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	695a      	ldr	r2, [r3, #20]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	4013      	ands	r3, r2
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	429a      	cmp	r2, r3
 8009786:	bf0c      	ite	eq
 8009788:	2301      	moveq	r3, #1
 800978a:	2300      	movne	r3, #0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	461a      	mov	r2, r3
 8009790:	79fb      	ldrb	r3, [r7, #7]
 8009792:	429a      	cmp	r2, r3
 8009794:	d0df      	beq.n	8009756 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ac:	095b      	lsrs	r3, r3, #5
 80097ae:	3301      	adds	r3, #1
 80097b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	3307      	adds	r3, #7
 80097be:	08db      	lsrs	r3, r3, #3
 80097c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d12e      	bne.n	800984a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d101      	bne.n	80097fa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80097f6:	2302      	movs	r3, #2
 80097f8:	e028      	b.n	800984c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2202      	movs	r2, #2
 8009806:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0201 	bic.w	r2, r2, #1
 8009818:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009826:	ea42 0103 	orr.w	r1, r2, r3
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	689a      	ldr	r2, [r3, #8]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	e000      	b.n	800984c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
  }
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e042      	b.n	80098f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7f8 f8c5 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2224      	movs	r2, #36	; 0x24
 8009886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 0201 	bic.w	r2, r2, #1
 8009898:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f8c2 	bl	8009a24 <UART_SetConfig>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e022      	b.n	80098f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fa38 	bl	8009d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0201 	orr.w	r2, r2, #1
 80098e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fabf 	bl	8009e6c <UART_CheckIdleState>
 80098ee:	4603      	mov	r3, r0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08a      	sub	sp, #40	; 0x28
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	603b      	str	r3, [r7, #0]
 8009904:	4613      	mov	r3, r2
 8009906:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800990e:	2b20      	cmp	r3, #32
 8009910:	f040 8083 	bne.w	8009a1a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <HAL_UART_Transmit+0x28>
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e07b      	b.n	8009a1c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800992a:	2b01      	cmp	r3, #1
 800992c:	d101      	bne.n	8009932 <HAL_UART_Transmit+0x3a>
 800992e:	2302      	movs	r3, #2
 8009930:	e074      	b.n	8009a1c <HAL_UART_Transmit+0x124>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2221      	movs	r2, #33	; 0x21
 8009946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800994a:	f7fa fd73 	bl	8004434 <HAL_GetTick>
 800994e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	88fa      	ldrh	r2, [r7, #6]
 8009954:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	88fa      	ldrh	r2, [r7, #6]
 800995c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009968:	d108      	bne.n	800997c <HAL_UART_Transmit+0x84>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d104      	bne.n	800997c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009972:	2300      	movs	r3, #0
 8009974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	61bb      	str	r3, [r7, #24]
 800997a:	e003      	b.n	8009984 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009980:	2300      	movs	r3, #0
 8009982:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800998c:	e02c      	b.n	80099e8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2200      	movs	r2, #0
 8009996:	2180      	movs	r1, #128	; 0x80
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 fab2 	bl	8009f02 <UART_WaitOnFlagUntilTimeout>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e039      	b.n	8009a1c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10b      	bne.n	80099c6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	3302      	adds	r3, #2
 80099c2:	61bb      	str	r3, [r7, #24]
 80099c4:	e007      	b.n	80099d6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	3301      	adds	r3, #1
 80099d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099dc:	b29b      	uxth	r3, r3
 80099de:	3b01      	subs	r3, #1
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1cc      	bne.n	800998e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2200      	movs	r2, #0
 80099fc:	2140      	movs	r1, #64	; 0x40
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 fa7f 	bl	8009f02 <UART_WaitOnFlagUntilTimeout>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e006      	b.n	8009a1c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2220      	movs	r2, #32
 8009a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	e000      	b.n	8009a1c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009a1a:	2302      	movs	r3, #2
  }
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3720      	adds	r7, #32
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a24:	b5b0      	push	{r4, r5, r7, lr}
 8009a26:	b08a      	sub	sp, #40	; 0x28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	77fb      	strb	r3, [r7, #31]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a94      	ldr	r2, [pc, #592]	; (8009c88 <UART_SetConfig+0x264>)
 8009a36:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	431a      	orrs	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	4b8d      	ldr	r3, [pc, #564]	; (8009c8c <UART_SetConfig+0x268>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6812      	ldr	r2, [r2, #0]
 8009a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a60:	430b      	orrs	r3, r1
 8009a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	430a      	orrs	r2, r1
 8009a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a80      	ldr	r2, [pc, #512]	; (8009c88 <UART_SetConfig+0x264>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d009      	beq.n	8009a9e <UART_SetConfig+0x7a>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a80      	ldr	r2, [pc, #512]	; (8009c90 <UART_SetConfig+0x26c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d004      	beq.n	8009a9e <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009aa8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6812      	ldr	r2, [r2, #0]
 8009ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	f023 010f 	bic.w	r1, r3, #15
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a70      	ldr	r2, [pc, #448]	; (8009c94 <UART_SetConfig+0x270>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d102      	bne.n	8009adc <UART_SetConfig+0xb8>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	623b      	str	r3, [r7, #32]
 8009ada:	e029      	b.n	8009b30 <UART_SetConfig+0x10c>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a6d      	ldr	r2, [pc, #436]	; (8009c98 <UART_SetConfig+0x274>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d102      	bne.n	8009aec <UART_SetConfig+0xc8>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	623b      	str	r3, [r7, #32]
 8009aea:	e021      	b.n	8009b30 <UART_SetConfig+0x10c>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a6a      	ldr	r2, [pc, #424]	; (8009c9c <UART_SetConfig+0x278>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d102      	bne.n	8009afc <UART_SetConfig+0xd8>
 8009af6:	2304      	movs	r3, #4
 8009af8:	623b      	str	r3, [r7, #32]
 8009afa:	e019      	b.n	8009b30 <UART_SetConfig+0x10c>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a67      	ldr	r2, [pc, #412]	; (8009ca0 <UART_SetConfig+0x27c>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d102      	bne.n	8009b0c <UART_SetConfig+0xe8>
 8009b06:	2308      	movs	r3, #8
 8009b08:	623b      	str	r3, [r7, #32]
 8009b0a:	e011      	b.n	8009b30 <UART_SetConfig+0x10c>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a64      	ldr	r2, [pc, #400]	; (8009ca4 <UART_SetConfig+0x280>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d102      	bne.n	8009b1c <UART_SetConfig+0xf8>
 8009b16:	2310      	movs	r3, #16
 8009b18:	623b      	str	r3, [r7, #32]
 8009b1a:	e009      	b.n	8009b30 <UART_SetConfig+0x10c>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a59      	ldr	r2, [pc, #356]	; (8009c88 <UART_SetConfig+0x264>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d102      	bne.n	8009b2c <UART_SetConfig+0x108>
 8009b26:	2320      	movs	r3, #32
 8009b28:	623b      	str	r3, [r7, #32]
 8009b2a:	e001      	b.n	8009b30 <UART_SetConfig+0x10c>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a54      	ldr	r2, [pc, #336]	; (8009c88 <UART_SetConfig+0x264>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d004      	beq.n	8009b44 <UART_SetConfig+0x120>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a54      	ldr	r2, [pc, #336]	; (8009c90 <UART_SetConfig+0x26c>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d163      	bne.n	8009c0c <UART_SetConfig+0x1e8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009b44:	6a38      	ldr	r0, [r7, #32]
 8009b46:	f7fd faf9 	bl	800713c <HAL_RCCEx_GetPeriphCLKFreq>
 8009b4a:	61b8      	str	r0, [r7, #24]

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 80d4 	beq.w	8009cfc <UART_SetConfig+0x2d8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	4a53      	ldr	r2, [pc, #332]	; (8009ca8 <UART_SetConfig+0x284>)
 8009b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	4413      	add	r3, r2
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d305      	bcc.n	8009b84 <UART_SetConfig+0x160>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d902      	bls.n	8009b8a <UART_SetConfig+0x166>
      {
        ret = HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	77fb      	strb	r3, [r7, #31]
 8009b88:	e03f      	b.n	8009c0a <UART_SetConfig+0x1e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f04f 0100 	mov.w	r1, #0
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	4a44      	ldr	r2, [pc, #272]	; (8009ca8 <UART_SetConfig+0x284>)
 8009b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	f04f 0300 	mov.w	r3, #0
 8009ba2:	f7f7 f825 	bl	8000bf0 <__aeabi_uldivmod>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4610      	mov	r0, r2
 8009bac:	4619      	mov	r1, r3
 8009bae:	f04f 0200 	mov.w	r2, #0
 8009bb2:	f04f 0300 	mov.w	r3, #0
 8009bb6:	020b      	lsls	r3, r1, #8
 8009bb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bbc:	0202      	lsls	r2, r0, #8
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	6849      	ldr	r1, [r1, #4]
 8009bc2:	0849      	lsrs	r1, r1, #1
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	f04f 0100 	mov.w	r1, #0
 8009bca:	1814      	adds	r4, r2, r0
 8009bcc:	eb43 0501 	adc.w	r5, r3, r1
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	f04f 0300 	mov.w	r3, #0
 8009bda:	4620      	mov	r0, r4
 8009bdc:	4629      	mov	r1, r5
 8009bde:	f7f7 f807 	bl	8000bf0 <__aeabi_uldivmod>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4613      	mov	r3, r2
 8009be8:	617b      	str	r3, [r7, #20]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bf0:	d308      	bcc.n	8009c04 <UART_SetConfig+0x1e0>
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bf8:	d204      	bcs.n	8009c04 <UART_SetConfig+0x1e0>
        {
          huart->Instance->BRR = usartdiv;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	60da      	str	r2, [r3, #12]
 8009c02:	e002      	b.n	8009c0a <UART_SetConfig+0x1e6>
        }
        else
        {
          ret = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	77fb      	strb	r3, [r7, #31]
    if (pclk != 0U)
 8009c08:	e078      	b.n	8009cfc <UART_SetConfig+0x2d8>
 8009c0a:	e077      	b.n	8009cfc <UART_SetConfig+0x2d8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c14:	d14a      	bne.n	8009cac <UART_SetConfig+0x288>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009c16:	6a38      	ldr	r0, [r7, #32]
 8009c18:	f7fd fa90 	bl	800713c <HAL_RCCEx_GetPeriphCLKFreq>
 8009c1c:	61b8      	str	r0, [r7, #24]

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d06b      	beq.n	8009cfc <UART_SetConfig+0x2d8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	4a1f      	ldr	r2, [pc, #124]	; (8009ca8 <UART_SetConfig+0x284>)
 8009c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c36:	005a      	lsls	r2, r3, #1
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	085b      	lsrs	r3, r3, #1
 8009c3e:	441a      	add	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2b0f      	cmp	r3, #15
 8009c50:	d916      	bls.n	8009c80 <UART_SetConfig+0x25c>
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c58:	d212      	bcs.n	8009c80 <UART_SetConfig+0x25c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	f023 030f 	bic.w	r3, r3, #15
 8009c62:	827b      	strh	r3, [r7, #18]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	085b      	lsrs	r3, r3, #1
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	8a7b      	ldrh	r3, [r7, #18]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	827b      	strh	r3, [r7, #18]
        huart->Instance->BRR = brrtemp;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	8a7a      	ldrh	r2, [r7, #18]
 8009c7c:	60da      	str	r2, [r3, #12]
 8009c7e:	e03d      	b.n	8009cfc <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	77fb      	strb	r3, [r7, #31]
 8009c84:	e03a      	b.n	8009cfc <UART_SetConfig+0x2d8>
 8009c86:	bf00      	nop
 8009c88:	46002400 	.word	0x46002400
 8009c8c:	cfff69f3 	.word	0xcfff69f3
 8009c90:	56002400 	.word	0x56002400
 8009c94:	40013800 	.word	0x40013800
 8009c98:	40004400 	.word	0x40004400
 8009c9c:	40004800 	.word	0x40004800
 8009ca0:	40004c00 	.word	0x40004c00
 8009ca4:	40005000 	.word	0x40005000
 8009ca8:	0800d968 	.word	0x0800d968
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009cac:	6a38      	ldr	r0, [r7, #32]
 8009cae:	f7fd fa45 	bl	800713c <HAL_RCCEx_GetPeriphCLKFreq>
 8009cb2:	61b8      	str	r0, [r7, #24]

    if (pclk != 0U)
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d020      	beq.n	8009cfc <UART_SetConfig+0x2d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	4a19      	ldr	r2, [pc, #100]	; (8009d24 <UART_SetConfig+0x300>)
 8009cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	085b      	lsrs	r3, r3, #1
 8009cd2:	441a      	add	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2b0f      	cmp	r3, #15
 8009ce4:	d908      	bls.n	8009cf8 <UART_SetConfig+0x2d4>
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cec:	d204      	bcs.n	8009cf8 <UART_SetConfig+0x2d4>
      {
        huart->Instance->BRR = usartdiv;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	60da      	str	r2, [r3, #12]
 8009cf6:	e001      	b.n	8009cfc <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	77fb      	strb	r3, [r7, #31]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009d18:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3728      	adds	r7, #40	; 0x28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bdb0      	pop	{r4, r5, r7, pc}
 8009d22:	bf00      	nop
 8009d24:	0800d968 	.word	0x0800d968

08009d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00a      	beq.n	8009d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	430a      	orrs	r2, r1
 8009d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d78:	f003 0304 	and.w	r3, r3, #4
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9a:	f003 0308 	and.w	r3, r3, #8
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbc:	f003 0310 	and.w	r3, r3, #16
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d01a      	beq.n	8009e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e26:	d10a      	bne.n	8009e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00a      	beq.n	8009e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	605a      	str	r2, [r3, #4]
  }
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e7c:	f7fa fada 	bl	8004434 <HAL_GetTick>
 8009e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0308 	and.w	r3, r3, #8
 8009e8c:	2b08      	cmp	r3, #8
 8009e8e:	d10e      	bne.n	8009eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f82f 	bl	8009f02 <UART_WaitOnFlagUntilTimeout>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e025      	b.n	8009efa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0304 	and.w	r3, r3, #4
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d10e      	bne.n	8009eda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f819 	bl	8009f02 <UART_WaitOnFlagUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e00f      	b.n	8009efa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b09c      	sub	sp, #112	; 0x70
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	603b      	str	r3, [r7, #0]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f12:	e0a9      	b.n	800a068 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1a:	f000 80a5 	beq.w	800a068 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f1e:	f7fa fa89 	bl	8004434 <HAL_GetTick>
 8009f22:	4602      	mov	r2, r0
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d302      	bcc.n	8009f34 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d140      	bne.n	8009fb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f3c:	e853 3f00 	ldrex	r3, [r3]
 8009f40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f48:	667b      	str	r3, [r7, #100]	; 0x64
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f5a:	e841 2300 	strex	r3, r2, [r1]
 8009f5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e6      	bne.n	8009f34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	f023 0301 	bic.w	r3, r3, #1
 8009f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3308      	adds	r3, #8
 8009f84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f86:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e5      	bne.n	8009f66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e069      	b.n	800a08a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0304 	and.w	r3, r3, #4
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d051      	beq.n	800a068 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fd2:	d149      	bne.n	800a068 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	e853 3f00 	ldrex	r3, [r3]
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ffe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a000:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a004:	e841 2300 	strex	r3, r2, [r1]
 800a008:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1e6      	bne.n	8009fde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3308      	adds	r3, #8
 800a016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	613b      	str	r3, [r7, #16]
   return(result);
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	f023 0301 	bic.w	r3, r3, #1
 800a026:	66bb      	str	r3, [r7, #104]	; 0x68
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3308      	adds	r3, #8
 800a02e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a030:	623a      	str	r2, [r7, #32]
 800a032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	69f9      	ldr	r1, [r7, #28]
 800a036:	6a3a      	ldr	r2, [r7, #32]
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e5      	bne.n	800a010 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2220      	movs	r2, #32
 800a048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2220      	movs	r2, #32
 800a050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2220      	movs	r2, #32
 800a058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e010      	b.n	800a08a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	69da      	ldr	r2, [r3, #28]
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	4013      	ands	r3, r2
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	429a      	cmp	r2, r3
 800a076:	bf0c      	ite	eq
 800a078:	2301      	moveq	r3, #1
 800a07a:	2300      	movne	r3, #0
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	461a      	mov	r2, r3
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	429a      	cmp	r2, r3
 800a084:	f43f af46 	beq.w	8009f14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3770      	adds	r7, #112	; 0x70
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a092:	b480      	push	{r7}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d101      	bne.n	800a0a8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	e027      	b.n	800a0f8 <HAL_UARTEx_DisableFifoMode+0x66>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2224      	movs	r2, #36	; 0x24
 800a0b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f022 0201 	bic.w	r2, r2, #1
 800a0ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a114:	2b01      	cmp	r3, #1
 800a116:	d101      	bne.n	800a11c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a118:	2302      	movs	r3, #2
 800a11a:	e02d      	b.n	800a178 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2224      	movs	r2, #36	; 0x24
 800a128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f022 0201 	bic.w	r2, r2, #1
 800a142:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f84f 	bl	800a1fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2220      	movs	r2, #32
 800a16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a190:	2b01      	cmp	r3, #1
 800a192:	d101      	bne.n	800a198 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a194:	2302      	movs	r3, #2
 800a196:	e02d      	b.n	800a1f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2224      	movs	r2, #36	; 0x24
 800a1a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 0201 	bic.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	430a      	orrs	r2, r1
 800a1d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f811 	bl	800a1fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d108      	bne.n	800a21e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a21c:	e031      	b.n	800a282 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a21e:	2308      	movs	r3, #8
 800a220:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a222:	2308      	movs	r3, #8
 800a224:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	0e5b      	lsrs	r3, r3, #25
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	f003 0307 	and.w	r3, r3, #7
 800a234:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	0f5b      	lsrs	r3, r3, #29
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	f003 0307 	and.w	r3, r3, #7
 800a244:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a246:	7bbb      	ldrb	r3, [r7, #14]
 800a248:	7b3a      	ldrb	r2, [r7, #12]
 800a24a:	4911      	ldr	r1, [pc, #68]	; (800a290 <UARTEx_SetNbDataToProcess+0x94>)
 800a24c:	5c8a      	ldrb	r2, [r1, r2]
 800a24e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a252:	7b3a      	ldrb	r2, [r7, #12]
 800a254:	490f      	ldr	r1, [pc, #60]	; (800a294 <UARTEx_SetNbDataToProcess+0x98>)
 800a256:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a258:	fb93 f3f2 	sdiv	r3, r3, r2
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a264:	7bfb      	ldrb	r3, [r7, #15]
 800a266:	7b7a      	ldrb	r2, [r7, #13]
 800a268:	4909      	ldr	r1, [pc, #36]	; (800a290 <UARTEx_SetNbDataToProcess+0x94>)
 800a26a:	5c8a      	ldrb	r2, [r1, r2]
 800a26c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a270:	7b7a      	ldrb	r2, [r7, #13]
 800a272:	4908      	ldr	r1, [pc, #32]	; (800a294 <UARTEx_SetNbDataToProcess+0x98>)
 800a274:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a276:	fb93 f3f2 	sdiv	r3, r3, r2
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a282:	bf00      	nop
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	0800d980 	.word	0x0800d980
 800a294:	0800d988 	.word	0x0800d988

0800a298 <comm_request>:
#define comm_print_debug(str) print_debug(commmod, str)

#ifdef ENABLE_DEBUG
#define COMM_DEBUG 1
#endif
void comm_request(char *data){
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
	//make sensor data ready for send
#ifdef COMM_DEBUG
	comm_print_debug("data ready");
 800a2a0:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <comm_request+0x48>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	490f      	ldr	r1, [pc, #60]	; (800a2e4 <comm_request+0x4c>)
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f820 	bl	800a2ec <print_debug>
	comm_print_debug("data:");
 800a2ac:	4b0c      	ldr	r3, [pc, #48]	; (800a2e0 <comm_request+0x48>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	490d      	ldr	r1, [pc, #52]	; (800a2e8 <comm_request+0x50>)
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f81a 	bl	800a2ec <print_debug>
	comm_print_debug(data);
 800a2b8:	4b09      	ldr	r3, [pc, #36]	; (800a2e0 <comm_request+0x48>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 f814 	bl	800a2ec <print_debug>
#endif
	SPSGRF_StartTx((uint8_t *)data,strlen(data));
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7f5 ffd7 	bl	8000278 <strlen>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f991 	bl	800a5f8 <SPSGRF_StartTx>
}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	2000001c 	.word	0x2000001c
 800a2e4:	0800d5ec 	.word	0x0800d5ec
 800a2e8:	0800d5f8 	.word	0x0800d5f8

0800a2ec <print_debug>:

char debug_level = DBL_DEFAULT;

#ifdef ENABLE_DEBUG

void print_debug(const char *module, const char *text){
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	1d3b      	adds	r3, r7, #4
 800a2f6:	6018      	str	r0, [r3, #0]
 800a2f8:	463b      	mov	r3, r7
 800a2fa:	6019      	str	r1, [r3, #0]
	char tmp_debug[1000]="";
 800a2fc:	f107 0308 	add.w	r3, r7, #8
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	3304      	adds	r3, #4
 800a306:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a30a:	2100      	movs	r1, #0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 f9d9 	bl	800a6c4 <memset>
	strcat(tmp_debug, module);
 800a312:	1d3b      	adds	r3, r7, #4
 800a314:	f107 0208 	add.w	r2, r7, #8
 800a318:	6819      	ldr	r1, [r3, #0]
 800a31a:	4610      	mov	r0, r2
 800a31c:	f000 fe66 	bl	800afec <strcat>
	strcat(tmp_debug,":\t");
 800a320:	f107 0308 	add.w	r3, r7, #8
 800a324:	4618      	mov	r0, r3
 800a326:	f7f5 ffa7 	bl	8000278 <strlen>
 800a32a:	4603      	mov	r3, r0
 800a32c:	461a      	mov	r2, r3
 800a32e:	f107 0308 	add.w	r3, r7, #8
 800a332:	4413      	add	r3, r2
 800a334:	4a17      	ldr	r2, [pc, #92]	; (800a394 <print_debug+0xa8>)
 800a336:	8811      	ldrh	r1, [r2, #0]
 800a338:	7892      	ldrb	r2, [r2, #2]
 800a33a:	8019      	strh	r1, [r3, #0]
 800a33c:	709a      	strb	r2, [r3, #2]
	strcat(tmp_debug,text);
 800a33e:	463b      	mov	r3, r7
 800a340:	f107 0208 	add.w	r2, r7, #8
 800a344:	6819      	ldr	r1, [r3, #0]
 800a346:	4610      	mov	r0, r2
 800a348:	f000 fe50 	bl	800afec <strcat>
	strcat(tmp_debug,"\r\n");
 800a34c:	f107 0308 	add.w	r3, r7, #8
 800a350:	4618      	mov	r0, r3
 800a352:	f7f5 ff91 	bl	8000278 <strlen>
 800a356:	4603      	mov	r3, r0
 800a358:	461a      	mov	r2, r3
 800a35a:	f107 0308 	add.w	r3, r7, #8
 800a35e:	4413      	add	r3, r2
 800a360:	4a0d      	ldr	r2, [pc, #52]	; (800a398 <print_debug+0xac>)
 800a362:	8811      	ldrh	r1, [r2, #0]
 800a364:	7892      	ldrb	r2, [r2, #2]
 800a366:	8019      	strh	r1, [r3, #0]
 800a368:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*) tmp_debug, strlen(tmp_debug), 100);
 800a36a:	f107 0308 	add.w	r3, r7, #8
 800a36e:	4618      	mov	r0, r3
 800a370:	f7f5 ff82 	bl	8000278 <strlen>
 800a374:	4603      	mov	r3, r0
 800a376:	b29a      	uxth	r2, r3
 800a378:	f107 0108 	add.w	r1, r7, #8
 800a37c:	2364      	movs	r3, #100	; 0x64
 800a37e:	4807      	ldr	r0, [pc, #28]	; (800a39c <print_debug+0xb0>)
 800a380:	f7ff faba 	bl	80098f8 <HAL_UART_Transmit>
	HAL_Delay(100);
 800a384:	2064      	movs	r0, #100	; 0x64
 800a386:	f7fa f861 	bl	800444c <HAL_Delay>
}
 800a38a:	bf00      	nop
 800a38c:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	0800d600 	.word	0x0800d600
 800a398:	0800d604 	.word	0x0800d604
 800a39c:	20000224 	.word	0x20000224

0800a3a0 <SPSGRF_Init>:
* @retval None
*/
const char *spsgrfmod = "SPSGRF";
#define spsgrf_print_debug(str) print_debug(spsgrfmod, str)
void SPSGRF_Init(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b0a8      	sub	sp, #160	; 0xa0
 800a3a4:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 800a3a6:	f7f9 fe2f 	bl	8004008 <RadioSpiInit>

  // restart the radio
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Booting module");
 800a3aa:	4b83      	ldr	r3, [pc, #524]	; (800a5b8 <SPSGRF_Init+0x218>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4983      	ldr	r1, [pc, #524]	; (800a5bc <SPSGRF_Init+0x21c>)
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff ff9b 	bl	800a2ec <print_debug>
#endif
  SpiritEnterShutdown();
 800a3b6:	f7f9 ffa9 	bl	800430c <RadioEnterShutdown>
  SpiritExitShutdown();
 800a3ba:	f7f9 ffb3 	bl	8004324 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 800a3be:	f7f8 f92d 	bl	800261c <SpiritManagementWaExtraCurrent>
  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	70fb      	strb	r3, [r7, #3]
 800a3c6:	e004      	b.n	800a3d2 <SPSGRF_Init+0x32>
 800a3c8:	78fb      	ldrb	r3, [r7, #3]
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	70fb      	strb	r3, [r7, #3]
 800a3d2:	78fb      	ldrb	r3, [r7, #3]
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2bff      	cmp	r3, #255	; 0xff
 800a3d8:	d1f6      	bne.n	800a3c8 <SPSGRF_Init+0x28>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 800a3da:	f7f9 fdef 	bl	8003fbc <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 800a3de:	4b78      	ldr	r3, [pc, #480]	; (800a5c0 <SPSGRF_Init+0x220>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d1ea      	bne.n	800a3c2 <SPSGRF_Init+0x22>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Initialize radio RF parameters");
 800a3ec:	4b72      	ldr	r3, [pc, #456]	; (800a5b8 <SPSGRF_Init+0x218>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4974      	ldr	r1, [pc, #464]	; (800a5c4 <SPSGRF_Init+0x224>)
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff ff7a 	bl	800a2ec <print_debug>
  char tmp[100];
  sprintf(tmp, "Setting frequency to %f",BASE_FREQUENCY);
 800a3f8:	1d38      	adds	r0, r7, #4
 800a3fa:	a36d      	add	r3, pc, #436	; (adr r3, 800a5b0 <SPSGRF_Init+0x210>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	4971      	ldr	r1, [pc, #452]	; (800a5c8 <SPSGRF_Init+0x228>)
 800a402:	f000 fdd3 	bl	800afac <siprintf>
  spsgrf_print_debug(tmp);
 800a406:	4b6c      	ldr	r3, [pc, #432]	; (800a5b8 <SPSGRF_Init+0x218>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	1d3a      	adds	r2, r7, #4
 800a40c:	4611      	mov	r1, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff ff6c 	bl	800a2ec <print_debug>
  sprintf(tmp, "Setting baudrate to %d",DATARATE);
 800a414:	1d3b      	adds	r3, r7, #4
 800a416:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800a41a:	496c      	ldr	r1, [pc, #432]	; (800a5cc <SPSGRF_Init+0x22c>)
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 fdc5 	bl	800afac <siprintf>
    spsgrf_print_debug(tmp);
 800a422:	4b65      	ldr	r3, [pc, #404]	; (800a5b8 <SPSGRF_Init+0x218>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	1d3a      	adds	r2, r7, #4
 800a428:	4611      	mov	r1, r2
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7ff ff5e 	bl	800a2ec <print_debug>
#endif
  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 800a430:	2300      	movs	r3, #0
 800a432:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 800a436:	4b66      	ldr	r3, [pc, #408]	; (800a5d0 <SPSGRF_Init+0x230>)
 800a438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 800a43c:	4b65      	ldr	r3, [pc, #404]	; (800a5d4 <SPSGRF_Init+0x234>)
 800a43e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 800a442:	2300      	movs	r3, #0
 800a444:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 800a448:	2300      	movs	r3, #0
 800a44a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  xRadioInit.lDatarate = DATARATE;
 800a44e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800a452:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 800a456:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a45a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  xRadioInit.lBandwidth = BANDWIDTH;
 800a45e:	4b5d      	ldr	r3, [pc, #372]	; (800a5d4 <SPSGRF_Init+0x234>)
 800a460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 800a464:	485c      	ldr	r0, [pc, #368]	; (800a5d8 <SPSGRF_Init+0x238>)
 800a466:	f7f9 fd37 	bl	8003ed8 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 800a46a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a46e:	4618      	mov	r0, r3
 800a470:	f7f8 fb78 	bl	8002b64 <SpiritRadioInit>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Setting power level");
 800a474:	4b50      	ldr	r3, [pc, #320]	; (800a5b8 <SPSGRF_Init+0x218>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4958      	ldr	r1, [pc, #352]	; (800a5dc <SPSGRF_Init+0x23c>)
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7ff ff36 	bl	800a2ec <print_debug>
#endif
  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 800a480:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800a5e0 <SPSGRF_Init+0x240>
 800a484:	2007      	movs	r0, #7
 800a486:	f7f9 fbc3 	bl	8003c10 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 800a48a:	2007      	movs	r0, #7
 800a48c:	f7f9 fc16 	bl	8003cbc <SpiritRadioSetPALevelMaxIndex>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configure packet handler to use the Basic packet format");
 800a490:	4b49      	ldr	r3, [pc, #292]	; (800a5b8 <SPSGRF_Init+0x218>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4953      	ldr	r1, [pc, #332]	; (800a5e4 <SPSGRF_Init+0x244>)
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff ff28 	bl	800a2ec <print_debug>
#endif
  // Configure packet handler to use the Basic packet format
  xBasicInit.xPreambleLength = PREAMBLE_LENGTH;
 800a49c:	2318      	movs	r3, #24
 800a49e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  xBasicInit.xSyncLength = SYNC_LENGTH;
 800a4a2:	2306      	movs	r3, #6
 800a4a4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  xBasicInit.lSyncWords = SYNC_WORD;
 800a4a8:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 800a4ac:	67bb      	str	r3, [r7, #120]	; 0x78
  xBasicInit.xFixVarLength = LENGTH_TYPE;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  xBasicInit.cPktLengthWidth = LENGTH_WIDTH;
 800a4b4:	2307      	movs	r3, #7
 800a4b6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  xBasicInit.xCrcMode = CRC_MODE;
 800a4ba:	2320      	movs	r3, #32
 800a4bc:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  xBasicInit.xControlLength = CONTROL_LENGTH;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  xBasicInit.xAddressField = EN_ADDRESS;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  xBasicInit.xFec = EN_FEC;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  xBasicInit.xDataWhitening = EN_WHITENING;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  SpiritPktBasicInit(&xBasicInit);
 800a4d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7f8 f8c3 	bl	8002668 <SpiritPktBasicInit>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configuring automatic packet filtering");
 800a4e2:	4b35      	ldr	r3, [pc, #212]	; (800a5b8 <SPSGRF_Init+0x218>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4940      	ldr	r1, [pc, #256]	; (800a5e8 <SPSGRF_Init+0x248>)
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7ff feff 	bl	800a2ec <print_debug>
#endif
  // Configure destination address criteria for automatic packet filtering
  xBasicAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  xBasicAddress.cMyAddress = MY_ADDRESS;
 800a4f4:	2344      	movs	r3, #68	; 0x44
 800a4f6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  xBasicAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  xBasicAddress.cMulticastAddress = MULTICAST_ADDRESS;
 800a500:	23ee      	movs	r3, #238	; 0xee
 800a502:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  xBasicAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 800a506:	2300      	movs	r3, #0
 800a508:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  xBasicAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 800a50c:	23ff      	movs	r3, #255	; 0xff
 800a50e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  SpiritPktBasicAddressesInit(&xBasicAddress);
 800a512:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a516:	4618      	mov	r0, r3
 800a518:	f7f8 f97e 	bl	8002818 <SpiritPktBasicAddressesInit>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configuring interrupt pin");
 800a51c:	4b26      	ldr	r3, [pc, #152]	; (800a5b8 <SPSGRF_Init+0x218>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4932      	ldr	r1, [pc, #200]	; (800a5ec <SPSGRF_Init+0x24c>)
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff fee2 	bl	800a2ec <print_debug>
#endif
  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 800a528:	2302      	movs	r3, #2
 800a52a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 800a52e:	2302      	movs	r3, #2
 800a530:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 800a534:	2300      	movs	r3, #0
 800a536:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  SpiritGpioInit(&xGpioInit);
 800a53a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a53e:	4618      	mov	r0, r3
 800a540:	f7f7 fd24 	bl	8001f8c <SpiritGpioInit>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Enable interrupt types");
 800a544:	4b1c      	ldr	r3, [pc, #112]	; (800a5b8 <SPSGRF_Init+0x218>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4929      	ldr	r1, [pc, #164]	; (800a5f0 <SPSGRF_Init+0x250>)
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7ff fece 	bl	800a2ec <print_debug>
#endif
  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 800a550:	2000      	movs	r0, #0
 800a552:	f7f7 fd3f 	bl	8001fd4 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 800a556:	2101      	movs	r1, #1
 800a558:	2004      	movs	r0, #4
 800a55a:	f7f7 fd67 	bl	800202c <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 800a55e:	2101      	movs	r1, #1
 800a560:	2001      	movs	r0, #1
 800a562:	f7f7 fd63 	bl	800202c <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 800a566:	2101      	movs	r1, #1
 800a568:	2002      	movs	r0, #2
 800a56a:	f7f7 fd5f 	bl	800202c <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 800a56e:	2101      	movs	r1, #1
 800a570:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800a574:	f7f7 fd5a 	bl	800202c <SpiritIrq>
  SpiritIrqClearStatus();
 800a578:	f7f7 fdf2 	bl	8002160 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 800a57c:	2000      	movs	r0, #0
 800a57e:	f7f8 fa9d 	bl	8002abc <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 800a582:	2001      	movs	r0, #1
 800a584:	f7f8 fa62 	bl	8002a4c <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 800a588:	f06f 0077 	mvn.w	r0, #119	; 0x77
 800a58c:	f7f8 faca 	bl	8002b24 <SpiritQiSetRssiThresholddBm>
  spsgrf_print_debug("Set RX timeout to 2000");
#endif
  SpiritTimerSetRxTimeoutMs(2000.0);
#else
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Set RX timeout to infinite");
 800a590:	4b09      	ldr	r3, [pc, #36]	; (800a5b8 <SPSGRF_Init+0x218>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4917      	ldr	r1, [pc, #92]	; (800a5f4 <SPSGRF_Init+0x254>)
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff fea8 	bl	800a2ec <print_debug>
#endif
  SET_INFINITE_RX_TIMEOUT();
 800a59c:	2000      	movs	r0, #0
 800a59e:	f7f9 fcab 	bl	8003ef8 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 800a5a2:	2002      	movs	r0, #2
 800a5a4:	f7f9 fcc2 	bl	8003f2c <SpiritTimerSetRxTimeoutStopCondition>
}
 800a5a8:	bf00      	nop
 800a5aa:	37a0      	adds	r7, #160	; 0xa0
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	80000000 	.word	0x80000000
 800a5b4:	41c9de50 	.word	0x41c9de50
 800a5b8:	20000020 	.word	0x20000020
 800a5bc:	0800d610 	.word	0x0800d610
 800a5c0:	20000344 	.word	0x20000344
 800a5c4:	0800d620 	.word	0x0800d620
 800a5c8:	0800d640 	.word	0x0800d640
 800a5cc:	0800d658 	.word	0x0800d658
 800a5d0:	33bca100 	.word	0x33bca100
 800a5d4:	000186a0 	.word	0x000186a0
 800a5d8:	02faf080 	.word	0x02faf080
 800a5dc:	0800d670 	.word	0x0800d670
 800a5e0:	4139999a 	.word	0x4139999a
 800a5e4:	0800d684 	.word	0x0800d684
 800a5e8:	0800d6bc 	.word	0x0800d6bc
 800a5ec:	0800d6e4 	.word	0x0800d6e4
 800a5f0:	0800d700 	.word	0x0800d700
 800a5f4:	0800d718 	.word	0x0800d718

0800a5f8 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 800a604:	2072      	movs	r0, #114	; 0x72
 800a606:	f7f7 fca9 	bl	8001f5c <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 800a60a:	78fb      	ldrb	r3, [r7, #3]
 800a60c:	2b60      	cmp	r3, #96	; 0x60
 800a60e:	bf28      	it	cs
 800a610:	2360      	movcs	r3, #96	; 0x60
 800a612:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7f9 fde3 	bl	80041e4 <RadioSpiWriteFifo>
  SpiritPktBasicSetPayloadLength(txLen);
 800a61e:	78fb      	ldrb	r3, [r7, #3]
 800a620:	b29b      	uxth	r3, r3
 800a622:	4618      	mov	r0, r3
 800a624:	f7f8 f986 	bl	8002934 <SpiritPktBasicSetPayloadLength>
  SpiritCmdStrobeTx();
 800a628:	f7f7 ff90 	bl	800254c <SpiritManagementWaCmdStrobeTx>
 800a62c:	2060      	movs	r0, #96	; 0x60
 800a62e:	f7f7 fc95 	bl	8001f5c <SpiritCmdStrobeCommand>
}
 800a632:	bf00      	nop
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 800a63e:	f7f7 ffbd 	bl	80025bc <SpiritManagementWaCmdStrobeRx>
 800a642:	2061      	movs	r0, #97	; 0x61
 800a644:	f7f7 fc8a 	bl	8001f5c <SpiritCmdStrobeCommand>
}
 800a648:	bf00      	nop
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 800a654:	f7f7 fd9c 	bl	8002190 <SpiritLinearFifoReadNumElementsRxFifo>
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
 800a65e:	6879      	ldr	r1, [r7, #4]
 800a660:	4618      	mov	r0, r3
 800a662:	f7f9 fe09 	bl	8004278 <RadioSpiReadFifo>

  return len;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <__errno>:
 800a670:	4b01      	ldr	r3, [pc, #4]	; (800a678 <__errno+0x8>)
 800a672:	6818      	ldr	r0, [r3, #0]
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	20000024 	.word	0x20000024

0800a67c <__libc_init_array>:
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	4d0d      	ldr	r5, [pc, #52]	; (800a6b4 <__libc_init_array+0x38>)
 800a680:	2600      	movs	r6, #0
 800a682:	4c0d      	ldr	r4, [pc, #52]	; (800a6b8 <__libc_init_array+0x3c>)
 800a684:	1b64      	subs	r4, r4, r5
 800a686:	10a4      	asrs	r4, r4, #2
 800a688:	42a6      	cmp	r6, r4
 800a68a:	d109      	bne.n	800a6a0 <__libc_init_array+0x24>
 800a68c:	4d0b      	ldr	r5, [pc, #44]	; (800a6bc <__libc_init_array+0x40>)
 800a68e:	2600      	movs	r6, #0
 800a690:	4c0b      	ldr	r4, [pc, #44]	; (800a6c0 <__libc_init_array+0x44>)
 800a692:	f002 ff1f 	bl	800d4d4 <_init>
 800a696:	1b64      	subs	r4, r4, r5
 800a698:	10a4      	asrs	r4, r4, #2
 800a69a:	42a6      	cmp	r6, r4
 800a69c:	d105      	bne.n	800a6aa <__libc_init_array+0x2e>
 800a69e:	bd70      	pop	{r4, r5, r6, pc}
 800a6a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a4:	3601      	adds	r6, #1
 800a6a6:	4798      	blx	r3
 800a6a8:	e7ee      	b.n	800a688 <__libc_init_array+0xc>
 800a6aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ae:	3601      	adds	r6, #1
 800a6b0:	4798      	blx	r3
 800a6b2:	e7f2      	b.n	800a69a <__libc_init_array+0x1e>
 800a6b4:	0800dd7c 	.word	0x0800dd7c
 800a6b8:	0800dd7c 	.word	0x0800dd7c
 800a6bc:	0800dd7c 	.word	0x0800dd7c
 800a6c0:	0800dd80 	.word	0x0800dd80

0800a6c4 <memset>:
 800a6c4:	4402      	add	r2, r0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d100      	bne.n	800a6ce <memset+0xa>
 800a6cc:	4770      	bx	lr
 800a6ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a6d2:	e7f9      	b.n	800a6c8 <memset+0x4>

0800a6d4 <__cvt>:
 800a6d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d8:	ec55 4b10 	vmov	r4, r5, d0
 800a6dc:	2d00      	cmp	r5, #0
 800a6de:	460e      	mov	r6, r1
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	462b      	mov	r3, r5
 800a6e4:	bfb4      	ite	lt
 800a6e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a6ea:	2300      	movge	r3, #0
 800a6ec:	4691      	mov	r9, r2
 800a6ee:	bfbf      	itttt	lt
 800a6f0:	4622      	movlt	r2, r4
 800a6f2:	461d      	movlt	r5, r3
 800a6f4:	232d      	movlt	r3, #45	; 0x2d
 800a6f6:	4614      	movlt	r4, r2
 800a6f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6fc:	700b      	strb	r3, [r1, #0]
 800a6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a700:	f023 0820 	bic.w	r8, r3, #32
 800a704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a708:	d005      	beq.n	800a716 <__cvt+0x42>
 800a70a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a70e:	d100      	bne.n	800a712 <__cvt+0x3e>
 800a710:	3601      	adds	r6, #1
 800a712:	2102      	movs	r1, #2
 800a714:	e000      	b.n	800a718 <__cvt+0x44>
 800a716:	2103      	movs	r1, #3
 800a718:	ab03      	add	r3, sp, #12
 800a71a:	4632      	mov	r2, r6
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	ab02      	add	r3, sp, #8
 800a720:	ec45 4b10 	vmov	d0, r4, r5
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	4653      	mov	r3, sl
 800a728:	f000 fcfe 	bl	800b128 <_dtoa_r>
 800a72c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a730:	4607      	mov	r7, r0
 800a732:	d102      	bne.n	800a73a <__cvt+0x66>
 800a734:	f019 0f01 	tst.w	r9, #1
 800a738:	d022      	beq.n	800a780 <__cvt+0xac>
 800a73a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a73e:	eb07 0906 	add.w	r9, r7, r6
 800a742:	d110      	bne.n	800a766 <__cvt+0x92>
 800a744:	783b      	ldrb	r3, [r7, #0]
 800a746:	2b30      	cmp	r3, #48	; 0x30
 800a748:	d10a      	bne.n	800a760 <__cvt+0x8c>
 800a74a:	2200      	movs	r2, #0
 800a74c:	2300      	movs	r3, #0
 800a74e:	4620      	mov	r0, r4
 800a750:	4629      	mov	r1, r5
 800a752:	f7f6 f9bd 	bl	8000ad0 <__aeabi_dcmpeq>
 800a756:	b918      	cbnz	r0, 800a760 <__cvt+0x8c>
 800a758:	f1c6 0601 	rsb	r6, r6, #1
 800a75c:	f8ca 6000 	str.w	r6, [sl]
 800a760:	f8da 3000 	ldr.w	r3, [sl]
 800a764:	4499      	add	r9, r3
 800a766:	2200      	movs	r2, #0
 800a768:	2300      	movs	r3, #0
 800a76a:	4620      	mov	r0, r4
 800a76c:	4629      	mov	r1, r5
 800a76e:	f7f6 f9af 	bl	8000ad0 <__aeabi_dcmpeq>
 800a772:	b108      	cbz	r0, 800a778 <__cvt+0xa4>
 800a774:	f8cd 900c 	str.w	r9, [sp, #12]
 800a778:	2230      	movs	r2, #48	; 0x30
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	454b      	cmp	r3, r9
 800a77e:	d307      	bcc.n	800a790 <__cvt+0xbc>
 800a780:	9b03      	ldr	r3, [sp, #12]
 800a782:	4638      	mov	r0, r7
 800a784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a786:	1bdb      	subs	r3, r3, r7
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	b004      	add	sp, #16
 800a78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a790:	1c59      	adds	r1, r3, #1
 800a792:	9103      	str	r1, [sp, #12]
 800a794:	701a      	strb	r2, [r3, #0]
 800a796:	e7f0      	b.n	800a77a <__cvt+0xa6>

0800a798 <__exponent>:
 800a798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a79a:	2900      	cmp	r1, #0
 800a79c:	4603      	mov	r3, r0
 800a79e:	bfb8      	it	lt
 800a7a0:	4249      	neglt	r1, r1
 800a7a2:	f803 2b02 	strb.w	r2, [r3], #2
 800a7a6:	bfb4      	ite	lt
 800a7a8:	222d      	movlt	r2, #45	; 0x2d
 800a7aa:	222b      	movge	r2, #43	; 0x2b
 800a7ac:	2909      	cmp	r1, #9
 800a7ae:	7042      	strb	r2, [r0, #1]
 800a7b0:	dd2a      	ble.n	800a808 <__exponent+0x70>
 800a7b2:	f10d 0407 	add.w	r4, sp, #7
 800a7b6:	270a      	movs	r7, #10
 800a7b8:	46a4      	mov	ip, r4
 800a7ba:	460a      	mov	r2, r1
 800a7bc:	46a6      	mov	lr, r4
 800a7be:	3c01      	subs	r4, #1
 800a7c0:	2a63      	cmp	r2, #99	; 0x63
 800a7c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a7c6:	fb07 1516 	mls	r5, r7, r6, r1
 800a7ca:	4631      	mov	r1, r6
 800a7cc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a7d0:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a7d4:	dcf1      	bgt.n	800a7ba <__exponent+0x22>
 800a7d6:	3130      	adds	r1, #48	; 0x30
 800a7d8:	f1ae 0502 	sub.w	r5, lr, #2
 800a7dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a7e0:	1c44      	adds	r4, r0, #1
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4561      	cmp	r1, ip
 800a7e6:	d30a      	bcc.n	800a7fe <__exponent+0x66>
 800a7e8:	f10d 0209 	add.w	r2, sp, #9
 800a7ec:	eba2 020e 	sub.w	r2, r2, lr
 800a7f0:	4565      	cmp	r5, ip
 800a7f2:	bf88      	it	hi
 800a7f4:	2200      	movhi	r2, #0
 800a7f6:	4413      	add	r3, r2
 800a7f8:	1a18      	subs	r0, r3, r0
 800a7fa:	b003      	add	sp, #12
 800a7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a802:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a806:	e7ed      	b.n	800a7e4 <__exponent+0x4c>
 800a808:	2330      	movs	r3, #48	; 0x30
 800a80a:	3130      	adds	r1, #48	; 0x30
 800a80c:	7083      	strb	r3, [r0, #2]
 800a80e:	1d03      	adds	r3, r0, #4
 800a810:	70c1      	strb	r1, [r0, #3]
 800a812:	e7f1      	b.n	800a7f8 <__exponent+0x60>

0800a814 <_printf_float>:
 800a814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	ed2d 8b02 	vpush	{d8}
 800a81c:	b08d      	sub	sp, #52	; 0x34
 800a81e:	460c      	mov	r4, r1
 800a820:	4616      	mov	r6, r2
 800a822:	461f      	mov	r7, r3
 800a824:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a828:	4605      	mov	r5, r0
 800a82a:	f001 fa67 	bl	800bcfc <_localeconv_r>
 800a82e:	f8d0 a000 	ldr.w	sl, [r0]
 800a832:	4650      	mov	r0, sl
 800a834:	f7f5 fd20 	bl	8000278 <strlen>
 800a838:	2300      	movs	r3, #0
 800a83a:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a83e:	ee08 0a10 	vmov	s16, r0
 800a842:	930a      	str	r3, [sp, #40]	; 0x28
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	9305      	str	r3, [sp, #20]
 800a848:	f8d8 3000 	ldr.w	r3, [r8]
 800a84c:	3307      	adds	r3, #7
 800a84e:	f023 0307 	bic.w	r3, r3, #7
 800a852:	f103 0208 	add.w	r2, r3, #8
 800a856:	f8c8 2000 	str.w	r2, [r8]
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a862:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a866:	f04f 32ff 	mov.w	r2, #4294967295
 800a86a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a86e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a872:	9307      	str	r3, [sp, #28]
 800a874:	4b9e      	ldr	r3, [pc, #632]	; (800aaf0 <_printf_float+0x2dc>)
 800a876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a87a:	f7f6 f95b 	bl	8000b34 <__aeabi_dcmpun>
 800a87e:	bb88      	cbnz	r0, 800a8e4 <_printf_float+0xd0>
 800a880:	f04f 32ff 	mov.w	r2, #4294967295
 800a884:	4b9a      	ldr	r3, [pc, #616]	; (800aaf0 <_printf_float+0x2dc>)
 800a886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a88a:	f7f6 f935 	bl	8000af8 <__aeabi_dcmple>
 800a88e:	bb48      	cbnz	r0, 800a8e4 <_printf_float+0xd0>
 800a890:	2200      	movs	r2, #0
 800a892:	2300      	movs	r3, #0
 800a894:	4640      	mov	r0, r8
 800a896:	4649      	mov	r1, r9
 800a898:	f7f6 f924 	bl	8000ae4 <__aeabi_dcmplt>
 800a89c:	b110      	cbz	r0, 800a8a4 <_printf_float+0x90>
 800a89e:	232d      	movs	r3, #45	; 0x2d
 800a8a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8a4:	4b93      	ldr	r3, [pc, #588]	; (800aaf4 <_printf_float+0x2e0>)
 800a8a6:	4894      	ldr	r0, [pc, #592]	; (800aaf8 <_printf_float+0x2e4>)
 800a8a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a8ac:	bf94      	ite	ls
 800a8ae:	4698      	movls	r8, r3
 800a8b0:	4680      	movhi	r8, r0
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	f04f 0900 	mov.w	r9, #0
 800a8b8:	6123      	str	r3, [r4, #16]
 800a8ba:	9b05      	ldr	r3, [sp, #20]
 800a8bc:	f023 0204 	bic.w	r2, r3, #4
 800a8c0:	6022      	str	r2, [r4, #0]
 800a8c2:	4633      	mov	r3, r6
 800a8c4:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	9700      	str	r7, [sp, #0]
 800a8cc:	f000 f9d8 	bl	800ac80 <_printf_common>
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	f040 8090 	bne.w	800a9f6 <_printf_float+0x1e2>
 800a8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8da:	b00d      	add	sp, #52	; 0x34
 800a8dc:	ecbd 8b02 	vpop	{d8}
 800a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	4642      	mov	r2, r8
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	4640      	mov	r0, r8
 800a8ea:	4649      	mov	r1, r9
 800a8ec:	f7f6 f922 	bl	8000b34 <__aeabi_dcmpun>
 800a8f0:	b140      	cbz	r0, 800a904 <_printf_float+0xf0>
 800a8f2:	464b      	mov	r3, r9
 800a8f4:	4881      	ldr	r0, [pc, #516]	; (800aafc <_printf_float+0x2e8>)
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	bfbc      	itt	lt
 800a8fa:	232d      	movlt	r3, #45	; 0x2d
 800a8fc:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a900:	4b7f      	ldr	r3, [pc, #508]	; (800ab00 <_printf_float+0x2ec>)
 800a902:	e7d1      	b.n	800a8a8 <_printf_float+0x94>
 800a904:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a908:	6863      	ldr	r3, [r4, #4]
 800a90a:	9206      	str	r2, [sp, #24]
 800a90c:	1c5a      	adds	r2, r3, #1
 800a90e:	d13f      	bne.n	800a990 <_printf_float+0x17c>
 800a910:	2306      	movs	r3, #6
 800a912:	6063      	str	r3, [r4, #4]
 800a914:	9b05      	ldr	r3, [sp, #20]
 800a916:	4628      	mov	r0, r5
 800a918:	6861      	ldr	r1, [r4, #4]
 800a91a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a91e:	2300      	movs	r3, #0
 800a920:	9303      	str	r3, [sp, #12]
 800a922:	ab0a      	add	r3, sp, #40	; 0x28
 800a924:	6022      	str	r2, [r4, #0]
 800a926:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a92a:	ab09      	add	r3, sp, #36	; 0x24
 800a92c:	ec49 8b10 	vmov	d0, r8, r9
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a936:	f7ff fecd 	bl	800a6d4 <__cvt>
 800a93a:	9b06      	ldr	r3, [sp, #24]
 800a93c:	4680      	mov	r8, r0
 800a93e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a940:	2b47      	cmp	r3, #71	; 0x47
 800a942:	d108      	bne.n	800a956 <_printf_float+0x142>
 800a944:	1cc8      	adds	r0, r1, #3
 800a946:	db02      	blt.n	800a94e <_printf_float+0x13a>
 800a948:	6863      	ldr	r3, [r4, #4]
 800a94a:	4299      	cmp	r1, r3
 800a94c:	dd41      	ble.n	800a9d2 <_printf_float+0x1be>
 800a94e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a952:	fa5f fb8b 	uxtb.w	fp, fp
 800a956:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a95a:	d820      	bhi.n	800a99e <_printf_float+0x18a>
 800a95c:	3901      	subs	r1, #1
 800a95e:	465a      	mov	r2, fp
 800a960:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a964:	9109      	str	r1, [sp, #36]	; 0x24
 800a966:	f7ff ff17 	bl	800a798 <__exponent>
 800a96a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a96c:	4681      	mov	r9, r0
 800a96e:	1813      	adds	r3, r2, r0
 800a970:	2a01      	cmp	r2, #1
 800a972:	6123      	str	r3, [r4, #16]
 800a974:	dc02      	bgt.n	800a97c <_printf_float+0x168>
 800a976:	6822      	ldr	r2, [r4, #0]
 800a978:	07d2      	lsls	r2, r2, #31
 800a97a:	d501      	bpl.n	800a980 <_printf_float+0x16c>
 800a97c:	3301      	adds	r3, #1
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a984:	2b00      	cmp	r3, #0
 800a986:	d09c      	beq.n	800a8c2 <_printf_float+0xae>
 800a988:	232d      	movs	r3, #45	; 0x2d
 800a98a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a98e:	e798      	b.n	800a8c2 <_printf_float+0xae>
 800a990:	9a06      	ldr	r2, [sp, #24]
 800a992:	2a47      	cmp	r2, #71	; 0x47
 800a994:	d1be      	bne.n	800a914 <_printf_float+0x100>
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1bc      	bne.n	800a914 <_printf_float+0x100>
 800a99a:	2301      	movs	r3, #1
 800a99c:	e7b9      	b.n	800a912 <_printf_float+0xfe>
 800a99e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a9a2:	d118      	bne.n	800a9d6 <_printf_float+0x1c2>
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	6863      	ldr	r3, [r4, #4]
 800a9a8:	dd0b      	ble.n	800a9c2 <_printf_float+0x1ae>
 800a9aa:	6121      	str	r1, [r4, #16]
 800a9ac:	b913      	cbnz	r3, 800a9b4 <_printf_float+0x1a0>
 800a9ae:	6822      	ldr	r2, [r4, #0]
 800a9b0:	07d0      	lsls	r0, r2, #31
 800a9b2:	d502      	bpl.n	800a9ba <_printf_float+0x1a6>
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	440b      	add	r3, r1
 800a9b8:	6123      	str	r3, [r4, #16]
 800a9ba:	f04f 0900 	mov.w	r9, #0
 800a9be:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9c0:	e7de      	b.n	800a980 <_printf_float+0x16c>
 800a9c2:	b913      	cbnz	r3, 800a9ca <_printf_float+0x1b6>
 800a9c4:	6822      	ldr	r2, [r4, #0]
 800a9c6:	07d2      	lsls	r2, r2, #31
 800a9c8:	d501      	bpl.n	800a9ce <_printf_float+0x1ba>
 800a9ca:	3302      	adds	r3, #2
 800a9cc:	e7f4      	b.n	800a9b8 <_printf_float+0x1a4>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e7f2      	b.n	800a9b8 <_printf_float+0x1a4>
 800a9d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d8:	4299      	cmp	r1, r3
 800a9da:	db05      	blt.n	800a9e8 <_printf_float+0x1d4>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	6121      	str	r1, [r4, #16]
 800a9e0:	07d8      	lsls	r0, r3, #31
 800a9e2:	d5ea      	bpl.n	800a9ba <_printf_float+0x1a6>
 800a9e4:	1c4b      	adds	r3, r1, #1
 800a9e6:	e7e7      	b.n	800a9b8 <_printf_float+0x1a4>
 800a9e8:	2900      	cmp	r1, #0
 800a9ea:	bfd4      	ite	le
 800a9ec:	f1c1 0202 	rsble	r2, r1, #2
 800a9f0:	2201      	movgt	r2, #1
 800a9f2:	4413      	add	r3, r2
 800a9f4:	e7e0      	b.n	800a9b8 <_printf_float+0x1a4>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	055a      	lsls	r2, r3, #21
 800a9fa:	d407      	bmi.n	800aa0c <_printf_float+0x1f8>
 800a9fc:	6923      	ldr	r3, [r4, #16]
 800a9fe:	4642      	mov	r2, r8
 800aa00:	4631      	mov	r1, r6
 800aa02:	4628      	mov	r0, r5
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	d12c      	bne.n	800aa64 <_printf_float+0x250>
 800aa0a:	e764      	b.n	800a8d6 <_printf_float+0xc2>
 800aa0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa10:	f240 80e0 	bls.w	800abd4 <_printf_float+0x3c0>
 800aa14:	2200      	movs	r2, #0
 800aa16:	2300      	movs	r3, #0
 800aa18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa1c:	f7f6 f858 	bl	8000ad0 <__aeabi_dcmpeq>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d034      	beq.n	800aa8e <_printf_float+0x27a>
 800aa24:	2301      	movs	r3, #1
 800aa26:	4a37      	ldr	r2, [pc, #220]	; (800ab04 <_printf_float+0x2f0>)
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	47b8      	blx	r7
 800aa2e:	3001      	adds	r0, #1
 800aa30:	f43f af51 	beq.w	800a8d6 <_printf_float+0xc2>
 800aa34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	db02      	blt.n	800aa42 <_printf_float+0x22e>
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	07d8      	lsls	r0, r3, #31
 800aa40:	d510      	bpl.n	800aa64 <_printf_float+0x250>
 800aa42:	ee18 3a10 	vmov	r3, s16
 800aa46:	4652      	mov	r2, sl
 800aa48:	4631      	mov	r1, r6
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	47b8      	blx	r7
 800aa4e:	3001      	adds	r0, #1
 800aa50:	f43f af41 	beq.w	800a8d6 <_printf_float+0xc2>
 800aa54:	f04f 0800 	mov.w	r8, #0
 800aa58:	f104 091a 	add.w	r9, r4, #26
 800aa5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	4543      	cmp	r3, r8
 800aa62:	dc09      	bgt.n	800aa78 <_printf_float+0x264>
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	079b      	lsls	r3, r3, #30
 800aa68:	f100 8105 	bmi.w	800ac76 <_printf_float+0x462>
 800aa6c:	68e0      	ldr	r0, [r4, #12]
 800aa6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa70:	4298      	cmp	r0, r3
 800aa72:	bfb8      	it	lt
 800aa74:	4618      	movlt	r0, r3
 800aa76:	e730      	b.n	800a8da <_printf_float+0xc6>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	464a      	mov	r2, r9
 800aa7c:	4631      	mov	r1, r6
 800aa7e:	4628      	mov	r0, r5
 800aa80:	47b8      	blx	r7
 800aa82:	3001      	adds	r0, #1
 800aa84:	f43f af27 	beq.w	800a8d6 <_printf_float+0xc2>
 800aa88:	f108 0801 	add.w	r8, r8, #1
 800aa8c:	e7e6      	b.n	800aa5c <_printf_float+0x248>
 800aa8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dc39      	bgt.n	800ab08 <_printf_float+0x2f4>
 800aa94:	2301      	movs	r3, #1
 800aa96:	4a1b      	ldr	r2, [pc, #108]	; (800ab04 <_printf_float+0x2f0>)
 800aa98:	4631      	mov	r1, r6
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	47b8      	blx	r7
 800aa9e:	3001      	adds	r0, #1
 800aaa0:	f43f af19 	beq.w	800a8d6 <_printf_float+0xc2>
 800aaa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	d102      	bne.n	800aab2 <_printf_float+0x29e>
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	07d9      	lsls	r1, r3, #31
 800aab0:	d5d8      	bpl.n	800aa64 <_printf_float+0x250>
 800aab2:	ee18 3a10 	vmov	r3, s16
 800aab6:	4652      	mov	r2, sl
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	47b8      	blx	r7
 800aabe:	3001      	adds	r0, #1
 800aac0:	f43f af09 	beq.w	800a8d6 <_printf_float+0xc2>
 800aac4:	f04f 0900 	mov.w	r9, #0
 800aac8:	f104 0a1a 	add.w	sl, r4, #26
 800aacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aace:	425b      	negs	r3, r3
 800aad0:	454b      	cmp	r3, r9
 800aad2:	dc01      	bgt.n	800aad8 <_printf_float+0x2c4>
 800aad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad6:	e792      	b.n	800a9fe <_printf_float+0x1ea>
 800aad8:	2301      	movs	r3, #1
 800aada:	4652      	mov	r2, sl
 800aadc:	4631      	mov	r1, r6
 800aade:	4628      	mov	r0, r5
 800aae0:	47b8      	blx	r7
 800aae2:	3001      	adds	r0, #1
 800aae4:	f43f aef7 	beq.w	800a8d6 <_printf_float+0xc2>
 800aae8:	f109 0901 	add.w	r9, r9, #1
 800aaec:	e7ee      	b.n	800aacc <_printf_float+0x2b8>
 800aaee:	bf00      	nop
 800aaf0:	7fefffff 	.word	0x7fefffff
 800aaf4:	0800d994 	.word	0x0800d994
 800aaf8:	0800d998 	.word	0x0800d998
 800aafc:	0800d9a0 	.word	0x0800d9a0
 800ab00:	0800d99c 	.word	0x0800d99c
 800ab04:	0800d9a4 	.word	0x0800d9a4
 800ab08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	bfa8      	it	ge
 800ab10:	461a      	movge	r2, r3
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	4691      	mov	r9, r2
 800ab16:	dc37      	bgt.n	800ab88 <_printf_float+0x374>
 800ab18:	f04f 0b00 	mov.w	fp, #0
 800ab1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab20:	f104 021a 	add.w	r2, r4, #26
 800ab24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab26:	9305      	str	r3, [sp, #20]
 800ab28:	eba3 0309 	sub.w	r3, r3, r9
 800ab2c:	455b      	cmp	r3, fp
 800ab2e:	dc33      	bgt.n	800ab98 <_printf_float+0x384>
 800ab30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab34:	429a      	cmp	r2, r3
 800ab36:	db3b      	blt.n	800abb0 <_printf_float+0x39c>
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	07da      	lsls	r2, r3, #31
 800ab3c:	d438      	bmi.n	800abb0 <_printf_float+0x39c>
 800ab3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab40:	9b05      	ldr	r3, [sp, #20]
 800ab42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	eba2 0901 	sub.w	r9, r2, r1
 800ab4a:	4599      	cmp	r9, r3
 800ab4c:	bfa8      	it	ge
 800ab4e:	4699      	movge	r9, r3
 800ab50:	f1b9 0f00 	cmp.w	r9, #0
 800ab54:	dc35      	bgt.n	800abc2 <_printf_float+0x3ae>
 800ab56:	f04f 0800 	mov.w	r8, #0
 800ab5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab5e:	f104 0a1a 	add.w	sl, r4, #26
 800ab62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab66:	1a9b      	subs	r3, r3, r2
 800ab68:	eba3 0309 	sub.w	r3, r3, r9
 800ab6c:	4543      	cmp	r3, r8
 800ab6e:	f77f af79 	ble.w	800aa64 <_printf_float+0x250>
 800ab72:	2301      	movs	r3, #1
 800ab74:	4652      	mov	r2, sl
 800ab76:	4631      	mov	r1, r6
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	f43f aeaa 	beq.w	800a8d6 <_printf_float+0xc2>
 800ab82:	f108 0801 	add.w	r8, r8, #1
 800ab86:	e7ec      	b.n	800ab62 <_printf_float+0x34e>
 800ab88:	4613      	mov	r3, r2
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4642      	mov	r2, r8
 800ab8e:	4628      	mov	r0, r5
 800ab90:	47b8      	blx	r7
 800ab92:	3001      	adds	r0, #1
 800ab94:	d1c0      	bne.n	800ab18 <_printf_float+0x304>
 800ab96:	e69e      	b.n	800a8d6 <_printf_float+0xc2>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	9205      	str	r2, [sp, #20]
 800aba0:	47b8      	blx	r7
 800aba2:	3001      	adds	r0, #1
 800aba4:	f43f ae97 	beq.w	800a8d6 <_printf_float+0xc2>
 800aba8:	f10b 0b01 	add.w	fp, fp, #1
 800abac:	9a05      	ldr	r2, [sp, #20]
 800abae:	e7b9      	b.n	800ab24 <_printf_float+0x310>
 800abb0:	ee18 3a10 	vmov	r3, s16
 800abb4:	4652      	mov	r2, sl
 800abb6:	4631      	mov	r1, r6
 800abb8:	4628      	mov	r0, r5
 800abba:	47b8      	blx	r7
 800abbc:	3001      	adds	r0, #1
 800abbe:	d1be      	bne.n	800ab3e <_printf_float+0x32a>
 800abc0:	e689      	b.n	800a8d6 <_printf_float+0xc2>
 800abc2:	9a05      	ldr	r2, [sp, #20]
 800abc4:	464b      	mov	r3, r9
 800abc6:	4631      	mov	r1, r6
 800abc8:	4628      	mov	r0, r5
 800abca:	4442      	add	r2, r8
 800abcc:	47b8      	blx	r7
 800abce:	3001      	adds	r0, #1
 800abd0:	d1c1      	bne.n	800ab56 <_printf_float+0x342>
 800abd2:	e680      	b.n	800a8d6 <_printf_float+0xc2>
 800abd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abd6:	2a01      	cmp	r2, #1
 800abd8:	dc01      	bgt.n	800abde <_printf_float+0x3ca>
 800abda:	07db      	lsls	r3, r3, #31
 800abdc:	d538      	bpl.n	800ac50 <_printf_float+0x43c>
 800abde:	2301      	movs	r3, #1
 800abe0:	4642      	mov	r2, r8
 800abe2:	4631      	mov	r1, r6
 800abe4:	4628      	mov	r0, r5
 800abe6:	47b8      	blx	r7
 800abe8:	3001      	adds	r0, #1
 800abea:	f43f ae74 	beq.w	800a8d6 <_printf_float+0xc2>
 800abee:	ee18 3a10 	vmov	r3, s16
 800abf2:	4652      	mov	r2, sl
 800abf4:	4631      	mov	r1, r6
 800abf6:	4628      	mov	r0, r5
 800abf8:	47b8      	blx	r7
 800abfa:	3001      	adds	r0, #1
 800abfc:	f43f ae6b 	beq.w	800a8d6 <_printf_float+0xc2>
 800ac00:	2200      	movs	r2, #0
 800ac02:	2300      	movs	r3, #0
 800ac04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac08:	f7f5 ff62 	bl	8000ad0 <__aeabi_dcmpeq>
 800ac0c:	b9d8      	cbnz	r0, 800ac46 <_printf_float+0x432>
 800ac0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac10:	f108 0201 	add.w	r2, r8, #1
 800ac14:	3b01      	subs	r3, #1
 800ac16:	4631      	mov	r1, r6
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b8      	blx	r7
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d10e      	bne.n	800ac3e <_printf_float+0x42a>
 800ac20:	e659      	b.n	800a8d6 <_printf_float+0xc2>
 800ac22:	2301      	movs	r3, #1
 800ac24:	4652      	mov	r2, sl
 800ac26:	4631      	mov	r1, r6
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b8      	blx	r7
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	f43f ae52 	beq.w	800a8d6 <_printf_float+0xc2>
 800ac32:	f108 0801 	add.w	r8, r8, #1
 800ac36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	4543      	cmp	r3, r8
 800ac3c:	dcf1      	bgt.n	800ac22 <_printf_float+0x40e>
 800ac3e:	464b      	mov	r3, r9
 800ac40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac44:	e6dc      	b.n	800aa00 <_printf_float+0x1ec>
 800ac46:	f04f 0800 	mov.w	r8, #0
 800ac4a:	f104 0a1a 	add.w	sl, r4, #26
 800ac4e:	e7f2      	b.n	800ac36 <_printf_float+0x422>
 800ac50:	2301      	movs	r3, #1
 800ac52:	4642      	mov	r2, r8
 800ac54:	e7df      	b.n	800ac16 <_printf_float+0x402>
 800ac56:	2301      	movs	r3, #1
 800ac58:	464a      	mov	r2, r9
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	47b8      	blx	r7
 800ac60:	3001      	adds	r0, #1
 800ac62:	f43f ae38 	beq.w	800a8d6 <_printf_float+0xc2>
 800ac66:	f108 0801 	add.w	r8, r8, #1
 800ac6a:	68e3      	ldr	r3, [r4, #12]
 800ac6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac6e:	1a5b      	subs	r3, r3, r1
 800ac70:	4543      	cmp	r3, r8
 800ac72:	dcf0      	bgt.n	800ac56 <_printf_float+0x442>
 800ac74:	e6fa      	b.n	800aa6c <_printf_float+0x258>
 800ac76:	f04f 0800 	mov.w	r8, #0
 800ac7a:	f104 0919 	add.w	r9, r4, #25
 800ac7e:	e7f4      	b.n	800ac6a <_printf_float+0x456>

0800ac80 <_printf_common>:
 800ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac84:	4616      	mov	r6, r2
 800ac86:	4699      	mov	r9, r3
 800ac88:	688a      	ldr	r2, [r1, #8]
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	690b      	ldr	r3, [r1, #16]
 800ac8e:	460c      	mov	r4, r1
 800ac90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac94:	4293      	cmp	r3, r2
 800ac96:	bfb8      	it	lt
 800ac98:	4613      	movlt	r3, r2
 800ac9a:	6033      	str	r3, [r6, #0]
 800ac9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aca0:	b10a      	cbz	r2, 800aca6 <_printf_common+0x26>
 800aca2:	3301      	adds	r3, #1
 800aca4:	6033      	str	r3, [r6, #0]
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	0699      	lsls	r1, r3, #26
 800acaa:	bf42      	ittt	mi
 800acac:	6833      	ldrmi	r3, [r6, #0]
 800acae:	3302      	addmi	r3, #2
 800acb0:	6033      	strmi	r3, [r6, #0]
 800acb2:	6825      	ldr	r5, [r4, #0]
 800acb4:	f015 0506 	ands.w	r5, r5, #6
 800acb8:	d106      	bne.n	800acc8 <_printf_common+0x48>
 800acba:	f104 0a19 	add.w	sl, r4, #25
 800acbe:	68e3      	ldr	r3, [r4, #12]
 800acc0:	6832      	ldr	r2, [r6, #0]
 800acc2:	1a9b      	subs	r3, r3, r2
 800acc4:	42ab      	cmp	r3, r5
 800acc6:	dc29      	bgt.n	800ad1c <_printf_common+0x9c>
 800acc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800accc:	1e13      	subs	r3, r2, #0
 800acce:	6822      	ldr	r2, [r4, #0]
 800acd0:	bf18      	it	ne
 800acd2:	2301      	movne	r3, #1
 800acd4:	0692      	lsls	r2, r2, #26
 800acd6:	d42e      	bmi.n	800ad36 <_printf_common+0xb6>
 800acd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acdc:	4649      	mov	r1, r9
 800acde:	4638      	mov	r0, r7
 800ace0:	47c0      	blx	r8
 800ace2:	3001      	adds	r0, #1
 800ace4:	d021      	beq.n	800ad2a <_printf_common+0xaa>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	341a      	adds	r4, #26
 800acea:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800acee:	f003 0306 	and.w	r3, r3, #6
 800acf2:	6832      	ldr	r2, [r6, #0]
 800acf4:	2600      	movs	r6, #0
 800acf6:	2b04      	cmp	r3, #4
 800acf8:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800acfc:	bf08      	it	eq
 800acfe:	1aad      	subeq	r5, r5, r2
 800ad00:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ad04:	bf14      	ite	ne
 800ad06:	2500      	movne	r5, #0
 800ad08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	bfc4      	itt	gt
 800ad10:	1a9b      	subgt	r3, r3, r2
 800ad12:	18ed      	addgt	r5, r5, r3
 800ad14:	42b5      	cmp	r5, r6
 800ad16:	d11a      	bne.n	800ad4e <_printf_common+0xce>
 800ad18:	2000      	movs	r0, #0
 800ad1a:	e008      	b.n	800ad2e <_printf_common+0xae>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	4652      	mov	r2, sl
 800ad20:	4649      	mov	r1, r9
 800ad22:	4638      	mov	r0, r7
 800ad24:	47c0      	blx	r8
 800ad26:	3001      	adds	r0, #1
 800ad28:	d103      	bne.n	800ad32 <_printf_common+0xb2>
 800ad2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad32:	3501      	adds	r5, #1
 800ad34:	e7c3      	b.n	800acbe <_printf_common+0x3e>
 800ad36:	18e1      	adds	r1, r4, r3
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	2030      	movs	r0, #48	; 0x30
 800ad3c:	3302      	adds	r3, #2
 800ad3e:	4422      	add	r2, r4
 800ad40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad4c:	e7c4      	b.n	800acd8 <_printf_common+0x58>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	4622      	mov	r2, r4
 800ad52:	4649      	mov	r1, r9
 800ad54:	4638      	mov	r0, r7
 800ad56:	47c0      	blx	r8
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d0e6      	beq.n	800ad2a <_printf_common+0xaa>
 800ad5c:	3601      	adds	r6, #1
 800ad5e:	e7d9      	b.n	800ad14 <_printf_common+0x94>

0800ad60 <_printf_i>:
 800ad60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad64:	460c      	mov	r4, r1
 800ad66:	4691      	mov	r9, r2
 800ad68:	4680      	mov	r8, r0
 800ad6a:	469a      	mov	sl, r3
 800ad6c:	7e27      	ldrb	r7, [r4, #24]
 800ad6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad72:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad74:	2f78      	cmp	r7, #120	; 0x78
 800ad76:	d807      	bhi.n	800ad88 <_printf_i+0x28>
 800ad78:	2f62      	cmp	r7, #98	; 0x62
 800ad7a:	d80a      	bhi.n	800ad92 <_printf_i+0x32>
 800ad7c:	2f00      	cmp	r7, #0
 800ad7e:	f000 80d8 	beq.w	800af32 <_printf_i+0x1d2>
 800ad82:	2f58      	cmp	r7, #88	; 0x58
 800ad84:	f000 80a3 	beq.w	800aece <_printf_i+0x16e>
 800ad88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad90:	e03a      	b.n	800ae08 <_printf_i+0xa8>
 800ad92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad96:	2b15      	cmp	r3, #21
 800ad98:	d8f6      	bhi.n	800ad88 <_printf_i+0x28>
 800ad9a:	a001      	add	r0, pc, #4	; (adr r0, 800ada0 <_printf_i+0x40>)
 800ad9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ada0:	0800adf9 	.word	0x0800adf9
 800ada4:	0800ae0d 	.word	0x0800ae0d
 800ada8:	0800ad89 	.word	0x0800ad89
 800adac:	0800ad89 	.word	0x0800ad89
 800adb0:	0800ad89 	.word	0x0800ad89
 800adb4:	0800ad89 	.word	0x0800ad89
 800adb8:	0800ae0d 	.word	0x0800ae0d
 800adbc:	0800ad89 	.word	0x0800ad89
 800adc0:	0800ad89 	.word	0x0800ad89
 800adc4:	0800ad89 	.word	0x0800ad89
 800adc8:	0800ad89 	.word	0x0800ad89
 800adcc:	0800af19 	.word	0x0800af19
 800add0:	0800ae3d 	.word	0x0800ae3d
 800add4:	0800aefb 	.word	0x0800aefb
 800add8:	0800ad89 	.word	0x0800ad89
 800addc:	0800ad89 	.word	0x0800ad89
 800ade0:	0800af3b 	.word	0x0800af3b
 800ade4:	0800ad89 	.word	0x0800ad89
 800ade8:	0800ae3d 	.word	0x0800ae3d
 800adec:	0800ad89 	.word	0x0800ad89
 800adf0:	0800ad89 	.word	0x0800ad89
 800adf4:	0800af03 	.word	0x0800af03
 800adf8:	680b      	ldr	r3, [r1, #0]
 800adfa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800adfe:	1d1a      	adds	r2, r3, #4
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	600a      	str	r2, [r1, #0]
 800ae04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e0a3      	b.n	800af54 <_printf_i+0x1f4>
 800ae0c:	6825      	ldr	r5, [r4, #0]
 800ae0e:	6808      	ldr	r0, [r1, #0]
 800ae10:	062e      	lsls	r6, r5, #24
 800ae12:	f100 0304 	add.w	r3, r0, #4
 800ae16:	d50a      	bpl.n	800ae2e <_printf_i+0xce>
 800ae18:	6805      	ldr	r5, [r0, #0]
 800ae1a:	600b      	str	r3, [r1, #0]
 800ae1c:	2d00      	cmp	r5, #0
 800ae1e:	da03      	bge.n	800ae28 <_printf_i+0xc8>
 800ae20:	232d      	movs	r3, #45	; 0x2d
 800ae22:	426d      	negs	r5, r5
 800ae24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae28:	485e      	ldr	r0, [pc, #376]	; (800afa4 <_printf_i+0x244>)
 800ae2a:	230a      	movs	r3, #10
 800ae2c:	e019      	b.n	800ae62 <_printf_i+0x102>
 800ae2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ae32:	6805      	ldr	r5, [r0, #0]
 800ae34:	600b      	str	r3, [r1, #0]
 800ae36:	bf18      	it	ne
 800ae38:	b22d      	sxthne	r5, r5
 800ae3a:	e7ef      	b.n	800ae1c <_printf_i+0xbc>
 800ae3c:	680b      	ldr	r3, [r1, #0]
 800ae3e:	6825      	ldr	r5, [r4, #0]
 800ae40:	1d18      	adds	r0, r3, #4
 800ae42:	6008      	str	r0, [r1, #0]
 800ae44:	0628      	lsls	r0, r5, #24
 800ae46:	d501      	bpl.n	800ae4c <_printf_i+0xec>
 800ae48:	681d      	ldr	r5, [r3, #0]
 800ae4a:	e002      	b.n	800ae52 <_printf_i+0xf2>
 800ae4c:	0669      	lsls	r1, r5, #25
 800ae4e:	d5fb      	bpl.n	800ae48 <_printf_i+0xe8>
 800ae50:	881d      	ldrh	r5, [r3, #0]
 800ae52:	2f6f      	cmp	r7, #111	; 0x6f
 800ae54:	4853      	ldr	r0, [pc, #332]	; (800afa4 <_printf_i+0x244>)
 800ae56:	bf0c      	ite	eq
 800ae58:	2308      	moveq	r3, #8
 800ae5a:	230a      	movne	r3, #10
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae62:	6866      	ldr	r6, [r4, #4]
 800ae64:	2e00      	cmp	r6, #0
 800ae66:	60a6      	str	r6, [r4, #8]
 800ae68:	bfa2      	ittt	ge
 800ae6a:	6821      	ldrge	r1, [r4, #0]
 800ae6c:	f021 0104 	bicge.w	r1, r1, #4
 800ae70:	6021      	strge	r1, [r4, #0]
 800ae72:	b90d      	cbnz	r5, 800ae78 <_printf_i+0x118>
 800ae74:	2e00      	cmp	r6, #0
 800ae76:	d04d      	beq.n	800af14 <_printf_i+0x1b4>
 800ae78:	4616      	mov	r6, r2
 800ae7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae7e:	fb03 5711 	mls	r7, r3, r1, r5
 800ae82:	5dc7      	ldrb	r7, [r0, r7]
 800ae84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae88:	462f      	mov	r7, r5
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	42bb      	cmp	r3, r7
 800ae8e:	d9f4      	bls.n	800ae7a <_printf_i+0x11a>
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d10b      	bne.n	800aeac <_printf_i+0x14c>
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	07df      	lsls	r7, r3, #31
 800ae98:	d508      	bpl.n	800aeac <_printf_i+0x14c>
 800ae9a:	6923      	ldr	r3, [r4, #16]
 800ae9c:	6861      	ldr	r1, [r4, #4]
 800ae9e:	4299      	cmp	r1, r3
 800aea0:	bfde      	ittt	le
 800aea2:	2330      	movle	r3, #48	; 0x30
 800aea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aeac:	1b92      	subs	r2, r2, r6
 800aeae:	6122      	str	r2, [r4, #16]
 800aeb0:	464b      	mov	r3, r9
 800aeb2:	aa03      	add	r2, sp, #12
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	4640      	mov	r0, r8
 800aeb8:	f8cd a000 	str.w	sl, [sp]
 800aebc:	f7ff fee0 	bl	800ac80 <_printf_common>
 800aec0:	3001      	adds	r0, #1
 800aec2:	d14c      	bne.n	800af5e <_printf_i+0x1fe>
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	b004      	add	sp, #16
 800aeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aece:	4835      	ldr	r0, [pc, #212]	; (800afa4 <_printf_i+0x244>)
 800aed0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	680e      	ldr	r6, [r1, #0]
 800aed8:	061f      	lsls	r7, r3, #24
 800aeda:	f856 5b04 	ldr.w	r5, [r6], #4
 800aede:	600e      	str	r6, [r1, #0]
 800aee0:	d514      	bpl.n	800af0c <_printf_i+0x1ac>
 800aee2:	07d9      	lsls	r1, r3, #31
 800aee4:	bf44      	itt	mi
 800aee6:	f043 0320 	orrmi.w	r3, r3, #32
 800aeea:	6023      	strmi	r3, [r4, #0]
 800aeec:	b91d      	cbnz	r5, 800aef6 <_printf_i+0x196>
 800aeee:	6823      	ldr	r3, [r4, #0]
 800aef0:	f023 0320 	bic.w	r3, r3, #32
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	2310      	movs	r3, #16
 800aef8:	e7b0      	b.n	800ae5c <_printf_i+0xfc>
 800aefa:	6823      	ldr	r3, [r4, #0]
 800aefc:	f043 0320 	orr.w	r3, r3, #32
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	2378      	movs	r3, #120	; 0x78
 800af04:	4828      	ldr	r0, [pc, #160]	; (800afa8 <_printf_i+0x248>)
 800af06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af0a:	e7e3      	b.n	800aed4 <_printf_i+0x174>
 800af0c:	065e      	lsls	r6, r3, #25
 800af0e:	bf48      	it	mi
 800af10:	b2ad      	uxthmi	r5, r5
 800af12:	e7e6      	b.n	800aee2 <_printf_i+0x182>
 800af14:	4616      	mov	r6, r2
 800af16:	e7bb      	b.n	800ae90 <_printf_i+0x130>
 800af18:	680b      	ldr	r3, [r1, #0]
 800af1a:	6826      	ldr	r6, [r4, #0]
 800af1c:	1d1d      	adds	r5, r3, #4
 800af1e:	6960      	ldr	r0, [r4, #20]
 800af20:	600d      	str	r5, [r1, #0]
 800af22:	0635      	lsls	r5, r6, #24
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	d501      	bpl.n	800af2c <_printf_i+0x1cc>
 800af28:	6018      	str	r0, [r3, #0]
 800af2a:	e002      	b.n	800af32 <_printf_i+0x1d2>
 800af2c:	0671      	lsls	r1, r6, #25
 800af2e:	d5fb      	bpl.n	800af28 <_printf_i+0x1c8>
 800af30:	8018      	strh	r0, [r3, #0]
 800af32:	2300      	movs	r3, #0
 800af34:	4616      	mov	r6, r2
 800af36:	6123      	str	r3, [r4, #16]
 800af38:	e7ba      	b.n	800aeb0 <_printf_i+0x150>
 800af3a:	680b      	ldr	r3, [r1, #0]
 800af3c:	1d1a      	adds	r2, r3, #4
 800af3e:	600a      	str	r2, [r1, #0]
 800af40:	2100      	movs	r1, #0
 800af42:	681e      	ldr	r6, [r3, #0]
 800af44:	6862      	ldr	r2, [r4, #4]
 800af46:	4630      	mov	r0, r6
 800af48:	f000 fee4 	bl	800bd14 <memchr>
 800af4c:	b108      	cbz	r0, 800af52 <_printf_i+0x1f2>
 800af4e:	1b80      	subs	r0, r0, r6
 800af50:	6060      	str	r0, [r4, #4]
 800af52:	6863      	ldr	r3, [r4, #4]
 800af54:	6123      	str	r3, [r4, #16]
 800af56:	2300      	movs	r3, #0
 800af58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af5c:	e7a8      	b.n	800aeb0 <_printf_i+0x150>
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	4632      	mov	r2, r6
 800af62:	4649      	mov	r1, r9
 800af64:	4640      	mov	r0, r8
 800af66:	47d0      	blx	sl
 800af68:	3001      	adds	r0, #1
 800af6a:	d0ab      	beq.n	800aec4 <_printf_i+0x164>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	079b      	lsls	r3, r3, #30
 800af70:	d413      	bmi.n	800af9a <_printf_i+0x23a>
 800af72:	68e0      	ldr	r0, [r4, #12]
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	4298      	cmp	r0, r3
 800af78:	bfb8      	it	lt
 800af7a:	4618      	movlt	r0, r3
 800af7c:	e7a4      	b.n	800aec8 <_printf_i+0x168>
 800af7e:	2301      	movs	r3, #1
 800af80:	4632      	mov	r2, r6
 800af82:	4649      	mov	r1, r9
 800af84:	4640      	mov	r0, r8
 800af86:	47d0      	blx	sl
 800af88:	3001      	adds	r0, #1
 800af8a:	d09b      	beq.n	800aec4 <_printf_i+0x164>
 800af8c:	3501      	adds	r5, #1
 800af8e:	68e3      	ldr	r3, [r4, #12]
 800af90:	9903      	ldr	r1, [sp, #12]
 800af92:	1a5b      	subs	r3, r3, r1
 800af94:	42ab      	cmp	r3, r5
 800af96:	dcf2      	bgt.n	800af7e <_printf_i+0x21e>
 800af98:	e7eb      	b.n	800af72 <_printf_i+0x212>
 800af9a:	2500      	movs	r5, #0
 800af9c:	f104 0619 	add.w	r6, r4, #25
 800afa0:	e7f5      	b.n	800af8e <_printf_i+0x22e>
 800afa2:	bf00      	nop
 800afa4:	0800d9a6 	.word	0x0800d9a6
 800afa8:	0800d9b7 	.word	0x0800d9b7

0800afac <siprintf>:
 800afac:	b40e      	push	{r1, r2, r3}
 800afae:	b500      	push	{lr}
 800afb0:	b09c      	sub	sp, #112	; 0x70
 800afb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afb6:	ab1d      	add	r3, sp, #116	; 0x74
 800afb8:	9002      	str	r0, [sp, #8]
 800afba:	9006      	str	r0, [sp, #24]
 800afbc:	9107      	str	r1, [sp, #28]
 800afbe:	9104      	str	r1, [sp, #16]
 800afc0:	4808      	ldr	r0, [pc, #32]	; (800afe4 <siprintf+0x38>)
 800afc2:	4909      	ldr	r1, [pc, #36]	; (800afe8 <siprintf+0x3c>)
 800afc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc8:	9105      	str	r1, [sp, #20]
 800afca:	a902      	add	r1, sp, #8
 800afcc:	6800      	ldr	r0, [r0, #0]
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	f001 fb58 	bl	800c684 <_svfiprintf_r>
 800afd4:	9b02      	ldr	r3, [sp, #8]
 800afd6:	2200      	movs	r2, #0
 800afd8:	701a      	strb	r2, [r3, #0]
 800afda:	b01c      	add	sp, #112	; 0x70
 800afdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800afe0:	b003      	add	sp, #12
 800afe2:	4770      	bx	lr
 800afe4:	20000024 	.word	0x20000024
 800afe8:	ffff0208 	.word	0xffff0208

0800afec <strcat>:
 800afec:	4602      	mov	r2, r0
 800afee:	b510      	push	{r4, lr}
 800aff0:	7814      	ldrb	r4, [r2, #0]
 800aff2:	4613      	mov	r3, r2
 800aff4:	3201      	adds	r2, #1
 800aff6:	2c00      	cmp	r4, #0
 800aff8:	d1fa      	bne.n	800aff0 <strcat+0x4>
 800affa:	3b01      	subs	r3, #1
 800affc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b000:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b004:	2a00      	cmp	r2, #0
 800b006:	d1f9      	bne.n	800affc <strcat+0x10>
 800b008:	bd10      	pop	{r4, pc}

0800b00a <quorem>:
 800b00a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00e:	6903      	ldr	r3, [r0, #16]
 800b010:	4607      	mov	r7, r0
 800b012:	690c      	ldr	r4, [r1, #16]
 800b014:	42a3      	cmp	r3, r4
 800b016:	f2c0 8085 	blt.w	800b124 <quorem+0x11a>
 800b01a:	3c01      	subs	r4, #1
 800b01c:	f100 0514 	add.w	r5, r0, #20
 800b020:	f101 0814 	add.w	r8, r1, #20
 800b024:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b028:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b02c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b030:	9301      	str	r3, [sp, #4]
 800b032:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b036:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b03a:	3301      	adds	r3, #1
 800b03c:	429a      	cmp	r2, r3
 800b03e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b042:	d333      	bcc.n	800b0ac <quorem+0xa2>
 800b044:	f04f 0e00 	mov.w	lr, #0
 800b048:	4640      	mov	r0, r8
 800b04a:	46ac      	mov	ip, r5
 800b04c:	46f2      	mov	sl, lr
 800b04e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b052:	b293      	uxth	r3, r2
 800b054:	4581      	cmp	r9, r0
 800b056:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b05a:	fb06 e303 	mla	r3, r6, r3, lr
 800b05e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b062:	b29b      	uxth	r3, r3
 800b064:	fb06 e202 	mla	r2, r6, r2, lr
 800b068:	ebaa 0303 	sub.w	r3, sl, r3
 800b06c:	f8dc a000 	ldr.w	sl, [ip]
 800b070:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b074:	fa1f fa8a 	uxth.w	sl, sl
 800b078:	4453      	add	r3, sl
 800b07a:	fa1f fa82 	uxth.w	sl, r2
 800b07e:	f8dc 2000 	ldr.w	r2, [ip]
 800b082:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b086:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b094:	f84c 3b04 	str.w	r3, [ip], #4
 800b098:	d2d9      	bcs.n	800b04e <quorem+0x44>
 800b09a:	f855 300b 	ldr.w	r3, [r5, fp]
 800b09e:	b92b      	cbnz	r3, 800b0ac <quorem+0xa2>
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	3b04      	subs	r3, #4
 800b0a4:	429d      	cmp	r5, r3
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	d330      	bcc.n	800b10c <quorem+0x102>
 800b0aa:	613c      	str	r4, [r7, #16]
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f001 f8cb 	bl	800c248 <__mcmp>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	db26      	blt.n	800b104 <quorem+0xfa>
 800b0b6:	3601      	adds	r6, #1
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f04f 0c00 	mov.w	ip, #0
 800b0be:	f858 1b04 	ldr.w	r1, [r8], #4
 800b0c2:	f8d0 e000 	ldr.w	lr, [r0]
 800b0c6:	b28b      	uxth	r3, r1
 800b0c8:	45c1      	cmp	r9, r8
 800b0ca:	fa1f f28e 	uxth.w	r2, lr
 800b0ce:	ebac 0303 	sub.w	r3, ip, r3
 800b0d2:	4413      	add	r3, r2
 800b0d4:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800b0d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0ea:	f840 3b04 	str.w	r3, [r0], #4
 800b0ee:	d2e6      	bcs.n	800b0be <quorem+0xb4>
 800b0f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0f8:	b922      	cbnz	r2, 800b104 <quorem+0xfa>
 800b0fa:	3b04      	subs	r3, #4
 800b0fc:	429d      	cmp	r5, r3
 800b0fe:	461a      	mov	r2, r3
 800b100:	d30a      	bcc.n	800b118 <quorem+0x10e>
 800b102:	613c      	str	r4, [r7, #16]
 800b104:	4630      	mov	r0, r6
 800b106:	b003      	add	sp, #12
 800b108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10c:	6812      	ldr	r2, [r2, #0]
 800b10e:	3b04      	subs	r3, #4
 800b110:	2a00      	cmp	r2, #0
 800b112:	d1ca      	bne.n	800b0aa <quorem+0xa0>
 800b114:	3c01      	subs	r4, #1
 800b116:	e7c5      	b.n	800b0a4 <quorem+0x9a>
 800b118:	6812      	ldr	r2, [r2, #0]
 800b11a:	3b04      	subs	r3, #4
 800b11c:	2a00      	cmp	r2, #0
 800b11e:	d1f0      	bne.n	800b102 <quorem+0xf8>
 800b120:	3c01      	subs	r4, #1
 800b122:	e7eb      	b.n	800b0fc <quorem+0xf2>
 800b124:	2000      	movs	r0, #0
 800b126:	e7ee      	b.n	800b106 <quorem+0xfc>

0800b128 <_dtoa_r>:
 800b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b12e:	4604      	mov	r4, r0
 800b130:	ed2d 8b02 	vpush	{d8}
 800b134:	b095      	sub	sp, #84	; 0x54
 800b136:	ec57 6b10 	vmov	r6, r7, d0
 800b13a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b13e:	9105      	str	r1, [sp, #20]
 800b140:	9209      	str	r2, [sp, #36]	; 0x24
 800b142:	930f      	str	r3, [sp, #60]	; 0x3c
 800b144:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b148:	b975      	cbnz	r5, 800b168 <_dtoa_r+0x40>
 800b14a:	2010      	movs	r0, #16
 800b14c:	f000 fdda 	bl	800bd04 <malloc>
 800b150:	4602      	mov	r2, r0
 800b152:	6260      	str	r0, [r4, #36]	; 0x24
 800b154:	b920      	cbnz	r0, 800b160 <_dtoa_r+0x38>
 800b156:	4bb2      	ldr	r3, [pc, #712]	; (800b420 <_dtoa_r+0x2f8>)
 800b158:	21ea      	movs	r1, #234	; 0xea
 800b15a:	48b2      	ldr	r0, [pc, #712]	; (800b424 <_dtoa_r+0x2fc>)
 800b15c:	f001 fba2 	bl	800c8a4 <__assert_func>
 800b160:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b164:	6005      	str	r5, [r0, #0]
 800b166:	60c5      	str	r5, [r0, #12]
 800b168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b16a:	6819      	ldr	r1, [r3, #0]
 800b16c:	b151      	cbz	r1, 800b184 <_dtoa_r+0x5c>
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	2301      	movs	r3, #1
 800b172:	4620      	mov	r0, r4
 800b174:	4093      	lsls	r3, r2
 800b176:	604a      	str	r2, [r1, #4]
 800b178:	608b      	str	r3, [r1, #8]
 800b17a:	f000 fe27 	bl	800bdcc <_Bfree>
 800b17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b180:	2200      	movs	r2, #0
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	1e3b      	subs	r3, r7, #0
 800b186:	bfb7      	itett	lt
 800b188:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b18c:	2300      	movge	r3, #0
 800b18e:	2201      	movlt	r2, #1
 800b190:	9303      	strlt	r3, [sp, #12]
 800b192:	bfa8      	it	ge
 800b194:	f8c8 3000 	strge.w	r3, [r8]
 800b198:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b19c:	4ba2      	ldr	r3, [pc, #648]	; (800b428 <_dtoa_r+0x300>)
 800b19e:	bfb8      	it	lt
 800b1a0:	f8c8 2000 	strlt.w	r2, [r8]
 800b1a4:	ea33 0309 	bics.w	r3, r3, r9
 800b1a8:	d11b      	bne.n	800b1e2 <_dtoa_r+0xba>
 800b1aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1b6:	4333      	orrs	r3, r6
 800b1b8:	f000 8577 	beq.w	800bcaa <_dtoa_r+0xb82>
 800b1bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1be:	b963      	cbnz	r3, 800b1da <_dtoa_r+0xb2>
 800b1c0:	4b9a      	ldr	r3, [pc, #616]	; (800b42c <_dtoa_r+0x304>)
 800b1c2:	e024      	b.n	800b20e <_dtoa_r+0xe6>
 800b1c4:	4b9a      	ldr	r3, [pc, #616]	; (800b430 <_dtoa_r+0x308>)
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1cc:	6013      	str	r3, [r2, #0]
 800b1ce:	9800      	ldr	r0, [sp, #0]
 800b1d0:	b015      	add	sp, #84	; 0x54
 800b1d2:	ecbd 8b02 	vpop	{d8}
 800b1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1da:	4b94      	ldr	r3, [pc, #592]	; (800b42c <_dtoa_r+0x304>)
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	3303      	adds	r3, #3
 800b1e0:	e7f3      	b.n	800b1ca <_dtoa_r+0xa2>
 800b1e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	ec51 0b17 	vmov	r0, r1, d7
 800b1ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b1f2:	f7f5 fc6d 	bl	8000ad0 <__aeabi_dcmpeq>
 800b1f6:	4680      	mov	r8, r0
 800b1f8:	b158      	cbz	r0, 800b212 <_dtoa_r+0xea>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1fe:	6013      	str	r3, [r2, #0]
 800b200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 854e 	beq.w	800bca4 <_dtoa_r+0xb7c>
 800b208:	488a      	ldr	r0, [pc, #552]	; (800b434 <_dtoa_r+0x30c>)
 800b20a:	6018      	str	r0, [r3, #0]
 800b20c:	1e43      	subs	r3, r0, #1
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	e7dd      	b.n	800b1ce <_dtoa_r+0xa6>
 800b212:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b216:	aa12      	add	r2, sp, #72	; 0x48
 800b218:	a913      	add	r1, sp, #76	; 0x4c
 800b21a:	4620      	mov	r0, r4
 800b21c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b220:	f001 f8be 	bl	800c3a0 <__d2b>
 800b224:	4683      	mov	fp, r0
 800b226:	2d00      	cmp	r5, #0
 800b228:	d07a      	beq.n	800b320 <_dtoa_r+0x1f8>
 800b22a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b22c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b230:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b238:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b23c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b240:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b244:	2200      	movs	r2, #0
 800b246:	4b7c      	ldr	r3, [pc, #496]	; (800b438 <_dtoa_r+0x310>)
 800b248:	4630      	mov	r0, r6
 800b24a:	4639      	mov	r1, r7
 800b24c:	f7f5 f820 	bl	8000290 <__aeabi_dsub>
 800b250:	a36d      	add	r3, pc, #436	; (adr r3, 800b408 <_dtoa_r+0x2e0>)
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f7f5 f9d3 	bl	8000600 <__aeabi_dmul>
 800b25a:	a36d      	add	r3, pc, #436	; (adr r3, 800b410 <_dtoa_r+0x2e8>)
 800b25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b260:	f7f5 f818 	bl	8000294 <__adddf3>
 800b264:	4606      	mov	r6, r0
 800b266:	460f      	mov	r7, r1
 800b268:	4628      	mov	r0, r5
 800b26a:	f7f5 f95f 	bl	800052c <__aeabi_i2d>
 800b26e:	a36a      	add	r3, pc, #424	; (adr r3, 800b418 <_dtoa_r+0x2f0>)
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	f7f5 f9c4 	bl	8000600 <__aeabi_dmul>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4630      	mov	r0, r6
 800b27e:	4639      	mov	r1, r7
 800b280:	f7f5 f808 	bl	8000294 <__adddf3>
 800b284:	4606      	mov	r6, r0
 800b286:	460f      	mov	r7, r1
 800b288:	f7f5 fc6a 	bl	8000b60 <__aeabi_d2iz>
 800b28c:	2200      	movs	r2, #0
 800b28e:	4682      	mov	sl, r0
 800b290:	2300      	movs	r3, #0
 800b292:	4630      	mov	r0, r6
 800b294:	4639      	mov	r1, r7
 800b296:	f7f5 fc25 	bl	8000ae4 <__aeabi_dcmplt>
 800b29a:	b148      	cbz	r0, 800b2b0 <_dtoa_r+0x188>
 800b29c:	4650      	mov	r0, sl
 800b29e:	f7f5 f945 	bl	800052c <__aeabi_i2d>
 800b2a2:	4632      	mov	r2, r6
 800b2a4:	463b      	mov	r3, r7
 800b2a6:	f7f5 fc13 	bl	8000ad0 <__aeabi_dcmpeq>
 800b2aa:	b908      	cbnz	r0, 800b2b0 <_dtoa_r+0x188>
 800b2ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2b0:	f1ba 0f16 	cmp.w	sl, #22
 800b2b4:	d853      	bhi.n	800b35e <_dtoa_r+0x236>
 800b2b6:	4b61      	ldr	r3, [pc, #388]	; (800b43c <_dtoa_r+0x314>)
 800b2b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b2bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f7f5 fc0e 	bl	8000ae4 <__aeabi_dcmplt>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d04a      	beq.n	800b362 <_dtoa_r+0x23a>
 800b2cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	930e      	str	r3, [sp, #56]	; 0x38
 800b2d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2d6:	1b5d      	subs	r5, r3, r5
 800b2d8:	1e6b      	subs	r3, r5, #1
 800b2da:	9304      	str	r3, [sp, #16]
 800b2dc:	bf45      	ittet	mi
 800b2de:	2300      	movmi	r3, #0
 800b2e0:	f1c5 0801 	rsbmi	r8, r5, #1
 800b2e4:	f04f 0800 	movpl.w	r8, #0
 800b2e8:	9304      	strmi	r3, [sp, #16]
 800b2ea:	f1ba 0f00 	cmp.w	sl, #0
 800b2ee:	db3a      	blt.n	800b366 <_dtoa_r+0x23e>
 800b2f0:	9b04      	ldr	r3, [sp, #16]
 800b2f2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b2f6:	4453      	add	r3, sl
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	9306      	str	r3, [sp, #24]
 800b2fe:	9b05      	ldr	r3, [sp, #20]
 800b300:	2b09      	cmp	r3, #9
 800b302:	d868      	bhi.n	800b3d6 <_dtoa_r+0x2ae>
 800b304:	2b05      	cmp	r3, #5
 800b306:	bfc5      	ittet	gt
 800b308:	3b04      	subgt	r3, #4
 800b30a:	2500      	movgt	r5, #0
 800b30c:	2501      	movle	r5, #1
 800b30e:	9305      	strgt	r3, [sp, #20]
 800b310:	9b05      	ldr	r3, [sp, #20]
 800b312:	3b02      	subs	r3, #2
 800b314:	2b03      	cmp	r3, #3
 800b316:	d86a      	bhi.n	800b3ee <_dtoa_r+0x2c6>
 800b318:	e8df f003 	tbb	[pc, r3]
 800b31c:	5b4d4f2d 	.word	0x5b4d4f2d
 800b320:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b324:	441d      	add	r5, r3
 800b326:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b32a:	2b20      	cmp	r3, #32
 800b32c:	bfc6      	itte	gt
 800b32e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b332:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b336:	f1c3 0320 	rsble	r3, r3, #32
 800b33a:	f105 35ff 	add.w	r5, r5, #4294967295
 800b33e:	bfc5      	ittet	gt
 800b340:	fa09 f303 	lslgt.w	r3, r9, r3
 800b344:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b348:	fa06 f003 	lslle.w	r0, r6, r3
 800b34c:	4318      	orrgt	r0, r3
 800b34e:	f7f5 f8dd 	bl	800050c <__aeabi_ui2d>
 800b352:	2301      	movs	r3, #1
 800b354:	4606      	mov	r6, r0
 800b356:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b35a:	9310      	str	r3, [sp, #64]	; 0x40
 800b35c:	e772      	b.n	800b244 <_dtoa_r+0x11c>
 800b35e:	2301      	movs	r3, #1
 800b360:	e7b7      	b.n	800b2d2 <_dtoa_r+0x1aa>
 800b362:	900e      	str	r0, [sp, #56]	; 0x38
 800b364:	e7b6      	b.n	800b2d4 <_dtoa_r+0x1ac>
 800b366:	f1ca 0300 	rsb	r3, sl, #0
 800b36a:	eba8 080a 	sub.w	r8, r8, sl
 800b36e:	9306      	str	r3, [sp, #24]
 800b370:	2300      	movs	r3, #0
 800b372:	930d      	str	r3, [sp, #52]	; 0x34
 800b374:	e7c3      	b.n	800b2fe <_dtoa_r+0x1d6>
 800b376:	2300      	movs	r3, #0
 800b378:	9308      	str	r3, [sp, #32]
 800b37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	dc39      	bgt.n	800b3f4 <_dtoa_r+0x2cc>
 800b380:	f04f 0901 	mov.w	r9, #1
 800b384:	464b      	mov	r3, r9
 800b386:	f8cd 9004 	str.w	r9, [sp, #4]
 800b38a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b38e:	2200      	movs	r2, #0
 800b390:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b392:	6042      	str	r2, [r0, #4]
 800b394:	2204      	movs	r2, #4
 800b396:	f102 0614 	add.w	r6, r2, #20
 800b39a:	6841      	ldr	r1, [r0, #4]
 800b39c:	429e      	cmp	r6, r3
 800b39e:	d92f      	bls.n	800b400 <_dtoa_r+0x2d8>
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 fcd3 	bl	800bd4c <_Balloc>
 800b3a6:	9000      	str	r0, [sp, #0]
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d14b      	bne.n	800b444 <_dtoa_r+0x31c>
 800b3ac:	4b24      	ldr	r3, [pc, #144]	; (800b440 <_dtoa_r+0x318>)
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b3b4:	e6d1      	b.n	800b15a <_dtoa_r+0x32>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e7de      	b.n	800b378 <_dtoa_r+0x250>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	9308      	str	r3, [sp, #32]
 800b3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c0:	eb0a 0903 	add.w	r9, sl, r3
 800b3c4:	f109 0301 	add.w	r3, r9, #1
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	9301      	str	r3, [sp, #4]
 800b3cc:	bfb8      	it	lt
 800b3ce:	2301      	movlt	r3, #1
 800b3d0:	e7dd      	b.n	800b38e <_dtoa_r+0x266>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e7f2      	b.n	800b3bc <_dtoa_r+0x294>
 800b3d6:	2501      	movs	r5, #1
 800b3d8:	2300      	movs	r3, #0
 800b3da:	9508      	str	r5, [sp, #32]
 800b3dc:	9305      	str	r3, [sp, #20]
 800b3de:	f04f 39ff 	mov.w	r9, #4294967295
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	2312      	movs	r3, #18
 800b3e6:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ec:	e7cf      	b.n	800b38e <_dtoa_r+0x266>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	9308      	str	r3, [sp, #32]
 800b3f2:	e7f4      	b.n	800b3de <_dtoa_r+0x2b6>
 800b3f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b3f8:	464b      	mov	r3, r9
 800b3fa:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3fe:	e7c6      	b.n	800b38e <_dtoa_r+0x266>
 800b400:	3101      	adds	r1, #1
 800b402:	0052      	lsls	r2, r2, #1
 800b404:	6041      	str	r1, [r0, #4]
 800b406:	e7c6      	b.n	800b396 <_dtoa_r+0x26e>
 800b408:	636f4361 	.word	0x636f4361
 800b40c:	3fd287a7 	.word	0x3fd287a7
 800b410:	8b60c8b3 	.word	0x8b60c8b3
 800b414:	3fc68a28 	.word	0x3fc68a28
 800b418:	509f79fb 	.word	0x509f79fb
 800b41c:	3fd34413 	.word	0x3fd34413
 800b420:	0800d9d5 	.word	0x0800d9d5
 800b424:	0800d9ec 	.word	0x0800d9ec
 800b428:	7ff00000 	.word	0x7ff00000
 800b42c:	0800d9d1 	.word	0x0800d9d1
 800b430:	0800d9c8 	.word	0x0800d9c8
 800b434:	0800d9a5 	.word	0x0800d9a5
 800b438:	3ff80000 	.word	0x3ff80000
 800b43c:	0800dae8 	.word	0x0800dae8
 800b440:	0800da4b 	.word	0x0800da4b
 800b444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b446:	9a00      	ldr	r2, [sp, #0]
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	9b01      	ldr	r3, [sp, #4]
 800b44c:	2b0e      	cmp	r3, #14
 800b44e:	f200 80ad 	bhi.w	800b5ac <_dtoa_r+0x484>
 800b452:	2d00      	cmp	r5, #0
 800b454:	f000 80aa 	beq.w	800b5ac <_dtoa_r+0x484>
 800b458:	f1ba 0f00 	cmp.w	sl, #0
 800b45c:	dd36      	ble.n	800b4cc <_dtoa_r+0x3a4>
 800b45e:	f00a 030f 	and.w	r3, sl, #15
 800b462:	4ac1      	ldr	r2, [pc, #772]	; (800b768 <_dtoa_r+0x640>)
 800b464:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b468:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b46c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b470:	ed93 7b00 	vldr	d7, [r3]
 800b474:	eeb0 8a47 	vmov.f32	s16, s14
 800b478:	eef0 8a67 	vmov.f32	s17, s15
 800b47c:	d016      	beq.n	800b4ac <_dtoa_r+0x384>
 800b47e:	4bbb      	ldr	r3, [pc, #748]	; (800b76c <_dtoa_r+0x644>)
 800b480:	f007 070f 	and.w	r7, r7, #15
 800b484:	2503      	movs	r5, #3
 800b486:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b48a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b48e:	f7f5 f9e1 	bl	8000854 <__aeabi_ddiv>
 800b492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b496:	4eb5      	ldr	r6, [pc, #724]	; (800b76c <_dtoa_r+0x644>)
 800b498:	b957      	cbnz	r7, 800b4b0 <_dtoa_r+0x388>
 800b49a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b49e:	ec53 2b18 	vmov	r2, r3, d8
 800b4a2:	f7f5 f9d7 	bl	8000854 <__aeabi_ddiv>
 800b4a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4aa:	e029      	b.n	800b500 <_dtoa_r+0x3d8>
 800b4ac:	2502      	movs	r5, #2
 800b4ae:	e7f2      	b.n	800b496 <_dtoa_r+0x36e>
 800b4b0:	07f9      	lsls	r1, r7, #31
 800b4b2:	d508      	bpl.n	800b4c6 <_dtoa_r+0x39e>
 800b4b4:	3501      	adds	r5, #1
 800b4b6:	ec51 0b18 	vmov	r0, r1, d8
 800b4ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4be:	f7f5 f89f 	bl	8000600 <__aeabi_dmul>
 800b4c2:	ec41 0b18 	vmov	d8, r0, r1
 800b4c6:	107f      	asrs	r7, r7, #1
 800b4c8:	3608      	adds	r6, #8
 800b4ca:	e7e5      	b.n	800b498 <_dtoa_r+0x370>
 800b4cc:	f000 80a6 	beq.w	800b61c <_dtoa_r+0x4f4>
 800b4d0:	f1ca 0600 	rsb	r6, sl, #0
 800b4d4:	4ba4      	ldr	r3, [pc, #656]	; (800b768 <_dtoa_r+0x640>)
 800b4d6:	4fa5      	ldr	r7, [pc, #660]	; (800b76c <_dtoa_r+0x644>)
 800b4d8:	2502      	movs	r5, #2
 800b4da:	f006 020f 	and.w	r2, r6, #15
 800b4de:	1136      	asrs	r6, r6, #4
 800b4e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	f7f5 f888 	bl	8000600 <__aeabi_dmul>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4f6:	2e00      	cmp	r6, #0
 800b4f8:	f040 8085 	bne.w	800b606 <_dtoa_r+0x4de>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1d2      	bne.n	800b4a6 <_dtoa_r+0x37e>
 800b500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 808c 	beq.w	800b620 <_dtoa_r+0x4f8>
 800b508:	2200      	movs	r2, #0
 800b50a:	4b99      	ldr	r3, [pc, #612]	; (800b770 <_dtoa_r+0x648>)
 800b50c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 fae6 	bl	8000ae4 <__aeabi_dcmplt>
 800b518:	2800      	cmp	r0, #0
 800b51a:	f000 8081 	beq.w	800b620 <_dtoa_r+0x4f8>
 800b51e:	9b01      	ldr	r3, [sp, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d07d      	beq.n	800b620 <_dtoa_r+0x4f8>
 800b524:	f1b9 0f00 	cmp.w	r9, #0
 800b528:	dd3c      	ble.n	800b5a4 <_dtoa_r+0x47c>
 800b52a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b52e:	3501      	adds	r5, #1
 800b530:	2200      	movs	r2, #0
 800b532:	4630      	mov	r0, r6
 800b534:	9307      	str	r3, [sp, #28]
 800b536:	4639      	mov	r1, r7
 800b538:	4b8e      	ldr	r3, [pc, #568]	; (800b774 <_dtoa_r+0x64c>)
 800b53a:	f7f5 f861 	bl	8000600 <__aeabi_dmul>
 800b53e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b546:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b54a:	4628      	mov	r0, r5
 800b54c:	f7f4 ffee 	bl	800052c <__aeabi_i2d>
 800b550:	4632      	mov	r2, r6
 800b552:	463b      	mov	r3, r7
 800b554:	f7f5 f854 	bl	8000600 <__aeabi_dmul>
 800b558:	4b87      	ldr	r3, [pc, #540]	; (800b778 <_dtoa_r+0x650>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	f7f4 fe9a 	bl	8000294 <__adddf3>
 800b560:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b568:	9303      	str	r3, [sp, #12]
 800b56a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d15c      	bne.n	800b62a <_dtoa_r+0x502>
 800b570:	2200      	movs	r2, #0
 800b572:	4b82      	ldr	r3, [pc, #520]	; (800b77c <_dtoa_r+0x654>)
 800b574:	4630      	mov	r0, r6
 800b576:	4639      	mov	r1, r7
 800b578:	f7f4 fe8a 	bl	8000290 <__aeabi_dsub>
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b584:	f7f5 facc 	bl	8000b20 <__aeabi_dcmpgt>
 800b588:	2800      	cmp	r0, #0
 800b58a:	f040 8294 	bne.w	800bab6 <_dtoa_r+0x98e>
 800b58e:	4630      	mov	r0, r6
 800b590:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b598:	4639      	mov	r1, r7
 800b59a:	f7f5 faa3 	bl	8000ae4 <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f040 8286 	bne.w	800bab0 <_dtoa_r+0x988>
 800b5a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b5a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f2c0 8156 	blt.w	800b860 <_dtoa_r+0x738>
 800b5b4:	f1ba 0f0e 	cmp.w	sl, #14
 800b5b8:	f300 8152 	bgt.w	800b860 <_dtoa_r+0x738>
 800b5bc:	4b6a      	ldr	r3, [pc, #424]	; (800b768 <_dtoa_r+0x640>)
 800b5be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b5c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f280 80e1 	bge.w	800b790 <_dtoa_r+0x668>
 800b5ce:	9b01      	ldr	r3, [sp, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f300 80dd 	bgt.w	800b790 <_dtoa_r+0x668>
 800b5d6:	f040 826b 	bne.w	800bab0 <_dtoa_r+0x988>
 800b5da:	2200      	movs	r2, #0
 800b5dc:	4b67      	ldr	r3, [pc, #412]	; (800b77c <_dtoa_r+0x654>)
 800b5de:	4640      	mov	r0, r8
 800b5e0:	4649      	mov	r1, r9
 800b5e2:	f7f5 f80d 	bl	8000600 <__aeabi_dmul>
 800b5e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5ea:	f7f5 fa8f 	bl	8000b0c <__aeabi_dcmpge>
 800b5ee:	9e01      	ldr	r6, [sp, #4]
 800b5f0:	4637      	mov	r7, r6
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f040 8241 	bne.w	800ba7a <_dtoa_r+0x952>
 800b5f8:	9d00      	ldr	r5, [sp, #0]
 800b5fa:	2331      	movs	r3, #49	; 0x31
 800b5fc:	f10a 0a01 	add.w	sl, sl, #1
 800b600:	f805 3b01 	strb.w	r3, [r5], #1
 800b604:	e23d      	b.n	800ba82 <_dtoa_r+0x95a>
 800b606:	07f2      	lsls	r2, r6, #31
 800b608:	d505      	bpl.n	800b616 <_dtoa_r+0x4ee>
 800b60a:	3501      	adds	r5, #1
 800b60c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b610:	f7f4 fff6 	bl	8000600 <__aeabi_dmul>
 800b614:	2301      	movs	r3, #1
 800b616:	1076      	asrs	r6, r6, #1
 800b618:	3708      	adds	r7, #8
 800b61a:	e76c      	b.n	800b4f6 <_dtoa_r+0x3ce>
 800b61c:	2502      	movs	r5, #2
 800b61e:	e76f      	b.n	800b500 <_dtoa_r+0x3d8>
 800b620:	9b01      	ldr	r3, [sp, #4]
 800b622:	f8cd a01c 	str.w	sl, [sp, #28]
 800b626:	930c      	str	r3, [sp, #48]	; 0x30
 800b628:	e78d      	b.n	800b546 <_dtoa_r+0x41e>
 800b62a:	9900      	ldr	r1, [sp, #0]
 800b62c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b62e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b630:	4401      	add	r1, r0
 800b632:	4b4d      	ldr	r3, [pc, #308]	; (800b768 <_dtoa_r+0x640>)
 800b634:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b63c:	9102      	str	r1, [sp, #8]
 800b63e:	9908      	ldr	r1, [sp, #32]
 800b640:	eeb0 8a47 	vmov.f32	s16, s14
 800b644:	eef0 8a67 	vmov.f32	s17, s15
 800b648:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b64c:	2900      	cmp	r1, #0
 800b64e:	d045      	beq.n	800b6dc <_dtoa_r+0x5b4>
 800b650:	2000      	movs	r0, #0
 800b652:	494b      	ldr	r1, [pc, #300]	; (800b780 <_dtoa_r+0x658>)
 800b654:	f7f5 f8fe 	bl	8000854 <__aeabi_ddiv>
 800b658:	ec53 2b18 	vmov	r2, r3, d8
 800b65c:	f7f4 fe18 	bl	8000290 <__aeabi_dsub>
 800b660:	9d00      	ldr	r5, [sp, #0]
 800b662:	ec41 0b18 	vmov	d8, r0, r1
 800b666:	4639      	mov	r1, r7
 800b668:	4630      	mov	r0, r6
 800b66a:	f7f5 fa79 	bl	8000b60 <__aeabi_d2iz>
 800b66e:	900c      	str	r0, [sp, #48]	; 0x30
 800b670:	f7f4 ff5c 	bl	800052c <__aeabi_i2d>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	4630      	mov	r0, r6
 800b67a:	4639      	mov	r1, r7
 800b67c:	f7f4 fe08 	bl	8000290 <__aeabi_dsub>
 800b680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b682:	4606      	mov	r6, r0
 800b684:	460f      	mov	r7, r1
 800b686:	3330      	adds	r3, #48	; 0x30
 800b688:	f805 3b01 	strb.w	r3, [r5], #1
 800b68c:	ec53 2b18 	vmov	r2, r3, d8
 800b690:	f7f5 fa28 	bl	8000ae4 <__aeabi_dcmplt>
 800b694:	2800      	cmp	r0, #0
 800b696:	d164      	bne.n	800b762 <_dtoa_r+0x63a>
 800b698:	4632      	mov	r2, r6
 800b69a:	463b      	mov	r3, r7
 800b69c:	2000      	movs	r0, #0
 800b69e:	4934      	ldr	r1, [pc, #208]	; (800b770 <_dtoa_r+0x648>)
 800b6a0:	f7f4 fdf6 	bl	8000290 <__aeabi_dsub>
 800b6a4:	ec53 2b18 	vmov	r2, r3, d8
 800b6a8:	f7f5 fa1c 	bl	8000ae4 <__aeabi_dcmplt>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	f040 80b7 	bne.w	800b820 <_dtoa_r+0x6f8>
 800b6b2:	9b02      	ldr	r3, [sp, #8]
 800b6b4:	429d      	cmp	r5, r3
 800b6b6:	f43f af75 	beq.w	800b5a4 <_dtoa_r+0x47c>
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	4b2d      	ldr	r3, [pc, #180]	; (800b774 <_dtoa_r+0x64c>)
 800b6be:	ec51 0b18 	vmov	r0, r1, d8
 800b6c2:	f7f4 ff9d 	bl	8000600 <__aeabi_dmul>
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4b2a      	ldr	r3, [pc, #168]	; (800b774 <_dtoa_r+0x64c>)
 800b6ca:	ec41 0b18 	vmov	d8, r0, r1
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	f7f4 ff95 	bl	8000600 <__aeabi_dmul>
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	460f      	mov	r7, r1
 800b6da:	e7c4      	b.n	800b666 <_dtoa_r+0x53e>
 800b6dc:	ec51 0b17 	vmov	r0, r1, d7
 800b6e0:	f7f4 ff8e 	bl	8000600 <__aeabi_dmul>
 800b6e4:	9b02      	ldr	r3, [sp, #8]
 800b6e6:	9d00      	ldr	r5, [sp, #0]
 800b6e8:	930c      	str	r3, [sp, #48]	; 0x30
 800b6ea:	ec41 0b18 	vmov	d8, r0, r1
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7f5 fa35 	bl	8000b60 <__aeabi_d2iz>
 800b6f6:	9011      	str	r0, [sp, #68]	; 0x44
 800b6f8:	f7f4 ff18 	bl	800052c <__aeabi_i2d>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	4630      	mov	r0, r6
 800b702:	4639      	mov	r1, r7
 800b704:	f7f4 fdc4 	bl	8000290 <__aeabi_dsub>
 800b708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b70a:	4606      	mov	r6, r0
 800b70c:	460f      	mov	r7, r1
 800b70e:	3330      	adds	r3, #48	; 0x30
 800b710:	2200      	movs	r2, #0
 800b712:	f805 3b01 	strb.w	r3, [r5], #1
 800b716:	9b02      	ldr	r3, [sp, #8]
 800b718:	429d      	cmp	r5, r3
 800b71a:	d133      	bne.n	800b784 <_dtoa_r+0x65c>
 800b71c:	4b18      	ldr	r3, [pc, #96]	; (800b780 <_dtoa_r+0x658>)
 800b71e:	ec51 0b18 	vmov	r0, r1, d8
 800b722:	f7f4 fdb7 	bl	8000294 <__adddf3>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	4630      	mov	r0, r6
 800b72c:	4639      	mov	r1, r7
 800b72e:	f7f5 f9f7 	bl	8000b20 <__aeabi_dcmpgt>
 800b732:	2800      	cmp	r0, #0
 800b734:	d174      	bne.n	800b820 <_dtoa_r+0x6f8>
 800b736:	2000      	movs	r0, #0
 800b738:	4911      	ldr	r1, [pc, #68]	; (800b780 <_dtoa_r+0x658>)
 800b73a:	ec53 2b18 	vmov	r2, r3, d8
 800b73e:	f7f4 fda7 	bl	8000290 <__aeabi_dsub>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	f7f5 f9cb 	bl	8000ae4 <__aeabi_dcmplt>
 800b74e:	2800      	cmp	r0, #0
 800b750:	f43f af28 	beq.w	800b5a4 <_dtoa_r+0x47c>
 800b754:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b756:	1e6b      	subs	r3, r5, #1
 800b758:	930c      	str	r3, [sp, #48]	; 0x30
 800b75a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b75e:	2b30      	cmp	r3, #48	; 0x30
 800b760:	d0f8      	beq.n	800b754 <_dtoa_r+0x62c>
 800b762:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b766:	e049      	b.n	800b7fc <_dtoa_r+0x6d4>
 800b768:	0800dae8 	.word	0x0800dae8
 800b76c:	0800dac0 	.word	0x0800dac0
 800b770:	3ff00000 	.word	0x3ff00000
 800b774:	40240000 	.word	0x40240000
 800b778:	401c0000 	.word	0x401c0000
 800b77c:	40140000 	.word	0x40140000
 800b780:	3fe00000 	.word	0x3fe00000
 800b784:	4baf      	ldr	r3, [pc, #700]	; (800ba44 <_dtoa_r+0x91c>)
 800b786:	f7f4 ff3b 	bl	8000600 <__aeabi_dmul>
 800b78a:	4606      	mov	r6, r0
 800b78c:	460f      	mov	r7, r1
 800b78e:	e7ae      	b.n	800b6ee <_dtoa_r+0x5c6>
 800b790:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b794:	9d00      	ldr	r5, [sp, #0]
 800b796:	4642      	mov	r2, r8
 800b798:	464b      	mov	r3, r9
 800b79a:	4630      	mov	r0, r6
 800b79c:	4639      	mov	r1, r7
 800b79e:	f7f5 f859 	bl	8000854 <__aeabi_ddiv>
 800b7a2:	f7f5 f9dd 	bl	8000b60 <__aeabi_d2iz>
 800b7a6:	9002      	str	r0, [sp, #8]
 800b7a8:	f7f4 fec0 	bl	800052c <__aeabi_i2d>
 800b7ac:	4642      	mov	r2, r8
 800b7ae:	464b      	mov	r3, r9
 800b7b0:	f7f4 ff26 	bl	8000600 <__aeabi_dmul>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	f7f4 fd68 	bl	8000290 <__aeabi_dsub>
 800b7c0:	9e02      	ldr	r6, [sp, #8]
 800b7c2:	9f01      	ldr	r7, [sp, #4]
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	3630      	adds	r6, #48	; 0x30
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	f805 6b01 	strb.w	r6, [r5], #1
 800b7ce:	9e00      	ldr	r6, [sp, #0]
 800b7d0:	1bae      	subs	r6, r5, r6
 800b7d2:	42b7      	cmp	r7, r6
 800b7d4:	d137      	bne.n	800b846 <_dtoa_r+0x71e>
 800b7d6:	f7f4 fd5d 	bl	8000294 <__adddf3>
 800b7da:	4642      	mov	r2, r8
 800b7dc:	464b      	mov	r3, r9
 800b7de:	4606      	mov	r6, r0
 800b7e0:	460f      	mov	r7, r1
 800b7e2:	f7f5 f99d 	bl	8000b20 <__aeabi_dcmpgt>
 800b7e6:	b9c8      	cbnz	r0, 800b81c <_dtoa_r+0x6f4>
 800b7e8:	4642      	mov	r2, r8
 800b7ea:	464b      	mov	r3, r9
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	4639      	mov	r1, r7
 800b7f0:	f7f5 f96e 	bl	8000ad0 <__aeabi_dcmpeq>
 800b7f4:	b110      	cbz	r0, 800b7fc <_dtoa_r+0x6d4>
 800b7f6:	9b02      	ldr	r3, [sp, #8]
 800b7f8:	07d9      	lsls	r1, r3, #31
 800b7fa:	d40f      	bmi.n	800b81c <_dtoa_r+0x6f4>
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	4659      	mov	r1, fp
 800b800:	f000 fae4 	bl	800bdcc <_Bfree>
 800b804:	2300      	movs	r3, #0
 800b806:	f10a 0001 	add.w	r0, sl, #1
 800b80a:	702b      	strb	r3, [r5, #0]
 800b80c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b80e:	6018      	str	r0, [r3, #0]
 800b810:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b812:	2b00      	cmp	r3, #0
 800b814:	f43f acdb 	beq.w	800b1ce <_dtoa_r+0xa6>
 800b818:	601d      	str	r5, [r3, #0]
 800b81a:	e4d8      	b.n	800b1ce <_dtoa_r+0xa6>
 800b81c:	f8cd a01c 	str.w	sl, [sp, #28]
 800b820:	462b      	mov	r3, r5
 800b822:	461d      	mov	r5, r3
 800b824:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b828:	2a39      	cmp	r2, #57	; 0x39
 800b82a:	d108      	bne.n	800b83e <_dtoa_r+0x716>
 800b82c:	9a00      	ldr	r2, [sp, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d1f7      	bne.n	800b822 <_dtoa_r+0x6fa>
 800b832:	9a07      	ldr	r2, [sp, #28]
 800b834:	9900      	ldr	r1, [sp, #0]
 800b836:	3201      	adds	r2, #1
 800b838:	9207      	str	r2, [sp, #28]
 800b83a:	2230      	movs	r2, #48	; 0x30
 800b83c:	700a      	strb	r2, [r1, #0]
 800b83e:	781a      	ldrb	r2, [r3, #0]
 800b840:	3201      	adds	r2, #1
 800b842:	701a      	strb	r2, [r3, #0]
 800b844:	e78d      	b.n	800b762 <_dtoa_r+0x63a>
 800b846:	2200      	movs	r2, #0
 800b848:	4b7e      	ldr	r3, [pc, #504]	; (800ba44 <_dtoa_r+0x91c>)
 800b84a:	f7f4 fed9 	bl	8000600 <__aeabi_dmul>
 800b84e:	2200      	movs	r2, #0
 800b850:	2300      	movs	r3, #0
 800b852:	4606      	mov	r6, r0
 800b854:	460f      	mov	r7, r1
 800b856:	f7f5 f93b 	bl	8000ad0 <__aeabi_dcmpeq>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d09b      	beq.n	800b796 <_dtoa_r+0x66e>
 800b85e:	e7cd      	b.n	800b7fc <_dtoa_r+0x6d4>
 800b860:	9a08      	ldr	r2, [sp, #32]
 800b862:	2a00      	cmp	r2, #0
 800b864:	f000 80c3 	beq.w	800b9ee <_dtoa_r+0x8c6>
 800b868:	9a05      	ldr	r2, [sp, #20]
 800b86a:	2a01      	cmp	r2, #1
 800b86c:	f300 80a8 	bgt.w	800b9c0 <_dtoa_r+0x898>
 800b870:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b872:	2a00      	cmp	r2, #0
 800b874:	f000 80a0 	beq.w	800b9b8 <_dtoa_r+0x890>
 800b878:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b87c:	9e06      	ldr	r6, [sp, #24]
 800b87e:	4645      	mov	r5, r8
 800b880:	9a04      	ldr	r2, [sp, #16]
 800b882:	2101      	movs	r1, #1
 800b884:	4620      	mov	r0, r4
 800b886:	4498      	add	r8, r3
 800b888:	441a      	add	r2, r3
 800b88a:	9204      	str	r2, [sp, #16]
 800b88c:	f000 fb5a 	bl	800bf44 <__i2b>
 800b890:	4607      	mov	r7, r0
 800b892:	2d00      	cmp	r5, #0
 800b894:	dd0b      	ble.n	800b8ae <_dtoa_r+0x786>
 800b896:	9b04      	ldr	r3, [sp, #16]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dd08      	ble.n	800b8ae <_dtoa_r+0x786>
 800b89c:	42ab      	cmp	r3, r5
 800b89e:	9a04      	ldr	r2, [sp, #16]
 800b8a0:	bfa8      	it	ge
 800b8a2:	462b      	movge	r3, r5
 800b8a4:	eba8 0803 	sub.w	r8, r8, r3
 800b8a8:	1aed      	subs	r5, r5, r3
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	9304      	str	r3, [sp, #16]
 800b8ae:	9b06      	ldr	r3, [sp, #24]
 800b8b0:	b1fb      	cbz	r3, 800b8f2 <_dtoa_r+0x7ca>
 800b8b2:	9b08      	ldr	r3, [sp, #32]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f000 809e 	beq.w	800b9f6 <_dtoa_r+0x8ce>
 800b8ba:	2e00      	cmp	r6, #0
 800b8bc:	dd11      	ble.n	800b8e2 <_dtoa_r+0x7ba>
 800b8be:	4639      	mov	r1, r7
 800b8c0:	4632      	mov	r2, r6
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f000 fbfa 	bl	800c0bc <__pow5mult>
 800b8c8:	465a      	mov	r2, fp
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 fb4e 	bl	800bf70 <__multiply>
 800b8d4:	4659      	mov	r1, fp
 800b8d6:	9007      	str	r0, [sp, #28]
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f000 fa77 	bl	800bdcc <_Bfree>
 800b8de:	9b07      	ldr	r3, [sp, #28]
 800b8e0:	469b      	mov	fp, r3
 800b8e2:	9b06      	ldr	r3, [sp, #24]
 800b8e4:	1b9a      	subs	r2, r3, r6
 800b8e6:	d004      	beq.n	800b8f2 <_dtoa_r+0x7ca>
 800b8e8:	4659      	mov	r1, fp
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 fbe6 	bl	800c0bc <__pow5mult>
 800b8f0:	4683      	mov	fp, r0
 800b8f2:	2101      	movs	r1, #1
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f000 fb25 	bl	800bf44 <__i2b>
 800b8fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	dd7b      	ble.n	800b9fa <_dtoa_r+0x8d2>
 800b902:	461a      	mov	r2, r3
 800b904:	4601      	mov	r1, r0
 800b906:	4620      	mov	r0, r4
 800b908:	f000 fbd8 	bl	800c0bc <__pow5mult>
 800b90c:	9b05      	ldr	r3, [sp, #20]
 800b90e:	4606      	mov	r6, r0
 800b910:	2b01      	cmp	r3, #1
 800b912:	dd75      	ble.n	800ba00 <_dtoa_r+0x8d8>
 800b914:	2300      	movs	r3, #0
 800b916:	9306      	str	r3, [sp, #24]
 800b918:	6933      	ldr	r3, [r6, #16]
 800b91a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b91e:	6918      	ldr	r0, [r3, #16]
 800b920:	f000 fac0 	bl	800bea4 <__hi0bits>
 800b924:	f1c0 0020 	rsb	r0, r0, #32
 800b928:	9b04      	ldr	r3, [sp, #16]
 800b92a:	4418      	add	r0, r3
 800b92c:	f010 001f 	ands.w	r0, r0, #31
 800b930:	f000 8085 	beq.w	800ba3e <_dtoa_r+0x916>
 800b934:	f1c0 0320 	rsb	r3, r0, #32
 800b938:	2b04      	cmp	r3, #4
 800b93a:	dd7e      	ble.n	800ba3a <_dtoa_r+0x912>
 800b93c:	f1c0 001c 	rsb	r0, r0, #28
 800b940:	9b04      	ldr	r3, [sp, #16]
 800b942:	4480      	add	r8, r0
 800b944:	4405      	add	r5, r0
 800b946:	4403      	add	r3, r0
 800b948:	9304      	str	r3, [sp, #16]
 800b94a:	f1b8 0f00 	cmp.w	r8, #0
 800b94e:	dd05      	ble.n	800b95c <_dtoa_r+0x834>
 800b950:	4659      	mov	r1, fp
 800b952:	4642      	mov	r2, r8
 800b954:	4620      	mov	r0, r4
 800b956:	f000 fc0b 	bl	800c170 <__lshift>
 800b95a:	4683      	mov	fp, r0
 800b95c:	9b04      	ldr	r3, [sp, #16]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	dd05      	ble.n	800b96e <_dtoa_r+0x846>
 800b962:	4631      	mov	r1, r6
 800b964:	461a      	mov	r2, r3
 800b966:	4620      	mov	r0, r4
 800b968:	f000 fc02 	bl	800c170 <__lshift>
 800b96c:	4606      	mov	r6, r0
 800b96e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b970:	2b00      	cmp	r3, #0
 800b972:	d069      	beq.n	800ba48 <_dtoa_r+0x920>
 800b974:	4631      	mov	r1, r6
 800b976:	4658      	mov	r0, fp
 800b978:	f000 fc66 	bl	800c248 <__mcmp>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	da63      	bge.n	800ba48 <_dtoa_r+0x920>
 800b980:	2300      	movs	r3, #0
 800b982:	4659      	mov	r1, fp
 800b984:	220a      	movs	r2, #10
 800b986:	4620      	mov	r0, r4
 800b988:	f000 fa42 	bl	800be10 <__multadd>
 800b98c:	9b08      	ldr	r3, [sp, #32]
 800b98e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b992:	4683      	mov	fp, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 818f 	beq.w	800bcb8 <_dtoa_r+0xb90>
 800b99a:	4639      	mov	r1, r7
 800b99c:	2300      	movs	r3, #0
 800b99e:	220a      	movs	r2, #10
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f000 fa35 	bl	800be10 <__multadd>
 800b9a6:	f1b9 0f00 	cmp.w	r9, #0
 800b9aa:	4607      	mov	r7, r0
 800b9ac:	f300 808e 	bgt.w	800bacc <_dtoa_r+0x9a4>
 800b9b0:	9b05      	ldr	r3, [sp, #20]
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	dc50      	bgt.n	800ba58 <_dtoa_r+0x930>
 800b9b6:	e089      	b.n	800bacc <_dtoa_r+0x9a4>
 800b9b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9be:	e75d      	b.n	800b87c <_dtoa_r+0x754>
 800b9c0:	9b01      	ldr	r3, [sp, #4]
 800b9c2:	1e5e      	subs	r6, r3, #1
 800b9c4:	9b06      	ldr	r3, [sp, #24]
 800b9c6:	42b3      	cmp	r3, r6
 800b9c8:	bfb7      	itett	lt
 800b9ca:	9b06      	ldrlt	r3, [sp, #24]
 800b9cc:	1b9e      	subge	r6, r3, r6
 800b9ce:	9606      	strlt	r6, [sp, #24]
 800b9d0:	1af2      	sublt	r2, r6, r3
 800b9d2:	bfbf      	itttt	lt
 800b9d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b9d6:	2600      	movlt	r6, #0
 800b9d8:	189b      	addlt	r3, r3, r2
 800b9da:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b9dc:	9b01      	ldr	r3, [sp, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	bfb5      	itete	lt
 800b9e2:	eba8 0503 	sublt.w	r5, r8, r3
 800b9e6:	4645      	movge	r5, r8
 800b9e8:	2300      	movlt	r3, #0
 800b9ea:	9b01      	ldrge	r3, [sp, #4]
 800b9ec:	e748      	b.n	800b880 <_dtoa_r+0x758>
 800b9ee:	9e06      	ldr	r6, [sp, #24]
 800b9f0:	4645      	mov	r5, r8
 800b9f2:	9f08      	ldr	r7, [sp, #32]
 800b9f4:	e74d      	b.n	800b892 <_dtoa_r+0x76a>
 800b9f6:	9a06      	ldr	r2, [sp, #24]
 800b9f8:	e776      	b.n	800b8e8 <_dtoa_r+0x7c0>
 800b9fa:	9b05      	ldr	r3, [sp, #20]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	dc18      	bgt.n	800ba32 <_dtoa_r+0x90a>
 800ba00:	9b02      	ldr	r3, [sp, #8]
 800ba02:	b9b3      	cbnz	r3, 800ba32 <_dtoa_r+0x90a>
 800ba04:	9b03      	ldr	r3, [sp, #12]
 800ba06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba0a:	b9a3      	cbnz	r3, 800ba36 <_dtoa_r+0x90e>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba12:	0d1b      	lsrs	r3, r3, #20
 800ba14:	051b      	lsls	r3, r3, #20
 800ba16:	b12b      	cbz	r3, 800ba24 <_dtoa_r+0x8fc>
 800ba18:	9b04      	ldr	r3, [sp, #16]
 800ba1a:	f108 0801 	add.w	r8, r8, #1
 800ba1e:	3301      	adds	r3, #1
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	2301      	movs	r3, #1
 800ba24:	9306      	str	r3, [sp, #24]
 800ba26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f47f af75 	bne.w	800b918 <_dtoa_r+0x7f0>
 800ba2e:	2001      	movs	r0, #1
 800ba30:	e77a      	b.n	800b928 <_dtoa_r+0x800>
 800ba32:	2300      	movs	r3, #0
 800ba34:	e7f6      	b.n	800ba24 <_dtoa_r+0x8fc>
 800ba36:	9b02      	ldr	r3, [sp, #8]
 800ba38:	e7f4      	b.n	800ba24 <_dtoa_r+0x8fc>
 800ba3a:	d086      	beq.n	800b94a <_dtoa_r+0x822>
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	301c      	adds	r0, #28
 800ba40:	e77e      	b.n	800b940 <_dtoa_r+0x818>
 800ba42:	bf00      	nop
 800ba44:	40240000 	.word	0x40240000
 800ba48:	9b01      	ldr	r3, [sp, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	dc38      	bgt.n	800bac0 <_dtoa_r+0x998>
 800ba4e:	9b05      	ldr	r3, [sp, #20]
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	dd35      	ble.n	800bac0 <_dtoa_r+0x998>
 800ba54:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ba58:	f1b9 0f00 	cmp.w	r9, #0
 800ba5c:	d10d      	bne.n	800ba7a <_dtoa_r+0x952>
 800ba5e:	4631      	mov	r1, r6
 800ba60:	464b      	mov	r3, r9
 800ba62:	2205      	movs	r2, #5
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 f9d3 	bl	800be10 <__multadd>
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	4606      	mov	r6, r0
 800ba6e:	4658      	mov	r0, fp
 800ba70:	f000 fbea 	bl	800c248 <__mcmp>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	f73f adbf 	bgt.w	800b5f8 <_dtoa_r+0x4d0>
 800ba7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba7c:	9d00      	ldr	r5, [sp, #0]
 800ba7e:	ea6f 0a03 	mvn.w	sl, r3
 800ba82:	f04f 0800 	mov.w	r8, #0
 800ba86:	4631      	mov	r1, r6
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f000 f99f 	bl	800bdcc <_Bfree>
 800ba8e:	2f00      	cmp	r7, #0
 800ba90:	f43f aeb4 	beq.w	800b7fc <_dtoa_r+0x6d4>
 800ba94:	f1b8 0f00 	cmp.w	r8, #0
 800ba98:	d005      	beq.n	800baa6 <_dtoa_r+0x97e>
 800ba9a:	45b8      	cmp	r8, r7
 800ba9c:	d003      	beq.n	800baa6 <_dtoa_r+0x97e>
 800ba9e:	4641      	mov	r1, r8
 800baa0:	4620      	mov	r0, r4
 800baa2:	f000 f993 	bl	800bdcc <_Bfree>
 800baa6:	4639      	mov	r1, r7
 800baa8:	4620      	mov	r0, r4
 800baaa:	f000 f98f 	bl	800bdcc <_Bfree>
 800baae:	e6a5      	b.n	800b7fc <_dtoa_r+0x6d4>
 800bab0:	2600      	movs	r6, #0
 800bab2:	4637      	mov	r7, r6
 800bab4:	e7e1      	b.n	800ba7a <_dtoa_r+0x952>
 800bab6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bab8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800babc:	4637      	mov	r7, r6
 800babe:	e59b      	b.n	800b5f8 <_dtoa_r+0x4d0>
 800bac0:	9b08      	ldr	r3, [sp, #32]
 800bac2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 80fd 	beq.w	800bcc6 <_dtoa_r+0xb9e>
 800bacc:	2d00      	cmp	r5, #0
 800bace:	dd05      	ble.n	800badc <_dtoa_r+0x9b4>
 800bad0:	4639      	mov	r1, r7
 800bad2:	462a      	mov	r2, r5
 800bad4:	4620      	mov	r0, r4
 800bad6:	f000 fb4b 	bl	800c170 <__lshift>
 800bada:	4607      	mov	r7, r0
 800badc:	9b06      	ldr	r3, [sp, #24]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d05c      	beq.n	800bb9c <_dtoa_r+0xa74>
 800bae2:	6879      	ldr	r1, [r7, #4]
 800bae4:	4620      	mov	r0, r4
 800bae6:	f000 f931 	bl	800bd4c <_Balloc>
 800baea:	4605      	mov	r5, r0
 800baec:	b928      	cbnz	r0, 800bafa <_dtoa_r+0x9d2>
 800baee:	4b80      	ldr	r3, [pc, #512]	; (800bcf0 <_dtoa_r+0xbc8>)
 800baf0:	4602      	mov	r2, r0
 800baf2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800baf6:	f7ff bb30 	b.w	800b15a <_dtoa_r+0x32>
 800bafa:	693a      	ldr	r2, [r7, #16]
 800bafc:	f107 010c 	add.w	r1, r7, #12
 800bb00:	300c      	adds	r0, #12
 800bb02:	3202      	adds	r2, #2
 800bb04:	0092      	lsls	r2, r2, #2
 800bb06:	f000 f913 	bl	800bd30 <memcpy>
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f000 fb2e 	bl	800c170 <__lshift>
 800bb14:	9b00      	ldr	r3, [sp, #0]
 800bb16:	46b8      	mov	r8, r7
 800bb18:	4607      	mov	r7, r0
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	9301      	str	r3, [sp, #4]
 800bb1e:	9b00      	ldr	r3, [sp, #0]
 800bb20:	444b      	add	r3, r9
 800bb22:	9307      	str	r3, [sp, #28]
 800bb24:	9b02      	ldr	r3, [sp, #8]
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	9306      	str	r3, [sp, #24]
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	4631      	mov	r1, r6
 800bb30:	4658      	mov	r0, fp
 800bb32:	3b01      	subs	r3, #1
 800bb34:	9302      	str	r3, [sp, #8]
 800bb36:	f7ff fa68 	bl	800b00a <quorem>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	4641      	mov	r1, r8
 800bb3e:	9004      	str	r0, [sp, #16]
 800bb40:	4658      	mov	r0, fp
 800bb42:	3330      	adds	r3, #48	; 0x30
 800bb44:	9308      	str	r3, [sp, #32]
 800bb46:	f000 fb7f 	bl	800c248 <__mcmp>
 800bb4a:	463a      	mov	r2, r7
 800bb4c:	4681      	mov	r9, r0
 800bb4e:	4631      	mov	r1, r6
 800bb50:	4620      	mov	r0, r4
 800bb52:	f000 fb95 	bl	800c280 <__mdiff>
 800bb56:	68c2      	ldr	r2, [r0, #12]
 800bb58:	4605      	mov	r5, r0
 800bb5a:	9b08      	ldr	r3, [sp, #32]
 800bb5c:	bb02      	cbnz	r2, 800bba0 <_dtoa_r+0xa78>
 800bb5e:	4601      	mov	r1, r0
 800bb60:	4658      	mov	r0, fp
 800bb62:	f000 fb71 	bl	800c248 <__mcmp>
 800bb66:	9b08      	ldr	r3, [sp, #32]
 800bb68:	4602      	mov	r2, r0
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bb72:	f000 f92b 	bl	800bdcc <_Bfree>
 800bb76:	9b05      	ldr	r3, [sp, #20]
 800bb78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb7a:	9d01      	ldr	r5, [sp, #4]
 800bb7c:	ea43 0102 	orr.w	r1, r3, r2
 800bb80:	9b06      	ldr	r3, [sp, #24]
 800bb82:	430b      	orrs	r3, r1
 800bb84:	9b08      	ldr	r3, [sp, #32]
 800bb86:	d10d      	bne.n	800bba4 <_dtoa_r+0xa7c>
 800bb88:	2b39      	cmp	r3, #57	; 0x39
 800bb8a:	d029      	beq.n	800bbe0 <_dtoa_r+0xab8>
 800bb8c:	f1b9 0f00 	cmp.w	r9, #0
 800bb90:	dd01      	ble.n	800bb96 <_dtoa_r+0xa6e>
 800bb92:	9b04      	ldr	r3, [sp, #16]
 800bb94:	3331      	adds	r3, #49	; 0x31
 800bb96:	9a02      	ldr	r2, [sp, #8]
 800bb98:	7013      	strb	r3, [r2, #0]
 800bb9a:	e774      	b.n	800ba86 <_dtoa_r+0x95e>
 800bb9c:	4638      	mov	r0, r7
 800bb9e:	e7b9      	b.n	800bb14 <_dtoa_r+0x9ec>
 800bba0:	2201      	movs	r2, #1
 800bba2:	e7e2      	b.n	800bb6a <_dtoa_r+0xa42>
 800bba4:	f1b9 0f00 	cmp.w	r9, #0
 800bba8:	db06      	blt.n	800bbb8 <_dtoa_r+0xa90>
 800bbaa:	9905      	ldr	r1, [sp, #20]
 800bbac:	ea41 0909 	orr.w	r9, r1, r9
 800bbb0:	9906      	ldr	r1, [sp, #24]
 800bbb2:	ea59 0101 	orrs.w	r1, r9, r1
 800bbb6:	d120      	bne.n	800bbfa <_dtoa_r+0xad2>
 800bbb8:	2a00      	cmp	r2, #0
 800bbba:	ddec      	ble.n	800bb96 <_dtoa_r+0xa6e>
 800bbbc:	4659      	mov	r1, fp
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	9301      	str	r3, [sp, #4]
 800bbc4:	f000 fad4 	bl	800c170 <__lshift>
 800bbc8:	4631      	mov	r1, r6
 800bbca:	4683      	mov	fp, r0
 800bbcc:	f000 fb3c 	bl	800c248 <__mcmp>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	9b01      	ldr	r3, [sp, #4]
 800bbd4:	dc02      	bgt.n	800bbdc <_dtoa_r+0xab4>
 800bbd6:	d1de      	bne.n	800bb96 <_dtoa_r+0xa6e>
 800bbd8:	07da      	lsls	r2, r3, #31
 800bbda:	d5dc      	bpl.n	800bb96 <_dtoa_r+0xa6e>
 800bbdc:	2b39      	cmp	r3, #57	; 0x39
 800bbde:	d1d8      	bne.n	800bb92 <_dtoa_r+0xa6a>
 800bbe0:	2339      	movs	r3, #57	; 0x39
 800bbe2:	9a02      	ldr	r2, [sp, #8]
 800bbe4:	7013      	strb	r3, [r2, #0]
 800bbe6:	462b      	mov	r3, r5
 800bbe8:	461d      	mov	r5, r3
 800bbea:	3b01      	subs	r3, #1
 800bbec:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbf0:	2a39      	cmp	r2, #57	; 0x39
 800bbf2:	d050      	beq.n	800bc96 <_dtoa_r+0xb6e>
 800bbf4:	3201      	adds	r2, #1
 800bbf6:	701a      	strb	r2, [r3, #0]
 800bbf8:	e745      	b.n	800ba86 <_dtoa_r+0x95e>
 800bbfa:	2a00      	cmp	r2, #0
 800bbfc:	dd03      	ble.n	800bc06 <_dtoa_r+0xade>
 800bbfe:	2b39      	cmp	r3, #57	; 0x39
 800bc00:	d0ee      	beq.n	800bbe0 <_dtoa_r+0xab8>
 800bc02:	3301      	adds	r3, #1
 800bc04:	e7c7      	b.n	800bb96 <_dtoa_r+0xa6e>
 800bc06:	9a01      	ldr	r2, [sp, #4]
 800bc08:	9907      	ldr	r1, [sp, #28]
 800bc0a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bc0e:	428a      	cmp	r2, r1
 800bc10:	d02a      	beq.n	800bc68 <_dtoa_r+0xb40>
 800bc12:	4659      	mov	r1, fp
 800bc14:	2300      	movs	r3, #0
 800bc16:	220a      	movs	r2, #10
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f000 f8f9 	bl	800be10 <__multadd>
 800bc1e:	45b8      	cmp	r8, r7
 800bc20:	4683      	mov	fp, r0
 800bc22:	f04f 0300 	mov.w	r3, #0
 800bc26:	f04f 020a 	mov.w	r2, #10
 800bc2a:	4641      	mov	r1, r8
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	d107      	bne.n	800bc40 <_dtoa_r+0xb18>
 800bc30:	f000 f8ee 	bl	800be10 <__multadd>
 800bc34:	4680      	mov	r8, r0
 800bc36:	4607      	mov	r7, r0
 800bc38:	9b01      	ldr	r3, [sp, #4]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	9301      	str	r3, [sp, #4]
 800bc3e:	e775      	b.n	800bb2c <_dtoa_r+0xa04>
 800bc40:	f000 f8e6 	bl	800be10 <__multadd>
 800bc44:	4639      	mov	r1, r7
 800bc46:	4680      	mov	r8, r0
 800bc48:	2300      	movs	r3, #0
 800bc4a:	220a      	movs	r2, #10
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 f8df 	bl	800be10 <__multadd>
 800bc52:	4607      	mov	r7, r0
 800bc54:	e7f0      	b.n	800bc38 <_dtoa_r+0xb10>
 800bc56:	f1b9 0f00 	cmp.w	r9, #0
 800bc5a:	9a00      	ldr	r2, [sp, #0]
 800bc5c:	f04f 0800 	mov.w	r8, #0
 800bc60:	bfcc      	ite	gt
 800bc62:	464d      	movgt	r5, r9
 800bc64:	2501      	movle	r5, #1
 800bc66:	4415      	add	r5, r2
 800bc68:	4659      	mov	r1, fp
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	9301      	str	r3, [sp, #4]
 800bc70:	f000 fa7e 	bl	800c170 <__lshift>
 800bc74:	4631      	mov	r1, r6
 800bc76:	4683      	mov	fp, r0
 800bc78:	f000 fae6 	bl	800c248 <__mcmp>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	dcb2      	bgt.n	800bbe6 <_dtoa_r+0xabe>
 800bc80:	d102      	bne.n	800bc88 <_dtoa_r+0xb60>
 800bc82:	9b01      	ldr	r3, [sp, #4]
 800bc84:	07db      	lsls	r3, r3, #31
 800bc86:	d4ae      	bmi.n	800bbe6 <_dtoa_r+0xabe>
 800bc88:	462b      	mov	r3, r5
 800bc8a:	461d      	mov	r5, r3
 800bc8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc90:	2a30      	cmp	r2, #48	; 0x30
 800bc92:	d0fa      	beq.n	800bc8a <_dtoa_r+0xb62>
 800bc94:	e6f7      	b.n	800ba86 <_dtoa_r+0x95e>
 800bc96:	9a00      	ldr	r2, [sp, #0]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d1a5      	bne.n	800bbe8 <_dtoa_r+0xac0>
 800bc9c:	f10a 0a01 	add.w	sl, sl, #1
 800bca0:	2331      	movs	r3, #49	; 0x31
 800bca2:	e779      	b.n	800bb98 <_dtoa_r+0xa70>
 800bca4:	4b13      	ldr	r3, [pc, #76]	; (800bcf4 <_dtoa_r+0xbcc>)
 800bca6:	f7ff bab2 	b.w	800b20e <_dtoa_r+0xe6>
 800bcaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f47f aa89 	bne.w	800b1c4 <_dtoa_r+0x9c>
 800bcb2:	4b11      	ldr	r3, [pc, #68]	; (800bcf8 <_dtoa_r+0xbd0>)
 800bcb4:	f7ff baab 	b.w	800b20e <_dtoa_r+0xe6>
 800bcb8:	f1b9 0f00 	cmp.w	r9, #0
 800bcbc:	dc03      	bgt.n	800bcc6 <_dtoa_r+0xb9e>
 800bcbe:	9b05      	ldr	r3, [sp, #20]
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	f73f aec9 	bgt.w	800ba58 <_dtoa_r+0x930>
 800bcc6:	9d00      	ldr	r5, [sp, #0]
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4658      	mov	r0, fp
 800bccc:	f7ff f99d 	bl	800b00a <quorem>
 800bcd0:	9a00      	ldr	r2, [sp, #0]
 800bcd2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bcd6:	f805 3b01 	strb.w	r3, [r5], #1
 800bcda:	1aaa      	subs	r2, r5, r2
 800bcdc:	4591      	cmp	r9, r2
 800bcde:	ddba      	ble.n	800bc56 <_dtoa_r+0xb2e>
 800bce0:	4659      	mov	r1, fp
 800bce2:	2300      	movs	r3, #0
 800bce4:	220a      	movs	r2, #10
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 f892 	bl	800be10 <__multadd>
 800bcec:	4683      	mov	fp, r0
 800bcee:	e7eb      	b.n	800bcc8 <_dtoa_r+0xba0>
 800bcf0:	0800da4b 	.word	0x0800da4b
 800bcf4:	0800d9a4 	.word	0x0800d9a4
 800bcf8:	0800d9c8 	.word	0x0800d9c8

0800bcfc <_localeconv_r>:
 800bcfc:	4800      	ldr	r0, [pc, #0]	; (800bd00 <_localeconv_r+0x4>)
 800bcfe:	4770      	bx	lr
 800bd00:	20000178 	.word	0x20000178

0800bd04 <malloc>:
 800bd04:	4b02      	ldr	r3, [pc, #8]	; (800bd10 <malloc+0xc>)
 800bd06:	4601      	mov	r1, r0
 800bd08:	6818      	ldr	r0, [r3, #0]
 800bd0a:	f000 bc05 	b.w	800c518 <_malloc_r>
 800bd0e:	bf00      	nop
 800bd10:	20000024 	.word	0x20000024

0800bd14 <memchr>:
 800bd14:	b2c9      	uxtb	r1, r1
 800bd16:	4402      	add	r2, r0
 800bd18:	b510      	push	{r4, lr}
 800bd1a:	4290      	cmp	r0, r2
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	d101      	bne.n	800bd24 <memchr+0x10>
 800bd20:	2300      	movs	r3, #0
 800bd22:	e003      	b.n	800bd2c <memchr+0x18>
 800bd24:	781c      	ldrb	r4, [r3, #0]
 800bd26:	3001      	adds	r0, #1
 800bd28:	428c      	cmp	r4, r1
 800bd2a:	d1f6      	bne.n	800bd1a <memchr+0x6>
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	bd10      	pop	{r4, pc}

0800bd30 <memcpy>:
 800bd30:	440a      	add	r2, r1
 800bd32:	1e43      	subs	r3, r0, #1
 800bd34:	4291      	cmp	r1, r2
 800bd36:	d100      	bne.n	800bd3a <memcpy+0xa>
 800bd38:	4770      	bx	lr
 800bd3a:	b510      	push	{r4, lr}
 800bd3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd40:	4291      	cmp	r1, r2
 800bd42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd46:	d1f9      	bne.n	800bd3c <memcpy+0xc>
 800bd48:	bd10      	pop	{r4, pc}
	...

0800bd4c <_Balloc>:
 800bd4c:	b570      	push	{r4, r5, r6, lr}
 800bd4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd50:	4604      	mov	r4, r0
 800bd52:	460d      	mov	r5, r1
 800bd54:	b976      	cbnz	r6, 800bd74 <_Balloc+0x28>
 800bd56:	2010      	movs	r0, #16
 800bd58:	f7ff ffd4 	bl	800bd04 <malloc>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	6260      	str	r0, [r4, #36]	; 0x24
 800bd60:	b920      	cbnz	r0, 800bd6c <_Balloc+0x20>
 800bd62:	4b18      	ldr	r3, [pc, #96]	; (800bdc4 <_Balloc+0x78>)
 800bd64:	2166      	movs	r1, #102	; 0x66
 800bd66:	4818      	ldr	r0, [pc, #96]	; (800bdc8 <_Balloc+0x7c>)
 800bd68:	f000 fd9c 	bl	800c8a4 <__assert_func>
 800bd6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd70:	6006      	str	r6, [r0, #0]
 800bd72:	60c6      	str	r6, [r0, #12]
 800bd74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd76:	68f3      	ldr	r3, [r6, #12]
 800bd78:	b183      	cbz	r3, 800bd9c <_Balloc+0x50>
 800bd7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd82:	b9b8      	cbnz	r0, 800bdb4 <_Balloc+0x68>
 800bd84:	2101      	movs	r1, #1
 800bd86:	4620      	mov	r0, r4
 800bd88:	fa01 f605 	lsl.w	r6, r1, r5
 800bd8c:	1d72      	adds	r2, r6, #5
 800bd8e:	0092      	lsls	r2, r2, #2
 800bd90:	f000 fb62 	bl	800c458 <_calloc_r>
 800bd94:	b160      	cbz	r0, 800bdb0 <_Balloc+0x64>
 800bd96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd9a:	e00e      	b.n	800bdba <_Balloc+0x6e>
 800bd9c:	2221      	movs	r2, #33	; 0x21
 800bd9e:	2104      	movs	r1, #4
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 fb59 	bl	800c458 <_calloc_r>
 800bda6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bda8:	60f0      	str	r0, [r6, #12]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1e4      	bne.n	800bd7a <_Balloc+0x2e>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}
 800bdb4:	6802      	ldr	r2, [r0, #0]
 800bdb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdba:	2300      	movs	r3, #0
 800bdbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bdc0:	e7f7      	b.n	800bdb2 <_Balloc+0x66>
 800bdc2:	bf00      	nop
 800bdc4:	0800d9d5 	.word	0x0800d9d5
 800bdc8:	0800da5c 	.word	0x0800da5c

0800bdcc <_Bfree>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	b976      	cbnz	r6, 800bdf4 <_Bfree+0x28>
 800bdd6:	2010      	movs	r0, #16
 800bdd8:	f7ff ff94 	bl	800bd04 <malloc>
 800bddc:	4602      	mov	r2, r0
 800bdde:	6268      	str	r0, [r5, #36]	; 0x24
 800bde0:	b920      	cbnz	r0, 800bdec <_Bfree+0x20>
 800bde2:	4b09      	ldr	r3, [pc, #36]	; (800be08 <_Bfree+0x3c>)
 800bde4:	218a      	movs	r1, #138	; 0x8a
 800bde6:	4809      	ldr	r0, [pc, #36]	; (800be0c <_Bfree+0x40>)
 800bde8:	f000 fd5c 	bl	800c8a4 <__assert_func>
 800bdec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdf0:	6006      	str	r6, [r0, #0]
 800bdf2:	60c6      	str	r6, [r0, #12]
 800bdf4:	b13c      	cbz	r4, 800be06 <_Bfree+0x3a>
 800bdf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bdf8:	6862      	ldr	r2, [r4, #4]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be00:	6021      	str	r1, [r4, #0]
 800be02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be06:	bd70      	pop	{r4, r5, r6, pc}
 800be08:	0800d9d5 	.word	0x0800d9d5
 800be0c:	0800da5c 	.word	0x0800da5c

0800be10 <__multadd>:
 800be10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be14:	4607      	mov	r7, r0
 800be16:	4698      	mov	r8, r3
 800be18:	460c      	mov	r4, r1
 800be1a:	690e      	ldr	r6, [r1, #16]
 800be1c:	f101 0014 	add.w	r0, r1, #20
 800be20:	2300      	movs	r3, #0
 800be22:	6805      	ldr	r5, [r0, #0]
 800be24:	3301      	adds	r3, #1
 800be26:	b2a9      	uxth	r1, r5
 800be28:	429e      	cmp	r6, r3
 800be2a:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800be2e:	fb02 8101 	mla	r1, r2, r1, r8
 800be32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800be36:	b289      	uxth	r1, r1
 800be38:	fb02 c505 	mla	r5, r2, r5, ip
 800be3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800be40:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800be44:	f840 1b04 	str.w	r1, [r0], #4
 800be48:	dceb      	bgt.n	800be22 <__multadd+0x12>
 800be4a:	f1b8 0f00 	cmp.w	r8, #0
 800be4e:	d022      	beq.n	800be96 <__multadd+0x86>
 800be50:	68a3      	ldr	r3, [r4, #8]
 800be52:	42b3      	cmp	r3, r6
 800be54:	dc19      	bgt.n	800be8a <__multadd+0x7a>
 800be56:	6861      	ldr	r1, [r4, #4]
 800be58:	4638      	mov	r0, r7
 800be5a:	3101      	adds	r1, #1
 800be5c:	f7ff ff76 	bl	800bd4c <_Balloc>
 800be60:	4605      	mov	r5, r0
 800be62:	b928      	cbnz	r0, 800be70 <__multadd+0x60>
 800be64:	4602      	mov	r2, r0
 800be66:	4b0d      	ldr	r3, [pc, #52]	; (800be9c <__multadd+0x8c>)
 800be68:	21b5      	movs	r1, #181	; 0xb5
 800be6a:	480d      	ldr	r0, [pc, #52]	; (800bea0 <__multadd+0x90>)
 800be6c:	f000 fd1a 	bl	800c8a4 <__assert_func>
 800be70:	6922      	ldr	r2, [r4, #16]
 800be72:	f104 010c 	add.w	r1, r4, #12
 800be76:	300c      	adds	r0, #12
 800be78:	3202      	adds	r2, #2
 800be7a:	0092      	lsls	r2, r2, #2
 800be7c:	f7ff ff58 	bl	800bd30 <memcpy>
 800be80:	4621      	mov	r1, r4
 800be82:	462c      	mov	r4, r5
 800be84:	4638      	mov	r0, r7
 800be86:	f7ff ffa1 	bl	800bdcc <_Bfree>
 800be8a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800be8e:	3601      	adds	r6, #1
 800be90:	f8c3 8014 	str.w	r8, [r3, #20]
 800be94:	6126      	str	r6, [r4, #16]
 800be96:	4620      	mov	r0, r4
 800be98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be9c:	0800da4b 	.word	0x0800da4b
 800bea0:	0800da5c 	.word	0x0800da5c

0800bea4 <__hi0bits>:
 800bea4:	0c03      	lsrs	r3, r0, #16
 800bea6:	041b      	lsls	r3, r3, #16
 800bea8:	b9d3      	cbnz	r3, 800bee0 <__hi0bits+0x3c>
 800beaa:	0400      	lsls	r0, r0, #16
 800beac:	2310      	movs	r3, #16
 800beae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800beb2:	bf04      	itt	eq
 800beb4:	0200      	lsleq	r0, r0, #8
 800beb6:	3308      	addeq	r3, #8
 800beb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bebc:	bf04      	itt	eq
 800bebe:	0100      	lsleq	r0, r0, #4
 800bec0:	3304      	addeq	r3, #4
 800bec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bec6:	bf04      	itt	eq
 800bec8:	0080      	lsleq	r0, r0, #2
 800beca:	3302      	addeq	r3, #2
 800becc:	2800      	cmp	r0, #0
 800bece:	db05      	blt.n	800bedc <__hi0bits+0x38>
 800bed0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bed4:	f103 0301 	add.w	r3, r3, #1
 800bed8:	bf08      	it	eq
 800beda:	2320      	moveq	r3, #32
 800bedc:	4618      	mov	r0, r3
 800bede:	4770      	bx	lr
 800bee0:	2300      	movs	r3, #0
 800bee2:	e7e4      	b.n	800beae <__hi0bits+0xa>

0800bee4 <__lo0bits>:
 800bee4:	6803      	ldr	r3, [r0, #0]
 800bee6:	4601      	mov	r1, r0
 800bee8:	f013 0207 	ands.w	r2, r3, #7
 800beec:	d00b      	beq.n	800bf06 <__lo0bits+0x22>
 800beee:	07da      	lsls	r2, r3, #31
 800bef0:	d424      	bmi.n	800bf3c <__lo0bits+0x58>
 800bef2:	0798      	lsls	r0, r3, #30
 800bef4:	bf47      	ittee	mi
 800bef6:	085b      	lsrmi	r3, r3, #1
 800bef8:	2001      	movmi	r0, #1
 800befa:	089b      	lsrpl	r3, r3, #2
 800befc:	2002      	movpl	r0, #2
 800befe:	bf4c      	ite	mi
 800bf00:	600b      	strmi	r3, [r1, #0]
 800bf02:	600b      	strpl	r3, [r1, #0]
 800bf04:	4770      	bx	lr
 800bf06:	b298      	uxth	r0, r3
 800bf08:	b9b0      	cbnz	r0, 800bf38 <__lo0bits+0x54>
 800bf0a:	0c1b      	lsrs	r3, r3, #16
 800bf0c:	2010      	movs	r0, #16
 800bf0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bf12:	bf04      	itt	eq
 800bf14:	0a1b      	lsreq	r3, r3, #8
 800bf16:	3008      	addeq	r0, #8
 800bf18:	071a      	lsls	r2, r3, #28
 800bf1a:	bf04      	itt	eq
 800bf1c:	091b      	lsreq	r3, r3, #4
 800bf1e:	3004      	addeq	r0, #4
 800bf20:	079a      	lsls	r2, r3, #30
 800bf22:	bf04      	itt	eq
 800bf24:	089b      	lsreq	r3, r3, #2
 800bf26:	3002      	addeq	r0, #2
 800bf28:	07da      	lsls	r2, r3, #31
 800bf2a:	d403      	bmi.n	800bf34 <__lo0bits+0x50>
 800bf2c:	085b      	lsrs	r3, r3, #1
 800bf2e:	f100 0001 	add.w	r0, r0, #1
 800bf32:	d005      	beq.n	800bf40 <__lo0bits+0x5c>
 800bf34:	600b      	str	r3, [r1, #0]
 800bf36:	4770      	bx	lr
 800bf38:	4610      	mov	r0, r2
 800bf3a:	e7e8      	b.n	800bf0e <__lo0bits+0x2a>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	4770      	bx	lr
 800bf40:	2020      	movs	r0, #32
 800bf42:	4770      	bx	lr

0800bf44 <__i2b>:
 800bf44:	b510      	push	{r4, lr}
 800bf46:	460c      	mov	r4, r1
 800bf48:	2101      	movs	r1, #1
 800bf4a:	f7ff feff 	bl	800bd4c <_Balloc>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	b928      	cbnz	r0, 800bf5e <__i2b+0x1a>
 800bf52:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <__i2b+0x24>)
 800bf54:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bf58:	4804      	ldr	r0, [pc, #16]	; (800bf6c <__i2b+0x28>)
 800bf5a:	f000 fca3 	bl	800c8a4 <__assert_func>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	6144      	str	r4, [r0, #20]
 800bf62:	6103      	str	r3, [r0, #16]
 800bf64:	bd10      	pop	{r4, pc}
 800bf66:	bf00      	nop
 800bf68:	0800da4b 	.word	0x0800da4b
 800bf6c:	0800da5c 	.word	0x0800da5c

0800bf70 <__multiply>:
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	4614      	mov	r4, r2
 800bf76:	690a      	ldr	r2, [r1, #16]
 800bf78:	460d      	mov	r5, r1
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	6923      	ldr	r3, [r4, #16]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	bfbe      	ittt	lt
 800bf82:	460b      	movlt	r3, r1
 800bf84:	4625      	movlt	r5, r4
 800bf86:	461c      	movlt	r4, r3
 800bf88:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bf8c:	68ab      	ldr	r3, [r5, #8]
 800bf8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bf92:	6869      	ldr	r1, [r5, #4]
 800bf94:	eb0a 0709 	add.w	r7, sl, r9
 800bf98:	42bb      	cmp	r3, r7
 800bf9a:	bfb8      	it	lt
 800bf9c:	3101      	addlt	r1, #1
 800bf9e:	f7ff fed5 	bl	800bd4c <_Balloc>
 800bfa2:	b930      	cbnz	r0, 800bfb2 <__multiply+0x42>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	4b43      	ldr	r3, [pc, #268]	; (800c0b4 <__multiply+0x144>)
 800bfa8:	f240 115d 	movw	r1, #349	; 0x15d
 800bfac:	4842      	ldr	r0, [pc, #264]	; (800c0b8 <__multiply+0x148>)
 800bfae:	f000 fc79 	bl	800c8a4 <__assert_func>
 800bfb2:	f100 0614 	add.w	r6, r0, #20
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bfbc:	4633      	mov	r3, r6
 800bfbe:	4543      	cmp	r3, r8
 800bfc0:	d31e      	bcc.n	800c000 <__multiply+0x90>
 800bfc2:	f105 0c14 	add.w	ip, r5, #20
 800bfc6:	f104 0314 	add.w	r3, r4, #20
 800bfca:	f105 0115 	add.w	r1, r5, #21
 800bfce:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bfd2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bfd6:	9202      	str	r2, [sp, #8]
 800bfd8:	ebac 0205 	sub.w	r2, ip, r5
 800bfdc:	3a15      	subs	r2, #21
 800bfde:	f022 0203 	bic.w	r2, r2, #3
 800bfe2:	3204      	adds	r2, #4
 800bfe4:	458c      	cmp	ip, r1
 800bfe6:	bf38      	it	cc
 800bfe8:	2204      	movcc	r2, #4
 800bfea:	9201      	str	r2, [sp, #4]
 800bfec:	9a02      	ldr	r2, [sp, #8]
 800bfee:	9303      	str	r3, [sp, #12]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d808      	bhi.n	800c006 <__multiply+0x96>
 800bff4:	2f00      	cmp	r7, #0
 800bff6:	dc57      	bgt.n	800c0a8 <__multiply+0x138>
 800bff8:	6107      	str	r7, [r0, #16]
 800bffa:	b005      	add	sp, #20
 800bffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c000:	f843 2b04 	str.w	r2, [r3], #4
 800c004:	e7db      	b.n	800bfbe <__multiply+0x4e>
 800c006:	f8b3 a000 	ldrh.w	sl, [r3]
 800c00a:	f1ba 0f00 	cmp.w	sl, #0
 800c00e:	d022      	beq.n	800c056 <__multiply+0xe6>
 800c010:	f105 0e14 	add.w	lr, r5, #20
 800c014:	46b1      	mov	r9, r6
 800c016:	2200      	movs	r2, #0
 800c018:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c01c:	f8d9 b000 	ldr.w	fp, [r9]
 800c020:	b2a1      	uxth	r1, r4
 800c022:	45f4      	cmp	ip, lr
 800c024:	fa1f fb8b 	uxth.w	fp, fp
 800c028:	ea4f 4414 	mov.w	r4, r4, lsr #16
 800c02c:	fb0a b101 	mla	r1, sl, r1, fp
 800c030:	4411      	add	r1, r2
 800c032:	f8d9 2000 	ldr.w	r2, [r9]
 800c036:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c03a:	fb0a 2404 	mla	r4, sl, r4, r2
 800c03e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c042:	b289      	uxth	r1, r1
 800c044:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c048:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c04c:	f849 1b04 	str.w	r1, [r9], #4
 800c050:	d8e2      	bhi.n	800c018 <__multiply+0xa8>
 800c052:	9901      	ldr	r1, [sp, #4]
 800c054:	5072      	str	r2, [r6, r1]
 800c056:	9a03      	ldr	r2, [sp, #12]
 800c058:	3304      	adds	r3, #4
 800c05a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c05e:	f1b9 0f00 	cmp.w	r9, #0
 800c062:	d01f      	beq.n	800c0a4 <__multiply+0x134>
 800c064:	6834      	ldr	r4, [r6, #0]
 800c066:	f105 0114 	add.w	r1, r5, #20
 800c06a:	46b6      	mov	lr, r6
 800c06c:	f04f 0a00 	mov.w	sl, #0
 800c070:	880a      	ldrh	r2, [r1, #0]
 800c072:	b2a4      	uxth	r4, r4
 800c074:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c078:	fb09 b202 	mla	r2, r9, r2, fp
 800c07c:	4492      	add	sl, r2
 800c07e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c082:	f84e 4b04 	str.w	r4, [lr], #4
 800c086:	f851 4b04 	ldr.w	r4, [r1], #4
 800c08a:	f8be 2000 	ldrh.w	r2, [lr]
 800c08e:	0c24      	lsrs	r4, r4, #16
 800c090:	458c      	cmp	ip, r1
 800c092:	fb09 2404 	mla	r4, r9, r4, r2
 800c096:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c09a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c09e:	d8e7      	bhi.n	800c070 <__multiply+0x100>
 800c0a0:	9a01      	ldr	r2, [sp, #4]
 800c0a2:	50b4      	str	r4, [r6, r2]
 800c0a4:	3604      	adds	r6, #4
 800c0a6:	e7a1      	b.n	800bfec <__multiply+0x7c>
 800c0a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1a3      	bne.n	800bff8 <__multiply+0x88>
 800c0b0:	3f01      	subs	r7, #1
 800c0b2:	e79f      	b.n	800bff4 <__multiply+0x84>
 800c0b4:	0800da4b 	.word	0x0800da4b
 800c0b8:	0800da5c 	.word	0x0800da5c

0800c0bc <__pow5mult>:
 800c0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c0:	4615      	mov	r5, r2
 800c0c2:	f012 0203 	ands.w	r2, r2, #3
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	460f      	mov	r7, r1
 800c0ca:	d007      	beq.n	800c0dc <__pow5mult+0x20>
 800c0cc:	3a01      	subs	r2, #1
 800c0ce:	4c25      	ldr	r4, [pc, #148]	; (800c164 <__pow5mult+0xa8>)
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0d6:	f7ff fe9b 	bl	800be10 <__multadd>
 800c0da:	4607      	mov	r7, r0
 800c0dc:	10ad      	asrs	r5, r5, #2
 800c0de:	d03d      	beq.n	800c15c <__pow5mult+0xa0>
 800c0e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c0e2:	b97c      	cbnz	r4, 800c104 <__pow5mult+0x48>
 800c0e4:	2010      	movs	r0, #16
 800c0e6:	f7ff fe0d 	bl	800bd04 <malloc>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	6270      	str	r0, [r6, #36]	; 0x24
 800c0ee:	b928      	cbnz	r0, 800c0fc <__pow5mult+0x40>
 800c0f0:	4b1d      	ldr	r3, [pc, #116]	; (800c168 <__pow5mult+0xac>)
 800c0f2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c0f6:	481d      	ldr	r0, [pc, #116]	; (800c16c <__pow5mult+0xb0>)
 800c0f8:	f000 fbd4 	bl	800c8a4 <__assert_func>
 800c0fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c100:	6004      	str	r4, [r0, #0]
 800c102:	60c4      	str	r4, [r0, #12]
 800c104:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c10c:	b94c      	cbnz	r4, 800c122 <__pow5mult+0x66>
 800c10e:	f240 2171 	movw	r1, #625	; 0x271
 800c112:	4630      	mov	r0, r6
 800c114:	f7ff ff16 	bl	800bf44 <__i2b>
 800c118:	2300      	movs	r3, #0
 800c11a:	4604      	mov	r4, r0
 800c11c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c120:	6003      	str	r3, [r0, #0]
 800c122:	f04f 0900 	mov.w	r9, #0
 800c126:	07eb      	lsls	r3, r5, #31
 800c128:	d50a      	bpl.n	800c140 <__pow5mult+0x84>
 800c12a:	4639      	mov	r1, r7
 800c12c:	4622      	mov	r2, r4
 800c12e:	4630      	mov	r0, r6
 800c130:	f7ff ff1e 	bl	800bf70 <__multiply>
 800c134:	4680      	mov	r8, r0
 800c136:	4639      	mov	r1, r7
 800c138:	4630      	mov	r0, r6
 800c13a:	4647      	mov	r7, r8
 800c13c:	f7ff fe46 	bl	800bdcc <_Bfree>
 800c140:	106d      	asrs	r5, r5, #1
 800c142:	d00b      	beq.n	800c15c <__pow5mult+0xa0>
 800c144:	6820      	ldr	r0, [r4, #0]
 800c146:	b938      	cbnz	r0, 800c158 <__pow5mult+0x9c>
 800c148:	4622      	mov	r2, r4
 800c14a:	4621      	mov	r1, r4
 800c14c:	4630      	mov	r0, r6
 800c14e:	f7ff ff0f 	bl	800bf70 <__multiply>
 800c152:	6020      	str	r0, [r4, #0]
 800c154:	f8c0 9000 	str.w	r9, [r0]
 800c158:	4604      	mov	r4, r0
 800c15a:	e7e4      	b.n	800c126 <__pow5mult+0x6a>
 800c15c:	4638      	mov	r0, r7
 800c15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c162:	bf00      	nop
 800c164:	0800dbb0 	.word	0x0800dbb0
 800c168:	0800d9d5 	.word	0x0800d9d5
 800c16c:	0800da5c 	.word	0x0800da5c

0800c170 <__lshift>:
 800c170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c174:	460c      	mov	r4, r1
 800c176:	4607      	mov	r7, r0
 800c178:	4691      	mov	r9, r2
 800c17a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c17e:	6923      	ldr	r3, [r4, #16]
 800c180:	6849      	ldr	r1, [r1, #4]
 800c182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c186:	68a3      	ldr	r3, [r4, #8]
 800c188:	f108 0601 	add.w	r6, r8, #1
 800c18c:	42b3      	cmp	r3, r6
 800c18e:	db0b      	blt.n	800c1a8 <__lshift+0x38>
 800c190:	4638      	mov	r0, r7
 800c192:	f7ff fddb 	bl	800bd4c <_Balloc>
 800c196:	4605      	mov	r5, r0
 800c198:	b948      	cbnz	r0, 800c1ae <__lshift+0x3e>
 800c19a:	4602      	mov	r2, r0
 800c19c:	4b28      	ldr	r3, [pc, #160]	; (800c240 <__lshift+0xd0>)
 800c19e:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c1a2:	4828      	ldr	r0, [pc, #160]	; (800c244 <__lshift+0xd4>)
 800c1a4:	f000 fb7e 	bl	800c8a4 <__assert_func>
 800c1a8:	3101      	adds	r1, #1
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	e7ee      	b.n	800c18c <__lshift+0x1c>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f100 0114 	add.w	r1, r0, #20
 800c1b4:	f100 0210 	add.w	r2, r0, #16
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	4553      	cmp	r3, sl
 800c1bc:	db33      	blt.n	800c226 <__lshift+0xb6>
 800c1be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1c2:	f104 0314 	add.w	r3, r4, #20
 800c1c6:	6920      	ldr	r0, [r4, #16]
 800c1c8:	f019 091f 	ands.w	r9, r9, #31
 800c1cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1d4:	d02b      	beq.n	800c22e <__lshift+0xbe>
 800c1d6:	f1c9 0e20 	rsb	lr, r9, #32
 800c1da:	468a      	mov	sl, r1
 800c1dc:	2200      	movs	r2, #0
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	fa00 f009 	lsl.w	r0, r0, r9
 800c1e4:	4302      	orrs	r2, r0
 800c1e6:	f84a 2b04 	str.w	r2, [sl], #4
 800c1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ee:	459c      	cmp	ip, r3
 800c1f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1f4:	d8f3      	bhi.n	800c1de <__lshift+0x6e>
 800c1f6:	ebac 0304 	sub.w	r3, ip, r4
 800c1fa:	f104 0015 	add.w	r0, r4, #21
 800c1fe:	3b15      	subs	r3, #21
 800c200:	f023 0303 	bic.w	r3, r3, #3
 800c204:	3304      	adds	r3, #4
 800c206:	4584      	cmp	ip, r0
 800c208:	bf38      	it	cc
 800c20a:	2304      	movcc	r3, #4
 800c20c:	50ca      	str	r2, [r1, r3]
 800c20e:	b10a      	cbz	r2, 800c214 <__lshift+0xa4>
 800c210:	f108 0602 	add.w	r6, r8, #2
 800c214:	3e01      	subs	r6, #1
 800c216:	4638      	mov	r0, r7
 800c218:	4621      	mov	r1, r4
 800c21a:	612e      	str	r6, [r5, #16]
 800c21c:	f7ff fdd6 	bl	800bdcc <_Bfree>
 800c220:	4628      	mov	r0, r5
 800c222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c226:	3301      	adds	r3, #1
 800c228:	f842 0f04 	str.w	r0, [r2, #4]!
 800c22c:	e7c5      	b.n	800c1ba <__lshift+0x4a>
 800c22e:	3904      	subs	r1, #4
 800c230:	f853 2b04 	ldr.w	r2, [r3], #4
 800c234:	459c      	cmp	ip, r3
 800c236:	f841 2f04 	str.w	r2, [r1, #4]!
 800c23a:	d8f9      	bhi.n	800c230 <__lshift+0xc0>
 800c23c:	e7ea      	b.n	800c214 <__lshift+0xa4>
 800c23e:	bf00      	nop
 800c240:	0800da4b 	.word	0x0800da4b
 800c244:	0800da5c 	.word	0x0800da5c

0800c248 <__mcmp>:
 800c248:	6902      	ldr	r2, [r0, #16]
 800c24a:	b530      	push	{r4, r5, lr}
 800c24c:	690c      	ldr	r4, [r1, #16]
 800c24e:	1b12      	subs	r2, r2, r4
 800c250:	d10e      	bne.n	800c270 <__mcmp+0x28>
 800c252:	f100 0314 	add.w	r3, r0, #20
 800c256:	3114      	adds	r1, #20
 800c258:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c25c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c260:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c264:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c268:	42a5      	cmp	r5, r4
 800c26a:	d003      	beq.n	800c274 <__mcmp+0x2c>
 800c26c:	d305      	bcc.n	800c27a <__mcmp+0x32>
 800c26e:	2201      	movs	r2, #1
 800c270:	4610      	mov	r0, r2
 800c272:	bd30      	pop	{r4, r5, pc}
 800c274:	4283      	cmp	r3, r0
 800c276:	d3f3      	bcc.n	800c260 <__mcmp+0x18>
 800c278:	e7fa      	b.n	800c270 <__mcmp+0x28>
 800c27a:	f04f 32ff 	mov.w	r2, #4294967295
 800c27e:	e7f7      	b.n	800c270 <__mcmp+0x28>

0800c280 <__mdiff>:
 800c280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	460c      	mov	r4, r1
 800c286:	4606      	mov	r6, r0
 800c288:	4611      	mov	r1, r2
 800c28a:	4692      	mov	sl, r2
 800c28c:	4620      	mov	r0, r4
 800c28e:	f7ff ffdb 	bl	800c248 <__mcmp>
 800c292:	1e05      	subs	r5, r0, #0
 800c294:	d110      	bne.n	800c2b8 <__mdiff+0x38>
 800c296:	4629      	mov	r1, r5
 800c298:	4630      	mov	r0, r6
 800c29a:	f7ff fd57 	bl	800bd4c <_Balloc>
 800c29e:	b930      	cbnz	r0, 800c2ae <__mdiff+0x2e>
 800c2a0:	4b3d      	ldr	r3, [pc, #244]	; (800c398 <__mdiff+0x118>)
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	f240 2132 	movw	r1, #562	; 0x232
 800c2a8:	483c      	ldr	r0, [pc, #240]	; (800c39c <__mdiff+0x11c>)
 800c2aa:	f000 fafb 	bl	800c8a4 <__assert_func>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c2b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b8:	bfa4      	itt	ge
 800c2ba:	4653      	movge	r3, sl
 800c2bc:	46a2      	movge	sl, r4
 800c2be:	4630      	mov	r0, r6
 800c2c0:	bfa8      	it	ge
 800c2c2:	2500      	movge	r5, #0
 800c2c4:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c2c8:	bfac      	ite	ge
 800c2ca:	461c      	movge	r4, r3
 800c2cc:	2501      	movlt	r5, #1
 800c2ce:	f7ff fd3d 	bl	800bd4c <_Balloc>
 800c2d2:	b920      	cbnz	r0, 800c2de <__mdiff+0x5e>
 800c2d4:	4b30      	ldr	r3, [pc, #192]	; (800c398 <__mdiff+0x118>)
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c2dc:	e7e4      	b.n	800c2a8 <__mdiff+0x28>
 800c2de:	f8da 7010 	ldr.w	r7, [sl, #16]
 800c2e2:	f104 0914 	add.w	r9, r4, #20
 800c2e6:	6926      	ldr	r6, [r4, #16]
 800c2e8:	f100 0814 	add.w	r8, r0, #20
 800c2ec:	60c5      	str	r5, [r0, #12]
 800c2ee:	f10a 0514 	add.w	r5, sl, #20
 800c2f2:	f10a 0210 	add.w	r2, sl, #16
 800c2f6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c2fa:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800c2fe:	46c2      	mov	sl, r8
 800c300:	f04f 0c00 	mov.w	ip, #0
 800c304:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c308:	f859 3b04 	ldr.w	r3, [r9], #4
 800c30c:	fa1f f18b 	uxth.w	r1, fp
 800c310:	454e      	cmp	r6, r9
 800c312:	4461      	add	r1, ip
 800c314:	fa1f fc83 	uxth.w	ip, r3
 800c318:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c31c:	eba1 010c 	sub.w	r1, r1, ip
 800c320:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c324:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c328:	b289      	uxth	r1, r1
 800c32a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c32e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c332:	f84a 3b04 	str.w	r3, [sl], #4
 800c336:	d8e5      	bhi.n	800c304 <__mdiff+0x84>
 800c338:	1b33      	subs	r3, r6, r4
 800c33a:	3415      	adds	r4, #21
 800c33c:	3b15      	subs	r3, #21
 800c33e:	f023 0303 	bic.w	r3, r3, #3
 800c342:	3304      	adds	r3, #4
 800c344:	42a6      	cmp	r6, r4
 800c346:	bf38      	it	cc
 800c348:	2304      	movcc	r3, #4
 800c34a:	441d      	add	r5, r3
 800c34c:	4443      	add	r3, r8
 800c34e:	462c      	mov	r4, r5
 800c350:	461e      	mov	r6, r3
 800c352:	4574      	cmp	r4, lr
 800c354:	d30e      	bcc.n	800c374 <__mdiff+0xf4>
 800c356:	f10e 0203 	add.w	r2, lr, #3
 800c35a:	1b52      	subs	r2, r2, r5
 800c35c:	3d03      	subs	r5, #3
 800c35e:	f022 0203 	bic.w	r2, r2, #3
 800c362:	45ae      	cmp	lr, r5
 800c364:	bf38      	it	cc
 800c366:	2200      	movcc	r2, #0
 800c368:	441a      	add	r2, r3
 800c36a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c36e:	b18b      	cbz	r3, 800c394 <__mdiff+0x114>
 800c370:	6107      	str	r7, [r0, #16]
 800c372:	e79f      	b.n	800c2b4 <__mdiff+0x34>
 800c374:	f854 8b04 	ldr.w	r8, [r4], #4
 800c378:	fa1f f288 	uxth.w	r2, r8
 800c37c:	4462      	add	r2, ip
 800c37e:	1411      	asrs	r1, r2, #16
 800c380:	b292      	uxth	r2, r2
 800c382:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 800c386:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c38a:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800c38e:	f846 2b04 	str.w	r2, [r6], #4
 800c392:	e7de      	b.n	800c352 <__mdiff+0xd2>
 800c394:	3f01      	subs	r7, #1
 800c396:	e7e8      	b.n	800c36a <__mdiff+0xea>
 800c398:	0800da4b 	.word	0x0800da4b
 800c39c:	0800da5c 	.word	0x0800da5c

0800c3a0 <__d2b>:
 800c3a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	4689      	mov	r9, r1
 800c3a6:	2101      	movs	r1, #1
 800c3a8:	4690      	mov	r8, r2
 800c3aa:	ec57 6b10 	vmov	r6, r7, d0
 800c3ae:	f7ff fccd 	bl	800bd4c <_Balloc>
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	b930      	cbnz	r0, 800c3c4 <__d2b+0x24>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	4b25      	ldr	r3, [pc, #148]	; (800c450 <__d2b+0xb0>)
 800c3ba:	f240 310a 	movw	r1, #778	; 0x30a
 800c3be:	4825      	ldr	r0, [pc, #148]	; (800c454 <__d2b+0xb4>)
 800c3c0:	f000 fa70 	bl	800c8a4 <__assert_func>
 800c3c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c3c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3cc:	bb35      	cbnz	r5, 800c41c <__d2b+0x7c>
 800c3ce:	2e00      	cmp	r6, #0
 800c3d0:	9301      	str	r3, [sp, #4]
 800c3d2:	d028      	beq.n	800c426 <__d2b+0x86>
 800c3d4:	4668      	mov	r0, sp
 800c3d6:	9600      	str	r6, [sp, #0]
 800c3d8:	f7ff fd84 	bl	800bee4 <__lo0bits>
 800c3dc:	9900      	ldr	r1, [sp, #0]
 800c3de:	b300      	cbz	r0, 800c422 <__d2b+0x82>
 800c3e0:	9a01      	ldr	r2, [sp, #4]
 800c3e2:	f1c0 0320 	rsb	r3, r0, #32
 800c3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ea:	40c2      	lsrs	r2, r0
 800c3ec:	430b      	orrs	r3, r1
 800c3ee:	9201      	str	r2, [sp, #4]
 800c3f0:	6163      	str	r3, [r4, #20]
 800c3f2:	9b01      	ldr	r3, [sp, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	61a3      	str	r3, [r4, #24]
 800c3f8:	bf14      	ite	ne
 800c3fa:	2202      	movne	r2, #2
 800c3fc:	2201      	moveq	r2, #1
 800c3fe:	6122      	str	r2, [r4, #16]
 800c400:	b1d5      	cbz	r5, 800c438 <__d2b+0x98>
 800c402:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c406:	4405      	add	r5, r0
 800c408:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c40c:	f8c9 5000 	str.w	r5, [r9]
 800c410:	f8c8 0000 	str.w	r0, [r8]
 800c414:	4620      	mov	r0, r4
 800c416:	b003      	add	sp, #12
 800c418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c41c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c420:	e7d5      	b.n	800c3ce <__d2b+0x2e>
 800c422:	6161      	str	r1, [r4, #20]
 800c424:	e7e5      	b.n	800c3f2 <__d2b+0x52>
 800c426:	a801      	add	r0, sp, #4
 800c428:	f7ff fd5c 	bl	800bee4 <__lo0bits>
 800c42c:	9b01      	ldr	r3, [sp, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	3020      	adds	r0, #32
 800c432:	6163      	str	r3, [r4, #20]
 800c434:	6122      	str	r2, [r4, #16]
 800c436:	e7e3      	b.n	800c400 <__d2b+0x60>
 800c438:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c43c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c440:	f8c9 0000 	str.w	r0, [r9]
 800c444:	6918      	ldr	r0, [r3, #16]
 800c446:	f7ff fd2d 	bl	800bea4 <__hi0bits>
 800c44a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c44e:	e7df      	b.n	800c410 <__d2b+0x70>
 800c450:	0800da4b 	.word	0x0800da4b
 800c454:	0800da5c 	.word	0x0800da5c

0800c458 <_calloc_r>:
 800c458:	434a      	muls	r2, r1
 800c45a:	b513      	push	{r0, r1, r4, lr}
 800c45c:	4611      	mov	r1, r2
 800c45e:	9201      	str	r2, [sp, #4]
 800c460:	f000 f85a 	bl	800c518 <_malloc_r>
 800c464:	4604      	mov	r4, r0
 800c466:	b118      	cbz	r0, 800c470 <_calloc_r+0x18>
 800c468:	9a01      	ldr	r2, [sp, #4]
 800c46a:	2100      	movs	r1, #0
 800c46c:	f7fe f92a 	bl	800a6c4 <memset>
 800c470:	4620      	mov	r0, r4
 800c472:	b002      	add	sp, #8
 800c474:	bd10      	pop	{r4, pc}
	...

0800c478 <_free_r>:
 800c478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c47a:	2900      	cmp	r1, #0
 800c47c:	d047      	beq.n	800c50e <_free_r+0x96>
 800c47e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c482:	1f0c      	subs	r4, r1, #4
 800c484:	9001      	str	r0, [sp, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	bfb8      	it	lt
 800c48a:	18e4      	addlt	r4, r4, r3
 800c48c:	f000 fa66 	bl	800c95c <__malloc_lock>
 800c490:	4a20      	ldr	r2, [pc, #128]	; (800c514 <_free_r+0x9c>)
 800c492:	9801      	ldr	r0, [sp, #4]
 800c494:	6813      	ldr	r3, [r2, #0]
 800c496:	4615      	mov	r5, r2
 800c498:	b933      	cbnz	r3, 800c4a8 <_free_r+0x30>
 800c49a:	6063      	str	r3, [r4, #4]
 800c49c:	6014      	str	r4, [r2, #0]
 800c49e:	b003      	add	sp, #12
 800c4a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4a4:	f000 ba60 	b.w	800c968 <__malloc_unlock>
 800c4a8:	42a3      	cmp	r3, r4
 800c4aa:	d90b      	bls.n	800c4c4 <_free_r+0x4c>
 800c4ac:	6821      	ldr	r1, [r4, #0]
 800c4ae:	1862      	adds	r2, r4, r1
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	bf02      	ittt	eq
 800c4b4:	681a      	ldreq	r2, [r3, #0]
 800c4b6:	685b      	ldreq	r3, [r3, #4]
 800c4b8:	1852      	addeq	r2, r2, r1
 800c4ba:	6063      	str	r3, [r4, #4]
 800c4bc:	bf08      	it	eq
 800c4be:	6022      	streq	r2, [r4, #0]
 800c4c0:	602c      	str	r4, [r5, #0]
 800c4c2:	e7ec      	b.n	800c49e <_free_r+0x26>
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	b10b      	cbz	r3, 800c4ce <_free_r+0x56>
 800c4ca:	42a3      	cmp	r3, r4
 800c4cc:	d9fa      	bls.n	800c4c4 <_free_r+0x4c>
 800c4ce:	6811      	ldr	r1, [r2, #0]
 800c4d0:	1855      	adds	r5, r2, r1
 800c4d2:	42a5      	cmp	r5, r4
 800c4d4:	d10b      	bne.n	800c4ee <_free_r+0x76>
 800c4d6:	6824      	ldr	r4, [r4, #0]
 800c4d8:	4421      	add	r1, r4
 800c4da:	1854      	adds	r4, r2, r1
 800c4dc:	6011      	str	r1, [r2, #0]
 800c4de:	42a3      	cmp	r3, r4
 800c4e0:	d1dd      	bne.n	800c49e <_free_r+0x26>
 800c4e2:	681c      	ldr	r4, [r3, #0]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	4421      	add	r1, r4
 800c4e8:	6053      	str	r3, [r2, #4]
 800c4ea:	6011      	str	r1, [r2, #0]
 800c4ec:	e7d7      	b.n	800c49e <_free_r+0x26>
 800c4ee:	d902      	bls.n	800c4f6 <_free_r+0x7e>
 800c4f0:	230c      	movs	r3, #12
 800c4f2:	6003      	str	r3, [r0, #0]
 800c4f4:	e7d3      	b.n	800c49e <_free_r+0x26>
 800c4f6:	6825      	ldr	r5, [r4, #0]
 800c4f8:	1961      	adds	r1, r4, r5
 800c4fa:	428b      	cmp	r3, r1
 800c4fc:	bf02      	ittt	eq
 800c4fe:	6819      	ldreq	r1, [r3, #0]
 800c500:	685b      	ldreq	r3, [r3, #4]
 800c502:	1949      	addeq	r1, r1, r5
 800c504:	6063      	str	r3, [r4, #4]
 800c506:	bf08      	it	eq
 800c508:	6021      	streq	r1, [r4, #0]
 800c50a:	6054      	str	r4, [r2, #4]
 800c50c:	e7c7      	b.n	800c49e <_free_r+0x26>
 800c50e:	b003      	add	sp, #12
 800c510:	bd30      	pop	{r4, r5, pc}
 800c512:	bf00      	nop
 800c514:	2000021c 	.word	0x2000021c

0800c518 <_malloc_r>:
 800c518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51a:	1ccd      	adds	r5, r1, #3
 800c51c:	4606      	mov	r6, r0
 800c51e:	f025 0503 	bic.w	r5, r5, #3
 800c522:	3508      	adds	r5, #8
 800c524:	2d0c      	cmp	r5, #12
 800c526:	bf38      	it	cc
 800c528:	250c      	movcc	r5, #12
 800c52a:	2d00      	cmp	r5, #0
 800c52c:	db01      	blt.n	800c532 <_malloc_r+0x1a>
 800c52e:	42a9      	cmp	r1, r5
 800c530:	d903      	bls.n	800c53a <_malloc_r+0x22>
 800c532:	230c      	movs	r3, #12
 800c534:	6033      	str	r3, [r6, #0]
 800c536:	2000      	movs	r0, #0
 800c538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c53a:	f000 fa0f 	bl	800c95c <__malloc_lock>
 800c53e:	4921      	ldr	r1, [pc, #132]	; (800c5c4 <_malloc_r+0xac>)
 800c540:	680a      	ldr	r2, [r1, #0]
 800c542:	4614      	mov	r4, r2
 800c544:	b99c      	cbnz	r4, 800c56e <_malloc_r+0x56>
 800c546:	4f20      	ldr	r7, [pc, #128]	; (800c5c8 <_malloc_r+0xb0>)
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	b923      	cbnz	r3, 800c556 <_malloc_r+0x3e>
 800c54c:	4621      	mov	r1, r4
 800c54e:	4630      	mov	r0, r6
 800c550:	f000 f998 	bl	800c884 <_sbrk_r>
 800c554:	6038      	str	r0, [r7, #0]
 800c556:	4629      	mov	r1, r5
 800c558:	4630      	mov	r0, r6
 800c55a:	f000 f993 	bl	800c884 <_sbrk_r>
 800c55e:	1c43      	adds	r3, r0, #1
 800c560:	d123      	bne.n	800c5aa <_malloc_r+0x92>
 800c562:	230c      	movs	r3, #12
 800c564:	4630      	mov	r0, r6
 800c566:	6033      	str	r3, [r6, #0]
 800c568:	f000 f9fe 	bl	800c968 <__malloc_unlock>
 800c56c:	e7e3      	b.n	800c536 <_malloc_r+0x1e>
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	1b5b      	subs	r3, r3, r5
 800c572:	d417      	bmi.n	800c5a4 <_malloc_r+0x8c>
 800c574:	2b0b      	cmp	r3, #11
 800c576:	d903      	bls.n	800c580 <_malloc_r+0x68>
 800c578:	6023      	str	r3, [r4, #0]
 800c57a:	441c      	add	r4, r3
 800c57c:	6025      	str	r5, [r4, #0]
 800c57e:	e004      	b.n	800c58a <_malloc_r+0x72>
 800c580:	6863      	ldr	r3, [r4, #4]
 800c582:	42a2      	cmp	r2, r4
 800c584:	bf0c      	ite	eq
 800c586:	600b      	streq	r3, [r1, #0]
 800c588:	6053      	strne	r3, [r2, #4]
 800c58a:	4630      	mov	r0, r6
 800c58c:	f000 f9ec 	bl	800c968 <__malloc_unlock>
 800c590:	f104 000b 	add.w	r0, r4, #11
 800c594:	1d23      	adds	r3, r4, #4
 800c596:	f020 0007 	bic.w	r0, r0, #7
 800c59a:	1ac2      	subs	r2, r0, r3
 800c59c:	d0cc      	beq.n	800c538 <_malloc_r+0x20>
 800c59e:	1a1b      	subs	r3, r3, r0
 800c5a0:	50a3      	str	r3, [r4, r2]
 800c5a2:	e7c9      	b.n	800c538 <_malloc_r+0x20>
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	6864      	ldr	r4, [r4, #4]
 800c5a8:	e7cc      	b.n	800c544 <_malloc_r+0x2c>
 800c5aa:	1cc4      	adds	r4, r0, #3
 800c5ac:	f024 0403 	bic.w	r4, r4, #3
 800c5b0:	42a0      	cmp	r0, r4
 800c5b2:	d0e3      	beq.n	800c57c <_malloc_r+0x64>
 800c5b4:	1a21      	subs	r1, r4, r0
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f000 f964 	bl	800c884 <_sbrk_r>
 800c5bc:	3001      	adds	r0, #1
 800c5be:	d1dd      	bne.n	800c57c <_malloc_r+0x64>
 800c5c0:	e7cf      	b.n	800c562 <_malloc_r+0x4a>
 800c5c2:	bf00      	nop
 800c5c4:	2000021c 	.word	0x2000021c
 800c5c8:	20000220 	.word	0x20000220

0800c5cc <__ssputs_r>:
 800c5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d0:	688e      	ldr	r6, [r1, #8]
 800c5d2:	4682      	mov	sl, r0
 800c5d4:	460c      	mov	r4, r1
 800c5d6:	4690      	mov	r8, r2
 800c5d8:	429e      	cmp	r6, r3
 800c5da:	461f      	mov	r7, r3
 800c5dc:	d838      	bhi.n	800c650 <__ssputs_r+0x84>
 800c5de:	898a      	ldrh	r2, [r1, #12]
 800c5e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5e4:	d032      	beq.n	800c64c <__ssputs_r+0x80>
 800c5e6:	6825      	ldr	r5, [r4, #0]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	6909      	ldr	r1, [r1, #16]
 800c5ec:	eba5 0901 	sub.w	r9, r5, r1
 800c5f0:	6965      	ldr	r5, [r4, #20]
 800c5f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5f6:	444b      	add	r3, r9
 800c5f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5fc:	106d      	asrs	r5, r5, #1
 800c5fe:	429d      	cmp	r5, r3
 800c600:	bf38      	it	cc
 800c602:	461d      	movcc	r5, r3
 800c604:	0553      	lsls	r3, r2, #21
 800c606:	d531      	bpl.n	800c66c <__ssputs_r+0xa0>
 800c608:	4629      	mov	r1, r5
 800c60a:	f7ff ff85 	bl	800c518 <_malloc_r>
 800c60e:	4606      	mov	r6, r0
 800c610:	b950      	cbnz	r0, 800c628 <__ssputs_r+0x5c>
 800c612:	230c      	movs	r3, #12
 800c614:	f04f 30ff 	mov.w	r0, #4294967295
 800c618:	f8ca 3000 	str.w	r3, [sl]
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c622:	81a3      	strh	r3, [r4, #12]
 800c624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c628:	464a      	mov	r2, r9
 800c62a:	6921      	ldr	r1, [r4, #16]
 800c62c:	f7ff fb80 	bl	800bd30 <memcpy>
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c63a:	81a3      	strh	r3, [r4, #12]
 800c63c:	6126      	str	r6, [r4, #16]
 800c63e:	444e      	add	r6, r9
 800c640:	6165      	str	r5, [r4, #20]
 800c642:	eba5 0509 	sub.w	r5, r5, r9
 800c646:	6026      	str	r6, [r4, #0]
 800c648:	463e      	mov	r6, r7
 800c64a:	60a5      	str	r5, [r4, #8]
 800c64c:	42be      	cmp	r6, r7
 800c64e:	d900      	bls.n	800c652 <__ssputs_r+0x86>
 800c650:	463e      	mov	r6, r7
 800c652:	4632      	mov	r2, r6
 800c654:	4641      	mov	r1, r8
 800c656:	6820      	ldr	r0, [r4, #0]
 800c658:	f000 f966 	bl	800c928 <memmove>
 800c65c:	68a3      	ldr	r3, [r4, #8]
 800c65e:	6822      	ldr	r2, [r4, #0]
 800c660:	2000      	movs	r0, #0
 800c662:	1b9b      	subs	r3, r3, r6
 800c664:	4432      	add	r2, r6
 800c666:	60a3      	str	r3, [r4, #8]
 800c668:	6022      	str	r2, [r4, #0]
 800c66a:	e7db      	b.n	800c624 <__ssputs_r+0x58>
 800c66c:	462a      	mov	r2, r5
 800c66e:	f000 f981 	bl	800c974 <_realloc_r>
 800c672:	4606      	mov	r6, r0
 800c674:	2800      	cmp	r0, #0
 800c676:	d1e1      	bne.n	800c63c <__ssputs_r+0x70>
 800c678:	6921      	ldr	r1, [r4, #16]
 800c67a:	4650      	mov	r0, sl
 800c67c:	f7ff fefc 	bl	800c478 <_free_r>
 800c680:	e7c7      	b.n	800c612 <__ssputs_r+0x46>
	...

0800c684 <_svfiprintf_r>:
 800c684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c688:	4698      	mov	r8, r3
 800c68a:	898b      	ldrh	r3, [r1, #12]
 800c68c:	b09d      	sub	sp, #116	; 0x74
 800c68e:	4607      	mov	r7, r0
 800c690:	061b      	lsls	r3, r3, #24
 800c692:	460d      	mov	r5, r1
 800c694:	4614      	mov	r4, r2
 800c696:	d50e      	bpl.n	800c6b6 <_svfiprintf_r+0x32>
 800c698:	690b      	ldr	r3, [r1, #16]
 800c69a:	b963      	cbnz	r3, 800c6b6 <_svfiprintf_r+0x32>
 800c69c:	2140      	movs	r1, #64	; 0x40
 800c69e:	f7ff ff3b 	bl	800c518 <_malloc_r>
 800c6a2:	6028      	str	r0, [r5, #0]
 800c6a4:	6128      	str	r0, [r5, #16]
 800c6a6:	b920      	cbnz	r0, 800c6b2 <_svfiprintf_r+0x2e>
 800c6a8:	230c      	movs	r3, #12
 800c6aa:	603b      	str	r3, [r7, #0]
 800c6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b0:	e0d1      	b.n	800c856 <_svfiprintf_r+0x1d2>
 800c6b2:	2340      	movs	r3, #64	; 0x40
 800c6b4:	616b      	str	r3, [r5, #20]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6bc:	f04f 0901 	mov.w	r9, #1
 800c6c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c870 <_svfiprintf_r+0x1ec>
 800c6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c6:	2320      	movs	r3, #32
 800c6c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6cc:	2330      	movs	r3, #48	; 0x30
 800c6ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6d2:	4623      	mov	r3, r4
 800c6d4:	469a      	mov	sl, r3
 800c6d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6da:	b10a      	cbz	r2, 800c6e0 <_svfiprintf_r+0x5c>
 800c6dc:	2a25      	cmp	r2, #37	; 0x25
 800c6de:	d1f9      	bne.n	800c6d4 <_svfiprintf_r+0x50>
 800c6e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e4:	d00b      	beq.n	800c6fe <_svfiprintf_r+0x7a>
 800c6e6:	465b      	mov	r3, fp
 800c6e8:	4622      	mov	r2, r4
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	f7ff ff6d 	bl	800c5cc <__ssputs_r>
 800c6f2:	3001      	adds	r0, #1
 800c6f4:	f000 80aa 	beq.w	800c84c <_svfiprintf_r+0x1c8>
 800c6f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6fa:	445a      	add	r2, fp
 800c6fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c6fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c702:	2b00      	cmp	r3, #0
 800c704:	f000 80a2 	beq.w	800c84c <_svfiprintf_r+0x1c8>
 800c708:	2300      	movs	r3, #0
 800c70a:	f04f 32ff 	mov.w	r2, #4294967295
 800c70e:	f10a 0a01 	add.w	sl, sl, #1
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	9307      	str	r3, [sp, #28]
 800c716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c71a:	931a      	str	r3, [sp, #104]	; 0x68
 800c71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c720:	4654      	mov	r4, sl
 800c722:	2205      	movs	r2, #5
 800c724:	4852      	ldr	r0, [pc, #328]	; (800c870 <_svfiprintf_r+0x1ec>)
 800c726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72a:	f7ff faf3 	bl	800bd14 <memchr>
 800c72e:	9a04      	ldr	r2, [sp, #16]
 800c730:	b9d8      	cbnz	r0, 800c76a <_svfiprintf_r+0xe6>
 800c732:	06d0      	lsls	r0, r2, #27
 800c734:	bf44      	itt	mi
 800c736:	2320      	movmi	r3, #32
 800c738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c73c:	0711      	lsls	r1, r2, #28
 800c73e:	bf44      	itt	mi
 800c740:	232b      	movmi	r3, #43	; 0x2b
 800c742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c746:	f89a 3000 	ldrb.w	r3, [sl]
 800c74a:	2b2a      	cmp	r3, #42	; 0x2a
 800c74c:	d015      	beq.n	800c77a <_svfiprintf_r+0xf6>
 800c74e:	9a07      	ldr	r2, [sp, #28]
 800c750:	4654      	mov	r4, sl
 800c752:	2000      	movs	r0, #0
 800c754:	f04f 0c0a 	mov.w	ip, #10
 800c758:	4621      	mov	r1, r4
 800c75a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c75e:	3b30      	subs	r3, #48	; 0x30
 800c760:	2b09      	cmp	r3, #9
 800c762:	d94e      	bls.n	800c802 <_svfiprintf_r+0x17e>
 800c764:	b1b0      	cbz	r0, 800c794 <_svfiprintf_r+0x110>
 800c766:	9207      	str	r2, [sp, #28]
 800c768:	e014      	b.n	800c794 <_svfiprintf_r+0x110>
 800c76a:	eba0 0308 	sub.w	r3, r0, r8
 800c76e:	46a2      	mov	sl, r4
 800c770:	fa09 f303 	lsl.w	r3, r9, r3
 800c774:	4313      	orrs	r3, r2
 800c776:	9304      	str	r3, [sp, #16]
 800c778:	e7d2      	b.n	800c720 <_svfiprintf_r+0x9c>
 800c77a:	9b03      	ldr	r3, [sp, #12]
 800c77c:	1d19      	adds	r1, r3, #4
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	9103      	str	r1, [sp, #12]
 800c784:	bfbb      	ittet	lt
 800c786:	425b      	neglt	r3, r3
 800c788:	f042 0202 	orrlt.w	r2, r2, #2
 800c78c:	9307      	strge	r3, [sp, #28]
 800c78e:	9307      	strlt	r3, [sp, #28]
 800c790:	bfb8      	it	lt
 800c792:	9204      	strlt	r2, [sp, #16]
 800c794:	7823      	ldrb	r3, [r4, #0]
 800c796:	2b2e      	cmp	r3, #46	; 0x2e
 800c798:	d10c      	bne.n	800c7b4 <_svfiprintf_r+0x130>
 800c79a:	7863      	ldrb	r3, [r4, #1]
 800c79c:	2b2a      	cmp	r3, #42	; 0x2a
 800c79e:	d135      	bne.n	800c80c <_svfiprintf_r+0x188>
 800c7a0:	9b03      	ldr	r3, [sp, #12]
 800c7a2:	3402      	adds	r4, #2
 800c7a4:	1d1a      	adds	r2, r3, #4
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	9203      	str	r2, [sp, #12]
 800c7ac:	bfb8      	it	lt
 800c7ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7b2:	9305      	str	r3, [sp, #20]
 800c7b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c880 <_svfiprintf_r+0x1fc>
 800c7b8:	2203      	movs	r2, #3
 800c7ba:	7821      	ldrb	r1, [r4, #0]
 800c7bc:	4650      	mov	r0, sl
 800c7be:	f7ff faa9 	bl	800bd14 <memchr>
 800c7c2:	b140      	cbz	r0, 800c7d6 <_svfiprintf_r+0x152>
 800c7c4:	2340      	movs	r3, #64	; 0x40
 800c7c6:	eba0 000a 	sub.w	r0, r0, sl
 800c7ca:	3401      	adds	r4, #1
 800c7cc:	fa03 f000 	lsl.w	r0, r3, r0
 800c7d0:	9b04      	ldr	r3, [sp, #16]
 800c7d2:	4303      	orrs	r3, r0
 800c7d4:	9304      	str	r3, [sp, #16]
 800c7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7da:	2206      	movs	r2, #6
 800c7dc:	4825      	ldr	r0, [pc, #148]	; (800c874 <_svfiprintf_r+0x1f0>)
 800c7de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7e2:	f7ff fa97 	bl	800bd14 <memchr>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d038      	beq.n	800c85c <_svfiprintf_r+0x1d8>
 800c7ea:	4b23      	ldr	r3, [pc, #140]	; (800c878 <_svfiprintf_r+0x1f4>)
 800c7ec:	bb1b      	cbnz	r3, 800c836 <_svfiprintf_r+0x1b2>
 800c7ee:	9b03      	ldr	r3, [sp, #12]
 800c7f0:	3307      	adds	r3, #7
 800c7f2:	f023 0307 	bic.w	r3, r3, #7
 800c7f6:	3308      	adds	r3, #8
 800c7f8:	9303      	str	r3, [sp, #12]
 800c7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7fc:	4433      	add	r3, r6
 800c7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c800:	e767      	b.n	800c6d2 <_svfiprintf_r+0x4e>
 800c802:	fb0c 3202 	mla	r2, ip, r2, r3
 800c806:	460c      	mov	r4, r1
 800c808:	2001      	movs	r0, #1
 800c80a:	e7a5      	b.n	800c758 <_svfiprintf_r+0xd4>
 800c80c:	2300      	movs	r3, #0
 800c80e:	3401      	adds	r4, #1
 800c810:	f04f 0c0a 	mov.w	ip, #10
 800c814:	4619      	mov	r1, r3
 800c816:	9305      	str	r3, [sp, #20]
 800c818:	4620      	mov	r0, r4
 800c81a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c81e:	3a30      	subs	r2, #48	; 0x30
 800c820:	2a09      	cmp	r2, #9
 800c822:	d903      	bls.n	800c82c <_svfiprintf_r+0x1a8>
 800c824:	2b00      	cmp	r3, #0
 800c826:	d0c5      	beq.n	800c7b4 <_svfiprintf_r+0x130>
 800c828:	9105      	str	r1, [sp, #20]
 800c82a:	e7c3      	b.n	800c7b4 <_svfiprintf_r+0x130>
 800c82c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c830:	4604      	mov	r4, r0
 800c832:	2301      	movs	r3, #1
 800c834:	e7f0      	b.n	800c818 <_svfiprintf_r+0x194>
 800c836:	ab03      	add	r3, sp, #12
 800c838:	462a      	mov	r2, r5
 800c83a:	a904      	add	r1, sp, #16
 800c83c:	4638      	mov	r0, r7
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	4b0e      	ldr	r3, [pc, #56]	; (800c87c <_svfiprintf_r+0x1f8>)
 800c842:	f7fd ffe7 	bl	800a814 <_printf_float>
 800c846:	1c42      	adds	r2, r0, #1
 800c848:	4606      	mov	r6, r0
 800c84a:	d1d6      	bne.n	800c7fa <_svfiprintf_r+0x176>
 800c84c:	89ab      	ldrh	r3, [r5, #12]
 800c84e:	065b      	lsls	r3, r3, #25
 800c850:	f53f af2c 	bmi.w	800c6ac <_svfiprintf_r+0x28>
 800c854:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c856:	b01d      	add	sp, #116	; 0x74
 800c858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85c:	ab03      	add	r3, sp, #12
 800c85e:	462a      	mov	r2, r5
 800c860:	a904      	add	r1, sp, #16
 800c862:	4638      	mov	r0, r7
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	4b05      	ldr	r3, [pc, #20]	; (800c87c <_svfiprintf_r+0x1f8>)
 800c868:	f7fe fa7a 	bl	800ad60 <_printf_i>
 800c86c:	e7eb      	b.n	800c846 <_svfiprintf_r+0x1c2>
 800c86e:	bf00      	nop
 800c870:	0800dbbc 	.word	0x0800dbbc
 800c874:	0800dbc6 	.word	0x0800dbc6
 800c878:	0800a815 	.word	0x0800a815
 800c87c:	0800c5cd 	.word	0x0800c5cd
 800c880:	0800dbc2 	.word	0x0800dbc2

0800c884 <_sbrk_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	2300      	movs	r3, #0
 800c888:	4d05      	ldr	r5, [pc, #20]	; (800c8a0 <_sbrk_r+0x1c>)
 800c88a:	4604      	mov	r4, r0
 800c88c:	4608      	mov	r0, r1
 800c88e:	602b      	str	r3, [r5, #0]
 800c890:	f7f5 f9e6 	bl	8001c60 <_sbrk>
 800c894:	1c43      	adds	r3, r0, #1
 800c896:	d102      	bne.n	800c89e <_sbrk_r+0x1a>
 800c898:	682b      	ldr	r3, [r5, #0]
 800c89a:	b103      	cbz	r3, 800c89e <_sbrk_r+0x1a>
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	bd38      	pop	{r3, r4, r5, pc}
 800c8a0:	2000034c 	.word	0x2000034c

0800c8a4 <__assert_func>:
 800c8a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8a6:	4614      	mov	r4, r2
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	4b09      	ldr	r3, [pc, #36]	; (800c8d0 <__assert_func+0x2c>)
 800c8ac:	4605      	mov	r5, r0
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68d8      	ldr	r0, [r3, #12]
 800c8b2:	b14c      	cbz	r4, 800c8c8 <__assert_func+0x24>
 800c8b4:	4b07      	ldr	r3, [pc, #28]	; (800c8d4 <__assert_func+0x30>)
 800c8b6:	9100      	str	r1, [sp, #0]
 800c8b8:	4907      	ldr	r1, [pc, #28]	; (800c8d8 <__assert_func+0x34>)
 800c8ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8be:	462b      	mov	r3, r5
 800c8c0:	f000 f80e 	bl	800c8e0 <fiprintf>
 800c8c4:	f000 faa4 	bl	800ce10 <abort>
 800c8c8:	4b04      	ldr	r3, [pc, #16]	; (800c8dc <__assert_func+0x38>)
 800c8ca:	461c      	mov	r4, r3
 800c8cc:	e7f3      	b.n	800c8b6 <__assert_func+0x12>
 800c8ce:	bf00      	nop
 800c8d0:	20000024 	.word	0x20000024
 800c8d4:	0800dbcd 	.word	0x0800dbcd
 800c8d8:	0800dbda 	.word	0x0800dbda
 800c8dc:	0800dc08 	.word	0x0800dc08

0800c8e0 <fiprintf>:
 800c8e0:	b40e      	push	{r1, r2, r3}
 800c8e2:	b503      	push	{r0, r1, lr}
 800c8e4:	ab03      	add	r3, sp, #12
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	4805      	ldr	r0, [pc, #20]	; (800c900 <fiprintf+0x20>)
 800c8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ee:	6800      	ldr	r0, [r0, #0]
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	f000 f88f 	bl	800ca14 <_vfiprintf_r>
 800c8f6:	b002      	add	sp, #8
 800c8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8fc:	b003      	add	sp, #12
 800c8fe:	4770      	bx	lr
 800c900:	20000024 	.word	0x20000024

0800c904 <__ascii_mbtowc>:
 800c904:	b082      	sub	sp, #8
 800c906:	b901      	cbnz	r1, 800c90a <__ascii_mbtowc+0x6>
 800c908:	a901      	add	r1, sp, #4
 800c90a:	b142      	cbz	r2, 800c91e <__ascii_mbtowc+0x1a>
 800c90c:	b14b      	cbz	r3, 800c922 <__ascii_mbtowc+0x1e>
 800c90e:	7813      	ldrb	r3, [r2, #0]
 800c910:	600b      	str	r3, [r1, #0]
 800c912:	7812      	ldrb	r2, [r2, #0]
 800c914:	1e10      	subs	r0, r2, #0
 800c916:	bf18      	it	ne
 800c918:	2001      	movne	r0, #1
 800c91a:	b002      	add	sp, #8
 800c91c:	4770      	bx	lr
 800c91e:	4610      	mov	r0, r2
 800c920:	e7fb      	b.n	800c91a <__ascii_mbtowc+0x16>
 800c922:	f06f 0001 	mvn.w	r0, #1
 800c926:	e7f8      	b.n	800c91a <__ascii_mbtowc+0x16>

0800c928 <memmove>:
 800c928:	4288      	cmp	r0, r1
 800c92a:	b510      	push	{r4, lr}
 800c92c:	eb01 0402 	add.w	r4, r1, r2
 800c930:	d902      	bls.n	800c938 <memmove+0x10>
 800c932:	4284      	cmp	r4, r0
 800c934:	4623      	mov	r3, r4
 800c936:	d807      	bhi.n	800c948 <memmove+0x20>
 800c938:	1e43      	subs	r3, r0, #1
 800c93a:	42a1      	cmp	r1, r4
 800c93c:	d008      	beq.n	800c950 <memmove+0x28>
 800c93e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c942:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c946:	e7f8      	b.n	800c93a <memmove+0x12>
 800c948:	4402      	add	r2, r0
 800c94a:	4601      	mov	r1, r0
 800c94c:	428a      	cmp	r2, r1
 800c94e:	d100      	bne.n	800c952 <memmove+0x2a>
 800c950:	bd10      	pop	{r4, pc}
 800c952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c95a:	e7f7      	b.n	800c94c <memmove+0x24>

0800c95c <__malloc_lock>:
 800c95c:	4801      	ldr	r0, [pc, #4]	; (800c964 <__malloc_lock+0x8>)
 800c95e:	f000 bc15 	b.w	800d18c <__retarget_lock_acquire_recursive>
 800c962:	bf00      	nop
 800c964:	20000354 	.word	0x20000354

0800c968 <__malloc_unlock>:
 800c968:	4801      	ldr	r0, [pc, #4]	; (800c970 <__malloc_unlock+0x8>)
 800c96a:	f000 bc10 	b.w	800d18e <__retarget_lock_release_recursive>
 800c96e:	bf00      	nop
 800c970:	20000354 	.word	0x20000354

0800c974 <_realloc_r>:
 800c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c976:	4607      	mov	r7, r0
 800c978:	4614      	mov	r4, r2
 800c97a:	460e      	mov	r6, r1
 800c97c:	b921      	cbnz	r1, 800c988 <_realloc_r+0x14>
 800c97e:	4611      	mov	r1, r2
 800c980:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c984:	f7ff bdc8 	b.w	800c518 <_malloc_r>
 800c988:	b922      	cbnz	r2, 800c994 <_realloc_r+0x20>
 800c98a:	4625      	mov	r5, r4
 800c98c:	f7ff fd74 	bl	800c478 <_free_r>
 800c990:	4628      	mov	r0, r5
 800c992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c994:	f000 fc60 	bl	800d258 <_malloc_usable_size_r>
 800c998:	42a0      	cmp	r0, r4
 800c99a:	d20f      	bcs.n	800c9bc <_realloc_r+0x48>
 800c99c:	4621      	mov	r1, r4
 800c99e:	4638      	mov	r0, r7
 800c9a0:	f7ff fdba 	bl	800c518 <_malloc_r>
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d0f2      	beq.n	800c990 <_realloc_r+0x1c>
 800c9aa:	4631      	mov	r1, r6
 800c9ac:	4622      	mov	r2, r4
 800c9ae:	f7ff f9bf 	bl	800bd30 <memcpy>
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	4638      	mov	r0, r7
 800c9b6:	f7ff fd5f 	bl	800c478 <_free_r>
 800c9ba:	e7e9      	b.n	800c990 <_realloc_r+0x1c>
 800c9bc:	4635      	mov	r5, r6
 800c9be:	e7e7      	b.n	800c990 <_realloc_r+0x1c>

0800c9c0 <__sfputc_r>:
 800c9c0:	6893      	ldr	r3, [r2, #8]
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	6093      	str	r3, [r2, #8]
 800c9c8:	b410      	push	{r4}
 800c9ca:	da08      	bge.n	800c9de <__sfputc_r+0x1e>
 800c9cc:	6994      	ldr	r4, [r2, #24]
 800c9ce:	42a3      	cmp	r3, r4
 800c9d0:	db01      	blt.n	800c9d6 <__sfputc_r+0x16>
 800c9d2:	290a      	cmp	r1, #10
 800c9d4:	d103      	bne.n	800c9de <__sfputc_r+0x1e>
 800c9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9da:	f000 b94b 	b.w	800cc74 <__swbuf_r>
 800c9de:	6813      	ldr	r3, [r2, #0]
 800c9e0:	1c58      	adds	r0, r3, #1
 800c9e2:	6010      	str	r0, [r2, #0]
 800c9e4:	4608      	mov	r0, r1
 800c9e6:	7019      	strb	r1, [r3, #0]
 800c9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <__sfputs_r>:
 800c9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	460f      	mov	r7, r1
 800c9f4:	4614      	mov	r4, r2
 800c9f6:	18d5      	adds	r5, r2, r3
 800c9f8:	42ac      	cmp	r4, r5
 800c9fa:	d101      	bne.n	800ca00 <__sfputs_r+0x12>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	e007      	b.n	800ca10 <__sfputs_r+0x22>
 800ca00:	463a      	mov	r2, r7
 800ca02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7ff ffda 	bl	800c9c0 <__sfputc_r>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d1f3      	bne.n	800c9f8 <__sfputs_r+0xa>
 800ca10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca14 <_vfiprintf_r>:
 800ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca18:	460d      	mov	r5, r1
 800ca1a:	b09d      	sub	sp, #116	; 0x74
 800ca1c:	4614      	mov	r4, r2
 800ca1e:	4698      	mov	r8, r3
 800ca20:	4606      	mov	r6, r0
 800ca22:	b118      	cbz	r0, 800ca2c <_vfiprintf_r+0x18>
 800ca24:	6983      	ldr	r3, [r0, #24]
 800ca26:	b90b      	cbnz	r3, 800ca2c <_vfiprintf_r+0x18>
 800ca28:	f000 fb12 	bl	800d050 <__sinit>
 800ca2c:	4b89      	ldr	r3, [pc, #548]	; (800cc54 <_vfiprintf_r+0x240>)
 800ca2e:	429d      	cmp	r5, r3
 800ca30:	d11b      	bne.n	800ca6a <_vfiprintf_r+0x56>
 800ca32:	6875      	ldr	r5, [r6, #4]
 800ca34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca36:	07d9      	lsls	r1, r3, #31
 800ca38:	d405      	bmi.n	800ca46 <_vfiprintf_r+0x32>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	059a      	lsls	r2, r3, #22
 800ca3e:	d402      	bmi.n	800ca46 <_vfiprintf_r+0x32>
 800ca40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca42:	f000 fba3 	bl	800d18c <__retarget_lock_acquire_recursive>
 800ca46:	89ab      	ldrh	r3, [r5, #12]
 800ca48:	071b      	lsls	r3, r3, #28
 800ca4a:	d501      	bpl.n	800ca50 <_vfiprintf_r+0x3c>
 800ca4c:	692b      	ldr	r3, [r5, #16]
 800ca4e:	b9eb      	cbnz	r3, 800ca8c <_vfiprintf_r+0x78>
 800ca50:	4629      	mov	r1, r5
 800ca52:	4630      	mov	r0, r6
 800ca54:	f000 f96e 	bl	800cd34 <__swsetup_r>
 800ca58:	b1c0      	cbz	r0, 800ca8c <_vfiprintf_r+0x78>
 800ca5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca5c:	07dc      	lsls	r4, r3, #31
 800ca5e:	d50e      	bpl.n	800ca7e <_vfiprintf_r+0x6a>
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295
 800ca64:	b01d      	add	sp, #116	; 0x74
 800ca66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6a:	4b7b      	ldr	r3, [pc, #492]	; (800cc58 <_vfiprintf_r+0x244>)
 800ca6c:	429d      	cmp	r5, r3
 800ca6e:	d101      	bne.n	800ca74 <_vfiprintf_r+0x60>
 800ca70:	68b5      	ldr	r5, [r6, #8]
 800ca72:	e7df      	b.n	800ca34 <_vfiprintf_r+0x20>
 800ca74:	4b79      	ldr	r3, [pc, #484]	; (800cc5c <_vfiprintf_r+0x248>)
 800ca76:	429d      	cmp	r5, r3
 800ca78:	bf08      	it	eq
 800ca7a:	68f5      	ldreq	r5, [r6, #12]
 800ca7c:	e7da      	b.n	800ca34 <_vfiprintf_r+0x20>
 800ca7e:	89ab      	ldrh	r3, [r5, #12]
 800ca80:	0598      	lsls	r0, r3, #22
 800ca82:	d4ed      	bmi.n	800ca60 <_vfiprintf_r+0x4c>
 800ca84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca86:	f000 fb82 	bl	800d18e <__retarget_lock_release_recursive>
 800ca8a:	e7e9      	b.n	800ca60 <_vfiprintf_r+0x4c>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca92:	f04f 0901 	mov.w	r9, #1
 800ca96:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800cc60 <_vfiprintf_r+0x24c>
 800ca9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca9c:	2320      	movs	r3, #32
 800ca9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800caa2:	2330      	movs	r3, #48	; 0x30
 800caa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caa8:	4623      	mov	r3, r4
 800caaa:	469a      	mov	sl, r3
 800caac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cab0:	b10a      	cbz	r2, 800cab6 <_vfiprintf_r+0xa2>
 800cab2:	2a25      	cmp	r2, #37	; 0x25
 800cab4:	d1f9      	bne.n	800caaa <_vfiprintf_r+0x96>
 800cab6:	ebba 0b04 	subs.w	fp, sl, r4
 800caba:	d00b      	beq.n	800cad4 <_vfiprintf_r+0xc0>
 800cabc:	465b      	mov	r3, fp
 800cabe:	4622      	mov	r2, r4
 800cac0:	4629      	mov	r1, r5
 800cac2:	4630      	mov	r0, r6
 800cac4:	f7ff ff93 	bl	800c9ee <__sfputs_r>
 800cac8:	3001      	adds	r0, #1
 800caca:	f000 80aa 	beq.w	800cc22 <_vfiprintf_r+0x20e>
 800cace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad0:	445a      	add	r2, fp
 800cad2:	9209      	str	r2, [sp, #36]	; 0x24
 800cad4:	f89a 3000 	ldrb.w	r3, [sl]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f000 80a2 	beq.w	800cc22 <_vfiprintf_r+0x20e>
 800cade:	2300      	movs	r3, #0
 800cae0:	f04f 32ff 	mov.w	r2, #4294967295
 800cae4:	f10a 0a01 	add.w	sl, sl, #1
 800cae8:	9304      	str	r3, [sp, #16]
 800caea:	9307      	str	r3, [sp, #28]
 800caec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caf0:	931a      	str	r3, [sp, #104]	; 0x68
 800caf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caf6:	4654      	mov	r4, sl
 800caf8:	2205      	movs	r2, #5
 800cafa:	4859      	ldr	r0, [pc, #356]	; (800cc60 <_vfiprintf_r+0x24c>)
 800cafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb00:	f7ff f908 	bl	800bd14 <memchr>
 800cb04:	9a04      	ldr	r2, [sp, #16]
 800cb06:	b9d8      	cbnz	r0, 800cb40 <_vfiprintf_r+0x12c>
 800cb08:	06d1      	lsls	r1, r2, #27
 800cb0a:	bf44      	itt	mi
 800cb0c:	2320      	movmi	r3, #32
 800cb0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb12:	0713      	lsls	r3, r2, #28
 800cb14:	bf44      	itt	mi
 800cb16:	232b      	movmi	r3, #43	; 0x2b
 800cb18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb20:	2b2a      	cmp	r3, #42	; 0x2a
 800cb22:	d015      	beq.n	800cb50 <_vfiprintf_r+0x13c>
 800cb24:	9a07      	ldr	r2, [sp, #28]
 800cb26:	4654      	mov	r4, sl
 800cb28:	2000      	movs	r0, #0
 800cb2a:	f04f 0c0a 	mov.w	ip, #10
 800cb2e:	4621      	mov	r1, r4
 800cb30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb34:	3b30      	subs	r3, #48	; 0x30
 800cb36:	2b09      	cmp	r3, #9
 800cb38:	d94e      	bls.n	800cbd8 <_vfiprintf_r+0x1c4>
 800cb3a:	b1b0      	cbz	r0, 800cb6a <_vfiprintf_r+0x156>
 800cb3c:	9207      	str	r2, [sp, #28]
 800cb3e:	e014      	b.n	800cb6a <_vfiprintf_r+0x156>
 800cb40:	eba0 0308 	sub.w	r3, r0, r8
 800cb44:	46a2      	mov	sl, r4
 800cb46:	fa09 f303 	lsl.w	r3, r9, r3
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	9304      	str	r3, [sp, #16]
 800cb4e:	e7d2      	b.n	800caf6 <_vfiprintf_r+0xe2>
 800cb50:	9b03      	ldr	r3, [sp, #12]
 800cb52:	1d19      	adds	r1, r3, #4
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	9103      	str	r1, [sp, #12]
 800cb5a:	bfbb      	ittet	lt
 800cb5c:	425b      	neglt	r3, r3
 800cb5e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb62:	9307      	strge	r3, [sp, #28]
 800cb64:	9307      	strlt	r3, [sp, #28]
 800cb66:	bfb8      	it	lt
 800cb68:	9204      	strlt	r2, [sp, #16]
 800cb6a:	7823      	ldrb	r3, [r4, #0]
 800cb6c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb6e:	d10c      	bne.n	800cb8a <_vfiprintf_r+0x176>
 800cb70:	7863      	ldrb	r3, [r4, #1]
 800cb72:	2b2a      	cmp	r3, #42	; 0x2a
 800cb74:	d135      	bne.n	800cbe2 <_vfiprintf_r+0x1ce>
 800cb76:	9b03      	ldr	r3, [sp, #12]
 800cb78:	3402      	adds	r4, #2
 800cb7a:	1d1a      	adds	r2, r3, #4
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	9203      	str	r2, [sp, #12]
 800cb82:	bfb8      	it	lt
 800cb84:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb88:	9305      	str	r3, [sp, #20]
 800cb8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc70 <_vfiprintf_r+0x25c>
 800cb8e:	2203      	movs	r2, #3
 800cb90:	7821      	ldrb	r1, [r4, #0]
 800cb92:	4650      	mov	r0, sl
 800cb94:	f7ff f8be 	bl	800bd14 <memchr>
 800cb98:	b140      	cbz	r0, 800cbac <_vfiprintf_r+0x198>
 800cb9a:	2340      	movs	r3, #64	; 0x40
 800cb9c:	eba0 000a 	sub.w	r0, r0, sl
 800cba0:	3401      	adds	r4, #1
 800cba2:	fa03 f000 	lsl.w	r0, r3, r0
 800cba6:	9b04      	ldr	r3, [sp, #16]
 800cba8:	4303      	orrs	r3, r0
 800cbaa:	9304      	str	r3, [sp, #16]
 800cbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb0:	2206      	movs	r2, #6
 800cbb2:	482c      	ldr	r0, [pc, #176]	; (800cc64 <_vfiprintf_r+0x250>)
 800cbb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbb8:	f7ff f8ac 	bl	800bd14 <memchr>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d03f      	beq.n	800cc40 <_vfiprintf_r+0x22c>
 800cbc0:	4b29      	ldr	r3, [pc, #164]	; (800cc68 <_vfiprintf_r+0x254>)
 800cbc2:	bb1b      	cbnz	r3, 800cc0c <_vfiprintf_r+0x1f8>
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	3307      	adds	r3, #7
 800cbc8:	f023 0307 	bic.w	r3, r3, #7
 800cbcc:	3308      	adds	r3, #8
 800cbce:	9303      	str	r3, [sp, #12]
 800cbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd2:	443b      	add	r3, r7
 800cbd4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbd6:	e767      	b.n	800caa8 <_vfiprintf_r+0x94>
 800cbd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbdc:	460c      	mov	r4, r1
 800cbde:	2001      	movs	r0, #1
 800cbe0:	e7a5      	b.n	800cb2e <_vfiprintf_r+0x11a>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	3401      	adds	r4, #1
 800cbe6:	f04f 0c0a 	mov.w	ip, #10
 800cbea:	4619      	mov	r1, r3
 800cbec:	9305      	str	r3, [sp, #20]
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbf4:	3a30      	subs	r2, #48	; 0x30
 800cbf6:	2a09      	cmp	r2, #9
 800cbf8:	d903      	bls.n	800cc02 <_vfiprintf_r+0x1ee>
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0c5      	beq.n	800cb8a <_vfiprintf_r+0x176>
 800cbfe:	9105      	str	r1, [sp, #20]
 800cc00:	e7c3      	b.n	800cb8a <_vfiprintf_r+0x176>
 800cc02:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc06:	4604      	mov	r4, r0
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e7f0      	b.n	800cbee <_vfiprintf_r+0x1da>
 800cc0c:	ab03      	add	r3, sp, #12
 800cc0e:	462a      	mov	r2, r5
 800cc10:	a904      	add	r1, sp, #16
 800cc12:	4630      	mov	r0, r6
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	4b15      	ldr	r3, [pc, #84]	; (800cc6c <_vfiprintf_r+0x258>)
 800cc18:	f7fd fdfc 	bl	800a814 <_printf_float>
 800cc1c:	4607      	mov	r7, r0
 800cc1e:	1c78      	adds	r0, r7, #1
 800cc20:	d1d6      	bne.n	800cbd0 <_vfiprintf_r+0x1bc>
 800cc22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc24:	07d9      	lsls	r1, r3, #31
 800cc26:	d405      	bmi.n	800cc34 <_vfiprintf_r+0x220>
 800cc28:	89ab      	ldrh	r3, [r5, #12]
 800cc2a:	059a      	lsls	r2, r3, #22
 800cc2c:	d402      	bmi.n	800cc34 <_vfiprintf_r+0x220>
 800cc2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc30:	f000 faad 	bl	800d18e <__retarget_lock_release_recursive>
 800cc34:	89ab      	ldrh	r3, [r5, #12]
 800cc36:	065b      	lsls	r3, r3, #25
 800cc38:	f53f af12 	bmi.w	800ca60 <_vfiprintf_r+0x4c>
 800cc3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc3e:	e711      	b.n	800ca64 <_vfiprintf_r+0x50>
 800cc40:	ab03      	add	r3, sp, #12
 800cc42:	462a      	mov	r2, r5
 800cc44:	a904      	add	r1, sp, #16
 800cc46:	4630      	mov	r0, r6
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	4b08      	ldr	r3, [pc, #32]	; (800cc6c <_vfiprintf_r+0x258>)
 800cc4c:	f7fe f888 	bl	800ad60 <_printf_i>
 800cc50:	e7e4      	b.n	800cc1c <_vfiprintf_r+0x208>
 800cc52:	bf00      	nop
 800cc54:	0800dd34 	.word	0x0800dd34
 800cc58:	0800dd54 	.word	0x0800dd54
 800cc5c:	0800dd14 	.word	0x0800dd14
 800cc60:	0800dbbc 	.word	0x0800dbbc
 800cc64:	0800dbc6 	.word	0x0800dbc6
 800cc68:	0800a815 	.word	0x0800a815
 800cc6c:	0800c9ef 	.word	0x0800c9ef
 800cc70:	0800dbc2 	.word	0x0800dbc2

0800cc74 <__swbuf_r>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	460e      	mov	r6, r1
 800cc78:	4614      	mov	r4, r2
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	b118      	cbz	r0, 800cc86 <__swbuf_r+0x12>
 800cc7e:	6983      	ldr	r3, [r0, #24]
 800cc80:	b90b      	cbnz	r3, 800cc86 <__swbuf_r+0x12>
 800cc82:	f000 f9e5 	bl	800d050 <__sinit>
 800cc86:	4b21      	ldr	r3, [pc, #132]	; (800cd0c <__swbuf_r+0x98>)
 800cc88:	429c      	cmp	r4, r3
 800cc8a:	d12b      	bne.n	800cce4 <__swbuf_r+0x70>
 800cc8c:	686c      	ldr	r4, [r5, #4]
 800cc8e:	69a3      	ldr	r3, [r4, #24]
 800cc90:	60a3      	str	r3, [r4, #8]
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	071a      	lsls	r2, r3, #28
 800cc96:	d52f      	bpl.n	800ccf8 <__swbuf_r+0x84>
 800cc98:	6923      	ldr	r3, [r4, #16]
 800cc9a:	b36b      	cbz	r3, 800ccf8 <__swbuf_r+0x84>
 800cc9c:	6923      	ldr	r3, [r4, #16]
 800cc9e:	b2f6      	uxtb	r6, r6
 800cca0:	6820      	ldr	r0, [r4, #0]
 800cca2:	4637      	mov	r7, r6
 800cca4:	1ac0      	subs	r0, r0, r3
 800cca6:	6963      	ldr	r3, [r4, #20]
 800cca8:	4283      	cmp	r3, r0
 800ccaa:	dc04      	bgt.n	800ccb6 <__swbuf_r+0x42>
 800ccac:	4621      	mov	r1, r4
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f000 f93a 	bl	800cf28 <_fflush_r>
 800ccb4:	bb30      	cbnz	r0, 800cd04 <__swbuf_r+0x90>
 800ccb6:	68a3      	ldr	r3, [r4, #8]
 800ccb8:	3001      	adds	r0, #1
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	60a3      	str	r3, [r4, #8]
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	6022      	str	r2, [r4, #0]
 800ccc4:	701e      	strb	r6, [r3, #0]
 800ccc6:	6963      	ldr	r3, [r4, #20]
 800ccc8:	4283      	cmp	r3, r0
 800ccca:	d004      	beq.n	800ccd6 <__swbuf_r+0x62>
 800cccc:	89a3      	ldrh	r3, [r4, #12]
 800ccce:	07db      	lsls	r3, r3, #31
 800ccd0:	d506      	bpl.n	800cce0 <__swbuf_r+0x6c>
 800ccd2:	2e0a      	cmp	r6, #10
 800ccd4:	d104      	bne.n	800cce0 <__swbuf_r+0x6c>
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	4628      	mov	r0, r5
 800ccda:	f000 f925 	bl	800cf28 <_fflush_r>
 800ccde:	b988      	cbnz	r0, 800cd04 <__swbuf_r+0x90>
 800cce0:	4638      	mov	r0, r7
 800cce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce4:	4b0a      	ldr	r3, [pc, #40]	; (800cd10 <__swbuf_r+0x9c>)
 800cce6:	429c      	cmp	r4, r3
 800cce8:	d101      	bne.n	800ccee <__swbuf_r+0x7a>
 800ccea:	68ac      	ldr	r4, [r5, #8]
 800ccec:	e7cf      	b.n	800cc8e <__swbuf_r+0x1a>
 800ccee:	4b09      	ldr	r3, [pc, #36]	; (800cd14 <__swbuf_r+0xa0>)
 800ccf0:	429c      	cmp	r4, r3
 800ccf2:	bf08      	it	eq
 800ccf4:	68ec      	ldreq	r4, [r5, #12]
 800ccf6:	e7ca      	b.n	800cc8e <__swbuf_r+0x1a>
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	f000 f81a 	bl	800cd34 <__swsetup_r>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	d0cb      	beq.n	800cc9c <__swbuf_r+0x28>
 800cd04:	f04f 37ff 	mov.w	r7, #4294967295
 800cd08:	e7ea      	b.n	800cce0 <__swbuf_r+0x6c>
 800cd0a:	bf00      	nop
 800cd0c:	0800dd34 	.word	0x0800dd34
 800cd10:	0800dd54 	.word	0x0800dd54
 800cd14:	0800dd14 	.word	0x0800dd14

0800cd18 <__ascii_wctomb>:
 800cd18:	b149      	cbz	r1, 800cd2e <__ascii_wctomb+0x16>
 800cd1a:	2aff      	cmp	r2, #255	; 0xff
 800cd1c:	bf8d      	iteet	hi
 800cd1e:	238a      	movhi	r3, #138	; 0x8a
 800cd20:	2001      	movls	r0, #1
 800cd22:	700a      	strbls	r2, [r1, #0]
 800cd24:	6003      	strhi	r3, [r0, #0]
 800cd26:	bf88      	it	hi
 800cd28:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd2c:	4770      	bx	lr
 800cd2e:	4608      	mov	r0, r1
 800cd30:	4770      	bx	lr
	...

0800cd34 <__swsetup_r>:
 800cd34:	4b32      	ldr	r3, [pc, #200]	; (800ce00 <__swsetup_r+0xcc>)
 800cd36:	b570      	push	{r4, r5, r6, lr}
 800cd38:	681d      	ldr	r5, [r3, #0]
 800cd3a:	4606      	mov	r6, r0
 800cd3c:	460c      	mov	r4, r1
 800cd3e:	b125      	cbz	r5, 800cd4a <__swsetup_r+0x16>
 800cd40:	69ab      	ldr	r3, [r5, #24]
 800cd42:	b913      	cbnz	r3, 800cd4a <__swsetup_r+0x16>
 800cd44:	4628      	mov	r0, r5
 800cd46:	f000 f983 	bl	800d050 <__sinit>
 800cd4a:	4b2e      	ldr	r3, [pc, #184]	; (800ce04 <__swsetup_r+0xd0>)
 800cd4c:	429c      	cmp	r4, r3
 800cd4e:	d10f      	bne.n	800cd70 <__swsetup_r+0x3c>
 800cd50:	686c      	ldr	r4, [r5, #4]
 800cd52:	89a3      	ldrh	r3, [r4, #12]
 800cd54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd58:	0719      	lsls	r1, r3, #28
 800cd5a:	d42c      	bmi.n	800cdb6 <__swsetup_r+0x82>
 800cd5c:	06dd      	lsls	r5, r3, #27
 800cd5e:	d411      	bmi.n	800cd84 <__swsetup_r+0x50>
 800cd60:	2309      	movs	r3, #9
 800cd62:	6033      	str	r3, [r6, #0]
 800cd64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd68:	f04f 30ff 	mov.w	r0, #4294967295
 800cd6c:	81a3      	strh	r3, [r4, #12]
 800cd6e:	e03e      	b.n	800cdee <__swsetup_r+0xba>
 800cd70:	4b25      	ldr	r3, [pc, #148]	; (800ce08 <__swsetup_r+0xd4>)
 800cd72:	429c      	cmp	r4, r3
 800cd74:	d101      	bne.n	800cd7a <__swsetup_r+0x46>
 800cd76:	68ac      	ldr	r4, [r5, #8]
 800cd78:	e7eb      	b.n	800cd52 <__swsetup_r+0x1e>
 800cd7a:	4b24      	ldr	r3, [pc, #144]	; (800ce0c <__swsetup_r+0xd8>)
 800cd7c:	429c      	cmp	r4, r3
 800cd7e:	bf08      	it	eq
 800cd80:	68ec      	ldreq	r4, [r5, #12]
 800cd82:	e7e6      	b.n	800cd52 <__swsetup_r+0x1e>
 800cd84:	0758      	lsls	r0, r3, #29
 800cd86:	d512      	bpl.n	800cdae <__swsetup_r+0x7a>
 800cd88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd8a:	b141      	cbz	r1, 800cd9e <__swsetup_r+0x6a>
 800cd8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd90:	4299      	cmp	r1, r3
 800cd92:	d002      	beq.n	800cd9a <__swsetup_r+0x66>
 800cd94:	4630      	mov	r0, r6
 800cd96:	f7ff fb6f 	bl	800c478 <_free_r>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd9e:	89a3      	ldrh	r3, [r4, #12]
 800cda0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cda4:	81a3      	strh	r3, [r4, #12]
 800cda6:	2300      	movs	r3, #0
 800cda8:	6063      	str	r3, [r4, #4]
 800cdaa:	6923      	ldr	r3, [r4, #16]
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	f043 0308 	orr.w	r3, r3, #8
 800cdb4:	81a3      	strh	r3, [r4, #12]
 800cdb6:	6923      	ldr	r3, [r4, #16]
 800cdb8:	b94b      	cbnz	r3, 800cdce <__swsetup_r+0x9a>
 800cdba:	89a3      	ldrh	r3, [r4, #12]
 800cdbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdc4:	d003      	beq.n	800cdce <__swsetup_r+0x9a>
 800cdc6:	4621      	mov	r1, r4
 800cdc8:	4630      	mov	r0, r6
 800cdca:	f000 fa05 	bl	800d1d8 <__smakebuf_r>
 800cdce:	89a0      	ldrh	r0, [r4, #12]
 800cdd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdd4:	f010 0301 	ands.w	r3, r0, #1
 800cdd8:	d00a      	beq.n	800cdf0 <__swsetup_r+0xbc>
 800cdda:	2300      	movs	r3, #0
 800cddc:	60a3      	str	r3, [r4, #8]
 800cdde:	6963      	ldr	r3, [r4, #20]
 800cde0:	425b      	negs	r3, r3
 800cde2:	61a3      	str	r3, [r4, #24]
 800cde4:	6923      	ldr	r3, [r4, #16]
 800cde6:	b943      	cbnz	r3, 800cdfa <__swsetup_r+0xc6>
 800cde8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdec:	d1ba      	bne.n	800cd64 <__swsetup_r+0x30>
 800cdee:	bd70      	pop	{r4, r5, r6, pc}
 800cdf0:	0781      	lsls	r1, r0, #30
 800cdf2:	bf58      	it	pl
 800cdf4:	6963      	ldrpl	r3, [r4, #20]
 800cdf6:	60a3      	str	r3, [r4, #8]
 800cdf8:	e7f4      	b.n	800cde4 <__swsetup_r+0xb0>
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	e7f7      	b.n	800cdee <__swsetup_r+0xba>
 800cdfe:	bf00      	nop
 800ce00:	20000024 	.word	0x20000024
 800ce04:	0800dd34 	.word	0x0800dd34
 800ce08:	0800dd54 	.word	0x0800dd54
 800ce0c:	0800dd14 	.word	0x0800dd14

0800ce10 <abort>:
 800ce10:	2006      	movs	r0, #6
 800ce12:	b508      	push	{r3, lr}
 800ce14:	f000 fa50 	bl	800d2b8 <raise>
 800ce18:	2001      	movs	r0, #1
 800ce1a:	f7f4 fea9 	bl	8001b70 <_exit>
	...

0800ce20 <__sflush_r>:
 800ce20:	898a      	ldrh	r2, [r1, #12]
 800ce22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce26:	4605      	mov	r5, r0
 800ce28:	0710      	lsls	r0, r2, #28
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	d458      	bmi.n	800cee0 <__sflush_r+0xc0>
 800ce2e:	684b      	ldr	r3, [r1, #4]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	dc05      	bgt.n	800ce40 <__sflush_r+0x20>
 800ce34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	dc02      	bgt.n	800ce40 <__sflush_r+0x20>
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce42:	2e00      	cmp	r6, #0
 800ce44:	d0f9      	beq.n	800ce3a <__sflush_r+0x1a>
 800ce46:	2300      	movs	r3, #0
 800ce48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce4c:	682f      	ldr	r7, [r5, #0]
 800ce4e:	602b      	str	r3, [r5, #0]
 800ce50:	d032      	beq.n	800ceb8 <__sflush_r+0x98>
 800ce52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	075a      	lsls	r2, r3, #29
 800ce58:	d505      	bpl.n	800ce66 <__sflush_r+0x46>
 800ce5a:	6863      	ldr	r3, [r4, #4]
 800ce5c:	1ac0      	subs	r0, r0, r3
 800ce5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce60:	b10b      	cbz	r3, 800ce66 <__sflush_r+0x46>
 800ce62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce64:	1ac0      	subs	r0, r0, r3
 800ce66:	2300      	movs	r3, #0
 800ce68:	4602      	mov	r2, r0
 800ce6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	6a21      	ldr	r1, [r4, #32]
 800ce70:	47b0      	blx	r6
 800ce72:	1c43      	adds	r3, r0, #1
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	d106      	bne.n	800ce86 <__sflush_r+0x66>
 800ce78:	6829      	ldr	r1, [r5, #0]
 800ce7a:	291d      	cmp	r1, #29
 800ce7c:	d82c      	bhi.n	800ced8 <__sflush_r+0xb8>
 800ce7e:	4a29      	ldr	r2, [pc, #164]	; (800cf24 <__sflush_r+0x104>)
 800ce80:	40ca      	lsrs	r2, r1
 800ce82:	07d6      	lsls	r6, r2, #31
 800ce84:	d528      	bpl.n	800ced8 <__sflush_r+0xb8>
 800ce86:	2200      	movs	r2, #0
 800ce88:	04d9      	lsls	r1, r3, #19
 800ce8a:	6062      	str	r2, [r4, #4]
 800ce8c:	6922      	ldr	r2, [r4, #16]
 800ce8e:	6022      	str	r2, [r4, #0]
 800ce90:	d504      	bpl.n	800ce9c <__sflush_r+0x7c>
 800ce92:	1c42      	adds	r2, r0, #1
 800ce94:	d101      	bne.n	800ce9a <__sflush_r+0x7a>
 800ce96:	682b      	ldr	r3, [r5, #0]
 800ce98:	b903      	cbnz	r3, 800ce9c <__sflush_r+0x7c>
 800ce9a:	6560      	str	r0, [r4, #84]	; 0x54
 800ce9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce9e:	602f      	str	r7, [r5, #0]
 800cea0:	2900      	cmp	r1, #0
 800cea2:	d0ca      	beq.n	800ce3a <__sflush_r+0x1a>
 800cea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cea8:	4299      	cmp	r1, r3
 800ceaa:	d002      	beq.n	800ceb2 <__sflush_r+0x92>
 800ceac:	4628      	mov	r0, r5
 800ceae:	f7ff fae3 	bl	800c478 <_free_r>
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	6360      	str	r0, [r4, #52]	; 0x34
 800ceb6:	e7c1      	b.n	800ce3c <__sflush_r+0x1c>
 800ceb8:	6a21      	ldr	r1, [r4, #32]
 800ceba:	2301      	movs	r3, #1
 800cebc:	4628      	mov	r0, r5
 800cebe:	47b0      	blx	r6
 800cec0:	1c41      	adds	r1, r0, #1
 800cec2:	d1c7      	bne.n	800ce54 <__sflush_r+0x34>
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d0c4      	beq.n	800ce54 <__sflush_r+0x34>
 800ceca:	2b1d      	cmp	r3, #29
 800cecc:	d001      	beq.n	800ced2 <__sflush_r+0xb2>
 800cece:	2b16      	cmp	r3, #22
 800ced0:	d101      	bne.n	800ced6 <__sflush_r+0xb6>
 800ced2:	602f      	str	r7, [r5, #0]
 800ced4:	e7b1      	b.n	800ce3a <__sflush_r+0x1a>
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cedc:	81a3      	strh	r3, [r4, #12]
 800cede:	e7ad      	b.n	800ce3c <__sflush_r+0x1c>
 800cee0:	690f      	ldr	r7, [r1, #16]
 800cee2:	2f00      	cmp	r7, #0
 800cee4:	d0a9      	beq.n	800ce3a <__sflush_r+0x1a>
 800cee6:	0793      	lsls	r3, r2, #30
 800cee8:	680e      	ldr	r6, [r1, #0]
 800ceea:	600f      	str	r7, [r1, #0]
 800ceec:	bf0c      	ite	eq
 800ceee:	694b      	ldreq	r3, [r1, #20]
 800cef0:	2300      	movne	r3, #0
 800cef2:	eba6 0807 	sub.w	r8, r6, r7
 800cef6:	608b      	str	r3, [r1, #8]
 800cef8:	f1b8 0f00 	cmp.w	r8, #0
 800cefc:	dd9d      	ble.n	800ce3a <__sflush_r+0x1a>
 800cefe:	4643      	mov	r3, r8
 800cf00:	463a      	mov	r2, r7
 800cf02:	6a21      	ldr	r1, [r4, #32]
 800cf04:	4628      	mov	r0, r5
 800cf06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf08:	47b0      	blx	r6
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	dc06      	bgt.n	800cf1c <__sflush_r+0xfc>
 800cf0e:	89a3      	ldrh	r3, [r4, #12]
 800cf10:	f04f 30ff 	mov.w	r0, #4294967295
 800cf14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf18:	81a3      	strh	r3, [r4, #12]
 800cf1a:	e78f      	b.n	800ce3c <__sflush_r+0x1c>
 800cf1c:	4407      	add	r7, r0
 800cf1e:	eba8 0800 	sub.w	r8, r8, r0
 800cf22:	e7e9      	b.n	800cef8 <__sflush_r+0xd8>
 800cf24:	20400001 	.word	0x20400001

0800cf28 <_fflush_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	690b      	ldr	r3, [r1, #16]
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	460c      	mov	r4, r1
 800cf30:	b913      	cbnz	r3, 800cf38 <_fflush_r+0x10>
 800cf32:	2500      	movs	r5, #0
 800cf34:	4628      	mov	r0, r5
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	b118      	cbz	r0, 800cf42 <_fflush_r+0x1a>
 800cf3a:	6983      	ldr	r3, [r0, #24]
 800cf3c:	b90b      	cbnz	r3, 800cf42 <_fflush_r+0x1a>
 800cf3e:	f000 f887 	bl	800d050 <__sinit>
 800cf42:	4b14      	ldr	r3, [pc, #80]	; (800cf94 <_fflush_r+0x6c>)
 800cf44:	429c      	cmp	r4, r3
 800cf46:	d11b      	bne.n	800cf80 <_fflush_r+0x58>
 800cf48:	686c      	ldr	r4, [r5, #4]
 800cf4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d0ef      	beq.n	800cf32 <_fflush_r+0xa>
 800cf52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf54:	07d0      	lsls	r0, r2, #31
 800cf56:	d404      	bmi.n	800cf62 <_fflush_r+0x3a>
 800cf58:	0599      	lsls	r1, r3, #22
 800cf5a:	d402      	bmi.n	800cf62 <_fflush_r+0x3a>
 800cf5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf5e:	f000 f915 	bl	800d18c <__retarget_lock_acquire_recursive>
 800cf62:	4628      	mov	r0, r5
 800cf64:	4621      	mov	r1, r4
 800cf66:	f7ff ff5b 	bl	800ce20 <__sflush_r>
 800cf6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	07da      	lsls	r2, r3, #31
 800cf70:	d4e0      	bmi.n	800cf34 <_fflush_r+0xc>
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	059b      	lsls	r3, r3, #22
 800cf76:	d4dd      	bmi.n	800cf34 <_fflush_r+0xc>
 800cf78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf7a:	f000 f908 	bl	800d18e <__retarget_lock_release_recursive>
 800cf7e:	e7d9      	b.n	800cf34 <_fflush_r+0xc>
 800cf80:	4b05      	ldr	r3, [pc, #20]	; (800cf98 <_fflush_r+0x70>)
 800cf82:	429c      	cmp	r4, r3
 800cf84:	d101      	bne.n	800cf8a <_fflush_r+0x62>
 800cf86:	68ac      	ldr	r4, [r5, #8]
 800cf88:	e7df      	b.n	800cf4a <_fflush_r+0x22>
 800cf8a:	4b04      	ldr	r3, [pc, #16]	; (800cf9c <_fflush_r+0x74>)
 800cf8c:	429c      	cmp	r4, r3
 800cf8e:	bf08      	it	eq
 800cf90:	68ec      	ldreq	r4, [r5, #12]
 800cf92:	e7da      	b.n	800cf4a <_fflush_r+0x22>
 800cf94:	0800dd34 	.word	0x0800dd34
 800cf98:	0800dd54 	.word	0x0800dd54
 800cf9c:	0800dd14 	.word	0x0800dd14

0800cfa0 <std>:
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	b510      	push	{r4, lr}
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	6083      	str	r3, [r0, #8]
 800cfa8:	8181      	strh	r1, [r0, #12]
 800cfaa:	4619      	mov	r1, r3
 800cfac:	6643      	str	r3, [r0, #100]	; 0x64
 800cfae:	81c2      	strh	r2, [r0, #14]
 800cfb0:	2208      	movs	r2, #8
 800cfb2:	6183      	str	r3, [r0, #24]
 800cfb4:	e9c0 3300 	strd	r3, r3, [r0]
 800cfb8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfbc:	305c      	adds	r0, #92	; 0x5c
 800cfbe:	f7fd fb81 	bl	800a6c4 <memset>
 800cfc2:	4b05      	ldr	r3, [pc, #20]	; (800cfd8 <std+0x38>)
 800cfc4:	6224      	str	r4, [r4, #32]
 800cfc6:	6263      	str	r3, [r4, #36]	; 0x24
 800cfc8:	4b04      	ldr	r3, [pc, #16]	; (800cfdc <std+0x3c>)
 800cfca:	62a3      	str	r3, [r4, #40]	; 0x28
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <std+0x40>)
 800cfce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cfd0:	4b04      	ldr	r3, [pc, #16]	; (800cfe4 <std+0x44>)
 800cfd2:	6323      	str	r3, [r4, #48]	; 0x30
 800cfd4:	bd10      	pop	{r4, pc}
 800cfd6:	bf00      	nop
 800cfd8:	0800d2f1 	.word	0x0800d2f1
 800cfdc:	0800d313 	.word	0x0800d313
 800cfe0:	0800d34b 	.word	0x0800d34b
 800cfe4:	0800d36f 	.word	0x0800d36f

0800cfe8 <_cleanup_r>:
 800cfe8:	4901      	ldr	r1, [pc, #4]	; (800cff0 <_cleanup_r+0x8>)
 800cfea:	f000 b8af 	b.w	800d14c <_fwalk_reent>
 800cfee:	bf00      	nop
 800cff0:	0800cf29 	.word	0x0800cf29

0800cff4 <__sfmoreglue>:
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	1e4a      	subs	r2, r1, #1
 800cff8:	2568      	movs	r5, #104	; 0x68
 800cffa:	460e      	mov	r6, r1
 800cffc:	4355      	muls	r5, r2
 800cffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d002:	f7ff fa89 	bl	800c518 <_malloc_r>
 800d006:	4604      	mov	r4, r0
 800d008:	b140      	cbz	r0, 800d01c <__sfmoreglue+0x28>
 800d00a:	2100      	movs	r1, #0
 800d00c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d010:	e9c0 1600 	strd	r1, r6, [r0]
 800d014:	300c      	adds	r0, #12
 800d016:	60a0      	str	r0, [r4, #8]
 800d018:	f7fd fb54 	bl	800a6c4 <memset>
 800d01c:	4620      	mov	r0, r4
 800d01e:	bd70      	pop	{r4, r5, r6, pc}

0800d020 <__sfp_lock_acquire>:
 800d020:	4801      	ldr	r0, [pc, #4]	; (800d028 <__sfp_lock_acquire+0x8>)
 800d022:	f000 b8b3 	b.w	800d18c <__retarget_lock_acquire_recursive>
 800d026:	bf00      	nop
 800d028:	20000358 	.word	0x20000358

0800d02c <__sfp_lock_release>:
 800d02c:	4801      	ldr	r0, [pc, #4]	; (800d034 <__sfp_lock_release+0x8>)
 800d02e:	f000 b8ae 	b.w	800d18e <__retarget_lock_release_recursive>
 800d032:	bf00      	nop
 800d034:	20000358 	.word	0x20000358

0800d038 <__sinit_lock_acquire>:
 800d038:	4801      	ldr	r0, [pc, #4]	; (800d040 <__sinit_lock_acquire+0x8>)
 800d03a:	f000 b8a7 	b.w	800d18c <__retarget_lock_acquire_recursive>
 800d03e:	bf00      	nop
 800d040:	20000353 	.word	0x20000353

0800d044 <__sinit_lock_release>:
 800d044:	4801      	ldr	r0, [pc, #4]	; (800d04c <__sinit_lock_release+0x8>)
 800d046:	f000 b8a2 	b.w	800d18e <__retarget_lock_release_recursive>
 800d04a:	bf00      	nop
 800d04c:	20000353 	.word	0x20000353

0800d050 <__sinit>:
 800d050:	b510      	push	{r4, lr}
 800d052:	4604      	mov	r4, r0
 800d054:	f7ff fff0 	bl	800d038 <__sinit_lock_acquire>
 800d058:	69a3      	ldr	r3, [r4, #24]
 800d05a:	b11b      	cbz	r3, 800d064 <__sinit+0x14>
 800d05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d060:	f7ff bff0 	b.w	800d044 <__sinit_lock_release>
 800d064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d068:	6523      	str	r3, [r4, #80]	; 0x50
 800d06a:	4620      	mov	r0, r4
 800d06c:	4b12      	ldr	r3, [pc, #72]	; (800d0b8 <__sinit+0x68>)
 800d06e:	4a13      	ldr	r2, [pc, #76]	; (800d0bc <__sinit+0x6c>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	62a2      	str	r2, [r4, #40]	; 0x28
 800d074:	42a3      	cmp	r3, r4
 800d076:	bf04      	itt	eq
 800d078:	2301      	moveq	r3, #1
 800d07a:	61a3      	streq	r3, [r4, #24]
 800d07c:	f000 f820 	bl	800d0c0 <__sfp>
 800d080:	6060      	str	r0, [r4, #4]
 800d082:	4620      	mov	r0, r4
 800d084:	f000 f81c 	bl	800d0c0 <__sfp>
 800d088:	60a0      	str	r0, [r4, #8]
 800d08a:	4620      	mov	r0, r4
 800d08c:	f000 f818 	bl	800d0c0 <__sfp>
 800d090:	2200      	movs	r2, #0
 800d092:	2104      	movs	r1, #4
 800d094:	60e0      	str	r0, [r4, #12]
 800d096:	6860      	ldr	r0, [r4, #4]
 800d098:	f7ff ff82 	bl	800cfa0 <std>
 800d09c:	2201      	movs	r2, #1
 800d09e:	2109      	movs	r1, #9
 800d0a0:	68a0      	ldr	r0, [r4, #8]
 800d0a2:	f7ff ff7d 	bl	800cfa0 <std>
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	2112      	movs	r1, #18
 800d0aa:	68e0      	ldr	r0, [r4, #12]
 800d0ac:	f7ff ff78 	bl	800cfa0 <std>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	61a3      	str	r3, [r4, #24]
 800d0b4:	e7d2      	b.n	800d05c <__sinit+0xc>
 800d0b6:	bf00      	nop
 800d0b8:	0800d990 	.word	0x0800d990
 800d0bc:	0800cfe9 	.word	0x0800cfe9

0800d0c0 <__sfp>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	4607      	mov	r7, r0
 800d0c4:	f7ff ffac 	bl	800d020 <__sfp_lock_acquire>
 800d0c8:	4b1e      	ldr	r3, [pc, #120]	; (800d144 <__sfp+0x84>)
 800d0ca:	681e      	ldr	r6, [r3, #0]
 800d0cc:	69b3      	ldr	r3, [r6, #24]
 800d0ce:	b913      	cbnz	r3, 800d0d6 <__sfp+0x16>
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f7ff ffbd 	bl	800d050 <__sinit>
 800d0d6:	3648      	adds	r6, #72	; 0x48
 800d0d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	d503      	bpl.n	800d0e8 <__sfp+0x28>
 800d0e0:	6833      	ldr	r3, [r6, #0]
 800d0e2:	b30b      	cbz	r3, 800d128 <__sfp+0x68>
 800d0e4:	6836      	ldr	r6, [r6, #0]
 800d0e6:	e7f7      	b.n	800d0d8 <__sfp+0x18>
 800d0e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0ec:	b9d5      	cbnz	r5, 800d124 <__sfp+0x64>
 800d0ee:	4b16      	ldr	r3, [pc, #88]	; (800d148 <__sfp+0x88>)
 800d0f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0f4:	6665      	str	r5, [r4, #100]	; 0x64
 800d0f6:	60e3      	str	r3, [r4, #12]
 800d0f8:	f000 f847 	bl	800d18a <__retarget_lock_init_recursive>
 800d0fc:	f7ff ff96 	bl	800d02c <__sfp_lock_release>
 800d100:	2208      	movs	r2, #8
 800d102:	4629      	mov	r1, r5
 800d104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d108:	6025      	str	r5, [r4, #0]
 800d10a:	61a5      	str	r5, [r4, #24]
 800d10c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d114:	f7fd fad6 	bl	800a6c4 <memset>
 800d118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d11c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d120:	4620      	mov	r0, r4
 800d122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d124:	3468      	adds	r4, #104	; 0x68
 800d126:	e7d9      	b.n	800d0dc <__sfp+0x1c>
 800d128:	2104      	movs	r1, #4
 800d12a:	4638      	mov	r0, r7
 800d12c:	f7ff ff62 	bl	800cff4 <__sfmoreglue>
 800d130:	4604      	mov	r4, r0
 800d132:	6030      	str	r0, [r6, #0]
 800d134:	2800      	cmp	r0, #0
 800d136:	d1d5      	bne.n	800d0e4 <__sfp+0x24>
 800d138:	f7ff ff78 	bl	800d02c <__sfp_lock_release>
 800d13c:	230c      	movs	r3, #12
 800d13e:	603b      	str	r3, [r7, #0]
 800d140:	e7ee      	b.n	800d120 <__sfp+0x60>
 800d142:	bf00      	nop
 800d144:	0800d990 	.word	0x0800d990
 800d148:	ffff0001 	.word	0xffff0001

0800d14c <_fwalk_reent>:
 800d14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d150:	4606      	mov	r6, r0
 800d152:	4688      	mov	r8, r1
 800d154:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d158:	2700      	movs	r7, #0
 800d15a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d15e:	f1b9 0901 	subs.w	r9, r9, #1
 800d162:	d505      	bpl.n	800d170 <_fwalk_reent+0x24>
 800d164:	6824      	ldr	r4, [r4, #0]
 800d166:	2c00      	cmp	r4, #0
 800d168:	d1f7      	bne.n	800d15a <_fwalk_reent+0xe>
 800d16a:	4638      	mov	r0, r7
 800d16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d170:	89ab      	ldrh	r3, [r5, #12]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d907      	bls.n	800d186 <_fwalk_reent+0x3a>
 800d176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d17a:	3301      	adds	r3, #1
 800d17c:	d003      	beq.n	800d186 <_fwalk_reent+0x3a>
 800d17e:	4629      	mov	r1, r5
 800d180:	4630      	mov	r0, r6
 800d182:	47c0      	blx	r8
 800d184:	4307      	orrs	r7, r0
 800d186:	3568      	adds	r5, #104	; 0x68
 800d188:	e7e9      	b.n	800d15e <_fwalk_reent+0x12>

0800d18a <__retarget_lock_init_recursive>:
 800d18a:	4770      	bx	lr

0800d18c <__retarget_lock_acquire_recursive>:
 800d18c:	4770      	bx	lr

0800d18e <__retarget_lock_release_recursive>:
 800d18e:	4770      	bx	lr

0800d190 <__swhatbuf_r>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	460e      	mov	r6, r1
 800d194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d198:	b096      	sub	sp, #88	; 0x58
 800d19a:	4614      	mov	r4, r2
 800d19c:	2900      	cmp	r1, #0
 800d19e:	461d      	mov	r5, r3
 800d1a0:	da07      	bge.n	800d1b2 <__swhatbuf_r+0x22>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	602b      	str	r3, [r5, #0]
 800d1a6:	89b3      	ldrh	r3, [r6, #12]
 800d1a8:	061a      	lsls	r2, r3, #24
 800d1aa:	d410      	bmi.n	800d1ce <__swhatbuf_r+0x3e>
 800d1ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1b0:	e00e      	b.n	800d1d0 <__swhatbuf_r+0x40>
 800d1b2:	466a      	mov	r2, sp
 800d1b4:	f000 f902 	bl	800d3bc <_fstat_r>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	dbf2      	blt.n	800d1a2 <__swhatbuf_r+0x12>
 800d1bc:	9a01      	ldr	r2, [sp, #4]
 800d1be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1c6:	425a      	negs	r2, r3
 800d1c8:	415a      	adcs	r2, r3
 800d1ca:	602a      	str	r2, [r5, #0]
 800d1cc:	e7ee      	b.n	800d1ac <__swhatbuf_r+0x1c>
 800d1ce:	2340      	movs	r3, #64	; 0x40
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	6023      	str	r3, [r4, #0]
 800d1d4:	b016      	add	sp, #88	; 0x58
 800d1d6:	bd70      	pop	{r4, r5, r6, pc}

0800d1d8 <__smakebuf_r>:
 800d1d8:	898b      	ldrh	r3, [r1, #12]
 800d1da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1dc:	079d      	lsls	r5, r3, #30
 800d1de:	4606      	mov	r6, r0
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	d507      	bpl.n	800d1f4 <__smakebuf_r+0x1c>
 800d1e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	6123      	str	r3, [r4, #16]
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	6163      	str	r3, [r4, #20]
 800d1f0:	b002      	add	sp, #8
 800d1f2:	bd70      	pop	{r4, r5, r6, pc}
 800d1f4:	ab01      	add	r3, sp, #4
 800d1f6:	466a      	mov	r2, sp
 800d1f8:	f7ff ffca 	bl	800d190 <__swhatbuf_r>
 800d1fc:	9900      	ldr	r1, [sp, #0]
 800d1fe:	4605      	mov	r5, r0
 800d200:	4630      	mov	r0, r6
 800d202:	f7ff f989 	bl	800c518 <_malloc_r>
 800d206:	b948      	cbnz	r0, 800d21c <__smakebuf_r+0x44>
 800d208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d20c:	059a      	lsls	r2, r3, #22
 800d20e:	d4ef      	bmi.n	800d1f0 <__smakebuf_r+0x18>
 800d210:	f023 0303 	bic.w	r3, r3, #3
 800d214:	f043 0302 	orr.w	r3, r3, #2
 800d218:	81a3      	strh	r3, [r4, #12]
 800d21a:	e7e3      	b.n	800d1e4 <__smakebuf_r+0xc>
 800d21c:	4b0d      	ldr	r3, [pc, #52]	; (800d254 <__smakebuf_r+0x7c>)
 800d21e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d220:	89a3      	ldrh	r3, [r4, #12]
 800d222:	6020      	str	r0, [r4, #0]
 800d224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d228:	6120      	str	r0, [r4, #16]
 800d22a:	81a3      	strh	r3, [r4, #12]
 800d22c:	9b00      	ldr	r3, [sp, #0]
 800d22e:	6163      	str	r3, [r4, #20]
 800d230:	9b01      	ldr	r3, [sp, #4]
 800d232:	b15b      	cbz	r3, 800d24c <__smakebuf_r+0x74>
 800d234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d238:	4630      	mov	r0, r6
 800d23a:	f000 f8d1 	bl	800d3e0 <_isatty_r>
 800d23e:	b128      	cbz	r0, 800d24c <__smakebuf_r+0x74>
 800d240:	89a3      	ldrh	r3, [r4, #12]
 800d242:	f023 0303 	bic.w	r3, r3, #3
 800d246:	f043 0301 	orr.w	r3, r3, #1
 800d24a:	81a3      	strh	r3, [r4, #12]
 800d24c:	89a0      	ldrh	r0, [r4, #12]
 800d24e:	4305      	orrs	r5, r0
 800d250:	81a5      	strh	r5, [r4, #12]
 800d252:	e7cd      	b.n	800d1f0 <__smakebuf_r+0x18>
 800d254:	0800cfe9 	.word	0x0800cfe9

0800d258 <_malloc_usable_size_r>:
 800d258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d25c:	1f18      	subs	r0, r3, #4
 800d25e:	2b00      	cmp	r3, #0
 800d260:	bfbc      	itt	lt
 800d262:	580b      	ldrlt	r3, [r1, r0]
 800d264:	18c0      	addlt	r0, r0, r3
 800d266:	4770      	bx	lr

0800d268 <_raise_r>:
 800d268:	291f      	cmp	r1, #31
 800d26a:	b538      	push	{r3, r4, r5, lr}
 800d26c:	4604      	mov	r4, r0
 800d26e:	460d      	mov	r5, r1
 800d270:	d904      	bls.n	800d27c <_raise_r+0x14>
 800d272:	2316      	movs	r3, #22
 800d274:	6003      	str	r3, [r0, #0]
 800d276:	f04f 30ff 	mov.w	r0, #4294967295
 800d27a:	bd38      	pop	{r3, r4, r5, pc}
 800d27c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d27e:	b112      	cbz	r2, 800d286 <_raise_r+0x1e>
 800d280:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d284:	b94b      	cbnz	r3, 800d29a <_raise_r+0x32>
 800d286:	4620      	mov	r0, r4
 800d288:	f000 f830 	bl	800d2ec <_getpid_r>
 800d28c:	462a      	mov	r2, r5
 800d28e:	4601      	mov	r1, r0
 800d290:	4620      	mov	r0, r4
 800d292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d296:	f000 b817 	b.w	800d2c8 <_kill_r>
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d00a      	beq.n	800d2b4 <_raise_r+0x4c>
 800d29e:	1c59      	adds	r1, r3, #1
 800d2a0:	d103      	bne.n	800d2aa <_raise_r+0x42>
 800d2a2:	2316      	movs	r3, #22
 800d2a4:	6003      	str	r3, [r0, #0]
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	e7e7      	b.n	800d27a <_raise_r+0x12>
 800d2aa:	2400      	movs	r4, #0
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2b2:	4798      	blx	r3
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	e7e0      	b.n	800d27a <_raise_r+0x12>

0800d2b8 <raise>:
 800d2b8:	4b02      	ldr	r3, [pc, #8]	; (800d2c4 <raise+0xc>)
 800d2ba:	4601      	mov	r1, r0
 800d2bc:	6818      	ldr	r0, [r3, #0]
 800d2be:	f7ff bfd3 	b.w	800d268 <_raise_r>
 800d2c2:	bf00      	nop
 800d2c4:	20000024 	.word	0x20000024

0800d2c8 <_kill_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	4d06      	ldr	r5, [pc, #24]	; (800d2e8 <_kill_r+0x20>)
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	4608      	mov	r0, r1
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	602b      	str	r3, [r5, #0]
 800d2d6:	f7f4 fc3b 	bl	8001b50 <_kill>
 800d2da:	1c43      	adds	r3, r0, #1
 800d2dc:	d102      	bne.n	800d2e4 <_kill_r+0x1c>
 800d2de:	682b      	ldr	r3, [r5, #0]
 800d2e0:	b103      	cbz	r3, 800d2e4 <_kill_r+0x1c>
 800d2e2:	6023      	str	r3, [r4, #0]
 800d2e4:	bd38      	pop	{r3, r4, r5, pc}
 800d2e6:	bf00      	nop
 800d2e8:	2000034c 	.word	0x2000034c

0800d2ec <_getpid_r>:
 800d2ec:	f7f4 bc28 	b.w	8001b40 <_getpid>

0800d2f0 <__sread>:
 800d2f0:	b510      	push	{r4, lr}
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2f8:	f000 f894 	bl	800d424 <_read_r>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	bfab      	itete	ge
 800d300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d302:	89a3      	ldrhlt	r3, [r4, #12]
 800d304:	181b      	addge	r3, r3, r0
 800d306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d30a:	bfac      	ite	ge
 800d30c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d30e:	81a3      	strhlt	r3, [r4, #12]
 800d310:	bd10      	pop	{r4, pc}

0800d312 <__swrite>:
 800d312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d316:	461f      	mov	r7, r3
 800d318:	898b      	ldrh	r3, [r1, #12]
 800d31a:	4605      	mov	r5, r0
 800d31c:	460c      	mov	r4, r1
 800d31e:	05db      	lsls	r3, r3, #23
 800d320:	4616      	mov	r6, r2
 800d322:	d505      	bpl.n	800d330 <__swrite+0x1e>
 800d324:	2302      	movs	r3, #2
 800d326:	2200      	movs	r2, #0
 800d328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d32c:	f000 f868 	bl	800d400 <_lseek_r>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	4632      	mov	r2, r6
 800d334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d338:	4628      	mov	r0, r5
 800d33a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d33e:	81a3      	strh	r3, [r4, #12]
 800d340:	463b      	mov	r3, r7
 800d342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d346:	f000 b817 	b.w	800d378 <_write_r>

0800d34a <__sseek>:
 800d34a:	b510      	push	{r4, lr}
 800d34c:	460c      	mov	r4, r1
 800d34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d352:	f000 f855 	bl	800d400 <_lseek_r>
 800d356:	1c43      	adds	r3, r0, #1
 800d358:	89a3      	ldrh	r3, [r4, #12]
 800d35a:	bf15      	itete	ne
 800d35c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d35e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d366:	81a3      	strheq	r3, [r4, #12]
 800d368:	bf18      	it	ne
 800d36a:	81a3      	strhne	r3, [r4, #12]
 800d36c:	bd10      	pop	{r4, pc}

0800d36e <__sclose>:
 800d36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d372:	f000 b813 	b.w	800d39c <_close_r>
	...

0800d378 <_write_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	4604      	mov	r4, r0
 800d37c:	4d06      	ldr	r5, [pc, #24]	; (800d398 <_write_r+0x20>)
 800d37e:	4608      	mov	r0, r1
 800d380:	4611      	mov	r1, r2
 800d382:	2200      	movs	r2, #0
 800d384:	602a      	str	r2, [r5, #0]
 800d386:	461a      	mov	r2, r3
 800d388:	f7f4 fc19 	bl	8001bbe <_write>
 800d38c:	1c43      	adds	r3, r0, #1
 800d38e:	d102      	bne.n	800d396 <_write_r+0x1e>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	b103      	cbz	r3, 800d396 <_write_r+0x1e>
 800d394:	6023      	str	r3, [r4, #0]
 800d396:	bd38      	pop	{r3, r4, r5, pc}
 800d398:	2000034c 	.word	0x2000034c

0800d39c <_close_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	2300      	movs	r3, #0
 800d3a0:	4d05      	ldr	r5, [pc, #20]	; (800d3b8 <_close_r+0x1c>)
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	4608      	mov	r0, r1
 800d3a6:	602b      	str	r3, [r5, #0]
 800d3a8:	f7f4 fc25 	bl	8001bf6 <_close>
 800d3ac:	1c43      	adds	r3, r0, #1
 800d3ae:	d102      	bne.n	800d3b6 <_close_r+0x1a>
 800d3b0:	682b      	ldr	r3, [r5, #0]
 800d3b2:	b103      	cbz	r3, 800d3b6 <_close_r+0x1a>
 800d3b4:	6023      	str	r3, [r4, #0]
 800d3b6:	bd38      	pop	{r3, r4, r5, pc}
 800d3b8:	2000034c 	.word	0x2000034c

0800d3bc <_fstat_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	2300      	movs	r3, #0
 800d3c0:	4d06      	ldr	r5, [pc, #24]	; (800d3dc <_fstat_r+0x20>)
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	4608      	mov	r0, r1
 800d3c6:	4611      	mov	r1, r2
 800d3c8:	602b      	str	r3, [r5, #0]
 800d3ca:	f7f4 fc20 	bl	8001c0e <_fstat>
 800d3ce:	1c43      	adds	r3, r0, #1
 800d3d0:	d102      	bne.n	800d3d8 <_fstat_r+0x1c>
 800d3d2:	682b      	ldr	r3, [r5, #0]
 800d3d4:	b103      	cbz	r3, 800d3d8 <_fstat_r+0x1c>
 800d3d6:	6023      	str	r3, [r4, #0]
 800d3d8:	bd38      	pop	{r3, r4, r5, pc}
 800d3da:	bf00      	nop
 800d3dc:	2000034c 	.word	0x2000034c

0800d3e0 <_isatty_r>:
 800d3e0:	b538      	push	{r3, r4, r5, lr}
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	4d05      	ldr	r5, [pc, #20]	; (800d3fc <_isatty_r+0x1c>)
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	4608      	mov	r0, r1
 800d3ea:	602b      	str	r3, [r5, #0]
 800d3ec:	f7f4 fc1f 	bl	8001c2e <_isatty>
 800d3f0:	1c43      	adds	r3, r0, #1
 800d3f2:	d102      	bne.n	800d3fa <_isatty_r+0x1a>
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	b103      	cbz	r3, 800d3fa <_isatty_r+0x1a>
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
 800d3fc:	2000034c 	.word	0x2000034c

0800d400 <_lseek_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	4604      	mov	r4, r0
 800d404:	4d06      	ldr	r5, [pc, #24]	; (800d420 <_lseek_r+0x20>)
 800d406:	4608      	mov	r0, r1
 800d408:	4611      	mov	r1, r2
 800d40a:	2200      	movs	r2, #0
 800d40c:	602a      	str	r2, [r5, #0]
 800d40e:	461a      	mov	r2, r3
 800d410:	f7f4 fc18 	bl	8001c44 <_lseek>
 800d414:	1c43      	adds	r3, r0, #1
 800d416:	d102      	bne.n	800d41e <_lseek_r+0x1e>
 800d418:	682b      	ldr	r3, [r5, #0]
 800d41a:	b103      	cbz	r3, 800d41e <_lseek_r+0x1e>
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	2000034c 	.word	0x2000034c

0800d424 <_read_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4604      	mov	r4, r0
 800d428:	4d06      	ldr	r5, [pc, #24]	; (800d444 <_read_r+0x20>)
 800d42a:	4608      	mov	r0, r1
 800d42c:	4611      	mov	r1, r2
 800d42e:	2200      	movs	r2, #0
 800d430:	602a      	str	r2, [r5, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	f7f4 fba6 	bl	8001b84 <_read>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d102      	bne.n	800d442 <_read_r+0x1e>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	b103      	cbz	r3, 800d442 <_read_r+0x1e>
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	2000034c 	.word	0x2000034c

0800d448 <round>:
 800d448:	ec51 0b10 	vmov	r0, r1, d0
 800d44c:	b570      	push	{r4, r5, r6, lr}
 800d44e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d452:	460b      	mov	r3, r1
 800d454:	ee10 2a10 	vmov	r2, s0
 800d458:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d45c:	2c13      	cmp	r4, #19
 800d45e:	dc19      	bgt.n	800d494 <round+0x4c>
 800d460:	2c00      	cmp	r4, #0
 800d462:	da09      	bge.n	800d478 <round+0x30>
 800d464:	3401      	adds	r4, #1
 800d466:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d46a:	d103      	bne.n	800d474 <round+0x2c>
 800d46c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d470:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d474:	2100      	movs	r1, #0
 800d476:	e028      	b.n	800d4ca <round+0x82>
 800d478:	4d15      	ldr	r5, [pc, #84]	; (800d4d0 <round+0x88>)
 800d47a:	4125      	asrs	r5, r4
 800d47c:	ea01 0605 	and.w	r6, r1, r5
 800d480:	4332      	orrs	r2, r6
 800d482:	d00e      	beq.n	800d4a2 <round+0x5a>
 800d484:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d488:	fa42 f404 	asr.w	r4, r2, r4
 800d48c:	4423      	add	r3, r4
 800d48e:	ea23 0305 	bic.w	r3, r3, r5
 800d492:	e7ef      	b.n	800d474 <round+0x2c>
 800d494:	2c33      	cmp	r4, #51	; 0x33
 800d496:	dd07      	ble.n	800d4a8 <round+0x60>
 800d498:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d49c:	d101      	bne.n	800d4a2 <round+0x5a>
 800d49e:	f7f2 fef9 	bl	8000294 <__adddf3>
 800d4a2:	ec41 0b10 	vmov	d0, r0, r1
 800d4a6:	bd70      	pop	{r4, r5, r6, pc}
 800d4a8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d4ac:	f04f 35ff 	mov.w	r5, #4294967295
 800d4b0:	40f5      	lsrs	r5, r6
 800d4b2:	4228      	tst	r0, r5
 800d4b4:	d0f5      	beq.n	800d4a2 <round+0x5a>
 800d4b6:	2101      	movs	r1, #1
 800d4b8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d4bc:	fa01 f404 	lsl.w	r4, r1, r4
 800d4c0:	1912      	adds	r2, r2, r4
 800d4c2:	bf28      	it	cs
 800d4c4:	185b      	addcs	r3, r3, r1
 800d4c6:	ea22 0105 	bic.w	r1, r2, r5
 800d4ca:	4608      	mov	r0, r1
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	e7e8      	b.n	800d4a2 <round+0x5a>
 800d4d0:	000fffff 	.word	0x000fffff

0800d4d4 <_init>:
 800d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d6:	bf00      	nop
 800d4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4da:	bc08      	pop	{r3}
 800d4dc:	469e      	mov	lr, r3
 800d4de:	4770      	bx	lr

0800d4e0 <_fini>:
 800d4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e2:	bf00      	nop
 800d4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4e6:	bc08      	pop	{r3}
 800d4e8:	469e      	mov	lr, r3
 800d4ea:	4770      	bx	lr
