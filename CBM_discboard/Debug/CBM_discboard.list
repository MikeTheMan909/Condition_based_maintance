
CBM_discboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1f4  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  0800d430  0800d430  0001d430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dc74  0800dc74  0001dc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dc7c  0800dc7c  0001dc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dc80  0800dc80  0001dc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  20000000  0800dc84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000167  200001f0  0800de74  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000601  20000357  0800de74  00020357  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c08f  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003efc  00000000  00000000  0003c2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016f0  00000000  00000000  000401b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001518  00000000  00000000  000418a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003680c  00000000  00000000  00042dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c91d  00000000  00000000  000795cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149057  00000000  00000000  00095ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001def40  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f78  00000000  00000000  001def90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001f0 	.word	0x200001f0
 8000254:	00000000 	.word	0x00000000
 8000258:	0800d414 	.word	0x0800d414

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f4 	.word	0x200001f4
 8000274:	0800d414 	.word	0x0800d414

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_uldivmod>:
 8000bf0:	b953      	cbnz	r3, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf2:	b94a      	cbnz	r2, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	2800      	cmpeq	r0, #0
 8000bfa:	bf1c      	itt	ne
 8000bfc:	f04f 31ff 	movne.w	r1, #4294967295
 8000c00:	f04f 30ff 	movne.w	r0, #4294967295
 8000c04:	f000 b982 	b.w	8000f0c <__aeabi_idiv0>
 8000c08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c10:	f000 f806 	bl	8000c20 <__udivmoddi4>
 8000c14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1c:	b004      	add	sp, #16
 8000c1e:	4770      	bx	lr

08000c20 <__udivmoddi4>:
 8000c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c26:	4604      	mov	r4, r0
 8000c28:	460f      	mov	r7, r1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d148      	bne.n	8000cc0 <__udivmoddi4+0xa0>
 8000c2e:	428a      	cmp	r2, r1
 8000c30:	4694      	mov	ip, r2
 8000c32:	d961      	bls.n	8000cf8 <__udivmoddi4+0xd8>
 8000c34:	fab2 f382 	clz	r3, r2
 8000c38:	b143      	cbz	r3, 8000c4c <__udivmoddi4+0x2c>
 8000c3a:	f1c3 0120 	rsb	r1, r3, #32
 8000c3e:	409f      	lsls	r7, r3
 8000c40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c44:	409c      	lsls	r4, r3
 8000c46:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4a:	430f      	orrs	r7, r1
 8000c4c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c50:	fa1f fe8c 	uxth.w	lr, ip
 8000c54:	0c22      	lsrs	r2, r4, #16
 8000c56:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c5a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c5e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c62:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c66:	4290      	cmp	r0, r2
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x5c>
 8000c6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c6e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x5a>
 8000c74:	4290      	cmp	r0, r2
 8000c76:	f200 8137 	bhi.w	8000ee8 <__udivmoddi4+0x2c8>
 8000c7a:	463e      	mov	r6, r7
 8000c7c:	1a12      	subs	r2, r2, r0
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c84:	fb01 2210 	mls	r2, r1, r0, r2
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c90:	45a6      	cmp	lr, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x86>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x84>
 8000c9e:	45a6      	cmp	lr, r4
 8000ca0:	f200 811c 	bhi.w	8000edc <__udivmoddi4+0x2bc>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	2600      	movs	r6, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0x9a>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c5 4300 	strd	r4, r3, [r5]
 8000cba:	4631      	mov	r1, r6
 8000cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0xb8>
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	f000 80fd 	beq.w	8000ec4 <__udivmoddi4+0x2a4>
 8000cca:	2600      	movs	r6, #0
 8000ccc:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd8:	fab3 f683 	clz	r6, r3
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d14b      	bne.n	8000d78 <__udivmoddi4+0x158>
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	f0c0 80f2 	bcc.w	8000eca <__udivmoddi4+0x2aa>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f240 80ef 	bls.w	8000eca <__udivmoddi4+0x2aa>
 8000cec:	4630      	mov	r0, r6
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e3      	beq.n	8000cba <__udivmoddi4+0x9a>
 8000cf2:	e9c5 4700 	strd	r4, r7, [r5]
 8000cf6:	e7e0      	b.n	8000cba <__udivmoddi4+0x9a>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xdc>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f382 	clz	r3, r2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f040 809d 	bne.w	8000e40 <__udivmoddi4+0x220>
 8000d06:	1a89      	subs	r1, r1, r2
 8000d08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d0c:	b297      	uxth	r7, r2
 8000d0e:	2601      	movs	r6, #1
 8000d10:	0c20      	lsrs	r0, r4, #16
 8000d12:	fbb1 f2fe 	udiv	r2, r1, lr
 8000d16:	fb0e 1112 	mls	r1, lr, r2, r1
 8000d1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1e:	fb07 f002 	mul.w	r0, r7, r2
 8000d22:	4288      	cmp	r0, r1
 8000d24:	d90f      	bls.n	8000d46 <__udivmoddi4+0x126>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f102 38ff 	add.w	r8, r2, #4294967295
 8000d2e:	bf2c      	ite	cs
 8000d30:	f04f 0901 	movcs.w	r9, #1
 8000d34:	f04f 0900 	movcc.w	r9, #0
 8000d38:	4288      	cmp	r0, r1
 8000d3a:	d903      	bls.n	8000d44 <__udivmoddi4+0x124>
 8000d3c:	f1b9 0f00 	cmp.w	r9, #0
 8000d40:	f000 80cf 	beq.w	8000ee2 <__udivmoddi4+0x2c2>
 8000d44:	4642      	mov	r2, r8
 8000d46:	1a09      	subs	r1, r1, r0
 8000d48:	b2a4      	uxth	r4, r4
 8000d4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x150>
 8000d5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d62:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x14e>
 8000d68:	42a7      	cmp	r7, r4
 8000d6a:	f200 80b4 	bhi.w	8000ed6 <__udivmoddi4+0x2b6>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	1be4      	subs	r4, r4, r7
 8000d72:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d76:	e79b      	b.n	8000cb0 <__udivmoddi4+0x90>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	40f9      	lsrs	r1, r7
 8000d88:	40b2      	lsls	r2, r6
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	431c      	orrs	r4, r3
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	0c20      	lsrs	r0, r4, #16
 8000da2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000da6:	fb09 1118 	mls	r1, r9, r8, r1
 8000daa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dae:	fb08 f00e 	mul.w	r0, r8, lr
 8000db2:	4288      	cmp	r0, r1
 8000db4:	d90f      	bls.n	8000dd6 <__udivmoddi4+0x1b6>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dbe:	bf2c      	ite	cs
 8000dc0:	f04f 0b01 	movcs.w	fp, #1
 8000dc4:	f04f 0b00 	movcc.w	fp, #0
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	d903      	bls.n	8000dd4 <__udivmoddi4+0x1b4>
 8000dcc:	f1bb 0f00 	cmp.w	fp, #0
 8000dd0:	f000 808d 	beq.w	8000eee <__udivmoddi4+0x2ce>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	1a09      	subs	r1, r1, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dde:	fb09 1110 	mls	r1, r9, r0, r1
 8000de2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x1de>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d201      	bcs.n	8000dfc <__udivmoddi4+0x1dc>
 8000df8:	458e      	cmp	lr, r1
 8000dfa:	d87f      	bhi.n	8000efc <__udivmoddi4+0x2dc>
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	fba0 9802 	umull	r9, r8, r0, r2
 8000e0a:	4541      	cmp	r1, r8
 8000e0c:	464c      	mov	r4, r9
 8000e0e:	46c6      	mov	lr, r8
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x1f8>
 8000e12:	d106      	bne.n	8000e22 <__udivmoddi4+0x202>
 8000e14:	454b      	cmp	r3, r9
 8000e16:	d204      	bcs.n	8000e22 <__udivmoddi4+0x202>
 8000e18:	3801      	subs	r0, #1
 8000e1a:	ebb9 0402 	subs.w	r4, r9, r2
 8000e1e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d070      	beq.n	8000f08 <__udivmoddi4+0x2e8>
 8000e26:	1b1a      	subs	r2, r3, r4
 8000e28:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2c:	fa22 f306 	lsr.w	r3, r2, r6
 8000e30:	fa01 f707 	lsl.w	r7, r1, r7
 8000e34:	40f1      	lsrs	r1, r6
 8000e36:	2600      	movs	r6, #0
 8000e38:	431f      	orrs	r7, r3
 8000e3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3e:	e73c      	b.n	8000cba <__udivmoddi4+0x9a>
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	f1c3 0020 	rsb	r0, r3, #32
 8000e48:	fa01 f203 	lsl.w	r2, r1, r3
 8000e4c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e50:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e54:	fa24 f100 	lsr.w	r1, r4, r0
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	409c      	lsls	r4, r3
 8000e5e:	4311      	orrs	r1, r2
 8000e60:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e64:	0c0a      	lsrs	r2, r1, #16
 8000e66:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e6a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e6e:	fb00 f607 	mul.w	r6, r0, r7
 8000e72:	4296      	cmp	r6, r2
 8000e74:	d90e      	bls.n	8000e94 <__udivmoddi4+0x274>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	bf2c      	ite	cs
 8000e80:	f04f 0901 	movcs.w	r9, #1
 8000e84:	f04f 0900 	movcc.w	r9, #0
 8000e88:	4296      	cmp	r6, r2
 8000e8a:	d902      	bls.n	8000e92 <__udivmoddi4+0x272>
 8000e8c:	f1b9 0f00 	cmp.w	r9, #0
 8000e90:	d031      	beq.n	8000ef6 <__udivmoddi4+0x2d6>
 8000e92:	4640      	mov	r0, r8
 8000e94:	1b92      	subs	r2, r2, r6
 8000e96:	b289      	uxth	r1, r1
 8000e98:	fbb2 f6fe 	udiv	r6, r2, lr
 8000e9c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000ea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000ea4:	fb06 f207 	mul.w	r2, r6, r7
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x29c>
 8000eac:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb4:	d201      	bcs.n	8000eba <__udivmoddi4+0x29a>
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	d823      	bhi.n	8000f02 <__udivmoddi4+0x2e2>
 8000eba:	4646      	mov	r6, r8
 8000ebc:	1a89      	subs	r1, r1, r2
 8000ebe:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec2:	e725      	b.n	8000d10 <__udivmoddi4+0xf0>
 8000ec4:	462e      	mov	r6, r5
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	e6f7      	b.n	8000cba <__udivmoddi4+0x9a>
 8000eca:	1a84      	subs	r4, r0, r2
 8000ecc:	eb61 0303 	sbc.w	r3, r1, r3
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	461f      	mov	r7, r3
 8000ed4:	e70b      	b.n	8000cee <__udivmoddi4+0xce>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e749      	b.n	8000d70 <__udivmoddi4+0x150>
 8000edc:	4464      	add	r4, ip
 8000ede:	3802      	subs	r0, #2
 8000ee0:	e6e1      	b.n	8000ca6 <__udivmoddi4+0x86>
 8000ee2:	3a02      	subs	r2, #2
 8000ee4:	4461      	add	r1, ip
 8000ee6:	e72e      	b.n	8000d46 <__udivmoddi4+0x126>
 8000ee8:	3e02      	subs	r6, #2
 8000eea:	4462      	add	r2, ip
 8000eec:	e6c6      	b.n	8000c7c <__udivmoddi4+0x5c>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4461      	add	r1, ip
 8000ef4:	e76f      	b.n	8000dd6 <__udivmoddi4+0x1b6>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	e7cb      	b.n	8000e94 <__udivmoddi4+0x274>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	e77d      	b.n	8000dfe <__udivmoddi4+0x1de>
 8000f02:	3e02      	subs	r6, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	e7d9      	b.n	8000ebc <__udivmoddi4+0x29c>
 8000f08:	462e      	mov	r6, r5
 8000f0a:	e6d6      	b.n	8000cba <__udivmoddi4+0x9a>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b090      	sub	sp, #64	; 0x40
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f003 f923 	bl	8004160 <HAL_Init>
  HAL_PWREx_EnableVddIO2();
 8000f1a:	f003 fdd1 	bl	8004ac0 <HAL_PWREx_EnableVddIO2>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1e:	f000 f88d 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f22:	f000 f9a1 	bl	8001268 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f26:	f000 f8dd 	bl	80010e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f2a:	f000 f951 	bl	80011d0 <MX_USART1_UART_Init>
  c.send_flag = config();
 8000f2e:	f009 f8d5 	bl	800a0dc <config>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <main+0xf8>)
 8000f38:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 2 */
  main_print_debug("****************PROGRAM STARTED******************");
 8000f3a:	4b34      	ldr	r3, [pc, #208]	; (800100c <main+0xfc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4934      	ldr	r1, [pc, #208]	; (8001010 <main+0x100>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f009 f925 	bl	800a190 <print_debug>
  main_print_debug("Peripherals initialized!");
 8000f46:	4b31      	ldr	r3, [pc, #196]	; (800100c <main+0xfc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4932      	ldr	r1, [pc, #200]	; (8001014 <main+0x104>)
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f009 f91f 	bl	800a190 <print_debug>
  SPSGRF_Init();
 8000f52:	f009 f985 	bl	800a260 <SPSGRF_Init>
  main_print_debug("SPSGRF initialized!");
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <main+0xfc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	492f      	ldr	r1, [pc, #188]	; (8001018 <main+0x108>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f009 f917 	bl	800a190 <print_debug>
  char test2[20];
  uint8_t rxdata[20];
  uint8_t temp_val[20];
  int i = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_print_debug("Main loop begin");
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <main+0xfc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	492c      	ldr	r1, [pc, #176]	; (800101c <main+0x10c>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f009 f90f 	bl	800a190 <print_debug>
  while (1)
  {
	  switch(state){
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <main+0x110>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d026      	beq.n	8000fc8 <main+0xb8>
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	dcf9      	bgt.n	8000f72 <main+0x62>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <main+0x78>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d014      	beq.n	8000fb0 <main+0xa0>
 8000f86:	e7f4      	b.n	8000f72 <main+0x62>
	  case SEND:
		  main_print_debug("Data send request");
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <main+0xfc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4925      	ldr	r1, [pc, #148]	; (8001024 <main+0x114>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f009 f8fe 	bl	800a190 <print_debug>
		  comm_request(3.4,2,7,8);
 8000f94:	2208      	movs	r2, #8
 8000f96:	2107      	movs	r1, #7
 8000f98:	2002      	movs	r0, #2
 8000f9a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001028 <main+0x118>
 8000f9e:	f009 f8b5 	bl	800a10c <comm_request>
		  HAL_Delay(20);
 8000fa2:	2014      	movs	r0, #20
 8000fa4:	f003 f960 	bl	8004268 <HAL_Delay>
		  state = IDLE;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <main+0x110>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	701a      	strb	r2, [r3, #0]
		  break;
 8000fae:	e02a      	b.n	8001006 <main+0xf6>
	  case RECEIVE:
		  main_print_debug("Starting RX state");
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <main+0xfc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	491d      	ldr	r1, [pc, #116]	; (800102c <main+0x11c>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f009 f8ea 	bl	800a190 <print_debug>
		  SPSGRF_StartRx();
 8000fbc:	f009 faa0 	bl	800a500 <SPSGRF_StartRx>
		  state = IDLE;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <main+0x110>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	701a      	strb	r2, [r3, #0]
		  break;
 8000fc6:	e01e      	b.n	8001006 <main+0xf6>
	  case IDLE:
		  if(HAL_GPIO_ReadPin(GPIOC, USER_Button_Pin)){
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	4818      	ldr	r0, [pc, #96]	; (8001030 <main+0x120>)
 8000fce:	f003 fc89 	bl	80048e4 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d012      	beq.n	8000ffe <main+0xee>
			  main_print_debug("Button pressed");
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <main+0xfc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4915      	ldr	r1, [pc, #84]	; (8001034 <main+0x124>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f009 f8d6 	bl	800a190 <print_debug>
			  state = SEND;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <main+0x110>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
			  sprintf(test2, "hallo! %d", i);
 8000fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ff0:	4911      	ldr	r1, [pc, #68]	; (8001038 <main+0x128>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f009 ff2c 	bl	800ae50 <siprintf>
			  i++;
 8000ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
		  }
		  HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	; 0x64
 8001000:	f003 f932 	bl	8004268 <HAL_Delay>
		  break;
 8001004:	bf00      	nop
	  switch(state){
 8001006:	e7b4      	b.n	8000f72 <main+0x62>
 8001008:	20000344 	.word	0x20000344
 800100c:	20000000 	.word	0x20000000
 8001010:	0800d438 	.word	0x0800d438
 8001014:	0800d46c 	.word	0x0800d46c
 8001018:	0800d488 	.word	0x0800d488
 800101c:	0800d49c 	.word	0x0800d49c
 8001020:	2000032c 	.word	0x2000032c
 8001024:	0800d4ac 	.word	0x0800d4ac
 8001028:	4059999a 	.word	0x4059999a
 800102c:	0800d4c0 	.word	0x0800d4c0
 8001030:	42020800 	.word	0x42020800
 8001034:	0800d4d4 	.word	0x0800d4d4
 8001038:	0800d4e4 	.word	0x0800d4e4

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b09e      	sub	sp, #120	; 0x78
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	2260      	movs	r2, #96	; 0x60
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f009 fa8c 	bl	800a568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8001060:	2000      	movs	r0, #0
 8001062:	f003 fcab 	bl	80049bc <HAL_PWREx_ControlVoltageScaling>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800106c:	f000 fbec 	bl	8001848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001070:	2310      	movs	r3, #16
 8001072:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001078:	2310      	movs	r3, #16
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800107c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001080:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001082:	2300      	movs	r3, #0
 8001084:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fd38 	bl	8004b00 <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001096:	f000 fbd7 	bl	8001848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	231f      	movs	r3, #31
 800109c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 fb90 	bl	80057dc <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010c2:	f000 fbc1 	bl	8001848 <Error_Handler>
  }
  __HAL_RCC_PWR_CLK_DISABLE();
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SystemClock_Config+0xa4>)
 80010c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <SystemClock_Config+0xa4>)
 80010ce:	f023 0304 	bic.w	r3, r3, #4
 80010d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80010d6:	bf00      	nop
 80010d8:	3778      	adds	r7, #120	; 0x78
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	46020c00 	.word	0x46020c00

080010e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010f4:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <MX_SPI1_Init+0xe4>)
 80010f6:	4a35      	ldr	r2, [pc, #212]	; (80011cc <MX_SPI1_Init+0xe8>)
 80010f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <MX_SPI1_Init+0xe4>)
 80010fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001100:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <MX_SPI1_Init+0xe4>)
 800110a:	2207      	movs	r2, #7
 800110c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001114:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <MX_SPI1_Init+0xe4>)
 800111c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001120:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001124:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001128:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <MX_SPI1_Init+0xe4>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001136:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001138:	2200      	movs	r2, #0
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_SPI1_Init+0xe4>)
 800113e:	2207      	movs	r2, #7
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_SPI1_Init+0xe4>)
 800114c:	2200      	movs	r2, #0
 800114e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001152:	2200      	movs	r2, #0
 8001154:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001158:	2200      	movs	r2, #0
 800115a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_SPI1_Init+0xe4>)
 800115e:	2200      	movs	r2, #0
 8001160:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001164:	2200      	movs	r2, #0
 8001166:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_SPI1_Init+0xe4>)
 800116a:	2200      	movs	r2, #0
 800116c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_SPI1_Init+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001182:	2200      	movs	r2, #0
 8001184:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_SPI1_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800118c:	480e      	ldr	r0, [pc, #56]	; (80011c8 <MX_SPI1_Init+0xe4>)
 800118e:	f007 f90d 	bl	80083ac <HAL_SPI_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_SPI1_Init+0xb8>
  {
    Error_Handler();
 8001198:	f000 fb56 	bl	8001848 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80011a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_SPI1_Init+0xe4>)
 80011b0:	f008 fa25 	bl	80095fe <HAL_SPIEx_SetConfigAutonomousMode>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_SPI1_Init+0xda>
  {
    Error_Handler();
 80011ba:	f000 fb45 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000020c 	.word	0x2000020c
 80011cc:	40013000 	.word	0x40013000

080011d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <MX_USART1_UART_Init+0x90>)
 80011d6:	4a23      	ldr	r2, [pc, #140]	; (8001264 <MX_USART1_UART_Init+0x94>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_USART1_UART_Init+0x90>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <MX_USART1_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_USART1_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <MX_USART1_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_USART1_UART_Init+0x90>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_USART1_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_USART1_UART_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_USART1_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_USART1_UART_Init+0x90>)
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_USART1_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <MX_USART1_UART_Init+0x90>)
 800121a:	f008 fa31 	bl	8009680 <HAL_UART_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001224:	f000 fb10 	bl	8001848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_USART1_UART_Init+0x90>)
 800122c:	f008 fe8c 	bl	8009f48 <HAL_UARTEx_SetTxFifoThreshold>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001236:	f000 fb07 	bl	8001848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <MX_USART1_UART_Init+0x90>)
 800123e:	f008 fec1 	bl	8009fc4 <HAL_UARTEx_SetRxFifoThreshold>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001248:	f000 fafe 	bl	8001848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_USART1_UART_Init+0x90>)
 800124e:	f008 fe42 	bl	8009ed6 <HAL_UARTEx_DisableFifoMode>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001258:	f000 faf6 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000029c 	.word	0x2000029c
 8001264:	40013800 	.word	0x40013800

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	; 0x38
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800127e:	4bbf      	ldr	r3, [pc, #764]	; (800157c <MX_GPIO_Init+0x314>)
 8001280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001284:	4abd      	ldr	r2, [pc, #756]	; (800157c <MX_GPIO_Init+0x314>)
 8001286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800128e:	4bbb      	ldr	r3, [pc, #748]	; (800157c <MX_GPIO_Init+0x314>)
 8001290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001298:	623b      	str	r3, [r7, #32]
 800129a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129c:	4bb7      	ldr	r3, [pc, #732]	; (800157c <MX_GPIO_Init+0x314>)
 800129e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012a2:	4ab6      	ldr	r2, [pc, #728]	; (800157c <MX_GPIO_Init+0x314>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012ac:	4bb3      	ldr	r3, [pc, #716]	; (800157c <MX_GPIO_Init+0x314>)
 80012ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4bb0      	ldr	r3, [pc, #704]	; (800157c <MX_GPIO_Init+0x314>)
 80012bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c0:	4aae      	ldr	r2, [pc, #696]	; (800157c <MX_GPIO_Init+0x314>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012ca:	4bac      	ldr	r3, [pc, #688]	; (800157c <MX_GPIO_Init+0x314>)
 80012cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012d8:	4ba8      	ldr	r3, [pc, #672]	; (800157c <MX_GPIO_Init+0x314>)
 80012da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012de:	4aa7      	ldr	r2, [pc, #668]	; (800157c <MX_GPIO_Init+0x314>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012e8:	4ba4      	ldr	r3, [pc, #656]	; (800157c <MX_GPIO_Init+0x314>)
 80012ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	4ba1      	ldr	r3, [pc, #644]	; (800157c <MX_GPIO_Init+0x314>)
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fc:	4a9f      	ldr	r2, [pc, #636]	; (800157c <MX_GPIO_Init+0x314>)
 80012fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001302:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001306:	4b9d      	ldr	r3, [pc, #628]	; (800157c <MX_GPIO_Init+0x314>)
 8001308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b99      	ldr	r3, [pc, #612]	; (800157c <MX_GPIO_Init+0x314>)
 8001316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800131a:	4a98      	ldr	r2, [pc, #608]	; (800157c <MX_GPIO_Init+0x314>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001324:	4b95      	ldr	r3, [pc, #596]	; (800157c <MX_GPIO_Init+0x314>)
 8001326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	4b92      	ldr	r3, [pc, #584]	; (800157c <MX_GPIO_Init+0x314>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001338:	4a90      	ldr	r2, [pc, #576]	; (800157c <MX_GPIO_Init+0x314>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001342:	4b8e      	ldr	r3, [pc, #568]	; (800157c <MX_GPIO_Init+0x314>)
 8001344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001350:	4b8a      	ldr	r3, [pc, #552]	; (800157c <MX_GPIO_Init+0x314>)
 8001352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001356:	4a89      	ldr	r2, [pc, #548]	; (800157c <MX_GPIO_Init+0x314>)
 8001358:	f043 0310 	orr.w	r3, r3, #16
 800135c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001360:	4b86      	ldr	r3, [pc, #536]	; (800157c <MX_GPIO_Init+0x314>)
 8001362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b83      	ldr	r3, [pc, #524]	; (800157c <MX_GPIO_Init+0x314>)
 8001370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001374:	4a81      	ldr	r2, [pc, #516]	; (800157c <MX_GPIO_Init+0x314>)
 8001376:	f043 0320 	orr.w	r3, r3, #32
 800137a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800137e:	4b7f      	ldr	r3, [pc, #508]	; (800157c <MX_GPIO_Init+0x314>)
 8001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2120      	movs	r1, #32
 8001390:	487b      	ldr	r0, [pc, #492]	; (8001580 <MX_GPIO_Init+0x318>)
 8001392:	f003 fabf 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	21c2      	movs	r1, #194	; 0xc2
 800139a:	487a      	ldr	r0, [pc, #488]	; (8001584 <MX_GPIO_Init+0x31c>)
 800139c:	f003 faba 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a6:	4878      	ldr	r0, [pc, #480]	; (8001588 <MX_GPIO_Init+0x320>)
 80013a8:	f003 fab4 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	21c0      	movs	r1, #192	; 0xc0
 80013b0:	4876      	ldr	r0, [pc, #472]	; (800158c <MX_GPIO_Init+0x324>)
 80013b2:	f003 faaf 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 80013bc:	4874      	ldr	r0, [pc, #464]	; (8001590 <MX_GPIO_Init+0x328>)
 80013be:	f003 faa9 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2110      	movs	r1, #16
 80013c6:	4870      	ldr	r0, [pc, #448]	; (8001588 <MX_GPIO_Init+0x320>)
 80013c8:	f003 faa4 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d2:	4870      	ldr	r0, [pc, #448]	; (8001594 <MX_GPIO_Init+0x32c>)
 80013d4:	f003 fa9e 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 80013d8:	f248 0324 	movw	r3, #32804	; 0x8024
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	4867      	ldr	r0, [pc, #412]	; (800158c <MX_GPIO_Init+0x324>)
 80013ee:	f003 f8a1 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_UART4_RX_Pin WRLS_UART4_TX_Pin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 80013f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001404:	2308      	movs	r3, #8
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	4862      	ldr	r0, [pc, #392]	; (8001598 <MX_GPIO_Init+0x330>)
 8001410:	f003 f890 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 8001414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4857      	ldr	r0, [pc, #348]	; (8001588 <MX_GPIO_Init+0x320>)
 800142a:	f003 f883 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_F_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 800142e:	2320      	movs	r3, #32
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800143e:	2305      	movs	r3, #5
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4854      	ldr	r0, [pc, #336]	; (800159c <MX_GPIO_Init+0x334>)
 800144a:	f003 f873 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO5_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 800144e:	2301      	movs	r3, #1
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800145e:	2303      	movs	r3, #3
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	484c      	ldr	r0, [pc, #304]	; (800159c <MX_GPIO_Init+0x334>)
 800146a:	f003 f863 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO7_Pin OCTOSPI_F_IO5_Pin OCTOSPI_F_IO6_Pin OCTOSPI_F_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 800146e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001480:	2305      	movs	r3, #5
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	483e      	ldr	r0, [pc, #248]	; (8001584 <MX_GPIO_Init+0x31c>)
 800148c:	f003 f852 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8001490:	2308      	movs	r3, #8
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	4838      	ldr	r0, [pc, #224]	; (8001584 <MX_GPIO_Init+0x31c>)
 80014a4:	f003 f846 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 80014a8:	2320      	movs	r3, #32
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4830      	ldr	r0, [pc, #192]	; (8001580 <MX_GPIO_Init+0x318>)
 80014c0:	f003 f838 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_SPI2_MOSI_Pin WRLS_SPI2_MISO_Pin WRLS_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 80014c4:	231a      	movs	r3, #26
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d4:	2305      	movs	r3, #5
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	4830      	ldr	r0, [pc, #192]	; (80015a0 <MX_GPIO_Init+0x338>)
 80014e0:	f003 f828 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 80014e4:	2308      	movs	r3, #8
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80014f4:	2303      	movs	r3, #3
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	4619      	mov	r1, r3
 80014fe:	4825      	ldr	r0, [pc, #148]	; (8001594 <MX_GPIO_Init+0x32c>)
 8001500:	f003 f818 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001504:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150a:	2312      	movs	r3, #18
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001516:	2304      	movs	r3, #4
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	4817      	ldr	r0, [pc, #92]	; (8001580 <MX_GPIO_Init+0x318>)
 8001522:	f003 f807 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO7_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001536:	230a      	movs	r3, #10
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	4817      	ldr	r0, [pc, #92]	; (80015a0 <MX_GPIO_Init+0x338>)
 8001542:	f002 fff7 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO0_Pin OCTOSPI_F_IO1_Pin OCTOSPI_F_IO2_Pin OCTOSPI_F_IO3_Pin
                           OCTOSPI_F_CLK_P_Pin OCTOSPI_F_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8001546:	f241 031f 	movw	r3, #4127	; 0x101f
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001558:	2305      	movs	r3, #5
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <MX_GPIO_Init+0x328>)
 8001564:	f002 ffe6 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8001568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	e013      	b.n	80015a4 <MX_GPIO_Init+0x33c>
 800157c:	46020c00 	.word	0x46020c00
 8001580:	42020400 	.word	0x42020400
 8001584:	42021c00 	.word	0x42021c00
 8001588:	42020000 	.word	0x42020000
 800158c:	42021800 	.word	0x42021800
 8001590:	42021400 	.word	0x42021400
 8001594:	42021000 	.word	0x42021000
 8001598:	42020800 	.word	0x42020800
 800159c:	42022000 	.word	0x42022000
 80015a0:	42020c00 	.word	0x42020c00
 80015a4:	4619      	mov	r1, r3
 80015a6:	489f      	ldr	r0, [pc, #636]	; (8001824 <MX_GPIO_Init+0x5bc>)
 80015a8:	f002 ffc4 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015ac:	2330      	movs	r3, #48	; 0x30
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b0:	2312      	movs	r3, #18
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015bc:	2304      	movs	r3, #4
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4898      	ldr	r0, [pc, #608]	; (8001828 <MX_GPIO_Init+0x5c0>)
 80015c8:	f002 ffb4 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 80015cc:	23c2      	movs	r3, #194	; 0xc2
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	4891      	ldr	r0, [pc, #580]	; (8001828 <MX_GPIO_Init+0x5c0>)
 80015e4:	f002 ffa6 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_IO0_Pin OCTOSPI_R_IO2_Pin OCTOSPI_R_IO1_Pin OCTOSPI_R_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 80015e8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80015fa:	230a      	movs	r3, #10
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	4889      	ldr	r0, [pc, #548]	; (800182c <MX_GPIO_Init+0x5c4>)
 8001606:	f002 ff95 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 800160a:	2304      	movs	r3, #4
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800161a:	2303      	movs	r3, #3
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	4880      	ldr	r0, [pc, #512]	; (8001828 <MX_GPIO_Init+0x5c0>)
 8001626:	f002 ff85 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_C_P_Pin USB_C_PA11_Pin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 800162a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800163c:	230a      	movs	r3, #10
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	4619      	mov	r1, r3
 8001646:	487a      	ldr	r0, [pc, #488]	; (8001830 <MX_GPIO_Init+0x5c8>)
 8001648:	f002 ff74 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPIRIT1_SDN_Pin PA4 */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin|GPIO_PIN_4;
 800164c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	4872      	ldr	r0, [pc, #456]	; (8001830 <MX_GPIO_Init+0x5c8>)
 8001666:	f002 ff65 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|WRLS_WKUP_B_Pin;
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	486c      	ldr	r0, [pc, #432]	; (8001834 <MX_GPIO_Init+0x5cc>)
 8001682:	f002 ff57 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8001686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001698:	2306      	movs	r3, #6
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a0:	4619      	mov	r1, r3
 80016a2:	4862      	ldr	r0, [pc, #392]	; (800182c <MX_GPIO_Init+0x5c4>)
 80016a4:	f002 ff46 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_SDINx_Pin MIC_CCK0_Pin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 80016a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80016ba:	2303      	movs	r3, #3
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	485c      	ldr	r0, [pc, #368]	; (8001838 <MX_GPIO_Init+0x5d0>)
 80016c6:	f002 ff35 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin Mems_INT_IIS2MDCD9_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin|Mems_INT_IIS2MDCD9_Pin;
 80016ca:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	4619      	mov	r1, r3
 80016de:	4857      	ldr	r0, [pc, #348]	; (800183c <MX_GPIO_Init+0x5d4>)
 80016e0:	f002 ff28 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO6_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80016e4:	2308      	movs	r3, #8
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80016f4:	230a      	movs	r3, #10
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4849      	ldr	r0, [pc, #292]	; (8001824 <MX_GPIO_Init+0x5bc>)
 8001700:	f002 ff18 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8001704:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4847      	ldr	r0, [pc, #284]	; (8001838 <MX_GPIO_Init+0x5d0>)
 800171a:	f002 ff0b 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_CLK_P_Pin OCTOSPI_R_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 800171e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001730:	230a      	movs	r3, #10
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	4841      	ldr	r0, [pc, #260]	; (8001840 <MX_GPIO_Init+0x5d8>)
 800173c:	f002 fefa 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	4835      	ldr	r0, [pc, #212]	; (800182c <MX_GPIO_Init+0x5c4>)
 8001756:	f002 feed 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRIT_INTR_Pin */
  GPIO_InitStruct.Pin = SPIRIT_INTR_Pin;
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800175e:	4b39      	ldr	r3, [pc, #228]	; (8001844 <MX_GPIO_Init+0x5dc>)
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPIRIT_INTR_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	4832      	ldr	r0, [pc, #200]	; (8001838 <MX_GPIO_Init+0x5d0>)
 800176e:	f002 fee1 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8001772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001784:	2305      	movs	r3, #5
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	482c      	ldr	r0, [pc, #176]	; (8001840 <MX_GPIO_Init+0x5d8>)
 8001790:	f002 fed0 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 8001794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179a:	2303      	movs	r3, #3
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	4825      	ldr	r0, [pc, #148]	; (8001840 <MX_GPIO_Init+0x5d8>)
 80017aa:	f002 fec3 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 80017ae:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	4819      	ldr	r0, [pc, #100]	; (800182c <MX_GPIO_Init+0x5c4>)
 80017c8:	f002 feb4 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 80017cc:	2302      	movs	r3, #2
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80017dc:	2306      	movs	r3, #6
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	4816      	ldr	r0, [pc, #88]	; (8001840 <MX_GPIO_Init+0x5d8>)
 80017e8:	f002 fea4 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80017ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <MX_GPIO_Init+0x5d0>)
 8001806:	f002 fe95 	bl	8004534 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI7_IRQn, 1, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2101      	movs	r1, #1
 800180e:	2012      	movs	r0, #18
 8001810:	f002 fe4d 	bl	80044ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8001814:	2012      	movs	r0, #18
 8001816:	f002 fe64 	bl	80044e2 <HAL_NVIC_EnableIRQ>

}
 800181a:	bf00      	nop
 800181c:	3738      	adds	r7, #56	; 0x38
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	42020800 	.word	0x42020800
 8001828:	42021c00 	.word	0x42021c00
 800182c:	42021400 	.word	0x42021400
 8001830:	42020000 	.word	0x42020000
 8001834:	42021800 	.word	0x42021800
 8001838:	42021000 	.word	0x42021000
 800183c:	42020c00 	.word	0x42020c00
 8001840:	42020400 	.word	0x42020400
 8001844:	10210000 	.word	0x10210000

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_MspInit+0x30>)
 800185c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_MspInit+0x30>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_MspInit+0x30>)
 800186c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001878:	f003 f932 	bl	8004ae0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	46020c00 	.word	0x46020c00

08001888 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0ba      	sub	sp, #232	; 0xe8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	22c0      	movs	r2, #192	; 0xc0
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f008 fe5d 	bl	800a568 <memset>
  if(hspi->Instance==SPI1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a26      	ldr	r2, [pc, #152]	; (800194c <HAL_SPI_MspInit+0xc4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d144      	bne.n	8001942 <HAL_SPI_MspInit+0xba>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80018b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80018bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80018be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 face 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
 80018d6:	f7ff ffb7 	bl	8001848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_SPI_MspInit+0xc8>)
 80018dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <HAL_SPI_MspInit+0xc8>)
 80018e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_SPI_MspInit+0xc8>)
 80018ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_SPI_MspInit+0xc8>)
 80018fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018fe:	4a14      	ldr	r2, [pc, #80]	; (8001950 <HAL_SPI_MspInit+0xc8>)
 8001900:	f043 0310 	orr.w	r3, r3, #16
 8001904:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_SPI_MspInit+0xc8>)
 800190a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE14     ------> SPI1_MISO
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8001916:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800191a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001930:	2305      	movs	r3, #5
 8001932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001936:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_SPI_MspInit+0xcc>)
 800193e:	f002 fdf9 	bl	8004534 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	37e8      	adds	r7, #232	; 0xe8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40013000 	.word	0x40013000
 8001950:	46020c00 	.word	0x46020c00
 8001954:	42021000 	.word	0x42021000

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0ba      	sub	sp, #232	; 0xe8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	22c0      	movs	r2, #192	; 0xc0
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f008 fdf5 	bl	800a568 <memset>
  if(huart->Instance==USART1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a24      	ldr	r2, [pc, #144]	; (8001a14 <HAL_UART_MspInit+0xbc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d141      	bne.n	8001a0c <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001988:	2301      	movs	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800198c:	2300      	movs	r3, #0
 800198e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4618      	mov	r0, r3
 8001996:	f004 fa69 	bl	8005e6c <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019a0:	f7ff ff52 	bl	8001848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_UART_MspInit+0xc0>)
 80019a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80019aa:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <HAL_UART_MspInit+0xc0>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_UART_MspInit+0xc0>)
 80019b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_UART_MspInit+0xc0>)
 80019c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019c8:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <HAL_UART_MspInit+0xc0>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_UART_MspInit+0xc0>)
 80019d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 80019e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019fa:	2307      	movs	r3, #7
 80019fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <HAL_UART_MspInit+0xc4>)
 8001a08:	f002 fd94 	bl	8004534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a0c:	bf00      	nop
 8001a0e:	37e8      	adds	r7, #232	; 0xe8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40013800 	.word	0x40013800
 8001a18:	46020c00 	.word	0x46020c00
 8001a1c:	42020000 	.word	0x42020000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6c:	f002 fbdc 	bl	8004228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <EXTI7_IRQHandler>:
/**
  * @brief This function handles EXTI Line7 interrupt.
  */

void EXTI7_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI7_IRQn 0 */
  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OCTOSPI_R_IO7_Pin);
 8001a78:	2080      	movs	r0, #128	; 0x80
 8001a7a:	f002 ff63 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
	return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_kill>:

int _kill(int pid, int sig)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a9c:	f008 fd3a 	bl	800a514 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2216      	movs	r2, #22
 8001aa4:	601a      	str	r2, [r3, #0]
	return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_exit>:

void _exit (int status)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aba:	f04f 31ff 	mov.w	r1, #4294967295
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffe7 	bl	8001a92 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ac4:	e7fe      	b.n	8001ac4 <_exit+0x12>

08001ac6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e00a      	b.n	8001aee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ad8:	e000      	b.n	8001adc <_read+0x16>
 8001ada:	bf00      	nop
 8001adc:	4601      	mov	r1, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	60ba      	str	r2, [r7, #8]
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	dbf0      	blt.n	8001ad8 <_read+0x12>
	}

return len;
 8001af6:	687b      	ldr	r3, [r7, #4]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e009      	b.n	8001b26 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	60ba      	str	r2, [r7, #8]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	e000      	b.n	8001b20 <_write+0x20>
 8001b1e:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	dbf1      	blt.n	8001b12 <_write+0x12>
	}
	return len;
 8001b2e:	687b      	ldr	r3, [r7, #4]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_close>:

int _close(int file)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	return -1;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b60:	605a      	str	r2, [r3, #4]
	return 0;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_isatty>:

int _isatty(int file)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	return 1;
 8001b78:	2301      	movs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
	return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f008 fca0 	bl	800a514 <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200c0000 	.word	0x200c0000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	20000330 	.word	0x20000330
 8001c08:	20000358 	.word	0x20000358

08001c0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <SystemInit+0x68>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <SystemInit+0x68>)
 8001c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <SystemInit+0x6c>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <SystemInit+0x6c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <SystemInit+0x6c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <SystemInit+0x6c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <SystemInit+0x6c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <SystemInit+0x6c>)
 8001c3e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c42:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c46:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <SystemInit+0x6c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <SystemInit+0x6c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <SystemInit+0x6c>)
 8001c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <SystemInit+0x6c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SystemInit+0x68>)
 8001c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c66:	609a      	str	r2, [r3, #8]
  #endif
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00
 8001c78:	46020c00 	.word	0x46020c00

08001c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c82:	e003      	b.n	8001c8c <LoopCopyDataInit>

08001c84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c8a:	3104      	adds	r1, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c94:	d3f6      	bcc.n	8001c84 <CopyDataInit>
	ldr	r2, =_sbss
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c98:	e002      	b.n	8001ca0 <LoopFillZerobss>

08001c9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c9c:	f842 3b04 	str.w	r3, [r2], #4

08001ca0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <LoopForever+0x16>)
	cmp	r2, r3
 8001ca2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ca4:	d3f9      	bcc.n	8001c9a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca6:	f7ff ffb1 	bl	8001c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f008 fc39 	bl	800a520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cae:	f7ff f92f 	bl	8000f10 <main>

08001cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb2:	e7fe      	b.n	8001cb2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001cb4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001cb8:	0800dc84 	.word	0x0800dc84
	ldr	r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cc0:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8001cc4:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8001cc8:	20000357 	.word	0x20000357

08001ccc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC1_IRQHandler>
	...

08001cd0 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001cda:	f107 030f 	add.w	r3, r7, #15
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2050      	movs	r0, #80	; 0x50
 8001ce4:	f002 f946 	bl	8003f74 <RadioSpiReadRegisters>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <SpiritCalibrationVco+0x6c>)
 8001cec:	b212      	sxth	r2, r2
 8001cee:	4611      	mov	r1, r2
 8001cf0:	7019      	strb	r1, [r3, #0]
 8001cf2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cf6:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d105      	bne.n	8001d0a <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e004      	b.n	8001d14 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	f023 0302 	bic.w	r3, r3, #2
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001d14:	f107 030f 	add.w	r3, r7, #15
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2050      	movs	r0, #80	; 0x50
 8001d1e:	f002 f8db 	bl	8003ed8 <RadioSpiWriteRegisters>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SpiritCalibrationVco+0x6c>)
 8001d26:	b212      	sxth	r2, r2
 8001d28:	4611      	mov	r1, r2
 8001d2a:	7019      	strb	r1, [r3, #0]
 8001d2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d30:	705a      	strb	r2, [r3, #1]

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000033c 	.word	0x2000033c

08001d40 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	20e5      	movs	r0, #229	; 0xe5
 8001d4e:	f002 f911 	bl	8003f74 <RadioSpiReadRegisters>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <SpiritCalibrationGetVcoCalData+0x34>)
 8001d56:	b212      	sxth	r2, r2
 8001d58:	4611      	mov	r1, r2
 8001d5a:	7019      	strb	r1, [r3, #0]
 8001d5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d60:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d68:	b2db      	uxtb	r3, r3

}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000033c 	.word	0x2000033c

08001d78 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001d82:	f107 030f 	add.w	r3, r7, #15
 8001d86:	461a      	mov	r2, r3
 8001d88:	2101      	movs	r1, #1
 8001d8a:	206e      	movs	r0, #110	; 0x6e
 8001d8c:	f002 f8f2 	bl	8003f74 <RadioSpiReadRegisters>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001d94:	b212      	sxth	r2, r2
 8001d96:	4611      	mov	r1, r2
 8001d98:	7019      	strb	r1, [r3, #0]
 8001d9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d9e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001db4:	f107 030f 	add.w	r3, r7, #15
 8001db8:	461a      	mov	r2, r3
 8001dba:	2101      	movs	r1, #1
 8001dbc:	206e      	movs	r0, #110	; 0x6e
 8001dbe:	f002 f88b 	bl	8003ed8 <RadioSpiWriteRegisters>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001dc6:	b212      	sxth	r2, r2
 8001dc8:	4611      	mov	r1, r2
 8001dca:	7019      	strb	r1, [r3, #0]
 8001dcc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001dd0:	705a      	strb	r2, [r3, #1]

}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000033c 	.word	0x2000033c

08001de0 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001dea:	f107 030f 	add.w	r3, r7, #15
 8001dee:	461a      	mov	r2, r3
 8001df0:	2101      	movs	r1, #1
 8001df2:	206f      	movs	r0, #111	; 0x6f
 8001df4:	f002 f8be 	bl	8003f74 <RadioSpiReadRegisters>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001dfc:	b212      	sxth	r2, r2
 8001dfe:	4611      	mov	r1, r2
 8001e00:	7019      	strb	r1, [r3, #0]
 8001e02:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e06:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001e1c:	f107 030f 	add.w	r3, r7, #15
 8001e20:	461a      	mov	r2, r3
 8001e22:	2101      	movs	r1, #1
 8001e24:	206f      	movs	r0, #111	; 0x6f
 8001e26:	f002 f857 	bl	8003ed8 <RadioSpiWriteRegisters>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001e2e:	b212      	sxth	r2, r2
 8001e30:	4611      	mov	r1, r2
 8001e32:	7019      	strb	r1, [r3, #0]
 8001e34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e38:	705a      	strb	r2, [r3, #1]

}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000033c 	.word	0x2000033c

08001e48 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001e52:	f107 030f 	add.w	r3, r7, #15
 8001e56:	461a      	mov	r2, r3
 8001e58:	2101      	movs	r1, #1
 8001e5a:	209e      	movs	r0, #158	; 0x9e
 8001e5c:	f002 f88a 	bl	8003f74 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	f023 0306 	bic.w	r3, r3, #6
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	e004      	b.n	8001e86 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001e86:	f107 030f 	add.w	r3, r7, #15
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	209e      	movs	r0, #158	; 0x9e
 8001e90:	f002 f822 	bl	8003ed8 <RadioSpiWriteRegisters>
  
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 f8b1 	bl	8004010 <RadioSpiCommandStrobes>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SpiritCmdStrobeCommand+0x2c>)
 8001eb2:	b212      	sxth	r2, r2
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	7019      	strb	r1, [r3, #0]
 8001eb8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ebc:	705a      	strb	r2, [r3, #1]
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000033c 	.word	0x2000033c

08001ecc <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	785a      	ldrb	r2, [r3, #1]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	789b      	ldrb	r3, [r3, #2]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	f107 020f 	add.w	r2, r7, #15
 8001eee:	2101      	movs	r1, #1
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f001 fff1 	bl	8003ed8 <RadioSpiWriteRegisters>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <SpiritGpioInit+0x44>)
 8001efa:	b212      	sxth	r2, r2
 8001efc:	4611      	mov	r1, r2
 8001efe:	7019      	strb	r1, [r3, #0]
 8001f00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f04:	705a      	strb	r2, [r3, #1]

}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000033c 	.word	0x2000033c

08001f14 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00c      	beq.n	8001f40 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001f26:	f107 0308 	add.w	r3, r7, #8
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f008 fb1a 	bl	800a568 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f107 0308 	add.w	r3, r7, #8
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	461a      	mov	r2, r3
 8001f46:	2104      	movs	r1, #4
 8001f48:	2090      	movs	r0, #144	; 0x90
 8001f4a:	f001 ffc5 	bl	8003ed8 <RadioSpiWriteRegisters>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <SpiritIrqDeInit+0x54>)
 8001f52:	b212      	sxth	r2, r2
 8001f54:	4611      	mov	r1, r2
 8001f56:	7019      	strb	r1, [r3, #0]
 8001f58:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f5c:	705a      	strb	r2, [r3, #1]
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000033c 	.word	0x2000033c

08001f6c <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	461a      	mov	r2, r3
 8001f82:	2104      	movs	r1, #4
 8001f84:	2090      	movs	r0, #144	; 0x90
 8001f86:	f001 fff5 	bl	8003f74 <RadioSpiReadRegisters>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <SpiritIrq+0xc8>)
 8001f8e:	b212      	sxth	r2, r2
 8001f90:	4611      	mov	r1, r2
 8001f92:	7019      	strb	r1, [r3, #0]
 8001f94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f98:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	74fb      	strb	r3, [r7, #19]
 8001f9e:	e011      	b.n	8001fc4 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	3318      	adds	r3, #24
 8001fa4:	443b      	add	r3, r7
 8001fa6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001faa:	461a      	mov	r2, r3
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	f1c3 0303 	rsb	r3, r3, #3
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	4413      	add	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	74fb      	strb	r3, [r7, #19]
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d9ea      	bls.n	8001fa0 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e003      	b.n	8001fe4 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	74bb      	strb	r3, [r7, #18]
 8001fe8:	e00e      	b.n	8002008 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8001fea:	7cbb      	ldrb	r3, [r7, #18]
 8001fec:	f1c3 0303 	rsb	r3, r3, #3
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	40da      	lsrs	r2, r3
 8001ff6:	7cbb      	ldrb	r3, [r7, #18]
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	3318      	adds	r3, #24
 8001ffc:	443b      	add	r3, r7
 8001ffe:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8002002:	7cbb      	ldrb	r3, [r7, #18]
 8002004:	3301      	adds	r3, #1
 8002006:	74bb      	strb	r3, [r7, #18]
 8002008:	7cbb      	ldrb	r3, [r7, #18]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d9ed      	bls.n	8001fea <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	461a      	mov	r2, r3
 8002014:	2104      	movs	r1, #4
 8002016:	2090      	movs	r0, #144	; 0x90
 8002018:	f001 ff5e 	bl	8003ed8 <RadioSpiWriteRegisters>
 800201c:	4602      	mov	r2, r0
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <SpiritIrq+0xc8>)
 8002020:	b212      	sxth	r2, r2
 8002022:	4611      	mov	r1, r2
 8002024:	7019      	strb	r1, [r3, #0]
 8002026:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800202a:	705a      	strb	r2, [r3, #1]

}
 800202c:	bf00      	nop
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	2000033c 	.word	0x2000033c

08002038 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	461a      	mov	r2, r3
 8002042:	2104      	movs	r1, #4
 8002044:	20fa      	movs	r0, #250	; 0xfa
 8002046:	f001 ff95 	bl	8003f74 <RadioSpiReadRegisters>
 800204a:	4602      	mov	r2, r0
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <SpiritIrqClearStatus+0x2c>)
 800204e:	b212      	sxth	r2, r2
 8002050:	4611      	mov	r1, r2
 8002052:	7019      	strb	r1, [r3, #0]
 8002054:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002058:	705a      	strb	r2, [r3, #1]

}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000033c 	.word	0x2000033c

08002068 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8002068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800206c:	b08a      	sub	sp, #40	; 0x28
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a70      	ldr	r2, [pc, #448]	; (8002238 <SpiritManagementSetFrequencyBase+0x1d0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d307      	bcc.n	800208a <SpiritManagementSetFrequencyBase+0x22>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a6f      	ldr	r2, [pc, #444]	; (800223c <SpiritManagementSetFrequencyBase+0x1d4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d803      	bhi.n	800208a <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002088:	e01a      	b.n	80020c0 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <SpiritManagementSetFrequencyBase+0x1d8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d907      	bls.n	80020a2 <SpiritManagementSetFrequencyBase+0x3a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a6b      	ldr	r2, [pc, #428]	; (8002244 <SpiritManagementSetFrequencyBase+0x1dc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d803      	bhi.n	80020a2 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020a0:	e00e      	b.n	80020c0 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a68      	ldr	r2, [pc, #416]	; (8002248 <SpiritManagementSetFrequencyBase+0x1e0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d907      	bls.n	80020ba <SpiritManagementSetFrequencyBase+0x52>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a67      	ldr	r2, [pc, #412]	; (800224c <SpiritManagementSetFrequencyBase+0x1e4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d803      	bhi.n	80020ba <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 80020b2:	2302      	movs	r3, #2
 80020b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020b8:	e002      	b.n	80020c0 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 80020ba:	2303      	movs	r3, #3
 80020bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80020c0:	f000 fff6 	bl	80030b0 <SpiritRadioGetFrequencyOffset>
 80020c4:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80020c6:	f000 ffd3 	bl	8003070 <SpiritRadioGetChannelSpace>
 80020ca:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80020cc:	f000 ffb8 	bl	8003040 <SpiritRadioGetChannel>
 80020d0:	4603      	mov	r3, r0
 80020d2:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80020d4:	6a3a      	ldr	r2, [r7, #32]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	7efb      	ldrb	r3, [r7, #27]
 80020dc:	69f9      	ldr	r1, [r7, #28]
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80020e6:	f001 fdd3 	bl	8003c90 <SpiritRadioGetRefDiv>
 80020ea:	4603      	mov	r3, r0
 80020ec:	3301      	adds	r3, #1
 80020ee:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80020f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d83a      	bhi.n	800216e <SpiritManagementSetFrequencyBase+0x106>
 80020f8:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <SpiritManagementSetFrequencyBase+0x98>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002159 	.word	0x08002159
 8002104:	08002141 	.word	0x08002141
 8002108:	08002129 	.word	0x08002129
 800210c:	08002111 	.word	0x08002111
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	4a4f      	ldr	r2, [pc, #316]	; (8002250 <SpiritManagementSetFrequencyBase+0x1e8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d803      	bhi.n	8002120 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002118:	2000      	movs	r0, #0
 800211a:	f7ff fe95 	bl	8001e48 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800211e:	e026      	b.n	800216e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002120:	2001      	movs	r0, #1
 8002122:	f7ff fe91 	bl	8001e48 <SpiritCalibrationSelectVco>
    break;
 8002126:	e022      	b.n	800216e <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <SpiritManagementSetFrequencyBase+0x1ec>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d803      	bhi.n	8002138 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff fe89 	bl	8001e48 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002136:	e01a      	b.n	800216e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002138:	2001      	movs	r0, #1
 800213a:	f7ff fe85 	bl	8001e48 <SpiritCalibrationSelectVco>
    break;
 800213e:	e016      	b.n	800216e <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	4a45      	ldr	r2, [pc, #276]	; (8002258 <SpiritManagementSetFrequencyBase+0x1f0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d803      	bhi.n	8002150 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff fe7d 	bl	8001e48 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800214e:	e00e      	b.n	800216e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002150:	2001      	movs	r0, #1
 8002152:	f7ff fe79 	bl	8001e48 <SpiritCalibrationSelectVco>
    break;
 8002156:	e00a      	b.n	800216e <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4a40      	ldr	r2, [pc, #256]	; (800225c <SpiritManagementSetFrequencyBase+0x1f4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d803      	bhi.n	8002168 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff fe71 	bl	8001e48 <SpiritCalibrationSelectVco>
 8002166:	e002      	b.n	800216e <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002168:	2001      	movs	r0, #1
 800216a:	f7ff fe6d 	bl	8001e48 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f000 fe7e 	bl	8002e70 <SpiritRadioSearchWCP>
 8002174:	4603      	mov	r3, r0
 8002176:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe f9c7 	bl	800050c <__aeabi_ui2d>
 800217e:	4604      	mov	r4, r0
 8002180:	460d      	mov	r5, r1
 8002182:	7cfb      	ldrb	r3, [r7, #19]
 8002184:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002188:	4935      	ldr	r1, [pc, #212]	; (8002260 <SpiritManagementSetFrequencyBase+0x1f8>)
 800218a:	5c8a      	ldrb	r2, [r1, r2]
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	049b      	lsls	r3, r3, #18
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f9ca 	bl	800052c <__aeabi_i2d>
 8002198:	4680      	mov	r8, r0
 800219a:	4689      	mov	r9, r1
 800219c:	f001 fdec 	bl	8003d78 <SpiritRadioGetXtalFrequency>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9b2 	bl	800050c <__aeabi_ui2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4640      	mov	r0, r8
 80021ae:	4649      	mov	r1, r9
 80021b0:	f7fe fb50 	bl	8000854 <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4620      	mov	r0, r4
 80021ba:	4629      	mov	r1, r5
 80021bc:	f7fe fa20 	bl	8000600 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7fe fcf2 	bl	8000bb0 <__aeabi_d2uiz>
 80021cc:	4603      	mov	r3, r0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	0d5b      	lsrs	r3, r3, #21
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	7cbb      	ldrb	r3, [r7, #18]
 80021de:	015b      	lsls	r3, r3, #5
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	0b5b      	lsrs	r3, r3, #13
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002204:	4917      	ldr	r1, [pc, #92]	; (8002264 <SpiritManagementSetFrequencyBase+0x1fc>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	4313      	orrs	r3, r2
 800220a:	b2db      	uxtb	r3, r3
 800220c:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 800220e:	f107 0308 	add.w	r3, r7, #8
 8002212:	461a      	mov	r2, r3
 8002214:	2104      	movs	r1, #4
 8002216:	2008      	movs	r0, #8
 8002218:	f001 fe5e 	bl	8003ed8 <RadioSpiWriteRegisters>
 800221c:	4602      	mov	r2, r0
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <SpiritManagementSetFrequencyBase+0x200>)
 8002220:	b212      	sxth	r2, r2
 8002222:	4611      	mov	r1, r2
 8002224:	7019      	strb	r1, [r3, #0]
 8002226:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800222a:	705a      	strb	r2, [r3, #1]
}
 800222c:	bf00      	nop
 800222e:	3728      	adds	r7, #40	; 0x28
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002236:	bf00      	nop
 8002238:	2e5f5680 	.word	0x2e5f5680
 800223c:	390c2fe0 	.word	0x390c2fe0
 8002240:	1701e47f 	.word	0x1701e47f
 8002244:	1c146a60 	.word	0x1c146a60
 8002248:	11d260bf 	.word	0x11d260bf
 800224c:	14ced7e0 	.word	0x14ced7e0
 8002250:	099cf4e1 	.word	0x099cf4e1
 8002254:	1339e9c3 	.word	0x1339e9c3
 8002258:	19a28d05 	.word	0x19a28d05
 800225c:	33451a0a 	.word	0x33451a0a
 8002260:	0800d69c 	.word	0x0800d69c
 8002264:	0800d698 	.word	0x0800d698
 8002268:	2000033c 	.word	0x2000033c

0800226c <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800227a:	f001 fd7d 	bl	8003d78 <SpiritRadioGetXtalFrequency>
 800227e:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002280:	2300      	movs	r3, #0
 8002282:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4a57      	ldr	r2, [pc, #348]	; (80023e4 <SpiritManagementWaVcoCalibration+0x178>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d90f      	bls.n	80022ac <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 800228c:	f001 fd00 	bl	8003c90 <SpiritRadioGetRefDiv>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10a      	bne.n	80022ac <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800229a:	f001 f86b 	bl	8003374 <SpiritRadioGetFrequencyBase>
 800229e:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f001 fcc5 	bl	8003c30 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fede 	bl	8002068 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 80022ac:	f001 f862 	bl	8003374 <SpiritRadioGetFrequencyBase>
 80022b0:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 80022b2:	2325      	movs	r3, #37	; 0x25
 80022b4:	707b      	strb	r3, [r7, #1]
 80022b6:	1c7b      	adds	r3, r7, #1
 80022b8:	461a      	mov	r2, r3
 80022ba:	2101      	movs	r1, #1
 80022bc:	20a1      	movs	r0, #161	; 0xa1
 80022be:	f001 fe0b 	bl	8003ed8 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff fd04 	bl	8001cd0 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 80022c8:	f001 fdd4 	bl	8003e74 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 80022cc:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <SpiritManagementWaVcoCalibration+0x17c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	d10d      	bne.n	80022f6 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 80022da:	2301      	movs	r3, #1
 80022dc:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 80022de:	2062      	movs	r0, #98	; 0x62
 80022e0:	f7ff fddc 	bl	8001e9c <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80022e4:	f001 fdc6 	bl	8003e74 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80022e8:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <SpiritManagementWaVcoCalibration+0x17c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d1f6      	bne.n	80022e4 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80022f6:	2066      	movs	r0, #102	; 0x66
 80022f8:	f7ff fdd0 	bl	8001e9c <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002300:	f001 fdb8 	bl	8003e74 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002304:	4b38      	ldr	r3, [pc, #224]	; (80023e8 <SpiritManagementWaVcoCalibration+0x17c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b13      	cmp	r3, #19
 8002310:	d106      	bne.n	8002320 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 8002312:	7b7b      	ldrb	r3, [r7, #13]
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	737a      	strb	r2, [r7, #13]
 8002318:	2b05      	cmp	r3, #5
 800231a:	d101      	bne.n	8002320 <SpiritManagementWaVcoCalibration+0xb4>
 800231c:	2301      	movs	r3, #1
 800231e:	e05d      	b.n	80023dc <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002320:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <SpiritManagementWaVcoCalibration+0x17c>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b0f      	cmp	r3, #15
 800232c:	d1e8      	bne.n	8002300 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 800232e:	f7ff fd07 	bl	8001d40 <SpiritCalibrationGetVcoCalData>
 8002332:	4603      	mov	r3, r0
 8002334:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8002336:	2062      	movs	r0, #98	; 0x62
 8002338:	f7ff fdb0 	bl	8001e9c <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 800233c:	f001 fd9a 	bl	8003e74 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002340:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <SpiritManagementWaVcoCalibration+0x17c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b03      	cmp	r3, #3
 800234c:	d1f6      	bne.n	800233c <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 800234e:	2065      	movs	r0, #101	; 0x65
 8002350:	f7ff fda4 	bl	8001e9c <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002354:	2300      	movs	r3, #0
 8002356:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002358:	f001 fd8c 	bl	8003e74 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <SpiritManagementWaVcoCalibration+0x17c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b13      	cmp	r3, #19
 8002368:	d106      	bne.n	8002378 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 800236a:	7b7b      	ldrb	r3, [r7, #13]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	737a      	strb	r2, [r7, #13]
 8002370:	2b05      	cmp	r3, #5
 8002372:	d101      	bne.n	8002378 <SpiritManagementWaVcoCalibration+0x10c>
 8002374:	2301      	movs	r3, #1
 8002376:	e031      	b.n	80023dc <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <SpiritManagementWaVcoCalibration+0x17c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b0f      	cmp	r3, #15
 8002384:	d1e8      	bne.n	8002358 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002386:	f7ff fcdb 	bl	8001d40 <SpiritCalibrationGetVcoCalData>
 800238a:	4603      	mov	r3, r0
 800238c:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800238e:	2062      	movs	r0, #98	; 0x62
 8002390:	f7ff fd84 	bl	8001e9c <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002394:	f001 fd6e 	bl	8003e74 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <SpiritManagementWaVcoCalibration+0x17c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d1f6      	bne.n	8002394 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 80023a6:	7bbb      	ldrb	r3, [r7, #14]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d102      	bne.n	80023b2 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 80023ac:	2063      	movs	r0, #99	; 0x63
 80023ae:	f7ff fd75 	bl	8001e9c <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff fc8c 	bl	8001cd0 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 80023be:	2000      	movs	r0, #0
 80023c0:	f001 fc36 	bl	8003c30 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fe4f 	bl	8002068 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fcd3 	bl	8001d78 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 80023d2:	78bb      	ldrb	r3, [r7, #2]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fd03 	bl	8001de0 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	01c9c380 	.word	0x01c9c380
 80023e8:	2000033c 	.word	0x2000033c

080023ec <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <SpiritManagementWaCmdStrobeTx+0x60>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d023      	beq.n	8002444 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <SpiritManagementWaCmdStrobeTx+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a14      	ldr	r2, [pc, #80]	; (8002454 <SpiritManagementWaCmdStrobeTx+0x68>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d908      	bls.n	8002418 <SpiritManagementWaCmdStrobeTx+0x2c>
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a13      	ldr	r2, [pc, #76]	; (8002458 <SpiritManagementWaCmdStrobeTx+0x6c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d803      	bhi.n	8002418 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8002410:	20c0      	movs	r0, #192	; 0xc0
 8002412:	f001 fb83 	bl	8003b1c <SpiritRadioSetPACwc>
 8002416:	e002      	b.n	800241e <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8002418:	2000      	movs	r0, #0
 800241a:	f001 fb7f 	bl	8003b1c <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 800241e:	2311      	movs	r3, #17
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	461a      	mov	r2, r3
 8002426:	2101      	movs	r1, #1
 8002428:	20a9      	movs	r0, #169	; 0xa9
 800242a:	f001 fd55 	bl	8003ed8 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 800242e:	2320      	movs	r3, #32
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	461a      	mov	r2, r3
 8002436:	2101      	movs	r1, #1
 8002438:	20a5      	movs	r0, #165	; 0xa5
 800243a:	f001 fd4d 	bl	8003ed8 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 800243e:	4b03      	ldr	r3, [pc, #12]	; (800244c <SpiritManagementWaCmdStrobeTx+0x60>)
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
  }
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000008 	.word	0x20000008
 8002450:	20000334 	.word	0x20000334
 8002454:	08f0d17f 	.word	0x08f0d17f
 8002458:	1c03a180 	.word	0x1c03a180

0800245c <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d00d      	beq.n	8002488 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 800246c:	2398      	movs	r3, #152	; 0x98
 800246e:	71fb      	strb	r3, [r7, #7]
 8002470:	1dfb      	adds	r3, r7, #7
 8002472:	461a      	mov	r2, r3
 8002474:	2101      	movs	r1, #1
 8002476:	20a5      	movs	r0, #165	; 0xa5
 8002478:	f001 fd2e 	bl	8003ed8 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 800247c:	2000      	movs	r0, #0
 800247e:	f001 fb4d 	bl	8003b1c <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002482:	4b03      	ldr	r3, [pc, #12]	; (8002490 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
  }
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000008 	.word	0x20000008

08002494 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SpiritManagementWaTRxFcMem+0x20>)
 800249e:	2202      	movs	r2, #2
 80024a0:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <SpiritManagementWaTRxFcMem+0x24>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	20000008 	.word	0x20000008
 80024b8:	20000334 	.word	0x20000334

080024bc <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 80024c2:	23ca      	movs	r3, #202	; 0xca
 80024c4:	71fb      	strb	r3, [r7, #7]
 80024c6:	1dfb      	adds	r3, r7, #7
 80024c8:	461a      	mov	r2, r3
 80024ca:	2101      	movs	r1, #1
 80024cc:	20b2      	movs	r0, #178	; 0xb2
 80024ce:	f001 fd03 	bl	8003ed8 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80024d2:	2304      	movs	r3, #4
 80024d4:	71fb      	strb	r3, [r7, #7]
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	461a      	mov	r2, r3
 80024da:	2101      	movs	r1, #1
 80024dc:	20a8      	movs	r0, #168	; 0xa8
 80024de:	f001 fcfb 	bl	8003ed8 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	461a      	mov	r2, r3
 80024e6:	2101      	movs	r1, #1
 80024e8:	20a8      	movs	r0, #168	; 0xa8
 80024ea:	f001 fd43 	bl	8003f74 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80024ee:	2300      	movs	r3, #0
 80024f0:	71fb      	strb	r3, [r7, #7]
 80024f2:	1dfb      	adds	r3, r7, #7
 80024f4:	461a      	mov	r2, r3
 80024f6:	2101      	movs	r1, #1
 80024f8:	20a8      	movs	r0, #168	; 0xa8
 80024fa:	f001 fced 	bl	8003ed8 <RadioSpiWriteRegisters>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002510:	f107 0308 	add.w	r3, r7, #8
 8002514:	461a      	mov	r2, r3
 8002516:	2101      	movs	r1, #1
 8002518:	2051      	movs	r0, #81	; 0x51
 800251a:	f001 fd2b 	bl	8003f74 <RadioSpiReadRegisters>
 800251e:	4602      	mov	r2, r0
 8002520:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <SpiritPktBasicInit+0x1a8>)
 8002522:	b212      	sxth	r2, r2
 8002524:	4611      	mov	r1, r2
 8002526:	7019      	strb	r1, [r3, #0]
 8002528:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800252c:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 800252e:	7a3b      	ldrb	r3, [r7, #8]
 8002530:	f023 0320 	bic.w	r3, r3, #32
 8002534:	b2db      	uxtb	r3, r3
 8002536:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002538:	7a3b      	ldrb	r3, [r7, #8]
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002542:	f107 0308 	add.w	r3, r7, #8
 8002546:	461a      	mov	r2, r3
 8002548:	2101      	movs	r1, #1
 800254a:	2051      	movs	r0, #81	; 0x51
 800254c:	f001 fcc4 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002550:	4602      	mov	r2, r0
 8002552:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <SpiritPktBasicInit+0x1a8>)
 8002554:	b212      	sxth	r2, r2
 8002556:	4611      	mov	r1, r2
 8002558:	7019      	strb	r1, [r3, #0]
 800255a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800255e:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002560:	f107 0308 	add.w	r3, r7, #8
 8002564:	461a      	mov	r2, r3
 8002566:	2101      	movs	r1, #1
 8002568:	204f      	movs	r0, #79	; 0x4f
 800256a:	f001 fd03 	bl	8003f74 <RadioSpiReadRegisters>
 800256e:	4602      	mov	r2, r0
 8002570:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <SpiritPktBasicInit+0x1a8>)
 8002572:	b212      	sxth	r2, r2
 8002574:	4611      	mov	r1, r2
 8002576:	7019      	strb	r1, [r3, #0]
 8002578:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800257c:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 800257e:	7a3b      	ldrb	r3, [r7, #8]
 8002580:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002584:	b2db      	uxtb	r3, r3
 8002586:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	461a      	mov	r2, r3
 800258e:	2101      	movs	r1, #1
 8002590:	204f      	movs	r0, #79	; 0x4f
 8002592:	f001 fca1 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002596:	4602      	mov	r2, r0
 8002598:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <SpiritPktBasicInit+0x1a8>)
 800259a:	b212      	sxth	r2, r2
 800259c:	4611      	mov	r1, r2
 800259e:	7019      	strb	r1, [r3, #0]
 80025a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025a4:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7b1b      	ldrb	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 80025ae:	2308      	movs	r3, #8
 80025b0:	723b      	strb	r3, [r7, #8]
 80025b2:	e001      	b.n	80025b8 <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 80025b4:	2300      	movs	r3, #0
 80025b6:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 80025b8:	7a3a      	ldrb	r2, [r7, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7adb      	ldrb	r3, [r3, #11]
 80025be:	4313      	orrs	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7a5b      	ldrb	r3, [r3, #9]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <SpiritPktBasicInit+0xca>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7a5b      	ldrb	r3, [r3, #9]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 80025ec:	4313      	orrs	r3, r2
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7a9b      	ldrb	r3, [r3, #10]
 80025f6:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7b9b      	ldrb	r3, [r3, #14]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d104      	bne.n	800260a <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002600:	7afb      	ldrb	r3, [r7, #11]
 8002602:	f043 0310 	orr.w	r3, r3, #16
 8002606:	b2db      	uxtb	r3, r3
 8002608:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7b5b      	ldrb	r3, [r3, #13]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d104      	bne.n	800261c <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002612:	7afb      	ldrb	r3, [r7, #11]
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	461a      	mov	r2, r3
 8002622:	2104      	movs	r1, #4
 8002624:	2030      	movs	r0, #48	; 0x30
 8002626:	f001 fc57 	bl	8003ed8 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e01d      	b.n	800266c <SpiritPktBasicInit+0x164>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f1c3 0303 	rsb	r3, r3, #3
 800263e:	429a      	cmp	r2, r3
 8002640:	da06      	bge.n	8002650 <SpiritPktBasicInit+0x148>
    {
      tempRegValue[i]=0;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	3310      	adds	r3, #16
 8002646:	443b      	add	r3, r7
 8002648:	2200      	movs	r2, #0
 800264a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800264e:	e00a      	b.n	8002666 <SpiritPktBasicInit+0x15e>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	40da      	lsrs	r2, r3
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	3310      	adds	r3, #16
 8002660:	443b      	add	r3, r7
 8002662:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	3301      	adds	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d9de      	bls.n	8002630 <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7a9b      	ldrb	r3, [r3, #10]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <SpiritPktBasicInit+0x17a>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 800267a:	2000      	movs	r0, #0
 800267c:	f000 f8fc 	bl	8002878 <SpiritPktCommonFilterOnCrc>
 8002680:	e002      	b.n	8002688 <SpiritPktBasicInit+0x180>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 8002682:	2001      	movs	r0, #1
 8002684:	f000 f8f8 	bl	8002878 <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002688:	f107 0308 	add.w	r3, r7, #8
 800268c:	461a      	mov	r2, r3
 800268e:	2104      	movs	r1, #4
 8002690:	2036      	movs	r0, #54	; 0x36
 8002692:	f001 fc21 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002696:	4602      	mov	r2, r0
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <SpiritPktBasicInit+0x1a8>)
 800269a:	b212      	sxth	r2, r2
 800269c:	4611      	mov	r1, r2
 800269e:	7019      	strb	r1, [r3, #0]
 80026a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026a4:	705a      	strb	r2, [r3, #1]

}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000033c 	.word	0x2000033c

080026b4 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	461a      	mov	r2, r3
 80026c2:	2101      	movs	r1, #1
 80026c4:	204f      	movs	r0, #79	; 0x4f
 80026c6:	f001 fc55 	bl	8003f74 <RadioSpiReadRegisters>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b2f      	ldr	r3, [pc, #188]	; (800278c <SpiritPktBasicAddressesInit+0xd8>)
 80026ce:	b212      	sxth	r2, r2
 80026d0:	4611      	mov	r1, r2
 80026d2:	7019      	strb	r1, [r3, #0]
 80026d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026d8:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d105      	bne.n	80026ee <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80026e2:	7b3b      	ldrb	r3, [r7, #12]
 80026e4:	f043 0308 	orr.w	r3, r3, #8
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	733b      	strb	r3, [r7, #12]
 80026ec:	e004      	b.n	80026f8 <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80026ee:	7b3b      	ldrb	r3, [r7, #12]
 80026f0:	f023 0308 	bic.w	r3, r3, #8
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	789b      	ldrb	r3, [r3, #2]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002700:	7b3b      	ldrb	r3, [r7, #12]
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	b2db      	uxtb	r3, r3
 8002708:	733b      	strb	r3, [r7, #12]
 800270a:	e004      	b.n	8002716 <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 800270c:	7b3b      	ldrb	r3, [r7, #12]
 800270e:	f023 0304 	bic.w	r3, r3, #4
 8002712:	b2db      	uxtb	r3, r3
 8002714:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800271e:	7b3b      	ldrb	r3, [r7, #12]
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	b2db      	uxtb	r3, r3
 8002726:	733b      	strb	r3, [r7, #12]
 8002728:	e004      	b.n	8002734 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800272a:	7b3b      	ldrb	r3, [r7, #12]
 800272c:	f023 0302 	bic.w	r3, r3, #2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002734:	f107 030c 	add.w	r3, r7, #12
 8002738:	461a      	mov	r2, r3
 800273a:	2101      	movs	r1, #1
 800273c:	204f      	movs	r0, #79	; 0x4f
 800273e:	f001 fbcb 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002742:	4602      	mov	r2, r0
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <SpiritPktBasicAddressesInit+0xd8>)
 8002746:	b212      	sxth	r2, r2
 8002748:	4611      	mov	r1, r2
 800274a:	7019      	strb	r1, [r3, #0]
 800274c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002750:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	795b      	ldrb	r3, [r3, #5]
 8002756:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	78db      	ldrb	r3, [r3, #3]
 800275c:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	785b      	ldrb	r3, [r3, #1]
 8002762:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002764:	f107 030c 	add.w	r3, r7, #12
 8002768:	461a      	mov	r2, r3
 800276a:	2103      	movs	r1, #3
 800276c:	204c      	movs	r0, #76	; 0x4c
 800276e:	f001 fbb3 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002772:	4602      	mov	r2, r0
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SpiritPktBasicAddressesInit+0xd8>)
 8002776:	b212      	sxth	r2, r2
 8002778:	4611      	mov	r1, r2
 800277a:	7019      	strb	r1, [r3, #0]
 800277c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002780:	705a      	strb	r2, [r3, #1]
  
  
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2000033c 	.word	0x2000033c

08002790 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002796:	1dfb      	adds	r3, r7, #7
 8002798:	461a      	mov	r2, r3
 800279a:	2101      	movs	r1, #1
 800279c:	2030      	movs	r0, #48	; 0x30
 800279e:	f001 fbe9 	bl	8003f74 <RadioSpiReadRegisters>
 80027a2:	4602      	mov	r2, r0
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <SpiritPktBasicGetAddressField+0x3c>)
 80027a6:	b212      	sxth	r2, r2
 80027a8:	4611      	mov	r1, r2
 80027aa:	7019      	strb	r1, [r3, #0]
 80027ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027b0:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	f003 0318 	and.w	r3, r3, #24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 80027c0:	2300      	movs	r3, #0
  }

}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	2000033c 	.word	0x2000033c

080027d0 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 80027da:	2300      	movs	r3, #0
 80027dc:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 80027de:	f7ff ffd7 	bl	8002790 <SpiritPktBasicGetAddressField>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 80027e8:	2301      	movs	r3, #1
 80027ea:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 80027ec:	f000 f828 	bl	8002840 <SpiritPktCommonGetControlLength>
 80027f0:	4603      	mov	r3, r0
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	89fb      	ldrh	r3, [r7, #14]
 80027f6:	4413      	add	r3, r2
 80027f8:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	4413      	add	r3, r2
 8002804:	b2db      	uxtb	r3, r3
 8002806:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	4413      	add	r3, r2
 800280e:	121b      	asrs	r3, r3, #8
 8002810:	b2db      	uxtb	r3, r3
 8002812:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002814:	f107 030c 	add.w	r3, r7, #12
 8002818:	461a      	mov	r2, r3
 800281a:	2102      	movs	r1, #2
 800281c:	2034      	movs	r0, #52	; 0x34
 800281e:	f001 fb5b 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002822:	4602      	mov	r2, r0
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <SpiritPktBasicSetPayloadLength+0x6c>)
 8002826:	b212      	sxth	r2, r2
 8002828:	4611      	mov	r1, r2
 800282a:	7019      	strb	r1, [r3, #0]
 800282c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002830:	705a      	strb	r2, [r3, #1]

}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000033c 	.word	0x2000033c

08002840 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	461a      	mov	r2, r3
 800284a:	2101      	movs	r1, #1
 800284c:	2030      	movs	r0, #48	; 0x30
 800284e:	f001 fb91 	bl	8003f74 <RadioSpiReadRegisters>
 8002852:	4602      	mov	r2, r0
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <SpiritPktCommonGetControlLength+0x34>)
 8002856:	b212      	sxth	r2, r2
 8002858:	4611      	mov	r1, r2
 800285a:	7019      	strb	r1, [r3, #0]
 800285c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002860:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	b2db      	uxtb	r3, r3

}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000033c 	.word	0x2000033c

08002878 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002882:	f107 030f 	add.w	r3, r7, #15
 8002886:	461a      	mov	r2, r3
 8002888:	2101      	movs	r1, #1
 800288a:	204f      	movs	r0, #79	; 0x4f
 800288c:	f001 fb72 	bl	8003f74 <RadioSpiReadRegisters>
 8002890:	4602      	mov	r2, r0
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002894:	b212      	sxth	r2, r2
 8002896:	4611      	mov	r1, r2
 8002898:	7019      	strb	r1, [r3, #0]
 800289a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800289e:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	73fb      	strb	r3, [r7, #15]
 80028b0:	e004      	b.n	80028bc <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80028bc:	f107 030f 	add.w	r3, r7, #15
 80028c0:	461a      	mov	r2, r3
 80028c2:	2101      	movs	r1, #1
 80028c4:	204f      	movs	r0, #79	; 0x4f
 80028c6:	f001 fb07 	bl	8003ed8 <RadioSpiWriteRegisters>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <SpiritPktCommonFilterOnCrc+0x6c>)
 80028ce:	b212      	sxth	r2, r2
 80028d0:	4611      	mov	r1, r2
 80028d2:	7019      	strb	r1, [r3, #0]
 80028d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028d8:	705a      	strb	r2, [r3, #1]

}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2000033c 	.word	0x2000033c

080028e8 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	461a      	mov	r2, r3
 80028f6:	2101      	movs	r1, #1
 80028f8:	204b      	movs	r0, #75	; 0x4b
 80028fa:	f001 faed 	bl	8003ed8 <RadioSpiWriteRegisters>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <SpiritPktCommonSetDestinationAddress+0x30>)
 8002902:	b212      	sxth	r2, r2
 8002904:	4611      	mov	r1, r2
 8002906:	7019      	strb	r1, [r3, #0]
 8002908:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800290c:	705a      	strb	r2, [r3, #1]

}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000033c 	.word	0x2000033c

0800291c <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002926:	f107 030f 	add.w	r3, r7, #15
 800292a:	461a      	mov	r2, r3
 800292c:	2101      	movs	r1, #1
 800292e:	203a      	movs	r0, #58	; 0x3a
 8002930:	f001 fb20 	bl	8003f74 <RadioSpiReadRegisters>
 8002934:	4602      	mov	r2, r0
 8002936:	4b14      	ldr	r3, [pc, #80]	; (8002988 <SpiritQiSqiCheck+0x6c>)
 8002938:	b212      	sxth	r2, r2
 800293a:	4611      	mov	r1, r2
 800293c:	7019      	strb	r1, [r3, #0]
 800293e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002942:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d105      	bne.n	8002956 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	b2db      	uxtb	r3, r3
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	e004      	b.n	8002960 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	f023 0302 	bic.w	r3, r3, #2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002960:	f107 030f 	add.w	r3, r7, #15
 8002964:	461a      	mov	r2, r3
 8002966:	2101      	movs	r1, #1
 8002968:	203a      	movs	r0, #58	; 0x3a
 800296a:	f001 fab5 	bl	8003ed8 <RadioSpiWriteRegisters>
 800296e:	4602      	mov	r2, r0
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <SpiritQiSqiCheck+0x6c>)
 8002972:	b212      	sxth	r2, r2
 8002974:	4611      	mov	r1, r2
 8002976:	7019      	strb	r1, [r3, #0]
 8002978:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800297c:	705a      	strb	r2, [r3, #1]

}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2000033c 	.word	0x2000033c

0800298c <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002996:	f107 030f 	add.w	r3, r7, #15
 800299a:	461a      	mov	r2, r3
 800299c:	2101      	movs	r1, #1
 800299e:	203a      	movs	r0, #58	; 0x3a
 80029a0:	f001 fae8 	bl	8003f74 <RadioSpiReadRegisters>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <SpiritQiSetSqiThreshold+0x64>)
 80029a8:	b212      	sxth	r2, r2
 80029aa:	4611      	mov	r1, r2
 80029ac:	7019      	strb	r1, [r3, #0]
 80029ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029b2:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80029c8:	f107 030f 	add.w	r3, r7, #15
 80029cc:	461a      	mov	r2, r3
 80029ce:	2101      	movs	r1, #1
 80029d0:	203a      	movs	r0, #58	; 0x3a
 80029d2:	f001 fa81 	bl	8003ed8 <RadioSpiWriteRegisters>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <SpiritQiSetSqiThreshold+0x64>)
 80029da:	b212      	sxth	r2, r2
 80029dc:	4611      	mov	r1, r2
 80029de:	7019      	strb	r1, [r3, #0]
 80029e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029e4:	705a      	strb	r2, [r3, #1]

}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000033c 	.word	0x2000033c

080029f4 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3382      	adds	r3, #130	; 0x82
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002a08:	f107 030f 	add.w	r3, r7, #15
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2022      	movs	r0, #34	; 0x22
 8002a12:	f001 fa61 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <SpiritQiSetRssiThresholddBm+0x3c>)
 8002a1a:	b212      	sxth	r2, r2
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	7019      	strb	r1, [r3, #0]
 8002a20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a24:	705a      	strb	r2, [r3, #1]

}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	2000033c 	.word	0x2000033c

08002a34 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002a3c:	23a0      	movs	r3, #160	; 0xa0
 8002a3e:	747b      	strb	r3, [r7, #17]
 8002a40:	f107 0311 	add.w	r3, r7, #17
 8002a44:	461a      	mov	r2, r3
 8002a46:	2101      	movs	r1, #1
 8002a48:	209f      	movs	r0, #159	; 0x9f
 8002a4a:	f001 fa45 	bl	8003ed8 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	ee07 3a90 	vmov	s15, r3
 8002a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6c:	eddf 6aae 	vldr	s13, [pc, #696]	; 8002d28 <SpiritRadioInit+0x2f4>
 8002a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a78:	ee17 3a90 	vmov	r3, s15
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002a7e:	2063      	movs	r0, #99	; 0x63
 8002a80:	f001 fac6 	bl	8004010 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002a84:	2300      	movs	r3, #0
 8002a86:	73bb      	strb	r3, [r7, #14]
 8002a88:	e004      	b.n	8002a94 <SpiritRadioInit+0x60>
 8002a8a:	7bbb      	ldrb	r3, [r7, #14]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	73bb      	strb	r3, [r7, #14]
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2bff      	cmp	r3, #255	; 0xff
 8002a9a:	d1f6      	bne.n	8002a8a <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002a9c:	f001 f9ea 	bl	8003e74 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002aa0:	4ba2      	ldr	r3, [pc, #648]	; (8002d2c <SpiritRadioInit+0x2f8>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d1ea      	bne.n	8002a84 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002aae:	4ba0      	ldr	r3, [pc, #640]	; (8002d30 <SpiritRadioInit+0x2fc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4aa0      	ldr	r2, [pc, #640]	; (8002d34 <SpiritRadioInit+0x300>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d803      	bhi.n	8002ac0 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f001 f90b 	bl	8003cd4 <SpiritRadioSetDigDiv>
 8002abe:	e002      	b.n	8002ac6 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f001 f907 	bl	8003cd4 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002ac6:	2062      	movs	r0, #98	; 0x62
 8002ac8:	f001 faa2 	bl	8004010 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002acc:	2300      	movs	r3, #0
 8002ace:	737b      	strb	r3, [r7, #13]
 8002ad0:	e004      	b.n	8002adc <SpiritRadioInit+0xa8>
 8002ad2:	7b7b      	ldrb	r3, [r7, #13]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	737b      	strb	r3, [r7, #13]
 8002adc:	7b7b      	ldrb	r3, [r7, #13]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2bff      	cmp	r3, #255	; 0xff
 8002ae2:	d1f6      	bne.n	8002ad2 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002ae4:	f001 f9c6 	bl	8003e74 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002ae8:	4b90      	ldr	r3, [pc, #576]	; (8002d2c <SpiritRadioInit+0x2f8>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d1ea      	bne.n	8002acc <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b00:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002d38 <SpiritRadioInit+0x304>
 8002b04:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b08:	4b89      	ldr	r3, [pc, #548]	; (8002d30 <SpiritRadioInit+0x2fc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1c:	ee17 3a90 	vmov	r3, s15
 8002b20:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002b22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002b32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	025a      	lsls	r2, r3, #9
 8002b3e:	4b7c      	ldr	r3, [pc, #496]	; (8002d30 <SpiritRadioInit+0x2fc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fc9d 	bl	8002494 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2101      	movs	r1, #1
 8002b62:	20a3      	movs	r0, #163	; 0xa3
 8002b64:	f001 fa06 	bl	8003f74 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002b68:	7c3b      	ldrb	r3, [r7, #16]
 8002b6a:	f023 0302 	bic.w	r3, r3, #2
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	743b      	strb	r3, [r7, #16]
 8002b72:	f107 0310 	add.w	r3, r7, #16
 8002b76:	461a      	mov	r2, r3
 8002b78:	2101      	movs	r1, #1
 8002b7a:	20a3      	movs	r0, #163	; 0xa3
 8002b7c:	f001 f9ac 	bl	8003ed8 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f107 0216 	add.w	r2, r7, #22
 8002b88:	f107 0117 	add.w	r1, r7, #23
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fc3d 	bl	800340c <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7b5a      	ldrb	r2, [r3, #13]
 8002b9a:	7dbb      	ldrb	r3, [r7, #22]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002ba2:	f107 0310 	add.w	r3, r7, #16
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2101      	movs	r1, #1
 8002baa:	201c      	movs	r0, #28
 8002bac:	f001 f9e2 	bl	8003f74 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f107 0214 	add.w	r2, r7, #20
 8002bb8:	f107 0115 	add.w	r1, r7, #21
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fdbd 	bl	800373c <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002bc2:	7d3b      	ldrb	r3, [r7, #20]
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	b25a      	sxtb	r2, r3
 8002bc8:	7c3b      	ldrb	r3, [r7, #16]
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	b25b      	sxtb	r3, r3
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	b25a      	sxtb	r2, r3
 8002bd6:	7d7b      	ldrb	r3, [r7, #21]
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f107 0212 	add.w	r2, r7, #18
 8002bea:	f107 0113 	add.w	r1, r7, #19
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fcbe 	bl	8003570 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	b25a      	sxtb	r2, r3
 8002bfa:	7cbb      	ldrb	r3, [r7, #18]
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002c06:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <SpiritRadioInit+0x2fc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0b1b      	lsrs	r3, r3, #12
 8002c0c:	ee07 3a90 	vmov	s15, r3
 8002c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c14:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002d3c <SpiritRadioInit+0x308>
 8002c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c1c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002d40 <SpiritRadioInit+0x30c>
 8002c20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002c28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c34:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	dd09      	ble.n	8002c5e <SpiritRadioInit+0x22a>
 8002c4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c52:	edc7 7a00 	vstr	s15, [r7]
 8002c56:	783b      	ldrb	r3, [r7, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	e006      	b.n	8002c6c <SpiritRadioInit+0x238>
 8002c5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c66:	edc7 7a00 	vstr	s15, [r7]
 8002c6a:	783b      	ldrb	r3, [r7, #0]
 8002c6c:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002c6e:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <SpiritRadioInit+0x2fc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <SpiritRadioInit+0x300>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d802      	bhi.n	8002c7e <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	777b      	strb	r3, [r7, #29]
 8002c7c:	e033      	b.n	8002ce6 <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <SpiritRadioInit+0x2fc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0b5b      	lsrs	r3, r3, #13
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c8c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002d3c <SpiritRadioInit+0x308>
 8002c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c94:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002d40 <SpiritRadioInit+0x30c>
 8002c98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002ca0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	dd09      	ble.n	8002cd6 <SpiritRadioInit+0x2a2>
 8002cc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cca:	edc7 7a00 	vstr	s15, [r7]
 8002cce:	783b      	ldrb	r3, [r7, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e006      	b.n	8002ce4 <SpiritRadioInit+0x2b0>
 8002cd6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cde:	edc7 7a00 	vstr	s15, [r7]
 8002ce2:	783b      	ldrb	r3, [r7, #0]
 8002ce4:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002ce6:	f107 030f 	add.w	r3, r7, #15
 8002cea:	461a      	mov	r2, r3
 8002cec:	2101      	movs	r1, #1
 8002cee:	2007      	movs	r0, #7
 8002cf0:	f001 f8f2 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <SpiritRadioInit+0x2f8>)
 8002cf8:	b212      	sxth	r2, r2
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	7019      	strb	r1, [r3, #0]
 8002cfe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d02:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <SpiritRadioInit+0x2fc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <SpiritRadioInit+0x310>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d91e      	bls.n	8002d4c <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <SpiritRadioInit+0x2fc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <SpiritRadioInit+0x314>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	bf8c      	ite	hi
 8002d18:	2301      	movhi	r3, #1
 8002d1a:	2300      	movls	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f86c 	bl	8002dfc <SpiritRadioSetXtalFlag>
 8002d24:	e01d      	b.n	8002d62 <SpiritRadioInit+0x32e>
 8002d26:	bf00      	nop
 8002d28:	49742400 	.word	0x49742400
 8002d2c:	2000033c 	.word	0x2000033c
 8002d30:	20000338 	.word	0x20000338
 8002d34:	01c9c37f 	.word	0x01c9c37f
 8002d38:	48800000 	.word	0x48800000
 8002d3c:	49afd520 	.word	0x49afd520
 8002d40:	42800000 	.word	0x42800000
 8002d44:	01c9c380 	.word	0x01c9c380
 8002d48:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <SpiritRadioInit+0x3bc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a28      	ldr	r2, [pc, #160]	; (8002df4 <SpiritRadioInit+0x3c0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	bf8c      	ite	hi
 8002d56:	2301      	movhi	r3, #1
 8002d58:	2300      	movls	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 f84d 	bl	8002dfc <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	330c      	adds	r3, #12
 8002d66:	461a      	mov	r2, r3
 8002d68:	2101      	movs	r1, #1
 8002d6a:	206c      	movs	r0, #108	; 0x6c
 8002d6c:	f001 f8b4 	bl	8003ed8 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002d70:	f107 031c 	add.w	r3, r7, #28
 8002d74:	461a      	mov	r2, r3
 8002d76:	2104      	movs	r1, #4
 8002d78:	200c      	movs	r0, #12
 8002d7a:	f001 f8ad 	bl	8003ed8 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002d7e:	f107 0318 	add.w	r3, r7, #24
 8002d82:	461a      	mov	r2, r3
 8002d84:	2104      	movs	r1, #4
 8002d86:	201a      	movs	r0, #26
 8002d88:	f001 f8a6 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <SpiritRadioInit+0x3c4>)
 8002d90:	b212      	sxth	r2, r2
 8002d92:	4611      	mov	r1, r2
 8002d94:	7019      	strb	r1, [r3, #0]
 8002d96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d9a:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f000 ff15 	bl	8003bcc <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002da6:	23e3      	movs	r3, #227	; 0xe3
 8002da8:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002daa:	f107 031c 	add.w	r3, r7, #28
 8002dae:	461a      	mov	r2, r3
 8002db0:	2102      	movs	r1, #2
 8002db2:	2099      	movs	r0, #153	; 0x99
 8002db4:	f001 f890 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <SpiritRadioInit+0x3c4>)
 8002dbc:	b212      	sxth	r2, r2
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	7019      	strb	r1, [r3, #0]
 8002dc2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002dc6:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002dc8:	2322      	movs	r3, #34	; 0x22
 8002dca:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	20bc      	movs	r0, #188	; 0xbc
 8002dd6:	f001 f87f 	bl	8003ed8 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f9aa 	bl	8003138 <SpiritRadioSetFrequencyBase>
 8002de4:	4603      	mov	r3, r0
  
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3730      	adds	r7, #48	; 0x30
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000338 	.word	0x20000338
 8002df4:	017d783f 	.word	0x017d783f
 8002df8:	2000033c 	.word	0x2000033c

08002dfc <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002e0a:	f107 030f 	add.w	r3, r7, #15
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2101      	movs	r1, #1
 8002e12:	2001      	movs	r0, #1
 8002e14:	f001 f8ae 	bl	8003f74 <RadioSpiReadRegisters>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <SpiritRadioSetXtalFlag+0x70>)
 8002e1c:	b212      	sxth	r2, r2
 8002e1e:	4611      	mov	r1, r2
 8002e20:	7019      	strb	r1, [r3, #0]
 8002e22:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e26:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e004      	b.n	8002e44 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002e44:	f107 030f 	add.w	r3, r7, #15
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f001 f843 	bl	8003ed8 <RadioSpiWriteRegisters>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <SpiritRadioSetXtalFlag+0x70>)
 8002e56:	b212      	sxth	r2, r2
 8002e58:	4611      	mov	r1, r2
 8002e5a:	7019      	strb	r1, [r3, #0]
 8002e5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e60:	705a      	strb	r2, [r3, #1]
  
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000033c 	.word	0x2000033c

08002e70 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a3a      	ldr	r2, [pc, #232]	; (8002f70 <SpiritRadioSearchWCP+0x100>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d306      	bcc.n	8002e9a <SpiritRadioSearchWCP+0x2a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a39      	ldr	r2, [pc, #228]	; (8002f74 <SpiritRadioSearchWCP+0x104>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d802      	bhi.n	8002e9a <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002e94:	2306      	movs	r3, #6
 8002e96:	73bb      	strb	r3, [r7, #14]
 8002e98:	e01f      	b.n	8002eda <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a36      	ldr	r2, [pc, #216]	; (8002f78 <SpiritRadioSearchWCP+0x108>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d906      	bls.n	8002eb0 <SpiritRadioSearchWCP+0x40>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a35      	ldr	r2, [pc, #212]	; (8002f7c <SpiritRadioSearchWCP+0x10c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d802      	bhi.n	8002eb0 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002eaa:	230c      	movs	r3, #12
 8002eac:	73bb      	strb	r3, [r7, #14]
 8002eae:	e014      	b.n	8002eda <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a33      	ldr	r2, [pc, #204]	; (8002f80 <SpiritRadioSearchWCP+0x110>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d906      	bls.n	8002ec6 <SpiritRadioSearchWCP+0x56>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a32      	ldr	r2, [pc, #200]	; (8002f84 <SpiritRadioSearchWCP+0x114>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d802      	bhi.n	8002ec6 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	73bb      	strb	r3, [r7, #14]
 8002ec4:	e009      	b.n	8002eda <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2f      	ldr	r2, [pc, #188]	; (8002f88 <SpiritRadioSearchWCP+0x118>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d905      	bls.n	8002eda <SpiritRadioSearchWCP+0x6a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a2e      	ldr	r2, [pc, #184]	; (8002f8c <SpiritRadioSearchWCP+0x11c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d801      	bhi.n	8002eda <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <SpiritRadioSearchWCP+0x120>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	099b      	lsrs	r3, r3, #6
 8002ee4:	7bba      	ldrb	r2, [r7, #14]
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002eec:	f241 631f 	movw	r3, #5663	; 0x161f
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d302      	bcc.n	8002f06 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002f00:	230f      	movs	r3, #15
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e023      	b.n	8002f4e <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
 8002f0a:	e005      	b.n	8002f18 <SpiritRadioSearchWCP+0xa8>
 8002f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1c:	2b0e      	cmp	r3, #14
 8002f1e:	dc0c      	bgt.n	8002f3a <SpiritRadioSearchWCP+0xca>
 8002f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f24:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <SpiritRadioSearchWCP+0x124>)
 8002f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d8e8      	bhi.n	8002f0c <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <SpiritRadioSearchWCP+0xde>
      i--;
 8002f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	425a      	negs	r2, r3
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	f002 0207 	and.w	r2, r2, #7
 8002f5c:	bf58      	it	pl
 8002f5e:	4253      	negpl	r3, r2
 8002f60:	b25b      	sxtb	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
  
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	2e5f5680 	.word	0x2e5f5680
 8002f74:	390c2fe0 	.word	0x390c2fe0
 8002f78:	1701e47f 	.word	0x1701e47f
 8002f7c:	1c146a60 	.word	0x1c146a60
 8002f80:	11d260bf 	.word	0x11d260bf
 8002f84:	14ced7e0 	.word	0x14ced7e0
 8002f88:	08e18f3f 	.word	0x08e18f3f
 8002f8c:	0a6fd060 	.word	0x0a6fd060
 8002f90:	10624dd3 	.word	0x10624dd3
 8002f94:	0800d75c 	.word	0x0800d75c

08002f98 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	2008      	movs	r0, #8
 8002fa6:	f000 ffe5 	bl	8003f74 <RadioSpiReadRegisters>
 8002faa:	4602      	mov	r2, r0
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <SpiritRadioGetSynthWord+0x48>)
 8002fae:	b212      	sxth	r2, r2
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	7019      	strb	r1, [r3, #0]
 8002fb4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fb8:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002fba:	793b      	ldrb	r3, [r7, #4]
 8002fbc:	055b      	lsls	r3, r3, #21
 8002fbe:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8002fc2:	797b      	ldrb	r3, [r7, #5]
 8002fc4:	035b      	lsls	r3, r3, #13
 8002fc6:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002fc8:	79bb      	ldrb	r3, [r7, #6]
 8002fca:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002fcc:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002fce:	79fa      	ldrb	r2, [r7, #7]
 8002fd0:	08d2      	lsrs	r2, r2, #3
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	4413      	add	r3, r2
  
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000033c 	.word	0x2000033c

08002fe4 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8002fea:	1dfb      	adds	r3, r7, #7
 8002fec:	461a      	mov	r2, r3
 8002fee:	2101      	movs	r1, #1
 8002ff0:	200b      	movs	r0, #11
 8002ff2:	f000 ffbf 	bl	8003f74 <RadioSpiReadRegisters>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <SpiritRadioGetBand+0x58>)
 8002ffa:	b212      	sxth	r2, r2
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	7019      	strb	r1, [r3, #0]
 8003000:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003004:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8003010:	2300      	movs	r3, #0
 8003012:	e00e      	b.n	8003032 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	2b03      	cmp	r3, #3
 800301c:	d101      	bne.n	8003022 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 800301e:	2301      	movs	r3, #1
 8003020:	e007      	b.n	8003032 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	2b04      	cmp	r3, #4
 800302a:	d101      	bne.n	8003030 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 800302c:	2302      	movs	r3, #2
 800302e:	e000      	b.n	8003032 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003030:	2303      	movs	r3, #3
  }
  
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000033c 	.word	0x2000033c

08003040 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8003046:	1dfb      	adds	r3, r7, #7
 8003048:	461a      	mov	r2, r3
 800304a:	2101      	movs	r1, #1
 800304c:	206c      	movs	r0, #108	; 0x6c
 800304e:	f000 ff91 	bl	8003f74 <RadioSpiReadRegisters>
 8003052:	4602      	mov	r2, r0
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <SpiritRadioGetChannel+0x2c>)
 8003056:	b212      	sxth	r2, r2
 8003058:	4611      	mov	r1, r2
 800305a:	7019      	strb	r1, [r3, #0]
 800305c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003060:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8003062:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	2000033c 	.word	0x2000033c

08003070 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8003076:	1dfb      	adds	r3, r7, #7
 8003078:	461a      	mov	r2, r3
 800307a:	2101      	movs	r1, #1
 800307c:	200c      	movs	r0, #12
 800307e:	f000 ff79 	bl	8003f74 <RadioSpiReadRegisters>
 8003082:	4602      	mov	r2, r0
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <SpiritRadioGetChannelSpace+0x38>)
 8003086:	b212      	sxth	r2, r2
 8003088:	4611      	mov	r1, r2
 800308a:	7019      	strb	r1, [r3, #0]
 800308c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003090:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	461a      	mov	r2, r3
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <SpiritRadioGetChannelSpace+0x3c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	0bdb      	lsrs	r3, r3, #15
  
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	2000033c 	.word	0x2000033c
 80030ac:	20000338 	.word	0x20000338

080030b0 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	461a      	mov	r2, r3
 80030ba:	2102      	movs	r1, #2
 80030bc:	200e      	movs	r0, #14
 80030be:	f000 ff59 	bl	8003f74 <RadioSpiReadRegisters>
 80030c2:	4602      	mov	r2, r0
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <SpiritRadioGetFrequencyOffset+0x80>)
 80030c6:	b212      	sxth	r2, r2
 80030c8:	4611      	mov	r1, r2
 80030ca:	7019      	strb	r1, [r3, #0]
 80030cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030d0:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80030d2:	793b      	ldrb	r3, [r7, #4]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	b29a      	uxth	r2, r3
 80030da:	797b      	ldrb	r3, [r7, #5]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4413      	add	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80030ee:	887b      	ldrh	r3, [r7, #2]
 80030f0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80030f4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	807b      	strh	r3, [r7, #2]
 80030fc:	e004      	b.n	8003108 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	b29b      	uxth	r3, r3
 8003106:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8003108:	1cbb      	adds	r3, r7, #2
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 800310e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <SpiritRadioGetFrequencyOffset+0x84>)
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	da03      	bge.n	8003126 <SpiritRadioGetFrequencyOffset+0x76>
 800311e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003122:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003126:	149b      	asrs	r3, r3, #18
  
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	2000033c 	.word	0x2000033c
 8003134:	20000338 	.word	0x20000338

08003138 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8003138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800313c:	b08a      	sub	sp, #40	; 0x28
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a79      	ldr	r2, [pc, #484]	; (8003330 <SpiritRadioSetFrequencyBase+0x1f8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d307      	bcc.n	8003160 <SpiritRadioSetFrequencyBase+0x28>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a78      	ldr	r2, [pc, #480]	; (8003334 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d803      	bhi.n	8003160 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800315e:	e022      	b.n	80031a6 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a75      	ldr	r2, [pc, #468]	; (8003338 <SpiritRadioSetFrequencyBase+0x200>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d907      	bls.n	8003178 <SpiritRadioSetFrequencyBase+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a74      	ldr	r2, [pc, #464]	; (800333c <SpiritRadioSetFrequencyBase+0x204>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d803      	bhi.n	8003178 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003176:	e016      	b.n	80031a6 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a71      	ldr	r2, [pc, #452]	; (8003340 <SpiritRadioSetFrequencyBase+0x208>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d907      	bls.n	8003190 <SpiritRadioSetFrequencyBase+0x58>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a70      	ldr	r2, [pc, #448]	; (8003344 <SpiritRadioSetFrequencyBase+0x20c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d803      	bhi.n	8003190 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003188:	2302      	movs	r3, #2
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800318e:	e00a      	b.n	80031a6 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a6d      	ldr	r2, [pc, #436]	; (8003348 <SpiritRadioSetFrequencyBase+0x210>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d906      	bls.n	80031a6 <SpiritRadioSetFrequencyBase+0x6e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a6c      	ldr	r2, [pc, #432]	; (800334c <SpiritRadioSetFrequencyBase+0x214>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d802      	bhi.n	80031a6 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 80031a0:	2303      	movs	r3, #3
 80031a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80031a6:	f7ff ff83 	bl	80030b0 <SpiritRadioGetFrequencyOffset>
 80031aa:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80031ac:	f7ff ff60 	bl	8003070 <SpiritRadioGetChannelSpace>
 80031b0:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80031b2:	f7ff ff45 	bl	8003040 <SpiritRadioGetChannel>
 80031b6:	4603      	mov	r3, r0
 80031b8:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80031ba:	6a3a      	ldr	r2, [r7, #32]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	441a      	add	r2, r3
 80031c0:	7efb      	ldrb	r3, [r7, #27]
 80031c2:	69f9      	ldr	r1, [r7, #28]
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80031cc:	f000 fd60 	bl	8003c90 <SpiritRadioGetRefDiv>
 80031d0:	4603      	mov	r3, r0
 80031d2:	3301      	adds	r3, #1
 80031d4:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80031d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d839      	bhi.n	8003252 <SpiritRadioSetFrequencyBase+0x11a>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <SpiritRadioSetFrequencyBase+0xac>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	0800323d 	.word	0x0800323d
 80031e8:	08003225 	.word	0x08003225
 80031ec:	0800320d 	.word	0x0800320d
 80031f0:	080031f5 	.word	0x080031f5
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	4a56      	ldr	r2, [pc, #344]	; (8003350 <SpiritRadioSetFrequencyBase+0x218>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d803      	bhi.n	8003204 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80031fc:	2000      	movs	r0, #0
 80031fe:	f7fe fe23 	bl	8001e48 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003202:	e026      	b.n	8003252 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003204:	2001      	movs	r0, #1
 8003206:	f7fe fe1f 	bl	8001e48 <SpiritCalibrationSelectVco>
    break;
 800320a:	e022      	b.n	8003252 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	4a51      	ldr	r2, [pc, #324]	; (8003354 <SpiritRadioSetFrequencyBase+0x21c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d803      	bhi.n	800321c <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003214:	2000      	movs	r0, #0
 8003216:	f7fe fe17 	bl	8001e48 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800321a:	e01a      	b.n	8003252 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 800321c:	2001      	movs	r0, #1
 800321e:	f7fe fe13 	bl	8001e48 <SpiritCalibrationSelectVco>
    break;
 8003222:	e016      	b.n	8003252 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	4a4c      	ldr	r2, [pc, #304]	; (8003358 <SpiritRadioSetFrequencyBase+0x220>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d803      	bhi.n	8003234 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800322c:	2000      	movs	r0, #0
 800322e:	f7fe fe0b 	bl	8001e48 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003232:	e00e      	b.n	8003252 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003234:	2001      	movs	r0, #1
 8003236:	f7fe fe07 	bl	8001e48 <SpiritCalibrationSelectVco>
    break;
 800323a:	e00a      	b.n	8003252 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	4a47      	ldr	r2, [pc, #284]	; (800335c <SpiritRadioSetFrequencyBase+0x224>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d803      	bhi.n	800324c <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003244:	2000      	movs	r0, #0
 8003246:	f7fe fdff 	bl	8001e48 <SpiritCalibrationSelectVco>
 800324a:	e002      	b.n	8003252 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 800324c:	2001      	movs	r0, #1
 800324e:	f7fe fdfb 	bl	8001e48 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8003252:	6978      	ldr	r0, [r7, #20]
 8003254:	f7ff fe0c 	bl	8002e70 <SpiritRadioSearchWCP>
 8003258:	4603      	mov	r3, r0
 800325a:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 800325c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003260:	4a3f      	ldr	r2, [pc, #252]	; (8003360 <SpiritRadioSetFrequencyBase+0x228>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	461a      	mov	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd f94d 	bl	800050c <__aeabi_ui2d>
 8003272:	4604      	mov	r4, r0
 8003274:	460d      	mov	r5, r1
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	049b      	lsls	r3, r3, #18
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd f956 	bl	800052c <__aeabi_i2d>
 8003280:	4680      	mov	r8, r0
 8003282:	4689      	mov	r9, r1
 8003284:	4b37      	ldr	r3, [pc, #220]	; (8003364 <SpiritRadioSetFrequencyBase+0x22c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd f93f 	bl	800050c <__aeabi_ui2d>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4640      	mov	r0, r8
 8003294:	4649      	mov	r1, r9
 8003296:	f7fd fadd 	bl	8000854 <__aeabi_ddiv>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4620      	mov	r0, r4
 80032a0:	4629      	mov	r1, r5
 80032a2:	f7fd f9ad 	bl	8000600 <__aeabi_dmul>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	f7fd fc7f 	bl	8000bb0 <__aeabi_d2uiz>
 80032b2:	4603      	mov	r3, r0
 80032b4:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	0d5b      	lsrs	r3, r3, #21
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	7cbb      	ldrb	r3, [r7, #18]
 80032c4:	015b      	lsls	r3, r3, #5
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	4313      	orrs	r3, r2
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	0b5b      	lsrs	r3, r3, #13
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032ea:	491f      	ldr	r1, [pc, #124]	; (8003368 <SpiritRadioSetFrequencyBase+0x230>)
 80032ec:	5ccb      	ldrb	r3, [r1, r3]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80032f4:	f107 0308 	add.w	r3, r7, #8
 80032f8:	461a      	mov	r2, r3
 80032fa:	2104      	movs	r1, #4
 80032fc:	2008      	movs	r0, #8
 80032fe:	f000 fdeb 	bl	8003ed8 <RadioSpiWriteRegisters>
 8003302:	4602      	mov	r2, r0
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <SpiritRadioSetFrequencyBase+0x234>)
 8003306:	b212      	sxth	r2, r2
 8003308:	4611      	mov	r1, r2
 800330a:	7019      	strb	r1, [r3, #0]
 800330c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003310:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <SpiritRadioSetFrequencyBase+0x238>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d103      	bne.n	8003322 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 800331a:	f7fe ffa7 	bl	800226c <SpiritManagementWaVcoCalibration>
 800331e:	4603      	mov	r3, r0
 8003320:	e000      	b.n	8003324 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800332e:	bf00      	nop
 8003330:	2e5f5680 	.word	0x2e5f5680
 8003334:	390c2fe0 	.word	0x390c2fe0
 8003338:	1701e47f 	.word	0x1701e47f
 800333c:	1c146a60 	.word	0x1c146a60
 8003340:	11d260bf 	.word	0x11d260bf
 8003344:	14ced7e0 	.word	0x14ced7e0
 8003348:	08e18f3f 	.word	0x08e18f3f
 800334c:	0a6fd060 	.word	0x0a6fd060
 8003350:	099cf4e1 	.word	0x099cf4e1
 8003354:	1339e9c3 	.word	0x1339e9c3
 8003358:	19a28d05 	.word	0x19a28d05
 800335c:	33451a0a 	.word	0x33451a0a
 8003360:	0800d6a0 	.word	0x0800d6a0
 8003364:	20000338 	.word	0x20000338
 8003368:	0800d6a4 	.word	0x0800d6a4
 800336c:	2000033c 	.word	0x2000033c
 8003370:	20000009 	.word	0x20000009

08003374 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003374:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 800337c:	f7ff fe0c 	bl	8002f98 <SpiritRadioGetSynthWord>
 8003380:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8003382:	f7ff fe2f 	bl	8002fe4 <SpiritRadioGetBand>
 8003386:	4603      	mov	r3, r0
 8003388:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 800338a:	f000 fc81 	bl	8003c90 <SpiritRadioGetRefDiv>
 800338e:	4603      	mov	r3, r0
 8003390:	3301      	adds	r3, #1
 8003392:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7fd f8b9 	bl	800050c <__aeabi_ui2d>
 800339a:	4604      	mov	r4, r0
 800339c:	460d      	mov	r5, r1
 800339e:	4b19      	ldr	r3, [pc, #100]	; (8003404 <SpiritRadioGetFrequencyBase+0x90>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd f8b2 	bl	800050c <__aeabi_ui2d>
 80033a8:	4680      	mov	r8, r0
 80033aa:	4689      	mov	r9, r1
 80033ac:	78bb      	ldrb	r3, [r7, #2]
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	4915      	ldr	r1, [pc, #84]	; (8003408 <SpiritRadioGetFrequencyBase+0x94>)
 80033b2:	5c8a      	ldrb	r2, [r1, r2]
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	049b      	lsls	r3, r3, #18
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd f8b6 	bl	800052c <__aeabi_i2d>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4640      	mov	r0, r8
 80033c6:	4649      	mov	r1, r9
 80033c8:	f7fd fa44 	bl	8000854 <__aeabi_ddiv>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4620      	mov	r0, r4
 80033d2:	4629      	mov	r1, r5
 80033d4:	f7fd f914 	bl	8000600 <__aeabi_dmul>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	ec43 2b17 	vmov	d7, r2, r3
 80033e0:	eeb0 0a47 	vmov.f32	s0, s14
 80033e4:	eef0 0a67 	vmov.f32	s1, s15
 80033e8:	f009 ffce 	bl	800d388 <round>
 80033ec:	ec53 2b10 	vmov	r2, r3, d0
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	f7fd fbdc 	bl	8000bb0 <__aeabi_d2uiz>
 80033f8:	4603      	mov	r3, r0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003404:	20000338 	.word	0x20000338
 8003408:	0800d6a0 	.word	0x0800d6a0

0800340c <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003418:	2300      	movs	r3, #0
 800341a:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 800341c:	230f      	movs	r3, #15
 800341e:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003424:	f000 fc86 	bl	8003d34 <SpiritRadioGetDigDiv>
 8003428:	4603      	mov	r3, r0
 800342a:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 800342c:	e015      	b.n	800345a <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 800342e:	4b4f      	ldr	r3, [pc, #316]	; (800356c <SpiritRadioSearchDatarateME+0x160>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003436:	f1c3 0114 	rsb	r1, r3, #20
 800343a:	7ebb      	ldrb	r3, [r7, #26]
 800343c:	440b      	add	r3, r1
 800343e:	fa22 f303 	lsr.w	r3, r2, r3
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	429a      	cmp	r2, r3
 8003446:	d302      	bcc.n	800344e <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003448:	2301      	movs	r3, #1
 800344a:	763b      	strb	r3, [r7, #24]
 800344c:	e005      	b.n	800345a <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 800344e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 800345a:	7e3b      	ldrb	r3, [r7, #24]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <SpiritRadioSearchDatarateME+0x5e>
 8003462:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003466:	2b00      	cmp	r3, #0
 8003468:	dae1      	bge.n	800342e <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 800346a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800346e:	2b00      	cmp	r3, #0
 8003470:	da01      	bge.n	8003476 <SpiritRadioSearchDatarateME+0x6a>
 8003472:	2300      	movs	r3, #0
 8003474:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003476:	7ffa      	ldrb	r2, [r7, #31]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 800347c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003480:	f1c3 0317 	rsb	r3, r3, #23
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	409a      	lsls	r2, r3
 8003488:	4b38      	ldr	r3, [pc, #224]	; (800356c <SpiritRadioSearchDatarateME+0x160>)
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	7ebb      	ldrb	r3, [r7, #26]
 800348e:	3305      	adds	r3, #5
 8003490:	fa21 f303 	lsr.w	r3, r1, r3
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 800349a:	2300      	movs	r3, #0
 800349c:	77bb      	strb	r3, [r7, #30]
 800349e:	e031      	b.n	8003504 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 80034a0:	7e7a      	ldrb	r2, [r7, #25]
 80034a2:	7fbb      	ldrb	r3, [r7, #30]
 80034a4:	4413      	add	r3, r2
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d021      	beq.n	80034ee <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	7e7b      	ldrb	r3, [r7, #25]
 80034b0:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80034b4:	7fbb      	ldrb	r3, [r7, #30]
 80034b6:	440b      	add	r3, r1
 80034b8:	3b01      	subs	r3, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	4b2b      	ldr	r3, [pc, #172]	; (800356c <SpiritRadioSearchDatarateME+0x160>)
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	7ebb      	ldrb	r3, [r7, #26]
 80034c2:	3305      	adds	r3, #5
 80034c4:	fa21 f303 	lsr.w	r3, r1, r3
 80034c8:	fb03 f100 	mul.w	r1, r3, r0
 80034cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034d0:	f1c3 0317 	rsb	r3, r3, #23
 80034d4:	fa21 f303 	lsr.w	r3, r1, r3
 80034d8:	b29b      	uxth	r3, r3
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	b29a      	uxth	r2, r3
 80034de:	7fbb      	ldrb	r3, [r7, #30]
 80034e0:	b212      	sxth	r2, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	3320      	adds	r3, #32
 80034e6:	443b      	add	r3, r7
 80034e8:	f823 2c10 	strh.w	r2, [r3, #-16]
 80034ec:	e007      	b.n	80034fe <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80034ee:	7fbb      	ldrb	r3, [r7, #30]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	3320      	adds	r3, #32
 80034f4:	443b      	add	r3, r7
 80034f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80034fa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80034fe:	7fbb      	ldrb	r3, [r7, #30]
 8003500:	3301      	adds	r3, #1
 8003502:	77bb      	strb	r3, [r7, #30]
 8003504:	7fbb      	ldrb	r3, [r7, #30]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d9ca      	bls.n	80034a0 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 800350a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800350e:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003510:	2300      	movs	r3, #0
 8003512:	76fb      	strb	r3, [r7, #27]
 8003514:	e021      	b.n	800355a <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003516:	7efb      	ldrb	r3, [r7, #27]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	3320      	adds	r3, #32
 800351c:	443b      	add	r3, r7
 800351e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	bfb8      	it	lt
 8003526:	425b      	neglt	r3, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	8bba      	ldrh	r2, [r7, #28]
 800352c:	429a      	cmp	r2, r3
 800352e:	d911      	bls.n	8003554 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003530:	7efb      	ldrb	r3, [r7, #27]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	3320      	adds	r3, #32
 8003536:	443b      	add	r3, r7
 8003538:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	bfb8      	it	lt
 8003540:	425b      	neglt	r3, r3
 8003542:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003544:	7e7a      	ldrb	r2, [r7, #25]
 8003546:	7efb      	ldrb	r3, [r7, #27]
 8003548:	4413      	add	r3, r2
 800354a:	b2db      	uxtb	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003554:	7efb      	ldrb	r3, [r7, #27]
 8003556:	3301      	adds	r3, #1
 8003558:	76fb      	strb	r3, [r7, #27]
 800355a:	7efb      	ldrb	r3, [r7, #27]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d9da      	bls.n	8003516 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000338 	.word	0x20000338

08003570 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003582:	f000 fbd7 	bl	8003d34 <SpiritRadioGetDigDiv>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 800358c:	2302      	movs	r3, #2
 800358e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003592:	e002      	b.n	800359a <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 800359a:	4b63      	ldr	r3, [pc, #396]	; (8003728 <SpiritRadioSearchChannelBwME+0x1b8>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	4a61      	ldr	r2, [pc, #388]	; (800372c <SpiritRadioSearchChannelBwME+0x1bc>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035b6:	e006      	b.n	80035c6 <SpiritRadioSearchChannelBwME+0x56>
 80035b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035ca:	2b59      	cmp	r3, #89	; 0x59
 80035cc:	dc0f      	bgt.n	80035ee <SpiritRadioSearchChannelBwME+0x7e>
 80035ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035d2:	4a57      	ldr	r2, [pc, #348]	; (8003730 <SpiritRadioSearchChannelBwME+0x1c0>)
 80035d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035d8:	461a      	mov	r2, r3
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	4a54      	ldr	r2, [pc, #336]	; (8003734 <SpiritRadioSearchChannelBwME+0x1c4>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0adb      	lsrs	r3, r3, #11
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3e4      	bcc.n	80035b8 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 80035ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d077      	beq.n	80036e6 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80035f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035fa:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003602:	e03a      	b.n	800367a <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003604:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003608:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800360c:	4413      	add	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	dc06      	bgt.n	8003620 <SpiritRadioSearchChannelBwME+0xb0>
 8003612:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003616:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800361a:	4413      	add	r3, r2
 800361c:	2b5a      	cmp	r3, #90	; 0x5a
 800361e:	dc1e      	bgt.n	800365e <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	b29a      	uxth	r2, r3
 8003624:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003628:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800362c:	440b      	add	r3, r1
 800362e:	3b01      	subs	r3, #1
 8003630:	493f      	ldr	r1, [pc, #252]	; (8003730 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003632:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003636:	4619      	mov	r1, r3
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	493d      	ldr	r1, [pc, #244]	; (8003734 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003640:	fba1 1303 	umull	r1, r3, r1, r3
 8003644:	0adb      	lsrs	r3, r3, #11
 8003646:	b29b      	uxth	r3, r3
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	b29a      	uxth	r2, r3
 800364c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003650:	b212      	sxth	r2, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	3328      	adds	r3, #40	; 0x28
 8003656:	443b      	add	r3, r7
 8003658:	f823 2c14 	strh.w	r2, [r3, #-20]
 800365c:	e008      	b.n	8003670 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 800365e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	3328      	adds	r3, #40	; 0x28
 8003666:	443b      	add	r3, r7
 8003668:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800366c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003670:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003674:	3301      	adds	r3, #1
 8003676:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800367a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800367e:	2b02      	cmp	r3, #2
 8003680:	d9c0      	bls.n	8003604 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003686:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003688:	2300      	movs	r3, #0
 800368a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800368e:	e026      	b.n	80036de <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003690:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	3328      	adds	r3, #40	; 0x28
 8003698:	443b      	add	r3, r7
 800369a:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bfb8      	it	lt
 80036a2:	425b      	neglt	r3, r3
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d913      	bls.n	80036d4 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 80036ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	3328      	adds	r3, #40	; 0x28
 80036b4:	443b      	add	r3, r7
 80036b6:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bfb8      	it	lt
 80036be:	425b      	neglt	r3, r3
 80036c0:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 80036c2:	7efa      	ldrb	r2, [r7, #27]
 80036c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036c8:	4413      	add	r3, r2
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 80036d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036d8:	3301      	adds	r3, #1
 80036da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80036de:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d9d4      	bls.n	8003690 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80036e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <SpiritRadioSearchChannelBwME+0x1c8>)
 80036ec:	fb82 1203 	smull	r1, r2, r2, r3
 80036f0:	1052      	asrs	r2, r2, #1
 80036f2:	17db      	asrs	r3, r3, #31
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	b25b      	sxtb	r3, r3
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 80036fe:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003704:	fb83 1302 	smull	r1, r3, r3, r2
 8003708:	1059      	asrs	r1, r3, #1
 800370a:	17d3      	asrs	r3, r2, #31
 800370c:	1ac9      	subs	r1, r1, r3
 800370e:	460b      	mov	r3, r1
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	b25b      	sxtb	r3, r3
 8003718:	b2da      	uxtb	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	701a      	strb	r2, [r3, #0]
  
}
 800371e:	bf00      	nop
 8003720:	3728      	adds	r7, #40	; 0x28
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000338 	.word	0x20000338
 800372c:	51eb851f 	.word	0x51eb851f
 8003730:	0800d6a8 	.word	0x0800d6a8
 8003734:	c9a633fd 	.word	0xc9a633fd
 8003738:	38e38e39 	.word	0x38e38e39

0800373c <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 800373c:	b5b0      	push	{r4, r5, r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 800374c:	4b53      	ldr	r3, [pc, #332]	; (800389c <SpiritRadioSearchFreqDevME+0x160>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003758:	eddf 6a51 	vldr	s13, [pc, #324]	; 80038a0 <SpiritRadioSearchFreqDevME+0x164>
 800375c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003760:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003764:	2300      	movs	r3, #0
 8003766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800376a:	e028      	b.n	80037be <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 800376c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003770:	2201      	movs	r2, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	4618      	mov	r0, r3
 8003778:	f7fc fed8 	bl	800052c <__aeabi_i2d>
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	4b48      	ldr	r3, [pc, #288]	; (80038a4 <SpiritRadioSearchFreqDevME+0x168>)
 8003782:	f7fc ff3d 	bl	8000600 <__aeabi_dmul>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	f7fd fa0f 	bl	8000bb0 <__aeabi_d2uiz>
 8003792:	ee07 0a90 	vmov	s15, r0
 8003796:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800379a:	edd7 7a06 	vldr	s15, [r7, #24]
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a6:	ee17 3a90 	vmov	r3, s15
 80037aa:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d309      	bcc.n	80037c8 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 80037b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037b8:	3301      	adds	r3, #1
 80037ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037c2:	2b09      	cmp	r3, #9
 80037c4:	d9d2      	bls.n	800376c <SpiritRadioSearchFreqDevME+0x30>
 80037c6:	e000      	b.n	80037ca <SpiritRadioSearchFreqDevME+0x8e>
      break;
 80037c8:	bf00      	nop
  }
  (*pcE) = i;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037d0:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037d8:	e043      	b.n	8003862 <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 80037de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc fea2 	bl	800052c <__aeabi_i2d>
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	4b2e      	ldr	r3, [pc, #184]	; (80038a8 <SpiritRadioSearchFreqDevME+0x16c>)
 80037ee:	f7fc fd51 	bl	8000294 <__adddf3>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003802:	f7fd f827 	bl	8000854 <__aeabi_ddiv>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4614      	mov	r4, r2
 800380c:	461d      	mov	r5, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	2301      	movs	r3, #1
 8003816:	4093      	lsls	r3, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f7fc fe87 	bl	800052c <__aeabi_i2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4620      	mov	r0, r4
 8003824:	4629      	mov	r1, r5
 8003826:	f7fc feeb 	bl	8000600 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	f7fd f9bd 	bl	8000bb0 <__aeabi_d2uiz>
 8003836:	ee07 0a90 	vmov	s15, r0
 800383a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800383e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800384a:	ee17 3a90 	vmov	r3, s15
 800384e:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	d309      	bcc.n	800386c <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800385c:	3301      	adds	r3, #1
 800385e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003866:	2b07      	cmp	r3, #7
 8003868:	d9b7      	bls.n	80037da <SpiritRadioSearchFreqDevME+0x9e>
 800386a:	e000      	b.n	800386e <SpiritRadioSearchFreqDevME+0x132>
      break;
 800386c:	bf00      	nop
  }
  
  (*pcM)=i;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003874:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	1ad2      	subs	r2, r2, r3
 800387c:	69f9      	ldr	r1, [r7, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1acb      	subs	r3, r1, r3
 8003882:	429a      	cmp	r2, r3
 8003884:	d205      	bcs.n	8003892 <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	3b01      	subs	r3, #1
 800388c:	b2da      	uxtb	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	701a      	strb	r2, [r3, #0]
  
}
 8003892:	bf00      	nop
 8003894:	3728      	adds	r7, #40	; 0x28
 8003896:	46bd      	mov	sp, r7
 8003898:	bdb0      	pop	{r4, r5, r7, pc}
 800389a:	bf00      	nop
 800389c:	20000338 	.word	0x20000338
 80038a0:	48800000 	.word	0x48800000
 80038a4:	401e0000 	.word	0x401e0000
 80038a8:	40200000 	.word	0x40200000

080038ac <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 80038bc:	2300      	movs	r3, #0
 80038be:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a74      	ldr	r2, [pc, #464]	; (8003a94 <SpiritRadioGetdBm2Reg+0x1e8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d30c      	bcc.n	80038e2 <SpiritRadioGetdBm2Reg+0x36>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a73      	ldr	r2, [pc, #460]	; (8003a98 <SpiritRadioGetdBm2Reg+0x1ec>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d808      	bhi.n	80038e2 <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a71      	ldr	r2, [pc, #452]	; (8003a9c <SpiritRadioGetdBm2Reg+0x1f0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d822      	bhi.n	8003922 <SpiritRadioGetdBm2Reg+0x76>
 80038dc:	2301      	movs	r3, #1
 80038de:	75fb      	strb	r3, [r7, #23]
 80038e0:	e01f      	b.n	8003922 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a6e      	ldr	r2, [pc, #440]	; (8003aa0 <SpiritRadioGetdBm2Reg+0x1f4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d906      	bls.n	80038f8 <SpiritRadioGetdBm2Reg+0x4c>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a6d      	ldr	r2, [pc, #436]	; (8003aa4 <SpiritRadioGetdBm2Reg+0x1f8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d802      	bhi.n	80038f8 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 80038f2:	2302      	movs	r3, #2
 80038f4:	75fb      	strb	r3, [r7, #23]
 80038f6:	e014      	b.n	8003922 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a6b      	ldr	r2, [pc, #428]	; (8003aa8 <SpiritRadioGetdBm2Reg+0x1fc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d906      	bls.n	800390e <SpiritRadioGetdBm2Reg+0x62>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a6a      	ldr	r2, [pc, #424]	; (8003aac <SpiritRadioGetdBm2Reg+0x200>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d802      	bhi.n	800390e <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003908:	2303      	movs	r3, #3
 800390a:	75fb      	strb	r3, [r7, #23]
 800390c:	e009      	b.n	8003922 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a67      	ldr	r2, [pc, #412]	; (8003ab0 <SpiritRadioGetdBm2Reg+0x204>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d905      	bls.n	8003922 <SpiritRadioGetdBm2Reg+0x76>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a66      	ldr	r2, [pc, #408]	; (8003ab4 <SpiritRadioGetdBm2Reg+0x208>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d801      	bhi.n	8003922 <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 800391e:	2304      	movs	r3, #4
 8003920:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003922:	2301      	movs	r3, #1
 8003924:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003926:	edd7 7a02 	vldr	s15, [r7, #8]
 800392a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003932:	dd2f      	ble.n	8003994 <SpiritRadioGetdBm2Reg+0xe8>
 8003934:	7dfa      	ldrb	r2, [r7, #23]
 8003936:	4960      	ldr	r1, [pc, #384]	; (8003ab8 <SpiritRadioGetdBm2Reg+0x20c>)
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	3308      	adds	r3, #8
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 800394c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003950:	7dfa      	ldrb	r2, [r7, #23]
 8003952:	4959      	ldr	r1, [pc, #356]	; (8003ab8 <SpiritRadioGetdBm2Reg+0x20c>)
 8003954:	4613      	mov	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	330c      	adds	r3, #12
 8003960:	ed93 6a00 	vldr	s12, [r3]
 8003964:	7dfa      	ldrb	r2, [r7, #23]
 8003966:	4954      	ldr	r1, [pc, #336]	; (8003ab8 <SpiritRadioGetdBm2Reg+0x20c>)
 8003968:	4613      	mov	r3, r2
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	3308      	adds	r3, #8
 8003974:	edd3 6a00 	vldr	s13, [r3]
 8003978:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800397c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003980:	ed97 7a02 	vldr	s14, [r7, #8]
 8003984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398c:	dd02      	ble.n	8003994 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 800398e:	2300      	movs	r3, #0
 8003990:	75bb      	strb	r3, [r7, #22]
 8003992:	e035      	b.n	8003a00 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003994:	edd7 7a02 	vldr	s15, [r7, #8]
 8003998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800399c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a0:	d82e      	bhi.n	8003a00 <SpiritRadioGetdBm2Reg+0x154>
 80039a2:	7dfa      	ldrb	r2, [r7, #23]
 80039a4:	4944      	ldr	r1, [pc, #272]	; (8003ab8 <SpiritRadioGetdBm2Reg+0x20c>)
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	3308      	adds	r3, #8
 80039b2:	edd3 7a00 	vldr	s15, [r3]
 80039b6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003abc <SpiritRadioGetdBm2Reg+0x210>
 80039ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039be:	7dfa      	ldrb	r2, [r7, #23]
 80039c0:	493d      	ldr	r1, [pc, #244]	; (8003ab8 <SpiritRadioGetdBm2Reg+0x20c>)
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	440b      	add	r3, r1
 80039cc:	330c      	adds	r3, #12
 80039ce:	ed93 6a00 	vldr	s12, [r3]
 80039d2:	7dfa      	ldrb	r2, [r7, #23]
 80039d4:	4938      	ldr	r1, [pc, #224]	; (8003ab8 <SpiritRadioGetdBm2Reg+0x20c>)
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	440b      	add	r3, r1
 80039e0:	3308      	adds	r3, #8
 80039e2:	edd3 6a00 	vldr	s13, [r3]
 80039e6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80039ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80039f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fa:	d501      	bpl.n	8003a00 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 80039fc:	2302      	movs	r3, #2
 80039fe:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003a00:	7dfa      	ldrb	r2, [r7, #23]
 8003a02:	7dbb      	ldrb	r3, [r7, #22]
 8003a04:	0059      	lsls	r1, r3, #1
 8003a06:	482c      	ldr	r0, [pc, #176]	; (8003ab8 <SpiritRadioGetdBm2Reg+0x20c>)
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	440b      	add	r3, r1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4403      	add	r3, r0
 8003a16:	ed93 7a00 	vldr	s14, [r3]
 8003a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a22:	7dfa      	ldrb	r2, [r7, #23]
 8003a24:	7dbb      	ldrb	r3, [r7, #22]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	1c59      	adds	r1, r3, #1
 8003a2a:	4823      	ldr	r0, [pc, #140]	; (8003ab8 <SpiritRadioGetdBm2Reg+0x20c>)
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	440b      	add	r3, r1
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4403      	add	r3, r0
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a42:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a56:	d503      	bpl.n	8003a60 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003a58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	e00a      	b.n	8003a76 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a64:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003ac0 <SpiritRadioGetdBm2Reg+0x214>
 8003a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a70:	dd01      	ble.n	8003a76 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <SpiritRadioGetdBm2Reg+0x218>)
 8003a74:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003a76:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a82:	793b      	ldrb	r3, [r7, #4]
 8003a84:	b2db      	uxtb	r3, r3
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	2e5f5680 	.word	0x2e5f5680
 8003a98:	390c2fe0 	.word	0x390c2fe0
 8003a9c:	35a4e8ff 	.word	0x35a4e8ff
 8003aa0:	1701e47f 	.word	0x1701e47f
 8003aa4:	1c146a60 	.word	0x1c146a60
 8003aa8:	11d260bf 	.word	0x11d260bf
 8003aac:	14ced7e0 	.word	0x14ced7e0
 8003ab0:	08e18f3f 	.word	0x08e18f3f
 8003ab4:	0a6fd060 	.word	0x0a6fd060
 8003ab8:	0800d77c 	.word	0x0800d77c
 8003abc:	42200000 	.word	0x42200000
 8003ac0:	42b40000 	.word	0x42b40000
 8003ac4:	42b40000 	.word	0x42b40000

08003ac8 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	ed87 0a00 	vstr	s0, [r7]
 8003ad4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003ad6:	f7ff fc4d 	bl	8003374 <SpiritRadioGetFrequencyBase>
 8003ada:	4603      	mov	r3, r0
 8003adc:	ed97 0a00 	vldr	s0, [r7]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fee3 	bl	80038ac <SpiritRadioGetdBm2Reg>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	f1c3 0317 	rsb	r3, r3, #23
 8003af0:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003af2:	f107 020e 	add.w	r2, r7, #14
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2101      	movs	r1, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f9ec 	bl	8003ed8 <RadioSpiWriteRegisters>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <SpiritRadioSetPALeveldBm+0x50>)
 8003b04:	b212      	sxth	r2, r2
 8003b06:	4611      	mov	r1, r2
 8003b08:	7019      	strb	r1, [r3, #0]
 8003b0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b0e:	705a      	strb	r2, [r3, #1]
  
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	2000033c 	.word	0x2000033c

08003b1c <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003b26:	f107 030f 	add.w	r3, r7, #15
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	2018      	movs	r0, #24
 8003b30:	f000 fa20 	bl	8003f74 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003b3e:	7bfa      	ldrb	r2, [r7, #15]
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003b48:	f107 030f 	add.w	r3, r7, #15
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2101      	movs	r1, #1
 8003b50:	2018      	movs	r0, #24
 8003b52:	f000 f9c1 	bl	8003ed8 <RadioSpiWriteRegisters>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <SpiritRadioSetPACwc+0x54>)
 8003b5a:	b212      	sxth	r2, r2
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	7019      	strb	r1, [r3, #0]
 8003b60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b64:	705a      	strb	r2, [r3, #1]
  
}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000033c 	.word	0x2000033c

08003b74 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003b7e:	f107 030f 	add.w	r3, r7, #15
 8003b82:	461a      	mov	r2, r3
 8003b84:	2101      	movs	r1, #1
 8003b86:	2018      	movs	r0, #24
 8003b88:	f000 f9f4 	bl	8003f74 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	f023 0307 	bic.w	r3, r3, #7
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003ba0:	f107 030f 	add.w	r3, r7, #15
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	2018      	movs	r0, #24
 8003baa:	f000 f995 	bl	8003ed8 <RadioSpiWriteRegisters>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003bb2:	b212      	sxth	r2, r2
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	7019      	strb	r1, [r3, #0]
 8003bb8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003bbc:	705a      	strb	r2, [r3, #1]
  
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2000033c 	.word	0x2000033c

08003bcc <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003bda:	f107 030f 	add.w	r3, r7, #15
 8003bde:	461a      	mov	r2, r3
 8003be0:	2101      	movs	r1, #1
 8003be2:	201e      	movs	r0, #30
 8003be4:	f000 f9c6 	bl	8003f74 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e004      	b.n	8003c04 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003c04:	f107 030f 	add.w	r3, r7, #15
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	201e      	movs	r0, #30
 8003c0e:	f000 f963 	bl	8003ed8 <RadioSpiWriteRegisters>
 8003c12:	4602      	mov	r2, r0
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <SpiritRadioAFCFreezeOnSync+0x60>)
 8003c16:	b212      	sxth	r2, r2
 8003c18:	4611      	mov	r1, r2
 8003c1a:	7019      	strb	r1, [r3, #0]
 8003c1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c20:	705a      	strb	r2, [r3, #1]
  
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	2000033c 	.word	0x2000033c

08003c30 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003c3a:	f107 030f 	add.w	r3, r7, #15
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2101      	movs	r1, #1
 8003c42:	209e      	movs	r0, #158	; 0x9e
 8003c44:	f000 f996 	bl	8003f74 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	e004      	b.n	8003c64 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003c64:	f107 030f 	add.w	r3, r7, #15
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	209e      	movs	r0, #158	; 0x9e
 8003c6e:	f000 f933 	bl	8003ed8 <RadioSpiWriteRegisters>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <SpiritRadioSetRefDiv+0x5c>)
 8003c76:	b212      	sxth	r2, r2
 8003c78:	4611      	mov	r1, r2
 8003c7a:	7019      	strb	r1, [r3, #0]
 8003c7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c80:	705a      	strb	r2, [r3, #1]
  
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	2000033c 	.word	0x2000033c

08003c90 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003c96:	1dfb      	adds	r3, r7, #7
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	209e      	movs	r0, #158	; 0x9e
 8003c9e:	f000 f969 	bl	8003f74 <RadioSpiReadRegisters>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <SpiritRadioGetRefDiv+0x40>)
 8003ca6:	b212      	sxth	r2, r2
 8003ca8:	4611      	mov	r1, r2
 8003caa:	7019      	strb	r1, [r3, #0]
 8003cac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003cb0:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	09db      	lsrs	r3, r3, #7
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003cc4:	2300      	movs	r3, #0
  }
  
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	2000033c 	.word	0x2000033c

08003cd4 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003cde:	f107 030f 	add.w	r3, r7, #15
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	20b4      	movs	r0, #180	; 0xb4
 8003ce8:	f000 f944 	bl	8003f74 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d105      	bne.n	8003cfe <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	f023 0308 	bic.w	r3, r3, #8
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e004      	b.n	8003d08 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	f043 0308 	orr.w	r3, r3, #8
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003d08:	f107 030f 	add.w	r3, r7, #15
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2101      	movs	r1, #1
 8003d10:	20b4      	movs	r0, #180	; 0xb4
 8003d12:	f000 f8e1 	bl	8003ed8 <RadioSpiWriteRegisters>
 8003d16:	4602      	mov	r2, r0
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <SpiritRadioSetDigDiv+0x5c>)
 8003d1a:	b212      	sxth	r2, r2
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	7019      	strb	r1, [r3, #0]
 8003d20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d24:	705a      	strb	r2, [r3, #1]
  
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	2000033c 	.word	0x2000033c

08003d34 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003d3a:	1dfb      	adds	r3, r7, #7
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2101      	movs	r1, #1
 8003d40:	20b4      	movs	r0, #180	; 0xb4
 8003d42:	f000 f917 	bl	8003f74 <RadioSpiReadRegisters>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <SpiritRadioGetDigDiv+0x40>)
 8003d4a:	b212      	sxth	r2, r2
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	7019      	strb	r1, [r3, #0]
 8003d50:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d54:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003d68:	2301      	movs	r3, #1
  }
  
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	2000033c 	.word	0x2000033c

08003d78 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <SpiritRadioGetXtalFrequency+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000338 	.word	0x20000338

08003d90 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003d98:	4a04      	ldr	r2, [pc, #16]	; (8003dac <SpiritRadioSetXtalFrequency+0x1c>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6013      	str	r3, [r2, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000338 	.word	0x20000338

08003db0 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8003dba:	1dfb      	adds	r3, r7, #7
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	2054      	movs	r0, #84	; 0x54
 8003dc2:	f000 f889 	bl	8003ed8 <RadioSpiWriteRegisters>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <SpiritTimerSetRxTimeoutCounter+0x30>)
 8003dca:	b212      	sxth	r2, r2
 8003dcc:	4611      	mov	r1, r2
 8003dce:	7019      	strb	r1, [r3, #0]
 8003dd0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003dd4:	705a      	strb	r2, [r3, #1]

}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	2000033c 	.word	0x2000033c

08003de4 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003dee:	f107 030c 	add.w	r3, r7, #12
 8003df2:	461a      	mov	r2, r3
 8003df4:	2102      	movs	r1, #2
 8003df6:	204f      	movs	r0, #79	; 0x4f
 8003df8:	f000 f8bc 	bl	8003f74 <RadioSpiReadRegisters>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003e00:	b212      	sxth	r2, r2
 8003e02:	4611      	mov	r1, r2
 8003e04:	7019      	strb	r1, [r3, #0]
 8003e06:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e0a:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003e0c:	7b3b      	ldrb	r3, [r7, #12]
 8003e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8003e16:	7b3b      	ldrb	r3, [r7, #12]
 8003e18:	b25a      	sxtb	r2, r3
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	b25b      	sxtb	r3, r3
 8003e26:	4313      	orrs	r3, r2
 8003e28:	b25b      	sxtb	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003e2e:	7b7b      	ldrb	r3, [r7, #13]
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8003e38:	7b7b      	ldrb	r3, [r7, #13]
 8003e3a:	b25a      	sxtb	r2, r3
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	015b      	lsls	r3, r3, #5
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b25b      	sxtb	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003e4a:	f107 030c 	add.w	r3, r7, #12
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2102      	movs	r1, #2
 8003e52:	204f      	movs	r0, #79	; 0x4f
 8003e54:	f000 f840 	bl	8003ed8 <RadioSpiWriteRegisters>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003e5c:	b212      	sxth	r2, r2
 8003e5e:	4611      	mov	r1, r2
 8003e60:	7019      	strb	r1, [r3, #0]
 8003e62:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e66:	705a      	strb	r2, [r3, #1]

}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	2000033c 	.word	0x2000033c

08003e74 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8003e7a:	1d3b      	adds	r3, r7, #4
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2102      	movs	r1, #2
 8003e80:	20c0      	movs	r0, #192	; 0xc0
 8003e82:	f000 f877 	bl	8003f74 <RadioSpiReadRegisters>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <SpiritRefreshStatus+0x3c>)
 8003e8a:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003e8c:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <SpiritRefreshStatus+0x3c>)
 8003e8e:	781a      	ldrb	r2, [r3, #0]
 8003e90:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d1f1      	bne.n	8003e7a <SpiritRefreshStatus+0x6>
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <SpiritRefreshStatus+0x40>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d1ea      	bne.n	8003e7a <SpiritRefreshStatus+0x6>

}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	2000033c 	.word	0x2000033c
 8003eb4:	2000033d 	.word	0x2000033d

08003eb8 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <RadioSpiInit+0x1c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <RadioSpiInit+0x16>
  {
    Error_Handler();
 8003eca:	f7fd fcbd 	bl	8001848 <Error_Handler>
  }
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2000000c 	.word	0x2000000c

08003ed8 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	4603      	mov	r3, r0
 8003ee0:	603a      	str	r2, [r7, #0]
 8003ee2:	71fb      	strb	r3, [r7, #7]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8003ee8:	2300      	movs	r3, #0
 8003eea:	743b      	strb	r3, [r7, #16]
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003ef0:	2012      	movs	r0, #18
 8003ef2:	f000 fb04 	bl	80044fe <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003efc:	481b      	ldr	r0, [pc, #108]	; (8003f6c <RadioSpiWriteRegisters+0x94>)
 8003efe:	f000 fd09 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003f02:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <RadioSpiWriteRegisters+0x98>)
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	f107 020c 	add.w	r2, r7, #12
 8003f0a:	f107 0110 	add.w	r1, r7, #16
 8003f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2302      	movs	r3, #2
 8003f16:	f004 ff7b 	bl	8008e10 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <RadioSpiWriteRegisters+0x98>)
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	79bb      	ldrb	r3, [r7, #6]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f26:	6839      	ldr	r1, [r7, #0]
 8003f28:	f004 fb38 	bl	800859c <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f32:	480e      	ldr	r0, [pc, #56]	; (8003f6c <RadioSpiWriteRegisters+0x94>)
 8003f34:	f000 fcee 	bl	8004914 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003f38:	2012      	movs	r0, #18
 8003f3a:	f000 fad2 	bl	80044e2 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003f3e:	f107 0308 	add.w	r3, r7, #8
 8003f42:	3301      	adds	r3, #1
 8003f44:	7b3a      	ldrb	r2, [r7, #12]
 8003f46:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003f48:	f107 0308 	add.w	r3, r7, #8
 8003f4c:	7b7a      	ldrb	r2, [r7, #13]
 8003f4e:	701a      	strb	r2, [r3, #0]

  return status;
 8003f50:	893b      	ldrh	r3, [r7, #8]
 8003f52:	82bb      	strh	r3, [r7, #20]
 8003f54:	2300      	movs	r3, #0
 8003f56:	7d3a      	ldrb	r2, [r7, #20]
 8003f58:	f362 0307 	bfi	r3, r2, #0, #8
 8003f5c:	7d7a      	ldrb	r2, [r7, #21]
 8003f5e:	f362 230f 	bfi	r3, r2, #8, #8

}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	42021000 	.word	0x42021000
 8003f70:	2000000c 	.word	0x2000000c

08003f74 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	603a      	str	r2, [r7, #0]
 8003f7e:	71fb      	strb	r3, [r7, #7]
 8003f80:	460b      	mov	r3, r1
 8003f82:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8003f84:	2301      	movs	r3, #1
 8003f86:	743b      	strb	r3, [r7, #16]
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003f8c:	2012      	movs	r0, #18
 8003f8e:	f000 fab6 	bl	80044fe <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003f92:	2200      	movs	r2, #0
 8003f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f98:	481b      	ldr	r0, [pc, #108]	; (8004008 <RadioSpiReadRegisters+0x94>)
 8003f9a:	f000 fcbb 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003f9e:	4b1b      	ldr	r3, [pc, #108]	; (800400c <RadioSpiReadRegisters+0x98>)
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f107 020c 	add.w	r2, r7, #12
 8003fa6:	f107 0110 	add.w	r1, r7, #16
 8003faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	f004 ff2d 	bl	8008e10 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <RadioSpiReadRegisters+0x98>)
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	79bb      	ldrb	r3, [r7, #6]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fc2:	6839      	ldr	r1, [r7, #0]
 8003fc4:	f004 fcfc 	bl	80089c0 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fce:	480e      	ldr	r0, [pc, #56]	; (8004008 <RadioSpiReadRegisters+0x94>)
 8003fd0:	f000 fca0 	bl	8004914 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003fd4:	2012      	movs	r0, #18
 8003fd6:	f000 fa84 	bl	80044e2 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003fda:	f107 0308 	add.w	r3, r7, #8
 8003fde:	3301      	adds	r3, #1
 8003fe0:	7b3a      	ldrb	r2, [r7, #12]
 8003fe2:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003fe4:	f107 0308 	add.w	r3, r7, #8
 8003fe8:	7b7a      	ldrb	r2, [r7, #13]
 8003fea:	701a      	strb	r2, [r3, #0]

  return status;
 8003fec:	893b      	ldrh	r3, [r7, #8]
 8003fee:	82bb      	strh	r3, [r7, #20]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	7d3a      	ldrb	r2, [r7, #20]
 8003ff4:	f362 0307 	bfi	r3, r2, #0, #8
 8003ff8:	7d7a      	ldrb	r2, [r7, #21]
 8003ffa:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	42021000 	.word	0x42021000
 800400c:	2000000c 	.word	0x2000000c

08004010 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af02      	add	r7, sp, #8
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	743b      	strb	r3, [r7, #16]
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004022:	2012      	movs	r0, #18
 8004024:	f000 fa6b 	bl	80044fe <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004028:	2200      	movs	r2, #0
 800402a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800402e:	4817      	ldr	r0, [pc, #92]	; (800408c <RadioSpiCommandStrobes+0x7c>)
 8004030:	f000 fc70 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004034:	4b16      	ldr	r3, [pc, #88]	; (8004090 <RadioSpiCommandStrobes+0x80>)
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	f107 020c 	add.w	r2, r7, #12
 800403c:	f107 0110 	add.w	r1, r7, #16
 8004040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	2302      	movs	r3, #2
 8004048:	f004 fee2 	bl	8008e10 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800404c:	2201      	movs	r2, #1
 800404e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004052:	480e      	ldr	r0, [pc, #56]	; (800408c <RadioSpiCommandStrobes+0x7c>)
 8004054:	f000 fc5e 	bl	8004914 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004058:	2012      	movs	r0, #18
 800405a:	f000 fa42 	bl	80044e2 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800405e:	f107 0308 	add.w	r3, r7, #8
 8004062:	3301      	adds	r3, #1
 8004064:	7b3a      	ldrb	r2, [r7, #12]
 8004066:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	7b7a      	ldrb	r2, [r7, #13]
 800406e:	701a      	strb	r2, [r3, #0]

  return status;
 8004070:	893b      	ldrh	r3, [r7, #8]
 8004072:	82bb      	strh	r3, [r7, #20]
 8004074:	2300      	movs	r3, #0
 8004076:	7d3a      	ldrb	r2, [r7, #20]
 8004078:	f362 0307 	bfi	r3, r2, #0, #8
 800407c:	7d7a      	ldrb	r2, [r7, #21]
 800407e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	42021000 	.word	0x42021000
 8004090:	2000000c 	.word	0x2000000c

08004094 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af02      	add	r7, sp, #8
 800409a:	4603      	mov	r3, r0
 800409c:	6039      	str	r1, [r7, #0]
 800409e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 80040a0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80040a4:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80040a6:	2012      	movs	r0, #18
 80040a8:	f000 fa29 	bl	80044fe <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040b2:	481b      	ldr	r0, [pc, #108]	; (8004120 <RadioSpiWriteFifo+0x8c>)
 80040b4:	f000 fc2e 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <RadioSpiWriteFifo+0x90>)
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	f107 020c 	add.w	r2, r7, #12
 80040c0:	f107 0110 	add.w	r1, r7, #16
 80040c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	2302      	movs	r3, #2
 80040cc:	f004 fea0 	bl	8008e10 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80040d0:	4b14      	ldr	r3, [pc, #80]	; (8004124 <RadioSpiWriteFifo+0x90>)
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040dc:	6839      	ldr	r1, [r7, #0]
 80040de:	f004 fa5d 	bl	800859c <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80040e2:	2201      	movs	r2, #1
 80040e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040e8:	480d      	ldr	r0, [pc, #52]	; (8004120 <RadioSpiWriteFifo+0x8c>)
 80040ea:	f000 fc13 	bl	8004914 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80040ee:	2012      	movs	r0, #18
 80040f0:	f000 f9f7 	bl	80044e2 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80040f4:	f107 0308 	add.w	r3, r7, #8
 80040f8:	3301      	adds	r3, #1
 80040fa:	7b3a      	ldrb	r2, [r7, #12]
 80040fc:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80040fe:	f107 0308 	add.w	r3, r7, #8
 8004102:	7b7a      	ldrb	r2, [r7, #13]
 8004104:	701a      	strb	r2, [r3, #0]

  return status;
 8004106:	893b      	ldrh	r3, [r7, #8]
 8004108:	82bb      	strh	r3, [r7, #20]
 800410a:	2300      	movs	r3, #0
 800410c:	7d3a      	ldrb	r2, [r7, #20]
 800410e:	f362 0307 	bfi	r3, r2, #0, #8
 8004112:	7d7a      	ldrb	r2, [r7, #21]
 8004114:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	42021000 	.word	0x42021000
 8004124:	2000000c 	.word	0x2000000c

08004128 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 800412c:	2201      	movs	r2, #1
 800412e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004132:	4802      	ldr	r0, [pc, #8]	; (800413c <RadioEnterShutdown+0x14>)
 8004134:	f000 fbee 	bl	8004914 <HAL_GPIO_WritePin>
}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}
 800413c:	42020000 	.word	0x42020000

08004140 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 8004144:	2200      	movs	r2, #0
 8004146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800414a:	4804      	ldr	r0, [pc, #16]	; (800415c <RadioExitShutdown+0x1c>)
 800414c:	f000 fbe2 	bl	8004914 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 8004150:	2001      	movs	r0, #1
 8004152:	f000 f889 	bl	8004268 <HAL_Delay>
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	42020000 	.word	0x42020000

08004160 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004164:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_Init+0x4c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a10      	ldr	r2, [pc, #64]	; (80041ac <HAL_Init+0x4c>)
 800416a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004170:	2003      	movs	r0, #3
 8004172:	f000 f991 	bl	8004498 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004176:	f001 fc95 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 800417a:	4602      	mov	r2, r0
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <HAL_Init+0x50>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	490b      	ldr	r1, [pc, #44]	; (80041b4 <HAL_Init+0x54>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_Init+0x58>)
 800418e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004190:	200f      	movs	r0, #15
 8004192:	f000 f813 	bl	80041bc <HAL_InitTick>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e002      	b.n	80041a6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041a0:	f7fd fb58 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40022000 	.word	0x40022000
 80041b0:	46020c00 	.word	0x46020c00
 80041b4:	0800d640 	.word	0x0800d640
 80041b8:	20000004 	.word	0x20000004

080041bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_InitTick+0x60>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e021      	b.n	8004214 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80041d0:	4b13      	ldr	r3, [pc, #76]	; (8004220 <HAL_InitTick+0x64>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_InitTick+0x60>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	4619      	mov	r1, r3
 80041da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041de:	fbb3 f3f1 	udiv	r3, r3, r1
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f997 	bl	800451a <HAL_SYSTICK_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e00e      	b.n	8004214 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b0f      	cmp	r3, #15
 80041fa:	d80a      	bhi.n	8004212 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041fc:	2200      	movs	r2, #0
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	f04f 30ff 	mov.w	r0, #4294967295
 8004204:	f000 f953 	bl	80044ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004208:	4a06      	ldr	r2, [pc, #24]	; (8004224 <HAL_InitTick+0x68>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	e000      	b.n	8004214 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000014 	.word	0x20000014
 8004220:	20000004 	.word	0x20000004
 8004224:	20000010 	.word	0x20000010

08004228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_IncTick+0x20>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_IncTick+0x24>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4413      	add	r3, r2
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <HAL_IncTick+0x24>)
 800423a:	6013      	str	r3, [r2, #0]
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000014 	.word	0x20000014
 800424c:	20000340 	.word	0x20000340

08004250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return uwTick;
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <HAL_GetTick+0x14>)
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000340 	.word	0x20000340

08004268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004270:	f7ff ffee 	bl	8004250 <HAL_GetTick>
 8004274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d005      	beq.n	800428e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_Delay+0x44>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800428e:	bf00      	nop
 8004290:	f7ff ffde 	bl	8004250 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	429a      	cmp	r2, r3
 800429e:	d8f7      	bhi.n	8004290 <HAL_Delay+0x28>
  {
  }
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000014 	.word	0x20000014

080042b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <__NVIC_SetPriorityGrouping+0x44>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042cc:	4013      	ands	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042e2:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <__NVIC_SetPriorityGrouping+0x44>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	60d3      	str	r3, [r2, #12]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <__NVIC_GetPriorityGrouping+0x18>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	f003 0307 	and.w	r3, r3, #7
}
 8004306:	4618      	mov	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	2b00      	cmp	r3, #0
 8004324:	db0b      	blt.n	800433e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	4907      	ldr	r1, [pc, #28]	; (800434c <__NVIC_EnableIRQ+0x38>)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2001      	movs	r0, #1
 8004336:	fa00 f202 	lsl.w	r2, r0, r2
 800433a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	e000e100 	.word	0xe000e100

08004350 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	db12      	blt.n	8004388 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	490a      	ldr	r1, [pc, #40]	; (8004394 <__NVIC_DisableIRQ+0x44>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2001      	movs	r0, #1
 8004372:	fa00 f202 	lsl.w	r2, r0, r2
 8004376:	3320      	adds	r3, #32
 8004378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800437c:	f3bf 8f4f 	dsb	sy
}
 8004380:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004382:	f3bf 8f6f 	isb	sy
}
 8004386:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000e100 	.word	0xe000e100

08004398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	6039      	str	r1, [r7, #0]
 80043a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	db0a      	blt.n	80043c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	490c      	ldr	r1, [pc, #48]	; (80043e4 <__NVIC_SetPriority+0x4c>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	0112      	lsls	r2, r2, #4
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	440b      	add	r3, r1
 80043bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c0:	e00a      	b.n	80043d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4908      	ldr	r1, [pc, #32]	; (80043e8 <__NVIC_SetPriority+0x50>)
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	3b04      	subs	r3, #4
 80043d0:	0112      	lsls	r2, r2, #4
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	440b      	add	r3, r1
 80043d6:	761a      	strb	r2, [r3, #24]
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	e000e100 	.word	0xe000e100
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b089      	sub	sp, #36	; 0x24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f1c3 0307 	rsb	r3, r3, #7
 8004406:	2b04      	cmp	r3, #4
 8004408:	bf28      	it	cs
 800440a:	2304      	movcs	r3, #4
 800440c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3304      	adds	r3, #4
 8004412:	2b06      	cmp	r3, #6
 8004414:	d902      	bls.n	800441c <NVIC_EncodePriority+0x30>
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3b03      	subs	r3, #3
 800441a:	e000      	b.n	800441e <NVIC_EncodePriority+0x32>
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004420:	f04f 32ff 	mov.w	r2, #4294967295
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43da      	mvns	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	401a      	ands	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004434:	f04f 31ff 	mov.w	r1, #4294967295
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	fa01 f303 	lsl.w	r3, r1, r3
 800443e:	43d9      	mvns	r1, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004444:	4313      	orrs	r3, r2
         );
}
 8004446:	4618      	mov	r0, r3
 8004448:	3724      	adds	r7, #36	; 0x24
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3b01      	subs	r3, #1
 8004460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004464:	d301      	bcc.n	800446a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004466:	2301      	movs	r3, #1
 8004468:	e00f      	b.n	800448a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800446a:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <SysTick_Config+0x40>)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3b01      	subs	r3, #1
 8004470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004472:	210f      	movs	r1, #15
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	f7ff ff8e 	bl	8004398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <SysTick_Config+0x40>)
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004482:	4b04      	ldr	r3, [pc, #16]	; (8004494 <SysTick_Config+0x40>)
 8004484:	2207      	movs	r2, #7
 8004486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	e000e010 	.word	0xe000e010

08004498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff ff05 	bl	80042b0 <__NVIC_SetPriorityGrouping>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b086      	sub	sp, #24
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044bc:	f7ff ff1c 	bl	80042f8 <__NVIC_GetPriorityGrouping>
 80044c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	6978      	ldr	r0, [r7, #20]
 80044c8:	f7ff ff90 	bl	80043ec <NVIC_EncodePriority>
 80044cc:	4602      	mov	r2, r0
 80044ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff ff5f 	bl	8004398 <__NVIC_SetPriority>
}
 80044da:	bf00      	nop
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	4603      	mov	r3, r0
 80044ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ff0f 	bl	8004314 <__NVIC_EnableIRQ>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ff1f 	bl	8004350 <__NVIC_DisableIRQ>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ff96 	bl	8004454 <SysTick_Config>
 8004528:	4603      	mov	r3, r0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004534:	b480      	push	{r7}
 8004536:	b089      	sub	sp, #36	; 0x24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004546:	e1ba      	b.n	80048be <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	2101      	movs	r1, #1
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	4013      	ands	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 81aa 	beq.w	80048b8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a55      	ldr	r2, [pc, #340]	; (80046bc <HAL_GPIO_Init+0x188>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d15d      	bne.n	8004628 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004572:	2201      	movs	r2, #1
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43db      	mvns	r3, r3
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	4013      	ands	r3, r2
 8004580:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0201 	and.w	r2, r3, #1
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	4313      	orrs	r3, r2
 8004594:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800459c:	4a48      	ldr	r2, [pc, #288]	; (80046c0 <HAL_GPIO_Init+0x18c>)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045a4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80045a6:	4a46      	ldr	r2, [pc, #280]	; (80046c0 <HAL_GPIO_Init+0x18c>)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	08da      	lsrs	r2, r3, #3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	3208      	adds	r2, #8
 80045ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045be:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	220f      	movs	r2, #15
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	4013      	ands	r3, r2
 80045d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	220b      	movs	r2, #11
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	08da      	lsrs	r2, r3, #3
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	3208      	adds	r2, #8
 80045f2:	69f9      	ldr	r1, [r7, #28]
 80045f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	2203      	movs	r2, #3
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	4013      	ands	r3, r2
 800460e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	2202      	movs	r2, #2
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	4313      	orrs	r3, r2
 800461e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e067      	b.n	80046f8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x104>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b12      	cmp	r3, #18
 8004636:	d145      	bne.n	80046c4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	08da      	lsrs	r2, r3, #3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3208      	adds	r2, #8
 8004640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004644:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	220f      	movs	r2, #15
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	4013      	ands	r3, r2
 800465a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 020f 	and.w	r2, r3, #15
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	4313      	orrs	r3, r2
 8004674:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	08da      	lsrs	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3208      	adds	r2, #8
 800467e:	69f9      	ldr	r1, [r7, #28]
 8004680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	2203      	movs	r2, #3
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	4013      	ands	r3, r2
 800469a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 0203 	and.w	r2, r3, #3
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e01e      	b.n	80046f8 <HAL_GPIO_Init+0x1c4>
 80046ba:	bf00      	nop
 80046bc:	46020000 	.word	0x46020000
 80046c0:	0800d7f4 	.word	0x0800d7f4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	2203      	movs	r2, #3
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	4013      	ands	r3, r2
 80046da:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0203 	and.w	r2, r3, #3
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d00b      	beq.n	8004718 <HAL_GPIO_Init+0x1e4>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d007      	beq.n	8004718 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800470c:	2b11      	cmp	r3, #17
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b12      	cmp	r3, #18
 8004716:	d130      	bne.n	800477a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	2203      	movs	r2, #3
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	4013      	ands	r3, r2
 800472e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	4313      	orrs	r3, r2
 8004740:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800474e:	2201      	movs	r2, #1
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	4013      	ands	r3, r2
 800475c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	f003 0201 	and.w	r2, r3, #1
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	4313      	orrs	r3, r2
 8004772:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d017      	beq.n	80047b2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	2203      	movs	r2, #3
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	4013      	ands	r3, r2
 8004798:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d07c      	beq.n	80048b8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80047be:	4a47      	ldr	r2, [pc, #284]	; (80048dc <HAL_GPIO_Init+0x3a8>)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	089b      	lsrs	r3, r3, #2
 80047c4:	3318      	adds	r3, #24
 80047c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	220f      	movs	r2, #15
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	4013      	ands	r3, r2
 80047e0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0a9a      	lsrs	r2, r3, #10
 80047e6:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <HAL_GPIO_Init+0x3ac>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	f002 0203 	and.w	r2, r2, #3
 80047f0:	00d2      	lsls	r2, r2, #3
 80047f2:	4093      	lsls	r3, r2
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80047fa:	4938      	ldr	r1, [pc, #224]	; (80048dc <HAL_GPIO_Init+0x3a8>)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	3318      	adds	r3, #24
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8004808:	4b34      	ldr	r3, [pc, #208]	; (80048dc <HAL_GPIO_Init+0x3a8>)
 800480a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	43db      	mvns	r3, r3
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	4013      	ands	r3, r2
 8004818:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0x2fa>
        {
          tmp |= iocurrent;
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800482e:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <HAL_GPIO_Init+0x3a8>)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        tmp = EXTI->EMR1;
 8004836:	4b29      	ldr	r3, [pc, #164]	; (80048dc <HAL_GPIO_Init+0x3a8>)
 8004838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	43db      	mvns	r3, r3
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	4013      	ands	r3, r2
 8004846:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_GPIO_Init+0x328>
        {
          tmp |= iocurrent;
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800485c:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <HAL_GPIO_Init+0x3a8>)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004864:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <HAL_GPIO_Init+0x3a8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	43db      	mvns	r3, r3
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	4013      	ands	r3, r2
 8004872:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_GPIO_Init+0x354>
        {
          tmp |= iocurrent;
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004888:	4a14      	ldr	r2, [pc, #80]	; (80048dc <HAL_GPIO_Init+0x3a8>)
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800488e:	4b13      	ldr	r3, [pc, #76]	; (80048dc <HAL_GPIO_Init+0x3a8>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	43db      	mvns	r3, r3
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	4013      	ands	r3, r2
 800489c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x37e>
        {
          tmp |= iocurrent;
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80048b2:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <HAL_GPIO_Init+0x3a8>)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	6053      	str	r3, [r2, #4]
      }
    }
    position++;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	3301      	adds	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f47f ae3d 	bne.w	8004548 <HAL_GPIO_Init+0x14>
  }
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	3724      	adds	r7, #36	; 0x24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	46022000 	.word	0x46022000
 80048e0:	002f7f7f 	.word	0x002f7f7f

080048e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	887b      	ldrh	r3, [r7, #2]
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e001      	b.n	8004906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
 8004920:	4613      	mov	r3, r2
 8004922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004924:	787b      	ldrb	r3, [r7, #1]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800492a:	887a      	ldrh	r2, [r7, #2]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004930:	e002      	b.n	8004938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800494e:	4b0f      	ldr	r3, [pc, #60]	; (800498c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800495a:	4a0c      	ldr	r2, [pc, #48]	; (800498c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f814 	bl	8004990 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004968:	4b08      	ldr	r3, [pc, #32]	; (800498c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	4013      	ands	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d006      	beq.n	8004982 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004974:	4a05      	ldr	r2, [pc, #20]	; (800498c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f812 	bl	80049a6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	46022000 	.word	0x46022000

08004990 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	4603      	mov	r3, r0
 80049ae:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80049c4:	4b34      	ldr	r3, [pc, #208]	; (8004a98 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049cc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d101      	bne.n	80049da <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	e057      	b.n	8004a8a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e0:	d90a      	bls.n	80049f8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80049e2:	4b2d      	ldr	r3, [pc, #180]	; (8004a98 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	4a2a      	ldr	r2, [pc, #168]	; (8004a98 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80049f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f4:	60d3      	str	r3, [r2, #12]
 80049f6:	e007      	b.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80049f8:	4b27      	ldr	r3, [pc, #156]	; (8004a98 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a00:	4925      	ldr	r1, [pc, #148]	; (8004a98 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is rised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004a08:	4b24      	ldr	r3, [pc, #144]	; (8004a9c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a24      	ldr	r2, [pc, #144]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	099b      	lsrs	r3, r3, #6
 8004a14:	2232      	movs	r2, #50	; 0x32
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	099b      	lsrs	r3, r3, #6
 8004a22:	3301      	adds	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004a26:	e002      	b.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <HAL_PWREx_ControlVoltageScaling+0x84>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f3      	bne.n	8004a28 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01b      	beq.n	8004a7e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is rised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004a46:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	099b      	lsrs	r3, r3, #6
 8004a52:	2232      	movs	r2, #50	; 0x32
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	099b      	lsrs	r3, r3, #6
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004a64:	e002      	b.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f3      	bne.n	8004a66 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e000      	b.n	8004a8a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	46020800 	.word	0x46020800
 8004a9c:	20000004 	.word	0x20000004
 8004aa0:	10624dd3 	.word	0x10624dd3

08004aa4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <HAL_PWREx_GetVoltageRange+0x18>)
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	46020800 	.word	0x46020800

08004ac0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_PWREx_EnableVddIO2+0x1c>)
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	4a04      	ldr	r2, [pc, #16]	; (8004adc <HAL_PWREx_EnableVddIO2+0x1c>)
 8004aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ace:	6113      	str	r3, [r2, #16]
}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	46020800 	.word	0x46020800

08004ae0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a04      	ldr	r2, [pc, #16]	; (8004afc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	46020800 	.word	0x46020800

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08c      	sub	sp, #48	; 0x30
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f000 be56 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1a:	4b9a      	ldr	r3, [pc, #616]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b24:	4b97      	ldr	r3, [pc, #604]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 816e 	beq.w	8004e18 <HAL_RCC_OscConfig+0x318>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <HAL_RCC_OscConfig+0x52>
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	f040 80e1 	bne.w	8004d0c <HAL_RCC_OscConfig+0x20c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	f040 80dd 	bne.w	8004d0c <HAL_RCC_OscConfig+0x20c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b52:	4b8c      	ldr	r3, [pc, #560]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d006      	beq.n	8004b6c <HAL_RCC_OscConfig+0x6c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f000 be2d 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b70:	4b84      	ldr	r3, [pc, #528]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d004      	beq.n	8004b86 <HAL_RCC_OscConfig+0x86>
 8004b7c:	4b81      	ldr	r3, [pc, #516]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b84:	e005      	b.n	8004b92 <HAL_RCC_OscConfig+0x92>
 8004b86:	4b7f      	ldr	r3, [pc, #508]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d255      	bcs.n	8004c42 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 f8dd 	bl	8005d60 <RCC_SetFlashLatencyFromMSIRange>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f000 be0a 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004bb2:	4b74      	ldr	r3, [pc, #464]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	4a73      	ldr	r2, [pc, #460]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004bb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bbc:	6093      	str	r3, [r2, #8]
 8004bbe:	4b71      	ldr	r3, [pc, #452]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	496e      	ldr	r1, [pc, #440]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004bd8:	d309      	bcc.n	8004bee <HAL_RCC_OscConfig+0xee>
 8004bda:	4b6a      	ldr	r3, [pc, #424]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f023 021f 	bic.w	r2, r3, #31
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4967      	ldr	r1, [pc, #412]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60cb      	str	r3, [r1, #12]
 8004bec:	e07e      	b.n	8004cec <HAL_RCC_OscConfig+0x1ec>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da0a      	bge.n	8004c0c <HAL_RCC_OscConfig+0x10c>
 8004bf6:	4b63      	ldr	r3, [pc, #396]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	015b      	lsls	r3, r3, #5
 8004c04:	495f      	ldr	r1, [pc, #380]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60cb      	str	r3, [r1, #12]
 8004c0a:	e06f      	b.n	8004cec <HAL_RCC_OscConfig+0x1ec>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d30a      	bcc.n	8004c2c <HAL_RCC_OscConfig+0x12c>
 8004c16:	4b5b      	ldr	r3, [pc, #364]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	029b      	lsls	r3, r3, #10
 8004c24:	4957      	ldr	r1, [pc, #348]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60cb      	str	r3, [r1, #12]
 8004c2a:	e05f      	b.n	8004cec <HAL_RCC_OscConfig+0x1ec>
 8004c2c:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	03db      	lsls	r3, r3, #15
 8004c3a:	4952      	ldr	r1, [pc, #328]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60cb      	str	r3, [r1, #12]
 8004c40:	e054      	b.n	8004cec <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004c42:	4b50      	ldr	r3, [pc, #320]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4a4f      	ldr	r2, [pc, #316]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c4c:	6093      	str	r3, [r2, #8]
 8004c4e:	4b4d      	ldr	r3, [pc, #308]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	494a      	ldr	r1, [pc, #296]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004c68:	d309      	bcc.n	8004c7e <HAL_RCC_OscConfig+0x17e>
 8004c6a:	4b46      	ldr	r3, [pc, #280]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f023 021f 	bic.w	r2, r3, #31
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	4943      	ldr	r1, [pc, #268]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60cb      	str	r3, [r1, #12]
 8004c7c:	e028      	b.n	8004cd0 <HAL_RCC_OscConfig+0x1d0>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	da0a      	bge.n	8004c9c <HAL_RCC_OscConfig+0x19c>
 8004c86:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	015b      	lsls	r3, r3, #5
 8004c94:	493b      	ldr	r1, [pc, #236]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60cb      	str	r3, [r1, #12]
 8004c9a:	e019      	b.n	8004cd0 <HAL_RCC_OscConfig+0x1d0>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca4:	d30a      	bcc.n	8004cbc <HAL_RCC_OscConfig+0x1bc>
 8004ca6:	4b37      	ldr	r3, [pc, #220]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	029b      	lsls	r3, r3, #10
 8004cb4:	4933      	ldr	r1, [pc, #204]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60cb      	str	r3, [r1, #12]
 8004cba:	e009      	b.n	8004cd0 <HAL_RCC_OscConfig+0x1d0>
 8004cbc:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	03db      	lsls	r3, r3, #15
 8004cca:	492e      	ldr	r1, [pc, #184]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 f840 	bl	8005d60 <RCC_SetFlashLatencyFromMSIRange>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f000 bd6d 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004cec:	f000 ffe2 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cf0:	4b25      	ldr	r3, [pc, #148]	; (8004d88 <HAL_RCC_OscConfig+0x288>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fa61 	bl	80041bc <HAL_InitTick>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK)
 8004cfe:	7ffb      	ldrb	r3, [r7, #31]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8088 	beq.w	8004e16 <HAL_RCC_OscConfig+0x316>
        {
          return status;
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	f000 bd5d 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d065      	beq.n	8004de0 <HAL_RCC_OscConfig+0x2e0>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004d14:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1a      	ldr	r2, [pc, #104]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d20:	f7ff fa96 	bl	8004250 <HAL_GetTick>
 8004d24:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004d26:	e009      	b.n	8004d3c <HAL_RCC_OscConfig+0x23c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d28:	f7ff fa92 	bl	8004250 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d902      	bls.n	8004d3c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	f000 bd45 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ef      	beq.n	8004d28 <HAL_RCC_OscConfig+0x228>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004d48:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4a0d      	ldr	r2, [pc, #52]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004d4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d52:	6093      	str	r3, [r2, #8]
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	4908      	ldr	r1, [pc, #32]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004d6e:	d30d      	bcc.n	8004d8c <HAL_RCC_OscConfig+0x28c>
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f023 021f 	bic.w	r2, r3, #31
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	4901      	ldr	r1, [pc, #4]	; (8004d84 <HAL_RCC_OscConfig+0x284>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60cb      	str	r3, [r1, #12]
 8004d82:	e049      	b.n	8004e18 <HAL_RCC_OscConfig+0x318>
 8004d84:	46020c00 	.word	0x46020c00
 8004d88:	20000010 	.word	0x20000010
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	da0a      	bge.n	8004daa <HAL_RCC_OscConfig+0x2aa>
 8004d94:	4b97      	ldr	r3, [pc, #604]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	015b      	lsls	r3, r3, #5
 8004da2:	4994      	ldr	r1, [pc, #592]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60cb      	str	r3, [r1, #12]
 8004da8:	e036      	b.n	8004e18 <HAL_RCC_OscConfig+0x318>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d30a      	bcc.n	8004dca <HAL_RCC_OscConfig+0x2ca>
 8004db4:	4b8f      	ldr	r3, [pc, #572]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	029b      	lsls	r3, r3, #10
 8004dc2:	498c      	ldr	r1, [pc, #560]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60cb      	str	r3, [r1, #12]
 8004dc8:	e026      	b.n	8004e18 <HAL_RCC_OscConfig+0x318>
 8004dca:	4b8a      	ldr	r3, [pc, #552]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	03db      	lsls	r3, r3, #15
 8004dd8:	4986      	ldr	r1, [pc, #536]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60cb      	str	r3, [r1, #12]
 8004dde:	e01b      	b.n	8004e18 <HAL_RCC_OscConfig+0x318>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004de0:	4b84      	ldr	r3, [pc, #528]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a83      	ldr	r2, [pc, #524]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004dec:	f7ff fa30 	bl	8004250 <HAL_GetTick>
 8004df0:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004df2:	e009      	b.n	8004e08 <HAL_RCC_OscConfig+0x308>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004df4:	f7ff fa2c 	bl	8004250 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d902      	bls.n	8004e08 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	f000 bcdf 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004e08:	4b7a      	ldr	r3, [pc, #488]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1ef      	bne.n	8004df4 <HAL_RCC_OscConfig+0x2f4>
 8004e14:	e000      	b.n	8004e18 <HAL_RCC_OscConfig+0x318>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 808d 	beq.w	8004f40 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_OscConfig+0x338>
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	d10f      	bne.n	8004e52 <HAL_RCC_OscConfig+0x352>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d10c      	bne.n	8004e52 <HAL_RCC_OscConfig+0x352>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e38:	4b6e      	ldr	r3, [pc, #440]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d07c      	beq.n	8004f3e <HAL_RCC_OscConfig+0x43e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d178      	bne.n	8004f3e <HAL_RCC_OscConfig+0x43e>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f000 bcba 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCC_OscConfig+0x36a>
 8004e5c:	4b65      	ldr	r3, [pc, #404]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a64      	ldr	r2, [pc, #400]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	e03b      	b.n	8004ee2 <HAL_RCC_OscConfig+0x3e2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e72:	d112      	bne.n	8004e9a <HAL_RCC_OscConfig+0x39a>
 8004e74:	4b5f      	ldr	r3, [pc, #380]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a5e      	ldr	r2, [pc, #376]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	4b5c      	ldr	r3, [pc, #368]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a5b      	ldr	r2, [pc, #364]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004e86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b59      	ldr	r3, [pc, #356]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a58      	ldr	r2, [pc, #352]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e023      	b.n	8004ee2 <HAL_RCC_OscConfig+0x3e2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004ea2:	d112      	bne.n	8004eca <HAL_RCC_OscConfig+0x3ca>
 8004ea4:	4b53      	ldr	r3, [pc, #332]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a52      	ldr	r2, [pc, #328]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b50      	ldr	r3, [pc, #320]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a4f      	ldr	r2, [pc, #316]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	4b4d      	ldr	r3, [pc, #308]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a4c      	ldr	r2, [pc, #304]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e00b      	b.n	8004ee2 <HAL_RCC_OscConfig+0x3e2>
 8004eca:	4b4a      	ldr	r3, [pc, #296]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a49      	ldr	r2, [pc, #292]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	4b47      	ldr	r3, [pc, #284]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a46      	ldr	r2, [pc, #280]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d014      	beq.n	8004f14 <HAL_RCC_OscConfig+0x414>
      {
        tickstart = HAL_GetTick();
 8004eea:	f7ff f9b1 	bl	8004250 <HAL_GetTick>
 8004eee:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ef0:	e009      	b.n	8004f06 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef2:	f7ff f9ad 	bl	8004250 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b64      	cmp	r3, #100	; 0x64
 8004efe:	d902      	bls.n	8004f06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	f000 bc60 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f06:	4b3b      	ldr	r3, [pc, #236]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ef      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x3f2>
 8004f12:	e015      	b.n	8004f40 <HAL_RCC_OscConfig+0x440>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004f14:	f7ff f99c 	bl	8004250 <HAL_GetTick>
 8004f18:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f1a:	e009      	b.n	8004f30 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f1c:	f7ff f998 	bl	8004250 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b64      	cmp	r3, #100	; 0x64
 8004f28:	d902      	bls.n	8004f30 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	f000 bc4b 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f30:	4b30      	ldr	r3, [pc, #192]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ef      	bne.n	8004f1c <HAL_RCC_OscConfig+0x41c>
 8004f3c:	e000      	b.n	8004f40 <HAL_RCC_OscConfig+0x440>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d064      	beq.n	8005016 <HAL_RCC_OscConfig+0x516>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d005      	beq.n	8004f5e <HAL_RCC_OscConfig+0x45e>
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	d11a      	bne.n	8004f8e <HAL_RCC_OscConfig+0x48e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d117      	bne.n	8004f8e <HAL_RCC_OscConfig+0x48e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f5e:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d006      	beq.n	8004f78 <HAL_RCC_OscConfig+0x478>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <HAL_RCC_OscConfig+0x478>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f000 bc27 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004f78:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	491b      	ldr	r1, [pc, #108]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f8c:	e043      	b.n	8005016 <HAL_RCC_OscConfig+0x516>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d024      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004f96:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004fa2:	f7ff f955 	bl	8004250 <HAL_GetTick>
 8004fa6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fa8:	e009      	b.n	8004fbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004faa:	f7ff f951 	bl	8004250 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d902      	bls.n	8004fbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	f000 bc04 	b.w	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0ef      	beq.n	8004faa <HAL_RCC_OscConfig+0x4aa>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	4906      	ldr	r1, [pc, #24]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	610b      	str	r3, [r1, #16]
 8004fde:	e01a      	b.n	8005016 <HAL_RCC_OscConfig+0x516>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004fe0:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a03      	ldr	r2, [pc, #12]	; (8004ff4 <HAL_RCC_OscConfig+0x4f4>)
 8004fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004fec:	f7ff f930 	bl	8004250 <HAL_GetTick>
 8004ff0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_OscConfig+0x50a>
 8004ff4:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ff8:	f7ff f92a 	bl	8004250 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x50a>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e3dd      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800500a:	4baf      	ldr	r3, [pc, #700]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80c7 	beq.w	80051b2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005024:	2300      	movs	r3, #0
 8005026:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800502a:	4ba7      	ldr	r3, [pc, #668]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 800502c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d111      	bne.n	800505c <HAL_RCC_OscConfig+0x55c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005038:	4ba3      	ldr	r3, [pc, #652]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 800503a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800503e:	4aa2      	ldr	r2, [pc, #648]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005040:	f043 0304 	orr.w	r3, r3, #4
 8005044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005048:	4b9f      	ldr	r3, [pc, #636]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 800504a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800505c:	4b9b      	ldr	r3, [pc, #620]	; (80052cc <HAL_RCC_OscConfig+0x7cc>)
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d118      	bne.n	800509a <HAL_RCC_OscConfig+0x59a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005068:	4b98      	ldr	r3, [pc, #608]	; (80052cc <HAL_RCC_OscConfig+0x7cc>)
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	4a97      	ldr	r2, [pc, #604]	; (80052cc <HAL_RCC_OscConfig+0x7cc>)
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005074:	f7ff f8ec 	bl	8004250 <HAL_GetTick>
 8005078:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x58e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507c:	f7ff f8e8 	bl	8004250 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e39b      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800508e:	4b8f      	ldr	r3, [pc, #572]	; (80052cc <HAL_RCC_OscConfig+0x7cc>)
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0x57c>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d05f      	beq.n	8005162 <HAL_RCC_OscConfig+0x662>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80050a2:	4b89      	ldr	r3, [pc, #548]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 80050a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050a8:	61bb      	str	r3, [r7, #24]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d037      	beq.n	8005128 <HAL_RCC_OscConfig+0x628>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <HAL_RCC_OscConfig+0x5d0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_OscConfig+0x5d0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e37a      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01b      	beq.n	8005112 <HAL_RCC_OscConfig+0x612>
        {
          __HAL_RCC_LSI_DISABLE();
 80050da:	4b7b      	ldr	r3, [pc, #492]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 80050dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050e0:	4a79      	ldr	r2, [pc, #484]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 80050e2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80050e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80050ea:	f7ff f8b1 	bl	8004250 <HAL_GetTick>
 80050ee:	6238      	str	r0, [r7, #32]

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x604>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f2:	f7ff f8ad 	bl	8004250 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x604>
            {
              return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e360      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005104:	4b70      	ldr	r3, [pc, #448]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800510a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1ef      	bne.n	80050f2 <HAL_RCC_OscConfig+0x5f2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005112:	4b6d      	ldr	r3, [pc, #436]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005118:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	4969      	ldr	r1, [pc, #420]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005128:	4b67      	ldr	r3, [pc, #412]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 800512a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800512e:	4a66      	ldr	r2, [pc, #408]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005134:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005138:	f7ff f88a 	bl	8004250 <HAL_GetTick>
 800513c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x652>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005140:	f7ff f886 	bl	8004250 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x652>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e339      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005152:	4b5d      	ldr	r3, [pc, #372]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ef      	beq.n	8005140 <HAL_RCC_OscConfig+0x640>
 8005160:	e01b      	b.n	800519a <HAL_RCC_OscConfig+0x69a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005162:	4b59      	ldr	r3, [pc, #356]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005168:	4a57      	ldr	r2, [pc, #348]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 800516a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800516e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005172:	f7ff f86d 	bl	8004250 <HAL_GetTick>
 8005176:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x68c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800517a:	f7ff f869 	bl	8004250 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x68c>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e31c      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800518c:	4b4e      	ldr	r3, [pc, #312]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 800518e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1ef      	bne.n	800517a <HAL_RCC_OscConfig+0x67a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800519a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d107      	bne.n	80051b2 <HAL_RCC_OscConfig+0x6b2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a2:	4b49      	ldr	r3, [pc, #292]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 80051a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a8:	4a47      	ldr	r2, [pc, #284]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 80051aa:	f023 0304 	bic.w	r3, r3, #4
 80051ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8111 	beq.w	80053e2 <HAL_RCC_OscConfig+0x8e2>
  {
    FlagStatus pwrclkchanged = RESET;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051c6:	4b40      	ldr	r3, [pc, #256]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 80051c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d111      	bne.n	80051f8 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d4:	4b3c      	ldr	r3, [pc, #240]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 80051d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051da:	4a3b      	ldr	r2, [pc, #236]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 80051dc:	f043 0304 	orr.w	r3, r3, #4
 80051e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80051e4:	4b38      	ldr	r3, [pc, #224]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 80051e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051f8:	4b34      	ldr	r3, [pc, #208]	; (80052cc <HAL_RCC_OscConfig+0x7cc>)
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d118      	bne.n	8005236 <HAL_RCC_OscConfig+0x736>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005204:	4b31      	ldr	r3, [pc, #196]	; (80052cc <HAL_RCC_OscConfig+0x7cc>)
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	4a30      	ldr	r2, [pc, #192]	; (80052cc <HAL_RCC_OscConfig+0x7cc>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005210:	f7ff f81e 	bl	8004250 <HAL_GetTick>
 8005214:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x72a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005218:	f7ff f81a 	bl	8004250 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e2cd      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800522a:	4b28      	ldr	r3, [pc, #160]	; (80052cc <HAL_RCC_OscConfig+0x7cc>)
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x718>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d01f      	beq.n	8005282 <HAL_RCC_OscConfig+0x782>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d010      	beq.n	8005270 <HAL_RCC_OscConfig+0x770>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800524e:	4b1e      	ldr	r3, [pc, #120]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005254:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005256:	f043 0304 	orr.w	r3, r3, #4
 800525a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800525e:	4b1a      	ldr	r3, [pc, #104]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005264:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800526e:	e018      	b.n	80052a2 <HAL_RCC_OscConfig+0x7a2>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005270:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005276:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005280:	e00f      	b.n	80052a2 <HAL_RCC_OscConfig+0x7a2>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005282:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005288:	4a0f      	ldr	r2, [pc, #60]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 800528a:	f023 0301 	bic.w	r3, r3, #1
 800528e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 8005294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005298:	4a0b      	ldr	r2, [pc, #44]	; (80052c8 <HAL_RCC_OscConfig+0x7c8>)
 800529a:	f023 0304 	bic.w	r3, r3, #4
 800529e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d057      	beq.n	800535a <HAL_RCC_OscConfig+0x85a>
    {
      tickstart = HAL_GetTick();
 80052aa:	f7fe ffd1 	bl	8004250 <HAL_GetTick>
 80052ae:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b0:	e00e      	b.n	80052d0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7fe ffcd 	bl	8004250 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d905      	bls.n	80052d0 <HAL_RCC_OscConfig+0x7d0>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e27e      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
 80052c8:	46020c00 	.word	0x46020c00
 80052cc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d0:	4b9c      	ldr	r3, [pc, #624]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80052d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0e9      	beq.n	80052b2 <HAL_RCC_OscConfig+0x7b2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01b      	beq.n	8005322 <HAL_RCC_OscConfig+0x822>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80052ea:	4b96      	ldr	r3, [pc, #600]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80052ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052f0:	4a94      	ldr	r2, [pc, #592]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80052f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80052fa:	e00a      	b.n	8005312 <HAL_RCC_OscConfig+0x812>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fc:	f7fe ffa8 	bl	8004250 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f241 3288 	movw	r2, #5000	; 0x1388
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x812>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e259      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005312:	4b8c      	ldr	r3, [pc, #560]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ed      	beq.n	80052fc <HAL_RCC_OscConfig+0x7fc>
 8005320:	e053      	b.n	80053ca <HAL_RCC_OscConfig+0x8ca>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005322:	4b88      	ldr	r3, [pc, #544]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005328:	4a86      	ldr	r2, [pc, #536]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 800532a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005332:	e00a      	b.n	800534a <HAL_RCC_OscConfig+0x84a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005334:	f7fe ff8c 	bl	8004250 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x84a>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e23d      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800534a:	4b7e      	ldr	r3, [pc, #504]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 800534c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1ed      	bne.n	8005334 <HAL_RCC_OscConfig+0x834>
 8005358:	e037      	b.n	80053ca <HAL_RCC_OscConfig+0x8ca>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800535a:	f7fe ff79 	bl	8004250 <HAL_GetTick>
 800535e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005360:	e00a      	b.n	8005378 <HAL_RCC_OscConfig+0x878>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005362:	f7fe ff75 	bl	8004250 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005370:	4293      	cmp	r3, r2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x878>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e226      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005378:	4b72      	ldr	r3, [pc, #456]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 800537a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ed      	bne.n	8005362 <HAL_RCC_OscConfig+0x862>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005386:	4b6f      	ldr	r3, [pc, #444]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01a      	beq.n	80053ca <HAL_RCC_OscConfig+0x8ca>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005394:	4b6b      	ldr	r3, [pc, #428]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800539a:	4a6a      	ldr	r2, [pc, #424]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 800539c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053a4:	e00a      	b.n	80053bc <HAL_RCC_OscConfig+0x8bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a6:	f7fe ff53 	bl	8004250 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x8bc>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e204      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053bc:	4b61      	ldr	r3, [pc, #388]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80053be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1ed      	bne.n	80053a6 <HAL_RCC_OscConfig+0x8a6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d107      	bne.n	80053e2 <HAL_RCC_OscConfig+0x8e2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d2:	4b5c      	ldr	r3, [pc, #368]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80053d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d8:	4a5a      	ldr	r2, [pc, #360]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80053da:	f023 0304 	bic.w	r3, r3, #4
 80053de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d036      	beq.n	800545c <HAL_RCC_OscConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d019      	beq.n	800542a <HAL_RCC_OscConfig+0x92a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80053f6:	4b53      	ldr	r3, [pc, #332]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80053fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005400:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005402:	f7fe ff25 	bl	8004250 <HAL_GetTick>
 8005406:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x91c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540a:	f7fe ff21 	bl	8004250 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x91c>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e1d4      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800541c:	4b49      	ldr	r3, [pc, #292]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCC_OscConfig+0x90a>
 8005428:	e018      	b.n	800545c <HAL_RCC_OscConfig+0x95c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800542a:	4b46      	ldr	r3, [pc, #280]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a45      	ldr	r2, [pc, #276]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005434:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005436:	f7fe ff0b 	bl	8004250 <HAL_GetTick>
 800543a:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x950>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800543e:	f7fe ff07 	bl	8004250 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x950>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e1ba      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005450:	4b3c      	ldr	r3, [pc, #240]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f0      	bne.n	800543e <HAL_RCC_OscConfig+0x93e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b00      	cmp	r3, #0
 8005466:	d036      	beq.n	80054d6 <HAL_RCC_OscConfig+0x9d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	2b00      	cmp	r3, #0
 800546e:	d019      	beq.n	80054a4 <HAL_RCC_OscConfig+0x9a4>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005470:	4b34      	ldr	r3, [pc, #208]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a33      	ldr	r2, [pc, #204]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800547a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800547c:	f7fe fee8 	bl	8004250 <HAL_GetTick>
 8005480:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x996>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005484:	f7fe fee4 	bl	8004250 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e197      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005496:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x984>
 80054a2:	e018      	b.n	80054d6 <HAL_RCC_OscConfig+0x9d6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80054a4:	4b27      	ldr	r3, [pc, #156]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a26      	ldr	r2, [pc, #152]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80054aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054b0:	f7fe fece 	bl	8004250 <HAL_GetTick>
 80054b4:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x9ca>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80054b8:	f7fe feca 	bl	8004250 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x9ca>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e17d      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80054ca:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f0      	bne.n	80054b8 <HAL_RCC_OscConfig+0x9b8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d07f      	beq.n	80055e2 <HAL_RCC_OscConfig+0xae2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d062      	beq.n	80055b0 <HAL_RCC_OscConfig+0xab0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80054ea:	4b16      	ldr	r3, [pc, #88]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80054f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054f4:	6093      	str	r3, [r2, #8]
 80054f6:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	4910      	ldr	r1, [pc, #64]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005504:	4313      	orrs	r3, r2
 8005506:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005510:	d309      	bcc.n	8005526 <HAL_RCC_OscConfig+0xa26>
 8005512:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f023 021f 	bic.w	r2, r3, #31
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	4909      	ldr	r1, [pc, #36]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005520:	4313      	orrs	r3, r2
 8005522:	60cb      	str	r3, [r1, #12]
 8005524:	e02a      	b.n	800557c <HAL_RCC_OscConfig+0xa7c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	da0c      	bge.n	8005548 <HAL_RCC_OscConfig+0xa48>
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	015b      	lsls	r3, r3, #5
 800553c:	4901      	ldr	r1, [pc, #4]	; (8005544 <HAL_RCC_OscConfig+0xa44>)
 800553e:	4313      	orrs	r3, r2
 8005540:	60cb      	str	r3, [r1, #12]
 8005542:	e01b      	b.n	800557c <HAL_RCC_OscConfig+0xa7c>
 8005544:	46020c00 	.word	0x46020c00
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d30a      	bcc.n	8005568 <HAL_RCC_OscConfig+0xa68>
 8005552:	4b9f      	ldr	r3, [pc, #636]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	029b      	lsls	r3, r3, #10
 8005560:	499b      	ldr	r1, [pc, #620]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005562:	4313      	orrs	r3, r2
 8005564:	60cb      	str	r3, [r1, #12]
 8005566:	e009      	b.n	800557c <HAL_RCC_OscConfig+0xa7c>
 8005568:	4b99      	ldr	r3, [pc, #612]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	03db      	lsls	r3, r3, #15
 8005576:	4996      	ldr	r1, [pc, #600]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005578:	4313      	orrs	r3, r2
 800557a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800557c:	4b94      	ldr	r3, [pc, #592]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a93      	ldr	r2, [pc, #588]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005582:	f043 0310 	orr.w	r3, r3, #16
 8005586:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005588:	f7fe fe62 	bl	8004250 <HAL_GetTick>
 800558c:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0xaa2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005590:	f7fe fe5e 	bl	8004250 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e111      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80055a2:	4b8b      	ldr	r3, [pc, #556]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0xa90>
 80055ae:	e018      	b.n	80055e2 <HAL_RCC_OscConfig+0xae2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80055b0:	4b87      	ldr	r3, [pc, #540]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a86      	ldr	r2, [pc, #536]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80055b6:	f023 0310 	bic.w	r3, r3, #16
 80055ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80055bc:	f7fe fe48 	bl	8004250 <HAL_GetTick>
 80055c0:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0xad6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80055c4:	f7fe fe44 	bl	8004250 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0xad6>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e0f7      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80055d6:	4b7e      	ldr	r3, [pc, #504]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0xac4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80ec 	beq.w	80057c4 <HAL_RCC_OscConfig+0xcc4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055ec:	4b78      	ldr	r3, [pc, #480]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	f003 030c 	and.w	r3, r3, #12
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	f000 80e3 	beq.w	80057c0 <HAL_RCC_OscConfig+0xcc0>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	2b02      	cmp	r3, #2
 8005600:	f040 80be 	bne.w	8005780 <HAL_RCC_OscConfig+0xc80>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005604:	4b72      	ldr	r3, [pc, #456]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a71      	ldr	r2, [pc, #452]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 800560a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800560e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005610:	f7fe fe1e 	bl	8004250 <HAL_GetTick>
 8005614:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0xb2a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005618:	f7fe fe1a 	bl	8004250 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0xb2a>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e0cd      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800562a:	4b69      	ldr	r3, [pc, #420]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0xb18>
          }
        }

        /* Enable PWR CLK */
        __HAL_RCC_PWR_CLK_ENABLE();
 8005636:	4b66      	ldr	r3, [pc, #408]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800563c:	4a64      	ldr	r2, [pc, #400]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 800563e:	f043 0304 	orr.w	r3, r3, #4
 8005642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005646:	4b62      	ldr	r3, [pc, #392]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005654:	4b5f      	ldr	r3, [pc, #380]	; (80057d4 <HAL_RCC_OscConfig+0xcd4>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800565c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005660:	d102      	bne.n	8005668 <HAL_RCC_OscConfig+0xb68>
        {
          pwrboosten = SET;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005668:	4b5a      	ldr	r3, [pc, #360]	; (80057d4 <HAL_RCC_OscConfig+0xcd4>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a59      	ldr	r2, [pc, #356]	; (80057d4 <HAL_RCC_OscConfig+0xcd4>)
 800566e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005672:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005674:	4b56      	ldr	r3, [pc, #344]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567c:	f023 0303 	bic.w	r3, r3, #3
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005688:	3a01      	subs	r2, #1
 800568a:	0212      	lsls	r2, r2, #8
 800568c:	4311      	orrs	r1, r2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005692:	430a      	orrs	r2, r1
 8005694:	494e      	ldr	r1, [pc, #312]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005696:	4313      	orrs	r3, r2
 8005698:	628b      	str	r3, [r1, #40]	; 0x28
 800569a:	4b4d      	ldr	r3, [pc, #308]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 800569c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800569e:	4b4e      	ldr	r3, [pc, #312]	; (80057d8 <HAL_RCC_OscConfig+0xcd8>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056a6:	3a01      	subs	r2, #1
 80056a8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80056b0:	3a01      	subs	r2, #1
 80056b2:	0252      	lsls	r2, r2, #9
 80056b4:	b292      	uxth	r2, r2
 80056b6:	4311      	orrs	r1, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056bc:	3a01      	subs	r2, #1
 80056be:	0412      	lsls	r2, r2, #16
 80056c0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80056c4:	4311      	orrs	r1, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80056ca:	3a01      	subs	r2, #1
 80056cc:	0612      	lsls	r2, r2, #24
 80056ce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80056d2:	430a      	orrs	r2, r1
 80056d4:	493e      	ldr	r1, [pc, #248]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80056da:	4b3d      	ldr	r3, [pc, #244]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	4a3c      	ldr	r2, [pc, #240]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80056e0:	f023 0310 	bic.w	r3, r3, #16
 80056e4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80056e6:	4b3a      	ldr	r3, [pc, #232]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056f6:	00d2      	lsls	r2, r2, #3
 80056f8:	4935      	ldr	r1, [pc, #212]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80056fe:	4b34      	ldr	r3, [pc, #208]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	4a33      	ldr	r2, [pc, #204]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005704:	f043 0310 	orr.w	r3, r3, #16
 8005708:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	f023 020c 	bic.w	r2, r3, #12
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	492e      	ldr	r1, [pc, #184]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005718:	4313      	orrs	r3, r2
 800571a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800571c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005720:	2b01      	cmp	r3, #1
 8005722:	d105      	bne.n	8005730 <HAL_RCC_OscConfig+0xc30>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005724:	4b2b      	ldr	r3, [pc, #172]	; (80057d4 <HAL_RCC_OscConfig+0xcd4>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	4a2a      	ldr	r2, [pc, #168]	; (80057d4 <HAL_RCC_OscConfig+0xcd4>)
 800572a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800572e:	60d3      	str	r3, [r2, #12]
        }

        /*Disable PWR clk */
        __HAL_RCC_PWR_CLK_DISABLE();
 8005730:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005736:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005738:	f023 0304 	bic.w	r3, r3, #4
 800573c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005740:	4b23      	ldr	r3, [pc, #140]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800574a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800574c:	4b20      	ldr	r3, [pc, #128]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1f      	ldr	r2, [pc, #124]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005756:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005758:	f7fe fd7a 	bl	8004250 <HAL_GetTick>
 800575c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0xc72>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005760:	f7fe fd76 	bl	8004250 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0xc72>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e029      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005772:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0xc60>
 800577e:	e021      	b.n	80057c4 <HAL_RCC_OscConfig+0xcc4>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005780:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a12      	ldr	r2, [pc, #72]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800578a:	6013      	str	r3, [r2, #0]

        /* Disable main PLL outputs to save power if no PLLs on */
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
 800578c:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	4a0f      	ldr	r2, [pc, #60]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 8005792:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005796:	6293      	str	r3, [r2, #40]	; 0x28

        tickstart = HAL_GetTick();
 8005798:	f7fe fd5a 	bl	8004250 <HAL_GetTick>
 800579c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0xcb2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fe fd56 	bl	8004250 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0xcb2>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e009      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80057b2:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <HAL_RCC_OscConfig+0xcd0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0xca0>
 80057be:	e001      	b.n	80057c4 <HAL_RCC_OscConfig+0xcc4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <HAL_RCC_OscConfig+0xcc6>
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3730      	adds	r7, #48	; 0x30
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	46020c00 	.word	0x46020c00
 80057d4:	46020800 	.word	0x46020800
 80057d8:	80800000 	.word	0x80800000

080057dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e14c      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057f0:	4b98      	ldr	r3, [pc, #608]	; (8005a54 <HAL_RCC_ClockConfig+0x278>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d910      	bls.n	8005820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fe:	4b95      	ldr	r3, [pc, #596]	; (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f023 020f 	bic.w	r2, r3, #15
 8005806:	4993      	ldr	r1, [pc, #588]	; (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	4313      	orrs	r3, r2
 800580c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580e:	4b91      	ldr	r3, [pc, #580]	; (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d001      	beq.n	8005820 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e134      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 80be 	beq.w	80059aa <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d137      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005836:	4b88      	ldr	r3, [pc, #544]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 8005838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800583c:	4a86      	ldr	r2, [pc, #536]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 800583e:	f043 0304 	orr.w	r3, r3, #4
 8005842:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005846:	4b84      	ldr	r3, [pc, #528]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 8005848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	68fb      	ldr	r3, [r7, #12]
      tickstart = HAL_GetTick();
 8005854:	f7fe fcfc 	bl	8004250 <HAL_GetTick>
 8005858:	6178      	str	r0, [r7, #20]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800585a:	4b80      	ldr	r3, [pc, #512]	; (8005a5c <HAL_RCC_ClockConfig+0x280>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00f      	beq.n	8005886 <HAL_RCC_ClockConfig+0xaa>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_ClockConfig+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005868:	f7fe fcf2 	bl	8004250 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_ClockConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e107      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800587a:	4b78      	ldr	r3, [pc, #480]	; (8005a5c <HAL_RCC_ClockConfig+0x280>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCC_ClockConfig+0x8c>
          }
        }
      }

      __HAL_RCC_PWR_CLK_DISABLE();
 8005886:	4b74      	ldr	r3, [pc, #464]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 8005888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588c:	4a72      	ldr	r2, [pc, #456]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 800588e:	f023 0304 	bic.w	r3, r3, #4
 8005892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005896:	4b70      	ldr	r3, [pc, #448]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d121      	bne.n	80058e6 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0f1      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xe2>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ae:	4b6a      	ldr	r3, [pc, #424]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d115      	bne.n	80058e6 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0e5      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d107      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xfa>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80058c6:	4b64      	ldr	r3, [pc, #400]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e0d9      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058d6:	4b60      	ldr	r3, [pc, #384]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e0d1      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80058e6:	4b5c      	ldr	r3, [pc, #368]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f023 0203 	bic.w	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4959      	ldr	r1, [pc, #356]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80058f8:	f7fe fcaa 	bl	8004250 <HAL_GetTick>
 80058fc:	6178      	str	r0, [r7, #20]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d112      	bne.n	800592c <HAL_RCC_ClockConfig+0x150>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005906:	e00a      	b.n	800591e <HAL_RCC_ClockConfig+0x142>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005908:	f7fe fca2 	bl	8004250 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	; 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e0b5      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800591e:	4b4e      	ldr	r3, [pc, #312]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b0c      	cmp	r3, #12
 8005928:	d1ee      	bne.n	8005908 <HAL_RCC_ClockConfig+0x12c>
 800592a:	e03e      	b.n	80059aa <HAL_RCC_ClockConfig+0x1ce>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d112      	bne.n	800595a <HAL_RCC_ClockConfig+0x17e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005934:	e00a      	b.n	800594c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005936:	f7fe fc8b 	bl	8004250 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	f241 3288 	movw	r2, #5000	; 0x1388
 8005944:	4293      	cmp	r3, r2
 8005946:	d901      	bls.n	800594c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e09e      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800594c:	4b42      	ldr	r3, [pc, #264]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f003 030c 	and.w	r3, r3, #12
 8005954:	2b08      	cmp	r3, #8
 8005956:	d1ee      	bne.n	8005936 <HAL_RCC_ClockConfig+0x15a>
 8005958:	e027      	b.n	80059aa <HAL_RCC_ClockConfig+0x1ce>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d11d      	bne.n	800599e <HAL_RCC_ClockConfig+0x1c2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005962:	e00a      	b.n	800597a <HAL_RCC_ClockConfig+0x19e>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005964:	f7fe fc74 	bl	8004250 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCC_ClockConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e087      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800597a:	4b37      	ldr	r3, [pc, #220]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f003 030c 	and.w	r3, r3, #12
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1ee      	bne.n	8005964 <HAL_RCC_ClockConfig+0x188>
 8005986:	e010      	b.n	80059aa <HAL_RCC_ClockConfig+0x1ce>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fe fc62 	bl	8004250 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	; 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e075      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800599e:	4b2e      	ldr	r3, [pc, #184]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f003 030c 	and.w	r3, r3, #12
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d1ee      	bne.n	8005988 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80059b6:	4b28      	ldr	r3, [pc, #160]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f023 020f 	bic.w	r2, r3, #15
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	4925      	ldr	r1, [pc, #148]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80059d4:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	491d      	ldr	r1, [pc, #116]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80059f2:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	4915      	ldr	r1, [pc, #84]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d008      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x248>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005a12:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	490e      	ldr	r1, [pc, #56]	; (8005a58 <HAL_RCC_ClockConfig+0x27c>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	624b      	str	r3, [r1, #36]	; 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d216      	bcs.n	8005a60 <HAL_RCC_ClockConfig+0x284>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a32:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 020f 	bic.w	r2, r3, #15
 8005a3a:	4906      	ldr	r1, [pc, #24]	; (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a42:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <HAL_RCC_ClockConfig+0x278>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d007      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x284>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e01a      	b.n	8005a8a <HAL_RCC_ClockConfig+0x2ae>
 8005a54:	40022000 	.word	0x40022000
 8005a58:	46020c00 	.word	0x46020c00
 8005a5c:	46020800 	.word	0x46020800
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005a60:	f000 f820 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RCC_ClockConfig+0x2b8>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	490a      	ldr	r1, [pc, #40]	; (8005a98 <HAL_RCC_ClockConfig+0x2bc>)
 8005a70:	5ccb      	ldrb	r3, [r1, r3]
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <HAL_RCC_ClockConfig+0x2c0>)
 8005a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a7a:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCC_ClockConfig+0x2c4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fb9c 	bl	80041bc <HAL_InitTick>
 8005a84:	4603      	mov	r3, r0
 8005a86:	74fb      	strb	r3, [r7, #19]

  return status;
 8005a88:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	46020c00 	.word	0x46020c00
 8005a98:	0800d640 	.word	0x0800d640
 8005a9c:	20000004 	.word	0x20000004
 8005aa0:	20000010 	.word	0x20000010

08005aa4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b08b      	sub	sp, #44	; 0x2c
 8005aa8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ab2:	4b7b      	ldr	r3, [pc, #492]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005abc:	4b78      	ldr	r3, [pc, #480]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b0c      	cmp	r3, #12
 8005ad0:	d121      	bne.n	8005b16 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d11e      	bne.n	8005b16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005ad8:	4b71      	ldr	r3, [pc, #452]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d107      	bne.n	8005af4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005ae4:	4b6e      	ldr	r3, [pc, #440]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aea:	0b1b      	lsrs	r3, r3, #12
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
 8005af2:	e005      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005af4:	4b6a      	ldr	r3, [pc, #424]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	0f1b      	lsrs	r3, r3, #28
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b00:	4a68      	ldr	r2, [pc, #416]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d110      	bne.n	8005b32 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b14:	e00d      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b16:	4b62      	ldr	r3, [pc, #392]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d102      	bne.n	8005b28 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b22:	4b61      	ldr	r3, [pc, #388]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	e004      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d101      	bne.n	8005b32 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b2e:	4b5e      	ldr	r3, [pc, #376]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b30:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2b0c      	cmp	r3, #12
 8005b36:	f040 80ac 	bne.w	8005c92 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b3a:	4b59      	ldr	r3, [pc, #356]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005b44:	4b56      	ldr	r3, [pc, #344]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005b52:	4b53      	ldr	r3, [pc, #332]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	091b      	lsrs	r3, r3, #4
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b5e:	4b50      	ldr	r3, [pc, #320]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	08db      	lsrs	r3, r3, #3
 8005b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8086 	beq.w	8005c8e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d003      	beq.n	8005b90 <HAL_RCC_GetSysClockFreq+0xec>
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d022      	beq.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x130>
 8005b8e:	e043      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9a:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005cac <HAL_RCC_GetSysClockFreq+0x208>
 8005b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba2:	4b3f      	ldr	r3, [pc, #252]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bb2:	ed97 6a01 	vldr	s12, [r7, #4]
 8005bb6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x20c>
 8005bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bce:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005bd2:	e046      	b.n	8005c62 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005cac <HAL_RCC_GetSysClockFreq+0x208>
 8005be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be6:	4b2e      	ldr	r3, [pc, #184]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bf6:	ed97 6a01 	vldr	s12, [r7, #4]
 8005bfa:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x20c>
 8005bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c12:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005c16:	e024      	b.n	8005c62 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c30:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c40:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c44:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x20c>
 8005c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005c60:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005c62:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c66:	0e1b      	lsrs	r3, r3, #24
 8005c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c86:	ee17 3a90 	vmov	r3, s15
 8005c8a:	623b      	str	r3, [r7, #32]
 8005c8c:	e001      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005c92:	6a3b      	ldr	r3, [r7, #32]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	372c      	adds	r7, #44	; 0x2c
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	46020c00 	.word	0x46020c00
 8005ca4:	0800d658 	.word	0x0800d658
 8005ca8:	00f42400 	.word	0x00f42400
 8005cac:	4b742400 	.word	0x4b742400
 8005cb0:	46000000 	.word	0x46000000

08005cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005cb8:	f7ff fef4 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <HAL_RCC_GetHCLKFreq+0x28>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	4906      	ldr	r1, [pc, #24]	; (8005ce0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005cc8:	5ccb      	ldrb	r3, [r1, r3]
 8005cca:	fa22 f303 	lsr.w	r3, r2, r3
 8005cce:	4a05      	ldr	r2, [pc, #20]	; (8005ce4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005cd0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005cd2:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	46020c00 	.word	0x46020c00
 8005ce0:	0800d640 	.word	0x0800d640
 8005ce4:	20000004 	.word	0x20000004

08005ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005cec:	f7ff ffe2 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	091b      	lsrs	r3, r3, #4
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	4903      	ldr	r1, [pc, #12]	; (8005d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cfe:	5ccb      	ldrb	r3, [r1, r3]
 8005d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	46020c00 	.word	0x46020c00
 8005d0c:	0800d650 	.word	0x0800d650

08005d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005d14:	f7ff ffce 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	0a1b      	lsrs	r3, r3, #8
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	4903      	ldr	r1, [pc, #12]	; (8005d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d26:	5ccb      	ldrb	r3, [r1, r3]
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	46020c00 	.word	0x46020c00
 8005d34:	0800d650 	.word	0x0800d650

08005d38 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005d3c:	f7ff ffba 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 8005d40:	4602      	mov	r2, r0
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	091b      	lsrs	r3, r3, #4
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	4903      	ldr	r1, [pc, #12]	; (8005d5c <HAL_RCC_GetPCLK3Freq+0x24>)
 8005d4e:	5ccb      	ldrb	r3, [r1, r3]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	46020c00 	.word	0x46020c00
 8005d5c:	0800d650 	.word	0x0800d650

08005d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d68:	4b3e      	ldr	r3, [pc, #248]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d76:	f7fe fe95 	bl	8004aa4 <HAL_PWREx_GetVoltageRange>
 8005d7a:	6178      	str	r0, [r7, #20]
 8005d7c:	e019      	b.n	8005db2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d7e:	4b39      	ldr	r3, [pc, #228]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d84:	4a37      	ldr	r2, [pc, #220]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d86:	f043 0304 	orr.w	r3, r3, #4
 8005d8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005d8e:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d9c:	f7fe fe82 	bl	8004aa4 <HAL_PWREx_GetVoltageRange>
 8005da0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005da2:	4b30      	ldr	r3, [pc, #192]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da8:	4a2e      	ldr	r2, [pc, #184]	; (8005e64 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005daa:	f023 0304 	bic.w	r3, r3, #4
 8005dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005db8:	d003      	beq.n	8005dc2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dc0:	d109      	bne.n	8005dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc8:	d202      	bcs.n	8005dd0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005dca:	2301      	movs	r3, #1
 8005dcc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005dce:	e033      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005dd4:	e030      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ddc:	d208      	bcs.n	8005df0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de4:	d102      	bne.n	8005dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005de6:	2303      	movs	r3, #3
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	e025      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e035      	b.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df6:	d90f      	bls.n	8005e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>

      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d109      	bne.n	8005e12 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e04:	d902      	bls.n	8005e0c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	e015      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e012      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	e00f      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e1e:	d109      	bne.n	8005e34 <RCC_SetFlashLatencyFromMSIRange+0xd4>

        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e26:	d102      	bne.n	8005e2e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005e28:	2301      	movs	r3, #1
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	e004      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005e2e:	2302      	movs	r3, #2
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	e001      	b.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005e34:	2301      	movs	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f023 020f 	bic.w	r2, r3, #15
 8005e40:	4909      	ldr	r1, [pc, #36]	; (8005e68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d001      	beq.n	8005e5a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	46020c00 	.word	0x46020c00
 8005e68:	40022000 	.word	0x40022000

08005e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e74:	2300      	movs	r3, #0
 8005e76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e78:	2300      	movs	r3, #0
 8005e7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005e88:	4ba7      	ldr	r3, [pc, #668]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e8e:	f023 0203 	bic.w	r2, r3, #3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e96:	49a4      	ldr	r1, [pc, #656]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005eaa:	4b9f      	ldr	r3, [pc, #636]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eb0:	f023 020c 	bic.w	r2, r3, #12
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	499b      	ldr	r1, [pc, #620]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005ecc:	4b96      	ldr	r3, [pc, #600]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ed2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eda:	4993      	ldr	r1, [pc, #588]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005eee:	4b8e      	ldr	r3, [pc, #568]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ef4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efc:	498a      	ldr	r1, [pc, #552]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005f10:	4b85      	ldr	r3, [pc, #532]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1e:	4982      	ldr	r1, [pc, #520]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005f32:	4b7d      	ldr	r3, [pc, #500]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f38:	f023 0207 	bic.w	r2, r3, #7
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f40:	4979      	ldr	r1, [pc, #484]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005f54:	4b74      	ldr	r3, [pc, #464]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f62:	4971      	ldr	r1, [pc, #452]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005f76:	4b6c      	ldr	r3, [pc, #432]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f84:	4968      	ldr	r1, [pc, #416]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005f98:	4b63      	ldr	r3, [pc, #396]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa6:	4960      	ldr	r1, [pc, #384]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005fba:	4b5b      	ldr	r3, [pc, #364]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	4957      	ldr	r1, [pc, #348]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005fdc:	4b52      	ldr	r3, [pc, #328]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fea:	494f      	ldr	r1, [pc, #316]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005ffe:	4b4a      	ldr	r3, [pc, #296]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006004:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800600c:	4946      	ldr	r1, [pc, #280]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006020:	4b41      	ldr	r3, [pc, #260]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800602e:	493e      	ldr	r1, [pc, #248]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006030:	4313      	orrs	r3, r2
 8006032:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d042      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d028      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d823      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006050:	2b60      	cmp	r3, #96	; 0x60
 8006052:	d026      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8006054:	2b60      	cmp	r3, #96	; 0x60
 8006056:	d81f      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d006      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d81b      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d009      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d00f      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006068:	e016      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	4a2e      	ldr	r2, [pc, #184]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006074:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006076:	e015      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	4618      	mov	r0, r3
 800607e:	f002 f865 	bl	800814c <RCCEx_PLL2_Config>
 8006082:	4603      	mov	r3, r0
 8006084:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006086:	e00d      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3328      	adds	r3, #40	; 0x28
 800608c:	4618      	mov	r0, r3
 800608e:	f002 f8f5 	bl	800827c <RCCEx_PLL3_Config>
 8006092:	4603      	mov	r3, r0
 8006094:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006096:	e005      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	74fb      	strb	r3, [r7, #19]
        break;
 800609c:	e002      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 80060a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a4:	7cfb      	ldrb	r3, [r7, #19]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10c      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80060aa:	4b1f      	ldr	r3, [pc, #124]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060b0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ba:	491b      	ldr	r1, [pc, #108]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80060c2:	e001      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	7cfb      	ldrb	r3, [r7, #19]
 80060c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d04b      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060de:	d030      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80060e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e4:	d82a      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80060e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ea:	d02c      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80060ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f0:	d824      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80060f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f6:	d008      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80060f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fc:	d81e      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006106:	d011      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006108:	e018      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800610a:	4b07      	ldr	r3, [pc, #28]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	4a06      	ldr	r2, [pc, #24]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006114:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006116:	e017      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2dc>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3304      	adds	r3, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f002 f815 	bl	800814c <RCCEx_PLL2_Config>
 8006122:	4603      	mov	r3, r0
 8006124:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006126:	e00f      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006128:	46020c00 	.word	0x46020c00

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3328      	adds	r3, #40	; 0x28
 8006130:	4618      	mov	r0, r3
 8006132:	f002 f8a3 	bl	800827c <RCCEx_PLL3_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800613a:	e005      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	74fb      	strb	r3, [r7, #19]
        break;
 8006140:	e002      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
        break;
 8006142:	bf00      	nop
 8006144:	e000      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
        break;
 8006146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006148:	7cfb      	ldrb	r3, [r7, #19]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10c      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800614e:	4bab      	ldr	r3, [pc, #684]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8006150:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615e:	49a7      	ldr	r1, [pc, #668]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006166:	e001      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x300>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	7cfb      	ldrb	r3, [r7, #19]
 800616a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d03e      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800617e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006182:	d025      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8006184:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006188:	d81f      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800618a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618e:	d01f      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8006190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006194:	d819      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006196:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800619a:	d019      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800619c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061a0:	d813      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80061a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a6:	d008      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80061a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ac:	d80d      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00e      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d00b      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80061b8:	e007      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 ffc4 	bl	800814c <RCCEx_PLL2_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	74fb      	strb	r3, [r7, #19]
        break;
 80061c8:	e003      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	74fb      	strb	r3, [r7, #19]
        break;
 80061ce:	e000      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
        break;
 80061d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d2:	7cfb      	ldrb	r3, [r7, #19]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10c      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80061d8:	4b88      	ldr	r3, [pc, #544]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80061da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061e8:	4984      	ldr	r1, [pc, #528]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80061f0:	e001      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f2:	7cfb      	ldrb	r3, [r7, #19]
 80061f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d037      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006208:	2b04      	cmp	r3, #4
 800620a:	d81c      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	0800624d 	.word	0x0800624d
 8006218:	08006229 	.word	0x08006229
 800621c:	08006237 	.word	0x08006237
 8006220:	0800624d 	.word	0x0800624d
 8006224:	0800624d 	.word	0x0800624d
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006228:	4b74      	ldr	r3, [pc, #464]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	4a73      	ldr	r2, [pc, #460]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800622e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006232:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006234:	e00b      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3328      	adds	r3, #40	; 0x28
 800623a:	4618      	mov	r0, r3
 800623c:	f002 f81e 	bl	800827c <RCCEx_PLL3_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	74fb      	strb	r3, [r7, #19]
        break;
 8006244:	e003      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	74fb      	strb	r3, [r7, #19]
        break;
 800624a:	e000      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        break;
 800624c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624e:	7cfb      	ldrb	r3, [r7, #19]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10c      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x402>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006254:	4b69      	ldr	r3, [pc, #420]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8006256:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800625a:	f023 0207 	bic.w	r2, r3, #7
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006264:	4965      	ldr	r1, [pc, #404]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800626c:	e001      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x406>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626e:	7cfb      	ldrb	r3, [r7, #19]
 8006270:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d042      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x498>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));

    switch (pPeriphClkInit->Adf1ClockSelection)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006288:	d025      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800628a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800628e:	d81f      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006290:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006294:	d021      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8006296:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800629a:	d819      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800629c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062a0:	d00e      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
 80062a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062a6:	d813      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d018      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x472>
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b0:	d10e      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062b2:	4b52      	ldr	r3, [pc, #328]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	4a51      	ldr	r2, [pc, #324]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80062b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062bc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80062be:	e00f      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3328      	adds	r3, #40	; 0x28
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 ffd9 	bl	800827c <RCCEx_PLL3_Config>
 80062ca:	4603      	mov	r3, r0
 80062cc:	74fb      	strb	r3, [r7, #19]
        break;
 80062ce:	e007      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	74fb      	strb	r3, [r7, #19]
        break;
 80062d4:	e004      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 80062de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e0:	7cfb      	ldrb	r3, [r7, #19]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10c      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80062e6:	4b45      	ldr	r3, [pc, #276]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80062e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062ec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	4941      	ldr	r1, [pc, #260]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80062fe:	e001      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x498>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80a0 	beq.w	8006452 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006312:	2300      	movs	r3, #0
 8006314:	747b      	strb	r3, [r7, #17]
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006316:	4b39      	ldr	r3, [pc, #228]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8006318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d110      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x4da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006324:	4b35      	ldr	r3, [pc, #212]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8006326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800632a:	4a34      	ldr	r2, [pc, #208]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 800632c:	f043 0304 	orr.w	r3, r3, #4
 8006330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006334:	4b31      	ldr	r3, [pc, #196]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8006336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006342:	2301      	movs	r3, #1
 8006344:	747b      	strb	r3, [r7, #17]
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006346:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x594>)
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	4a2d      	ldr	r2, [pc, #180]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x594>)
 800634c:	f043 0301 	orr.w	r3, r3, #1
 8006350:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006352:	f7fd ff7d 	bl	8004250 <HAL_GetTick>
 8006356:	60f8      	str	r0, [r7, #12]

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006358:	e009      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800635a:	f7fd ff79 	bl	8004250 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d902      	bls.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        ret = HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	74fb      	strb	r3, [r7, #19]
        break;
 800636c:	e005      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x50e>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800636e:	4b24      	ldr	r3, [pc, #144]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x594>)
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0ef      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      }
    }

    if (ret == HAL_OK)
 800637a:	7cfb      	ldrb	r3, [r7, #19]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d15b      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006380:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8006382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638a:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d01f      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	429a      	cmp	r2, r3
 800639c:	d019      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800639e:	4b17      	ldr	r3, [pc, #92]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80063a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063aa:	4b14      	ldr	r3, [pc, #80]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80063ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063b0:	4a12      	ldr	r2, [pc, #72]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80063b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063ba:	4b10      	ldr	r3, [pc, #64]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80063bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063c0:	4a0e      	ldr	r2, [pc, #56]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80063c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063ca:	4a0c      	ldr	r2, [pc, #48]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063dc:	f7fd ff38 	bl	8004250 <HAL_GetTick>
 80063e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063e2:	e00f      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x598>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e4:	f7fd ff34 	bl	8004250 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d906      	bls.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x598>
          {
            ret = HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	74fb      	strb	r3, [r7, #19]
            break;
 80063fa:	e00a      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80063fc:	46020c00 	.word	0x46020c00
 8006400:	46020800 	.word	0x46020800
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006404:	4ba5      	ldr	r3, [pc, #660]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0e8      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x578>
          }
        }
      }

      if (ret == HAL_OK)
 8006412:	7cfb      	ldrb	r3, [r7, #19]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10c      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006418:	4ba0      	ldr	r3, [pc, #640]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800641a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800641e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006428:	499c      	ldr	r1, [pc, #624]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
 8006430:	e004      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006432:	7cfb      	ldrb	r3, [r7, #19]
 8006434:	74bb      	strb	r3, [r7, #18]
 8006436:	e001      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	7cfb      	ldrb	r3, [r7, #19]
 800643a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800643c:	7c7b      	ldrb	r3, [r7, #17]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d107      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006442:	4b96      	ldr	r3, [pc, #600]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006448:	4a94      	ldr	r2, [pc, #592]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800644a:	f023 0304 	bic.w	r3, r3, #4
 800644e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d03a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x668>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(pPeriphClkInit->Clk48ClockSelection));

    switch (pPeriphClkInit->Clk48ClockSelection)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006464:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006468:	d01f      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x63e>
 800646a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800646e:	d819      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8006470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006474:	d00f      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8006476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800647a:	d813      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d016      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006484:	d10e      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      case RCC_CLK48CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3304      	adds	r3, #4
 800648a:	4618      	mov	r0, r3
 800648c:	f001 fe5e 	bl	800814c <RCCEx_PLL2_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	74fb      	strb	r3, [r7, #19]
        break;
 8006494:	e00c      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_PLL1:
        /* Enable CLK48 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006496:	4b81      	ldr	r3, [pc, #516]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	4a80      	ldr	r2, [pc, #512]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800649c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80064a2:	e005      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_HSI48:
        break;
      case RCC_CLK48CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	74fb      	strb	r3, [r7, #19]
        break;
 80064a8:	e002      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 80064ae:	bf00      	nop
    }
    if (ret == HAL_OK)
 80064b0:	7cfb      	ldrb	r3, [r7, #19]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10c      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->Clk48ClockSelection);
 80064b6:	4b79      	ldr	r3, [pc, #484]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80064b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064c6:	4975      	ldr	r1, [pc, #468]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80064ce:	e001      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x668>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d027      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ea:	d00a      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x696>
 80064ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f0:	d804      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x690>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d007      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 80064f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fa:	d006      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	74fb      	strb	r3, [r7, #19]
        break;
 8006500:	e004      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 8006502:	bf00      	nop
 8006504:	e002      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 8006506:	bf00      	nop
 8006508:	e000      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 800650a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650c:	7cfb      	ldrb	r3, [r7, #19]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10c      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006512:	4b62      	ldr	r3, [pc, #392]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006514:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006518:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006522:	495e      	ldr	r1, [pc, #376]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800652a:	e001      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	7cfb      	ldrb	r3, [r7, #19]
 800652e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800653c:	4b57      	ldr	r3, [pc, #348]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800653e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006542:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800654c:	4953      	ldr	r1, [pc, #332]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d017      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800656a:	d105      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800656c:	4b4b      	ldr	r3, [pc, #300]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	4a4a      	ldr	r2, [pc, #296]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006576:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006578:	4b48      	ldr	r3, [pc, #288]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800657a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800657e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006588:	4944      	ldr	r1, [pc, #272]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800659c:	4b3f      	ldr	r3, [pc, #252]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800659e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065ac:	493b      	ldr	r1, [pc, #236]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80065c0:	4b36      	ldr	r3, [pc, #216]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80065c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065d0:	4932      	ldr	r1, [pc, #200]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80065e4:	4b2d      	ldr	r3, [pc, #180]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80065e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065ea:	f023 0218 	bic.w	r2, r3, #24
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80065f4:	4929      	ldr	r1, [pc, #164]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d023      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800660e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006612:	d105      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006614:	4b21      	ldr	r3, [pc, #132]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	4a20      	ldr	r2, [pc, #128]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800661a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800661e:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006626:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800662a:	d105      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    {
      /* Enable PLL2 Q CLK output */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800662c:	4b1b      	ldr	r3, [pc, #108]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	4a1a      	ldr	r2, [pc, #104]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8006632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006636:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006638:	4b18      	ldr	r3, [pc, #96]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800663a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800663e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006648:	4914      	ldr	r1, [pc, #80]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d034      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x85a>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006666:	d00e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800666c:	d813      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d016      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8006672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006676:	d10e      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	4a07      	ldr	r2, [pc, #28]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800667e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006682:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006684:	e00d      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x836>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	4618      	mov	r0, r3
 800668c:	f001 fd5e 	bl	800814c <RCCEx_PLL2_Config>
 8006690:	4603      	mov	r3, r0
 8006692:	74fb      	strb	r3, [r7, #19]
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006694:	e005      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x836>
      default:
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	74fb      	strb	r3, [r7, #19]
        break;
 800669a:	e002      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 800669c:	46020c00 	.word	0x46020c00
        break;
 80066a0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80066a2:	7cfb      	ldrb	r3, [r7, #19]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10c      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80066a8:	4b12      	ldr	r3, [pc, #72]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80066aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b8:	490e      	ldr	r1, [pc, #56]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80066c0:	e001      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c2:	7cfb      	ldrb	r3, [r7, #19]
 80066c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x87e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80066d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066d8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066e2:	4904      	ldr	r1, [pc, #16]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  return status;
 80066ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	46020c00 	.word	0x46020c00

080066f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	; 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006700:	4bac      	ldr	r3, [pc, #688]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006708:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800670a:	4baa      	ldr	r3, [pc, #680]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006714:	4ba7      	ldr	r3, [pc, #668]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	3301      	adds	r3, #1
 8006720:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006722:	4ba4      	ldr	r3, [pc, #656]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800672c:	4ba1      	ldr	r3, [pc, #644]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	08db      	lsrs	r3, r3, #3
 8006732:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	ee07 3a90 	vmov	s15, r3
 8006740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006744:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8123 	beq.w	8006996 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b03      	cmp	r3, #3
 8006754:	d062      	beq.n	800681c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b03      	cmp	r3, #3
 800675a:	f200 8081 	bhi.w	8006860 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d024      	beq.n	80067ae <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d17a      	bne.n	8006860 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	ee07 3a90 	vmov	s15, r3
 8006770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006774:	eddf 6a90 	vldr	s13, [pc, #576]	; 80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800677c:	4b8d      	ldr	r3, [pc, #564]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800677e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800678c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006790:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80069bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006794:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006798:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800679c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80067a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067ac:	e08f      	b.n	80068ce <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80067ae:	4b81      	ldr	r3, [pc, #516]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 80067ba:	4b7e      	ldr	r3, [pc, #504]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	0f1b      	lsrs	r3, r3, #28
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	e006      	b.n	80067d4 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 80067c6:	4b7b      	ldr	r3, [pc, #492]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80067c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067cc:	041b      	lsls	r3, r3, #16
 80067ce:	0f1b      	lsrs	r3, r3, #28
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	4a7a      	ldr	r2, [pc, #488]	; (80069c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80067d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	ee07 3a90 	vmov	s15, r3
 80067e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80067fe:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80069bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800681a:	e058      	b.n	80068ce <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006826:	eddf 6a64 	vldr	s13, [pc, #400]	; 80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800682a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800682e:	4b61      	ldr	r3, [pc, #388]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800683e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006842:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80069bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006846:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800684a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800684e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006852:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800685e:	e036      	b.n	80068ce <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006860:	4b54      	ldr	r3, [pc, #336]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800686c:	4b51      	ldr	r3, [pc, #324]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	0f1b      	lsrs	r3, r3, #28
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	e006      	b.n	8006886 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006878:	4b4e      	ldr	r3, [pc, #312]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800687a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800687e:	041b      	lsls	r3, r3, #16
 8006880:	0f1b      	lsrs	r3, r3, #28
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	4a4e      	ldr	r2, [pc, #312]	; (80069c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688c:	ee07 3a90 	vmov	s15, r3
 8006890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	ee07 3a90 	vmov	s15, r3
 80068a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80068b0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80069bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80068b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80068c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068cc:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80068ce:	4b39      	ldr	r3, [pc, #228]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d017      	beq.n	800690a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80068da:	4b36      	ldr	r3, [pc, #216]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068de:	0a5b      	lsrs	r3, r3, #9
 80068e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80068ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068f0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80068f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006900:	ee17 2a90 	vmov	r2, s15
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	e002      	b.n	8006910 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006910:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d017      	beq.n	800694c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800691c:	4b25      	ldr	r3, [pc, #148]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800691e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006920:	0c1b      	lsrs	r3, r3, #16
 8006922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800692e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006932:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006936:	edd7 6a07 	vldr	s13, [r7, #28]
 800693a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800693e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006942:	ee17 2a90 	vmov	r2, s15
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	605a      	str	r2, [r3, #4]
 800694a:	e002      	b.n	8006952 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006952:	4b18      	ldr	r3, [pc, #96]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d017      	beq.n	800698e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800695e:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006962:	0e1b      	lsrs	r3, r3, #24
 8006964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006968:	ee07 3a90 	vmov	s15, r3
 800696c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006974:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006978:	edd7 6a07 	vldr	s13, [r7, #28]
 800697c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006984:	ee17 2a90 	vmov	r2, s15
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	609a      	str	r2, [r3, #8]
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }
}
 800698c:	e00c      	b.n	80069a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	609a      	str	r2, [r3, #8]
}
 8006994:	e008      	b.n	80069a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	609a      	str	r2, [r3, #8]
}
 80069a8:	bf00      	nop
 80069aa:	3724      	adds	r7, #36	; 0x24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	46020c00 	.word	0x46020c00
 80069b8:	4b742400 	.word	0x4b742400
 80069bc:	46000000 	.word	0x46000000
 80069c0:	0800d658 	.word	0x0800d658

080069c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b089      	sub	sp, #36	; 0x24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80069cc:	4bac      	ldr	r3, [pc, #688]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80069ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80069d6:	4baa      	ldr	r3, [pc, #680]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80069e0:	4ba7      	ldr	r3, [pc, #668]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	3301      	adds	r3, #1
 80069ec:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80069ee:	4ba4      	ldr	r3, [pc, #656]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	f003 0310 	and.w	r3, r3, #16
 80069f6:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80069f8:	4ba1      	ldr	r3, [pc, #644]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	08db      	lsrs	r3, r3, #3
 80069fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	fb02 f303 	mul.w	r3, r2, r3
 8006a08:	ee07 3a90 	vmov	s15, r3
 8006a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a10:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8123 	beq.w	8006c62 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d062      	beq.n	8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	f200 8081 	bhi.w	8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d024      	beq.n	8006a7a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d17a      	bne.n	8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	ee07 3a90 	vmov	s15, r3
 8006a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a40:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a48:	4b8d      	ldr	r3, [pc, #564]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a58:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a5c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006c88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a78:	e08f      	b.n	8006b9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006a7a:	4b81      	ldr	r3, [pc, #516]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006a86:	4b7e      	ldr	r3, [pc, #504]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	0f1b      	lsrs	r3, r3, #28
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	e006      	b.n	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006a92:	4b7b      	ldr	r3, [pc, #492]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a98:	041b      	lsls	r3, r3, #16
 8006a9a:	0f1b      	lsrs	r3, r3, #28
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	4a7a      	ldr	r2, [pc, #488]	; (8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	ee07 3a90 	vmov	s15, r3
 8006ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aca:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006c88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ae6:	e058      	b.n	8006b9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afa:	4b61      	ldr	r3, [pc, #388]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b0e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006c88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b2a:	e036      	b.n	8006b9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006b2c:	4b54      	ldr	r3, [pc, #336]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006b38:	4b51      	ldr	r3, [pc, #324]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	0f1b      	lsrs	r3, r3, #28
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	e006      	b.n	8006b52 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006b44:	4b4e      	ldr	r3, [pc, #312]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	0f1b      	lsrs	r3, r3, #28
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	4a4e      	ldr	r2, [pc, #312]	; (8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b58:	ee07 3a90 	vmov	s15, r3
 8006b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b78:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b7c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006c88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006b80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b98:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006b9a:	4b39      	ldr	r3, [pc, #228]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d017      	beq.n	8006bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ba6:	4b36      	ldr	r3, [pc, #216]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006baa:	0a5b      	lsrs	r3, r3, #9
 8006bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bcc:	ee17 2a90 	vmov	r2, s15
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	e002      	b.n	8006bdc <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006bdc:	4b28      	ldr	r3, [pc, #160]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d017      	beq.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006be8:	4b25      	ldr	r3, [pc, #148]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bec:	0c1b      	lsrs	r3, r3, #16
 8006bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006bfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bfe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0e:	ee17 2a90 	vmov	r2, s15
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	e002      	b.n	8006c1e <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006c1e:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d017      	beq.n	8006c5a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c2a:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	0e1b      	lsrs	r3, r3, #24
 8006c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006c3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c40:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c50:	ee17 2a90 	vmov	r2, s15
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c58:	e00c      	b.n	8006c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	609a      	str	r2, [r3, #8]
}
 8006c60:	e008      	b.n	8006c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	609a      	str	r2, [r3, #8]
}
 8006c74:	bf00      	nop
 8006c76:	3724      	adds	r7, #36	; 0x24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	46020c00 	.word	0x46020c00
 8006c84:	4b742400 	.word	0x4b742400
 8006c88:	46000000 	.word	0x46000000
 8006c8c:	0800d658 	.word	0x0800d658

08006c90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b089      	sub	sp, #36	; 0x24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006c98:	4bac      	ldr	r3, [pc, #688]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006ca2:	4baa      	ldr	r3, [pc, #680]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006cac:	4ba7      	ldr	r3, [pc, #668]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	0a1b      	lsrs	r3, r3, #8
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006cba:	4ba4      	ldr	r3, [pc, #656]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbe:	f003 0310 	and.w	r3, r3, #16
 8006cc2:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006cc4:	4ba1      	ldr	r3, [pc, #644]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc8:	08db      	lsrs	r3, r3, #3
 8006cca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	fb02 f303 	mul.w	r3, r2, r3
 8006cd4:	ee07 3a90 	vmov	s15, r3
 8006cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cdc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8123 	beq.w	8006f2e <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d062      	beq.n	8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	f200 8081 	bhi.w	8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d024      	beq.n	8006d46 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d17a      	bne.n	8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d14:	4b8d      	ldr	r3, [pc, #564]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1c:	ee07 3a90 	vmov	s15, r3
 8006d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d24:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d28:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d40:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006d44:	e08f      	b.n	8006e66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006d46:	4b81      	ldr	r3, [pc, #516]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8006d52:	4b7e      	ldr	r3, [pc, #504]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	0f1b      	lsrs	r3, r3, #28
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	e006      	b.n	8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8006d5e:	4b7b      	ldr	r3, [pc, #492]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d64:	041b      	lsls	r3, r3, #16
 8006d66:	0f1b      	lsrs	r3, r3, #28
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	4a7a      	ldr	r2, [pc, #488]	; (8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	ee07 3a90 	vmov	s15, r3
 8006d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d96:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006db2:	e058      	b.n	8006e66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc6:	4b61      	ldr	r3, [pc, #388]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dda:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006df6:	e036      	b.n	8006e66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006df8:	4b54      	ldr	r3, [pc, #336]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8006e04:	4b51      	ldr	r3, [pc, #324]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	0f1b      	lsrs	r3, r3, #28
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	e006      	b.n	8006e1e <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8006e10:	4b4e      	ldr	r3, [pc, #312]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e16:	041b      	lsls	r3, r3, #16
 8006e18:	0f1b      	lsrs	r3, r3, #28
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	4a4e      	ldr	r2, [pc, #312]	; (8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e24:	ee07 3a90 	vmov	s15, r3
 8006e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	ee07 3a90 	vmov	s15, r3
 8006e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e44:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e48:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e64:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006e66:	4b39      	ldr	r3, [pc, #228]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d017      	beq.n	8006ea2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006e72:	4b36      	ldr	r3, [pc, #216]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e76:	0a5b      	lsrs	r3, r3, #9
 8006e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e88:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e98:	ee17 2a90 	vmov	r2, s15
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	e002      	b.n	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006ea8:	4b28      	ldr	r3, [pc, #160]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d017      	beq.n	8006ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006eb4:	4b25      	ldr	r3, [pc, #148]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb8:	0c1b      	lsrs	r3, r3, #16
 8006eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eca:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eda:	ee17 2a90 	vmov	r2, s15
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	605a      	str	r2, [r3, #4]
 8006ee2:	e002      	b.n	8006eea <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006eea:	4b18      	ldr	r3, [pc, #96]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d017      	beq.n	8006f26 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006ef6:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efa:	0e1b      	lsrs	r3, r3, #24
 8006efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006f08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f0c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1c:	ee17 2a90 	vmov	r2, s15
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006f24:	e00c      	b.n	8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	609a      	str	r2, [r3, #8]
}
 8006f2c:	e008      	b.n	8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	609a      	str	r2, [r3, #8]
}
 8006f40:	bf00      	nop
 8006f42:	3724      	adds	r7, #36	; 0x24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	46020c00 	.word	0x46020c00
 8006f50:	4b742400 	.word	0x4b742400
 8006f54:	46000000 	.word	0x46000000
 8006f58:	0800d658 	.word	0x0800d658

08006f5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08e      	sub	sp, #56	; 0x38
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f6a:	d145      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006f6c:	4bb0      	ldr	r3, [pc, #704]	; (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f76:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006f78:	4bad      	ldr	r3, [pc, #692]	; (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d108      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8c:	d104      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
    {
      frequency = LSE_VALUE;
 8006f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
 8006f94:	f001 b8ce 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006f98:	4ba5      	ldr	r3, [pc, #660]	; (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fa6:	d114      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fae:	d110      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fb0:	4b9f      	ldr	r3, [pc, #636]	; (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006fb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fbe:	d103      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      {
        frequency = LSI_VALUE / 128U;
 8006fc0:	23fa      	movs	r3, #250	; 0xfa
 8006fc2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fc4:	f001 b8b6 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006fc8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fce:	f001 b8b1 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006fd2:	4b97      	ldr	r3, [pc, #604]	; (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fde:	d107      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe6:	d103      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
    {
      frequency = HSE_VALUE / 32U;
 8006fe8:	4b92      	ldr	r3, [pc, #584]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
 8006fec:	f001 b8a2 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff4:	f001 b89e 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ffe:	f001 806e 	beq.w	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007008:	f201 8091 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007012:	f000 86d4 	beq.w	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800701c:	f201 8087 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007026:	f001 800c 	beq.w	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007030:	f201 807d 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800703a:	f000 8792 	beq.w	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1006>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007044:	f201 8073 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800704e:	f000 8739 	beq.w	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xf68>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007058:	f201 8069 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007062:	f000 86da 	beq.w	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800706c:	f201 805f 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007076:	f000 8594 	beq.w	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007080:	f201 8055 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800708a:	f000 81ff 	beq.w	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x530>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007094:	f201 804b 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800709e:	f000 8193 	beq.w	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a8:	f201 8041 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070b2:	f000 8487 	beq.w	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070bc:	f201 8037 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c6:	f000 842c 	beq.w	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d0:	f201 802d 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070da:	f000 83bf 	beq.w	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e4:	f201 8023 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ee:	f000 80f0 	beq.w	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070f8:	f201 8019 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007102:	f000 8099 	beq.w	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800710c:	f201 800f 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007116:	f000 8130 	beq.w	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007120:	f201 8005 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712a:	f000 8560 	beq.w	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007134:	f200 87fb 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800713e:	f000 8600 	beq.w	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007148:	f200 87f1 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007152:	f000 85a4 	beq.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715c:	f200 87e7 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007166:	f000 84d2 	beq.w	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007170:	f200 87dd 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b80      	cmp	r3, #128	; 0x80
 8007178:	f000 84a3 	beq.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b80      	cmp	r3, #128	; 0x80
 8007180:	f200 87d5 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b20      	cmp	r3, #32
 8007188:	d84c      	bhi.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 87ce 	beq.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3b01      	subs	r3, #1
 8007196:	2b1f      	cmp	r3, #31
 8007198:	f200 87c9 	bhi.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 800719c:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>)
 800719e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a2:	bf00      	nop
 80071a4:	08007571 	.word	0x08007571
 80071a8:	080075df 	.word	0x080075df
 80071ac:	0800812f 	.word	0x0800812f
 80071b0:	0800764d 	.word	0x0800764d
 80071b4:	0800812f 	.word	0x0800812f
 80071b8:	0800812f 	.word	0x0800812f
 80071bc:	0800812f 	.word	0x0800812f
 80071c0:	080076bb 	.word	0x080076bb
 80071c4:	0800812f 	.word	0x0800812f
 80071c8:	0800812f 	.word	0x0800812f
 80071cc:	0800812f 	.word	0x0800812f
 80071d0:	0800812f 	.word	0x0800812f
 80071d4:	0800812f 	.word	0x0800812f
 80071d8:	0800812f 	.word	0x0800812f
 80071dc:	0800812f 	.word	0x0800812f
 80071e0:	08007739 	.word	0x08007739
 80071e4:	0800812f 	.word	0x0800812f
 80071e8:	0800812f 	.word	0x0800812f
 80071ec:	0800812f 	.word	0x0800812f
 80071f0:	0800812f 	.word	0x0800812f
 80071f4:	0800812f 	.word	0x0800812f
 80071f8:	0800812f 	.word	0x0800812f
 80071fc:	0800812f 	.word	0x0800812f
 8007200:	0800812f 	.word	0x0800812f
 8007204:	0800812f 	.word	0x0800812f
 8007208:	0800812f 	.word	0x0800812f
 800720c:	0800812f 	.word	0x0800812f
 8007210:	0800812f 	.word	0x0800812f
 8007214:	0800812f 	.word	0x0800812f
 8007218:	0800812f 	.word	0x0800812f
 800721c:	0800812f 	.word	0x0800812f
 8007220:	080077ad 	.word	0x080077ad
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	f000 8425 	beq.w	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0xb1a>
 800722c:	f000 bf7f 	b.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x11d2>
 8007230:	46020c00 	.word	0x46020c00
 8007234:	0007a120 	.word	0x0007a120
    {
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007238:	4b8f      	ldr	r3, [pc, #572]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800723a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800723e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007242:	633b      	str	r3, [r7, #48]	; 0x30
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	2b80      	cmp	r3, #128	; 0x80
 8007248:	d031      	beq.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	d83b      	bhi.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	2b60      	cmp	r3, #96	; 0x60
 8007254:	d027      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	2b60      	cmp	r3, #96	; 0x60
 800725a:	d835      	bhi.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d009      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	d82f      	bhi.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	2b20      	cmp	r3, #32
 8007272:	d010      	beq.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8007274:	e028      	b.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff fa3c 	bl	80066f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007284:	e023      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>

          case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007286:	f107 0318 	add.w	r3, r7, #24
 800728a:	4618      	mov	r0, r3
 800728c:	f7ff fb9a 	bl	80069c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007294:	e01b      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>

          case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007296:	f107 030c 	add.w	r3, r7, #12
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff fcf8 	bl	8006c90 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072a4:	e013      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>

          case RCC_SAI1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80072a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80072aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072ac:	e00f      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>

          case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072ae:	4b72      	ldr	r3, [pc, #456]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ba:	d102      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
            {
              frequency = HSI_VALUE;
 80072bc:	4b6f      	ldr	r3, [pc, #444]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80072be:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 80072c0:	e005      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
              frequency = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072c6:	e002      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>

          default :
          {
            frequency = 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072cc:	bf00      	nop
          }
        }
        break;
 80072ce:	f000 bf31 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80072d2:	4b69      	ldr	r3, [pc, #420]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80072d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80072d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072dc:	633b      	str	r3, [r7, #48]	; 0x30
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e4:	d037      	beq.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ec:	d840      	bhi.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072f4:	d02b      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fc:	d838      	bhi.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007304:	d00b      	beq.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800730c:	d830      	bhi.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00c      	beq.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731a:	d010      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800731c:	e028      	b.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x414>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800731e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff f9e8 	bl	80066f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800732c:	e023      	b.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>

          case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800732e:	f107 0318 	add.w	r3, r7, #24
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fb46 	bl	80069c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800733c:	e01b      	b.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>

          case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff fca4 	bl	8006c90 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800734c:	e013      	b.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>

          case RCC_SAI2CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800734e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007354:	e00f      	b.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>

          case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007356:	4b48      	ldr	r3, [pc, #288]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800735e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007362:	d102      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            {
              frequency = HSI_VALUE;
 8007364:	4b45      	ldr	r3, [pc, #276]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007366:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8007368:	e005      	b.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              frequency = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800736e:	e002      	b.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>

          default :

            frequency = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007374:	bf00      	nop

        }
        break;
 8007376:	f000 bedd 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
      case RCC_PERIPHCLK_SAES:
        /* Get the current SAES source */
        srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800737a:	4b3f      	ldr	r3, [pc, #252]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800737c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007384:	633b      	str	r3, [r7, #48]	; 0x30

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007386:	4b3c      	ldr	r3, [pc, #240]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800738e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007392:	d105      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x444>
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x444>
        {
          frequency = HSI_VALUE;
 800739a:	4b38      	ldr	r3, [pc, #224]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
 800739e:	e011      	b.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80073a0:	4b35      	ldr	r3, [pc, #212]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ac:	d106      	bne.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073b4:	d102      	bne.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          frequency = HSI_VALUE >> 1U;
 80073b6:	4b32      	ldr	r3, [pc, #200]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80073b8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ba:	e003      	b.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        }
        /* Clock not enabled for SAES */
        else
        {
          frequency = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80073c0:	f000 beb8 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 80073c4:	f000 beb6 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_CLK48:

        srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 80073c8:	4b2b      	ldr	r3, [pc, #172]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80073ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073ce:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80073d2:	633b      	str	r3, [r7, #48]	; 0x30
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80073da:	d030      	beq.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80073e2:	d844      	bhi.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ea:	d00b      	beq.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073f2:	d83c      	bhi.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d014      	beq.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007400:	d008      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007402:	e034      	b.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x512>

        switch (srcclk)
        {
          case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007408:	4618      	mov	r0, r3
 800740a:	f7ff f975 	bl	80066f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007412:	e02f      	b.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x518>

          case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007414:	f107 0318 	add.w	r3, r7, #24
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff fad3 	bl	80069c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007422:	e027      	b.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x518>

          case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007424:	4b14      	ldr	r3, [pc, #80]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800742c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007430:	d102      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
            {
              frequency = HSI48_VALUE;
 8007432:	4b14      	ldr	r3, [pc, #80]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8007436:	e01d      	b.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
              frequency = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800743c:	e01a      	b.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x518>

          case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800743e:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	0e1b      	lsrs	r3, r3, #24
 8007450:	f003 030f 	and.w	r3, r3, #15
 8007454:	e006      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
 8007456:	4b08      	ldr	r3, [pc, #32]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007458:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800745c:	041b      	lsls	r3, r3, #16
 800745e:	0e1b      	lsrs	r3, r3, #24
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	4a08      	ldr	r2, [pc, #32]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800746c:	e002      	b.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x518>

          default :

            frequency = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007472:	bf00      	nop

        }
        break;
 8007474:	f000 be5e 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8007478:	46020c00 	.word	0x46020c00
 800747c:	00f42400 	.word	0x00f42400
 8007480:	007a1200 	.word	0x007a1200
 8007484:	02dc6c00 	.word	0x02dc6c00
 8007488:	0800d658 	.word	0x0800d658

      case RCC_PERIPHCLK_SDMMC:
        srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800748c:	4ba5      	ldr	r3, [pc, #660]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800748e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007496:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	2b00      	cmp	r3, #0
 800749c:	d157      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        {
          srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 800749e:	4ba1      	ldr	r3, [pc, #644]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80074a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074a4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80074a8:	633b      	str	r3, [r7, #48]	; 0x30
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074b0:	d030      	beq.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074b8:	d844      	bhi.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074c0:	d00b      	beq.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074c8:	d83c      	bhi.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d014      	beq.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074d6:	d008      	beq.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80074d8:	e034      	b.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>

          switch (srcclk)
          {
            case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */
            {
              HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff f90a 	bl	80066f8 <HAL_RCCEx_GetPLL1ClockFreq>
              frequency = pll1_clocks.PLL1_Q_Frequency;
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80074e8:	e02f      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            }
            case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */
            {
              HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ea:	f107 0318 	add.w	r3, r7, #24
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff fa68 	bl	80069c4 <HAL_RCCEx_GetPLL2ClockFreq>
              frequency = pll2_clocks.PLL2_Q_Frequency;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80074f8:	e027      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            }
            case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */
            {
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80074fa:	4b8a      	ldr	r3, [pc, #552]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007506:	d102      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
              {
                frequency = HSI48_VALUE;
 8007508:	4b87      	ldr	r3, [pc, #540]	; (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
              }
              else
              {
                frequency = 0U;
              }
              break;
 800750c:	e01d      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
                frequency = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007512:	e01a      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            }
            case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
            {
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007514:	4b83      	ldr	r3, [pc, #524]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8007520:	4b80      	ldr	r3, [pc, #512]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	0e1b      	lsrs	r3, r3, #24
 8007526:	f003 030f 	and.w	r3, r3, #15
 800752a:	e006      	b.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 800752c:	4b7d      	ldr	r3, [pc, #500]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800752e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	0e1b      	lsrs	r3, r3, #24
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	4a7c      	ldr	r2, [pc, #496]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 800753c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007542:	e002      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            }
            default :
            {
              frequency = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007548:	bf00      	nop
            }
          }
          break;
 800754a:	f000 bdf3 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        }
        else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007554:	d108      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff f8cc 	bl	80066f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_P_Frequency;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007564:	f000 bde6 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
          frequency = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800756c:	f000 bde2 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007570:	4b6c      	ldr	r3, [pc, #432]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	2b00      	cmp	r3, #0
 8007580:	d104      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007582:	f7fe fbc5 	bl	8005d10 <HAL_RCC_GetPCLK2Freq>
 8007586:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007588:	f000 bdd4 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	2b01      	cmp	r3, #1
 8007590:	d104      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
          frequency = HAL_RCC_GetSysClockFreq();
 8007592:	f7fe fa87 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007596:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007598:	f000 bdcc 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800759c:	4b61      	ldr	r3, [pc, #388]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075a8:	d105      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d102      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HSI_VALUE;
 80075b0:	4b5f      	ldr	r3, [pc, #380]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
 80075b4:	e011      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80075b6:	4b5b      	ldr	r3, [pc, #364]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80075b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d106      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d103      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
          frequency = LSE_VALUE;
 80075ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
 80075d0:	e003      	b.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
          frequency = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075d6:	f000 bdad 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 80075da:	f000 bdab 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80075de:	4b51      	ldr	r3, [pc, #324]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80075e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075e4:	f003 030c 	and.w	r3, r3, #12
 80075e8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80075f0:	f7fe fb7a 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 80075f4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80075f6:	f000 bd9d 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d104      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          frequency = HAL_RCC_GetSysClockFreq();
 8007600:	f7fe fa50 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007604:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007606:	f000 bd95 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800760a:	4b46      	ldr	r3, [pc, #280]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007616:	d105      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	2b08      	cmp	r3, #8
 800761c:	d102      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
          frequency = HSI_VALUE;
 800761e:	4b44      	ldr	r3, [pc, #272]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8007620:	637b      	str	r3, [r7, #52]	; 0x34
 8007622:	e011      	b.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007624:	4b3f      	ldr	r3, [pc, #252]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b02      	cmp	r3, #2
 8007630:	d106      	bne.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	2b0c      	cmp	r3, #12
 8007636:	d103      	bne.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = LSE_VALUE;
 8007638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
 800763e:	e003      	b.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
          frequency = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007644:	f000 bd76 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8007648:	f000 bd74 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800764c:	4b35      	ldr	r3, [pc, #212]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800764e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007652:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007656:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800765e:	f7fe fb43 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 8007662:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007664:	f000 bd66 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	2b10      	cmp	r3, #16
 800766c:	d104      	bne.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetSysClockFreq();
 800766e:	f7fe fa19 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007672:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007674:	f000 bd5e 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007678:	4b2a      	ldr	r3, [pc, #168]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007684:	d105      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x736>
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	2b20      	cmp	r3, #32
 800768a:	d102      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x736>
          frequency = HSI_VALUE;
 800768c:	4b28      	ldr	r3, [pc, #160]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
 8007690:	e011      	b.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007692:	4b24      	ldr	r3, [pc, #144]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b02      	cmp	r3, #2
 800769e:	d106      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	2b30      	cmp	r3, #48	; 0x30
 80076a4:	d103      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x752>
          frequency = LSE_VALUE;
 80076a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076aa:	637b      	str	r3, [r7, #52]	; 0x34
 80076ac:	e003      	b.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076b2:	f000 bd3f 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 80076b6:	f000 bd3d 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80076ba:	4b1a      	ldr	r3, [pc, #104]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80076bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076c4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076cc:	f7fe fb0c 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 80076d0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80076d2:	f000 bd2f 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	2b40      	cmp	r3, #64	; 0x40
 80076da:	d104      	bne.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
          frequency = HAL_RCC_GetSysClockFreq();
 80076dc:	f7fe f9e2 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 80076e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80076e2:	f000 bd27 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f2:	d105      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	2b80      	cmp	r3, #128	; 0x80
 80076f8:	d102      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
          frequency = HSI_VALUE;
 80076fa:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 80076fc:	637b      	str	r3, [r7, #52]	; 0x34
 80076fe:	e019      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007700:	4b08      	ldr	r3, [pc, #32]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b02      	cmp	r3, #2
 800770c:	d106      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	2bc0      	cmp	r3, #192	; 0xc0
 8007712:	d103      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
          frequency = LSE_VALUE;
 8007714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007718:	637b      	str	r3, [r7, #52]	; 0x34
 800771a:	e00b      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
          frequency = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007720:	f000 bd08 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8007724:	46020c00 	.word	0x46020c00
 8007728:	02dc6c00 	.word	0x02dc6c00
 800772c:	0800d658 	.word	0x0800d658
 8007730:	00f42400 	.word	0x00f42400
 8007734:	f000 bcfe 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007738:	4b9f      	ldr	r3, [pc, #636]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 800773a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800773e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007742:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	2b00      	cmp	r3, #0
 8007748:	d104      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800774a:	f7fe facd 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 800774e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007750:	f000 bcf0 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800775a:	d104      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800775c:	f7fe f9a2 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007760:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007762:	f000 bce7 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007766:	4b94      	ldr	r3, [pc, #592]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800776e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007772:	d106      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800777a:	d102      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HSI_VALUE;
 800777c:	4b8f      	ldr	r3, [pc, #572]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa60>)
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
 8007780:	e012      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007782:	4b8d      	ldr	r3, [pc, #564]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 8007784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007788:	f003 0302 	and.w	r3, r3, #2
 800778c:	2b02      	cmp	r3, #2
 800778e:	d107      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007796:	d103      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = LSE_VALUE;
 8007798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
 800779e:	e003      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
          frequency = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077a4:	f000 bcc6 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 80077a8:	f000 bcc4 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80077ac:	4b82      	ldr	r3, [pc, #520]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 80077ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d104      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80077be:	f7fe fabb 	bl	8005d38 <HAL_RCC_GetPCLK3Freq>
 80077c2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80077c4:	f000 bcb6 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d104      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
          frequency = HAL_RCC_GetSysClockFreq();
 80077ce:	f7fe f969 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 80077d2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80077d4:	f000 bcae 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80077d8:	4b77      	ldr	r3, [pc, #476]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e4:	d105      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d102      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          frequency = HSI_VALUE;
 80077ec:	4b73      	ldr	r3, [pc, #460]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa60>)
 80077ee:	637b      	str	r3, [r7, #52]	; 0x34
 80077f0:	e032      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80077f2:	4b71      	ldr	r3, [pc, #452]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 80077f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d106      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	2b03      	cmp	r3, #3
 8007804:	d103      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          frequency = LSE_VALUE;
 8007806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800780a:	637b      	str	r3, [r7, #52]	; 0x34
 800780c:	e024      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800780e:	4b6a      	ldr	r3, [pc, #424]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b20      	cmp	r3, #32
 8007818:	d11a      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	2b04      	cmp	r3, #4
 800781e:	d117      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007820:	4b65      	ldr	r3, [pc, #404]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 800782c:	4b62      	ldr	r3, [pc, #392]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	0e1b      	lsrs	r3, r3, #24
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	e006      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007838:	4b5f      	ldr	r3, [pc, #380]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 800783a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800783e:	041b      	lsls	r3, r3, #16
 8007840:	0e1b      	lsrs	r3, r3, #24
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	4a5e      	ldr	r2, [pc, #376]	; (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>)
 8007848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
 800784e:	e003      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
          frequency = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007854:	f000 bc6e 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8007858:	f000 bc6c 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_ADCDAC:

        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800785c:	4b56      	ldr	r3, [pc, #344]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 800785e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007862:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007866:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786e:	d104      	bne.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
        {
          frequency = HAL_RCC_GetSysClockFreq();
 8007870:	f7fe f918 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007874:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADC */
        else
        {
          frequency = 0U;
        }
        break;
 8007876:	f000 bc5d 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007880:	d108      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007882:	f107 0318 	add.w	r3, r7, #24
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff f89c 	bl	80069c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007890:	f000 bc50 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	2b00      	cmp	r3, #0
 8007898:	d104      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetHCLKFreq();
 800789a:	f7fe fa0b 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 800789e:	6378      	str	r0, [r7, #52]	; 0x34
          break;
 80078a0:	f000 bc48 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80078aa:	d118      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x982>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80078ac:	4b42      	ldr	r3, [pc, #264]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d005      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 80078b8:	4b3f      	ldr	r3, [pc, #252]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	0f1b      	lsrs	r3, r3, #28
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	e006      	b.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80078c4:	4b3c      	ldr	r3, [pc, #240]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 80078c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078ca:	041b      	lsls	r3, r3, #16
 80078cc:	0f1b      	lsrs	r3, r3, #28
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	4a3b      	ldr	r2, [pc, #236]	; (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>)
 80078d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078d8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80078da:	f000 bc2b 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80078de:	4b36      	ldr	r3, [pc, #216]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ea:	d106      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078f2:	d102      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = HSE_VALUE;
 80078f4:	4b31      	ldr	r3, [pc, #196]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa60>)
 80078f6:	637b      	str	r3, [r7, #52]	; 0x34
 80078f8:	e011      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80078fa:	4b2f      	ldr	r3, [pc, #188]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007906:	d106      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800790e:	d102      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
          frequency = HSI_VALUE;
 8007910:	4b2a      	ldr	r3, [pc, #168]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa60>)
 8007912:	637b      	str	r3, [r7, #52]	; 0x34
 8007914:	e003      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
          frequency = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800791a:	f000 bc0b 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 800791e:	f000 bc09 	b.w	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_MDF1:
        /* Get the current MDF1 source */
        srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007922:	4b25      	ldr	r3, [pc, #148]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 8007924:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	633b      	str	r3, [r7, #48]	; 0x30
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2b04      	cmp	r3, #4
 8007932:	d83d      	bhi.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8007934:	a201      	add	r2, pc, #4	; (adr r2, 800793c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>)
 8007936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793a:	bf00      	nop
 800793c:	08007971 	.word	0x08007971
 8007940:	08007951 	.word	0x08007951
 8007944:	08007961 	.word	0x08007961
 8007948:	08007979 	.word	0x08007979
 800794c:	08007981 	.word	0x08007981

        switch (srcclk)
        {
          case RCC_MDF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fecf 	bl	80066f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800795e:	e02a      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>

          case RCC_MDF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007960:	f107 030c 	add.w	r3, r7, #12
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff f993 	bl	8006c90 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800796e:	e022      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>

          case RCC_MDF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 8007970:	f7fe f9a0 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 8007974:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007976:	e01e      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>

          case RCC_MDF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007978:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800797c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800797e:	e01a      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>

          case RCC_MDF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007980:	4b0d      	ldr	r3, [pc, #52]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	0e1b      	lsrs	r3, r3, #24
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	e006      	b.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007998:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>)
 800799a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800799e:	041b      	lsls	r3, r3, #16
 80079a0:	0e1b      	lsrs	r3, r3, #24
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	4a06      	ldr	r2, [pc, #24]	; (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>)
 80079a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079ae:	e002      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>

          default:

            frequency = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079b4:	bf00      	nop

        }
        break;
 80079b6:	e3bd      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 80079b8:	46020c00 	.word	0x46020c00
 80079bc:	00f42400 	.word	0x00f42400
 80079c0:	0800d658 	.word	0x0800d658

      case RCC_PERIPHCLK_ADF1:
        /* Get the current ADF1 source */
        srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80079c4:	4b9a      	ldr	r3, [pc, #616]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 80079c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079ca:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80079ce:	633b      	str	r3, [r7, #48]	; 0x30
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079d6:	d032      	beq.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079de:	d846      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079e6:	d026      	beq.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079ee:	d83e      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079f6:	d012      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079fe:	d836      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d013      	beq.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0c:	d12f      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>

        switch (srcclk)
        {
          case RCC_ADF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fe70 	bl	80066f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a1c:	e02a      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>

          case RCC_ADF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a1e:	f107 030c 	add.w	r3, r7, #12
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff f934 	bl	8006c90 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a2c:	e022      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>

          case RCC_ADF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 8007a2e:	f7fe f941 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 8007a32:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007a34:	e01e      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>

          case RCC_ADF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007a36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a3c:	e01a      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>

          case RCC_ADF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a3e:	4b7c      	ldr	r3, [pc, #496]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 8007a4a:	4b79      	ldr	r3, [pc, #484]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	0e1b      	lsrs	r3, r3, #24
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	e006      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8007a56:	4b76      	ldr	r3, [pc, #472]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a5c:	041b      	lsls	r3, r3, #16
 8007a5e:	0e1b      	lsrs	r3, r3, #24
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	4a73      	ldr	r2, [pc, #460]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>)
 8007a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a6c:	e002      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>

          default:

            frequency = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a72:	bf00      	nop
        }
        break;
 8007a74:	e35e      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007a76:	4b6e      	ldr	r3, [pc, #440]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a80:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d103      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a88:	f7fe f92e 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 8007a8c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a8e:	e351      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a96:	d103      	bne.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a98:	f7fe f804 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007a9c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a9e:	e349      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007aa0:	4b63      	ldr	r3, [pc, #396]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aac:	d106      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab4:	d102      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HSI_VALUE;
 8007ab6:	4b60      	ldr	r3, [pc, #384]	; (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>)
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aba:	e33b      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
          frequency = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ac0:	e338      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007ac2:	4b5b      	ldr	r3, [pc, #364]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ac8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007acc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d103      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ad4:	f7fe f908 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 8007ad8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ada:	e32b      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae2:	d103      	bne.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ae4:	f7fd ffde 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007ae8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007aea:	e323      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007aec:	4b50      	ldr	r3, [pc, #320]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af8:	d106      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b00:	d102      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
          frequency = HSI_VALUE;
 8007b02:	4b4d      	ldr	r3, [pc, #308]	; (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>)
 8007b04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b06:	e315      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
          frequency = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b0c:	e312      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007b0e:	4b48      	ldr	r3, [pc, #288]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b18:	633b      	str	r3, [r7, #48]	; 0x30
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	2bc0      	cmp	r3, #192	; 0xc0
 8007b1e:	d024      	beq.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8007b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b22:	2bc0      	cmp	r3, #192	; 0xc0
 8007b24:	d839      	bhi.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	2b80      	cmp	r3, #128	; 0x80
 8007b2a:	d00d      	beq.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	2b80      	cmp	r3, #128	; 0x80
 8007b30:	d833      	bhi.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	2b40      	cmp	r3, #64	; 0x40
 8007b3c:	d011      	beq.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8007b3e:	e02c      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>

        switch (srcclk)
        {
          case RCC_I2C3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007b40:	f7fe f8fa 	bl	8005d38 <HAL_RCC_GetPCLK3Freq>
 8007b44:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007b46:	e02b      	b.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc44>
          }
          case RCC_I2C3CLKSOURCE_HSI:
          {
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b48:	4b39      	ldr	r3, [pc, #228]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b54:	d102      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0xc00>
            {
              frequency = HSI_VALUE;
 8007b56:	4b38      	ldr	r3, [pc, #224]	; (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>)
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8007b5a:	e021      	b.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc44>
              frequency = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b60:	e01e      	b.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc44>
          }
          case RCC_I2C3CLKSOURCE_SYSCLK:
          {
            frequency = HAL_RCC_GetSysClockFreq();
 8007b62:	f7fd ff9f 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007b66:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007b68:	e01a      	b.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc44>
          }
          case RCC_I2C3CLKSOURCE_MSIK:
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007b6a:	4b31      	ldr	r3, [pc, #196]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d005      	beq.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0xc26>
 8007b76:	4b2e      	ldr	r3, [pc, #184]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	0f1b      	lsrs	r3, r3, #28
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	e006      	b.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8007b82:	4b2b      	ldr	r3, [pc, #172]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007b84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b88:	041b      	lsls	r3, r3, #16
 8007b8a:	0f1b      	lsrs	r3, r3, #28
 8007b8c:	f003 030f 	and.w	r3, r3, #15
 8007b90:	4a28      	ldr	r2, [pc, #160]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>)
 8007b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b98:	e002      	b.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc44>
          }
          default:
          {
            frequency = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b9e:	bf00      	nop
          }
        }
        break;
 8007ba0:	e2c8      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007ba2:	4b23      	ldr	r3, [pc, #140]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bac:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d103      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007bb4:	f7fe f898 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 8007bb8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007bba:	e2bb      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc2:	d103      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
          frequency = HAL_RCC_GetSysClockFreq();
 8007bc4:	f7fd ff6e 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007bc8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007bca:	e2b3      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007bcc:	4b18      	ldr	r3, [pc, #96]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd8:	d106      	bne.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be0:	d102      	bne.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
          frequency = HSI_VALUE;
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>)
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007be6:	e2a5      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
          frequency = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bec:	e2a2      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_LPTIM34:
        /* Get the current LPTIM34 source */
        srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007bee:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d11d      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c00:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8007c0c:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	0e1b      	lsrs	r3, r3, #24
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	e006      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
 8007c18:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd4>)
 8007c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	0e1b      	lsrs	r3, r3, #24
 8007c22:	f003 030f 	and.w	r3, r3, #15
 8007c26:	4a03      	ldr	r2, [pc, #12]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>)
 8007c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c2c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM34 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c2e:	e281      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8007c30:	46020c00 	.word	0x46020c00
 8007c34:	0800d658 	.word	0x0800d658
 8007c38:	00f42400 	.word	0x00f42400
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007c3c:	4b9e      	ldr	r3, [pc, #632]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c4a:	d107      	bne.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c52:	d103      	bne.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
          frequency = LSI_VALUE;
 8007c54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c58:	637b      	str	r3, [r7, #52]	; 0x34
 8007c5a:	e01f      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007c5c:	4b96      	ldr	r3, [pc, #600]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c68:	d106      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c70:	d102      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
          frequency = HSI_VALUE;
 8007c72:	4b92      	ldr	r3, [pc, #584]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8007c74:	637b      	str	r3, [r7, #52]	; 0x34
 8007c76:	e011      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007c78:	4b8f      	ldr	r3, [pc, #572]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d107      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c8c:	d103      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = LSE_VALUE;
 8007c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          frequency = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c9a:	e24b      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8007c9c:	e24a      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007c9e:	4b86      	ldr	r3, [pc, #536]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ca4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ca8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d117      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cb0:	4b81      	ldr	r3, [pc, #516]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d005      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
 8007cbc:	4b7e      	ldr	r3, [pc, #504]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	0e1b      	lsrs	r3, r3, #24
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	e006      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
 8007cc8:	4b7b      	ldr	r3, [pc, #492]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cce:	041b      	lsls	r3, r3, #16
 8007cd0:	0e1b      	lsrs	r3, r3, #24
 8007cd2:	f003 030f 	and.w	r3, r3, #15
 8007cd6:	4a7a      	ldr	r2, [pc, #488]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>)
 8007cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cde:	e229      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007ce0:	4b75      	ldr	r3, [pc, #468]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cee:	d107      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf6:	d103      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
          frequency = LSI_VALUE;
 8007cf8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007cfe:	e01f      	b.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007d00:	4b6d      	ldr	r3, [pc, #436]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d0c:	d106      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d14:	d102      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
          frequency = HSI_VALUE;
 8007d16:	4b69      	ldr	r3, [pc, #420]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1a:	e011      	b.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007d1c:	4b66      	ldr	r3, [pc, #408]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d107      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d30:	d103      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
          frequency = LSE_VALUE;
 8007d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
 8007d38:	e002      	b.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
          frequency = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d3e:	e1f9      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8007d40:	e1f8      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007d42:	4b5d      	ldr	r3, [pc, #372]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007d4c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d103      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d54:	f7fd ffc8 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 8007d58:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d5a:	e1eb      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007d5c:	4b56      	ldr	r3, [pc, #344]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d6a:	d107      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d72:	d103      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
          frequency = LSI_VALUE;
 8007d74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7a:	e01f      	b.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007d7c:	4b4e      	ldr	r3, [pc, #312]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d88:	d106      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d90:	d102      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
          frequency = HSI_VALUE;
 8007d92:	4b4a      	ldr	r3, [pc, #296]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
 8007d96:	e011      	b.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007d98:	4b47      	ldr	r3, [pc, #284]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d107      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007dac:	d103      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0xe5a>
          frequency = LSE_VALUE;
 8007dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007db2:	637b      	str	r3, [r7, #52]	; 0x34
 8007db4:	e002      	b.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
          frequency = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dba:	e1bb      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8007dbc:	e1ba      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_FDCAN1:
        /* Get the current FDCAN1 kernel source */
        srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007dbe:	4b3e      	ldr	r3, [pc, #248]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dc4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007dc8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007dca:	4b3b      	ldr	r3, [pc, #236]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dd6:	d105      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe88>
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d102      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe88>
        {
          frequency = HSE_VALUE;
 8007dde:	4b37      	ldr	r3, [pc, #220]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007de2:	e1a7      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007dea:	d107      	bne.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe fc81 	bl	80066f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dfa:	e19b      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e02:	d107      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xeb8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e04:	f107 0318 	add.w	r3, r7, #24
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe fddb 	bl	80069c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e12:	e18f      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
          frequency = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e18:	e18c      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007e1a:	4b27      	ldr	r3, [pc, #156]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007e24:	633b      	str	r3, [r7, #48]	; 0x30
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e2c:	d028      	beq.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e34:	d83c      	bhi.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e3c:	d013      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e44:	d834      	bhi.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xefa>
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e52:	d004      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8007e54:	e02c      	b.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PCLK2:

            frequency = HAL_RCC_GetPCLK2Freq();
 8007e56:	f7fd ff5b 	bl	8005d10 <HAL_RCC_GetPCLK2Freq>
 8007e5a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007e5c:	e02b      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>

          case RCC_SPI1CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8007e5e:	f7fd fe21 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007e62:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007e64:	e027      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>

          case RCC_SPI1CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e72:	d102      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0xf1e>
            {
              frequency = HSI_VALUE;
 8007e74:	4b11      	ldr	r3, [pc, #68]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8007e78:	e01d      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
              frequency = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e7e:	e01a      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>

          case RCC_SPI1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e80:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	0e1b      	lsrs	r3, r3, #24
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	e006      	b.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8007e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e9e:	041b      	lsls	r3, r3, #16
 8007ea0:	0e1b      	lsrs	r3, r3, #24
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	4a06      	ldr	r2, [pc, #24]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>)
 8007ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007eae:	e002      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>

          default:

            frequency = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007eb4:	bf00      	nop

        }
        break;
 8007eb6:	e13d      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 8007eb8:	46020c00 	.word	0x46020c00
 8007ebc:	00f42400 	.word	0x00f42400
 8007ec0:	0800d658 	.word	0x0800d658

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007ec4:	4b9e      	ldr	r3, [pc, #632]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8007ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007eca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ece:	633b      	str	r3, [r7, #48]	; 0x30
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ed6:	d028      	beq.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ede:	d83c      	bhi.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0xffe>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ee6:	d013      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eee:	d834      	bhi.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0xffe>
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efc:	d004      	beq.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>
 8007efe:	e02c      	b.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0xffe>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PCLK1:

            frequency = HAL_RCC_GetPCLK1Freq();
 8007f00:	f7fd fef2 	bl	8005ce8 <HAL_RCC_GetPCLK1Freq>
 8007f04:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007f06:	e02b      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>

          case RCC_SPI2CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8007f08:	f7fd fdcc 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007f0c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007f0e:	e027      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>

          case RCC_SPI2CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f10:	4b8b      	ldr	r3, [pc, #556]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1c:	d102      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
            {
              frequency = HSI_VALUE;
 8007f1e:	4b89      	ldr	r3, [pc, #548]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>)
 8007f20:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8007f22:	e01d      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
              frequency = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f28:	e01a      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>

          case RCC_SPI2CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f2a:	4b85      	ldr	r3, [pc, #532]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d005      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xfe6>
 8007f36:	4b82      	ldr	r3, [pc, #520]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	0e1b      	lsrs	r3, r3, #24
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	e006      	b.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>
 8007f42:	4b7f      	ldr	r3, [pc, #508]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8007f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f48:	041b      	lsls	r3, r3, #16
 8007f4a:	0e1b      	lsrs	r3, r3, #24
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	4a7d      	ldr	r2, [pc, #500]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>)
 8007f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f56:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f58:	e002      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>

          default:

            frequency = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f5e:	bf00      	nop

        }
        break;
 8007f60:	e0e8      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007f62:	4b77      	ldr	r3, [pc, #476]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8007f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f68:	f003 0318 	and.w	r3, r3, #24
 8007f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	2b18      	cmp	r3, #24
 8007f72:	d862      	bhi.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1020>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fe1 	.word	0x08007fe1
 8007f80:	0800803b 	.word	0x0800803b
 8007f84:	0800803b 	.word	0x0800803b
 8007f88:	0800803b 	.word	0x0800803b
 8007f8c:	0800803b 	.word	0x0800803b
 8007f90:	0800803b 	.word	0x0800803b
 8007f94:	0800803b 	.word	0x0800803b
 8007f98:	0800803b 	.word	0x0800803b
 8007f9c:	08007fe9 	.word	0x08007fe9
 8007fa0:	0800803b 	.word	0x0800803b
 8007fa4:	0800803b 	.word	0x0800803b
 8007fa8:	0800803b 	.word	0x0800803b
 8007fac:	0800803b 	.word	0x0800803b
 8007fb0:	0800803b 	.word	0x0800803b
 8007fb4:	0800803b 	.word	0x0800803b
 8007fb8:	0800803b 	.word	0x0800803b
 8007fbc:	08007ff1 	.word	0x08007ff1
 8007fc0:	0800803b 	.word	0x0800803b
 8007fc4:	0800803b 	.word	0x0800803b
 8007fc8:	0800803b 	.word	0x0800803b
 8007fcc:	0800803b 	.word	0x0800803b
 8007fd0:	0800803b 	.word	0x0800803b
 8007fd4:	0800803b 	.word	0x0800803b
 8007fd8:	0800803b 	.word	0x0800803b
 8007fdc:	0800800b 	.word	0x0800800b
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PCLK3:

            frequency = HAL_RCC_GetPCLK3Freq();
 8007fe0:	f7fd feaa 	bl	8005d38 <HAL_RCC_GetPCLK3Freq>
 8007fe4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007fe6:	e02b      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>

          case RCC_SPI3CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8007fe8:	f7fd fd5c 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8007fec:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007fee:	e027      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>

          case RCC_SPI3CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ff0:	4b53      	ldr	r3, [pc, #332]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ffc:	d102      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
            {
              frequency = HSI_VALUE;
 8007ffe:	4b51      	ldr	r3, [pc, #324]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>)
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8008002:	e01d      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
              frequency = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008008:	e01a      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>

          case RCC_SPI3CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800800a:	4b4d      	ldr	r3, [pc, #308]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x10c6>
 8008016:	4b4a      	ldr	r3, [pc, #296]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	0e1b      	lsrs	r3, r3, #24
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	e006      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8008022:	4b47      	ldr	r3, [pc, #284]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8008024:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008028:	041b      	lsls	r3, r3, #16
 800802a:	0e1b      	lsrs	r3, r3, #24
 800802c:	f003 030f 	and.w	r3, r3, #15
 8008030:	4a45      	ldr	r2, [pc, #276]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>)
 8008032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008036:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008038:	e002      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>

          default:

            frequency = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800803e:	bf00      	nop
        }
        break;
 8008040:	e078      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008042:	4b3f      	ldr	r3, [pc, #252]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8008044:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008048:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800804c:	633b      	str	r3, [r7, #48]	; 0x30
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008054:	d013      	beq.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800805c:	d83b      	bhi.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008064:	d013      	beq.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800806c:	d833      	bhi.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	2b00      	cmp	r3, #0
 8008072:	d014      	beq.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x1142>
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800807a:	d014      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
 800807c:	e02b      	b.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_PLL2:

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800807e:	f107 0318 	add.w	r3, r7, #24
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fc9e 	bl	80069c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800808c:	e026      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1180>

          case RCC_OSPICLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800808e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fb30 	bl	80066f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800809c:	e01e      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1180>

          case RCC_OSPICLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800809e:	f7fd fd01 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 80080a2:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80080a4:	e01a      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1180>

          case RCC_OSPICLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080a6:	4b26      	ldr	r3, [pc, #152]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d005      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x1162>
 80080b2:	4b23      	ldr	r3, [pc, #140]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	0e1b      	lsrs	r3, r3, #24
 80080b8:	f003 030f 	and.w	r3, r3, #15
 80080bc:	e006      	b.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
 80080be:	4b20      	ldr	r3, [pc, #128]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 80080c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080c4:	041b      	lsls	r3, r3, #16
 80080c6:	0e1b      	lsrs	r3, r3, #24
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	4a1e      	ldr	r2, [pc, #120]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>)
 80080ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080d4:	e002      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1180>

          default:

            frequency = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080da:	bf00      	nop
        }
        break;
 80080dc:	e02a      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      case RCC_PERIPHCLK_DAC1:
        /* Get the current DAC1 kernel source */
        srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80080de:	4b18      	ldr	r3, [pc, #96]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 80080e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080e8:	633b      	str	r3, [r7, #48]	; 0x30
        /* Check if LSE is ready and if DAC1 clock selection is LSE */
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80080ea:	4b15      	ldr	r3, [pc, #84]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 80080ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d106      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x11aa>
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x11aa>
        {
          frequency = LSE_VALUE;
 80080fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
 8008104:	e012      	b.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
        }
        /* Check if LSI is ready and if DAC1 clock selection is LSI */
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008106:	4b0e      	ldr	r3, [pc, #56]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8008108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800810c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008114:	d107      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x11ca>
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800811c:	d103      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x11ca>
        {
          frequency = LSI_VALUE;
 800811e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008122:	637b      	str	r3, [r7, #52]	; 0x34
 8008124:	e002      	b.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
        }
        /* Clock not enabled for DAC1*/
        else
        {
          frequency = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800812a:	e003      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 800812c:	e002      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>

      default:
         frequency = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008132:	bf00      	nop
    }
  }
  return (frequency);
 8008134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008136:	4618      	mov	r0, r3
 8008138:	3738      	adds	r7, #56	; 0x38
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	46020c00 	.word	0x46020c00
 8008144:	00f42400 	.word	0x00f42400
 8008148:	0800d658 	.word	0x0800d658

0800814c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008154:	4b47      	ldr	r3, [pc, #284]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a46      	ldr	r2, [pc, #280]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 800815a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800815e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008160:	f7fc f876 	bl	8004250 <HAL_GetTick>
 8008164:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008166:	e008      	b.n	800817a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008168:	f7fc f872 	bl	8004250 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d901      	bls.n	800817a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e077      	b.n	800826a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800817a:	4b3e      	ldr	r3, [pc, #248]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f0      	bne.n	8008168 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008186:	4b3b      	ldr	r3, [pc, #236]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6811      	ldr	r1, [r2, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6852      	ldr	r2, [r2, #4]
 800819a:	3a01      	subs	r2, #1
 800819c:	0212      	lsls	r2, r2, #8
 800819e:	430a      	orrs	r2, r1
 80081a0:	4934      	ldr	r1, [pc, #208]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80081a6:	4b33      	ldr	r3, [pc, #204]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 80081a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081aa:	4b33      	ldr	r3, [pc, #204]	; (8008278 <RCCEx_PLL2_Config+0x12c>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6892      	ldr	r2, [r2, #8]
 80081b2:	3a01      	subs	r2, #1
 80081b4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	68d2      	ldr	r2, [r2, #12]
 80081bc:	3a01      	subs	r2, #1
 80081be:	0252      	lsls	r2, r2, #9
 80081c0:	b292      	uxth	r2, r2
 80081c2:	4311      	orrs	r1, r2
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6912      	ldr	r2, [r2, #16]
 80081c8:	3a01      	subs	r2, #1
 80081ca:	0412      	lsls	r2, r2, #16
 80081cc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80081d0:	4311      	orrs	r1, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	6952      	ldr	r2, [r2, #20]
 80081d6:	3a01      	subs	r2, #1
 80081d8:	0612      	lsls	r2, r2, #24
 80081da:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80081de:	430a      	orrs	r2, r1
 80081e0:	4924      	ldr	r1, [pc, #144]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80081e6:	4b23      	ldr	r3, [pc, #140]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	f023 020c 	bic.w	r2, r3, #12
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	4920      	ldr	r1, [pc, #128]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80081f8:	4b1e      	ldr	r3, [pc, #120]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	491c      	ldr	r1, [pc, #112]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 8008202:	4313      	orrs	r3, r2
 8008204:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008206:	4b1b      	ldr	r3, [pc, #108]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	4a1a      	ldr	r2, [pc, #104]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 800820c:	f023 0310 	bic.w	r3, r3, #16
 8008210:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008212:	4b18      	ldr	r3, [pc, #96]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800821a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	69d2      	ldr	r2, [r2, #28]
 8008222:	00d2      	lsls	r2, r2, #3
 8008224:	4913      	ldr	r1, [pc, #76]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 8008226:	4313      	orrs	r3, r2
 8008228:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800822a:	4b12      	ldr	r3, [pc, #72]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 800822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822e:	4a11      	ldr	r2, [pc, #68]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 8008230:	f043 0310 	orr.w	r3, r3, #16
 8008234:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008236:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a0e      	ldr	r2, [pc, #56]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 800823c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008240:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008242:	f7fc f805 	bl	8004250 <HAL_GetTick>
 8008246:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008248:	e008      	b.n	800825c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800824a:	f7fc f801 	bl	8004250 <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	2b02      	cmp	r3, #2
 8008256:	d901      	bls.n	800825c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e006      	b.n	800826a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800825c:	4b05      	ldr	r3, [pc, #20]	; (8008274 <RCCEx_PLL2_Config+0x128>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0f0      	beq.n	800824a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008268:	2300      	movs	r3, #0

}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	46020c00 	.word	0x46020c00
 8008278:	80800000 	.word	0x80800000

0800827c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters N & P & optionally M as well as PLL3 output clock(s)
  * @note   PLL3 is temporary disable to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008284:	4b47      	ldr	r3, [pc, #284]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a46      	ldr	r2, [pc, #280]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 800828a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800828e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008290:	f7fb ffde 	bl	8004250 <HAL_GetTick>
 8008294:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008296:	e008      	b.n	80082aa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008298:	f7fb ffda 	bl	8004250 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d901      	bls.n	80082aa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e077      	b.n	800839a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082aa:	4b3e      	ldr	r3, [pc, #248]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1f0      	bne.n	8008298 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80082b6:	4b3b      	ldr	r3, [pc, #236]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 80082b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80082be:	f023 0303 	bic.w	r3, r3, #3
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	6811      	ldr	r1, [r2, #0]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6852      	ldr	r2, [r2, #4]
 80082ca:	3a01      	subs	r2, #1
 80082cc:	0212      	lsls	r2, r2, #8
 80082ce:	430a      	orrs	r2, r1
 80082d0:	4934      	ldr	r1, [pc, #208]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	630b      	str	r3, [r1, #48]	; 0x30
 80082d6:	4b33      	ldr	r3, [pc, #204]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 80082d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082da:	4b33      	ldr	r3, [pc, #204]	; (80083a8 <RCCEx_PLL3_Config+0x12c>)
 80082dc:	4013      	ands	r3, r2
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6892      	ldr	r2, [r2, #8]
 80082e2:	3a01      	subs	r2, #1
 80082e4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	68d2      	ldr	r2, [r2, #12]
 80082ec:	3a01      	subs	r2, #1
 80082ee:	0252      	lsls	r2, r2, #9
 80082f0:	b292      	uxth	r2, r2
 80082f2:	4311      	orrs	r1, r2
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6912      	ldr	r2, [r2, #16]
 80082f8:	3a01      	subs	r2, #1
 80082fa:	0412      	lsls	r2, r2, #16
 80082fc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008300:	4311      	orrs	r1, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6952      	ldr	r2, [r2, #20]
 8008306:	3a01      	subs	r2, #1
 8008308:	0612      	lsls	r2, r2, #24
 800830a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800830e:	430a      	orrs	r2, r1
 8008310:	4924      	ldr	r1, [pc, #144]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 8008312:	4313      	orrs	r3, r2
 8008314:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008316:	4b23      	ldr	r3, [pc, #140]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	f023 020c 	bic.w	r2, r3, #12
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	4920      	ldr	r1, [pc, #128]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 8008324:	4313      	orrs	r3, r2
 8008326:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008328:	4b1e      	ldr	r3, [pc, #120]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 800832a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	491c      	ldr	r1, [pc, #112]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 8008332:	4313      	orrs	r3, r2
 8008334:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008336:	4b1b      	ldr	r3, [pc, #108]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 8008338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833a:	4a1a      	ldr	r2, [pc, #104]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 800833c:	f023 0310 	bic.w	r3, r3, #16
 8008340:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008342:	4b18      	ldr	r3, [pc, #96]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 8008344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800834a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	69d2      	ldr	r2, [r2, #28]
 8008352:	00d2      	lsls	r2, r2, #3
 8008354:	4913      	ldr	r1, [pc, #76]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 8008356:	4313      	orrs	r3, r2
 8008358:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800835a:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	4a11      	ldr	r2, [pc, #68]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 8008360:	f043 0310 	orr.w	r3, r3, #16
 8008364:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008366:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a0e      	ldr	r2, [pc, #56]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 800836c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008370:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008372:	f7fb ff6d 	bl	8004250 <HAL_GetTick>
 8008376:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008378:	e008      	b.n	800838c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800837a:	f7fb ff69 	bl	8004250 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b02      	cmp	r3, #2
 8008386:	d901      	bls.n	800838c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e006      	b.n	800839a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800838c:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <RCCEx_PLL3_Config+0x128>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0f0      	beq.n	800837a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	46020c00 	.word	0x46020c00
 80083a8:	80800000 	.word	0x80800000

080083ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e0dd      	b.n	800857a <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a70      	ldr	r2, [pc, #448]	; (8008584 <HAL_SPI_Init+0x1d8>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_SPI_Init+0x26>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a6e      	ldr	r2, [pc, #440]	; (8008588 <HAL_SPI_Init+0x1dc>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	e000      	b.n	80083d4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80083d2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a69      	ldr	r2, [pc, #420]	; (8008584 <HAL_SPI_Init+0x1d8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d004      	beq.n	80083ee <HAL_SPI_Init+0x42>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a67      	ldr	r2, [pc, #412]	; (8008588 <HAL_SPI_Init+0x1dc>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d105      	bne.n	80083fa <HAL_SPI_Init+0x4e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	2b0f      	cmp	r3, #15
 80083f4:	d901      	bls.n	80083fa <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e0bf      	b.n	800857a <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 f8e4 	bl	80095c8 <SPI_GetPacketSize>
 8008400:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a5f      	ldr	r2, [pc, #380]	; (8008584 <HAL_SPI_Init+0x1d8>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d004      	beq.n	8008416 <HAL_SPI_Init+0x6a>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a5d      	ldr	r2, [pc, #372]	; (8008588 <HAL_SPI_Init+0x1dc>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d102      	bne.n	800841c <HAL_SPI_Init+0x70>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b08      	cmp	r3, #8
 800841a:	d816      	bhi.n	800844a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008420:	4a5a      	ldr	r2, [pc, #360]	; (800858c <HAL_SPI_Init+0x1e0>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00e      	beq.n	8008444 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a59      	ldr	r2, [pc, #356]	; (8008590 <HAL_SPI_Init+0x1e4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d009      	beq.n	8008444 <HAL_SPI_Init+0x98>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a57      	ldr	r2, [pc, #348]	; (8008594 <HAL_SPI_Init+0x1e8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d004      	beq.n	8008444 <HAL_SPI_Init+0x98>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a56      	ldr	r2, [pc, #344]	; (8008598 <HAL_SPI_Init+0x1ec>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d104      	bne.n	800844e <HAL_SPI_Init+0xa2>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b10      	cmp	r3, #16
 8008448:	d901      	bls.n	800844e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e095      	b.n	800857a <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d106      	bne.n	8008468 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7f9 fa10 	bl	8001888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800848a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008494:	d119      	bne.n	80084ca <HAL_SPI_Init+0x11e>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800849e:	d103      	bne.n	80084a8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d008      	beq.n	80084ba <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10c      	bne.n	80084ca <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084b8:	d107      	bne.n	80084ca <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69da      	ldr	r2, [r3, #28]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d2:	431a      	orrs	r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	431a      	orrs	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084dc:	ea42 0103 	orr.w	r1, r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	431a      	orrs	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	431a      	orrs	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	431a      	orrs	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800852a:	431a      	orrs	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008536:	ea42 0103 	orr.w	r1, r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	46002000 	.word	0x46002000
 8008588:	56002000 	.word	0x56002000
 800858c:	40013000 	.word	0x40013000
 8008590:	50013000 	.word	0x50013000
 8008594:	40003800 	.word	0x40003800
 8008598:	50003800 	.word	0x50003800

0800859c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08a      	sub	sp, #40	; 0x28
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	4613      	mov	r3, r2
 80085aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3320      	adds	r3, #32
 80085b2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <HAL_SPI_Transmit+0x2a>
 80085c2:	2302      	movs	r3, #2
 80085c4:	e1f7      	b.n	80089b6 <HAL_SPI_Transmit+0x41a>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085ce:	f7fb fe3f 	bl	8004250 <HAL_GetTick>
 80085d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d007      	beq.n	80085f0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80085e0:	2302      	movs	r3, #2
 80085e2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80085ec:	7efb      	ldrb	r3, [r7, #27]
 80085ee:	e1e2      	b.n	80089b6 <HAL_SPI_Transmit+0x41a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <HAL_SPI_Transmit+0x60>
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d107      	bne.n	800860c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008608:	7efb      	ldrb	r3, [r7, #27]
 800860a:	e1d4      	b.n	80089b6 <HAL_SPI_Transmit+0x41a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2203      	movs	r2, #3
 8008610:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	88fa      	ldrh	r2, [r7, #6]
 8008626:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	88fa      	ldrh	r2, [r7, #6]
 800862e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800865c:	d107      	bne.n	800866e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800866c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	0c1b      	lsrs	r3, r3, #16
 8008676:	041b      	lsls	r3, r3, #16
 8008678:	88f9      	ldrh	r1, [r7, #6]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	430b      	orrs	r3, r1
 8008680:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f042 0201 	orr.w	r2, r2, #1
 8008690:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10c      	bne.n	80086ba <HAL_SPI_Transmit+0x11e>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086a8:	d107      	bne.n	80086ba <HAL_SPI_Transmit+0x11e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	2b0f      	cmp	r3, #15
 80086c0:	d95b      	bls.n	800877a <HAL_SPI_Transmit+0x1de>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a8f      	ldr	r2, [pc, #572]	; (8008904 <HAL_SPI_Transmit+0x368>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d04f      	beq.n	800876c <HAL_SPI_Transmit+0x1d0>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a8d      	ldr	r2, [pc, #564]	; (8008908 <HAL_SPI_Transmit+0x36c>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d04a      	beq.n	800876c <HAL_SPI_Transmit+0x1d0>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a8c      	ldr	r2, [pc, #560]	; (800890c <HAL_SPI_Transmit+0x370>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d045      	beq.n	800876c <HAL_SPI_Transmit+0x1d0>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a8a      	ldr	r2, [pc, #552]	; (8008910 <HAL_SPI_Transmit+0x374>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d147      	bne.n	800877a <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086ea:	e03f      	b.n	800876c <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d114      	bne.n	8008724 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6812      	ldr	r2, [r2, #0]
 8008704:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800870a:	1d1a      	adds	r2, r3, #4
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008716:	b29b      	uxth	r3, r3
 8008718:	3b01      	subs	r3, #1
 800871a:	b29a      	uxth	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008722:	e023      	b.n	800876c <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008724:	f7fb fd94 	bl	8004250 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d803      	bhi.n	800873c <HAL_SPI_Transmit+0x1a0>
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873a:	d102      	bne.n	8008742 <HAL_SPI_Transmit+0x1a6>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d114      	bne.n	800876c <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 fe72 	bl	800942c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008756:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e124      	b.n	80089b6 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008772:	b29b      	uxth	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1b9      	bne.n	80086ec <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008778:	e0f7      	b.n	800896a <HAL_SPI_Transmit+0x3ce>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b07      	cmp	r3, #7
 8008780:	f240 80ec 	bls.w	800895c <HAL_SPI_Transmit+0x3c0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008784:	e05d      	b.n	8008842 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b02      	cmp	r3, #2
 8008792:	d132      	bne.n	80087fa <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800879a:	b29b      	uxth	r3, r3
 800879c:	2b01      	cmp	r3, #1
 800879e:	d918      	bls.n	80087d2 <HAL_SPI_Transmit+0x236>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d014      	beq.n	80087d2 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6812      	ldr	r2, [r2, #0]
 80087b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b8:	1d1a      	adds	r2, r3, #4
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	3b02      	subs	r3, #2
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80087d0:	e037      	b.n	8008842 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d6:	881a      	ldrh	r2, [r3, #0]
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087e0:	1c9a      	adds	r2, r3, #2
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80087f8:	e023      	b.n	8008842 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087fa:	f7fb fd29 	bl	8004250 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d803      	bhi.n	8008812 <HAL_SPI_Transmit+0x276>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008810:	d102      	bne.n	8008818 <HAL_SPI_Transmit+0x27c>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d114      	bne.n	8008842 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fe07 	bl	800942c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800882c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e0b9      	b.n	80089b6 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008848:	b29b      	uxth	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d19b      	bne.n	8008786 <HAL_SPI_Transmit+0x1ea>
 800884e:	e08c      	b.n	800896a <HAL_SPI_Transmit+0x3ce>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b02      	cmp	r3, #2
 800885c:	d15a      	bne.n	8008914 <HAL_SPI_Transmit+0x378>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b03      	cmp	r3, #3
 8008868:	d918      	bls.n	800889c <HAL_SPI_Transmit+0x300>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800886e:	2b40      	cmp	r3, #64	; 0x40
 8008870:	d914      	bls.n	800889c <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6812      	ldr	r2, [r2, #0]
 800887c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008882:	1d1a      	adds	r2, r3, #4
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800888e:	b29b      	uxth	r3, r3
 8008890:	3b04      	subs	r3, #4
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800889a:	e05f      	b.n	800895c <HAL_SPI_Transmit+0x3c0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d917      	bls.n	80088d8 <HAL_SPI_Transmit+0x33c>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d013      	beq.n	80088d8 <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088b4:	881a      	ldrh	r2, [r3, #0]
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088be:	1c9a      	adds	r2, r3, #2
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	3b02      	subs	r3, #2
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80088d6:	e041      	b.n	800895c <HAL_SPI_Transmit+0x3c0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3320      	adds	r3, #32
 80088e2:	7812      	ldrb	r2, [r2, #0]
 80088e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	3b01      	subs	r3, #1
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008902:	e02b      	b.n	800895c <HAL_SPI_Transmit+0x3c0>
 8008904:	40013000 	.word	0x40013000
 8008908:	50013000 	.word	0x50013000
 800890c:	40003800 	.word	0x40003800
 8008910:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008914:	f7fb fc9c 	bl	8004250 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d803      	bhi.n	800892c <HAL_SPI_Transmit+0x390>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d102      	bne.n	8008932 <HAL_SPI_Transmit+0x396>
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d114      	bne.n	800895c <HAL_SPI_Transmit+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fd7a 	bl	800942c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008946:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e02c      	b.n	80089b6 <HAL_SPI_Transmit+0x41a>
    while (hspi->TxXferCount > 0UL)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008962:	b29b      	uxth	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	f47f af73 	bne.w	8008850 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	2108      	movs	r1, #8
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 fdf9 	bl	800956c <SPI_WaitOnFlagUntilTimeout>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d007      	beq.n	8008990 <HAL_SPI_Transmit+0x3f4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008986:	f043 0220 	orr.w	r2, r3, #32
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 fd4b 	bl	800942c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <HAL_SPI_Transmit+0x418>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e000      	b.n	80089b6 <HAL_SPI_Transmit+0x41a>
  }
  return errorcode;
 80089b4:	7efb      	ldrb	r3, [r7, #27]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3720      	adds	r7, #32
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop

080089c0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08a      	sub	sp, #40	; 0x28
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	4613      	mov	r3, r2
 80089ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3330      	adds	r3, #48	; 0x30
 80089da:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089e4:	d112      	bne.n	8008a0c <HAL_SPI_Receive+0x4c>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10e      	bne.n	8008a0c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2204      	movs	r2, #4
 80089f2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80089f6:	88fa      	ldrh	r2, [r7, #6]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	4613      	mov	r3, r2
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	68b9      	ldr	r1, [r7, #8]
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 fa04 	bl	8008e10 <HAL_SPI_TransmitReceive>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	e1fc      	b.n	8008e06 <HAL_SPI_Receive+0x446>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d101      	bne.n	8008a1a <HAL_SPI_Receive+0x5a>
 8008a16:	2302      	movs	r3, #2
 8008a18:	e1f5      	b.n	8008e06 <HAL_SPI_Receive+0x446>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a22:	f7fb fc15 	bl	8004250 <HAL_GetTick>
 8008a26:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d007      	beq.n	8008a44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008a34:	2302      	movs	r3, #2
 8008a36:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008a40:	7ffb      	ldrb	r3, [r7, #31]
 8008a42:	e1e0      	b.n	8008e06 <HAL_SPI_Receive+0x446>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <HAL_SPI_Receive+0x90>
 8008a4a:	88fb      	ldrh	r3, [r7, #6]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d107      	bne.n	8008a60 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008a5c:	7ffb      	ldrb	r3, [r7, #31]
 8008a5e:	e1d2      	b.n	8008e06 <HAL_SPI_Receive+0x446>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2204      	movs	r2, #4
 8008a64:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	88fa      	ldrh	r2, [r7, #6]
 8008a7a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	88fa      	ldrh	r2, [r7, #6]
 8008a82:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008ab0:	d107      	bne.n	8008ac2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ac0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	0c1b      	lsrs	r3, r3, #16
 8008aca:	041b      	lsls	r3, r3, #16
 8008acc:	88f9      	ldrh	r1, [r7, #6]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0201 	orr.w	r2, r2, #1
 8008ae4:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10c      	bne.n	8008b0e <HAL_SPI_Receive+0x14e>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008afc:	d107      	bne.n	8008b0e <HAL_SPI_Receive+0x14e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	2b0f      	cmp	r3, #15
 8008b14:	d95c      	bls.n	8008bd0 <HAL_SPI_Receive+0x210>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a8e      	ldr	r2, [pc, #568]	; (8008d54 <HAL_SPI_Receive+0x394>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d050      	beq.n	8008bc2 <HAL_SPI_Receive+0x202>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a8c      	ldr	r2, [pc, #560]	; (8008d58 <HAL_SPI_Receive+0x398>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d04b      	beq.n	8008bc2 <HAL_SPI_Receive+0x202>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a8b      	ldr	r2, [pc, #556]	; (8008d5c <HAL_SPI_Receive+0x39c>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d046      	beq.n	8008bc2 <HAL_SPI_Receive+0x202>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a89      	ldr	r2, [pc, #548]	; (8008d60 <HAL_SPI_Receive+0x3a0>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d148      	bne.n	8008bd0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008b3e:	e040      	b.n	8008bc2 <HAL_SPI_Receive+0x202>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	695a      	ldr	r2, [r3, #20]
 8008b46:	f248 0308 	movw	r3, #32776	; 0x8008
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d014      	beq.n	8008b7a <HAL_SPI_Receive+0x1ba>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b5a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b60:	1d1a      	adds	r2, r3, #4
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008b78:	e023      	b.n	8008bc2 <HAL_SPI_Receive+0x202>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b7a:	f7fb fb69 	bl	8004250 <HAL_GetTick>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d803      	bhi.n	8008b92 <HAL_SPI_Receive+0x1d2>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d102      	bne.n	8008b98 <HAL_SPI_Receive+0x1d8>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d114      	bne.n	8008bc2 <HAL_SPI_Receive+0x202>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fc47 	bl	800942c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e121      	b.n	8008e06 <HAL_SPI_Receive+0x446>
    while (hspi->RxXferCount > 0UL)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1b8      	bne.n	8008b40 <HAL_SPI_Receive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008bce:	e0f4      	b.n	8008dba <HAL_SPI_Receive+0x3fa>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	2b07      	cmp	r3, #7
 8008bd6:	f240 80e9 	bls.w	8008dac <HAL_SPI_Receive+0x3ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008bda:	e05b      	b.n	8008c94 <HAL_SPI_Receive+0x2d4>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d030      	beq.n	8008c4c <HAL_SPI_Receive+0x28c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d014      	beq.n	8008c22 <HAL_SPI_Receive+0x262>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008c02:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b02      	subs	r3, #2
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008c20:	e038      	b.n	8008c94 <HAL_SPI_Receive+0x2d4>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	8812      	ldrh	r2, [r2, #0]
 8008c2a:	b292      	uxth	r2, r2
 8008c2c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c32:	1c9a      	adds	r2, r3, #2
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount--;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	3b01      	subs	r3, #1
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008c4a:	e023      	b.n	8008c94 <HAL_SPI_Receive+0x2d4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c4c:	f7fb fb00 	bl	8004250 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d803      	bhi.n	8008c64 <HAL_SPI_Receive+0x2a4>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c62:	d102      	bne.n	8008c6a <HAL_SPI_Receive+0x2aa>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d114      	bne.n	8008c94 <HAL_SPI_Receive+0x2d4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 fbde 	bl	800942c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e0b8      	b.n	8008e06 <HAL_SPI_Receive+0x446>
    while (hspi->RxXferCount > 0UL)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d19d      	bne.n	8008bdc <HAL_SPI_Receive+0x21c>
 8008ca0:	e08b      	b.n	8008dba <HAL_SPI_Receive+0x3fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d059      	beq.n	8008d64 <HAL_SPI_Receive+0x3a4>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d014      	beq.n	8008ce8 <HAL_SPI_Receive+0x328>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008cc8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cce:	1d1a      	adds	r2, r3, #4
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3b04      	subs	r3, #4
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008ce6:	e061      	b.n	8008dac <HAL_SPI_Receive+0x3ec>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cf6:	d914      	bls.n	8008d22 <HAL_SPI_Receive+0x362>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	8812      	ldrh	r2, [r2, #0]
 8008d00:	b292      	uxth	r2, r2
 8008d02:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d08:	1c9a      	adds	r2, r3, #2
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	3b02      	subs	r3, #2
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008d20:	e044      	b.n	8008dac <HAL_SPI_Receive+0x3ec>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d2e:	7812      	ldrb	r2, [r2, #0]
 8008d30:	b2d2      	uxtb	r2, r2
 8008d32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount--;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008d50:	e02c      	b.n	8008dac <HAL_SPI_Receive+0x3ec>
 8008d52:	bf00      	nop
 8008d54:	40013000 	.word	0x40013000
 8008d58:	50013000 	.word	0x50013000
 8008d5c:	40003800 	.word	0x40003800
 8008d60:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d64:	f7fb fa74 	bl	8004250 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d803      	bhi.n	8008d7c <HAL_SPI_Receive+0x3bc>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7a:	d102      	bne.n	8008d82 <HAL_SPI_Receive+0x3c2>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d114      	bne.n	8008dac <HAL_SPI_Receive+0x3ec>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 fb52 	bl	800942c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e02c      	b.n	8008e06 <HAL_SPI_Receive+0x446>
    while (hspi->RxXferCount > 0UL)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f47f af74 	bne.w	8008ca2 <HAL_SPI_Receive+0x2e2>
      }
    }
  }

  /* Wait for Rx (and CRC) data to be received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2108      	movs	r1, #8
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 fbd1 	bl	800956c <SPI_WaitOnFlagUntilTimeout>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d007      	beq.n	8008de0 <HAL_SPI_Receive+0x420>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd6:	f043 0220 	orr.w	r2, r3, #32
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 fb23 	bl	800942c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <HAL_SPI_Receive+0x444>
  {
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e000      	b.n	8008e06 <HAL_SPI_Receive+0x446>
  }
  return errorcode;
 8008e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3720      	adds	r7, #32
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop

08008e10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08e      	sub	sp, #56	; 0x38
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3320      	adds	r3, #32
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3330      	adds	r3, #48	; 0x30
 8008e32:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_SPI_TransmitReceive+0x32>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e2f0      	b.n	8009424 <HAL_SPI_TransmitReceive+0x614>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e4a:	f7fb fa01 	bl	8004250 <HAL_GetTick>
 8008e4e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008e50:	887b      	ldrh	r3, [r7, #2]
 8008e52:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008e54:	887b      	ldrh	r3, [r7, #2]
 8008e56:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008e5e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e66:	7efb      	ldrb	r3, [r7, #27]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d014      	beq.n	8008e96 <HAL_SPI_TransmitReceive+0x86>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e72:	d106      	bne.n	8008e82 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d102      	bne.n	8008e82 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008e7c:	7efb      	ldrb	r3, [r7, #27]
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d009      	beq.n	8008e96 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8008e82:	2302      	movs	r3, #2
 8008e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008e90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e94:	e2c6      	b.n	8009424 <HAL_SPI_TransmitReceive+0x614>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0x98>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0x98>
 8008ea2:	887b      	ldrh	r3, [r7, #2]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eba:	e2b3      	b.n	8009424 <HAL_SPI_TransmitReceive+0x614>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	d003      	beq.n	8008ed0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2205      	movs	r2, #5
 8008ecc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	887a      	ldrh	r2, [r7, #2]
 8008ee2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	887a      	ldrh	r2, [r7, #2]
 8008eea:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	887a      	ldrh	r2, [r7, #2]
 8008ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	887a      	ldrh	r2, [r7, #2]
 8008f00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	0c1b      	lsrs	r3, r3, #16
 8008f18:	041b      	lsls	r3, r3, #16
 8008f1a:	8879      	ldrh	r1, [r7, #2]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	6812      	ldr	r2, [r2, #0]
 8008f20:	430b      	orrs	r3, r1
 8008f22:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0201 	orr.w	r2, r2, #1
 8008f32:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10c      	bne.n	8008f5c <HAL_SPI_TransmitReceive+0x14c>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f4a:	d107      	bne.n	8008f5c <HAL_SPI_TransmitReceive+0x14c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	2b0f      	cmp	r3, #15
 8008f62:	f240 8085 	bls.w	8009070 <HAL_SPI_TransmitReceive+0x260>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a98      	ldr	r2, [pc, #608]	; (80091cc <HAL_SPI_TransmitReceive+0x3bc>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d078      	beq.n	8009062 <HAL_SPI_TransmitReceive+0x252>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a96      	ldr	r2, [pc, #600]	; (80091d0 <HAL_SPI_TransmitReceive+0x3c0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d073      	beq.n	8009062 <HAL_SPI_TransmitReceive+0x252>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a95      	ldr	r2, [pc, #596]	; (80091d4 <HAL_SPI_TransmitReceive+0x3c4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d06e      	beq.n	8009062 <HAL_SPI_TransmitReceive+0x252>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a93      	ldr	r2, [pc, #588]	; (80091d8 <HAL_SPI_TransmitReceive+0x3c8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d170      	bne.n	8009070 <HAL_SPI_TransmitReceive+0x260>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f8e:	e068      	b.n	8009062 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d11a      	bne.n	8008fd4 <HAL_SPI_TransmitReceive+0x1c4>
 8008f9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d017      	beq.n	8008fd4 <HAL_SPI_TransmitReceive+0x1c4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6812      	ldr	r2, [r2, #0]
 8008fae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb4:	1d1a      	adds	r2, r3, #4
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695a      	ldr	r2, [r3, #20]
 8008fda:	f248 0308 	movw	r3, #32776	; 0x8008
 8008fde:	4013      	ands	r3, r2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d01a      	beq.n	800901a <HAL_SPI_TransmitReceive+0x20a>
 8008fe4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d017      	beq.n	800901a <HAL_SPI_TransmitReceive+0x20a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ff4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ffa:	1d1a      	adds	r2, r3, #4
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009006:	b29b      	uxth	r3, r3
 8009008:	3b01      	subs	r3, #1
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009018:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800901a:	f7fb f919 	bl	8004250 <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009026:	429a      	cmp	r2, r3
 8009028:	d803      	bhi.n	8009032 <HAL_SPI_TransmitReceive+0x222>
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009030:	d102      	bne.n	8009038 <HAL_SPI_TransmitReceive+0x228>
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	2b00      	cmp	r3, #0
 8009036:	d114      	bne.n	8009062 <HAL_SPI_TransmitReceive+0x252>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 f9f7 	bl	800942c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800904c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e1e0      	b.n	8009424 <HAL_SPI_TransmitReceive+0x614>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009064:	2b00      	cmp	r3, #0
 8009066:	d193      	bne.n	8008f90 <HAL_SPI_TransmitReceive+0x180>
 8009068:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d190      	bne.n	8008f90 <HAL_SPI_TransmitReceive+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800906e:	e1b2      	b.n	80093d6 <HAL_SPI_TransmitReceive+0x5c6>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	2b07      	cmp	r3, #7
 8009076:	f240 81a6 	bls.w	80093c6 <HAL_SPI_TransmitReceive+0x5b6>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800907a:	e0af      	b.n	80091dc <HAL_SPI_TransmitReceive+0x3cc>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b02      	cmp	r3, #2
 8009088:	d139      	bne.n	80090fe <HAL_SPI_TransmitReceive+0x2ee>
 800908a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800908c:	2b00      	cmp	r3, #0
 800908e:	d036      	beq.n	80090fe <HAL_SPI_TransmitReceive+0x2ee>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009090:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009092:	2b01      	cmp	r3, #1
 8009094:	d91c      	bls.n	80090d0 <HAL_SPI_TransmitReceive+0x2c0>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d018      	beq.n	80090d0 <HAL_SPI_TransmitReceive+0x2c0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6812      	ldr	r2, [r2, #0]
 80090a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ae:	1d1a      	adds	r2, r3, #4
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3b02      	subs	r3, #2
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_TxXferCount = hspi->TxXferCount;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80090ce:	e016      	b.n	80090fe <HAL_SPI_TransmitReceive+0x2ee>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090d4:	881a      	ldrh	r2, [r3, #0]
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090de:	1c9a      	adds	r2, r3, #2
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_TxXferCount = hspi->TxXferCount;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80090fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d03a      	beq.n	8009182 <HAL_SPI_TransmitReceive+0x372>
 800910c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d037      	beq.n	8009182 <HAL_SPI_TransmitReceive+0x372>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d018      	beq.n	8009152 <HAL_SPI_TransmitReceive+0x342>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009128:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800912a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009130:	1d1a      	adds	r2, r3, #4
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800913c:	b29b      	uxth	r3, r3
 800913e:	3b02      	subs	r3, #2
 8009140:	b29a      	uxth	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800914e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009150:	e017      	b.n	8009182 <HAL_SPI_TransmitReceive+0x372>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009156:	6a3a      	ldr	r2, [r7, #32]
 8009158:	8812      	ldrh	r2, [r2, #0]
 800915a:	b292      	uxth	r2, r2
 800915c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009162:	1c9a      	adds	r2, r3, #2
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800916e:	b29b      	uxth	r3, r3
 8009170:	3b01      	subs	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009180:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009182:	f7fb f865 	bl	8004250 <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800918e:	429a      	cmp	r2, r3
 8009190:	d803      	bhi.n	800919a <HAL_SPI_TransmitReceive+0x38a>
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009198:	d102      	bne.n	80091a0 <HAL_SPI_TransmitReceive+0x390>
 800919a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919c:	2b00      	cmp	r3, #0
 800919e:	d11d      	bne.n	80091dc <HAL_SPI_TransmitReceive+0x3cc>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 f943 	bl	800942c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e12c      	b.n	8009424 <HAL_SPI_TransmitReceive+0x614>
 80091ca:	bf00      	nop
 80091cc:	40013000 	.word	0x40013000
 80091d0:	50013000 	.word	0x50013000
 80091d4:	40003800 	.word	0x40003800
 80091d8:	50003800 	.word	0x50003800
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80091dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f47f af4c 	bne.w	800907c <HAL_SPI_TransmitReceive+0x26c>
 80091e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f47f af48 	bne.w	800907c <HAL_SPI_TransmitReceive+0x26c>
 80091ec:	e0f3      	b.n	80093d6 <HAL_SPI_TransmitReceive+0x5c6>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d15a      	bne.n	80092b2 <HAL_SPI_TransmitReceive+0x4a2>
 80091fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d057      	beq.n	80092b2 <HAL_SPI_TransmitReceive+0x4a2>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009204:	2b03      	cmp	r3, #3
 8009206:	d91c      	bls.n	8009242 <HAL_SPI_TransmitReceive+0x432>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920c:	2b40      	cmp	r3, #64	; 0x40
 800920e:	d918      	bls.n	8009242 <HAL_SPI_TransmitReceive+0x432>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6812      	ldr	r2, [r2, #0]
 800921a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009220:	1d1a      	adds	r2, r3, #4
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800922c:	b29b      	uxth	r3, r3
 800922e:	3b04      	subs	r3, #4
 8009230:	b29a      	uxth	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_TxXferCount = hspi->TxXferCount;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800923e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009240:	e037      	b.n	80092b2 <HAL_SPI_TransmitReceive+0x4a2>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009244:	2b01      	cmp	r3, #1
 8009246:	d91b      	bls.n	8009280 <HAL_SPI_TransmitReceive+0x470>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924c:	2b00      	cmp	r3, #0
 800924e:	d017      	beq.n	8009280 <HAL_SPI_TransmitReceive+0x470>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009254:	881a      	ldrh	r2, [r3, #0]
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800925e:	1c9a      	adds	r2, r3, #2
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800926a:	b29b      	uxth	r3, r3
 800926c:	3b02      	subs	r3, #2
 800926e:	b29a      	uxth	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_TxXferCount = hspi->TxXferCount;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800927c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800927e:	e018      	b.n	80092b2 <HAL_SPI_TransmitReceive+0x4a2>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3320      	adds	r3, #32
 800928a:	7812      	ldrb	r2, [r2, #0]
 800928c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800929e:	b29b      	uxth	r3, r3
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_TxXferCount = hspi->TxXferCount;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d05e      	beq.n	800937e <HAL_SPI_TransmitReceive+0x56e>
 80092c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d05b      	beq.n	800937e <HAL_SPI_TransmitReceive+0x56e>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d018      	beq.n	8009306 <HAL_SPI_TransmitReceive+0x4f6>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80092de:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e4:	1d1a      	adds	r2, r3, #4
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	3b04      	subs	r3, #4
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009302:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009304:	e03b      	b.n	800937e <HAL_SPI_TransmitReceive+0x56e>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	695b      	ldr	r3, [r3, #20]
 800930c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009314:	d918      	bls.n	8009348 <HAL_SPI_TransmitReceive+0x538>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800931a:	6a3a      	ldr	r2, [r7, #32]
 800931c:	8812      	ldrh	r2, [r2, #0]
 800931e:	b292      	uxth	r2, r2
 8009320:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009326:	1c9a      	adds	r2, r3, #2
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009332:	b29b      	uxth	r3, r3
 8009334:	3b02      	subs	r3, #2
 8009336:	b29a      	uxth	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8009344:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009346:	e01a      	b.n	800937e <HAL_SPI_TransmitReceive+0x56e>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	b2d2      	uxtb	r2, r2
 8009358:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	66da      	str	r2, [r3, #108]	; 0x6c
          hspi->RxXferCount--;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800936a:	b29b      	uxth	r3, r3
 800936c:	3b01      	subs	r3, #1
 800936e:	b29a      	uxth	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800937c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800937e:	f7fa ff67 	bl	8004250 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800938a:	429a      	cmp	r2, r3
 800938c:	d803      	bhi.n	8009396 <HAL_SPI_TransmitReceive+0x586>
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009394:	d102      	bne.n	800939c <HAL_SPI_TransmitReceive+0x58c>
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	2b00      	cmp	r3, #0
 800939a:	d114      	bne.n	80093c6 <HAL_SPI_TransmitReceive+0x5b6>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 f845 	bl	800942c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e02e      	b.n	8009424 <HAL_SPI_TransmitReceive+0x614>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80093c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f47f af10 	bne.w	80091ee <HAL_SPI_TransmitReceive+0x3de>
 80093ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f47f af0c 	bne.w	80091ee <HAL_SPI_TransmitReceive+0x3de>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	2200      	movs	r2, #0
 80093de:	2108      	movs	r1, #8
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 f8c3 	bl	800956c <SPI_WaitOnFlagUntilTimeout>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d007      	beq.n	80093fc <HAL_SPI_TransmitReceive+0x5ec>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f2:	f043 0220 	orr.w	r2, r3, #32
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f815 	bl	800942c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <HAL_SPI_TransmitReceive+0x610>
  {
    return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e001      	b.n	8009424 <HAL_SPI_TransmitReceive+0x614>
  }
  return errorcode;
 8009420:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009424:	4618      	mov	r0, r3
 8009426:	3730      	adds	r7, #48	; 0x30
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	699a      	ldr	r2, [r3, #24]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 0208 	orr.w	r2, r2, #8
 800944a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0210 	orr.w	r2, r2, #16
 800945a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0201 	bic.w	r2, r2, #1
 800946a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6812      	ldr	r2, [r2, #0]
 8009476:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800947a:	f023 0303 	bic.w	r3, r3, #3
 800947e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800948e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b04      	cmp	r3, #4
 800949a:	d014      	beq.n	80094c6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f003 0320 	and.w	r3, r3, #32
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00f      	beq.n	80094c6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	699a      	ldr	r2, [r3, #24]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f042 0220 	orr.w	r2, r2, #32
 80094c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d014      	beq.n	80094fc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00f      	beq.n	80094fc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094e2:	f043 0204 	orr.w	r2, r3, #4
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699a      	ldr	r2, [r3, #24]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00f      	beq.n	8009526 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800950c:	f043 0201 	orr.w	r2, r3, #1
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	699a      	ldr	r2, [r3, #24]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009524:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00f      	beq.n	8009550 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009536:	f043 0208 	orr.w	r2, r3, #8
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699a      	ldr	r2, [r3, #24]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800954e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8009560:	bf00      	nop
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	4613      	mov	r3, r2
 800957a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800957c:	e010      	b.n	80095a0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800957e:	f7fa fe67 	bl	8004250 <HAL_GetTick>
 8009582:	4602      	mov	r2, r0
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	429a      	cmp	r2, r3
 800958c:	d803      	bhi.n	8009596 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d102      	bne.n	800959c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e00f      	b.n	80095c0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	695a      	ldr	r2, [r3, #20]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	4013      	ands	r3, r2
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	bf0c      	ite	eq
 80095b0:	2301      	moveq	r3, #1
 80095b2:	2300      	movne	r3, #0
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	461a      	mov	r2, r3
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d0df      	beq.n	800957e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d4:	095b      	lsrs	r3, r3, #5
 80095d6:	3301      	adds	r3, #1
 80095d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	3301      	adds	r3, #1
 80095e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	3307      	adds	r3, #7
 80095e6:	08db      	lsrs	r3, r3, #3
 80095e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	fb02 f303 	mul.w	r3, r2, r3
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b01      	cmp	r3, #1
 8009612:	d12e      	bne.n	8009672 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800961a:	2b01      	cmp	r3, #1
 800961c:	d101      	bne.n	8009622 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800961e:	2302      	movs	r3, #2
 8009620:	e028      	b.n	8009674 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2202      	movs	r2, #2
 800962e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f022 0201 	bic.w	r2, r2, #1
 8009640:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800964e:	ea42 0103 	orr.w	r1, r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	e000      	b.n	8009674 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
  }
}
 8009674:	4618      	mov	r0, r3
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e042      	b.n	8009718 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009698:	2b00      	cmp	r3, #0
 800969a:	d106      	bne.n	80096aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7f8 f957 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2224      	movs	r2, #36	; 0x24
 80096ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0201 	bic.w	r2, r2, #1
 80096c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f8c2 	bl	800984c <UART_SetConfig>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d101      	bne.n	80096d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e022      	b.n	8009718 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fa46 	bl	8009b6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f042 0201 	orr.w	r2, r2, #1
 800970e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 facd 	bl	8009cb0 <UART_CheckIdleState>
 8009716:	4603      	mov	r3, r0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	; 0x28
 8009724:	af02      	add	r7, sp, #8
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	603b      	str	r3, [r7, #0]
 800972c:	4613      	mov	r3, r2
 800972e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009736:	2b20      	cmp	r3, #32
 8009738:	f040 8083 	bne.w	8009842 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <HAL_UART_Transmit+0x28>
 8009742:	88fb      	ldrh	r3, [r7, #6]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e07b      	b.n	8009844 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009752:	2b01      	cmp	r3, #1
 8009754:	d101      	bne.n	800975a <HAL_UART_Transmit+0x3a>
 8009756:	2302      	movs	r3, #2
 8009758:	e074      	b.n	8009844 <HAL_UART_Transmit+0x124>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2221      	movs	r2, #33	; 0x21
 800976e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009772:	f7fa fd6d 	bl	8004250 <HAL_GetTick>
 8009776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	88fa      	ldrh	r2, [r7, #6]
 800977c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	88fa      	ldrh	r2, [r7, #6]
 8009784:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009790:	d108      	bne.n	80097a4 <HAL_UART_Transmit+0x84>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d104      	bne.n	80097a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	61bb      	str	r3, [r7, #24]
 80097a2:	e003      	b.n	80097ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80097b4:	e02c      	b.n	8009810 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2200      	movs	r2, #0
 80097be:	2180      	movs	r1, #128	; 0x80
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 fac0 	bl	8009d46 <UART_WaitOnFlagUntilTimeout>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e039      	b.n	8009844 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10b      	bne.n	80097ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	3302      	adds	r3, #2
 80097ea:	61bb      	str	r3, [r7, #24]
 80097ec:	e007      	b.n	80097fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	781a      	ldrb	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	3301      	adds	r3, #1
 80097fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009816:	b29b      	uxth	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1cc      	bne.n	80097b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2200      	movs	r2, #0
 8009824:	2140      	movs	r1, #64	; 0x40
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 fa8d 	bl	8009d46 <UART_WaitOnFlagUntilTimeout>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e006      	b.n	8009844 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2220      	movs	r2, #32
 800983a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	e000      	b.n	8009844 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009842:	2302      	movs	r3, #2
  }
}
 8009844:	4618      	mov	r0, r3
 8009846:	3720      	adds	r7, #32
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800984c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009850:	b08e      	sub	sp, #56	; 0x38
 8009852:	af00      	add	r7, sp, #0
 8009854:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a99      	ldr	r2, [pc, #612]	; (8009ac8 <UART_SetConfig+0x27c>)
 8009862:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	431a      	orrs	r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	431a      	orrs	r2, r3
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	4313      	orrs	r3, r2
 800987a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4b92      	ldr	r3, [pc, #584]	; (8009acc <UART_SetConfig+0x280>)
 8009884:	4013      	ands	r3, r2
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	6812      	ldr	r2, [r2, #0]
 800988a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800988c:	430b      	orrs	r3, r1
 800988e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	68da      	ldr	r2, [r3, #12]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a85      	ldr	r2, [pc, #532]	; (8009ac8 <UART_SetConfig+0x27c>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d009      	beq.n	80098ca <UART_SetConfig+0x7e>
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a85      	ldr	r2, [pc, #532]	; (8009ad0 <UART_SetConfig+0x284>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d004      	beq.n	80098ca <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
 80098c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098c6:	4313      	orrs	r3, r2
 80098c8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80098d4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	6812      	ldr	r2, [r2, #0]
 80098dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098de:	430b      	orrs	r3, r1
 80098e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	f023 010f 	bic.w	r1, r3, #15
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a75      	ldr	r2, [pc, #468]	; (8009ad4 <UART_SetConfig+0x288>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d102      	bne.n	8009908 <UART_SetConfig+0xbc>
 8009902:	2301      	movs	r3, #1
 8009904:	633b      	str	r3, [r7, #48]	; 0x30
 8009906:	e029      	b.n	800995c <UART_SetConfig+0x110>
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a72      	ldr	r2, [pc, #456]	; (8009ad8 <UART_SetConfig+0x28c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d102      	bne.n	8009918 <UART_SetConfig+0xcc>
 8009912:	2302      	movs	r3, #2
 8009914:	633b      	str	r3, [r7, #48]	; 0x30
 8009916:	e021      	b.n	800995c <UART_SetConfig+0x110>
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a6f      	ldr	r2, [pc, #444]	; (8009adc <UART_SetConfig+0x290>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d102      	bne.n	8009928 <UART_SetConfig+0xdc>
 8009922:	2304      	movs	r3, #4
 8009924:	633b      	str	r3, [r7, #48]	; 0x30
 8009926:	e019      	b.n	800995c <UART_SetConfig+0x110>
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a6c      	ldr	r2, [pc, #432]	; (8009ae0 <UART_SetConfig+0x294>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d102      	bne.n	8009938 <UART_SetConfig+0xec>
 8009932:	2308      	movs	r3, #8
 8009934:	633b      	str	r3, [r7, #48]	; 0x30
 8009936:	e011      	b.n	800995c <UART_SetConfig+0x110>
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a69      	ldr	r2, [pc, #420]	; (8009ae4 <UART_SetConfig+0x298>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d102      	bne.n	8009948 <UART_SetConfig+0xfc>
 8009942:	2310      	movs	r3, #16
 8009944:	633b      	str	r3, [r7, #48]	; 0x30
 8009946:	e009      	b.n	800995c <UART_SetConfig+0x110>
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a5e      	ldr	r2, [pc, #376]	; (8009ac8 <UART_SetConfig+0x27c>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d102      	bne.n	8009958 <UART_SetConfig+0x10c>
 8009952:	2320      	movs	r3, #32
 8009954:	633b      	str	r3, [r7, #48]	; 0x30
 8009956:	e001      	b.n	800995c <UART_SetConfig+0x110>
 8009958:	2300      	movs	r3, #0
 800995a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a59      	ldr	r2, [pc, #356]	; (8009ac8 <UART_SetConfig+0x27c>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d004      	beq.n	8009970 <UART_SetConfig+0x124>
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a59      	ldr	r2, [pc, #356]	; (8009ad0 <UART_SetConfig+0x284>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d16d      	bne.n	8009a4c <UART_SetConfig+0x200>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009972:	f7fd faf3 	bl	8006f5c <HAL_RCCEx_GetPeriphCLKFreq>
 8009976:	62b8      	str	r0, [r7, #40]	; 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 80df 	beq.w	8009b3e <UART_SetConfig+0x2f2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	4a58      	ldr	r2, [pc, #352]	; (8009ae8 <UART_SetConfig+0x29c>)
 8009986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800998a:	461a      	mov	r2, r3
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009992:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	4613      	mov	r3, r2
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	4413      	add	r3, r2
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d305      	bcc.n	80099b0 <UART_SetConfig+0x164>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d903      	bls.n	80099b8 <UART_SetConfig+0x16c>
      {
        ret = HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80099b6:	e048      	b.n	8009a4a <UART_SetConfig+0x1fe>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	2200      	movs	r2, #0
 80099bc:	60bb      	str	r3, [r7, #8]
 80099be:	60fa      	str	r2, [r7, #12]
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	4a48      	ldr	r2, [pc, #288]	; (8009ae8 <UART_SetConfig+0x29c>)
 80099c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	2200      	movs	r2, #0
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099da:	f7f7 f909 	bl	8000bf0 <__aeabi_uldivmod>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4610      	mov	r0, r2
 80099e4:	4619      	mov	r1, r3
 80099e6:	f04f 0200 	mov.w	r2, #0
 80099ea:	f04f 0300 	mov.w	r3, #0
 80099ee:	020b      	lsls	r3, r1, #8
 80099f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099f4:	0202      	lsls	r2, r0, #8
 80099f6:	6979      	ldr	r1, [r7, #20]
 80099f8:	6849      	ldr	r1, [r1, #4]
 80099fa:	0849      	lsrs	r1, r1, #1
 80099fc:	2000      	movs	r0, #0
 80099fe:	460c      	mov	r4, r1
 8009a00:	4605      	mov	r5, r0
 8009a02:	eb12 0804 	adds.w	r8, r2, r4
 8009a06:	eb43 0905 	adc.w	r9, r3, r5
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	469a      	mov	sl, r3
 8009a12:	4693      	mov	fp, r2
 8009a14:	4652      	mov	r2, sl
 8009a16:	465b      	mov	r3, fp
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	f7f7 f8e8 	bl	8000bf0 <__aeabi_uldivmod>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4613      	mov	r3, r2
 8009a26:	627b      	str	r3, [r7, #36]	; 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a2e:	d308      	bcc.n	8009a42 <UART_SetConfig+0x1f6>
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a36:	d204      	bcs.n	8009a42 <UART_SetConfig+0x1f6>
        {
          huart->Instance->BRR = usartdiv;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a3e:	60da      	str	r2, [r3, #12]
 8009a40:	e003      	b.n	8009a4a <UART_SetConfig+0x1fe>
        }
        else
        {
          ret = HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (pclk != 0U)
 8009a48:	e079      	b.n	8009b3e <UART_SetConfig+0x2f2>
 8009a4a:	e078      	b.n	8009b3e <UART_SetConfig+0x2f2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a54:	d14a      	bne.n	8009aec <UART_SetConfig+0x2a0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009a56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a58:	f7fd fa80 	bl	8006f5c <HAL_RCCEx_GetPeriphCLKFreq>
 8009a5c:	62b8      	str	r0, [r7, #40]	; 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d06c      	beq.n	8009b3e <UART_SetConfig+0x2f2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	4a1f      	ldr	r2, [pc, #124]	; (8009ae8 <UART_SetConfig+0x29c>)
 8009a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a76:	005a      	lsls	r2, r3, #1
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	085b      	lsrs	r3, r3, #1
 8009a7e:	441a      	add	r2, r3
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	2b0f      	cmp	r3, #15
 8009a90:	d916      	bls.n	8009ac0 <UART_SetConfig+0x274>
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a98:	d212      	bcs.n	8009ac0 <UART_SetConfig+0x274>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	f023 030f 	bic.w	r3, r3, #15
 8009aa2:	847b      	strh	r3, [r7, #34]	; 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	085b      	lsrs	r3, r3, #1
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	847b      	strh	r3, [r7, #34]	; 0x22
        huart->Instance->BRR = brrtemp;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009abc:	60da      	str	r2, [r3, #12]
 8009abe:	e03e      	b.n	8009b3e <UART_SetConfig+0x2f2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ac6:	e03a      	b.n	8009b3e <UART_SetConfig+0x2f2>
 8009ac8:	46002400 	.word	0x46002400
 8009acc:	cfff69f3 	.word	0xcfff69f3
 8009ad0:	56002400 	.word	0x56002400
 8009ad4:	40013800 	.word	0x40013800
 8009ad8:	40004400 	.word	0x40004400
 8009adc:	40004800 	.word	0x40004800
 8009ae0:	40004c00 	.word	0x40004c00
 8009ae4:	40005000 	.word	0x40005000
 8009ae8:	0800d874 	.word	0x0800d874
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aee:	f7fd fa35 	bl	8006f5c <HAL_RCCEx_GetPeriphCLKFreq>
 8009af2:	62b8      	str	r0, [r7, #40]	; 0x28

    if (pclk != 0U)
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d021      	beq.n	8009b3e <UART_SetConfig+0x2f2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	4a1a      	ldr	r2, [pc, #104]	; (8009b68 <UART_SetConfig+0x31c>)
 8009b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b04:	461a      	mov	r2, r3
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	085b      	lsrs	r3, r3, #1
 8009b12:	441a      	add	r2, r3
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	627b      	str	r3, [r7, #36]	; 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	2b0f      	cmp	r3, #15
 8009b24:	d908      	bls.n	8009b38 <UART_SetConfig+0x2ec>
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b2c:	d204      	bcs.n	8009b38 <UART_SetConfig+0x2ec>
      {
        huart->Instance->BRR = usartdiv;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b34:	60da      	str	r2, [r3, #12]
 8009b36:	e002      	b.n	8009b3e <UART_SetConfig+0x2f2>
      }
      else
      {
        ret = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2200      	movs	r2, #0
 8009b52:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2200      	movs	r2, #0
 8009b58:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3738      	adds	r7, #56	; 0x38
 8009b62:	46bd      	mov	sp, r7
 8009b64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b68:	0800d874 	.word	0x0800d874

08009b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00a      	beq.n	8009b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9a:	f003 0302 	and.w	r3, r3, #2
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00a      	beq.n	8009bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbc:	f003 0304 	and.w	r3, r3, #4
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00a      	beq.n	8009bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bde:	f003 0308 	and.w	r3, r3, #8
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00a      	beq.n	8009bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c00:	f003 0310 	and.w	r3, r3, #16
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00a      	beq.n	8009c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c22:	f003 0320 	and.w	r3, r3, #32
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d01a      	beq.n	8009c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c6a:	d10a      	bne.n	8009c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	430a      	orrs	r2, r1
 8009ca2:	605a      	str	r2, [r3, #4]
  }
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cc0:	f7fa fac6 	bl	8004250 <HAL_GetTick>
 8009cc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0308 	and.w	r3, r3, #8
 8009cd0:	2b08      	cmp	r3, #8
 8009cd2:	d10e      	bne.n	8009cf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f82f 	bl	8009d46 <UART_WaitOnFlagUntilTimeout>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e025      	b.n	8009d3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0304 	and.w	r3, r3, #4
 8009cfc:	2b04      	cmp	r3, #4
 8009cfe:	d10e      	bne.n	8009d1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f819 	bl	8009d46 <UART_WaitOnFlagUntilTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e00f      	b.n	8009d3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2220      	movs	r2, #32
 8009d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b09c      	sub	sp, #112	; 0x70
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	60b9      	str	r1, [r7, #8]
 8009d50:	603b      	str	r3, [r7, #0]
 8009d52:	4613      	mov	r3, r2
 8009d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d56:	e0a9      	b.n	8009eac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5e:	f000 80a5 	beq.w	8009eac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d62:	f7fa fa75 	bl	8004250 <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d302      	bcc.n	8009d78 <UART_WaitOnFlagUntilTimeout+0x32>
 8009d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d140      	bne.n	8009dfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e6      	bne.n	8009d78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3308      	adds	r3, #8
 8009db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db4:	e853 3f00 	ldrex	r3, [r3]
 8009db8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	f023 0301 	bic.w	r3, r3, #1
 8009dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009dca:	64ba      	str	r2, [r7, #72]	; 0x48
 8009dcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dd2:	e841 2300 	strex	r3, r2, [r1]
 8009dd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e5      	bne.n	8009daa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2220      	movs	r2, #32
 8009de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e069      	b.n	8009ece <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d051      	beq.n	8009eac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e16:	d149      	bne.n	8009eac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2a:	e853 3f00 	ldrex	r3, [r3]
 8009e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e40:	637b      	str	r3, [r7, #52]	; 0x34
 8009e42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e48:	e841 2300 	strex	r3, r2, [r1]
 8009e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1e6      	bne.n	8009e22 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3308      	adds	r3, #8
 8009e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	e853 3f00 	ldrex	r3, [r3]
 8009e62:	613b      	str	r3, [r7, #16]
   return(result);
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f023 0301 	bic.w	r3, r3, #1
 8009e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3308      	adds	r3, #8
 8009e72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e74:	623a      	str	r2, [r7, #32]
 8009e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	69f9      	ldr	r1, [r7, #28]
 8009e7a:	6a3a      	ldr	r2, [r7, #32]
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e5      	bne.n	8009e54 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2220      	movs	r2, #32
 8009e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e010      	b.n	8009ece <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	69da      	ldr	r2, [r3, #28]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	bf0c      	ite	eq
 8009ebc:	2301      	moveq	r3, #1
 8009ebe:	2300      	movne	r3, #0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	79fb      	ldrb	r3, [r7, #7]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	f43f af46 	beq.w	8009d58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3770      	adds	r7, #112	; 0x70
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b085      	sub	sp, #20
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d101      	bne.n	8009eec <HAL_UARTEx_DisableFifoMode+0x16>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e027      	b.n	8009f3c <HAL_UARTEx_DisableFifoMode+0x66>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2224      	movs	r2, #36	; 0x24
 8009ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f022 0201 	bic.w	r2, r2, #1
 8009f12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009f1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d101      	bne.n	8009f60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e02d      	b.n	8009fbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2224      	movs	r2, #36	; 0x24
 8009f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f022 0201 	bic.w	r2, r2, #1
 8009f86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f84f 	bl	800a040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2220      	movs	r2, #32
 8009fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d101      	bne.n	8009fdc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e02d      	b.n	800a038 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2224      	movs	r2, #36	; 0x24
 8009fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f022 0201 	bic.w	r2, r2, #1
 800a002:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	430a      	orrs	r2, r1
 800a016:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f811 	bl	800a040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d108      	bne.n	800a062 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a060:	e031      	b.n	800a0c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a062:	2308      	movs	r3, #8
 800a064:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a066:	2308      	movs	r3, #8
 800a068:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	0e5b      	lsrs	r3, r3, #25
 800a072:	b2db      	uxtb	r3, r3
 800a074:	f003 0307 	and.w	r3, r3, #7
 800a078:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	0f5b      	lsrs	r3, r3, #29
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
 800a08c:	7b3a      	ldrb	r2, [r7, #12]
 800a08e:	4911      	ldr	r1, [pc, #68]	; (800a0d4 <UARTEx_SetNbDataToProcess+0x94>)
 800a090:	5c8a      	ldrb	r2, [r1, r2]
 800a092:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a096:	7b3a      	ldrb	r2, [r7, #12]
 800a098:	490f      	ldr	r1, [pc, #60]	; (800a0d8 <UARTEx_SetNbDataToProcess+0x98>)
 800a09a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a09c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
 800a0aa:	7b7a      	ldrb	r2, [r7, #13]
 800a0ac:	4909      	ldr	r1, [pc, #36]	; (800a0d4 <UARTEx_SetNbDataToProcess+0x94>)
 800a0ae:	5c8a      	ldrb	r2, [r1, r2]
 800a0b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0b4:	7b7a      	ldrb	r2, [r7, #13]
 800a0b6:	4908      	ldr	r1, [pc, #32]	; (800a0d8 <UARTEx_SetNbDataToProcess+0x98>)
 800a0b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a0c6:	bf00      	nop
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	0800d88c 	.word	0x0800d88c
 800a0d8:	0800d894 	.word	0x0800d894

0800a0dc <config>:
#include "config.h"

struct config c;

uint8_t config(){
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	71fb      	strb	r3, [r7, #7]
	set_flag(flag,SEND_TEMP_FLAG);
 800a0e6:	79fb      	ldrb	r3, [r7, #7]
 800a0e8:	f043 0301 	orr.w	r3, r3, #1
 800a0ec:	71fb      	strb	r3, [r7, #7]
	set_flag(flag,SEND_CO2_FLAG);
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	f043 0302 	orr.w	r3, r3, #2
 800a0f4:	71fb      	strb	r3, [r7, #7]
	set_flag(flag,SEND_VIBRATION_FLAG);
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	f043 0304 	orr.w	r3, r3, #4
 800a0fc:	71fb      	strb	r3, [r7, #7]
	return flag;
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <comm_request>:

#ifdef ENABLE_DEBUG
#define COMM_DEBUG 1
#endif

void comm_request(float temperature, uint16_t X,uint16_t Y,uint16_t Z){
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b092      	sub	sp, #72	; 0x48
 800a110:	af00      	add	r7, sp, #0
 800a112:	ed87 0a03 	vstr	s0, [r7, #12]
 800a116:	4603      	mov	r3, r0
 800a118:	817b      	strh	r3, [r7, #10]
 800a11a:	460b      	mov	r3, r1
 800a11c:	813b      	strh	r3, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	80fb      	strh	r3, [r7, #6]
	//make sensor data ready for send
	union convert f;
	uint8_t temp[50];
	f.t = temperature;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	647b      	str	r3, [r7, #68]	; 0x44
	temp[0] = SENSOR_ID;
 800a126:	2300      	movs	r3, #0
 800a128:	743b      	strb	r3, [r7, #16]
 800a12a:	4b15      	ldr	r3, [pc, #84]	; (800a180 <comm_request+0x74>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
	memcpy(&temp[1], &c.send_flag, 1);
 800a12e:	747b      	strb	r3, [r7, #17]
 800a130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	memcpy(&temp[2], &f.b, 4);
 800a132:	f8c7 3012 	str.w	r3, [r7, #18]
 800a136:	897b      	ldrh	r3, [r7, #10]
	memcpy(&temp[6], &X, 2);
 800a138:	82fb      	strh	r3, [r7, #22]
 800a13a:	893b      	ldrh	r3, [r7, #8]
	memcpy(&temp[8], &Y, 2);
 800a13c:	833b      	strh	r3, [r7, #24]
 800a13e:	88fb      	ldrh	r3, [r7, #6]
	memcpy(&temp[10], &Z, 2);
 800a140:	837b      	strh	r3, [r7, #26]

#ifdef COMM_DEBUG
	comm_print_debug("data ready");
 800a142:	4b10      	ldr	r3, [pc, #64]	; (800a184 <comm_request+0x78>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4910      	ldr	r1, [pc, #64]	; (800a188 <comm_request+0x7c>)
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 f821 	bl	800a190 <print_debug>
	comm_print_debug("data:");
 800a14e:	4b0d      	ldr	r3, [pc, #52]	; (800a184 <comm_request+0x78>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	490e      	ldr	r1, [pc, #56]	; (800a18c <comm_request+0x80>)
 800a154:	4618      	mov	r0, r3
 800a156:	f000 f81b 	bl	800a190 <print_debug>
	comm_print_debug(temp);
 800a15a:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <comm_request+0x78>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f107 0210 	add.w	r2, r7, #16
 800a162:	4611      	mov	r1, r2
 800a164:	4618      	mov	r0, r3
 800a166:	f000 f813 	bl	800a190 <print_debug>
#endif
	SPSGRF_StartTx((uint8_t *)temp,12);
 800a16a:	f107 0310 	add.w	r3, r7, #16
 800a16e:	210c      	movs	r1, #12
 800a170:	4618      	mov	r0, r3
 800a172:	f000 f9a1 	bl	800a4b8 <SPSGRF_StartTx>
}
 800a176:	bf00      	nop
 800a178:	3748      	adds	r7, #72	; 0x48
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	20000344 	.word	0x20000344
 800a184:	20000018 	.word	0x20000018
 800a188:	0800d4f8 	.word	0x0800d4f8
 800a18c:	0800d504 	.word	0x0800d504

0800a190 <print_debug>:

char debug_level = DBL_DEFAULT;

#ifdef ENABLE_DEBUG

void print_debug(const char *module, const char *text){
 800a190:	b580      	push	{r7, lr}
 800a192:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 800a196:	af00      	add	r7, sp, #0
 800a198:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800a19c:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800a1a0:	6018      	str	r0, [r3, #0]
 800a1a2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800a1a6:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800a1aa:	6019      	str	r1, [r3, #0]
	char tmp_debug[1000]="";
 800a1ac:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800a1b0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a1be:	2100      	movs	r1, #0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 f9d1 	bl	800a568 <memset>
	strcat(tmp_debug, module);
 800a1c6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800a1ca:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800a1ce:	f107 0208 	add.w	r2, r7, #8
 800a1d2:	6819      	ldr	r1, [r3, #0]
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	f000 fe5b 	bl	800ae90 <strcat>
	strcat(tmp_debug,":\t");
 800a1da:	f107 0308 	add.w	r3, r7, #8
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7f6 f84a 	bl	8000278 <strlen>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f107 0308 	add.w	r3, r7, #8
 800a1ec:	4413      	add	r3, r2
 800a1ee:	4a19      	ldr	r2, [pc, #100]	; (800a254 <print_debug+0xc4>)
 800a1f0:	8811      	ldrh	r1, [r2, #0]
 800a1f2:	7892      	ldrb	r2, [r2, #2]
 800a1f4:	8019      	strh	r1, [r3, #0]
 800a1f6:	709a      	strb	r2, [r3, #2]
	strcat(tmp_debug,text);
 800a1f8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800a1fc:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800a200:	f107 0208 	add.w	r2, r7, #8
 800a204:	6819      	ldr	r1, [r3, #0]
 800a206:	4610      	mov	r0, r2
 800a208:	f000 fe42 	bl	800ae90 <strcat>
	strcat(tmp_debug,"\r\n");
 800a20c:	f107 0308 	add.w	r3, r7, #8
 800a210:	4618      	mov	r0, r3
 800a212:	f7f6 f831 	bl	8000278 <strlen>
 800a216:	4603      	mov	r3, r0
 800a218:	461a      	mov	r2, r3
 800a21a:	f107 0308 	add.w	r3, r7, #8
 800a21e:	4413      	add	r3, r2
 800a220:	4a0d      	ldr	r2, [pc, #52]	; (800a258 <print_debug+0xc8>)
 800a222:	8811      	ldrh	r1, [r2, #0]
 800a224:	7892      	ldrb	r2, [r2, #2]
 800a226:	8019      	strh	r1, [r3, #0]
 800a228:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*) tmp_debug, strlen(tmp_debug), 100);
 800a22a:	f107 0308 	add.w	r3, r7, #8
 800a22e:	4618      	mov	r0, r3
 800a230:	f7f6 f822 	bl	8000278 <strlen>
 800a234:	4603      	mov	r3, r0
 800a236:	b29a      	uxth	r2, r3
 800a238:	f107 0108 	add.w	r1, r7, #8
 800a23c:	2364      	movs	r3, #100	; 0x64
 800a23e:	4807      	ldr	r0, [pc, #28]	; (800a25c <print_debug+0xcc>)
 800a240:	f7ff fa6e 	bl	8009720 <HAL_UART_Transmit>
	HAL_Delay(100);
 800a244:	2064      	movs	r0, #100	; 0x64
 800a246:	f7fa f80f 	bl	8004268 <HAL_Delay>
}
 800a24a:	bf00      	nop
 800a24c:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	0800d50c 	.word	0x0800d50c
 800a258:	0800d510 	.word	0x0800d510
 800a25c:	2000029c 	.word	0x2000029c

0800a260 <SPSGRF_Init>:
* @retval None
*/
const char *spsgrfmod = "SPSGRF";
#define spsgrf_print_debug(str) print_debug(spsgrfmod, str)
void SPSGRF_Init(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b0a8      	sub	sp, #160	; 0xa0
 800a264:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 800a266:	f7f9 fe27 	bl	8003eb8 <RadioSpiInit>

  // restart the radio
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Booting module");
 800a26a:	4b83      	ldr	r3, [pc, #524]	; (800a478 <SPSGRF_Init+0x218>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4983      	ldr	r1, [pc, #524]	; (800a47c <SPSGRF_Init+0x21c>)
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff ff8d 	bl	800a190 <print_debug>
#endif
  SpiritEnterShutdown();
 800a276:	f7f9 ff57 	bl	8004128 <RadioEnterShutdown>
  SpiritExitShutdown();
 800a27a:	f7f9 ff61 	bl	8004140 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 800a27e:	f7f8 f91d 	bl	80024bc <SpiritManagementWaExtraCurrent>
  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 800a282:	2300      	movs	r3, #0
 800a284:	70fb      	strb	r3, [r7, #3]
 800a286:	e004      	b.n	800a292 <SPSGRF_Init+0x32>
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	3301      	adds	r3, #1
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	70fb      	strb	r3, [r7, #3]
 800a292:	78fb      	ldrb	r3, [r7, #3]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2bff      	cmp	r3, #255	; 0xff
 800a298:	d1f6      	bne.n	800a288 <SPSGRF_Init+0x28>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 800a29a:	f7f9 fdeb 	bl	8003e74 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 800a29e:	4b78      	ldr	r3, [pc, #480]	; (800a480 <SPSGRF_Init+0x220>)
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d1ea      	bne.n	800a282 <SPSGRF_Init+0x22>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Initialize radio RF parameters");
 800a2ac:	4b72      	ldr	r3, [pc, #456]	; (800a478 <SPSGRF_Init+0x218>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4974      	ldr	r1, [pc, #464]	; (800a484 <SPSGRF_Init+0x224>)
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff ff6c 	bl	800a190 <print_debug>
  char tmp[100];
  sprintf(tmp, "Setting frequency to %f",BASE_FREQUENCY);
 800a2b8:	1d38      	adds	r0, r7, #4
 800a2ba:	a36d      	add	r3, pc, #436	; (adr r3, 800a470 <SPSGRF_Init+0x210>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	4971      	ldr	r1, [pc, #452]	; (800a488 <SPSGRF_Init+0x228>)
 800a2c2:	f000 fdc5 	bl	800ae50 <siprintf>
  spsgrf_print_debug(tmp);
 800a2c6:	4b6c      	ldr	r3, [pc, #432]	; (800a478 <SPSGRF_Init+0x218>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	1d3a      	adds	r2, r7, #4
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7ff ff5e 	bl	800a190 <print_debug>
  sprintf(tmp, "Setting baudrate to %d",DATARATE);
 800a2d4:	1d3b      	adds	r3, r7, #4
 800a2d6:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800a2da:	496c      	ldr	r1, [pc, #432]	; (800a48c <SPSGRF_Init+0x22c>)
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 fdb7 	bl	800ae50 <siprintf>
    spsgrf_print_debug(tmp);
 800a2e2:	4b65      	ldr	r3, [pc, #404]	; (800a478 <SPSGRF_Init+0x218>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	1d3a      	adds	r2, r7, #4
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7ff ff50 	bl	800a190 <print_debug>
#endif
  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 800a2f6:	4b66      	ldr	r3, [pc, #408]	; (800a490 <SPSGRF_Init+0x230>)
 800a2f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 800a2fc:	4b65      	ldr	r3, [pc, #404]	; (800a494 <SPSGRF_Init+0x234>)
 800a2fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 800a302:	2300      	movs	r3, #0
 800a304:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 800a308:	2300      	movs	r3, #0
 800a30a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  xRadioInit.lDatarate = DATARATE;
 800a30e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800a312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 800a316:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a31a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  xRadioInit.lBandwidth = BANDWIDTH;
 800a31e:	4b5d      	ldr	r3, [pc, #372]	; (800a494 <SPSGRF_Init+0x234>)
 800a320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 800a324:	485c      	ldr	r0, [pc, #368]	; (800a498 <SPSGRF_Init+0x238>)
 800a326:	f7f9 fd33 	bl	8003d90 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 800a32a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a32e:	4618      	mov	r0, r3
 800a330:	f7f8 fb80 	bl	8002a34 <SpiritRadioInit>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Setting power level");
 800a334:	4b50      	ldr	r3, [pc, #320]	; (800a478 <SPSGRF_Init+0x218>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4958      	ldr	r1, [pc, #352]	; (800a49c <SPSGRF_Init+0x23c>)
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff ff28 	bl	800a190 <print_debug>
#endif
  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 800a340:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800a4a0 <SPSGRF_Init+0x240>
 800a344:	2007      	movs	r0, #7
 800a346:	f7f9 fbbf 	bl	8003ac8 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 800a34a:	2007      	movs	r0, #7
 800a34c:	f7f9 fc12 	bl	8003b74 <SpiritRadioSetPALevelMaxIndex>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configure packet handler to use the Basic packet format");
 800a350:	4b49      	ldr	r3, [pc, #292]	; (800a478 <SPSGRF_Init+0x218>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4953      	ldr	r1, [pc, #332]	; (800a4a4 <SPSGRF_Init+0x244>)
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff ff1a 	bl	800a190 <print_debug>
#endif
  // Configure packet handler to use the Basic packet format
  xBasicInit.xPreambleLength = PREAMBLE_LENGTH;
 800a35c:	2318      	movs	r3, #24
 800a35e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  xBasicInit.xSyncLength = SYNC_LENGTH;
 800a362:	2306      	movs	r3, #6
 800a364:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  xBasicInit.lSyncWords = SYNC_WORD;
 800a368:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 800a36c:	67bb      	str	r3, [r7, #120]	; 0x78
  xBasicInit.xFixVarLength = LENGTH_TYPE;
 800a36e:	2301      	movs	r3, #1
 800a370:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  xBasicInit.cPktLengthWidth = LENGTH_WIDTH;
 800a374:	2307      	movs	r3, #7
 800a376:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  xBasicInit.xCrcMode = CRC_MODE;
 800a37a:	2320      	movs	r3, #32
 800a37c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  xBasicInit.xControlLength = CONTROL_LENGTH;
 800a380:	2300      	movs	r3, #0
 800a382:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  xBasicInit.xAddressField = EN_ADDRESS;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  xBasicInit.xFec = EN_FEC;
 800a38c:	2300      	movs	r3, #0
 800a38e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  xBasicInit.xDataWhitening = EN_WHITENING;
 800a392:	2301      	movs	r3, #1
 800a394:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  SpiritPktBasicInit(&xBasicInit);
 800a398:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7f8 f8b3 	bl	8002508 <SpiritPktBasicInit>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configuring automatic packet filtering");
 800a3a2:	4b35      	ldr	r3, [pc, #212]	; (800a478 <SPSGRF_Init+0x218>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4940      	ldr	r1, [pc, #256]	; (800a4a8 <SPSGRF_Init+0x248>)
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7ff fef1 	bl	800a190 <print_debug>
#endif
  // Configure destination address criteria for automatic packet filtering
  xBasicAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  xBasicAddress.cMyAddress = MY_ADDRESS;
 800a3b4:	23aa      	movs	r3, #170	; 0xaa
 800a3b6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  xBasicAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  xBasicAddress.cMulticastAddress = MULTICAST_ADDRESS;
 800a3c0:	23ee      	movs	r3, #238	; 0xee
 800a3c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  xBasicAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  xBasicAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 800a3cc:	23ff      	movs	r3, #255	; 0xff
 800a3ce:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  SpiritPktBasicAddressesInit(&xBasicAddress);
 800a3d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7f8 f96c 	bl	80026b4 <SpiritPktBasicAddressesInit>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configuring interrupt pin");
 800a3dc:	4b26      	ldr	r3, [pc, #152]	; (800a478 <SPSGRF_Init+0x218>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4932      	ldr	r1, [pc, #200]	; (800a4ac <SPSGRF_Init+0x24c>)
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fed4 	bl	800a190 <print_debug>
#endif
  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  SpiritGpioInit(&xGpioInit);
 800a3fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7f7 fd64 	bl	8001ecc <SpiritGpioInit>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Enable interrupt types");
 800a404:	4b1c      	ldr	r3, [pc, #112]	; (800a478 <SPSGRF_Init+0x218>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4929      	ldr	r1, [pc, #164]	; (800a4b0 <SPSGRF_Init+0x250>)
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fec0 	bl	800a190 <print_debug>
#endif
  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 800a410:	2000      	movs	r0, #0
 800a412:	f7f7 fd7f 	bl	8001f14 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 800a416:	2101      	movs	r1, #1
 800a418:	2004      	movs	r0, #4
 800a41a:	f7f7 fda7 	bl	8001f6c <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 800a41e:	2101      	movs	r1, #1
 800a420:	2001      	movs	r0, #1
 800a422:	f7f7 fda3 	bl	8001f6c <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 800a426:	2101      	movs	r1, #1
 800a428:	2002      	movs	r0, #2
 800a42a:	f7f7 fd9f 	bl	8001f6c <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 800a42e:	2101      	movs	r1, #1
 800a430:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800a434:	f7f7 fd9a 	bl	8001f6c <SpiritIrq>
  SpiritIrqClearStatus();
 800a438:	f7f7 fdfe 	bl	8002038 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 800a43c:	2000      	movs	r0, #0
 800a43e:	f7f8 faa5 	bl	800298c <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 800a442:	2001      	movs	r0, #1
 800a444:	f7f8 fa6a 	bl	800291c <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 800a448:	f06f 0077 	mvn.w	r0, #119	; 0x77
 800a44c:	f7f8 fad2 	bl	80029f4 <SpiritQiSetRssiThresholddBm>
  spsgrf_print_debug("Set RX timeout to 2000");
#endif
  SpiritTimerSetRxTimeoutMs(2000.0);
#else
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Set RX timeout to infinite");
 800a450:	4b09      	ldr	r3, [pc, #36]	; (800a478 <SPSGRF_Init+0x218>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4917      	ldr	r1, [pc, #92]	; (800a4b4 <SPSGRF_Init+0x254>)
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff fe9a 	bl	800a190 <print_debug>
#endif
  SET_INFINITE_RX_TIMEOUT();
 800a45c:	2000      	movs	r0, #0
 800a45e:	f7f9 fca7 	bl	8003db0 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 800a462:	2002      	movs	r0, #2
 800a464:	f7f9 fcbe 	bl	8003de4 <SpiritTimerSetRxTimeoutStopCondition>
}
 800a468:	bf00      	nop
 800a46a:	37a0      	adds	r7, #160	; 0xa0
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	80000000 	.word	0x80000000
 800a474:	41c9de50 	.word	0x41c9de50
 800a478:	2000001c 	.word	0x2000001c
 800a47c:	0800d51c 	.word	0x0800d51c
 800a480:	2000033c 	.word	0x2000033c
 800a484:	0800d52c 	.word	0x0800d52c
 800a488:	0800d54c 	.word	0x0800d54c
 800a48c:	0800d564 	.word	0x0800d564
 800a490:	33bca100 	.word	0x33bca100
 800a494:	000186a0 	.word	0x000186a0
 800a498:	02faf080 	.word	0x02faf080
 800a49c:	0800d57c 	.word	0x0800d57c
 800a4a0:	4139999a 	.word	0x4139999a
 800a4a4:	0800d590 	.word	0x0800d590
 800a4a8:	0800d5c8 	.word	0x0800d5c8
 800a4ac:	0800d5f0 	.word	0x0800d5f0
 800a4b0:	0800d60c 	.word	0x0800d60c
 800a4b4:	0800d624 	.word	0x0800d624

0800a4b8 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritPktBasicSetDestinationAddress(0x66);
 800a4c4:	2066      	movs	r0, #102	; 0x66
 800a4c6:	f7f8 fa0f 	bl	80028e8 <SpiritPktCommonSetDestinationAddress>
  SpiritCmdStrobeFlushTxFifo();
 800a4ca:	2072      	movs	r0, #114	; 0x72
 800a4cc:	f7f7 fce6 	bl	8001e9c <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	2b60      	cmp	r3, #96	; 0x60
 800a4d4:	bf28      	it	cs
 800a4d6:	2360      	movcs	r3, #96	; 0x60
 800a4d8:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	6879      	ldr	r1, [r7, #4]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7f9 fdd8 	bl	8004094 <RadioSpiWriteFifo>
  SpiritPktBasicSetPayloadLength(txLen);
 800a4e4:	78fb      	ldrb	r3, [r7, #3]
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f8 f971 	bl	80027d0 <SpiritPktBasicSetPayloadLength>
  SpiritCmdStrobeTx();
 800a4ee:	f7f7 ff7d 	bl	80023ec <SpiritManagementWaCmdStrobeTx>
 800a4f2:	2060      	movs	r0, #96	; 0x60
 800a4f4:	f7f7 fcd2 	bl	8001e9c <SpiritCmdStrobeCommand>
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 800a504:	f7f7 ffaa 	bl	800245c <SpiritManagementWaCmdStrobeRx>
 800a508:	2061      	movs	r0, #97	; 0x61
 800a50a:	f7f7 fcc7 	bl	8001e9c <SpiritCmdStrobeCommand>
}
 800a50e:	bf00      	nop
 800a510:	bd80      	pop	{r7, pc}
	...

0800a514 <__errno>:
 800a514:	4b01      	ldr	r3, [pc, #4]	; (800a51c <__errno+0x8>)
 800a516:	6818      	ldr	r0, [r3, #0]
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	20000020 	.word	0x20000020

0800a520 <__libc_init_array>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	4d0d      	ldr	r5, [pc, #52]	; (800a558 <__libc_init_array+0x38>)
 800a524:	2600      	movs	r6, #0
 800a526:	4c0d      	ldr	r4, [pc, #52]	; (800a55c <__libc_init_array+0x3c>)
 800a528:	1b64      	subs	r4, r4, r5
 800a52a:	10a4      	asrs	r4, r4, #2
 800a52c:	42a6      	cmp	r6, r4
 800a52e:	d109      	bne.n	800a544 <__libc_init_array+0x24>
 800a530:	4d0b      	ldr	r5, [pc, #44]	; (800a560 <__libc_init_array+0x40>)
 800a532:	2600      	movs	r6, #0
 800a534:	4c0b      	ldr	r4, [pc, #44]	; (800a564 <__libc_init_array+0x44>)
 800a536:	f002 ff6d 	bl	800d414 <_init>
 800a53a:	1b64      	subs	r4, r4, r5
 800a53c:	10a4      	asrs	r4, r4, #2
 800a53e:	42a6      	cmp	r6, r4
 800a540:	d105      	bne.n	800a54e <__libc_init_array+0x2e>
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	f855 3b04 	ldr.w	r3, [r5], #4
 800a548:	3601      	adds	r6, #1
 800a54a:	4798      	blx	r3
 800a54c:	e7ee      	b.n	800a52c <__libc_init_array+0xc>
 800a54e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a552:	3601      	adds	r6, #1
 800a554:	4798      	blx	r3
 800a556:	e7f2      	b.n	800a53e <__libc_init_array+0x1e>
 800a558:	0800dc7c 	.word	0x0800dc7c
 800a55c:	0800dc7c 	.word	0x0800dc7c
 800a560:	0800dc7c 	.word	0x0800dc7c
 800a564:	0800dc80 	.word	0x0800dc80

0800a568 <memset>:
 800a568:	4402      	add	r2, r0
 800a56a:	4603      	mov	r3, r0
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d100      	bne.n	800a572 <memset+0xa>
 800a570:	4770      	bx	lr
 800a572:	f803 1b01 	strb.w	r1, [r3], #1
 800a576:	e7f9      	b.n	800a56c <memset+0x4>

0800a578 <__cvt>:
 800a578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	ec55 4b10 	vmov	r4, r5, d0
 800a580:	2d00      	cmp	r5, #0
 800a582:	460e      	mov	r6, r1
 800a584:	4619      	mov	r1, r3
 800a586:	462b      	mov	r3, r5
 800a588:	bfb4      	ite	lt
 800a58a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a58e:	2300      	movge	r3, #0
 800a590:	4691      	mov	r9, r2
 800a592:	bfbf      	itttt	lt
 800a594:	4622      	movlt	r2, r4
 800a596:	461d      	movlt	r5, r3
 800a598:	232d      	movlt	r3, #45	; 0x2d
 800a59a:	4614      	movlt	r4, r2
 800a59c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a5a0:	700b      	strb	r3, [r1, #0]
 800a5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5a4:	f023 0820 	bic.w	r8, r3, #32
 800a5a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5ac:	d005      	beq.n	800a5ba <__cvt+0x42>
 800a5ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a5b2:	d100      	bne.n	800a5b6 <__cvt+0x3e>
 800a5b4:	3601      	adds	r6, #1
 800a5b6:	2102      	movs	r1, #2
 800a5b8:	e000      	b.n	800a5bc <__cvt+0x44>
 800a5ba:	2103      	movs	r1, #3
 800a5bc:	ab03      	add	r3, sp, #12
 800a5be:	4632      	mov	r2, r6
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	ab02      	add	r3, sp, #8
 800a5c4:	ec45 4b10 	vmov	d0, r4, r5
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	4653      	mov	r3, sl
 800a5cc:	f000 fd00 	bl	800afd0 <_dtoa_r>
 800a5d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	d102      	bne.n	800a5de <__cvt+0x66>
 800a5d8:	f019 0f01 	tst.w	r9, #1
 800a5dc:	d022      	beq.n	800a624 <__cvt+0xac>
 800a5de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5e2:	eb07 0906 	add.w	r9, r7, r6
 800a5e6:	d110      	bne.n	800a60a <__cvt+0x92>
 800a5e8:	783b      	ldrb	r3, [r7, #0]
 800a5ea:	2b30      	cmp	r3, #48	; 0x30
 800a5ec:	d10a      	bne.n	800a604 <__cvt+0x8c>
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	f7f6 fa6b 	bl	8000ad0 <__aeabi_dcmpeq>
 800a5fa:	b918      	cbnz	r0, 800a604 <__cvt+0x8c>
 800a5fc:	f1c6 0601 	rsb	r6, r6, #1
 800a600:	f8ca 6000 	str.w	r6, [sl]
 800a604:	f8da 3000 	ldr.w	r3, [sl]
 800a608:	4499      	add	r9, r3
 800a60a:	2200      	movs	r2, #0
 800a60c:	2300      	movs	r3, #0
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f6 fa5d 	bl	8000ad0 <__aeabi_dcmpeq>
 800a616:	b108      	cbz	r0, 800a61c <__cvt+0xa4>
 800a618:	f8cd 900c 	str.w	r9, [sp, #12]
 800a61c:	2230      	movs	r2, #48	; 0x30
 800a61e:	9b03      	ldr	r3, [sp, #12]
 800a620:	454b      	cmp	r3, r9
 800a622:	d307      	bcc.n	800a634 <__cvt+0xbc>
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	4638      	mov	r0, r7
 800a628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a62a:	1bdb      	subs	r3, r3, r7
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	b004      	add	sp, #16
 800a630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a634:	1c59      	adds	r1, r3, #1
 800a636:	9103      	str	r1, [sp, #12]
 800a638:	701a      	strb	r2, [r3, #0]
 800a63a:	e7f0      	b.n	800a61e <__cvt+0xa6>

0800a63c <__exponent>:
 800a63c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a63e:	2900      	cmp	r1, #0
 800a640:	4603      	mov	r3, r0
 800a642:	bfb8      	it	lt
 800a644:	4249      	neglt	r1, r1
 800a646:	f803 2b02 	strb.w	r2, [r3], #2
 800a64a:	bfb4      	ite	lt
 800a64c:	222d      	movlt	r2, #45	; 0x2d
 800a64e:	222b      	movge	r2, #43	; 0x2b
 800a650:	2909      	cmp	r1, #9
 800a652:	7042      	strb	r2, [r0, #1]
 800a654:	dd2a      	ble.n	800a6ac <__exponent+0x70>
 800a656:	f10d 0407 	add.w	r4, sp, #7
 800a65a:	270a      	movs	r7, #10
 800a65c:	46a4      	mov	ip, r4
 800a65e:	460a      	mov	r2, r1
 800a660:	46a6      	mov	lr, r4
 800a662:	3c01      	subs	r4, #1
 800a664:	2a63      	cmp	r2, #99	; 0x63
 800a666:	fb91 f6f7 	sdiv	r6, r1, r7
 800a66a:	fb07 1516 	mls	r5, r7, r6, r1
 800a66e:	4631      	mov	r1, r6
 800a670:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a674:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a678:	dcf1      	bgt.n	800a65e <__exponent+0x22>
 800a67a:	3130      	adds	r1, #48	; 0x30
 800a67c:	f1ae 0502 	sub.w	r5, lr, #2
 800a680:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a684:	1c44      	adds	r4, r0, #1
 800a686:	4629      	mov	r1, r5
 800a688:	4561      	cmp	r1, ip
 800a68a:	d30a      	bcc.n	800a6a2 <__exponent+0x66>
 800a68c:	f10d 0209 	add.w	r2, sp, #9
 800a690:	eba2 020e 	sub.w	r2, r2, lr
 800a694:	4565      	cmp	r5, ip
 800a696:	bf88      	it	hi
 800a698:	2200      	movhi	r2, #0
 800a69a:	4413      	add	r3, r2
 800a69c:	1a18      	subs	r0, r3, r0
 800a69e:	b003      	add	sp, #12
 800a6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a6aa:	e7ed      	b.n	800a688 <__exponent+0x4c>
 800a6ac:	2330      	movs	r3, #48	; 0x30
 800a6ae:	3130      	adds	r1, #48	; 0x30
 800a6b0:	7083      	strb	r3, [r0, #2]
 800a6b2:	1d03      	adds	r3, r0, #4
 800a6b4:	70c1      	strb	r1, [r0, #3]
 800a6b6:	e7f1      	b.n	800a69c <__exponent+0x60>

0800a6b8 <_printf_float>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	ed2d 8b02 	vpush	{d8}
 800a6c0:	b08d      	sub	sp, #52	; 0x34
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4616      	mov	r6, r2
 800a6c6:	461f      	mov	r7, r3
 800a6c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	f001 fa6b 	bl	800bba8 <_localeconv_r>
 800a6d2:	f8d0 a000 	ldr.w	sl, [r0]
 800a6d6:	4650      	mov	r0, sl
 800a6d8:	f7f5 fdce 	bl	8000278 <strlen>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a6e2:	ee08 0a10 	vmov	s16, r0
 800a6e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	9305      	str	r3, [sp, #20]
 800a6ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a6f0:	3307      	adds	r3, #7
 800a6f2:	f023 0307 	bic.w	r3, r3, #7
 800a6f6:	f103 0208 	add.w	r2, r3, #8
 800a6fa:	f8c8 2000 	str.w	r2, [r8]
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a706:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a70a:	f04f 32ff 	mov.w	r2, #4294967295
 800a70e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a712:	f8cd 8018 	str.w	r8, [sp, #24]
 800a716:	9307      	str	r3, [sp, #28]
 800a718:	4b9e      	ldr	r3, [pc, #632]	; (800a994 <_printf_float+0x2dc>)
 800a71a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a71e:	f7f6 fa09 	bl	8000b34 <__aeabi_dcmpun>
 800a722:	bb88      	cbnz	r0, 800a788 <_printf_float+0xd0>
 800a724:	f04f 32ff 	mov.w	r2, #4294967295
 800a728:	4b9a      	ldr	r3, [pc, #616]	; (800a994 <_printf_float+0x2dc>)
 800a72a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a72e:	f7f6 f9e3 	bl	8000af8 <__aeabi_dcmple>
 800a732:	bb48      	cbnz	r0, 800a788 <_printf_float+0xd0>
 800a734:	2200      	movs	r2, #0
 800a736:	2300      	movs	r3, #0
 800a738:	4640      	mov	r0, r8
 800a73a:	4649      	mov	r1, r9
 800a73c:	f7f6 f9d2 	bl	8000ae4 <__aeabi_dcmplt>
 800a740:	b110      	cbz	r0, 800a748 <_printf_float+0x90>
 800a742:	232d      	movs	r3, #45	; 0x2d
 800a744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a748:	4b93      	ldr	r3, [pc, #588]	; (800a998 <_printf_float+0x2e0>)
 800a74a:	4894      	ldr	r0, [pc, #592]	; (800a99c <_printf_float+0x2e4>)
 800a74c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a750:	bf94      	ite	ls
 800a752:	4698      	movls	r8, r3
 800a754:	4680      	movhi	r8, r0
 800a756:	2303      	movs	r3, #3
 800a758:	f04f 0900 	mov.w	r9, #0
 800a75c:	6123      	str	r3, [r4, #16]
 800a75e:	9b05      	ldr	r3, [sp, #20]
 800a760:	f023 0204 	bic.w	r2, r3, #4
 800a764:	6022      	str	r2, [r4, #0]
 800a766:	4633      	mov	r3, r6
 800a768:	aa0b      	add	r2, sp, #44	; 0x2c
 800a76a:	4621      	mov	r1, r4
 800a76c:	4628      	mov	r0, r5
 800a76e:	9700      	str	r7, [sp, #0]
 800a770:	f000 f9d8 	bl	800ab24 <_printf_common>
 800a774:	3001      	adds	r0, #1
 800a776:	f040 8090 	bne.w	800a89a <_printf_float+0x1e2>
 800a77a:	f04f 30ff 	mov.w	r0, #4294967295
 800a77e:	b00d      	add	sp, #52	; 0x34
 800a780:	ecbd 8b02 	vpop	{d8}
 800a784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a788:	4642      	mov	r2, r8
 800a78a:	464b      	mov	r3, r9
 800a78c:	4640      	mov	r0, r8
 800a78e:	4649      	mov	r1, r9
 800a790:	f7f6 f9d0 	bl	8000b34 <__aeabi_dcmpun>
 800a794:	b140      	cbz	r0, 800a7a8 <_printf_float+0xf0>
 800a796:	464b      	mov	r3, r9
 800a798:	4881      	ldr	r0, [pc, #516]	; (800a9a0 <_printf_float+0x2e8>)
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bfbc      	itt	lt
 800a79e:	232d      	movlt	r3, #45	; 0x2d
 800a7a0:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a7a4:	4b7f      	ldr	r3, [pc, #508]	; (800a9a4 <_printf_float+0x2ec>)
 800a7a6:	e7d1      	b.n	800a74c <_printf_float+0x94>
 800a7a8:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a7ac:	6863      	ldr	r3, [r4, #4]
 800a7ae:	9206      	str	r2, [sp, #24]
 800a7b0:	1c5a      	adds	r2, r3, #1
 800a7b2:	d13f      	bne.n	800a834 <_printf_float+0x17c>
 800a7b4:	2306      	movs	r3, #6
 800a7b6:	6063      	str	r3, [r4, #4]
 800a7b8:	9b05      	ldr	r3, [sp, #20]
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	6861      	ldr	r1, [r4, #4]
 800a7be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9303      	str	r3, [sp, #12]
 800a7c6:	ab0a      	add	r3, sp, #40	; 0x28
 800a7c8:	6022      	str	r2, [r4, #0]
 800a7ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a7ce:	ab09      	add	r3, sp, #36	; 0x24
 800a7d0:	ec49 8b10 	vmov	d0, r8, r9
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a7da:	f7ff fecd 	bl	800a578 <__cvt>
 800a7de:	9b06      	ldr	r3, [sp, #24]
 800a7e0:	4680      	mov	r8, r0
 800a7e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7e4:	2b47      	cmp	r3, #71	; 0x47
 800a7e6:	d108      	bne.n	800a7fa <_printf_float+0x142>
 800a7e8:	1cc8      	adds	r0, r1, #3
 800a7ea:	db02      	blt.n	800a7f2 <_printf_float+0x13a>
 800a7ec:	6863      	ldr	r3, [r4, #4]
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	dd41      	ble.n	800a876 <_printf_float+0x1be>
 800a7f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a7f6:	fa5f fb8b 	uxtb.w	fp, fp
 800a7fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7fe:	d820      	bhi.n	800a842 <_printf_float+0x18a>
 800a800:	3901      	subs	r1, #1
 800a802:	465a      	mov	r2, fp
 800a804:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a808:	9109      	str	r1, [sp, #36]	; 0x24
 800a80a:	f7ff ff17 	bl	800a63c <__exponent>
 800a80e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a810:	4681      	mov	r9, r0
 800a812:	1813      	adds	r3, r2, r0
 800a814:	2a01      	cmp	r2, #1
 800a816:	6123      	str	r3, [r4, #16]
 800a818:	dc02      	bgt.n	800a820 <_printf_float+0x168>
 800a81a:	6822      	ldr	r2, [r4, #0]
 800a81c:	07d2      	lsls	r2, r2, #31
 800a81e:	d501      	bpl.n	800a824 <_printf_float+0x16c>
 800a820:	3301      	adds	r3, #1
 800a822:	6123      	str	r3, [r4, #16]
 800a824:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d09c      	beq.n	800a766 <_printf_float+0xae>
 800a82c:	232d      	movs	r3, #45	; 0x2d
 800a82e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a832:	e798      	b.n	800a766 <_printf_float+0xae>
 800a834:	9a06      	ldr	r2, [sp, #24]
 800a836:	2a47      	cmp	r2, #71	; 0x47
 800a838:	d1be      	bne.n	800a7b8 <_printf_float+0x100>
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1bc      	bne.n	800a7b8 <_printf_float+0x100>
 800a83e:	2301      	movs	r3, #1
 800a840:	e7b9      	b.n	800a7b6 <_printf_float+0xfe>
 800a842:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a846:	d118      	bne.n	800a87a <_printf_float+0x1c2>
 800a848:	2900      	cmp	r1, #0
 800a84a:	6863      	ldr	r3, [r4, #4]
 800a84c:	dd0b      	ble.n	800a866 <_printf_float+0x1ae>
 800a84e:	6121      	str	r1, [r4, #16]
 800a850:	b913      	cbnz	r3, 800a858 <_printf_float+0x1a0>
 800a852:	6822      	ldr	r2, [r4, #0]
 800a854:	07d0      	lsls	r0, r2, #31
 800a856:	d502      	bpl.n	800a85e <_printf_float+0x1a6>
 800a858:	3301      	adds	r3, #1
 800a85a:	440b      	add	r3, r1
 800a85c:	6123      	str	r3, [r4, #16]
 800a85e:	f04f 0900 	mov.w	r9, #0
 800a862:	65a1      	str	r1, [r4, #88]	; 0x58
 800a864:	e7de      	b.n	800a824 <_printf_float+0x16c>
 800a866:	b913      	cbnz	r3, 800a86e <_printf_float+0x1b6>
 800a868:	6822      	ldr	r2, [r4, #0]
 800a86a:	07d2      	lsls	r2, r2, #31
 800a86c:	d501      	bpl.n	800a872 <_printf_float+0x1ba>
 800a86e:	3302      	adds	r3, #2
 800a870:	e7f4      	b.n	800a85c <_printf_float+0x1a4>
 800a872:	2301      	movs	r3, #1
 800a874:	e7f2      	b.n	800a85c <_printf_float+0x1a4>
 800a876:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a87a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a87c:	4299      	cmp	r1, r3
 800a87e:	db05      	blt.n	800a88c <_printf_float+0x1d4>
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	6121      	str	r1, [r4, #16]
 800a884:	07d8      	lsls	r0, r3, #31
 800a886:	d5ea      	bpl.n	800a85e <_printf_float+0x1a6>
 800a888:	1c4b      	adds	r3, r1, #1
 800a88a:	e7e7      	b.n	800a85c <_printf_float+0x1a4>
 800a88c:	2900      	cmp	r1, #0
 800a88e:	bfd4      	ite	le
 800a890:	f1c1 0202 	rsble	r2, r1, #2
 800a894:	2201      	movgt	r2, #1
 800a896:	4413      	add	r3, r2
 800a898:	e7e0      	b.n	800a85c <_printf_float+0x1a4>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	055a      	lsls	r2, r3, #21
 800a89e:	d407      	bmi.n	800a8b0 <_printf_float+0x1f8>
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	4642      	mov	r2, r8
 800a8a4:	4631      	mov	r1, r6
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	47b8      	blx	r7
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	d12c      	bne.n	800a908 <_printf_float+0x250>
 800a8ae:	e764      	b.n	800a77a <_printf_float+0xc2>
 800a8b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8b4:	f240 80e0 	bls.w	800aa78 <_printf_float+0x3c0>
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8c0:	f7f6 f906 	bl	8000ad0 <__aeabi_dcmpeq>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d034      	beq.n	800a932 <_printf_float+0x27a>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	4a37      	ldr	r2, [pc, #220]	; (800a9a8 <_printf_float+0x2f0>)
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	f43f af51 	beq.w	800a77a <_printf_float+0xc2>
 800a8d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	db02      	blt.n	800a8e6 <_printf_float+0x22e>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	07d8      	lsls	r0, r3, #31
 800a8e4:	d510      	bpl.n	800a908 <_printf_float+0x250>
 800a8e6:	ee18 3a10 	vmov	r3, s16
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b8      	blx	r7
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	f43f af41 	beq.w	800a77a <_printf_float+0xc2>
 800a8f8:	f04f 0800 	mov.w	r8, #0
 800a8fc:	f104 091a 	add.w	r9, r4, #26
 800a900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a902:	3b01      	subs	r3, #1
 800a904:	4543      	cmp	r3, r8
 800a906:	dc09      	bgt.n	800a91c <_printf_float+0x264>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	079b      	lsls	r3, r3, #30
 800a90c:	f100 8105 	bmi.w	800ab1a <_printf_float+0x462>
 800a910:	68e0      	ldr	r0, [r4, #12]
 800a912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a914:	4298      	cmp	r0, r3
 800a916:	bfb8      	it	lt
 800a918:	4618      	movlt	r0, r3
 800a91a:	e730      	b.n	800a77e <_printf_float+0xc6>
 800a91c:	2301      	movs	r3, #1
 800a91e:	464a      	mov	r2, r9
 800a920:	4631      	mov	r1, r6
 800a922:	4628      	mov	r0, r5
 800a924:	47b8      	blx	r7
 800a926:	3001      	adds	r0, #1
 800a928:	f43f af27 	beq.w	800a77a <_printf_float+0xc2>
 800a92c:	f108 0801 	add.w	r8, r8, #1
 800a930:	e7e6      	b.n	800a900 <_printf_float+0x248>
 800a932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a934:	2b00      	cmp	r3, #0
 800a936:	dc39      	bgt.n	800a9ac <_printf_float+0x2f4>
 800a938:	2301      	movs	r3, #1
 800a93a:	4a1b      	ldr	r2, [pc, #108]	; (800a9a8 <_printf_float+0x2f0>)
 800a93c:	4631      	mov	r1, r6
 800a93e:	4628      	mov	r0, r5
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	f43f af19 	beq.w	800a77a <_printf_float+0xc2>
 800a948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a94c:	4313      	orrs	r3, r2
 800a94e:	d102      	bne.n	800a956 <_printf_float+0x29e>
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	07d9      	lsls	r1, r3, #31
 800a954:	d5d8      	bpl.n	800a908 <_printf_float+0x250>
 800a956:	ee18 3a10 	vmov	r3, s16
 800a95a:	4652      	mov	r2, sl
 800a95c:	4631      	mov	r1, r6
 800a95e:	4628      	mov	r0, r5
 800a960:	47b8      	blx	r7
 800a962:	3001      	adds	r0, #1
 800a964:	f43f af09 	beq.w	800a77a <_printf_float+0xc2>
 800a968:	f04f 0900 	mov.w	r9, #0
 800a96c:	f104 0a1a 	add.w	sl, r4, #26
 800a970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a972:	425b      	negs	r3, r3
 800a974:	454b      	cmp	r3, r9
 800a976:	dc01      	bgt.n	800a97c <_printf_float+0x2c4>
 800a978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a97a:	e792      	b.n	800a8a2 <_printf_float+0x1ea>
 800a97c:	2301      	movs	r3, #1
 800a97e:	4652      	mov	r2, sl
 800a980:	4631      	mov	r1, r6
 800a982:	4628      	mov	r0, r5
 800a984:	47b8      	blx	r7
 800a986:	3001      	adds	r0, #1
 800a988:	f43f aef7 	beq.w	800a77a <_printf_float+0xc2>
 800a98c:	f109 0901 	add.w	r9, r9, #1
 800a990:	e7ee      	b.n	800a970 <_printf_float+0x2b8>
 800a992:	bf00      	nop
 800a994:	7fefffff 	.word	0x7fefffff
 800a998:	0800d8a0 	.word	0x0800d8a0
 800a99c:	0800d8a4 	.word	0x0800d8a4
 800a9a0:	0800d8ac 	.word	0x0800d8ac
 800a9a4:	0800d8a8 	.word	0x0800d8a8
 800a9a8:	0800d8b0 	.word	0x0800d8b0
 800a9ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	bfa8      	it	ge
 800a9b4:	461a      	movge	r2, r3
 800a9b6:	2a00      	cmp	r2, #0
 800a9b8:	4691      	mov	r9, r2
 800a9ba:	dc37      	bgt.n	800aa2c <_printf_float+0x374>
 800a9bc:	f04f 0b00 	mov.w	fp, #0
 800a9c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9c4:	f104 021a 	add.w	r2, r4, #26
 800a9c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9ca:	9305      	str	r3, [sp, #20]
 800a9cc:	eba3 0309 	sub.w	r3, r3, r9
 800a9d0:	455b      	cmp	r3, fp
 800a9d2:	dc33      	bgt.n	800aa3c <_printf_float+0x384>
 800a9d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	db3b      	blt.n	800aa54 <_printf_float+0x39c>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	07da      	lsls	r2, r3, #31
 800a9e0:	d438      	bmi.n	800aa54 <_printf_float+0x39c>
 800a9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e4:	9a05      	ldr	r2, [sp, #20]
 800a9e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9e8:	1a9a      	subs	r2, r3, r2
 800a9ea:	eba3 0901 	sub.w	r9, r3, r1
 800a9ee:	4591      	cmp	r9, r2
 800a9f0:	bfa8      	it	ge
 800a9f2:	4691      	movge	r9, r2
 800a9f4:	f1b9 0f00 	cmp.w	r9, #0
 800a9f8:	dc35      	bgt.n	800aa66 <_printf_float+0x3ae>
 800a9fa:	f04f 0800 	mov.w	r8, #0
 800a9fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa02:	f104 0a1a 	add.w	sl, r4, #26
 800aa06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa0a:	1a9b      	subs	r3, r3, r2
 800aa0c:	eba3 0309 	sub.w	r3, r3, r9
 800aa10:	4543      	cmp	r3, r8
 800aa12:	f77f af79 	ble.w	800a908 <_printf_float+0x250>
 800aa16:	2301      	movs	r3, #1
 800aa18:	4652      	mov	r2, sl
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	47b8      	blx	r7
 800aa20:	3001      	adds	r0, #1
 800aa22:	f43f aeaa 	beq.w	800a77a <_printf_float+0xc2>
 800aa26:	f108 0801 	add.w	r8, r8, #1
 800aa2a:	e7ec      	b.n	800aa06 <_printf_float+0x34e>
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	4631      	mov	r1, r6
 800aa30:	4642      	mov	r2, r8
 800aa32:	4628      	mov	r0, r5
 800aa34:	47b8      	blx	r7
 800aa36:	3001      	adds	r0, #1
 800aa38:	d1c0      	bne.n	800a9bc <_printf_float+0x304>
 800aa3a:	e69e      	b.n	800a77a <_printf_float+0xc2>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4631      	mov	r1, r6
 800aa40:	4628      	mov	r0, r5
 800aa42:	9205      	str	r2, [sp, #20]
 800aa44:	47b8      	blx	r7
 800aa46:	3001      	adds	r0, #1
 800aa48:	f43f ae97 	beq.w	800a77a <_printf_float+0xc2>
 800aa4c:	f10b 0b01 	add.w	fp, fp, #1
 800aa50:	9a05      	ldr	r2, [sp, #20]
 800aa52:	e7b9      	b.n	800a9c8 <_printf_float+0x310>
 800aa54:	ee18 3a10 	vmov	r3, s16
 800aa58:	4652      	mov	r2, sl
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	47b8      	blx	r7
 800aa60:	3001      	adds	r0, #1
 800aa62:	d1be      	bne.n	800a9e2 <_printf_float+0x32a>
 800aa64:	e689      	b.n	800a77a <_printf_float+0xc2>
 800aa66:	9a05      	ldr	r2, [sp, #20]
 800aa68:	464b      	mov	r3, r9
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	4442      	add	r2, r8
 800aa70:	47b8      	blx	r7
 800aa72:	3001      	adds	r0, #1
 800aa74:	d1c1      	bne.n	800a9fa <_printf_float+0x342>
 800aa76:	e680      	b.n	800a77a <_printf_float+0xc2>
 800aa78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa7a:	2a01      	cmp	r2, #1
 800aa7c:	dc01      	bgt.n	800aa82 <_printf_float+0x3ca>
 800aa7e:	07db      	lsls	r3, r3, #31
 800aa80:	d538      	bpl.n	800aaf4 <_printf_float+0x43c>
 800aa82:	2301      	movs	r3, #1
 800aa84:	4642      	mov	r2, r8
 800aa86:	4631      	mov	r1, r6
 800aa88:	4628      	mov	r0, r5
 800aa8a:	47b8      	blx	r7
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	f43f ae74 	beq.w	800a77a <_printf_float+0xc2>
 800aa92:	ee18 3a10 	vmov	r3, s16
 800aa96:	4652      	mov	r2, sl
 800aa98:	4631      	mov	r1, r6
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	47b8      	blx	r7
 800aa9e:	3001      	adds	r0, #1
 800aaa0:	f43f ae6b 	beq.w	800a77a <_printf_float+0xc2>
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aaac:	f7f6 f810 	bl	8000ad0 <__aeabi_dcmpeq>
 800aab0:	b9d8      	cbnz	r0, 800aaea <_printf_float+0x432>
 800aab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab4:	f108 0201 	add.w	r2, r8, #1
 800aab8:	3b01      	subs	r3, #1
 800aaba:	4631      	mov	r1, r6
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	d10e      	bne.n	800aae2 <_printf_float+0x42a>
 800aac4:	e659      	b.n	800a77a <_printf_float+0xc2>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4652      	mov	r2, sl
 800aaca:	4631      	mov	r1, r6
 800aacc:	4628      	mov	r0, r5
 800aace:	47b8      	blx	r7
 800aad0:	3001      	adds	r0, #1
 800aad2:	f43f ae52 	beq.w	800a77a <_printf_float+0xc2>
 800aad6:	f108 0801 	add.w	r8, r8, #1
 800aada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aadc:	3b01      	subs	r3, #1
 800aade:	4543      	cmp	r3, r8
 800aae0:	dcf1      	bgt.n	800aac6 <_printf_float+0x40e>
 800aae2:	464b      	mov	r3, r9
 800aae4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aae8:	e6dc      	b.n	800a8a4 <_printf_float+0x1ec>
 800aaea:	f04f 0800 	mov.w	r8, #0
 800aaee:	f104 0a1a 	add.w	sl, r4, #26
 800aaf2:	e7f2      	b.n	800aada <_printf_float+0x422>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	4642      	mov	r2, r8
 800aaf8:	e7df      	b.n	800aaba <_printf_float+0x402>
 800aafa:	2301      	movs	r3, #1
 800aafc:	464a      	mov	r2, r9
 800aafe:	4631      	mov	r1, r6
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b8      	blx	r7
 800ab04:	3001      	adds	r0, #1
 800ab06:	f43f ae38 	beq.w	800a77a <_printf_float+0xc2>
 800ab0a:	f108 0801 	add.w	r8, r8, #1
 800ab0e:	68e3      	ldr	r3, [r4, #12]
 800ab10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab12:	1a5b      	subs	r3, r3, r1
 800ab14:	4543      	cmp	r3, r8
 800ab16:	dcf0      	bgt.n	800aafa <_printf_float+0x442>
 800ab18:	e6fa      	b.n	800a910 <_printf_float+0x258>
 800ab1a:	f04f 0800 	mov.w	r8, #0
 800ab1e:	f104 0919 	add.w	r9, r4, #25
 800ab22:	e7f4      	b.n	800ab0e <_printf_float+0x456>

0800ab24 <_printf_common>:
 800ab24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab28:	4616      	mov	r6, r2
 800ab2a:	4699      	mov	r9, r3
 800ab2c:	688a      	ldr	r2, [r1, #8]
 800ab2e:	4607      	mov	r7, r0
 800ab30:	690b      	ldr	r3, [r1, #16]
 800ab32:	460c      	mov	r4, r1
 800ab34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	bfb8      	it	lt
 800ab3c:	4613      	movlt	r3, r2
 800ab3e:	6033      	str	r3, [r6, #0]
 800ab40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab44:	b10a      	cbz	r2, 800ab4a <_printf_common+0x26>
 800ab46:	3301      	adds	r3, #1
 800ab48:	6033      	str	r3, [r6, #0]
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	0699      	lsls	r1, r3, #26
 800ab4e:	bf42      	ittt	mi
 800ab50:	6833      	ldrmi	r3, [r6, #0]
 800ab52:	3302      	addmi	r3, #2
 800ab54:	6033      	strmi	r3, [r6, #0]
 800ab56:	6825      	ldr	r5, [r4, #0]
 800ab58:	f015 0506 	ands.w	r5, r5, #6
 800ab5c:	d106      	bne.n	800ab6c <_printf_common+0x48>
 800ab5e:	f104 0a19 	add.w	sl, r4, #25
 800ab62:	68e3      	ldr	r3, [r4, #12]
 800ab64:	6832      	ldr	r2, [r6, #0]
 800ab66:	1a9b      	subs	r3, r3, r2
 800ab68:	42ab      	cmp	r3, r5
 800ab6a:	dc29      	bgt.n	800abc0 <_printf_common+0x9c>
 800ab6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab70:	1e13      	subs	r3, r2, #0
 800ab72:	6822      	ldr	r2, [r4, #0]
 800ab74:	bf18      	it	ne
 800ab76:	2301      	movne	r3, #1
 800ab78:	0692      	lsls	r2, r2, #26
 800ab7a:	d42e      	bmi.n	800abda <_printf_common+0xb6>
 800ab7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab80:	4649      	mov	r1, r9
 800ab82:	4638      	mov	r0, r7
 800ab84:	47c0      	blx	r8
 800ab86:	3001      	adds	r0, #1
 800ab88:	d021      	beq.n	800abce <_printf_common+0xaa>
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	341a      	adds	r4, #26
 800ab8e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800ab92:	f003 0306 	and.w	r3, r3, #6
 800ab96:	6832      	ldr	r2, [r6, #0]
 800ab98:	2600      	movs	r6, #0
 800ab9a:	2b04      	cmp	r3, #4
 800ab9c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aba0:	bf08      	it	eq
 800aba2:	1aad      	subeq	r5, r5, r2
 800aba4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800aba8:	bf14      	ite	ne
 800abaa:	2500      	movne	r5, #0
 800abac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abb0:	4293      	cmp	r3, r2
 800abb2:	bfc4      	itt	gt
 800abb4:	1a9b      	subgt	r3, r3, r2
 800abb6:	18ed      	addgt	r5, r5, r3
 800abb8:	42b5      	cmp	r5, r6
 800abba:	d11a      	bne.n	800abf2 <_printf_common+0xce>
 800abbc:	2000      	movs	r0, #0
 800abbe:	e008      	b.n	800abd2 <_printf_common+0xae>
 800abc0:	2301      	movs	r3, #1
 800abc2:	4652      	mov	r2, sl
 800abc4:	4649      	mov	r1, r9
 800abc6:	4638      	mov	r0, r7
 800abc8:	47c0      	blx	r8
 800abca:	3001      	adds	r0, #1
 800abcc:	d103      	bne.n	800abd6 <_printf_common+0xb2>
 800abce:	f04f 30ff 	mov.w	r0, #4294967295
 800abd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd6:	3501      	adds	r5, #1
 800abd8:	e7c3      	b.n	800ab62 <_printf_common+0x3e>
 800abda:	18e1      	adds	r1, r4, r3
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	2030      	movs	r0, #48	; 0x30
 800abe0:	3302      	adds	r3, #2
 800abe2:	4422      	add	r2, r4
 800abe4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abf0:	e7c4      	b.n	800ab7c <_printf_common+0x58>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4622      	mov	r2, r4
 800abf6:	4649      	mov	r1, r9
 800abf8:	4638      	mov	r0, r7
 800abfa:	47c0      	blx	r8
 800abfc:	3001      	adds	r0, #1
 800abfe:	d0e6      	beq.n	800abce <_printf_common+0xaa>
 800ac00:	3601      	adds	r6, #1
 800ac02:	e7d9      	b.n	800abb8 <_printf_common+0x94>

0800ac04 <_printf_i>:
 800ac04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac08:	7e0f      	ldrb	r7, [r1, #24]
 800ac0a:	4691      	mov	r9, r2
 800ac0c:	4680      	mov	r8, r0
 800ac0e:	460c      	mov	r4, r1
 800ac10:	2f78      	cmp	r7, #120	; 0x78
 800ac12:	469a      	mov	sl, r3
 800ac14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac1a:	d807      	bhi.n	800ac2c <_printf_i+0x28>
 800ac1c:	2f62      	cmp	r7, #98	; 0x62
 800ac1e:	d80a      	bhi.n	800ac36 <_printf_i+0x32>
 800ac20:	2f00      	cmp	r7, #0
 800ac22:	f000 80d8 	beq.w	800add6 <_printf_i+0x1d2>
 800ac26:	2f58      	cmp	r7, #88	; 0x58
 800ac28:	f000 80a3 	beq.w	800ad72 <_printf_i+0x16e>
 800ac2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac34:	e03a      	b.n	800acac <_printf_i+0xa8>
 800ac36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac3a:	2b15      	cmp	r3, #21
 800ac3c:	d8f6      	bhi.n	800ac2c <_printf_i+0x28>
 800ac3e:	a101      	add	r1, pc, #4	; (adr r1, 800ac44 <_printf_i+0x40>)
 800ac40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac44:	0800ac9d 	.word	0x0800ac9d
 800ac48:	0800acb1 	.word	0x0800acb1
 800ac4c:	0800ac2d 	.word	0x0800ac2d
 800ac50:	0800ac2d 	.word	0x0800ac2d
 800ac54:	0800ac2d 	.word	0x0800ac2d
 800ac58:	0800ac2d 	.word	0x0800ac2d
 800ac5c:	0800acb1 	.word	0x0800acb1
 800ac60:	0800ac2d 	.word	0x0800ac2d
 800ac64:	0800ac2d 	.word	0x0800ac2d
 800ac68:	0800ac2d 	.word	0x0800ac2d
 800ac6c:	0800ac2d 	.word	0x0800ac2d
 800ac70:	0800adbd 	.word	0x0800adbd
 800ac74:	0800ace1 	.word	0x0800ace1
 800ac78:	0800ad9f 	.word	0x0800ad9f
 800ac7c:	0800ac2d 	.word	0x0800ac2d
 800ac80:	0800ac2d 	.word	0x0800ac2d
 800ac84:	0800addf 	.word	0x0800addf
 800ac88:	0800ac2d 	.word	0x0800ac2d
 800ac8c:	0800ace1 	.word	0x0800ace1
 800ac90:	0800ac2d 	.word	0x0800ac2d
 800ac94:	0800ac2d 	.word	0x0800ac2d
 800ac98:	0800ada7 	.word	0x0800ada7
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	1d1a      	adds	r2, r3, #4
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	602a      	str	r2, [r5, #0]
 800aca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acac:	2301      	movs	r3, #1
 800acae:	e0a3      	b.n	800adf8 <_printf_i+0x1f4>
 800acb0:	6820      	ldr	r0, [r4, #0]
 800acb2:	6829      	ldr	r1, [r5, #0]
 800acb4:	0606      	lsls	r6, r0, #24
 800acb6:	f101 0304 	add.w	r3, r1, #4
 800acba:	d50a      	bpl.n	800acd2 <_printf_i+0xce>
 800acbc:	680e      	ldr	r6, [r1, #0]
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	2e00      	cmp	r6, #0
 800acc2:	da03      	bge.n	800accc <_printf_i+0xc8>
 800acc4:	232d      	movs	r3, #45	; 0x2d
 800acc6:	4276      	negs	r6, r6
 800acc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800accc:	485e      	ldr	r0, [pc, #376]	; (800ae48 <_printf_i+0x244>)
 800acce:	230a      	movs	r3, #10
 800acd0:	e019      	b.n	800ad06 <_printf_i+0x102>
 800acd2:	680e      	ldr	r6, [r1, #0]
 800acd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acd8:	602b      	str	r3, [r5, #0]
 800acda:	bf18      	it	ne
 800acdc:	b236      	sxthne	r6, r6
 800acde:	e7ef      	b.n	800acc0 <_printf_i+0xbc>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	6820      	ldr	r0, [r4, #0]
 800ace4:	1d19      	adds	r1, r3, #4
 800ace6:	6029      	str	r1, [r5, #0]
 800ace8:	0601      	lsls	r1, r0, #24
 800acea:	d501      	bpl.n	800acf0 <_printf_i+0xec>
 800acec:	681e      	ldr	r6, [r3, #0]
 800acee:	e002      	b.n	800acf6 <_printf_i+0xf2>
 800acf0:	0646      	lsls	r6, r0, #25
 800acf2:	d5fb      	bpl.n	800acec <_printf_i+0xe8>
 800acf4:	881e      	ldrh	r6, [r3, #0]
 800acf6:	2f6f      	cmp	r7, #111	; 0x6f
 800acf8:	4853      	ldr	r0, [pc, #332]	; (800ae48 <_printf_i+0x244>)
 800acfa:	bf0c      	ite	eq
 800acfc:	2308      	moveq	r3, #8
 800acfe:	230a      	movne	r3, #10
 800ad00:	2100      	movs	r1, #0
 800ad02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad06:	6865      	ldr	r5, [r4, #4]
 800ad08:	2d00      	cmp	r5, #0
 800ad0a:	60a5      	str	r5, [r4, #8]
 800ad0c:	bfa2      	ittt	ge
 800ad0e:	6821      	ldrge	r1, [r4, #0]
 800ad10:	f021 0104 	bicge.w	r1, r1, #4
 800ad14:	6021      	strge	r1, [r4, #0]
 800ad16:	b90e      	cbnz	r6, 800ad1c <_printf_i+0x118>
 800ad18:	2d00      	cmp	r5, #0
 800ad1a:	d04d      	beq.n	800adb8 <_printf_i+0x1b4>
 800ad1c:	4615      	mov	r5, r2
 800ad1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad22:	fb03 6711 	mls	r7, r3, r1, r6
 800ad26:	5dc7      	ldrb	r7, [r0, r7]
 800ad28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad2c:	4637      	mov	r7, r6
 800ad2e:	460e      	mov	r6, r1
 800ad30:	42bb      	cmp	r3, r7
 800ad32:	d9f4      	bls.n	800ad1e <_printf_i+0x11a>
 800ad34:	2b08      	cmp	r3, #8
 800ad36:	d10b      	bne.n	800ad50 <_printf_i+0x14c>
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	07de      	lsls	r6, r3, #31
 800ad3c:	d508      	bpl.n	800ad50 <_printf_i+0x14c>
 800ad3e:	6923      	ldr	r3, [r4, #16]
 800ad40:	6861      	ldr	r1, [r4, #4]
 800ad42:	4299      	cmp	r1, r3
 800ad44:	bfde      	ittt	le
 800ad46:	2330      	movle	r3, #48	; 0x30
 800ad48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad50:	1b52      	subs	r2, r2, r5
 800ad52:	6122      	str	r2, [r4, #16]
 800ad54:	464b      	mov	r3, r9
 800ad56:	aa03      	add	r2, sp, #12
 800ad58:	4621      	mov	r1, r4
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	f8cd a000 	str.w	sl, [sp]
 800ad60:	f7ff fee0 	bl	800ab24 <_printf_common>
 800ad64:	3001      	adds	r0, #1
 800ad66:	d14c      	bne.n	800ae02 <_printf_i+0x1fe>
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	b004      	add	sp, #16
 800ad6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad72:	4835      	ldr	r0, [pc, #212]	; (800ae48 <_printf_i+0x244>)
 800ad74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad78:	6829      	ldr	r1, [r5, #0]
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad80:	6029      	str	r1, [r5, #0]
 800ad82:	061d      	lsls	r5, r3, #24
 800ad84:	d514      	bpl.n	800adb0 <_printf_i+0x1ac>
 800ad86:	07df      	lsls	r7, r3, #31
 800ad88:	bf44      	itt	mi
 800ad8a:	f043 0320 	orrmi.w	r3, r3, #32
 800ad8e:	6023      	strmi	r3, [r4, #0]
 800ad90:	b91e      	cbnz	r6, 800ad9a <_printf_i+0x196>
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	f023 0320 	bic.w	r3, r3, #32
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	2310      	movs	r3, #16
 800ad9c:	e7b0      	b.n	800ad00 <_printf_i+0xfc>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	f043 0320 	orr.w	r3, r3, #32
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	2378      	movs	r3, #120	; 0x78
 800ada8:	4828      	ldr	r0, [pc, #160]	; (800ae4c <_printf_i+0x248>)
 800adaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adae:	e7e3      	b.n	800ad78 <_printf_i+0x174>
 800adb0:	0659      	lsls	r1, r3, #25
 800adb2:	bf48      	it	mi
 800adb4:	b2b6      	uxthmi	r6, r6
 800adb6:	e7e6      	b.n	800ad86 <_printf_i+0x182>
 800adb8:	4615      	mov	r5, r2
 800adba:	e7bb      	b.n	800ad34 <_printf_i+0x130>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	6826      	ldr	r6, [r4, #0]
 800adc0:	1d18      	adds	r0, r3, #4
 800adc2:	6961      	ldr	r1, [r4, #20]
 800adc4:	6028      	str	r0, [r5, #0]
 800adc6:	0635      	lsls	r5, r6, #24
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	d501      	bpl.n	800add0 <_printf_i+0x1cc>
 800adcc:	6019      	str	r1, [r3, #0]
 800adce:	e002      	b.n	800add6 <_printf_i+0x1d2>
 800add0:	0670      	lsls	r0, r6, #25
 800add2:	d5fb      	bpl.n	800adcc <_printf_i+0x1c8>
 800add4:	8019      	strh	r1, [r3, #0]
 800add6:	2300      	movs	r3, #0
 800add8:	4615      	mov	r5, r2
 800adda:	6123      	str	r3, [r4, #16]
 800addc:	e7ba      	b.n	800ad54 <_printf_i+0x150>
 800adde:	682b      	ldr	r3, [r5, #0]
 800ade0:	2100      	movs	r1, #0
 800ade2:	1d1a      	adds	r2, r3, #4
 800ade4:	602a      	str	r2, [r5, #0]
 800ade6:	681d      	ldr	r5, [r3, #0]
 800ade8:	6862      	ldr	r2, [r4, #4]
 800adea:	4628      	mov	r0, r5
 800adec:	f000 fee8 	bl	800bbc0 <memchr>
 800adf0:	b108      	cbz	r0, 800adf6 <_printf_i+0x1f2>
 800adf2:	1b40      	subs	r0, r0, r5
 800adf4:	6060      	str	r0, [r4, #4]
 800adf6:	6863      	ldr	r3, [r4, #4]
 800adf8:	6123      	str	r3, [r4, #16]
 800adfa:	2300      	movs	r3, #0
 800adfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae00:	e7a8      	b.n	800ad54 <_printf_i+0x150>
 800ae02:	6923      	ldr	r3, [r4, #16]
 800ae04:	462a      	mov	r2, r5
 800ae06:	4649      	mov	r1, r9
 800ae08:	4640      	mov	r0, r8
 800ae0a:	47d0      	blx	sl
 800ae0c:	3001      	adds	r0, #1
 800ae0e:	d0ab      	beq.n	800ad68 <_printf_i+0x164>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	079b      	lsls	r3, r3, #30
 800ae14:	d413      	bmi.n	800ae3e <_printf_i+0x23a>
 800ae16:	68e0      	ldr	r0, [r4, #12]
 800ae18:	9b03      	ldr	r3, [sp, #12]
 800ae1a:	4298      	cmp	r0, r3
 800ae1c:	bfb8      	it	lt
 800ae1e:	4618      	movlt	r0, r3
 800ae20:	e7a4      	b.n	800ad6c <_printf_i+0x168>
 800ae22:	2301      	movs	r3, #1
 800ae24:	4632      	mov	r2, r6
 800ae26:	4649      	mov	r1, r9
 800ae28:	4640      	mov	r0, r8
 800ae2a:	47d0      	blx	sl
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d09b      	beq.n	800ad68 <_printf_i+0x164>
 800ae30:	3501      	adds	r5, #1
 800ae32:	68e3      	ldr	r3, [r4, #12]
 800ae34:	9903      	ldr	r1, [sp, #12]
 800ae36:	1a5b      	subs	r3, r3, r1
 800ae38:	42ab      	cmp	r3, r5
 800ae3a:	dcf2      	bgt.n	800ae22 <_printf_i+0x21e>
 800ae3c:	e7eb      	b.n	800ae16 <_printf_i+0x212>
 800ae3e:	2500      	movs	r5, #0
 800ae40:	f104 0619 	add.w	r6, r4, #25
 800ae44:	e7f5      	b.n	800ae32 <_printf_i+0x22e>
 800ae46:	bf00      	nop
 800ae48:	0800d8b2 	.word	0x0800d8b2
 800ae4c:	0800d8c3 	.word	0x0800d8c3

0800ae50 <siprintf>:
 800ae50:	b40e      	push	{r1, r2, r3}
 800ae52:	b500      	push	{lr}
 800ae54:	b09c      	sub	sp, #112	; 0x70
 800ae56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae5a:	ab1d      	add	r3, sp, #116	; 0x74
 800ae5c:	9002      	str	r0, [sp, #8]
 800ae5e:	9006      	str	r0, [sp, #24]
 800ae60:	9107      	str	r1, [sp, #28]
 800ae62:	9104      	str	r1, [sp, #16]
 800ae64:	4808      	ldr	r0, [pc, #32]	; (800ae88 <siprintf+0x38>)
 800ae66:	4909      	ldr	r1, [pc, #36]	; (800ae8c <siprintf+0x3c>)
 800ae68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae6c:	9105      	str	r1, [sp, #20]
 800ae6e:	a902      	add	r1, sp, #8
 800ae70:	6800      	ldr	r0, [r0, #0]
 800ae72:	9301      	str	r3, [sp, #4]
 800ae74:	f001 fb9c 	bl	800c5b0 <_svfiprintf_r>
 800ae78:	9b02      	ldr	r3, [sp, #8]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	b01c      	add	sp, #112	; 0x70
 800ae80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae84:	b003      	add	sp, #12
 800ae86:	4770      	bx	lr
 800ae88:	20000020 	.word	0x20000020
 800ae8c:	ffff0208 	.word	0xffff0208

0800ae90 <strcat>:
 800ae90:	4602      	mov	r2, r0
 800ae92:	b510      	push	{r4, lr}
 800ae94:	7814      	ldrb	r4, [r2, #0]
 800ae96:	4613      	mov	r3, r2
 800ae98:	3201      	adds	r2, #1
 800ae9a:	2c00      	cmp	r4, #0
 800ae9c:	d1fa      	bne.n	800ae94 <strcat+0x4>
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aea4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aea8:	2a00      	cmp	r2, #0
 800aeaa:	d1f9      	bne.n	800aea0 <strcat+0x10>
 800aeac:	bd10      	pop	{r4, pc}

0800aeae <quorem>:
 800aeae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb2:	6903      	ldr	r3, [r0, #16]
 800aeb4:	4607      	mov	r7, r0
 800aeb6:	690c      	ldr	r4, [r1, #16]
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	f2c0 8087 	blt.w	800afcc <quorem+0x11e>
 800aebe:	3c01      	subs	r4, #1
 800aec0:	f100 0514 	add.w	r5, r0, #20
 800aec4:	f101 0814 	add.w	r8, r1, #20
 800aec8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aed0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aeda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aede:	3301      	adds	r3, #1
 800aee0:	429a      	cmp	r2, r3
 800aee2:	fbb2 f6f3 	udiv	r6, r2, r3
 800aee6:	d335      	bcc.n	800af54 <quorem+0xa6>
 800aee8:	f04f 0e00 	mov.w	lr, #0
 800aeec:	4640      	mov	r0, r8
 800aeee:	46ac      	mov	ip, r5
 800aef0:	46f2      	mov	sl, lr
 800aef2:	f850 2b04 	ldr.w	r2, [r0], #4
 800aef6:	b293      	uxth	r3, r2
 800aef8:	4581      	cmp	r9, r0
 800aefa:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800aefe:	fb06 e303 	mla	r3, r6, r3, lr
 800af02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af06:	b29b      	uxth	r3, r3
 800af08:	fb06 e202 	mla	r2, r6, r2, lr
 800af0c:	ebaa 0303 	sub.w	r3, sl, r3
 800af10:	f8dc a000 	ldr.w	sl, [ip]
 800af14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af18:	fa1f fa8a 	uxth.w	sl, sl
 800af1c:	b292      	uxth	r2, r2
 800af1e:	4453      	add	r3, sl
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	f8dc 3000 	ldr.w	r3, [ip]
 800af26:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 800af2a:	9b00      	ldr	r3, [sp, #0]
 800af2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af30:	f8bd 3000 	ldrh.w	r3, [sp]
 800af34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af38:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af3c:	f84c 3b04 	str.w	r3, [ip], #4
 800af40:	d2d7      	bcs.n	800aef2 <quorem+0x44>
 800af42:	f855 300b 	ldr.w	r3, [r5, fp]
 800af46:	b92b      	cbnz	r3, 800af54 <quorem+0xa6>
 800af48:	9b01      	ldr	r3, [sp, #4]
 800af4a:	3b04      	subs	r3, #4
 800af4c:	429d      	cmp	r5, r3
 800af4e:	461a      	mov	r2, r3
 800af50:	d330      	bcc.n	800afb4 <quorem+0x106>
 800af52:	613c      	str	r4, [r7, #16]
 800af54:	4638      	mov	r0, r7
 800af56:	f001 f8d1 	bl	800c0fc <__mcmp>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	db26      	blt.n	800afac <quorem+0xfe>
 800af5e:	3601      	adds	r6, #1
 800af60:	4628      	mov	r0, r5
 800af62:	f04f 0c00 	mov.w	ip, #0
 800af66:	f858 1b04 	ldr.w	r1, [r8], #4
 800af6a:	f8d0 e000 	ldr.w	lr, [r0]
 800af6e:	b28b      	uxth	r3, r1
 800af70:	45c1      	cmp	r9, r8
 800af72:	fa1f f28e 	uxth.w	r2, lr
 800af76:	ebac 0303 	sub.w	r3, ip, r3
 800af7a:	4413      	add	r3, r2
 800af7c:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800af80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af88:	b29b      	uxth	r3, r3
 800af8a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af92:	f840 3b04 	str.w	r3, [r0], #4
 800af96:	d2e6      	bcs.n	800af66 <quorem+0xb8>
 800af98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afa0:	b922      	cbnz	r2, 800afac <quorem+0xfe>
 800afa2:	3b04      	subs	r3, #4
 800afa4:	429d      	cmp	r5, r3
 800afa6:	461a      	mov	r2, r3
 800afa8:	d30a      	bcc.n	800afc0 <quorem+0x112>
 800afaa:	613c      	str	r4, [r7, #16]
 800afac:	4630      	mov	r0, r6
 800afae:	b003      	add	sp, #12
 800afb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb4:	6812      	ldr	r2, [r2, #0]
 800afb6:	3b04      	subs	r3, #4
 800afb8:	2a00      	cmp	r2, #0
 800afba:	d1ca      	bne.n	800af52 <quorem+0xa4>
 800afbc:	3c01      	subs	r4, #1
 800afbe:	e7c5      	b.n	800af4c <quorem+0x9e>
 800afc0:	6812      	ldr	r2, [r2, #0]
 800afc2:	3b04      	subs	r3, #4
 800afc4:	2a00      	cmp	r2, #0
 800afc6:	d1f0      	bne.n	800afaa <quorem+0xfc>
 800afc8:	3c01      	subs	r4, #1
 800afca:	e7eb      	b.n	800afa4 <quorem+0xf6>
 800afcc:	2000      	movs	r0, #0
 800afce:	e7ee      	b.n	800afae <quorem+0x100>

0800afd0 <_dtoa_r>:
 800afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afd6:	4604      	mov	r4, r0
 800afd8:	ee10 aa10 	vmov	sl, s0
 800afdc:	ed2d 8b04 	vpush	{d8-d9}
 800afe0:	b093      	sub	sp, #76	; 0x4c
 800afe2:	ec57 6b10 	vmov	r6, r7, d0
 800afe6:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800afea:	46bb      	mov	fp, r7
 800afec:	9106      	str	r1, [sp, #24]
 800afee:	9209      	str	r2, [sp, #36]	; 0x24
 800aff0:	930c      	str	r3, [sp, #48]	; 0x30
 800aff2:	b975      	cbnz	r5, 800b012 <_dtoa_r+0x42>
 800aff4:	2010      	movs	r0, #16
 800aff6:	f000 fddb 	bl	800bbb0 <malloc>
 800affa:	4602      	mov	r2, r0
 800affc:	6260      	str	r0, [r4, #36]	; 0x24
 800affe:	b920      	cbnz	r0, 800b00a <_dtoa_r+0x3a>
 800b000:	4ba7      	ldr	r3, [pc, #668]	; (800b2a0 <_dtoa_r+0x2d0>)
 800b002:	21ea      	movs	r1, #234	; 0xea
 800b004:	48a7      	ldr	r0, [pc, #668]	; (800b2a4 <_dtoa_r+0x2d4>)
 800b006:	f001 fbe3 	bl	800c7d0 <__assert_func>
 800b00a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b00e:	6005      	str	r5, [r0, #0]
 800b010:	60c5      	str	r5, [r0, #12]
 800b012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b014:	6819      	ldr	r1, [r3, #0]
 800b016:	b151      	cbz	r1, 800b02e <_dtoa_r+0x5e>
 800b018:	685a      	ldr	r2, [r3, #4]
 800b01a:	2301      	movs	r3, #1
 800b01c:	4620      	mov	r0, r4
 800b01e:	4093      	lsls	r3, r2
 800b020:	604a      	str	r2, [r1, #4]
 800b022:	608b      	str	r3, [r1, #8]
 800b024:	f000 fe28 	bl	800bc78 <_Bfree>
 800b028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b02a:	2200      	movs	r2, #0
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	1e3b      	subs	r3, r7, #0
 800b030:	bfad      	iteet	ge
 800b032:	2300      	movge	r3, #0
 800b034:	2201      	movlt	r2, #1
 800b036:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b03a:	f8c8 3000 	strge.w	r3, [r8]
 800b03e:	4b9a      	ldr	r3, [pc, #616]	; (800b2a8 <_dtoa_r+0x2d8>)
 800b040:	bfb8      	it	lt
 800b042:	f8c8 2000 	strlt.w	r2, [r8]
 800b046:	ea33 030b 	bics.w	r3, r3, fp
 800b04a:	d11b      	bne.n	800b084 <_dtoa_r+0xb4>
 800b04c:	f242 730f 	movw	r3, #9999	; 0x270f
 800b050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b058:	4333      	orrs	r3, r6
 800b05a:	f000 858f 	beq.w	800bb7c <_dtoa_r+0xbac>
 800b05e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b060:	b963      	cbnz	r3, 800b07c <_dtoa_r+0xac>
 800b062:	4b92      	ldr	r3, [pc, #584]	; (800b2ac <_dtoa_r+0x2dc>)
 800b064:	e022      	b.n	800b0ac <_dtoa_r+0xdc>
 800b066:	4b92      	ldr	r3, [pc, #584]	; (800b2b0 <_dtoa_r+0x2e0>)
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	3308      	adds	r3, #8
 800b06c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	9801      	ldr	r0, [sp, #4]
 800b072:	b013      	add	sp, #76	; 0x4c
 800b074:	ecbd 8b04 	vpop	{d8-d9}
 800b078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07c:	4b8b      	ldr	r3, [pc, #556]	; (800b2ac <_dtoa_r+0x2dc>)
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	3303      	adds	r3, #3
 800b082:	e7f3      	b.n	800b06c <_dtoa_r+0x9c>
 800b084:	2200      	movs	r2, #0
 800b086:	2300      	movs	r3, #0
 800b088:	4650      	mov	r0, sl
 800b08a:	4659      	mov	r1, fp
 800b08c:	f7f5 fd20 	bl	8000ad0 <__aeabi_dcmpeq>
 800b090:	4680      	mov	r8, r0
 800b092:	ec4b ab19 	vmov	d9, sl, fp
 800b096:	b158      	cbz	r0, 800b0b0 <_dtoa_r+0xe0>
 800b098:	2301      	movs	r3, #1
 800b09a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 8568 	beq.w	800bb76 <_dtoa_r+0xba6>
 800b0a6:	4883      	ldr	r0, [pc, #524]	; (800b2b4 <_dtoa_r+0x2e4>)
 800b0a8:	6018      	str	r0, [r3, #0]
 800b0aa:	1e43      	subs	r3, r0, #1
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	e7df      	b.n	800b070 <_dtoa_r+0xa0>
 800b0b0:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b0b4:	aa10      	add	r2, sp, #64	; 0x40
 800b0b6:	a911      	add	r1, sp, #68	; 0x44
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	ec4b ab10 	vmov	d0, sl, fp
 800b0be:	f001 f8c9 	bl	800c254 <__d2b>
 800b0c2:	ee08 0a10 	vmov	s16, r0
 800b0c6:	2d00      	cmp	r5, #0
 800b0c8:	f000 8082 	beq.w	800b1d0 <_dtoa_r+0x200>
 800b0cc:	ee19 3a90 	vmov	r3, s19
 800b0d0:	4656      	mov	r6, sl
 800b0d2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0d6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b0da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b0e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	4b73      	ldr	r3, [pc, #460]	; (800b2b8 <_dtoa_r+0x2e8>)
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	f7f5 f8cf 	bl	8000290 <__aeabi_dsub>
 800b0f2:	a365      	add	r3, pc, #404	; (adr r3, 800b288 <_dtoa_r+0x2b8>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	f7f5 fa82 	bl	8000600 <__aeabi_dmul>
 800b0fc:	a364      	add	r3, pc, #400	; (adr r3, 800b290 <_dtoa_r+0x2c0>)
 800b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b102:	f7f5 f8c7 	bl	8000294 <__adddf3>
 800b106:	4606      	mov	r6, r0
 800b108:	460f      	mov	r7, r1
 800b10a:	4628      	mov	r0, r5
 800b10c:	f7f5 fa0e 	bl	800052c <__aeabi_i2d>
 800b110:	a361      	add	r3, pc, #388	; (adr r3, 800b298 <_dtoa_r+0x2c8>)
 800b112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b116:	f7f5 fa73 	bl	8000600 <__aeabi_dmul>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4630      	mov	r0, r6
 800b120:	4639      	mov	r1, r7
 800b122:	f7f5 f8b7 	bl	8000294 <__adddf3>
 800b126:	4606      	mov	r6, r0
 800b128:	460f      	mov	r7, r1
 800b12a:	f7f5 fd19 	bl	8000b60 <__aeabi_d2iz>
 800b12e:	2200      	movs	r2, #0
 800b130:	9000      	str	r0, [sp, #0]
 800b132:	2300      	movs	r3, #0
 800b134:	4630      	mov	r0, r6
 800b136:	4639      	mov	r1, r7
 800b138:	f7f5 fcd4 	bl	8000ae4 <__aeabi_dcmplt>
 800b13c:	b150      	cbz	r0, 800b154 <_dtoa_r+0x184>
 800b13e:	9800      	ldr	r0, [sp, #0]
 800b140:	f7f5 f9f4 	bl	800052c <__aeabi_i2d>
 800b144:	4632      	mov	r2, r6
 800b146:	463b      	mov	r3, r7
 800b148:	f7f5 fcc2 	bl	8000ad0 <__aeabi_dcmpeq>
 800b14c:	b910      	cbnz	r0, 800b154 <_dtoa_r+0x184>
 800b14e:	9b00      	ldr	r3, [sp, #0]
 800b150:	3b01      	subs	r3, #1
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	9b00      	ldr	r3, [sp, #0]
 800b156:	2b16      	cmp	r3, #22
 800b158:	d859      	bhi.n	800b20e <_dtoa_r+0x23e>
 800b15a:	9a00      	ldr	r2, [sp, #0]
 800b15c:	4b57      	ldr	r3, [pc, #348]	; (800b2bc <_dtoa_r+0x2ec>)
 800b15e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b162:	ec51 0b19 	vmov	r0, r1, d9
 800b166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16a:	f7f5 fcbb 	bl	8000ae4 <__aeabi_dcmplt>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d04f      	beq.n	800b212 <_dtoa_r+0x242>
 800b172:	9b00      	ldr	r3, [sp, #0]
 800b174:	3b01      	subs	r3, #1
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	2300      	movs	r3, #0
 800b17a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b17c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b17e:	1b5d      	subs	r5, r3, r5
 800b180:	1e6b      	subs	r3, r5, #1
 800b182:	9305      	str	r3, [sp, #20]
 800b184:	bf49      	itett	mi
 800b186:	f1c5 0301 	rsbmi	r3, r5, #1
 800b18a:	2300      	movpl	r3, #0
 800b18c:	9304      	strmi	r3, [sp, #16]
 800b18e:	2300      	movmi	r3, #0
 800b190:	bf54      	ite	pl
 800b192:	9304      	strpl	r3, [sp, #16]
 800b194:	9305      	strmi	r3, [sp, #20]
 800b196:	9b00      	ldr	r3, [sp, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	db3c      	blt.n	800b216 <_dtoa_r+0x246>
 800b19c:	9b05      	ldr	r3, [sp, #20]
 800b19e:	9a00      	ldr	r2, [sp, #0]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	920a      	str	r2, [sp, #40]	; 0x28
 800b1a4:	9305      	str	r3, [sp, #20]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	9307      	str	r3, [sp, #28]
 800b1aa:	9b06      	ldr	r3, [sp, #24]
 800b1ac:	2b09      	cmp	r3, #9
 800b1ae:	f200 8089 	bhi.w	800b2c4 <_dtoa_r+0x2f4>
 800b1b2:	2b05      	cmp	r3, #5
 800b1b4:	bfc5      	ittet	gt
 800b1b6:	3b04      	subgt	r3, #4
 800b1b8:	2500      	movgt	r5, #0
 800b1ba:	2501      	movle	r5, #1
 800b1bc:	9306      	strgt	r3, [sp, #24]
 800b1be:	9b06      	ldr	r3, [sp, #24]
 800b1c0:	3b02      	subs	r3, #2
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	f200 8089 	bhi.w	800b2da <_dtoa_r+0x30a>
 800b1c8:	e8df f003 	tbb	[pc, r3]
 800b1cc:	5a393b2e 	.word	0x5a393b2e
 800b1d0:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b1d4:	441d      	add	r5, r3
 800b1d6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1da:	2b20      	cmp	r3, #32
 800b1dc:	bfc6      	itte	gt
 800b1de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1e2:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b1e6:	f1c3 0320 	rsble	r3, r3, #32
 800b1ea:	f105 35ff 	add.w	r5, r5, #4294967295
 800b1ee:	bfc5      	ittet	gt
 800b1f0:	fa0b f303 	lslgt.w	r3, fp, r3
 800b1f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b1f8:	fa06 f003 	lslle.w	r0, r6, r3
 800b1fc:	4318      	orrgt	r0, r3
 800b1fe:	f7f5 f985 	bl	800050c <__aeabi_ui2d>
 800b202:	2301      	movs	r3, #1
 800b204:	4606      	mov	r6, r0
 800b206:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b20a:	930e      	str	r3, [sp, #56]	; 0x38
 800b20c:	e76b      	b.n	800b0e6 <_dtoa_r+0x116>
 800b20e:	2301      	movs	r3, #1
 800b210:	e7b3      	b.n	800b17a <_dtoa_r+0x1aa>
 800b212:	900b      	str	r0, [sp, #44]	; 0x2c
 800b214:	e7b2      	b.n	800b17c <_dtoa_r+0x1ac>
 800b216:	9b04      	ldr	r3, [sp, #16]
 800b218:	9a00      	ldr	r2, [sp, #0]
 800b21a:	1a9b      	subs	r3, r3, r2
 800b21c:	9304      	str	r3, [sp, #16]
 800b21e:	4253      	negs	r3, r2
 800b220:	9307      	str	r3, [sp, #28]
 800b222:	2300      	movs	r3, #0
 800b224:	930a      	str	r3, [sp, #40]	; 0x28
 800b226:	e7c0      	b.n	800b1aa <_dtoa_r+0x1da>
 800b228:	2300      	movs	r3, #0
 800b22a:	9308      	str	r3, [sp, #32]
 800b22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22e:	2b00      	cmp	r3, #0
 800b230:	dc56      	bgt.n	800b2e0 <_dtoa_r+0x310>
 800b232:	2301      	movs	r3, #1
 800b234:	461a      	mov	r2, r3
 800b236:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b23a:	9209      	str	r2, [sp, #36]	; 0x24
 800b23c:	e00c      	b.n	800b258 <_dtoa_r+0x288>
 800b23e:	2301      	movs	r3, #1
 800b240:	e7f3      	b.n	800b22a <_dtoa_r+0x25a>
 800b242:	2300      	movs	r3, #0
 800b244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b246:	9308      	str	r3, [sp, #32]
 800b248:	9b00      	ldr	r3, [sp, #0]
 800b24a:	4413      	add	r3, r2
 800b24c:	9302      	str	r3, [sp, #8]
 800b24e:	3301      	adds	r3, #1
 800b250:	2b01      	cmp	r3, #1
 800b252:	9303      	str	r3, [sp, #12]
 800b254:	bfb8      	it	lt
 800b256:	2301      	movlt	r3, #1
 800b258:	2200      	movs	r2, #0
 800b25a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b25c:	6042      	str	r2, [r0, #4]
 800b25e:	2204      	movs	r2, #4
 800b260:	f102 0614 	add.w	r6, r2, #20
 800b264:	6841      	ldr	r1, [r0, #4]
 800b266:	429e      	cmp	r6, r3
 800b268:	d93e      	bls.n	800b2e8 <_dtoa_r+0x318>
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 fcc4 	bl	800bbf8 <_Balloc>
 800b270:	9001      	str	r0, [sp, #4]
 800b272:	2800      	cmp	r0, #0
 800b274:	d13c      	bne.n	800b2f0 <_dtoa_r+0x320>
 800b276:	4b12      	ldr	r3, [pc, #72]	; (800b2c0 <_dtoa_r+0x2f0>)
 800b278:	4602      	mov	r2, r0
 800b27a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b27e:	e6c1      	b.n	800b004 <_dtoa_r+0x34>
 800b280:	2301      	movs	r3, #1
 800b282:	e7df      	b.n	800b244 <_dtoa_r+0x274>
 800b284:	f3af 8000 	nop.w
 800b288:	636f4361 	.word	0x636f4361
 800b28c:	3fd287a7 	.word	0x3fd287a7
 800b290:	8b60c8b3 	.word	0x8b60c8b3
 800b294:	3fc68a28 	.word	0x3fc68a28
 800b298:	509f79fb 	.word	0x509f79fb
 800b29c:	3fd34413 	.word	0x3fd34413
 800b2a0:	0800d8e1 	.word	0x0800d8e1
 800b2a4:	0800d8f8 	.word	0x0800d8f8
 800b2a8:	7ff00000 	.word	0x7ff00000
 800b2ac:	0800d8dd 	.word	0x0800d8dd
 800b2b0:	0800d8d4 	.word	0x0800d8d4
 800b2b4:	0800d8b1 	.word	0x0800d8b1
 800b2b8:	3ff80000 	.word	0x3ff80000
 800b2bc:	0800d9e8 	.word	0x0800d9e8
 800b2c0:	0800d953 	.word	0x0800d953
 800b2c4:	2501      	movs	r5, #1
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	9508      	str	r5, [sp, #32]
 800b2ca:	9306      	str	r3, [sp, #24]
 800b2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2d6:	2312      	movs	r3, #18
 800b2d8:	e7af      	b.n	800b23a <_dtoa_r+0x26a>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	9308      	str	r3, [sp, #32]
 800b2de:	e7f5      	b.n	800b2cc <_dtoa_r+0x2fc>
 800b2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2e6:	e7b7      	b.n	800b258 <_dtoa_r+0x288>
 800b2e8:	3101      	adds	r1, #1
 800b2ea:	0052      	lsls	r2, r2, #1
 800b2ec:	6041      	str	r1, [r0, #4]
 800b2ee:	e7b7      	b.n	800b260 <_dtoa_r+0x290>
 800b2f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2f2:	9a01      	ldr	r2, [sp, #4]
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	9b03      	ldr	r3, [sp, #12]
 800b2f8:	2b0e      	cmp	r3, #14
 800b2fa:	f200 809d 	bhi.w	800b438 <_dtoa_r+0x468>
 800b2fe:	2d00      	cmp	r5, #0
 800b300:	f000 809a 	beq.w	800b438 <_dtoa_r+0x468>
 800b304:	9b00      	ldr	r3, [sp, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	dd32      	ble.n	800b370 <_dtoa_r+0x3a0>
 800b30a:	f003 030f 	and.w	r3, r3, #15
 800b30e:	4ab6      	ldr	r2, [pc, #728]	; (800b5e8 <_dtoa_r+0x618>)
 800b310:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b314:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b318:	9b00      	ldr	r3, [sp, #0]
 800b31a:	05d8      	lsls	r0, r3, #23
 800b31c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b320:	d516      	bpl.n	800b350 <_dtoa_r+0x380>
 800b322:	4bb2      	ldr	r3, [pc, #712]	; (800b5ec <_dtoa_r+0x61c>)
 800b324:	f007 070f 	and.w	r7, r7, #15
 800b328:	2503      	movs	r5, #3
 800b32a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b32e:	ec51 0b19 	vmov	r0, r1, d9
 800b332:	f7f5 fa8f 	bl	8000854 <__aeabi_ddiv>
 800b336:	4682      	mov	sl, r0
 800b338:	468b      	mov	fp, r1
 800b33a:	4eac      	ldr	r6, [pc, #688]	; (800b5ec <_dtoa_r+0x61c>)
 800b33c:	b957      	cbnz	r7, 800b354 <_dtoa_r+0x384>
 800b33e:	4642      	mov	r2, r8
 800b340:	464b      	mov	r3, r9
 800b342:	4650      	mov	r0, sl
 800b344:	4659      	mov	r1, fp
 800b346:	f7f5 fa85 	bl	8000854 <__aeabi_ddiv>
 800b34a:	4682      	mov	sl, r0
 800b34c:	468b      	mov	fp, r1
 800b34e:	e028      	b.n	800b3a2 <_dtoa_r+0x3d2>
 800b350:	2502      	movs	r5, #2
 800b352:	e7f2      	b.n	800b33a <_dtoa_r+0x36a>
 800b354:	07f9      	lsls	r1, r7, #31
 800b356:	d508      	bpl.n	800b36a <_dtoa_r+0x39a>
 800b358:	4640      	mov	r0, r8
 800b35a:	4649      	mov	r1, r9
 800b35c:	3501      	adds	r5, #1
 800b35e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b362:	f7f5 f94d 	bl	8000600 <__aeabi_dmul>
 800b366:	4680      	mov	r8, r0
 800b368:	4689      	mov	r9, r1
 800b36a:	107f      	asrs	r7, r7, #1
 800b36c:	3608      	adds	r6, #8
 800b36e:	e7e5      	b.n	800b33c <_dtoa_r+0x36c>
 800b370:	f000 809b 	beq.w	800b4aa <_dtoa_r+0x4da>
 800b374:	9b00      	ldr	r3, [sp, #0]
 800b376:	2502      	movs	r5, #2
 800b378:	4f9c      	ldr	r7, [pc, #624]	; (800b5ec <_dtoa_r+0x61c>)
 800b37a:	425e      	negs	r6, r3
 800b37c:	4b9a      	ldr	r3, [pc, #616]	; (800b5e8 <_dtoa_r+0x618>)
 800b37e:	f006 020f 	and.w	r2, r6, #15
 800b382:	1136      	asrs	r6, r6, #4
 800b384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b388:	ec51 0b19 	vmov	r0, r1, d9
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	f7f5 f936 	bl	8000600 <__aeabi_dmul>
 800b394:	2300      	movs	r3, #0
 800b396:	4682      	mov	sl, r0
 800b398:	468b      	mov	fp, r1
 800b39a:	2e00      	cmp	r6, #0
 800b39c:	d17a      	bne.n	800b494 <_dtoa_r+0x4c4>
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1d3      	bne.n	800b34a <_dtoa_r+0x37a>
 800b3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f000 8082 	beq.w	800b4ae <_dtoa_r+0x4de>
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4b90      	ldr	r3, [pc, #576]	; (800b5f0 <_dtoa_r+0x620>)
 800b3ae:	4650      	mov	r0, sl
 800b3b0:	4659      	mov	r1, fp
 800b3b2:	f7f5 fb97 	bl	8000ae4 <__aeabi_dcmplt>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d079      	beq.n	800b4ae <_dtoa_r+0x4de>
 800b3ba:	9b03      	ldr	r3, [sp, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d076      	beq.n	800b4ae <_dtoa_r+0x4de>
 800b3c0:	9b02      	ldr	r3, [sp, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dd36      	ble.n	800b434 <_dtoa_r+0x464>
 800b3c6:	9b00      	ldr	r3, [sp, #0]
 800b3c8:	4650      	mov	r0, sl
 800b3ca:	4659      	mov	r1, fp
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	1e5f      	subs	r7, r3, #1
 800b3d0:	4b88      	ldr	r3, [pc, #544]	; (800b5f4 <_dtoa_r+0x624>)
 800b3d2:	f7f5 f915 	bl	8000600 <__aeabi_dmul>
 800b3d6:	3501      	adds	r5, #1
 800b3d8:	4682      	mov	sl, r0
 800b3da:	468b      	mov	fp, r1
 800b3dc:	9e02      	ldr	r6, [sp, #8]
 800b3de:	4628      	mov	r0, r5
 800b3e0:	46d0      	mov	r8, sl
 800b3e2:	f7f5 f8a3 	bl	800052c <__aeabi_i2d>
 800b3e6:	4652      	mov	r2, sl
 800b3e8:	465b      	mov	r3, fp
 800b3ea:	46d9      	mov	r9, fp
 800b3ec:	f7f5 f908 	bl	8000600 <__aeabi_dmul>
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	4b81      	ldr	r3, [pc, #516]	; (800b5f8 <_dtoa_r+0x628>)
 800b3f4:	f7f4 ff4e 	bl	8000294 <__adddf3>
 800b3f8:	4682      	mov	sl, r0
 800b3fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b3fe:	2e00      	cmp	r6, #0
 800b400:	d158      	bne.n	800b4b4 <_dtoa_r+0x4e4>
 800b402:	2200      	movs	r2, #0
 800b404:	4b7d      	ldr	r3, [pc, #500]	; (800b5fc <_dtoa_r+0x62c>)
 800b406:	4640      	mov	r0, r8
 800b408:	4649      	mov	r1, r9
 800b40a:	f7f4 ff41 	bl	8000290 <__aeabi_dsub>
 800b40e:	4652      	mov	r2, sl
 800b410:	465b      	mov	r3, fp
 800b412:	4680      	mov	r8, r0
 800b414:	4689      	mov	r9, r1
 800b416:	f7f5 fb83 	bl	8000b20 <__aeabi_dcmpgt>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	f040 8293 	bne.w	800b946 <_dtoa_r+0x976>
 800b420:	4652      	mov	r2, sl
 800b422:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b426:	4640      	mov	r0, r8
 800b428:	4649      	mov	r1, r9
 800b42a:	f7f5 fb5b 	bl	8000ae4 <__aeabi_dcmplt>
 800b42e:	2800      	cmp	r0, #0
 800b430:	f040 8287 	bne.w	800b942 <_dtoa_r+0x972>
 800b434:	ec5b ab19 	vmov	sl, fp, d9
 800b438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f2c0 8148 	blt.w	800b6d0 <_dtoa_r+0x700>
 800b440:	9a00      	ldr	r2, [sp, #0]
 800b442:	2a0e      	cmp	r2, #14
 800b444:	f300 8144 	bgt.w	800b6d0 <_dtoa_r+0x700>
 800b448:	4b67      	ldr	r3, [pc, #412]	; (800b5e8 <_dtoa_r+0x618>)
 800b44a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b44e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b454:	2b00      	cmp	r3, #0
 800b456:	f280 80d5 	bge.w	800b604 <_dtoa_r+0x634>
 800b45a:	9b03      	ldr	r3, [sp, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f300 80d1 	bgt.w	800b604 <_dtoa_r+0x634>
 800b462:	f040 826d 	bne.w	800b940 <_dtoa_r+0x970>
 800b466:	2200      	movs	r2, #0
 800b468:	4b64      	ldr	r3, [pc, #400]	; (800b5fc <_dtoa_r+0x62c>)
 800b46a:	4640      	mov	r0, r8
 800b46c:	4649      	mov	r1, r9
 800b46e:	f7f5 f8c7 	bl	8000600 <__aeabi_dmul>
 800b472:	4652      	mov	r2, sl
 800b474:	465b      	mov	r3, fp
 800b476:	f7f5 fb49 	bl	8000b0c <__aeabi_dcmpge>
 800b47a:	9e03      	ldr	r6, [sp, #12]
 800b47c:	4637      	mov	r7, r6
 800b47e:	2800      	cmp	r0, #0
 800b480:	f040 8243 	bne.w	800b90a <_dtoa_r+0x93a>
 800b484:	2331      	movs	r3, #49	; 0x31
 800b486:	9d01      	ldr	r5, [sp, #4]
 800b488:	f805 3b01 	strb.w	r3, [r5], #1
 800b48c:	9b00      	ldr	r3, [sp, #0]
 800b48e:	3301      	adds	r3, #1
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	e23e      	b.n	800b912 <_dtoa_r+0x942>
 800b494:	07f2      	lsls	r2, r6, #31
 800b496:	d505      	bpl.n	800b4a4 <_dtoa_r+0x4d4>
 800b498:	3501      	adds	r5, #1
 800b49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b49e:	f7f5 f8af 	bl	8000600 <__aeabi_dmul>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	1076      	asrs	r6, r6, #1
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	e777      	b.n	800b39a <_dtoa_r+0x3ca>
 800b4aa:	2502      	movs	r5, #2
 800b4ac:	e779      	b.n	800b3a2 <_dtoa_r+0x3d2>
 800b4ae:	9f00      	ldr	r7, [sp, #0]
 800b4b0:	9e03      	ldr	r6, [sp, #12]
 800b4b2:	e794      	b.n	800b3de <_dtoa_r+0x40e>
 800b4b4:	9901      	ldr	r1, [sp, #4]
 800b4b6:	4b4c      	ldr	r3, [pc, #304]	; (800b5e8 <_dtoa_r+0x618>)
 800b4b8:	4431      	add	r1, r6
 800b4ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4be:	910d      	str	r1, [sp, #52]	; 0x34
 800b4c0:	9908      	ldr	r1, [sp, #32]
 800b4c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4c6:	2900      	cmp	r1, #0
 800b4c8:	d043      	beq.n	800b552 <_dtoa_r+0x582>
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	494c      	ldr	r1, [pc, #304]	; (800b600 <_dtoa_r+0x630>)
 800b4ce:	f7f5 f9c1 	bl	8000854 <__aeabi_ddiv>
 800b4d2:	4652      	mov	r2, sl
 800b4d4:	465b      	mov	r3, fp
 800b4d6:	f7f4 fedb 	bl	8000290 <__aeabi_dsub>
 800b4da:	9d01      	ldr	r5, [sp, #4]
 800b4dc:	4682      	mov	sl, r0
 800b4de:	468b      	mov	fp, r1
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	f7f5 fb3c 	bl	8000b60 <__aeabi_d2iz>
 800b4e8:	4606      	mov	r6, r0
 800b4ea:	f7f5 f81f 	bl	800052c <__aeabi_i2d>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	3630      	adds	r6, #48	; 0x30
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	f7f4 feca 	bl	8000290 <__aeabi_dsub>
 800b4fc:	4652      	mov	r2, sl
 800b4fe:	465b      	mov	r3, fp
 800b500:	f805 6b01 	strb.w	r6, [r5], #1
 800b504:	4680      	mov	r8, r0
 800b506:	4689      	mov	r9, r1
 800b508:	f7f5 faec 	bl	8000ae4 <__aeabi_dcmplt>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d163      	bne.n	800b5d8 <_dtoa_r+0x608>
 800b510:	4642      	mov	r2, r8
 800b512:	464b      	mov	r3, r9
 800b514:	2000      	movs	r0, #0
 800b516:	4936      	ldr	r1, [pc, #216]	; (800b5f0 <_dtoa_r+0x620>)
 800b518:	f7f4 feba 	bl	8000290 <__aeabi_dsub>
 800b51c:	4652      	mov	r2, sl
 800b51e:	465b      	mov	r3, fp
 800b520:	f7f5 fae0 	bl	8000ae4 <__aeabi_dcmplt>
 800b524:	2800      	cmp	r0, #0
 800b526:	f040 80b5 	bne.w	800b694 <_dtoa_r+0x6c4>
 800b52a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b52c:	429d      	cmp	r5, r3
 800b52e:	d081      	beq.n	800b434 <_dtoa_r+0x464>
 800b530:	2200      	movs	r2, #0
 800b532:	4b30      	ldr	r3, [pc, #192]	; (800b5f4 <_dtoa_r+0x624>)
 800b534:	4650      	mov	r0, sl
 800b536:	4659      	mov	r1, fp
 800b538:	f7f5 f862 	bl	8000600 <__aeabi_dmul>
 800b53c:	2200      	movs	r2, #0
 800b53e:	4682      	mov	sl, r0
 800b540:	468b      	mov	fp, r1
 800b542:	4640      	mov	r0, r8
 800b544:	4649      	mov	r1, r9
 800b546:	4b2b      	ldr	r3, [pc, #172]	; (800b5f4 <_dtoa_r+0x624>)
 800b548:	f7f5 f85a 	bl	8000600 <__aeabi_dmul>
 800b54c:	4680      	mov	r8, r0
 800b54e:	4689      	mov	r9, r1
 800b550:	e7c6      	b.n	800b4e0 <_dtoa_r+0x510>
 800b552:	4650      	mov	r0, sl
 800b554:	4659      	mov	r1, fp
 800b556:	f7f5 f853 	bl	8000600 <__aeabi_dmul>
 800b55a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b55c:	4682      	mov	sl, r0
 800b55e:	468b      	mov	fp, r1
 800b560:	9d01      	ldr	r5, [sp, #4]
 800b562:	930f      	str	r3, [sp, #60]	; 0x3c
 800b564:	4649      	mov	r1, r9
 800b566:	4640      	mov	r0, r8
 800b568:	f7f5 fafa 	bl	8000b60 <__aeabi_d2iz>
 800b56c:	4606      	mov	r6, r0
 800b56e:	f7f4 ffdd 	bl	800052c <__aeabi_i2d>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	4640      	mov	r0, r8
 800b578:	4649      	mov	r1, r9
 800b57a:	3630      	adds	r6, #48	; 0x30
 800b57c:	f7f4 fe88 	bl	8000290 <__aeabi_dsub>
 800b580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b582:	f805 6b01 	strb.w	r6, [r5], #1
 800b586:	4680      	mov	r8, r0
 800b588:	429d      	cmp	r5, r3
 800b58a:	4689      	mov	r9, r1
 800b58c:	f04f 0200 	mov.w	r2, #0
 800b590:	d124      	bne.n	800b5dc <_dtoa_r+0x60c>
 800b592:	4b1b      	ldr	r3, [pc, #108]	; (800b600 <_dtoa_r+0x630>)
 800b594:	4650      	mov	r0, sl
 800b596:	4659      	mov	r1, fp
 800b598:	f7f4 fe7c 	bl	8000294 <__adddf3>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	f7f5 fabc 	bl	8000b20 <__aeabi_dcmpgt>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d173      	bne.n	800b694 <_dtoa_r+0x6c4>
 800b5ac:	4652      	mov	r2, sl
 800b5ae:	465b      	mov	r3, fp
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	4913      	ldr	r1, [pc, #76]	; (800b600 <_dtoa_r+0x630>)
 800b5b4:	f7f4 fe6c 	bl	8000290 <__aeabi_dsub>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4640      	mov	r0, r8
 800b5be:	4649      	mov	r1, r9
 800b5c0:	f7f5 fa90 	bl	8000ae4 <__aeabi_dcmplt>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	f43f af35 	beq.w	800b434 <_dtoa_r+0x464>
 800b5ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5cc:	1e6b      	subs	r3, r5, #1
 800b5ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5d4:	2b30      	cmp	r3, #48	; 0x30
 800b5d6:	d0f8      	beq.n	800b5ca <_dtoa_r+0x5fa>
 800b5d8:	9700      	str	r7, [sp, #0]
 800b5da:	e049      	b.n	800b670 <_dtoa_r+0x6a0>
 800b5dc:	4b05      	ldr	r3, [pc, #20]	; (800b5f4 <_dtoa_r+0x624>)
 800b5de:	f7f5 f80f 	bl	8000600 <__aeabi_dmul>
 800b5e2:	4680      	mov	r8, r0
 800b5e4:	4689      	mov	r9, r1
 800b5e6:	e7bd      	b.n	800b564 <_dtoa_r+0x594>
 800b5e8:	0800d9e8 	.word	0x0800d9e8
 800b5ec:	0800d9c0 	.word	0x0800d9c0
 800b5f0:	3ff00000 	.word	0x3ff00000
 800b5f4:	40240000 	.word	0x40240000
 800b5f8:	401c0000 	.word	0x401c0000
 800b5fc:	40140000 	.word	0x40140000
 800b600:	3fe00000 	.word	0x3fe00000
 800b604:	4656      	mov	r6, sl
 800b606:	465f      	mov	r7, fp
 800b608:	9d01      	ldr	r5, [sp, #4]
 800b60a:	4642      	mov	r2, r8
 800b60c:	464b      	mov	r3, r9
 800b60e:	4630      	mov	r0, r6
 800b610:	4639      	mov	r1, r7
 800b612:	f7f5 f91f 	bl	8000854 <__aeabi_ddiv>
 800b616:	f7f5 faa3 	bl	8000b60 <__aeabi_d2iz>
 800b61a:	4682      	mov	sl, r0
 800b61c:	f7f4 ff86 	bl	800052c <__aeabi_i2d>
 800b620:	4642      	mov	r2, r8
 800b622:	464b      	mov	r3, r9
 800b624:	f7f4 ffec 	bl	8000600 <__aeabi_dmul>
 800b628:	4602      	mov	r2, r0
 800b62a:	4630      	mov	r0, r6
 800b62c:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b630:	460b      	mov	r3, r1
 800b632:	4639      	mov	r1, r7
 800b634:	f7f4 fe2c 	bl	8000290 <__aeabi_dsub>
 800b638:	f805 6b01 	strb.w	r6, [r5], #1
 800b63c:	9e01      	ldr	r6, [sp, #4]
 800b63e:	4602      	mov	r2, r0
 800b640:	9f03      	ldr	r7, [sp, #12]
 800b642:	460b      	mov	r3, r1
 800b644:	1bae      	subs	r6, r5, r6
 800b646:	42b7      	cmp	r7, r6
 800b648:	d135      	bne.n	800b6b6 <_dtoa_r+0x6e6>
 800b64a:	f7f4 fe23 	bl	8000294 <__adddf3>
 800b64e:	4642      	mov	r2, r8
 800b650:	464b      	mov	r3, r9
 800b652:	4606      	mov	r6, r0
 800b654:	460f      	mov	r7, r1
 800b656:	f7f5 fa63 	bl	8000b20 <__aeabi_dcmpgt>
 800b65a:	b9d0      	cbnz	r0, 800b692 <_dtoa_r+0x6c2>
 800b65c:	4642      	mov	r2, r8
 800b65e:	464b      	mov	r3, r9
 800b660:	4630      	mov	r0, r6
 800b662:	4639      	mov	r1, r7
 800b664:	f7f5 fa34 	bl	8000ad0 <__aeabi_dcmpeq>
 800b668:	b110      	cbz	r0, 800b670 <_dtoa_r+0x6a0>
 800b66a:	f01a 0f01 	tst.w	sl, #1
 800b66e:	d110      	bne.n	800b692 <_dtoa_r+0x6c2>
 800b670:	4620      	mov	r0, r4
 800b672:	ee18 1a10 	vmov	r1, s16
 800b676:	f000 faff 	bl	800bc78 <_Bfree>
 800b67a:	2300      	movs	r3, #0
 800b67c:	9800      	ldr	r0, [sp, #0]
 800b67e:	702b      	strb	r3, [r5, #0]
 800b680:	3001      	adds	r0, #1
 800b682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b684:	6018      	str	r0, [r3, #0]
 800b686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f43f acf1 	beq.w	800b070 <_dtoa_r+0xa0>
 800b68e:	601d      	str	r5, [r3, #0]
 800b690:	e4ee      	b.n	800b070 <_dtoa_r+0xa0>
 800b692:	9f00      	ldr	r7, [sp, #0]
 800b694:	462b      	mov	r3, r5
 800b696:	461d      	mov	r5, r3
 800b698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b69c:	2a39      	cmp	r2, #57	; 0x39
 800b69e:	d106      	bne.n	800b6ae <_dtoa_r+0x6de>
 800b6a0:	9a01      	ldr	r2, [sp, #4]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d1f7      	bne.n	800b696 <_dtoa_r+0x6c6>
 800b6a6:	2230      	movs	r2, #48	; 0x30
 800b6a8:	9901      	ldr	r1, [sp, #4]
 800b6aa:	3701      	adds	r7, #1
 800b6ac:	700a      	strb	r2, [r1, #0]
 800b6ae:	781a      	ldrb	r2, [r3, #0]
 800b6b0:	3201      	adds	r2, #1
 800b6b2:	701a      	strb	r2, [r3, #0]
 800b6b4:	e790      	b.n	800b5d8 <_dtoa_r+0x608>
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	4ba4      	ldr	r3, [pc, #656]	; (800b94c <_dtoa_r+0x97c>)
 800b6ba:	f7f4 ffa1 	bl	8000600 <__aeabi_dmul>
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	460f      	mov	r7, r1
 800b6c6:	f7f5 fa03 	bl	8000ad0 <__aeabi_dcmpeq>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d09d      	beq.n	800b60a <_dtoa_r+0x63a>
 800b6ce:	e7cf      	b.n	800b670 <_dtoa_r+0x6a0>
 800b6d0:	9a08      	ldr	r2, [sp, #32]
 800b6d2:	2a00      	cmp	r2, #0
 800b6d4:	f000 80d5 	beq.w	800b882 <_dtoa_r+0x8b2>
 800b6d8:	9a06      	ldr	r2, [sp, #24]
 800b6da:	2a01      	cmp	r2, #1
 800b6dc:	f300 80b9 	bgt.w	800b852 <_dtoa_r+0x882>
 800b6e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6e2:	2a00      	cmp	r2, #0
 800b6e4:	f000 80b1 	beq.w	800b84a <_dtoa_r+0x87a>
 800b6e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6ec:	9e07      	ldr	r6, [sp, #28]
 800b6ee:	9d04      	ldr	r5, [sp, #16]
 800b6f0:	9a04      	ldr	r2, [sp, #16]
 800b6f2:	2101      	movs	r1, #1
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	441a      	add	r2, r3
 800b6f8:	9204      	str	r2, [sp, #16]
 800b6fa:	9a05      	ldr	r2, [sp, #20]
 800b6fc:	441a      	add	r2, r3
 800b6fe:	9205      	str	r2, [sp, #20]
 800b700:	f000 fb74 	bl	800bdec <__i2b>
 800b704:	4607      	mov	r7, r0
 800b706:	2d00      	cmp	r5, #0
 800b708:	dd0c      	ble.n	800b724 <_dtoa_r+0x754>
 800b70a:	9b05      	ldr	r3, [sp, #20]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dd09      	ble.n	800b724 <_dtoa_r+0x754>
 800b710:	42ab      	cmp	r3, r5
 800b712:	9a04      	ldr	r2, [sp, #16]
 800b714:	bfa8      	it	ge
 800b716:	462b      	movge	r3, r5
 800b718:	1ad2      	subs	r2, r2, r3
 800b71a:	1aed      	subs	r5, r5, r3
 800b71c:	9204      	str	r2, [sp, #16]
 800b71e:	9a05      	ldr	r2, [sp, #20]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	9305      	str	r3, [sp, #20]
 800b724:	9b07      	ldr	r3, [sp, #28]
 800b726:	b31b      	cbz	r3, 800b770 <_dtoa_r+0x7a0>
 800b728:	9b08      	ldr	r3, [sp, #32]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 80ad 	beq.w	800b88a <_dtoa_r+0x8ba>
 800b730:	2e00      	cmp	r6, #0
 800b732:	dd13      	ble.n	800b75c <_dtoa_r+0x78c>
 800b734:	4639      	mov	r1, r7
 800b736:	4632      	mov	r2, r6
 800b738:	4620      	mov	r0, r4
 800b73a:	f000 fc15 	bl	800bf68 <__pow5mult>
 800b73e:	ee18 2a10 	vmov	r2, s16
 800b742:	4601      	mov	r1, r0
 800b744:	4607      	mov	r7, r0
 800b746:	4620      	mov	r0, r4
 800b748:	f000 fb66 	bl	800be18 <__multiply>
 800b74c:	4680      	mov	r8, r0
 800b74e:	ee18 1a10 	vmov	r1, s16
 800b752:	4620      	mov	r0, r4
 800b754:	ee08 8a10 	vmov	s16, r8
 800b758:	f000 fa8e 	bl	800bc78 <_Bfree>
 800b75c:	9b07      	ldr	r3, [sp, #28]
 800b75e:	1b9a      	subs	r2, r3, r6
 800b760:	d006      	beq.n	800b770 <_dtoa_r+0x7a0>
 800b762:	ee18 1a10 	vmov	r1, s16
 800b766:	4620      	mov	r0, r4
 800b768:	f000 fbfe 	bl	800bf68 <__pow5mult>
 800b76c:	ee08 0a10 	vmov	s16, r0
 800b770:	2101      	movs	r1, #1
 800b772:	4620      	mov	r0, r4
 800b774:	f000 fb3a 	bl	800bdec <__i2b>
 800b778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b77a:	4606      	mov	r6, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f340 8086 	ble.w	800b88e <_dtoa_r+0x8be>
 800b782:	461a      	mov	r2, r3
 800b784:	4601      	mov	r1, r0
 800b786:	4620      	mov	r0, r4
 800b788:	f000 fbee 	bl	800bf68 <__pow5mult>
 800b78c:	9b06      	ldr	r3, [sp, #24]
 800b78e:	4606      	mov	r6, r0
 800b790:	2b01      	cmp	r3, #1
 800b792:	dd7f      	ble.n	800b894 <_dtoa_r+0x8c4>
 800b794:	f04f 0800 	mov.w	r8, #0
 800b798:	6933      	ldr	r3, [r6, #16]
 800b79a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b79e:	6918      	ldr	r0, [r3, #16]
 800b7a0:	f000 fad4 	bl	800bd4c <__hi0bits>
 800b7a4:	f1c0 0020 	rsb	r0, r0, #32
 800b7a8:	9b05      	ldr	r3, [sp, #20]
 800b7aa:	4418      	add	r0, r3
 800b7ac:	f010 001f 	ands.w	r0, r0, #31
 800b7b0:	f000 8091 	beq.w	800b8d6 <_dtoa_r+0x906>
 800b7b4:	f1c0 0320 	rsb	r3, r0, #32
 800b7b8:	2b04      	cmp	r3, #4
 800b7ba:	f340 8089 	ble.w	800b8d0 <_dtoa_r+0x900>
 800b7be:	f1c0 001c 	rsb	r0, r0, #28
 800b7c2:	9b04      	ldr	r3, [sp, #16]
 800b7c4:	4405      	add	r5, r0
 800b7c6:	4403      	add	r3, r0
 800b7c8:	9304      	str	r3, [sp, #16]
 800b7ca:	9b05      	ldr	r3, [sp, #20]
 800b7cc:	4403      	add	r3, r0
 800b7ce:	9305      	str	r3, [sp, #20]
 800b7d0:	9b04      	ldr	r3, [sp, #16]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	dd07      	ble.n	800b7e6 <_dtoa_r+0x816>
 800b7d6:	ee18 1a10 	vmov	r1, s16
 800b7da:	461a      	mov	r2, r3
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f000 fc1d 	bl	800c01c <__lshift>
 800b7e2:	ee08 0a10 	vmov	s16, r0
 800b7e6:	9b05      	ldr	r3, [sp, #20]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	dd05      	ble.n	800b7f8 <_dtoa_r+0x828>
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 fc13 	bl	800c01c <__lshift>
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d06d      	beq.n	800b8da <_dtoa_r+0x90a>
 800b7fe:	4631      	mov	r1, r6
 800b800:	ee18 0a10 	vmov	r0, s16
 800b804:	f000 fc7a 	bl	800c0fc <__mcmp>
 800b808:	2800      	cmp	r0, #0
 800b80a:	da66      	bge.n	800b8da <_dtoa_r+0x90a>
 800b80c:	9b00      	ldr	r3, [sp, #0]
 800b80e:	ee18 1a10 	vmov	r1, s16
 800b812:	220a      	movs	r2, #10
 800b814:	4620      	mov	r0, r4
 800b816:	3b01      	subs	r3, #1
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	2300      	movs	r3, #0
 800b81c:	f000 fa4e 	bl	800bcbc <__multadd>
 800b820:	9b08      	ldr	r3, [sp, #32]
 800b822:	ee08 0a10 	vmov	s16, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 81af 	beq.w	800bb8a <_dtoa_r+0xbba>
 800b82c:	2300      	movs	r3, #0
 800b82e:	4639      	mov	r1, r7
 800b830:	220a      	movs	r2, #10
 800b832:	4620      	mov	r0, r4
 800b834:	f000 fa42 	bl	800bcbc <__multadd>
 800b838:	9b02      	ldr	r3, [sp, #8]
 800b83a:	4607      	mov	r7, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f300 808d 	bgt.w	800b95c <_dtoa_r+0x98c>
 800b842:	9b06      	ldr	r3, [sp, #24]
 800b844:	2b02      	cmp	r3, #2
 800b846:	dc50      	bgt.n	800b8ea <_dtoa_r+0x91a>
 800b848:	e088      	b.n	800b95c <_dtoa_r+0x98c>
 800b84a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b84c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b850:	e74c      	b.n	800b6ec <_dtoa_r+0x71c>
 800b852:	9b03      	ldr	r3, [sp, #12]
 800b854:	1e5e      	subs	r6, r3, #1
 800b856:	9b07      	ldr	r3, [sp, #28]
 800b858:	42b3      	cmp	r3, r6
 800b85a:	bfb7      	itett	lt
 800b85c:	9b07      	ldrlt	r3, [sp, #28]
 800b85e:	1b9e      	subge	r6, r3, r6
 800b860:	9607      	strlt	r6, [sp, #28]
 800b862:	1af2      	sublt	r2, r6, r3
 800b864:	bfbf      	itttt	lt
 800b866:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b868:	2600      	movlt	r6, #0
 800b86a:	189b      	addlt	r3, r3, r2
 800b86c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b86e:	9b03      	ldr	r3, [sp, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	bfb7      	itett	lt
 800b874:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b878:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b87c:	1a9d      	sublt	r5, r3, r2
 800b87e:	2300      	movlt	r3, #0
 800b880:	e736      	b.n	800b6f0 <_dtoa_r+0x720>
 800b882:	9e07      	ldr	r6, [sp, #28]
 800b884:	9d04      	ldr	r5, [sp, #16]
 800b886:	9f08      	ldr	r7, [sp, #32]
 800b888:	e73d      	b.n	800b706 <_dtoa_r+0x736>
 800b88a:	9a07      	ldr	r2, [sp, #28]
 800b88c:	e769      	b.n	800b762 <_dtoa_r+0x792>
 800b88e:	9b06      	ldr	r3, [sp, #24]
 800b890:	2b01      	cmp	r3, #1
 800b892:	dc18      	bgt.n	800b8c6 <_dtoa_r+0x8f6>
 800b894:	f1ba 0f00 	cmp.w	sl, #0
 800b898:	d115      	bne.n	800b8c6 <_dtoa_r+0x8f6>
 800b89a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b89e:	b993      	cbnz	r3, 800b8c6 <_dtoa_r+0x8f6>
 800b8a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8a4:	0d1b      	lsrs	r3, r3, #20
 800b8a6:	051b      	lsls	r3, r3, #20
 800b8a8:	b183      	cbz	r3, 800b8cc <_dtoa_r+0x8fc>
 800b8aa:	9b04      	ldr	r3, [sp, #16]
 800b8ac:	f04f 0801 	mov.w	r8, #1
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	9304      	str	r3, [sp, #16]
 800b8b4:	9b05      	ldr	r3, [sp, #20]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	9305      	str	r3, [sp, #20]
 800b8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f47f af6b 	bne.w	800b798 <_dtoa_r+0x7c8>
 800b8c2:	2001      	movs	r0, #1
 800b8c4:	e770      	b.n	800b7a8 <_dtoa_r+0x7d8>
 800b8c6:	f04f 0800 	mov.w	r8, #0
 800b8ca:	e7f6      	b.n	800b8ba <_dtoa_r+0x8ea>
 800b8cc:	4698      	mov	r8, r3
 800b8ce:	e7f4      	b.n	800b8ba <_dtoa_r+0x8ea>
 800b8d0:	f43f af7e 	beq.w	800b7d0 <_dtoa_r+0x800>
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	301c      	adds	r0, #28
 800b8d8:	e773      	b.n	800b7c2 <_dtoa_r+0x7f2>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	dc37      	bgt.n	800b950 <_dtoa_r+0x980>
 800b8e0:	9b06      	ldr	r3, [sp, #24]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	dd34      	ble.n	800b950 <_dtoa_r+0x980>
 800b8e6:	9b03      	ldr	r3, [sp, #12]
 800b8e8:	9302      	str	r3, [sp, #8]
 800b8ea:	9b02      	ldr	r3, [sp, #8]
 800b8ec:	b96b      	cbnz	r3, 800b90a <_dtoa_r+0x93a>
 800b8ee:	4631      	mov	r1, r6
 800b8f0:	2205      	movs	r2, #5
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f000 f9e2 	bl	800bcbc <__multadd>
 800b8f8:	4601      	mov	r1, r0
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	ee18 0a10 	vmov	r0, s16
 800b900:	f000 fbfc 	bl	800c0fc <__mcmp>
 800b904:	2800      	cmp	r0, #0
 800b906:	f73f adbd 	bgt.w	800b484 <_dtoa_r+0x4b4>
 800b90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b90c:	9d01      	ldr	r5, [sp, #4]
 800b90e:	43db      	mvns	r3, r3
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	f04f 0800 	mov.w	r8, #0
 800b916:	4631      	mov	r1, r6
 800b918:	4620      	mov	r0, r4
 800b91a:	f000 f9ad 	bl	800bc78 <_Bfree>
 800b91e:	2f00      	cmp	r7, #0
 800b920:	f43f aea6 	beq.w	800b670 <_dtoa_r+0x6a0>
 800b924:	f1b8 0f00 	cmp.w	r8, #0
 800b928:	d005      	beq.n	800b936 <_dtoa_r+0x966>
 800b92a:	45b8      	cmp	r8, r7
 800b92c:	d003      	beq.n	800b936 <_dtoa_r+0x966>
 800b92e:	4641      	mov	r1, r8
 800b930:	4620      	mov	r0, r4
 800b932:	f000 f9a1 	bl	800bc78 <_Bfree>
 800b936:	4639      	mov	r1, r7
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 f99d 	bl	800bc78 <_Bfree>
 800b93e:	e697      	b.n	800b670 <_dtoa_r+0x6a0>
 800b940:	2600      	movs	r6, #0
 800b942:	4637      	mov	r7, r6
 800b944:	e7e1      	b.n	800b90a <_dtoa_r+0x93a>
 800b946:	9700      	str	r7, [sp, #0]
 800b948:	4637      	mov	r7, r6
 800b94a:	e59b      	b.n	800b484 <_dtoa_r+0x4b4>
 800b94c:	40240000 	.word	0x40240000
 800b950:	9b08      	ldr	r3, [sp, #32]
 800b952:	2b00      	cmp	r3, #0
 800b954:	f000 80ca 	beq.w	800baec <_dtoa_r+0xb1c>
 800b958:	9b03      	ldr	r3, [sp, #12]
 800b95a:	9302      	str	r3, [sp, #8]
 800b95c:	2d00      	cmp	r5, #0
 800b95e:	dd05      	ble.n	800b96c <_dtoa_r+0x99c>
 800b960:	4639      	mov	r1, r7
 800b962:	462a      	mov	r2, r5
 800b964:	4620      	mov	r0, r4
 800b966:	f000 fb59 	bl	800c01c <__lshift>
 800b96a:	4607      	mov	r7, r0
 800b96c:	f1b8 0f00 	cmp.w	r8, #0
 800b970:	d05b      	beq.n	800ba2a <_dtoa_r+0xa5a>
 800b972:	6879      	ldr	r1, [r7, #4]
 800b974:	4620      	mov	r0, r4
 800b976:	f000 f93f 	bl	800bbf8 <_Balloc>
 800b97a:	4605      	mov	r5, r0
 800b97c:	b928      	cbnz	r0, 800b98a <_dtoa_r+0x9ba>
 800b97e:	4b87      	ldr	r3, [pc, #540]	; (800bb9c <_dtoa_r+0xbcc>)
 800b980:	4602      	mov	r2, r0
 800b982:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b986:	f7ff bb3d 	b.w	800b004 <_dtoa_r+0x34>
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	f107 010c 	add.w	r1, r7, #12
 800b990:	300c      	adds	r0, #12
 800b992:	3202      	adds	r2, #2
 800b994:	0092      	lsls	r2, r2, #2
 800b996:	f000 f921 	bl	800bbdc <memcpy>
 800b99a:	2201      	movs	r2, #1
 800b99c:	4629      	mov	r1, r5
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 fb3c 	bl	800c01c <__lshift>
 800b9a4:	9b01      	ldr	r3, [sp, #4]
 800b9a6:	46b8      	mov	r8, r7
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	f103 0901 	add.w	r9, r3, #1
 800b9ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	9305      	str	r3, [sp, #20]
 800b9b6:	f00a 0301 	and.w	r3, sl, #1
 800b9ba:	9304      	str	r3, [sp, #16]
 800b9bc:	4631      	mov	r1, r6
 800b9be:	ee18 0a10 	vmov	r0, s16
 800b9c2:	f7ff fa74 	bl	800aeae <quorem>
 800b9c6:	4641      	mov	r1, r8
 800b9c8:	9002      	str	r0, [sp, #8]
 800b9ca:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9ce:	ee18 0a10 	vmov	r0, s16
 800b9d2:	f109 3bff 	add.w	fp, r9, #4294967295
 800b9d6:	f000 fb91 	bl	800c0fc <__mcmp>
 800b9da:	463a      	mov	r2, r7
 800b9dc:	9003      	str	r0, [sp, #12]
 800b9de:	4631      	mov	r1, r6
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f000 fba7 	bl	800c134 <__mdiff>
 800b9e6:	68c2      	ldr	r2, [r0, #12]
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	bb02      	cbnz	r2, 800ba2e <_dtoa_r+0xa5e>
 800b9ec:	4601      	mov	r1, r0
 800b9ee:	ee18 0a10 	vmov	r0, s16
 800b9f2:	f000 fb83 	bl	800c0fc <__mcmp>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	9207      	str	r2, [sp, #28]
 800b9fe:	f000 f93b 	bl	800bc78 <_Bfree>
 800ba02:	464d      	mov	r5, r9
 800ba04:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba08:	ea43 0102 	orr.w	r1, r3, r2
 800ba0c:	9b04      	ldr	r3, [sp, #16]
 800ba0e:	430b      	orrs	r3, r1
 800ba10:	d10f      	bne.n	800ba32 <_dtoa_r+0xa62>
 800ba12:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba16:	d02a      	beq.n	800ba6e <_dtoa_r+0xa9e>
 800ba18:	9b03      	ldr	r3, [sp, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	dd02      	ble.n	800ba24 <_dtoa_r+0xa54>
 800ba1e:	9b02      	ldr	r3, [sp, #8]
 800ba20:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ba24:	f88b a000 	strb.w	sl, [fp]
 800ba28:	e775      	b.n	800b916 <_dtoa_r+0x946>
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	e7ba      	b.n	800b9a4 <_dtoa_r+0x9d4>
 800ba2e:	2201      	movs	r2, #1
 800ba30:	e7e2      	b.n	800b9f8 <_dtoa_r+0xa28>
 800ba32:	9b03      	ldr	r3, [sp, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	db04      	blt.n	800ba42 <_dtoa_r+0xa72>
 800ba38:	9906      	ldr	r1, [sp, #24]
 800ba3a:	430b      	orrs	r3, r1
 800ba3c:	9904      	ldr	r1, [sp, #16]
 800ba3e:	430b      	orrs	r3, r1
 800ba40:	d122      	bne.n	800ba88 <_dtoa_r+0xab8>
 800ba42:	2a00      	cmp	r2, #0
 800ba44:	ddee      	ble.n	800ba24 <_dtoa_r+0xa54>
 800ba46:	ee18 1a10 	vmov	r1, s16
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f000 fae5 	bl	800c01c <__lshift>
 800ba52:	4631      	mov	r1, r6
 800ba54:	ee08 0a10 	vmov	s16, r0
 800ba58:	f000 fb50 	bl	800c0fc <__mcmp>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	dc03      	bgt.n	800ba68 <_dtoa_r+0xa98>
 800ba60:	d1e0      	bne.n	800ba24 <_dtoa_r+0xa54>
 800ba62:	f01a 0f01 	tst.w	sl, #1
 800ba66:	d0dd      	beq.n	800ba24 <_dtoa_r+0xa54>
 800ba68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba6c:	d1d7      	bne.n	800ba1e <_dtoa_r+0xa4e>
 800ba6e:	2339      	movs	r3, #57	; 0x39
 800ba70:	f88b 3000 	strb.w	r3, [fp]
 800ba74:	462b      	mov	r3, r5
 800ba76:	461d      	mov	r5, r3
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba7e:	2a39      	cmp	r2, #57	; 0x39
 800ba80:	d070      	beq.n	800bb64 <_dtoa_r+0xb94>
 800ba82:	3201      	adds	r2, #1
 800ba84:	701a      	strb	r2, [r3, #0]
 800ba86:	e746      	b.n	800b916 <_dtoa_r+0x946>
 800ba88:	2a00      	cmp	r2, #0
 800ba8a:	dd07      	ble.n	800ba9c <_dtoa_r+0xacc>
 800ba8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba90:	d0ed      	beq.n	800ba6e <_dtoa_r+0xa9e>
 800ba92:	f10a 0301 	add.w	r3, sl, #1
 800ba96:	f88b 3000 	strb.w	r3, [fp]
 800ba9a:	e73c      	b.n	800b916 <_dtoa_r+0x946>
 800ba9c:	9b05      	ldr	r3, [sp, #20]
 800ba9e:	f809 ac01 	strb.w	sl, [r9, #-1]
 800baa2:	4599      	cmp	r9, r3
 800baa4:	d046      	beq.n	800bb34 <_dtoa_r+0xb64>
 800baa6:	ee18 1a10 	vmov	r1, s16
 800baaa:	2300      	movs	r3, #0
 800baac:	220a      	movs	r2, #10
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 f904 	bl	800bcbc <__multadd>
 800bab4:	45b8      	cmp	r8, r7
 800bab6:	ee08 0a10 	vmov	s16, r0
 800baba:	f04f 0300 	mov.w	r3, #0
 800babe:	f04f 020a 	mov.w	r2, #10
 800bac2:	4641      	mov	r1, r8
 800bac4:	4620      	mov	r0, r4
 800bac6:	d106      	bne.n	800bad6 <_dtoa_r+0xb06>
 800bac8:	f000 f8f8 	bl	800bcbc <__multadd>
 800bacc:	4680      	mov	r8, r0
 800bace:	4607      	mov	r7, r0
 800bad0:	f109 0901 	add.w	r9, r9, #1
 800bad4:	e772      	b.n	800b9bc <_dtoa_r+0x9ec>
 800bad6:	f000 f8f1 	bl	800bcbc <__multadd>
 800bada:	4639      	mov	r1, r7
 800badc:	4680      	mov	r8, r0
 800bade:	2300      	movs	r3, #0
 800bae0:	220a      	movs	r2, #10
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 f8ea 	bl	800bcbc <__multadd>
 800bae8:	4607      	mov	r7, r0
 800baea:	e7f1      	b.n	800bad0 <_dtoa_r+0xb00>
 800baec:	9b03      	ldr	r3, [sp, #12]
 800baee:	9302      	str	r3, [sp, #8]
 800baf0:	9d01      	ldr	r5, [sp, #4]
 800baf2:	4631      	mov	r1, r6
 800baf4:	ee18 0a10 	vmov	r0, s16
 800baf8:	f7ff f9d9 	bl	800aeae <quorem>
 800bafc:	9b01      	ldr	r3, [sp, #4]
 800bafe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb02:	f805 ab01 	strb.w	sl, [r5], #1
 800bb06:	1aea      	subs	r2, r5, r3
 800bb08:	9b02      	ldr	r3, [sp, #8]
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	dd09      	ble.n	800bb22 <_dtoa_r+0xb52>
 800bb0e:	ee18 1a10 	vmov	r1, s16
 800bb12:	2300      	movs	r3, #0
 800bb14:	220a      	movs	r2, #10
 800bb16:	4620      	mov	r0, r4
 800bb18:	f000 f8d0 	bl	800bcbc <__multadd>
 800bb1c:	ee08 0a10 	vmov	s16, r0
 800bb20:	e7e7      	b.n	800baf2 <_dtoa_r+0xb22>
 800bb22:	9b02      	ldr	r3, [sp, #8]
 800bb24:	f04f 0800 	mov.w	r8, #0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bfcc      	ite	gt
 800bb2c:	461d      	movgt	r5, r3
 800bb2e:	2501      	movle	r5, #1
 800bb30:	9b01      	ldr	r3, [sp, #4]
 800bb32:	441d      	add	r5, r3
 800bb34:	ee18 1a10 	vmov	r1, s16
 800bb38:	2201      	movs	r2, #1
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f000 fa6e 	bl	800c01c <__lshift>
 800bb40:	4631      	mov	r1, r6
 800bb42:	ee08 0a10 	vmov	s16, r0
 800bb46:	f000 fad9 	bl	800c0fc <__mcmp>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	dc92      	bgt.n	800ba74 <_dtoa_r+0xaa4>
 800bb4e:	d102      	bne.n	800bb56 <_dtoa_r+0xb86>
 800bb50:	f01a 0f01 	tst.w	sl, #1
 800bb54:	d18e      	bne.n	800ba74 <_dtoa_r+0xaa4>
 800bb56:	462b      	mov	r3, r5
 800bb58:	461d      	mov	r5, r3
 800bb5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb5e:	2a30      	cmp	r2, #48	; 0x30
 800bb60:	d0fa      	beq.n	800bb58 <_dtoa_r+0xb88>
 800bb62:	e6d8      	b.n	800b916 <_dtoa_r+0x946>
 800bb64:	9a01      	ldr	r2, [sp, #4]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d185      	bne.n	800ba76 <_dtoa_r+0xaa6>
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	2331      	movs	r3, #49	; 0x31
 800bb72:	7013      	strb	r3, [r2, #0]
 800bb74:	e6cf      	b.n	800b916 <_dtoa_r+0x946>
 800bb76:	4b0a      	ldr	r3, [pc, #40]	; (800bba0 <_dtoa_r+0xbd0>)
 800bb78:	f7ff ba98 	b.w	800b0ac <_dtoa_r+0xdc>
 800bb7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f47f aa71 	bne.w	800b066 <_dtoa_r+0x96>
 800bb84:	4b07      	ldr	r3, [pc, #28]	; (800bba4 <_dtoa_r+0xbd4>)
 800bb86:	f7ff ba91 	b.w	800b0ac <_dtoa_r+0xdc>
 800bb8a:	9b02      	ldr	r3, [sp, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	dcaf      	bgt.n	800baf0 <_dtoa_r+0xb20>
 800bb90:	9b06      	ldr	r3, [sp, #24]
 800bb92:	2b02      	cmp	r3, #2
 800bb94:	f73f aea9 	bgt.w	800b8ea <_dtoa_r+0x91a>
 800bb98:	e7aa      	b.n	800baf0 <_dtoa_r+0xb20>
 800bb9a:	bf00      	nop
 800bb9c:	0800d953 	.word	0x0800d953
 800bba0:	0800d8b0 	.word	0x0800d8b0
 800bba4:	0800d8d4 	.word	0x0800d8d4

0800bba8 <_localeconv_r>:
 800bba8:	4800      	ldr	r0, [pc, #0]	; (800bbac <_localeconv_r+0x4>)
 800bbaa:	4770      	bx	lr
 800bbac:	20000174 	.word	0x20000174

0800bbb0 <malloc>:
 800bbb0:	4b02      	ldr	r3, [pc, #8]	; (800bbbc <malloc+0xc>)
 800bbb2:	4601      	mov	r1, r0
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	f000 bc2b 	b.w	800c410 <_malloc_r>
 800bbba:	bf00      	nop
 800bbbc:	20000020 	.word	0x20000020

0800bbc0 <memchr>:
 800bbc0:	b2c9      	uxtb	r1, r1
 800bbc2:	4402      	add	r2, r0
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	4290      	cmp	r0, r2
 800bbc8:	4603      	mov	r3, r0
 800bbca:	d101      	bne.n	800bbd0 <memchr+0x10>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e003      	b.n	800bbd8 <memchr+0x18>
 800bbd0:	781c      	ldrb	r4, [r3, #0]
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	428c      	cmp	r4, r1
 800bbd6:	d1f6      	bne.n	800bbc6 <memchr+0x6>
 800bbd8:	4618      	mov	r0, r3
 800bbda:	bd10      	pop	{r4, pc}

0800bbdc <memcpy>:
 800bbdc:	440a      	add	r2, r1
 800bbde:	1e43      	subs	r3, r0, #1
 800bbe0:	4291      	cmp	r1, r2
 800bbe2:	d100      	bne.n	800bbe6 <memcpy+0xa>
 800bbe4:	4770      	bx	lr
 800bbe6:	b510      	push	{r4, lr}
 800bbe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbec:	4291      	cmp	r1, r2
 800bbee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbf2:	d1f9      	bne.n	800bbe8 <memcpy+0xc>
 800bbf4:	bd10      	pop	{r4, pc}
	...

0800bbf8 <_Balloc>:
 800bbf8:	b570      	push	{r4, r5, r6, lr}
 800bbfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	460d      	mov	r5, r1
 800bc00:	b976      	cbnz	r6, 800bc20 <_Balloc+0x28>
 800bc02:	2010      	movs	r0, #16
 800bc04:	f7ff ffd4 	bl	800bbb0 <malloc>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	6260      	str	r0, [r4, #36]	; 0x24
 800bc0c:	b920      	cbnz	r0, 800bc18 <_Balloc+0x20>
 800bc0e:	4b18      	ldr	r3, [pc, #96]	; (800bc70 <_Balloc+0x78>)
 800bc10:	2166      	movs	r1, #102	; 0x66
 800bc12:	4818      	ldr	r0, [pc, #96]	; (800bc74 <_Balloc+0x7c>)
 800bc14:	f000 fddc 	bl	800c7d0 <__assert_func>
 800bc18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc1c:	6006      	str	r6, [r0, #0]
 800bc1e:	60c6      	str	r6, [r0, #12]
 800bc20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc22:	68f3      	ldr	r3, [r6, #12]
 800bc24:	b183      	cbz	r3, 800bc48 <_Balloc+0x50>
 800bc26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc2e:	b9b8      	cbnz	r0, 800bc60 <_Balloc+0x68>
 800bc30:	2101      	movs	r1, #1
 800bc32:	4620      	mov	r0, r4
 800bc34:	fa01 f605 	lsl.w	r6, r1, r5
 800bc38:	1d72      	adds	r2, r6, #5
 800bc3a:	0092      	lsls	r2, r2, #2
 800bc3c:	f000 fb66 	bl	800c30c <_calloc_r>
 800bc40:	b160      	cbz	r0, 800bc5c <_Balloc+0x64>
 800bc42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc46:	e00e      	b.n	800bc66 <_Balloc+0x6e>
 800bc48:	2221      	movs	r2, #33	; 0x21
 800bc4a:	2104      	movs	r1, #4
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 fb5d 	bl	800c30c <_calloc_r>
 800bc52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc54:	60f0      	str	r0, [r6, #12]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1e4      	bne.n	800bc26 <_Balloc+0x2e>
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	bd70      	pop	{r4, r5, r6, pc}
 800bc60:	6802      	ldr	r2, [r0, #0]
 800bc62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc66:	2300      	movs	r3, #0
 800bc68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc6c:	e7f7      	b.n	800bc5e <_Balloc+0x66>
 800bc6e:	bf00      	nop
 800bc70:	0800d8e1 	.word	0x0800d8e1
 800bc74:	0800d964 	.word	0x0800d964

0800bc78 <_Bfree>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	460c      	mov	r4, r1
 800bc80:	b976      	cbnz	r6, 800bca0 <_Bfree+0x28>
 800bc82:	2010      	movs	r0, #16
 800bc84:	f7ff ff94 	bl	800bbb0 <malloc>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	6268      	str	r0, [r5, #36]	; 0x24
 800bc8c:	b920      	cbnz	r0, 800bc98 <_Bfree+0x20>
 800bc8e:	4b09      	ldr	r3, [pc, #36]	; (800bcb4 <_Bfree+0x3c>)
 800bc90:	218a      	movs	r1, #138	; 0x8a
 800bc92:	4809      	ldr	r0, [pc, #36]	; (800bcb8 <_Bfree+0x40>)
 800bc94:	f000 fd9c 	bl	800c7d0 <__assert_func>
 800bc98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc9c:	6006      	str	r6, [r0, #0]
 800bc9e:	60c6      	str	r6, [r0, #12]
 800bca0:	b13c      	cbz	r4, 800bcb2 <_Bfree+0x3a>
 800bca2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bca4:	6862      	ldr	r2, [r4, #4]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcac:	6021      	str	r1, [r4, #0]
 800bcae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcb2:	bd70      	pop	{r4, r5, r6, pc}
 800bcb4:	0800d8e1 	.word	0x0800d8e1
 800bcb8:	0800d964 	.word	0x0800d964

0800bcbc <__multadd>:
 800bcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc0:	f101 0c14 	add.w	ip, r1, #20
 800bcc4:	4607      	mov	r7, r0
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	461e      	mov	r6, r3
 800bcca:	690d      	ldr	r5, [r1, #16]
 800bccc:	2000      	movs	r0, #0
 800bcce:	f8dc 3000 	ldr.w	r3, [ip]
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	b299      	uxth	r1, r3
 800bcd6:	4285      	cmp	r5, r0
 800bcd8:	fb02 6101 	mla	r1, r2, r1, r6
 800bcdc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bce0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800bce4:	b289      	uxth	r1, r1
 800bce6:	fb02 3306 	mla	r3, r2, r6, r3
 800bcea:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcf2:	f84c 1b04 	str.w	r1, [ip], #4
 800bcf6:	dcea      	bgt.n	800bcce <__multadd+0x12>
 800bcf8:	b30e      	cbz	r6, 800bd3e <__multadd+0x82>
 800bcfa:	68a3      	ldr	r3, [r4, #8]
 800bcfc:	42ab      	cmp	r3, r5
 800bcfe:	dc19      	bgt.n	800bd34 <__multadd+0x78>
 800bd00:	6861      	ldr	r1, [r4, #4]
 800bd02:	4638      	mov	r0, r7
 800bd04:	3101      	adds	r1, #1
 800bd06:	f7ff ff77 	bl	800bbf8 <_Balloc>
 800bd0a:	4680      	mov	r8, r0
 800bd0c:	b928      	cbnz	r0, 800bd1a <__multadd+0x5e>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	4b0c      	ldr	r3, [pc, #48]	; (800bd44 <__multadd+0x88>)
 800bd12:	21b5      	movs	r1, #181	; 0xb5
 800bd14:	480c      	ldr	r0, [pc, #48]	; (800bd48 <__multadd+0x8c>)
 800bd16:	f000 fd5b 	bl	800c7d0 <__assert_func>
 800bd1a:	6922      	ldr	r2, [r4, #16]
 800bd1c:	f104 010c 	add.w	r1, r4, #12
 800bd20:	300c      	adds	r0, #12
 800bd22:	3202      	adds	r2, #2
 800bd24:	0092      	lsls	r2, r2, #2
 800bd26:	f7ff ff59 	bl	800bbdc <memcpy>
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4644      	mov	r4, r8
 800bd2e:	4638      	mov	r0, r7
 800bd30:	f7ff ffa2 	bl	800bc78 <_Bfree>
 800bd34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd38:	3501      	adds	r5, #1
 800bd3a:	615e      	str	r6, [r3, #20]
 800bd3c:	6125      	str	r5, [r4, #16]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd44:	0800d953 	.word	0x0800d953
 800bd48:	0800d964 	.word	0x0800d964

0800bd4c <__hi0bits>:
 800bd4c:	0c03      	lsrs	r3, r0, #16
 800bd4e:	041b      	lsls	r3, r3, #16
 800bd50:	b9d3      	cbnz	r3, 800bd88 <__hi0bits+0x3c>
 800bd52:	0400      	lsls	r0, r0, #16
 800bd54:	2310      	movs	r3, #16
 800bd56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd5a:	bf04      	itt	eq
 800bd5c:	0200      	lsleq	r0, r0, #8
 800bd5e:	3308      	addeq	r3, #8
 800bd60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd64:	bf04      	itt	eq
 800bd66:	0100      	lsleq	r0, r0, #4
 800bd68:	3304      	addeq	r3, #4
 800bd6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd6e:	bf04      	itt	eq
 800bd70:	0080      	lsleq	r0, r0, #2
 800bd72:	3302      	addeq	r3, #2
 800bd74:	2800      	cmp	r0, #0
 800bd76:	db05      	blt.n	800bd84 <__hi0bits+0x38>
 800bd78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd7c:	f103 0301 	add.w	r3, r3, #1
 800bd80:	bf08      	it	eq
 800bd82:	2320      	moveq	r3, #32
 800bd84:	4618      	mov	r0, r3
 800bd86:	4770      	bx	lr
 800bd88:	2300      	movs	r3, #0
 800bd8a:	e7e4      	b.n	800bd56 <__hi0bits+0xa>

0800bd8c <__lo0bits>:
 800bd8c:	6803      	ldr	r3, [r0, #0]
 800bd8e:	4601      	mov	r1, r0
 800bd90:	f013 0207 	ands.w	r2, r3, #7
 800bd94:	d00b      	beq.n	800bdae <__lo0bits+0x22>
 800bd96:	07da      	lsls	r2, r3, #31
 800bd98:	d423      	bmi.n	800bde2 <__lo0bits+0x56>
 800bd9a:	0798      	lsls	r0, r3, #30
 800bd9c:	bf47      	ittee	mi
 800bd9e:	085b      	lsrmi	r3, r3, #1
 800bda0:	2001      	movmi	r0, #1
 800bda2:	089b      	lsrpl	r3, r3, #2
 800bda4:	2002      	movpl	r0, #2
 800bda6:	bf4c      	ite	mi
 800bda8:	600b      	strmi	r3, [r1, #0]
 800bdaa:	600b      	strpl	r3, [r1, #0]
 800bdac:	4770      	bx	lr
 800bdae:	b298      	uxth	r0, r3
 800bdb0:	b9a8      	cbnz	r0, 800bdde <__lo0bits+0x52>
 800bdb2:	0c1b      	lsrs	r3, r3, #16
 800bdb4:	2010      	movs	r0, #16
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	b90a      	cbnz	r2, 800bdbe <__lo0bits+0x32>
 800bdba:	3008      	adds	r0, #8
 800bdbc:	0a1b      	lsrs	r3, r3, #8
 800bdbe:	071a      	lsls	r2, r3, #28
 800bdc0:	bf04      	itt	eq
 800bdc2:	091b      	lsreq	r3, r3, #4
 800bdc4:	3004      	addeq	r0, #4
 800bdc6:	079a      	lsls	r2, r3, #30
 800bdc8:	bf04      	itt	eq
 800bdca:	089b      	lsreq	r3, r3, #2
 800bdcc:	3002      	addeq	r0, #2
 800bdce:	07da      	lsls	r2, r3, #31
 800bdd0:	d403      	bmi.n	800bdda <__lo0bits+0x4e>
 800bdd2:	085b      	lsrs	r3, r3, #1
 800bdd4:	f100 0001 	add.w	r0, r0, #1
 800bdd8:	d005      	beq.n	800bde6 <__lo0bits+0x5a>
 800bdda:	600b      	str	r3, [r1, #0]
 800bddc:	4770      	bx	lr
 800bdde:	4610      	mov	r0, r2
 800bde0:	e7e9      	b.n	800bdb6 <__lo0bits+0x2a>
 800bde2:	2000      	movs	r0, #0
 800bde4:	4770      	bx	lr
 800bde6:	2020      	movs	r0, #32
 800bde8:	4770      	bx	lr
	...

0800bdec <__i2b>:
 800bdec:	b510      	push	{r4, lr}
 800bdee:	460c      	mov	r4, r1
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	f7ff ff01 	bl	800bbf8 <_Balloc>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	b928      	cbnz	r0, 800be06 <__i2b+0x1a>
 800bdfa:	4b05      	ldr	r3, [pc, #20]	; (800be10 <__i2b+0x24>)
 800bdfc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be00:	4804      	ldr	r0, [pc, #16]	; (800be14 <__i2b+0x28>)
 800be02:	f000 fce5 	bl	800c7d0 <__assert_func>
 800be06:	2301      	movs	r3, #1
 800be08:	6144      	str	r4, [r0, #20]
 800be0a:	6103      	str	r3, [r0, #16]
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	bf00      	nop
 800be10:	0800d953 	.word	0x0800d953
 800be14:	0800d964 	.word	0x0800d964

0800be18 <__multiply>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	4691      	mov	r9, r2
 800be1e:	690a      	ldr	r2, [r1, #16]
 800be20:	460c      	mov	r4, r1
 800be22:	b085      	sub	sp, #20
 800be24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be28:	429a      	cmp	r2, r3
 800be2a:	bfbe      	ittt	lt
 800be2c:	460b      	movlt	r3, r1
 800be2e:	464c      	movlt	r4, r9
 800be30:	4699      	movlt	r9, r3
 800be32:	6927      	ldr	r7, [r4, #16]
 800be34:	68a3      	ldr	r3, [r4, #8]
 800be36:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be3a:	6861      	ldr	r1, [r4, #4]
 800be3c:	eb07 060a 	add.w	r6, r7, sl
 800be40:	42b3      	cmp	r3, r6
 800be42:	bfb8      	it	lt
 800be44:	3101      	addlt	r1, #1
 800be46:	f7ff fed7 	bl	800bbf8 <_Balloc>
 800be4a:	b930      	cbnz	r0, 800be5a <__multiply+0x42>
 800be4c:	4602      	mov	r2, r0
 800be4e:	4b44      	ldr	r3, [pc, #272]	; (800bf60 <__multiply+0x148>)
 800be50:	f240 115d 	movw	r1, #349	; 0x15d
 800be54:	4843      	ldr	r0, [pc, #268]	; (800bf64 <__multiply+0x14c>)
 800be56:	f000 fcbb 	bl	800c7d0 <__assert_func>
 800be5a:	f100 0514 	add.w	r5, r0, #20
 800be5e:	2200      	movs	r2, #0
 800be60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be64:	462b      	mov	r3, r5
 800be66:	4543      	cmp	r3, r8
 800be68:	d321      	bcc.n	800beae <__multiply+0x96>
 800be6a:	f104 0314 	add.w	r3, r4, #20
 800be6e:	f104 0115 	add.w	r1, r4, #21
 800be72:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be76:	f109 0314 	add.w	r3, r9, #20
 800be7a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be7e:	9202      	str	r2, [sp, #8]
 800be80:	1b3a      	subs	r2, r7, r4
 800be82:	3a15      	subs	r2, #21
 800be84:	f022 0203 	bic.w	r2, r2, #3
 800be88:	3204      	adds	r2, #4
 800be8a:	428f      	cmp	r7, r1
 800be8c:	bf38      	it	cc
 800be8e:	2204      	movcc	r2, #4
 800be90:	9201      	str	r2, [sp, #4]
 800be92:	9a02      	ldr	r2, [sp, #8]
 800be94:	9303      	str	r3, [sp, #12]
 800be96:	429a      	cmp	r2, r3
 800be98:	d80c      	bhi.n	800beb4 <__multiply+0x9c>
 800be9a:	2e00      	cmp	r6, #0
 800be9c:	dd03      	ble.n	800bea6 <__multiply+0x8e>
 800be9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d05a      	beq.n	800bf5c <__multiply+0x144>
 800bea6:	6106      	str	r6, [r0, #16]
 800bea8:	b005      	add	sp, #20
 800beaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beae:	f843 2b04 	str.w	r2, [r3], #4
 800beb2:	e7d8      	b.n	800be66 <__multiply+0x4e>
 800beb4:	f8b3 a000 	ldrh.w	sl, [r3]
 800beb8:	f1ba 0f00 	cmp.w	sl, #0
 800bebc:	d024      	beq.n	800bf08 <__multiply+0xf0>
 800bebe:	f104 0e14 	add.w	lr, r4, #20
 800bec2:	46a9      	mov	r9, r5
 800bec4:	f04f 0c00 	mov.w	ip, #0
 800bec8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800becc:	f8d9 1000 	ldr.w	r1, [r9]
 800bed0:	fa1f fb82 	uxth.w	fp, r2
 800bed4:	4577      	cmp	r7, lr
 800bed6:	b289      	uxth	r1, r1
 800bed8:	fb0a 110b 	mla	r1, sl, fp, r1
 800bedc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bee0:	f8d9 2000 	ldr.w	r2, [r9]
 800bee4:	4461      	add	r1, ip
 800bee6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800beea:	fb0a c20b 	mla	r2, sl, fp, ip
 800beee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bef2:	b289      	uxth	r1, r1
 800bef4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bef8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800befc:	f849 1b04 	str.w	r1, [r9], #4
 800bf00:	d8e2      	bhi.n	800bec8 <__multiply+0xb0>
 800bf02:	9a01      	ldr	r2, [sp, #4]
 800bf04:	f845 c002 	str.w	ip, [r5, r2]
 800bf08:	9a03      	ldr	r2, [sp, #12]
 800bf0a:	3304      	adds	r3, #4
 800bf0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf10:	f1b9 0f00 	cmp.w	r9, #0
 800bf14:	d020      	beq.n	800bf58 <__multiply+0x140>
 800bf16:	6829      	ldr	r1, [r5, #0]
 800bf18:	f104 0c14 	add.w	ip, r4, #20
 800bf1c:	46ae      	mov	lr, r5
 800bf1e:	f04f 0a00 	mov.w	sl, #0
 800bf22:	f8bc b000 	ldrh.w	fp, [ip]
 800bf26:	b289      	uxth	r1, r1
 800bf28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf2c:	fb09 220b 	mla	r2, r9, fp, r2
 800bf30:	4492      	add	sl, r2
 800bf32:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf36:	f84e 1b04 	str.w	r1, [lr], #4
 800bf3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf3e:	f8be 1000 	ldrh.w	r1, [lr]
 800bf42:	0c12      	lsrs	r2, r2, #16
 800bf44:	4567      	cmp	r7, ip
 800bf46:	fb09 1102 	mla	r1, r9, r2, r1
 800bf4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bf4e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf52:	d8e6      	bhi.n	800bf22 <__multiply+0x10a>
 800bf54:	9a01      	ldr	r2, [sp, #4]
 800bf56:	50a9      	str	r1, [r5, r2]
 800bf58:	3504      	adds	r5, #4
 800bf5a:	e79a      	b.n	800be92 <__multiply+0x7a>
 800bf5c:	3e01      	subs	r6, #1
 800bf5e:	e79c      	b.n	800be9a <__multiply+0x82>
 800bf60:	0800d953 	.word	0x0800d953
 800bf64:	0800d964 	.word	0x0800d964

0800bf68 <__pow5mult>:
 800bf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf6c:	4615      	mov	r5, r2
 800bf6e:	f012 0203 	ands.w	r2, r2, #3
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	d007      	beq.n	800bf88 <__pow5mult+0x20>
 800bf78:	3a01      	subs	r2, #1
 800bf7a:	4c25      	ldr	r4, [pc, #148]	; (800c010 <__pow5mult+0xa8>)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf82:	f7ff fe9b 	bl	800bcbc <__multadd>
 800bf86:	4607      	mov	r7, r0
 800bf88:	10ad      	asrs	r5, r5, #2
 800bf8a:	d03d      	beq.n	800c008 <__pow5mult+0xa0>
 800bf8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bf8e:	b97c      	cbnz	r4, 800bfb0 <__pow5mult+0x48>
 800bf90:	2010      	movs	r0, #16
 800bf92:	f7ff fe0d 	bl	800bbb0 <malloc>
 800bf96:	4602      	mov	r2, r0
 800bf98:	6270      	str	r0, [r6, #36]	; 0x24
 800bf9a:	b928      	cbnz	r0, 800bfa8 <__pow5mult+0x40>
 800bf9c:	4b1d      	ldr	r3, [pc, #116]	; (800c014 <__pow5mult+0xac>)
 800bf9e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bfa2:	481d      	ldr	r0, [pc, #116]	; (800c018 <__pow5mult+0xb0>)
 800bfa4:	f000 fc14 	bl	800c7d0 <__assert_func>
 800bfa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfac:	6004      	str	r4, [r0, #0]
 800bfae:	60c4      	str	r4, [r0, #12]
 800bfb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bfb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfb8:	b94c      	cbnz	r4, 800bfce <__pow5mult+0x66>
 800bfba:	f240 2171 	movw	r1, #625	; 0x271
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f7ff ff14 	bl	800bdec <__i2b>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfcc:	6003      	str	r3, [r0, #0]
 800bfce:	f04f 0900 	mov.w	r9, #0
 800bfd2:	07eb      	lsls	r3, r5, #31
 800bfd4:	d50a      	bpl.n	800bfec <__pow5mult+0x84>
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	4622      	mov	r2, r4
 800bfda:	4630      	mov	r0, r6
 800bfdc:	f7ff ff1c 	bl	800be18 <__multiply>
 800bfe0:	4680      	mov	r8, r0
 800bfe2:	4639      	mov	r1, r7
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	4647      	mov	r7, r8
 800bfe8:	f7ff fe46 	bl	800bc78 <_Bfree>
 800bfec:	106d      	asrs	r5, r5, #1
 800bfee:	d00b      	beq.n	800c008 <__pow5mult+0xa0>
 800bff0:	6820      	ldr	r0, [r4, #0]
 800bff2:	b938      	cbnz	r0, 800c004 <__pow5mult+0x9c>
 800bff4:	4622      	mov	r2, r4
 800bff6:	4621      	mov	r1, r4
 800bff8:	4630      	mov	r0, r6
 800bffa:	f7ff ff0d 	bl	800be18 <__multiply>
 800bffe:	6020      	str	r0, [r4, #0]
 800c000:	f8c0 9000 	str.w	r9, [r0]
 800c004:	4604      	mov	r4, r0
 800c006:	e7e4      	b.n	800bfd2 <__pow5mult+0x6a>
 800c008:	4638      	mov	r0, r7
 800c00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c00e:	bf00      	nop
 800c010:	0800dab0 	.word	0x0800dab0
 800c014:	0800d8e1 	.word	0x0800d8e1
 800c018:	0800d964 	.word	0x0800d964

0800c01c <__lshift>:
 800c01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c020:	460c      	mov	r4, r1
 800c022:	4607      	mov	r7, r0
 800c024:	4691      	mov	r9, r2
 800c026:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c02a:	6923      	ldr	r3, [r4, #16]
 800c02c:	6849      	ldr	r1, [r1, #4]
 800c02e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c032:	68a3      	ldr	r3, [r4, #8]
 800c034:	f108 0601 	add.w	r6, r8, #1
 800c038:	42b3      	cmp	r3, r6
 800c03a:	db0b      	blt.n	800c054 <__lshift+0x38>
 800c03c:	4638      	mov	r0, r7
 800c03e:	f7ff fddb 	bl	800bbf8 <_Balloc>
 800c042:	4605      	mov	r5, r0
 800c044:	b948      	cbnz	r0, 800c05a <__lshift+0x3e>
 800c046:	4602      	mov	r2, r0
 800c048:	4b2a      	ldr	r3, [pc, #168]	; (800c0f4 <__lshift+0xd8>)
 800c04a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c04e:	482a      	ldr	r0, [pc, #168]	; (800c0f8 <__lshift+0xdc>)
 800c050:	f000 fbbe 	bl	800c7d0 <__assert_func>
 800c054:	3101      	adds	r1, #1
 800c056:	005b      	lsls	r3, r3, #1
 800c058:	e7ee      	b.n	800c038 <__lshift+0x1c>
 800c05a:	2300      	movs	r3, #0
 800c05c:	f100 0114 	add.w	r1, r0, #20
 800c060:	f100 0210 	add.w	r2, r0, #16
 800c064:	4618      	mov	r0, r3
 800c066:	4553      	cmp	r3, sl
 800c068:	db37      	blt.n	800c0da <__lshift+0xbe>
 800c06a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c06e:	f104 0314 	add.w	r3, r4, #20
 800c072:	6920      	ldr	r0, [r4, #16]
 800c074:	f019 091f 	ands.w	r9, r9, #31
 800c078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c07c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c080:	d02f      	beq.n	800c0e2 <__lshift+0xc6>
 800c082:	f1c9 0e20 	rsb	lr, r9, #32
 800c086:	468a      	mov	sl, r1
 800c088:	f04f 0c00 	mov.w	ip, #0
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	fa02 f209 	lsl.w	r2, r2, r9
 800c092:	ea42 020c 	orr.w	r2, r2, ip
 800c096:	f84a 2b04 	str.w	r2, [sl], #4
 800c09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c09e:	4298      	cmp	r0, r3
 800c0a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c0a4:	d8f2      	bhi.n	800c08c <__lshift+0x70>
 800c0a6:	1b03      	subs	r3, r0, r4
 800c0a8:	f104 0215 	add.w	r2, r4, #21
 800c0ac:	3b15      	subs	r3, #21
 800c0ae:	f023 0303 	bic.w	r3, r3, #3
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	4290      	cmp	r0, r2
 800c0b6:	bf38      	it	cc
 800c0b8:	2304      	movcc	r3, #4
 800c0ba:	f841 c003 	str.w	ip, [r1, r3]
 800c0be:	f1bc 0f00 	cmp.w	ip, #0
 800c0c2:	d001      	beq.n	800c0c8 <__lshift+0xac>
 800c0c4:	f108 0602 	add.w	r6, r8, #2
 800c0c8:	3e01      	subs	r6, #1
 800c0ca:	4638      	mov	r0, r7
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	612e      	str	r6, [r5, #16]
 800c0d0:	f7ff fdd2 	bl	800bc78 <_Bfree>
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0da:	3301      	adds	r3, #1
 800c0dc:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0e0:	e7c1      	b.n	800c066 <__lshift+0x4a>
 800c0e2:	3904      	subs	r1, #4
 800c0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e8:	4298      	cmp	r0, r3
 800c0ea:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0ee:	d8f9      	bhi.n	800c0e4 <__lshift+0xc8>
 800c0f0:	e7ea      	b.n	800c0c8 <__lshift+0xac>
 800c0f2:	bf00      	nop
 800c0f4:	0800d953 	.word	0x0800d953
 800c0f8:	0800d964 	.word	0x0800d964

0800c0fc <__mcmp>:
 800c0fc:	6902      	ldr	r2, [r0, #16]
 800c0fe:	b530      	push	{r4, r5, lr}
 800c100:	690c      	ldr	r4, [r1, #16]
 800c102:	1b12      	subs	r2, r2, r4
 800c104:	d10e      	bne.n	800c124 <__mcmp+0x28>
 800c106:	f100 0314 	add.w	r3, r0, #20
 800c10a:	3114      	adds	r1, #20
 800c10c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c110:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c114:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c118:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c11c:	42a5      	cmp	r5, r4
 800c11e:	d003      	beq.n	800c128 <__mcmp+0x2c>
 800c120:	d305      	bcc.n	800c12e <__mcmp+0x32>
 800c122:	2201      	movs	r2, #1
 800c124:	4610      	mov	r0, r2
 800c126:	bd30      	pop	{r4, r5, pc}
 800c128:	4283      	cmp	r3, r0
 800c12a:	d3f3      	bcc.n	800c114 <__mcmp+0x18>
 800c12c:	e7fa      	b.n	800c124 <__mcmp+0x28>
 800c12e:	f04f 32ff 	mov.w	r2, #4294967295
 800c132:	e7f7      	b.n	800c124 <__mcmp+0x28>

0800c134 <__mdiff>:
 800c134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	460c      	mov	r4, r1
 800c13a:	4606      	mov	r6, r0
 800c13c:	4611      	mov	r1, r2
 800c13e:	4692      	mov	sl, r2
 800c140:	4620      	mov	r0, r4
 800c142:	f7ff ffdb 	bl	800c0fc <__mcmp>
 800c146:	1e05      	subs	r5, r0, #0
 800c148:	d110      	bne.n	800c16c <__mdiff+0x38>
 800c14a:	4629      	mov	r1, r5
 800c14c:	4630      	mov	r0, r6
 800c14e:	f7ff fd53 	bl	800bbf8 <_Balloc>
 800c152:	b930      	cbnz	r0, 800c162 <__mdiff+0x2e>
 800c154:	4b3d      	ldr	r3, [pc, #244]	; (800c24c <__mdiff+0x118>)
 800c156:	4602      	mov	r2, r0
 800c158:	f240 2132 	movw	r1, #562	; 0x232
 800c15c:	483c      	ldr	r0, [pc, #240]	; (800c250 <__mdiff+0x11c>)
 800c15e:	f000 fb37 	bl	800c7d0 <__assert_func>
 800c162:	2301      	movs	r3, #1
 800c164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16c:	bfa4      	itt	ge
 800c16e:	4653      	movge	r3, sl
 800c170:	46a2      	movge	sl, r4
 800c172:	4630      	mov	r0, r6
 800c174:	bfa8      	it	ge
 800c176:	2500      	movge	r5, #0
 800c178:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c17c:	bfac      	ite	ge
 800c17e:	461c      	movge	r4, r3
 800c180:	2501      	movlt	r5, #1
 800c182:	f7ff fd39 	bl	800bbf8 <_Balloc>
 800c186:	b920      	cbnz	r0, 800c192 <__mdiff+0x5e>
 800c188:	4b30      	ldr	r3, [pc, #192]	; (800c24c <__mdiff+0x118>)
 800c18a:	4602      	mov	r2, r0
 800c18c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c190:	e7e4      	b.n	800c15c <__mdiff+0x28>
 800c192:	f8da 7010 	ldr.w	r7, [sl, #16]
 800c196:	f104 0914 	add.w	r9, r4, #20
 800c19a:	6926      	ldr	r6, [r4, #16]
 800c19c:	f100 0814 	add.w	r8, r0, #20
 800c1a0:	60c5      	str	r5, [r0, #12]
 800c1a2:	f10a 0514 	add.w	r5, sl, #20
 800c1a6:	f10a 0210 	add.w	r2, sl, #16
 800c1aa:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c1ae:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800c1b2:	46c2      	mov	sl, r8
 800c1b4:	f04f 0c00 	mov.w	ip, #0
 800c1b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c1bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1c0:	fa1f f18b 	uxth.w	r1, fp
 800c1c4:	454e      	cmp	r6, r9
 800c1c6:	448c      	add	ip, r1
 800c1c8:	b299      	uxth	r1, r3
 800c1ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c1ce:	ebac 0101 	sub.w	r1, ip, r1
 800c1d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c1d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c1da:	b289      	uxth	r1, r1
 800c1dc:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c1e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c1e4:	f84a 3b04 	str.w	r3, [sl], #4
 800c1e8:	d8e6      	bhi.n	800c1b8 <__mdiff+0x84>
 800c1ea:	1b33      	subs	r3, r6, r4
 800c1ec:	3415      	adds	r4, #21
 800c1ee:	3b15      	subs	r3, #21
 800c1f0:	f023 0303 	bic.w	r3, r3, #3
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	42a6      	cmp	r6, r4
 800c1f8:	bf38      	it	cc
 800c1fa:	2304      	movcc	r3, #4
 800c1fc:	441d      	add	r5, r3
 800c1fe:	4443      	add	r3, r8
 800c200:	462c      	mov	r4, r5
 800c202:	461e      	mov	r6, r3
 800c204:	4574      	cmp	r4, lr
 800c206:	d30e      	bcc.n	800c226 <__mdiff+0xf2>
 800c208:	f10e 0203 	add.w	r2, lr, #3
 800c20c:	1b52      	subs	r2, r2, r5
 800c20e:	3d03      	subs	r5, #3
 800c210:	f022 0203 	bic.w	r2, r2, #3
 800c214:	45ae      	cmp	lr, r5
 800c216:	bf38      	it	cc
 800c218:	2200      	movcc	r2, #0
 800c21a:	441a      	add	r2, r3
 800c21c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c220:	b18b      	cbz	r3, 800c246 <__mdiff+0x112>
 800c222:	6107      	str	r7, [r0, #16]
 800c224:	e7a0      	b.n	800c168 <__mdiff+0x34>
 800c226:	f854 8b04 	ldr.w	r8, [r4], #4
 800c22a:	fa1f f288 	uxth.w	r2, r8
 800c22e:	4462      	add	r2, ip
 800c230:	1411      	asrs	r1, r2, #16
 800c232:	b292      	uxth	r2, r2
 800c234:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 800c238:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c23c:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800c240:	f846 2b04 	str.w	r2, [r6], #4
 800c244:	e7de      	b.n	800c204 <__mdiff+0xd0>
 800c246:	3f01      	subs	r7, #1
 800c248:	e7e8      	b.n	800c21c <__mdiff+0xe8>
 800c24a:	bf00      	nop
 800c24c:	0800d953 	.word	0x0800d953
 800c250:	0800d964 	.word	0x0800d964

0800c254 <__d2b>:
 800c254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c258:	4689      	mov	r9, r1
 800c25a:	2101      	movs	r1, #1
 800c25c:	4690      	mov	r8, r2
 800c25e:	ec57 6b10 	vmov	r6, r7, d0
 800c262:	f7ff fcc9 	bl	800bbf8 <_Balloc>
 800c266:	4604      	mov	r4, r0
 800c268:	b930      	cbnz	r0, 800c278 <__d2b+0x24>
 800c26a:	4602      	mov	r2, r0
 800c26c:	4b25      	ldr	r3, [pc, #148]	; (800c304 <__d2b+0xb0>)
 800c26e:	f240 310a 	movw	r1, #778	; 0x30a
 800c272:	4825      	ldr	r0, [pc, #148]	; (800c308 <__d2b+0xb4>)
 800c274:	f000 faac 	bl	800c7d0 <__assert_func>
 800c278:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c27c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c280:	bb35      	cbnz	r5, 800c2d0 <__d2b+0x7c>
 800c282:	2e00      	cmp	r6, #0
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	d028      	beq.n	800c2da <__d2b+0x86>
 800c288:	4668      	mov	r0, sp
 800c28a:	9600      	str	r6, [sp, #0]
 800c28c:	f7ff fd7e 	bl	800bd8c <__lo0bits>
 800c290:	9900      	ldr	r1, [sp, #0]
 800c292:	b300      	cbz	r0, 800c2d6 <__d2b+0x82>
 800c294:	9a01      	ldr	r2, [sp, #4]
 800c296:	f1c0 0320 	rsb	r3, r0, #32
 800c29a:	fa02 f303 	lsl.w	r3, r2, r3
 800c29e:	40c2      	lsrs	r2, r0
 800c2a0:	430b      	orrs	r3, r1
 800c2a2:	9201      	str	r2, [sp, #4]
 800c2a4:	6163      	str	r3, [r4, #20]
 800c2a6:	9b01      	ldr	r3, [sp, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	61a3      	str	r3, [r4, #24]
 800c2ac:	bf14      	ite	ne
 800c2ae:	2202      	movne	r2, #2
 800c2b0:	2201      	moveq	r2, #1
 800c2b2:	6122      	str	r2, [r4, #16]
 800c2b4:	b1d5      	cbz	r5, 800c2ec <__d2b+0x98>
 800c2b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2ba:	4405      	add	r5, r0
 800c2bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2c0:	f8c9 5000 	str.w	r5, [r9]
 800c2c4:	f8c8 0000 	str.w	r0, [r8]
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	b003      	add	sp, #12
 800c2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2d4:	e7d5      	b.n	800c282 <__d2b+0x2e>
 800c2d6:	6161      	str	r1, [r4, #20]
 800c2d8:	e7e5      	b.n	800c2a6 <__d2b+0x52>
 800c2da:	a801      	add	r0, sp, #4
 800c2dc:	f7ff fd56 	bl	800bd8c <__lo0bits>
 800c2e0:	9b01      	ldr	r3, [sp, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	3020      	adds	r0, #32
 800c2e6:	6163      	str	r3, [r4, #20]
 800c2e8:	6122      	str	r2, [r4, #16]
 800c2ea:	e7e3      	b.n	800c2b4 <__d2b+0x60>
 800c2ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2f4:	f8c9 0000 	str.w	r0, [r9]
 800c2f8:	6918      	ldr	r0, [r3, #16]
 800c2fa:	f7ff fd27 	bl	800bd4c <__hi0bits>
 800c2fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c302:	e7df      	b.n	800c2c4 <__d2b+0x70>
 800c304:	0800d953 	.word	0x0800d953
 800c308:	0800d964 	.word	0x0800d964

0800c30c <_calloc_r>:
 800c30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c30e:	fba1 2402 	umull	r2, r4, r1, r2
 800c312:	b94c      	cbnz	r4, 800c328 <_calloc_r+0x1c>
 800c314:	4611      	mov	r1, r2
 800c316:	9201      	str	r2, [sp, #4]
 800c318:	f000 f87a 	bl	800c410 <_malloc_r>
 800c31c:	9a01      	ldr	r2, [sp, #4]
 800c31e:	4605      	mov	r5, r0
 800c320:	b930      	cbnz	r0, 800c330 <_calloc_r+0x24>
 800c322:	4628      	mov	r0, r5
 800c324:	b003      	add	sp, #12
 800c326:	bd30      	pop	{r4, r5, pc}
 800c328:	220c      	movs	r2, #12
 800c32a:	2500      	movs	r5, #0
 800c32c:	6002      	str	r2, [r0, #0]
 800c32e:	e7f8      	b.n	800c322 <_calloc_r+0x16>
 800c330:	4621      	mov	r1, r4
 800c332:	f7fe f919 	bl	800a568 <memset>
 800c336:	e7f4      	b.n	800c322 <_calloc_r+0x16>

0800c338 <_free_r>:
 800c338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c33a:	2900      	cmp	r1, #0
 800c33c:	d043      	beq.n	800c3c6 <_free_r+0x8e>
 800c33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c342:	1f0c      	subs	r4, r1, #4
 800c344:	9001      	str	r0, [sp, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	bfb8      	it	lt
 800c34a:	18e4      	addlt	r4, r4, r3
 800c34c:	f000 fa9c 	bl	800c888 <__malloc_lock>
 800c350:	4a1e      	ldr	r2, [pc, #120]	; (800c3cc <_free_r+0x94>)
 800c352:	9801      	ldr	r0, [sp, #4]
 800c354:	6813      	ldr	r3, [r2, #0]
 800c356:	b933      	cbnz	r3, 800c366 <_free_r+0x2e>
 800c358:	6063      	str	r3, [r4, #4]
 800c35a:	6014      	str	r4, [r2, #0]
 800c35c:	b003      	add	sp, #12
 800c35e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c362:	f000 ba97 	b.w	800c894 <__malloc_unlock>
 800c366:	42a3      	cmp	r3, r4
 800c368:	d908      	bls.n	800c37c <_free_r+0x44>
 800c36a:	6825      	ldr	r5, [r4, #0]
 800c36c:	1961      	adds	r1, r4, r5
 800c36e:	428b      	cmp	r3, r1
 800c370:	bf01      	itttt	eq
 800c372:	6819      	ldreq	r1, [r3, #0]
 800c374:	685b      	ldreq	r3, [r3, #4]
 800c376:	1949      	addeq	r1, r1, r5
 800c378:	6021      	streq	r1, [r4, #0]
 800c37a:	e7ed      	b.n	800c358 <_free_r+0x20>
 800c37c:	461a      	mov	r2, r3
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	b10b      	cbz	r3, 800c386 <_free_r+0x4e>
 800c382:	42a3      	cmp	r3, r4
 800c384:	d9fa      	bls.n	800c37c <_free_r+0x44>
 800c386:	6811      	ldr	r1, [r2, #0]
 800c388:	1855      	adds	r5, r2, r1
 800c38a:	42a5      	cmp	r5, r4
 800c38c:	d10b      	bne.n	800c3a6 <_free_r+0x6e>
 800c38e:	6824      	ldr	r4, [r4, #0]
 800c390:	4421      	add	r1, r4
 800c392:	1854      	adds	r4, r2, r1
 800c394:	6011      	str	r1, [r2, #0]
 800c396:	42a3      	cmp	r3, r4
 800c398:	d1e0      	bne.n	800c35c <_free_r+0x24>
 800c39a:	681c      	ldr	r4, [r3, #0]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	4421      	add	r1, r4
 800c3a0:	6053      	str	r3, [r2, #4]
 800c3a2:	6011      	str	r1, [r2, #0]
 800c3a4:	e7da      	b.n	800c35c <_free_r+0x24>
 800c3a6:	d902      	bls.n	800c3ae <_free_r+0x76>
 800c3a8:	230c      	movs	r3, #12
 800c3aa:	6003      	str	r3, [r0, #0]
 800c3ac:	e7d6      	b.n	800c35c <_free_r+0x24>
 800c3ae:	6825      	ldr	r5, [r4, #0]
 800c3b0:	1961      	adds	r1, r4, r5
 800c3b2:	428b      	cmp	r3, r1
 800c3b4:	bf02      	ittt	eq
 800c3b6:	6819      	ldreq	r1, [r3, #0]
 800c3b8:	685b      	ldreq	r3, [r3, #4]
 800c3ba:	1949      	addeq	r1, r1, r5
 800c3bc:	6063      	str	r3, [r4, #4]
 800c3be:	bf08      	it	eq
 800c3c0:	6021      	streq	r1, [r4, #0]
 800c3c2:	6054      	str	r4, [r2, #4]
 800c3c4:	e7ca      	b.n	800c35c <_free_r+0x24>
 800c3c6:	b003      	add	sp, #12
 800c3c8:	bd30      	pop	{r4, r5, pc}
 800c3ca:	bf00      	nop
 800c3cc:	20000348 	.word	0x20000348

0800c3d0 <sbrk_aligned>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	4e0e      	ldr	r6, [pc, #56]	; (800c40c <sbrk_aligned+0x3c>)
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	6831      	ldr	r1, [r6, #0]
 800c3da:	b911      	cbnz	r1, 800c3e2 <sbrk_aligned+0x12>
 800c3dc:	f000 f9e8 	bl	800c7b0 <_sbrk_r>
 800c3e0:	6030      	str	r0, [r6, #0]
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f000 f9e3 	bl	800c7b0 <_sbrk_r>
 800c3ea:	1c43      	adds	r3, r0, #1
 800c3ec:	d00a      	beq.n	800c404 <sbrk_aligned+0x34>
 800c3ee:	1cc4      	adds	r4, r0, #3
 800c3f0:	f024 0403 	bic.w	r4, r4, #3
 800c3f4:	42a0      	cmp	r0, r4
 800c3f6:	d007      	beq.n	800c408 <sbrk_aligned+0x38>
 800c3f8:	1a21      	subs	r1, r4, r0
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f000 f9d8 	bl	800c7b0 <_sbrk_r>
 800c400:	3001      	adds	r0, #1
 800c402:	d101      	bne.n	800c408 <sbrk_aligned+0x38>
 800c404:	f04f 34ff 	mov.w	r4, #4294967295
 800c408:	4620      	mov	r0, r4
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
 800c40c:	2000034c 	.word	0x2000034c

0800c410 <_malloc_r>:
 800c410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c414:	1ccd      	adds	r5, r1, #3
 800c416:	4607      	mov	r7, r0
 800c418:	f025 0503 	bic.w	r5, r5, #3
 800c41c:	3508      	adds	r5, #8
 800c41e:	2d0c      	cmp	r5, #12
 800c420:	bf38      	it	cc
 800c422:	250c      	movcc	r5, #12
 800c424:	2d00      	cmp	r5, #0
 800c426:	db01      	blt.n	800c42c <_malloc_r+0x1c>
 800c428:	42a9      	cmp	r1, r5
 800c42a:	d905      	bls.n	800c438 <_malloc_r+0x28>
 800c42c:	230c      	movs	r3, #12
 800c42e:	2600      	movs	r6, #0
 800c430:	603b      	str	r3, [r7, #0]
 800c432:	4630      	mov	r0, r6
 800c434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c438:	4e2e      	ldr	r6, [pc, #184]	; (800c4f4 <_malloc_r+0xe4>)
 800c43a:	f000 fa25 	bl	800c888 <__malloc_lock>
 800c43e:	6833      	ldr	r3, [r6, #0]
 800c440:	461c      	mov	r4, r3
 800c442:	bb34      	cbnz	r4, 800c492 <_malloc_r+0x82>
 800c444:	4629      	mov	r1, r5
 800c446:	4638      	mov	r0, r7
 800c448:	f7ff ffc2 	bl	800c3d0 <sbrk_aligned>
 800c44c:	1c43      	adds	r3, r0, #1
 800c44e:	4604      	mov	r4, r0
 800c450:	d14d      	bne.n	800c4ee <_malloc_r+0xde>
 800c452:	6834      	ldr	r4, [r6, #0]
 800c454:	4626      	mov	r6, r4
 800c456:	2e00      	cmp	r6, #0
 800c458:	d140      	bne.n	800c4dc <_malloc_r+0xcc>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	4631      	mov	r1, r6
 800c45e:	4638      	mov	r0, r7
 800c460:	eb04 0803 	add.w	r8, r4, r3
 800c464:	f000 f9a4 	bl	800c7b0 <_sbrk_r>
 800c468:	4580      	cmp	r8, r0
 800c46a:	d13a      	bne.n	800c4e2 <_malloc_r+0xd2>
 800c46c:	6821      	ldr	r1, [r4, #0]
 800c46e:	3503      	adds	r5, #3
 800c470:	4638      	mov	r0, r7
 800c472:	1a6d      	subs	r5, r5, r1
 800c474:	f025 0503 	bic.w	r5, r5, #3
 800c478:	3508      	adds	r5, #8
 800c47a:	2d0c      	cmp	r5, #12
 800c47c:	bf38      	it	cc
 800c47e:	250c      	movcc	r5, #12
 800c480:	4629      	mov	r1, r5
 800c482:	f7ff ffa5 	bl	800c3d0 <sbrk_aligned>
 800c486:	3001      	adds	r0, #1
 800c488:	d02b      	beq.n	800c4e2 <_malloc_r+0xd2>
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	442b      	add	r3, r5
 800c48e:	6023      	str	r3, [r4, #0]
 800c490:	e00e      	b.n	800c4b0 <_malloc_r+0xa0>
 800c492:	6822      	ldr	r2, [r4, #0]
 800c494:	1b52      	subs	r2, r2, r5
 800c496:	d41e      	bmi.n	800c4d6 <_malloc_r+0xc6>
 800c498:	2a0b      	cmp	r2, #11
 800c49a:	d916      	bls.n	800c4ca <_malloc_r+0xba>
 800c49c:	1961      	adds	r1, r4, r5
 800c49e:	42a3      	cmp	r3, r4
 800c4a0:	6025      	str	r5, [r4, #0]
 800c4a2:	bf18      	it	ne
 800c4a4:	6059      	strne	r1, [r3, #4]
 800c4a6:	6863      	ldr	r3, [r4, #4]
 800c4a8:	bf08      	it	eq
 800c4aa:	6031      	streq	r1, [r6, #0]
 800c4ac:	5162      	str	r2, [r4, r5]
 800c4ae:	604b      	str	r3, [r1, #4]
 800c4b0:	f104 060b 	add.w	r6, r4, #11
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	f000 f9ed 	bl	800c894 <__malloc_unlock>
 800c4ba:	1d23      	adds	r3, r4, #4
 800c4bc:	f026 0607 	bic.w	r6, r6, #7
 800c4c0:	1af2      	subs	r2, r6, r3
 800c4c2:	d0b6      	beq.n	800c432 <_malloc_r+0x22>
 800c4c4:	1b9b      	subs	r3, r3, r6
 800c4c6:	50a3      	str	r3, [r4, r2]
 800c4c8:	e7b3      	b.n	800c432 <_malloc_r+0x22>
 800c4ca:	6862      	ldr	r2, [r4, #4]
 800c4cc:	42a3      	cmp	r3, r4
 800c4ce:	bf0c      	ite	eq
 800c4d0:	6032      	streq	r2, [r6, #0]
 800c4d2:	605a      	strne	r2, [r3, #4]
 800c4d4:	e7ec      	b.n	800c4b0 <_malloc_r+0xa0>
 800c4d6:	4623      	mov	r3, r4
 800c4d8:	6864      	ldr	r4, [r4, #4]
 800c4da:	e7b2      	b.n	800c442 <_malloc_r+0x32>
 800c4dc:	4634      	mov	r4, r6
 800c4de:	6876      	ldr	r6, [r6, #4]
 800c4e0:	e7b9      	b.n	800c456 <_malloc_r+0x46>
 800c4e2:	230c      	movs	r3, #12
 800c4e4:	4638      	mov	r0, r7
 800c4e6:	603b      	str	r3, [r7, #0]
 800c4e8:	f000 f9d4 	bl	800c894 <__malloc_unlock>
 800c4ec:	e7a1      	b.n	800c432 <_malloc_r+0x22>
 800c4ee:	6025      	str	r5, [r4, #0]
 800c4f0:	e7de      	b.n	800c4b0 <_malloc_r+0xa0>
 800c4f2:	bf00      	nop
 800c4f4:	20000348 	.word	0x20000348

0800c4f8 <__ssputs_r>:
 800c4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4fc:	688e      	ldr	r6, [r1, #8]
 800c4fe:	4682      	mov	sl, r0
 800c500:	460c      	mov	r4, r1
 800c502:	4690      	mov	r8, r2
 800c504:	429e      	cmp	r6, r3
 800c506:	461f      	mov	r7, r3
 800c508:	d838      	bhi.n	800c57c <__ssputs_r+0x84>
 800c50a:	898a      	ldrh	r2, [r1, #12]
 800c50c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c510:	d032      	beq.n	800c578 <__ssputs_r+0x80>
 800c512:	6825      	ldr	r5, [r4, #0]
 800c514:	3301      	adds	r3, #1
 800c516:	6909      	ldr	r1, [r1, #16]
 800c518:	eba5 0901 	sub.w	r9, r5, r1
 800c51c:	6965      	ldr	r5, [r4, #20]
 800c51e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c522:	444b      	add	r3, r9
 800c524:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c528:	106d      	asrs	r5, r5, #1
 800c52a:	429d      	cmp	r5, r3
 800c52c:	bf38      	it	cc
 800c52e:	461d      	movcc	r5, r3
 800c530:	0553      	lsls	r3, r2, #21
 800c532:	d531      	bpl.n	800c598 <__ssputs_r+0xa0>
 800c534:	4629      	mov	r1, r5
 800c536:	f7ff ff6b 	bl	800c410 <_malloc_r>
 800c53a:	4606      	mov	r6, r0
 800c53c:	b950      	cbnz	r0, 800c554 <__ssputs_r+0x5c>
 800c53e:	230c      	movs	r3, #12
 800c540:	f04f 30ff 	mov.w	r0, #4294967295
 800c544:	f8ca 3000 	str.w	r3, [sl]
 800c548:	89a3      	ldrh	r3, [r4, #12]
 800c54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c54e:	81a3      	strh	r3, [r4, #12]
 800c550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c554:	464a      	mov	r2, r9
 800c556:	6921      	ldr	r1, [r4, #16]
 800c558:	f7ff fb40 	bl	800bbdc <memcpy>
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c566:	81a3      	strh	r3, [r4, #12]
 800c568:	6126      	str	r6, [r4, #16]
 800c56a:	444e      	add	r6, r9
 800c56c:	6165      	str	r5, [r4, #20]
 800c56e:	eba5 0509 	sub.w	r5, r5, r9
 800c572:	6026      	str	r6, [r4, #0]
 800c574:	463e      	mov	r6, r7
 800c576:	60a5      	str	r5, [r4, #8]
 800c578:	42be      	cmp	r6, r7
 800c57a:	d900      	bls.n	800c57e <__ssputs_r+0x86>
 800c57c:	463e      	mov	r6, r7
 800c57e:	4632      	mov	r2, r6
 800c580:	4641      	mov	r1, r8
 800c582:	6820      	ldr	r0, [r4, #0]
 800c584:	f000 f966 	bl	800c854 <memmove>
 800c588:	68a3      	ldr	r3, [r4, #8]
 800c58a:	2000      	movs	r0, #0
 800c58c:	1b9b      	subs	r3, r3, r6
 800c58e:	60a3      	str	r3, [r4, #8]
 800c590:	6823      	ldr	r3, [r4, #0]
 800c592:	4433      	add	r3, r6
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	e7db      	b.n	800c550 <__ssputs_r+0x58>
 800c598:	462a      	mov	r2, r5
 800c59a:	f000 f981 	bl	800c8a0 <_realloc_r>
 800c59e:	4606      	mov	r6, r0
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d1e1      	bne.n	800c568 <__ssputs_r+0x70>
 800c5a4:	6921      	ldr	r1, [r4, #16]
 800c5a6:	4650      	mov	r0, sl
 800c5a8:	f7ff fec6 	bl	800c338 <_free_r>
 800c5ac:	e7c7      	b.n	800c53e <__ssputs_r+0x46>
	...

0800c5b0 <_svfiprintf_r>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	4698      	mov	r8, r3
 800c5b6:	898b      	ldrh	r3, [r1, #12]
 800c5b8:	b09d      	sub	sp, #116	; 0x74
 800c5ba:	4607      	mov	r7, r0
 800c5bc:	061b      	lsls	r3, r3, #24
 800c5be:	460d      	mov	r5, r1
 800c5c0:	4614      	mov	r4, r2
 800c5c2:	d50e      	bpl.n	800c5e2 <_svfiprintf_r+0x32>
 800c5c4:	690b      	ldr	r3, [r1, #16]
 800c5c6:	b963      	cbnz	r3, 800c5e2 <_svfiprintf_r+0x32>
 800c5c8:	2140      	movs	r1, #64	; 0x40
 800c5ca:	f7ff ff21 	bl	800c410 <_malloc_r>
 800c5ce:	6028      	str	r0, [r5, #0]
 800c5d0:	6128      	str	r0, [r5, #16]
 800c5d2:	b920      	cbnz	r0, 800c5de <_svfiprintf_r+0x2e>
 800c5d4:	230c      	movs	r3, #12
 800c5d6:	603b      	str	r3, [r7, #0]
 800c5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5dc:	e0d1      	b.n	800c782 <_svfiprintf_r+0x1d2>
 800c5de:	2340      	movs	r3, #64	; 0x40
 800c5e0:	616b      	str	r3, [r5, #20]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5e8:	f04f 0901 	mov.w	r9, #1
 800c5ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c79c <_svfiprintf_r+0x1ec>
 800c5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f2:	2320      	movs	r3, #32
 800c5f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5f8:	2330      	movs	r3, #48	; 0x30
 800c5fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5fe:	4623      	mov	r3, r4
 800c600:	469a      	mov	sl, r3
 800c602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c606:	b10a      	cbz	r2, 800c60c <_svfiprintf_r+0x5c>
 800c608:	2a25      	cmp	r2, #37	; 0x25
 800c60a:	d1f9      	bne.n	800c600 <_svfiprintf_r+0x50>
 800c60c:	ebba 0b04 	subs.w	fp, sl, r4
 800c610:	d00b      	beq.n	800c62a <_svfiprintf_r+0x7a>
 800c612:	465b      	mov	r3, fp
 800c614:	4622      	mov	r2, r4
 800c616:	4629      	mov	r1, r5
 800c618:	4638      	mov	r0, r7
 800c61a:	f7ff ff6d 	bl	800c4f8 <__ssputs_r>
 800c61e:	3001      	adds	r0, #1
 800c620:	f000 80aa 	beq.w	800c778 <_svfiprintf_r+0x1c8>
 800c624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c626:	445a      	add	r2, fp
 800c628:	9209      	str	r2, [sp, #36]	; 0x24
 800c62a:	f89a 3000 	ldrb.w	r3, [sl]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f000 80a2 	beq.w	800c778 <_svfiprintf_r+0x1c8>
 800c634:	2300      	movs	r3, #0
 800c636:	f04f 32ff 	mov.w	r2, #4294967295
 800c63a:	f10a 0a01 	add.w	sl, sl, #1
 800c63e:	9304      	str	r3, [sp, #16]
 800c640:	9307      	str	r3, [sp, #28]
 800c642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c646:	931a      	str	r3, [sp, #104]	; 0x68
 800c648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c64c:	4654      	mov	r4, sl
 800c64e:	2205      	movs	r2, #5
 800c650:	4852      	ldr	r0, [pc, #328]	; (800c79c <_svfiprintf_r+0x1ec>)
 800c652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c656:	f7ff fab3 	bl	800bbc0 <memchr>
 800c65a:	9a04      	ldr	r2, [sp, #16]
 800c65c:	b9d8      	cbnz	r0, 800c696 <_svfiprintf_r+0xe6>
 800c65e:	06d0      	lsls	r0, r2, #27
 800c660:	bf44      	itt	mi
 800c662:	2320      	movmi	r3, #32
 800c664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c668:	0711      	lsls	r1, r2, #28
 800c66a:	bf44      	itt	mi
 800c66c:	232b      	movmi	r3, #43	; 0x2b
 800c66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c672:	f89a 3000 	ldrb.w	r3, [sl]
 800c676:	2b2a      	cmp	r3, #42	; 0x2a
 800c678:	d015      	beq.n	800c6a6 <_svfiprintf_r+0xf6>
 800c67a:	9a07      	ldr	r2, [sp, #28]
 800c67c:	4654      	mov	r4, sl
 800c67e:	2000      	movs	r0, #0
 800c680:	f04f 0c0a 	mov.w	ip, #10
 800c684:	4621      	mov	r1, r4
 800c686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c68a:	3b30      	subs	r3, #48	; 0x30
 800c68c:	2b09      	cmp	r3, #9
 800c68e:	d94e      	bls.n	800c72e <_svfiprintf_r+0x17e>
 800c690:	b1b0      	cbz	r0, 800c6c0 <_svfiprintf_r+0x110>
 800c692:	9207      	str	r2, [sp, #28]
 800c694:	e014      	b.n	800c6c0 <_svfiprintf_r+0x110>
 800c696:	eba0 0308 	sub.w	r3, r0, r8
 800c69a:	46a2      	mov	sl, r4
 800c69c:	fa09 f303 	lsl.w	r3, r9, r3
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	9304      	str	r3, [sp, #16]
 800c6a4:	e7d2      	b.n	800c64c <_svfiprintf_r+0x9c>
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	1d19      	adds	r1, r3, #4
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	9103      	str	r1, [sp, #12]
 800c6b0:	bfbb      	ittet	lt
 800c6b2:	425b      	neglt	r3, r3
 800c6b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c6b8:	9307      	strge	r3, [sp, #28]
 800c6ba:	9307      	strlt	r3, [sp, #28]
 800c6bc:	bfb8      	it	lt
 800c6be:	9204      	strlt	r2, [sp, #16]
 800c6c0:	7823      	ldrb	r3, [r4, #0]
 800c6c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c6c4:	d10c      	bne.n	800c6e0 <_svfiprintf_r+0x130>
 800c6c6:	7863      	ldrb	r3, [r4, #1]
 800c6c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ca:	d135      	bne.n	800c738 <_svfiprintf_r+0x188>
 800c6cc:	9b03      	ldr	r3, [sp, #12]
 800c6ce:	3402      	adds	r4, #2
 800c6d0:	1d1a      	adds	r2, r3, #4
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	9203      	str	r2, [sp, #12]
 800c6d8:	bfb8      	it	lt
 800c6da:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6de:	9305      	str	r3, [sp, #20]
 800c6e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7ac <_svfiprintf_r+0x1fc>
 800c6e4:	2203      	movs	r2, #3
 800c6e6:	7821      	ldrb	r1, [r4, #0]
 800c6e8:	4650      	mov	r0, sl
 800c6ea:	f7ff fa69 	bl	800bbc0 <memchr>
 800c6ee:	b140      	cbz	r0, 800c702 <_svfiprintf_r+0x152>
 800c6f0:	2340      	movs	r3, #64	; 0x40
 800c6f2:	eba0 000a 	sub.w	r0, r0, sl
 800c6f6:	3401      	adds	r4, #1
 800c6f8:	fa03 f000 	lsl.w	r0, r3, r0
 800c6fc:	9b04      	ldr	r3, [sp, #16]
 800c6fe:	4303      	orrs	r3, r0
 800c700:	9304      	str	r3, [sp, #16]
 800c702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c706:	2206      	movs	r2, #6
 800c708:	4825      	ldr	r0, [pc, #148]	; (800c7a0 <_svfiprintf_r+0x1f0>)
 800c70a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c70e:	f7ff fa57 	bl	800bbc0 <memchr>
 800c712:	2800      	cmp	r0, #0
 800c714:	d038      	beq.n	800c788 <_svfiprintf_r+0x1d8>
 800c716:	4b23      	ldr	r3, [pc, #140]	; (800c7a4 <_svfiprintf_r+0x1f4>)
 800c718:	bb1b      	cbnz	r3, 800c762 <_svfiprintf_r+0x1b2>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	3307      	adds	r3, #7
 800c71e:	f023 0307 	bic.w	r3, r3, #7
 800c722:	3308      	adds	r3, #8
 800c724:	9303      	str	r3, [sp, #12]
 800c726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c728:	4433      	add	r3, r6
 800c72a:	9309      	str	r3, [sp, #36]	; 0x24
 800c72c:	e767      	b.n	800c5fe <_svfiprintf_r+0x4e>
 800c72e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c732:	460c      	mov	r4, r1
 800c734:	2001      	movs	r0, #1
 800c736:	e7a5      	b.n	800c684 <_svfiprintf_r+0xd4>
 800c738:	2300      	movs	r3, #0
 800c73a:	3401      	adds	r4, #1
 800c73c:	f04f 0c0a 	mov.w	ip, #10
 800c740:	4619      	mov	r1, r3
 800c742:	9305      	str	r3, [sp, #20]
 800c744:	4620      	mov	r0, r4
 800c746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c74a:	3a30      	subs	r2, #48	; 0x30
 800c74c:	2a09      	cmp	r2, #9
 800c74e:	d903      	bls.n	800c758 <_svfiprintf_r+0x1a8>
 800c750:	2b00      	cmp	r3, #0
 800c752:	d0c5      	beq.n	800c6e0 <_svfiprintf_r+0x130>
 800c754:	9105      	str	r1, [sp, #20]
 800c756:	e7c3      	b.n	800c6e0 <_svfiprintf_r+0x130>
 800c758:	fb0c 2101 	mla	r1, ip, r1, r2
 800c75c:	4604      	mov	r4, r0
 800c75e:	2301      	movs	r3, #1
 800c760:	e7f0      	b.n	800c744 <_svfiprintf_r+0x194>
 800c762:	ab03      	add	r3, sp, #12
 800c764:	462a      	mov	r2, r5
 800c766:	a904      	add	r1, sp, #16
 800c768:	4638      	mov	r0, r7
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	4b0e      	ldr	r3, [pc, #56]	; (800c7a8 <_svfiprintf_r+0x1f8>)
 800c76e:	f7fd ffa3 	bl	800a6b8 <_printf_float>
 800c772:	1c42      	adds	r2, r0, #1
 800c774:	4606      	mov	r6, r0
 800c776:	d1d6      	bne.n	800c726 <_svfiprintf_r+0x176>
 800c778:	89ab      	ldrh	r3, [r5, #12]
 800c77a:	065b      	lsls	r3, r3, #25
 800c77c:	f53f af2c 	bmi.w	800c5d8 <_svfiprintf_r+0x28>
 800c780:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c782:	b01d      	add	sp, #116	; 0x74
 800c784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c788:	ab03      	add	r3, sp, #12
 800c78a:	462a      	mov	r2, r5
 800c78c:	a904      	add	r1, sp, #16
 800c78e:	4638      	mov	r0, r7
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	4b05      	ldr	r3, [pc, #20]	; (800c7a8 <_svfiprintf_r+0x1f8>)
 800c794:	f7fe fa36 	bl	800ac04 <_printf_i>
 800c798:	e7eb      	b.n	800c772 <_svfiprintf_r+0x1c2>
 800c79a:	bf00      	nop
 800c79c:	0800dabc 	.word	0x0800dabc
 800c7a0:	0800dac6 	.word	0x0800dac6
 800c7a4:	0800a6b9 	.word	0x0800a6b9
 800c7a8:	0800c4f9 	.word	0x0800c4f9
 800c7ac:	0800dac2 	.word	0x0800dac2

0800c7b0 <_sbrk_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4d05      	ldr	r5, [pc, #20]	; (800c7cc <_sbrk_r+0x1c>)
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	4608      	mov	r0, r1
 800c7ba:	602b      	str	r3, [r5, #0]
 800c7bc:	f7f5 f9f0 	bl	8001ba0 <_sbrk>
 800c7c0:	1c43      	adds	r3, r0, #1
 800c7c2:	d102      	bne.n	800c7ca <_sbrk_r+0x1a>
 800c7c4:	682b      	ldr	r3, [r5, #0]
 800c7c6:	b103      	cbz	r3, 800c7ca <_sbrk_r+0x1a>
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	20000350 	.word	0x20000350

0800c7d0 <__assert_func>:
 800c7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7d2:	4614      	mov	r4, r2
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	4b09      	ldr	r3, [pc, #36]	; (800c7fc <__assert_func+0x2c>)
 800c7d8:	4605      	mov	r5, r0
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68d8      	ldr	r0, [r3, #12]
 800c7de:	b14c      	cbz	r4, 800c7f4 <__assert_func+0x24>
 800c7e0:	4b07      	ldr	r3, [pc, #28]	; (800c800 <__assert_func+0x30>)
 800c7e2:	9100      	str	r1, [sp, #0]
 800c7e4:	4907      	ldr	r1, [pc, #28]	; (800c804 <__assert_func+0x34>)
 800c7e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7ea:	462b      	mov	r3, r5
 800c7ec:	f000 f80e 	bl	800c80c <fiprintf>
 800c7f0:	f000 faac 	bl	800cd4c <abort>
 800c7f4:	4b04      	ldr	r3, [pc, #16]	; (800c808 <__assert_func+0x38>)
 800c7f6:	461c      	mov	r4, r3
 800c7f8:	e7f3      	b.n	800c7e2 <__assert_func+0x12>
 800c7fa:	bf00      	nop
 800c7fc:	20000020 	.word	0x20000020
 800c800:	0800dacd 	.word	0x0800dacd
 800c804:	0800dada 	.word	0x0800dada
 800c808:	0800db08 	.word	0x0800db08

0800c80c <fiprintf>:
 800c80c:	b40e      	push	{r1, r2, r3}
 800c80e:	b503      	push	{r0, r1, lr}
 800c810:	ab03      	add	r3, sp, #12
 800c812:	4601      	mov	r1, r0
 800c814:	4805      	ldr	r0, [pc, #20]	; (800c82c <fiprintf+0x20>)
 800c816:	f853 2b04 	ldr.w	r2, [r3], #4
 800c81a:	6800      	ldr	r0, [r0, #0]
 800c81c:	9301      	str	r3, [sp, #4]
 800c81e:	f000 f897 	bl	800c950 <_vfiprintf_r>
 800c822:	b002      	add	sp, #8
 800c824:	f85d eb04 	ldr.w	lr, [sp], #4
 800c828:	b003      	add	sp, #12
 800c82a:	4770      	bx	lr
 800c82c:	20000020 	.word	0x20000020

0800c830 <__ascii_mbtowc>:
 800c830:	b082      	sub	sp, #8
 800c832:	b901      	cbnz	r1, 800c836 <__ascii_mbtowc+0x6>
 800c834:	a901      	add	r1, sp, #4
 800c836:	b142      	cbz	r2, 800c84a <__ascii_mbtowc+0x1a>
 800c838:	b14b      	cbz	r3, 800c84e <__ascii_mbtowc+0x1e>
 800c83a:	7813      	ldrb	r3, [r2, #0]
 800c83c:	600b      	str	r3, [r1, #0]
 800c83e:	7812      	ldrb	r2, [r2, #0]
 800c840:	1e10      	subs	r0, r2, #0
 800c842:	bf18      	it	ne
 800c844:	2001      	movne	r0, #1
 800c846:	b002      	add	sp, #8
 800c848:	4770      	bx	lr
 800c84a:	4610      	mov	r0, r2
 800c84c:	e7fb      	b.n	800c846 <__ascii_mbtowc+0x16>
 800c84e:	f06f 0001 	mvn.w	r0, #1
 800c852:	e7f8      	b.n	800c846 <__ascii_mbtowc+0x16>

0800c854 <memmove>:
 800c854:	4288      	cmp	r0, r1
 800c856:	b510      	push	{r4, lr}
 800c858:	eb01 0402 	add.w	r4, r1, r2
 800c85c:	d902      	bls.n	800c864 <memmove+0x10>
 800c85e:	4284      	cmp	r4, r0
 800c860:	4623      	mov	r3, r4
 800c862:	d807      	bhi.n	800c874 <memmove+0x20>
 800c864:	1e43      	subs	r3, r0, #1
 800c866:	42a1      	cmp	r1, r4
 800c868:	d008      	beq.n	800c87c <memmove+0x28>
 800c86a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c86e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c872:	e7f8      	b.n	800c866 <memmove+0x12>
 800c874:	4402      	add	r2, r0
 800c876:	4601      	mov	r1, r0
 800c878:	428a      	cmp	r2, r1
 800c87a:	d100      	bne.n	800c87e <memmove+0x2a>
 800c87c:	bd10      	pop	{r4, pc}
 800c87e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c886:	e7f7      	b.n	800c878 <memmove+0x24>

0800c888 <__malloc_lock>:
 800c888:	4801      	ldr	r0, [pc, #4]	; (800c890 <__malloc_lock+0x8>)
 800c88a:	f000 bc1d 	b.w	800d0c8 <__retarget_lock_acquire_recursive>
 800c88e:	bf00      	nop
 800c890:	20000354 	.word	0x20000354

0800c894 <__malloc_unlock>:
 800c894:	4801      	ldr	r0, [pc, #4]	; (800c89c <__malloc_unlock+0x8>)
 800c896:	f000 bc18 	b.w	800d0ca <__retarget_lock_release_recursive>
 800c89a:	bf00      	nop
 800c89c:	20000354 	.word	0x20000354

0800c8a0 <_realloc_r>:
 800c8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a4:	4680      	mov	r8, r0
 800c8a6:	4614      	mov	r4, r2
 800c8a8:	460e      	mov	r6, r1
 800c8aa:	b921      	cbnz	r1, 800c8b6 <_realloc_r+0x16>
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b2:	f7ff bdad 	b.w	800c410 <_malloc_r>
 800c8b6:	b92a      	cbnz	r2, 800c8c4 <_realloc_r+0x24>
 800c8b8:	4625      	mov	r5, r4
 800c8ba:	f7ff fd3d 	bl	800c338 <_free_r>
 800c8be:	4628      	mov	r0, r5
 800c8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c4:	f000 fc68 	bl	800d198 <_malloc_usable_size_r>
 800c8c8:	4284      	cmp	r4, r0
 800c8ca:	4607      	mov	r7, r0
 800c8cc:	d802      	bhi.n	800c8d4 <_realloc_r+0x34>
 800c8ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8d2:	d812      	bhi.n	800c8fa <_realloc_r+0x5a>
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	4640      	mov	r0, r8
 800c8d8:	f7ff fd9a 	bl	800c410 <_malloc_r>
 800c8dc:	4605      	mov	r5, r0
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d0ed      	beq.n	800c8be <_realloc_r+0x1e>
 800c8e2:	42bc      	cmp	r4, r7
 800c8e4:	4622      	mov	r2, r4
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	bf28      	it	cs
 800c8ea:	463a      	movcs	r2, r7
 800c8ec:	f7ff f976 	bl	800bbdc <memcpy>
 800c8f0:	4631      	mov	r1, r6
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	f7ff fd20 	bl	800c338 <_free_r>
 800c8f8:	e7e1      	b.n	800c8be <_realloc_r+0x1e>
 800c8fa:	4635      	mov	r5, r6
 800c8fc:	e7df      	b.n	800c8be <_realloc_r+0x1e>

0800c8fe <__sfputc_r>:
 800c8fe:	6893      	ldr	r3, [r2, #8]
 800c900:	3b01      	subs	r3, #1
 800c902:	2b00      	cmp	r3, #0
 800c904:	6093      	str	r3, [r2, #8]
 800c906:	b410      	push	{r4}
 800c908:	da08      	bge.n	800c91c <__sfputc_r+0x1e>
 800c90a:	6994      	ldr	r4, [r2, #24]
 800c90c:	42a3      	cmp	r3, r4
 800c90e:	db01      	blt.n	800c914 <__sfputc_r+0x16>
 800c910:	290a      	cmp	r1, #10
 800c912:	d103      	bne.n	800c91c <__sfputc_r+0x1e>
 800c914:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c918:	f000 b94a 	b.w	800cbb0 <__swbuf_r>
 800c91c:	6813      	ldr	r3, [r2, #0]
 800c91e:	1c58      	adds	r0, r3, #1
 800c920:	6010      	str	r0, [r2, #0]
 800c922:	4608      	mov	r0, r1
 800c924:	7019      	strb	r1, [r3, #0]
 800c926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <__sfputs_r>:
 800c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92e:	4606      	mov	r6, r0
 800c930:	460f      	mov	r7, r1
 800c932:	4614      	mov	r4, r2
 800c934:	18d5      	adds	r5, r2, r3
 800c936:	42ac      	cmp	r4, r5
 800c938:	d101      	bne.n	800c93e <__sfputs_r+0x12>
 800c93a:	2000      	movs	r0, #0
 800c93c:	e007      	b.n	800c94e <__sfputs_r+0x22>
 800c93e:	463a      	mov	r2, r7
 800c940:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c944:	4630      	mov	r0, r6
 800c946:	f7ff ffda 	bl	800c8fe <__sfputc_r>
 800c94a:	1c43      	adds	r3, r0, #1
 800c94c:	d1f3      	bne.n	800c936 <__sfputs_r+0xa>
 800c94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c950 <_vfiprintf_r>:
 800c950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c954:	460d      	mov	r5, r1
 800c956:	b09d      	sub	sp, #116	; 0x74
 800c958:	4614      	mov	r4, r2
 800c95a:	4698      	mov	r8, r3
 800c95c:	4606      	mov	r6, r0
 800c95e:	b118      	cbz	r0, 800c968 <_vfiprintf_r+0x18>
 800c960:	6983      	ldr	r3, [r0, #24]
 800c962:	b90b      	cbnz	r3, 800c968 <_vfiprintf_r+0x18>
 800c964:	f000 fb12 	bl	800cf8c <__sinit>
 800c968:	4b89      	ldr	r3, [pc, #548]	; (800cb90 <_vfiprintf_r+0x240>)
 800c96a:	429d      	cmp	r5, r3
 800c96c:	d11b      	bne.n	800c9a6 <_vfiprintf_r+0x56>
 800c96e:	6875      	ldr	r5, [r6, #4]
 800c970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c972:	07d9      	lsls	r1, r3, #31
 800c974:	d405      	bmi.n	800c982 <_vfiprintf_r+0x32>
 800c976:	89ab      	ldrh	r3, [r5, #12]
 800c978:	059a      	lsls	r2, r3, #22
 800c97a:	d402      	bmi.n	800c982 <_vfiprintf_r+0x32>
 800c97c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c97e:	f000 fba3 	bl	800d0c8 <__retarget_lock_acquire_recursive>
 800c982:	89ab      	ldrh	r3, [r5, #12]
 800c984:	071b      	lsls	r3, r3, #28
 800c986:	d501      	bpl.n	800c98c <_vfiprintf_r+0x3c>
 800c988:	692b      	ldr	r3, [r5, #16]
 800c98a:	b9eb      	cbnz	r3, 800c9c8 <_vfiprintf_r+0x78>
 800c98c:	4629      	mov	r1, r5
 800c98e:	4630      	mov	r0, r6
 800c990:	f000 f96e 	bl	800cc70 <__swsetup_r>
 800c994:	b1c0      	cbz	r0, 800c9c8 <_vfiprintf_r+0x78>
 800c996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c998:	07dc      	lsls	r4, r3, #31
 800c99a:	d50e      	bpl.n	800c9ba <_vfiprintf_r+0x6a>
 800c99c:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a0:	b01d      	add	sp, #116	; 0x74
 800c9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a6:	4b7b      	ldr	r3, [pc, #492]	; (800cb94 <_vfiprintf_r+0x244>)
 800c9a8:	429d      	cmp	r5, r3
 800c9aa:	d101      	bne.n	800c9b0 <_vfiprintf_r+0x60>
 800c9ac:	68b5      	ldr	r5, [r6, #8]
 800c9ae:	e7df      	b.n	800c970 <_vfiprintf_r+0x20>
 800c9b0:	4b79      	ldr	r3, [pc, #484]	; (800cb98 <_vfiprintf_r+0x248>)
 800c9b2:	429d      	cmp	r5, r3
 800c9b4:	bf08      	it	eq
 800c9b6:	68f5      	ldreq	r5, [r6, #12]
 800c9b8:	e7da      	b.n	800c970 <_vfiprintf_r+0x20>
 800c9ba:	89ab      	ldrh	r3, [r5, #12]
 800c9bc:	0598      	lsls	r0, r3, #22
 800c9be:	d4ed      	bmi.n	800c99c <_vfiprintf_r+0x4c>
 800c9c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9c2:	f000 fb82 	bl	800d0ca <__retarget_lock_release_recursive>
 800c9c6:	e7e9      	b.n	800c99c <_vfiprintf_r+0x4c>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9ce:	f04f 0901 	mov.w	r9, #1
 800c9d2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800cb9c <_vfiprintf_r+0x24c>
 800c9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d8:	2320      	movs	r3, #32
 800c9da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9de:	2330      	movs	r3, #48	; 0x30
 800c9e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9e4:	4623      	mov	r3, r4
 800c9e6:	469a      	mov	sl, r3
 800c9e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ec:	b10a      	cbz	r2, 800c9f2 <_vfiprintf_r+0xa2>
 800c9ee:	2a25      	cmp	r2, #37	; 0x25
 800c9f0:	d1f9      	bne.n	800c9e6 <_vfiprintf_r+0x96>
 800c9f2:	ebba 0b04 	subs.w	fp, sl, r4
 800c9f6:	d00b      	beq.n	800ca10 <_vfiprintf_r+0xc0>
 800c9f8:	465b      	mov	r3, fp
 800c9fa:	4622      	mov	r2, r4
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7ff ff94 	bl	800c92c <__sfputs_r>
 800ca04:	3001      	adds	r0, #1
 800ca06:	f000 80aa 	beq.w	800cb5e <_vfiprintf_r+0x20e>
 800ca0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca0c:	445a      	add	r2, fp
 800ca0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ca10:	f89a 3000 	ldrb.w	r3, [sl]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 80a2 	beq.w	800cb5e <_vfiprintf_r+0x20e>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca20:	f10a 0a01 	add.w	sl, sl, #1
 800ca24:	9304      	str	r3, [sp, #16]
 800ca26:	9307      	str	r3, [sp, #28]
 800ca28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca2c:	931a      	str	r3, [sp, #104]	; 0x68
 800ca2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca32:	4654      	mov	r4, sl
 800ca34:	2205      	movs	r2, #5
 800ca36:	4859      	ldr	r0, [pc, #356]	; (800cb9c <_vfiprintf_r+0x24c>)
 800ca38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca3c:	f7ff f8c0 	bl	800bbc0 <memchr>
 800ca40:	9a04      	ldr	r2, [sp, #16]
 800ca42:	b9d8      	cbnz	r0, 800ca7c <_vfiprintf_r+0x12c>
 800ca44:	06d1      	lsls	r1, r2, #27
 800ca46:	bf44      	itt	mi
 800ca48:	2320      	movmi	r3, #32
 800ca4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca4e:	0713      	lsls	r3, r2, #28
 800ca50:	bf44      	itt	mi
 800ca52:	232b      	movmi	r3, #43	; 0x2b
 800ca54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca58:	f89a 3000 	ldrb.w	r3, [sl]
 800ca5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca5e:	d015      	beq.n	800ca8c <_vfiprintf_r+0x13c>
 800ca60:	9a07      	ldr	r2, [sp, #28]
 800ca62:	4654      	mov	r4, sl
 800ca64:	2000      	movs	r0, #0
 800ca66:	f04f 0c0a 	mov.w	ip, #10
 800ca6a:	4621      	mov	r1, r4
 800ca6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca70:	3b30      	subs	r3, #48	; 0x30
 800ca72:	2b09      	cmp	r3, #9
 800ca74:	d94e      	bls.n	800cb14 <_vfiprintf_r+0x1c4>
 800ca76:	b1b0      	cbz	r0, 800caa6 <_vfiprintf_r+0x156>
 800ca78:	9207      	str	r2, [sp, #28]
 800ca7a:	e014      	b.n	800caa6 <_vfiprintf_r+0x156>
 800ca7c:	eba0 0308 	sub.w	r3, r0, r8
 800ca80:	46a2      	mov	sl, r4
 800ca82:	fa09 f303 	lsl.w	r3, r9, r3
 800ca86:	4313      	orrs	r3, r2
 800ca88:	9304      	str	r3, [sp, #16]
 800ca8a:	e7d2      	b.n	800ca32 <_vfiprintf_r+0xe2>
 800ca8c:	9b03      	ldr	r3, [sp, #12]
 800ca8e:	1d19      	adds	r1, r3, #4
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	9103      	str	r1, [sp, #12]
 800ca96:	bfbb      	ittet	lt
 800ca98:	425b      	neglt	r3, r3
 800ca9a:	f042 0202 	orrlt.w	r2, r2, #2
 800ca9e:	9307      	strge	r3, [sp, #28]
 800caa0:	9307      	strlt	r3, [sp, #28]
 800caa2:	bfb8      	it	lt
 800caa4:	9204      	strlt	r2, [sp, #16]
 800caa6:	7823      	ldrb	r3, [r4, #0]
 800caa8:	2b2e      	cmp	r3, #46	; 0x2e
 800caaa:	d10c      	bne.n	800cac6 <_vfiprintf_r+0x176>
 800caac:	7863      	ldrb	r3, [r4, #1]
 800caae:	2b2a      	cmp	r3, #42	; 0x2a
 800cab0:	d135      	bne.n	800cb1e <_vfiprintf_r+0x1ce>
 800cab2:	9b03      	ldr	r3, [sp, #12]
 800cab4:	3402      	adds	r4, #2
 800cab6:	1d1a      	adds	r2, r3, #4
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	9203      	str	r2, [sp, #12]
 800cabe:	bfb8      	it	lt
 800cac0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cac4:	9305      	str	r3, [sp, #20]
 800cac6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cbac <_vfiprintf_r+0x25c>
 800caca:	2203      	movs	r2, #3
 800cacc:	7821      	ldrb	r1, [r4, #0]
 800cace:	4650      	mov	r0, sl
 800cad0:	f7ff f876 	bl	800bbc0 <memchr>
 800cad4:	b140      	cbz	r0, 800cae8 <_vfiprintf_r+0x198>
 800cad6:	2340      	movs	r3, #64	; 0x40
 800cad8:	eba0 000a 	sub.w	r0, r0, sl
 800cadc:	3401      	adds	r4, #1
 800cade:	fa03 f000 	lsl.w	r0, r3, r0
 800cae2:	9b04      	ldr	r3, [sp, #16]
 800cae4:	4303      	orrs	r3, r0
 800cae6:	9304      	str	r3, [sp, #16]
 800cae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caec:	2206      	movs	r2, #6
 800caee:	482c      	ldr	r0, [pc, #176]	; (800cba0 <_vfiprintf_r+0x250>)
 800caf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800caf4:	f7ff f864 	bl	800bbc0 <memchr>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d03f      	beq.n	800cb7c <_vfiprintf_r+0x22c>
 800cafc:	4b29      	ldr	r3, [pc, #164]	; (800cba4 <_vfiprintf_r+0x254>)
 800cafe:	bb1b      	cbnz	r3, 800cb48 <_vfiprintf_r+0x1f8>
 800cb00:	9b03      	ldr	r3, [sp, #12]
 800cb02:	3307      	adds	r3, #7
 800cb04:	f023 0307 	bic.w	r3, r3, #7
 800cb08:	3308      	adds	r3, #8
 800cb0a:	9303      	str	r3, [sp, #12]
 800cb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb0e:	443b      	add	r3, r7
 800cb10:	9309      	str	r3, [sp, #36]	; 0x24
 800cb12:	e767      	b.n	800c9e4 <_vfiprintf_r+0x94>
 800cb14:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb18:	460c      	mov	r4, r1
 800cb1a:	2001      	movs	r0, #1
 800cb1c:	e7a5      	b.n	800ca6a <_vfiprintf_r+0x11a>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	3401      	adds	r4, #1
 800cb22:	f04f 0c0a 	mov.w	ip, #10
 800cb26:	4619      	mov	r1, r3
 800cb28:	9305      	str	r3, [sp, #20]
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb30:	3a30      	subs	r2, #48	; 0x30
 800cb32:	2a09      	cmp	r2, #9
 800cb34:	d903      	bls.n	800cb3e <_vfiprintf_r+0x1ee>
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d0c5      	beq.n	800cac6 <_vfiprintf_r+0x176>
 800cb3a:	9105      	str	r1, [sp, #20]
 800cb3c:	e7c3      	b.n	800cac6 <_vfiprintf_r+0x176>
 800cb3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb42:	4604      	mov	r4, r0
 800cb44:	2301      	movs	r3, #1
 800cb46:	e7f0      	b.n	800cb2a <_vfiprintf_r+0x1da>
 800cb48:	ab03      	add	r3, sp, #12
 800cb4a:	462a      	mov	r2, r5
 800cb4c:	a904      	add	r1, sp, #16
 800cb4e:	4630      	mov	r0, r6
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	4b15      	ldr	r3, [pc, #84]	; (800cba8 <_vfiprintf_r+0x258>)
 800cb54:	f7fd fdb0 	bl	800a6b8 <_printf_float>
 800cb58:	4607      	mov	r7, r0
 800cb5a:	1c78      	adds	r0, r7, #1
 800cb5c:	d1d6      	bne.n	800cb0c <_vfiprintf_r+0x1bc>
 800cb5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb60:	07d9      	lsls	r1, r3, #31
 800cb62:	d405      	bmi.n	800cb70 <_vfiprintf_r+0x220>
 800cb64:	89ab      	ldrh	r3, [r5, #12]
 800cb66:	059a      	lsls	r2, r3, #22
 800cb68:	d402      	bmi.n	800cb70 <_vfiprintf_r+0x220>
 800cb6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb6c:	f000 faad 	bl	800d0ca <__retarget_lock_release_recursive>
 800cb70:	89ab      	ldrh	r3, [r5, #12]
 800cb72:	065b      	lsls	r3, r3, #25
 800cb74:	f53f af12 	bmi.w	800c99c <_vfiprintf_r+0x4c>
 800cb78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb7a:	e711      	b.n	800c9a0 <_vfiprintf_r+0x50>
 800cb7c:	ab03      	add	r3, sp, #12
 800cb7e:	462a      	mov	r2, r5
 800cb80:	a904      	add	r1, sp, #16
 800cb82:	4630      	mov	r0, r6
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	4b08      	ldr	r3, [pc, #32]	; (800cba8 <_vfiprintf_r+0x258>)
 800cb88:	f7fe f83c 	bl	800ac04 <_printf_i>
 800cb8c:	e7e4      	b.n	800cb58 <_vfiprintf_r+0x208>
 800cb8e:	bf00      	nop
 800cb90:	0800dc34 	.word	0x0800dc34
 800cb94:	0800dc54 	.word	0x0800dc54
 800cb98:	0800dc14 	.word	0x0800dc14
 800cb9c:	0800dabc 	.word	0x0800dabc
 800cba0:	0800dac6 	.word	0x0800dac6
 800cba4:	0800a6b9 	.word	0x0800a6b9
 800cba8:	0800c92d 	.word	0x0800c92d
 800cbac:	0800dac2 	.word	0x0800dac2

0800cbb0 <__swbuf_r>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	460e      	mov	r6, r1
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	b118      	cbz	r0, 800cbc2 <__swbuf_r+0x12>
 800cbba:	6983      	ldr	r3, [r0, #24]
 800cbbc:	b90b      	cbnz	r3, 800cbc2 <__swbuf_r+0x12>
 800cbbe:	f000 f9e5 	bl	800cf8c <__sinit>
 800cbc2:	4b21      	ldr	r3, [pc, #132]	; (800cc48 <__swbuf_r+0x98>)
 800cbc4:	429c      	cmp	r4, r3
 800cbc6:	d12b      	bne.n	800cc20 <__swbuf_r+0x70>
 800cbc8:	686c      	ldr	r4, [r5, #4]
 800cbca:	69a3      	ldr	r3, [r4, #24]
 800cbcc:	60a3      	str	r3, [r4, #8]
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	071a      	lsls	r2, r3, #28
 800cbd2:	d52f      	bpl.n	800cc34 <__swbuf_r+0x84>
 800cbd4:	6923      	ldr	r3, [r4, #16]
 800cbd6:	b36b      	cbz	r3, 800cc34 <__swbuf_r+0x84>
 800cbd8:	6923      	ldr	r3, [r4, #16]
 800cbda:	b2f6      	uxtb	r6, r6
 800cbdc:	6820      	ldr	r0, [r4, #0]
 800cbde:	4637      	mov	r7, r6
 800cbe0:	1ac0      	subs	r0, r0, r3
 800cbe2:	6963      	ldr	r3, [r4, #20]
 800cbe4:	4283      	cmp	r3, r0
 800cbe6:	dc04      	bgt.n	800cbf2 <__swbuf_r+0x42>
 800cbe8:	4621      	mov	r1, r4
 800cbea:	4628      	mov	r0, r5
 800cbec:	f000 f93a 	bl	800ce64 <_fflush_r>
 800cbf0:	bb30      	cbnz	r0, 800cc40 <__swbuf_r+0x90>
 800cbf2:	68a3      	ldr	r3, [r4, #8]
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	60a3      	str	r3, [r4, #8]
 800cbfa:	6823      	ldr	r3, [r4, #0]
 800cbfc:	1c5a      	adds	r2, r3, #1
 800cbfe:	6022      	str	r2, [r4, #0]
 800cc00:	701e      	strb	r6, [r3, #0]
 800cc02:	6963      	ldr	r3, [r4, #20]
 800cc04:	4283      	cmp	r3, r0
 800cc06:	d004      	beq.n	800cc12 <__swbuf_r+0x62>
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	07db      	lsls	r3, r3, #31
 800cc0c:	d506      	bpl.n	800cc1c <__swbuf_r+0x6c>
 800cc0e:	2e0a      	cmp	r6, #10
 800cc10:	d104      	bne.n	800cc1c <__swbuf_r+0x6c>
 800cc12:	4621      	mov	r1, r4
 800cc14:	4628      	mov	r0, r5
 800cc16:	f000 f925 	bl	800ce64 <_fflush_r>
 800cc1a:	b988      	cbnz	r0, 800cc40 <__swbuf_r+0x90>
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc20:	4b0a      	ldr	r3, [pc, #40]	; (800cc4c <__swbuf_r+0x9c>)
 800cc22:	429c      	cmp	r4, r3
 800cc24:	d101      	bne.n	800cc2a <__swbuf_r+0x7a>
 800cc26:	68ac      	ldr	r4, [r5, #8]
 800cc28:	e7cf      	b.n	800cbca <__swbuf_r+0x1a>
 800cc2a:	4b09      	ldr	r3, [pc, #36]	; (800cc50 <__swbuf_r+0xa0>)
 800cc2c:	429c      	cmp	r4, r3
 800cc2e:	bf08      	it	eq
 800cc30:	68ec      	ldreq	r4, [r5, #12]
 800cc32:	e7ca      	b.n	800cbca <__swbuf_r+0x1a>
 800cc34:	4621      	mov	r1, r4
 800cc36:	4628      	mov	r0, r5
 800cc38:	f000 f81a 	bl	800cc70 <__swsetup_r>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d0cb      	beq.n	800cbd8 <__swbuf_r+0x28>
 800cc40:	f04f 37ff 	mov.w	r7, #4294967295
 800cc44:	e7ea      	b.n	800cc1c <__swbuf_r+0x6c>
 800cc46:	bf00      	nop
 800cc48:	0800dc34 	.word	0x0800dc34
 800cc4c:	0800dc54 	.word	0x0800dc54
 800cc50:	0800dc14 	.word	0x0800dc14

0800cc54 <__ascii_wctomb>:
 800cc54:	b149      	cbz	r1, 800cc6a <__ascii_wctomb+0x16>
 800cc56:	2aff      	cmp	r2, #255	; 0xff
 800cc58:	bf8d      	iteet	hi
 800cc5a:	238a      	movhi	r3, #138	; 0x8a
 800cc5c:	2001      	movls	r0, #1
 800cc5e:	700a      	strbls	r2, [r1, #0]
 800cc60:	6003      	strhi	r3, [r0, #0]
 800cc62:	bf88      	it	hi
 800cc64:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc68:	4770      	bx	lr
 800cc6a:	4608      	mov	r0, r1
 800cc6c:	4770      	bx	lr
	...

0800cc70 <__swsetup_r>:
 800cc70:	4b32      	ldr	r3, [pc, #200]	; (800cd3c <__swsetup_r+0xcc>)
 800cc72:	b570      	push	{r4, r5, r6, lr}
 800cc74:	681d      	ldr	r5, [r3, #0]
 800cc76:	4606      	mov	r6, r0
 800cc78:	460c      	mov	r4, r1
 800cc7a:	b125      	cbz	r5, 800cc86 <__swsetup_r+0x16>
 800cc7c:	69ab      	ldr	r3, [r5, #24]
 800cc7e:	b913      	cbnz	r3, 800cc86 <__swsetup_r+0x16>
 800cc80:	4628      	mov	r0, r5
 800cc82:	f000 f983 	bl	800cf8c <__sinit>
 800cc86:	4b2e      	ldr	r3, [pc, #184]	; (800cd40 <__swsetup_r+0xd0>)
 800cc88:	429c      	cmp	r4, r3
 800cc8a:	d10f      	bne.n	800ccac <__swsetup_r+0x3c>
 800cc8c:	686c      	ldr	r4, [r5, #4]
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc94:	0719      	lsls	r1, r3, #28
 800cc96:	d42c      	bmi.n	800ccf2 <__swsetup_r+0x82>
 800cc98:	06dd      	lsls	r5, r3, #27
 800cc9a:	d411      	bmi.n	800ccc0 <__swsetup_r+0x50>
 800cc9c:	2309      	movs	r3, #9
 800cc9e:	6033      	str	r3, [r6, #0]
 800cca0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cca4:	f04f 30ff 	mov.w	r0, #4294967295
 800cca8:	81a3      	strh	r3, [r4, #12]
 800ccaa:	e03e      	b.n	800cd2a <__swsetup_r+0xba>
 800ccac:	4b25      	ldr	r3, [pc, #148]	; (800cd44 <__swsetup_r+0xd4>)
 800ccae:	429c      	cmp	r4, r3
 800ccb0:	d101      	bne.n	800ccb6 <__swsetup_r+0x46>
 800ccb2:	68ac      	ldr	r4, [r5, #8]
 800ccb4:	e7eb      	b.n	800cc8e <__swsetup_r+0x1e>
 800ccb6:	4b24      	ldr	r3, [pc, #144]	; (800cd48 <__swsetup_r+0xd8>)
 800ccb8:	429c      	cmp	r4, r3
 800ccba:	bf08      	it	eq
 800ccbc:	68ec      	ldreq	r4, [r5, #12]
 800ccbe:	e7e6      	b.n	800cc8e <__swsetup_r+0x1e>
 800ccc0:	0758      	lsls	r0, r3, #29
 800ccc2:	d512      	bpl.n	800ccea <__swsetup_r+0x7a>
 800ccc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccc6:	b141      	cbz	r1, 800ccda <__swsetup_r+0x6a>
 800ccc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cccc:	4299      	cmp	r1, r3
 800ccce:	d002      	beq.n	800ccd6 <__swsetup_r+0x66>
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f7ff fb31 	bl	800c338 <_free_r>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	6363      	str	r3, [r4, #52]	; 0x34
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cce0:	81a3      	strh	r3, [r4, #12]
 800cce2:	2300      	movs	r3, #0
 800cce4:	6063      	str	r3, [r4, #4]
 800cce6:	6923      	ldr	r3, [r4, #16]
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	f043 0308 	orr.w	r3, r3, #8
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	b94b      	cbnz	r3, 800cd0a <__swsetup_r+0x9a>
 800ccf6:	89a3      	ldrh	r3, [r4, #12]
 800ccf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ccfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd00:	d003      	beq.n	800cd0a <__swsetup_r+0x9a>
 800cd02:	4621      	mov	r1, r4
 800cd04:	4630      	mov	r0, r6
 800cd06:	f000 fa07 	bl	800d118 <__smakebuf_r>
 800cd0a:	89a0      	ldrh	r0, [r4, #12]
 800cd0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd10:	f010 0301 	ands.w	r3, r0, #1
 800cd14:	d00a      	beq.n	800cd2c <__swsetup_r+0xbc>
 800cd16:	2300      	movs	r3, #0
 800cd18:	60a3      	str	r3, [r4, #8]
 800cd1a:	6963      	ldr	r3, [r4, #20]
 800cd1c:	425b      	negs	r3, r3
 800cd1e:	61a3      	str	r3, [r4, #24]
 800cd20:	6923      	ldr	r3, [r4, #16]
 800cd22:	b943      	cbnz	r3, 800cd36 <__swsetup_r+0xc6>
 800cd24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd28:	d1ba      	bne.n	800cca0 <__swsetup_r+0x30>
 800cd2a:	bd70      	pop	{r4, r5, r6, pc}
 800cd2c:	0781      	lsls	r1, r0, #30
 800cd2e:	bf58      	it	pl
 800cd30:	6963      	ldrpl	r3, [r4, #20]
 800cd32:	60a3      	str	r3, [r4, #8]
 800cd34:	e7f4      	b.n	800cd20 <__swsetup_r+0xb0>
 800cd36:	2000      	movs	r0, #0
 800cd38:	e7f7      	b.n	800cd2a <__swsetup_r+0xba>
 800cd3a:	bf00      	nop
 800cd3c:	20000020 	.word	0x20000020
 800cd40:	0800dc34 	.word	0x0800dc34
 800cd44:	0800dc54 	.word	0x0800dc54
 800cd48:	0800dc14 	.word	0x0800dc14

0800cd4c <abort>:
 800cd4c:	2006      	movs	r0, #6
 800cd4e:	b508      	push	{r3, lr}
 800cd50:	f000 fa52 	bl	800d1f8 <raise>
 800cd54:	2001      	movs	r0, #1
 800cd56:	f7f4 feac 	bl	8001ab2 <_exit>
	...

0800cd5c <__sflush_r>:
 800cd5c:	898a      	ldrh	r2, [r1, #12]
 800cd5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd62:	4605      	mov	r5, r0
 800cd64:	0710      	lsls	r0, r2, #28
 800cd66:	460c      	mov	r4, r1
 800cd68:	d458      	bmi.n	800ce1c <__sflush_r+0xc0>
 800cd6a:	684b      	ldr	r3, [r1, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	dc05      	bgt.n	800cd7c <__sflush_r+0x20>
 800cd70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	dc02      	bgt.n	800cd7c <__sflush_r+0x20>
 800cd76:	2000      	movs	r0, #0
 800cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd7e:	2e00      	cmp	r6, #0
 800cd80:	d0f9      	beq.n	800cd76 <__sflush_r+0x1a>
 800cd82:	2300      	movs	r3, #0
 800cd84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd88:	682f      	ldr	r7, [r5, #0]
 800cd8a:	602b      	str	r3, [r5, #0]
 800cd8c:	d032      	beq.n	800cdf4 <__sflush_r+0x98>
 800cd8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	075a      	lsls	r2, r3, #29
 800cd94:	d505      	bpl.n	800cda2 <__sflush_r+0x46>
 800cd96:	6863      	ldr	r3, [r4, #4]
 800cd98:	1ac0      	subs	r0, r0, r3
 800cd9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd9c:	b10b      	cbz	r3, 800cda2 <__sflush_r+0x46>
 800cd9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cda0:	1ac0      	subs	r0, r0, r3
 800cda2:	2300      	movs	r3, #0
 800cda4:	4602      	mov	r2, r0
 800cda6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cda8:	4628      	mov	r0, r5
 800cdaa:	6a21      	ldr	r1, [r4, #32]
 800cdac:	47b0      	blx	r6
 800cdae:	1c43      	adds	r3, r0, #1
 800cdb0:	89a3      	ldrh	r3, [r4, #12]
 800cdb2:	d106      	bne.n	800cdc2 <__sflush_r+0x66>
 800cdb4:	6829      	ldr	r1, [r5, #0]
 800cdb6:	291d      	cmp	r1, #29
 800cdb8:	d82c      	bhi.n	800ce14 <__sflush_r+0xb8>
 800cdba:	4a29      	ldr	r2, [pc, #164]	; (800ce60 <__sflush_r+0x104>)
 800cdbc:	40ca      	lsrs	r2, r1
 800cdbe:	07d6      	lsls	r6, r2, #31
 800cdc0:	d528      	bpl.n	800ce14 <__sflush_r+0xb8>
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	04d9      	lsls	r1, r3, #19
 800cdc6:	6062      	str	r2, [r4, #4]
 800cdc8:	6922      	ldr	r2, [r4, #16]
 800cdca:	6022      	str	r2, [r4, #0]
 800cdcc:	d504      	bpl.n	800cdd8 <__sflush_r+0x7c>
 800cdce:	1c42      	adds	r2, r0, #1
 800cdd0:	d101      	bne.n	800cdd6 <__sflush_r+0x7a>
 800cdd2:	682b      	ldr	r3, [r5, #0]
 800cdd4:	b903      	cbnz	r3, 800cdd8 <__sflush_r+0x7c>
 800cdd6:	6560      	str	r0, [r4, #84]	; 0x54
 800cdd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdda:	602f      	str	r7, [r5, #0]
 800cddc:	2900      	cmp	r1, #0
 800cdde:	d0ca      	beq.n	800cd76 <__sflush_r+0x1a>
 800cde0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cde4:	4299      	cmp	r1, r3
 800cde6:	d002      	beq.n	800cdee <__sflush_r+0x92>
 800cde8:	4628      	mov	r0, r5
 800cdea:	f7ff faa5 	bl	800c338 <_free_r>
 800cdee:	2000      	movs	r0, #0
 800cdf0:	6360      	str	r0, [r4, #52]	; 0x34
 800cdf2:	e7c1      	b.n	800cd78 <__sflush_r+0x1c>
 800cdf4:	6a21      	ldr	r1, [r4, #32]
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	47b0      	blx	r6
 800cdfc:	1c41      	adds	r1, r0, #1
 800cdfe:	d1c7      	bne.n	800cd90 <__sflush_r+0x34>
 800ce00:	682b      	ldr	r3, [r5, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d0c4      	beq.n	800cd90 <__sflush_r+0x34>
 800ce06:	2b1d      	cmp	r3, #29
 800ce08:	d001      	beq.n	800ce0e <__sflush_r+0xb2>
 800ce0a:	2b16      	cmp	r3, #22
 800ce0c:	d101      	bne.n	800ce12 <__sflush_r+0xb6>
 800ce0e:	602f      	str	r7, [r5, #0]
 800ce10:	e7b1      	b.n	800cd76 <__sflush_r+0x1a>
 800ce12:	89a3      	ldrh	r3, [r4, #12]
 800ce14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce18:	81a3      	strh	r3, [r4, #12]
 800ce1a:	e7ad      	b.n	800cd78 <__sflush_r+0x1c>
 800ce1c:	690f      	ldr	r7, [r1, #16]
 800ce1e:	2f00      	cmp	r7, #0
 800ce20:	d0a9      	beq.n	800cd76 <__sflush_r+0x1a>
 800ce22:	0793      	lsls	r3, r2, #30
 800ce24:	680e      	ldr	r6, [r1, #0]
 800ce26:	600f      	str	r7, [r1, #0]
 800ce28:	bf0c      	ite	eq
 800ce2a:	694b      	ldreq	r3, [r1, #20]
 800ce2c:	2300      	movne	r3, #0
 800ce2e:	eba6 0807 	sub.w	r8, r6, r7
 800ce32:	608b      	str	r3, [r1, #8]
 800ce34:	f1b8 0f00 	cmp.w	r8, #0
 800ce38:	dd9d      	ble.n	800cd76 <__sflush_r+0x1a>
 800ce3a:	4643      	mov	r3, r8
 800ce3c:	463a      	mov	r2, r7
 800ce3e:	6a21      	ldr	r1, [r4, #32]
 800ce40:	4628      	mov	r0, r5
 800ce42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce44:	47b0      	blx	r6
 800ce46:	2800      	cmp	r0, #0
 800ce48:	dc06      	bgt.n	800ce58 <__sflush_r+0xfc>
 800ce4a:	89a3      	ldrh	r3, [r4, #12]
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce54:	81a3      	strh	r3, [r4, #12]
 800ce56:	e78f      	b.n	800cd78 <__sflush_r+0x1c>
 800ce58:	4407      	add	r7, r0
 800ce5a:	eba8 0800 	sub.w	r8, r8, r0
 800ce5e:	e7e9      	b.n	800ce34 <__sflush_r+0xd8>
 800ce60:	20400001 	.word	0x20400001

0800ce64 <_fflush_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	690b      	ldr	r3, [r1, #16]
 800ce68:	4605      	mov	r5, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	b913      	cbnz	r3, 800ce74 <_fflush_r+0x10>
 800ce6e:	2500      	movs	r5, #0
 800ce70:	4628      	mov	r0, r5
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	b118      	cbz	r0, 800ce7e <_fflush_r+0x1a>
 800ce76:	6983      	ldr	r3, [r0, #24]
 800ce78:	b90b      	cbnz	r3, 800ce7e <_fflush_r+0x1a>
 800ce7a:	f000 f887 	bl	800cf8c <__sinit>
 800ce7e:	4b14      	ldr	r3, [pc, #80]	; (800ced0 <_fflush_r+0x6c>)
 800ce80:	429c      	cmp	r4, r3
 800ce82:	d11b      	bne.n	800cebc <_fflush_r+0x58>
 800ce84:	686c      	ldr	r4, [r5, #4]
 800ce86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0ef      	beq.n	800ce6e <_fflush_r+0xa>
 800ce8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce90:	07d0      	lsls	r0, r2, #31
 800ce92:	d404      	bmi.n	800ce9e <_fflush_r+0x3a>
 800ce94:	0599      	lsls	r1, r3, #22
 800ce96:	d402      	bmi.n	800ce9e <_fflush_r+0x3a>
 800ce98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce9a:	f000 f915 	bl	800d0c8 <__retarget_lock_acquire_recursive>
 800ce9e:	4628      	mov	r0, r5
 800cea0:	4621      	mov	r1, r4
 800cea2:	f7ff ff5b 	bl	800cd5c <__sflush_r>
 800cea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cea8:	4605      	mov	r5, r0
 800ceaa:	07da      	lsls	r2, r3, #31
 800ceac:	d4e0      	bmi.n	800ce70 <_fflush_r+0xc>
 800ceae:	89a3      	ldrh	r3, [r4, #12]
 800ceb0:	059b      	lsls	r3, r3, #22
 800ceb2:	d4dd      	bmi.n	800ce70 <_fflush_r+0xc>
 800ceb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceb6:	f000 f908 	bl	800d0ca <__retarget_lock_release_recursive>
 800ceba:	e7d9      	b.n	800ce70 <_fflush_r+0xc>
 800cebc:	4b05      	ldr	r3, [pc, #20]	; (800ced4 <_fflush_r+0x70>)
 800cebe:	429c      	cmp	r4, r3
 800cec0:	d101      	bne.n	800cec6 <_fflush_r+0x62>
 800cec2:	68ac      	ldr	r4, [r5, #8]
 800cec4:	e7df      	b.n	800ce86 <_fflush_r+0x22>
 800cec6:	4b04      	ldr	r3, [pc, #16]	; (800ced8 <_fflush_r+0x74>)
 800cec8:	429c      	cmp	r4, r3
 800ceca:	bf08      	it	eq
 800cecc:	68ec      	ldreq	r4, [r5, #12]
 800cece:	e7da      	b.n	800ce86 <_fflush_r+0x22>
 800ced0:	0800dc34 	.word	0x0800dc34
 800ced4:	0800dc54 	.word	0x0800dc54
 800ced8:	0800dc14 	.word	0x0800dc14

0800cedc <std>:
 800cedc:	2300      	movs	r3, #0
 800cede:	b510      	push	{r4, lr}
 800cee0:	4604      	mov	r4, r0
 800cee2:	6083      	str	r3, [r0, #8]
 800cee4:	8181      	strh	r1, [r0, #12]
 800cee6:	4619      	mov	r1, r3
 800cee8:	6643      	str	r3, [r0, #100]	; 0x64
 800ceea:	81c2      	strh	r2, [r0, #14]
 800ceec:	2208      	movs	r2, #8
 800ceee:	6183      	str	r3, [r0, #24]
 800cef0:	e9c0 3300 	strd	r3, r3, [r0]
 800cef4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cef8:	305c      	adds	r0, #92	; 0x5c
 800cefa:	f7fd fb35 	bl	800a568 <memset>
 800cefe:	4b05      	ldr	r3, [pc, #20]	; (800cf14 <std+0x38>)
 800cf00:	6224      	str	r4, [r4, #32]
 800cf02:	6263      	str	r3, [r4, #36]	; 0x24
 800cf04:	4b04      	ldr	r3, [pc, #16]	; (800cf18 <std+0x3c>)
 800cf06:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf08:	4b04      	ldr	r3, [pc, #16]	; (800cf1c <std+0x40>)
 800cf0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf0c:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <std+0x44>)
 800cf0e:	6323      	str	r3, [r4, #48]	; 0x30
 800cf10:	bd10      	pop	{r4, pc}
 800cf12:	bf00      	nop
 800cf14:	0800d231 	.word	0x0800d231
 800cf18:	0800d253 	.word	0x0800d253
 800cf1c:	0800d28b 	.word	0x0800d28b
 800cf20:	0800d2af 	.word	0x0800d2af

0800cf24 <_cleanup_r>:
 800cf24:	4901      	ldr	r1, [pc, #4]	; (800cf2c <_cleanup_r+0x8>)
 800cf26:	f000 b8af 	b.w	800d088 <_fwalk_reent>
 800cf2a:	bf00      	nop
 800cf2c:	0800ce65 	.word	0x0800ce65

0800cf30 <__sfmoreglue>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	2268      	movs	r2, #104	; 0x68
 800cf34:	1e4d      	subs	r5, r1, #1
 800cf36:	460e      	mov	r6, r1
 800cf38:	4355      	muls	r5, r2
 800cf3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf3e:	f7ff fa67 	bl	800c410 <_malloc_r>
 800cf42:	4604      	mov	r4, r0
 800cf44:	b140      	cbz	r0, 800cf58 <__sfmoreglue+0x28>
 800cf46:	2100      	movs	r1, #0
 800cf48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf4c:	e9c0 1600 	strd	r1, r6, [r0]
 800cf50:	300c      	adds	r0, #12
 800cf52:	60a0      	str	r0, [r4, #8]
 800cf54:	f7fd fb08 	bl	800a568 <memset>
 800cf58:	4620      	mov	r0, r4
 800cf5a:	bd70      	pop	{r4, r5, r6, pc}

0800cf5c <__sfp_lock_acquire>:
 800cf5c:	4801      	ldr	r0, [pc, #4]	; (800cf64 <__sfp_lock_acquire+0x8>)
 800cf5e:	f000 b8b3 	b.w	800d0c8 <__retarget_lock_acquire_recursive>
 800cf62:	bf00      	nop
 800cf64:	20000355 	.word	0x20000355

0800cf68 <__sfp_lock_release>:
 800cf68:	4801      	ldr	r0, [pc, #4]	; (800cf70 <__sfp_lock_release+0x8>)
 800cf6a:	f000 b8ae 	b.w	800d0ca <__retarget_lock_release_recursive>
 800cf6e:	bf00      	nop
 800cf70:	20000355 	.word	0x20000355

0800cf74 <__sinit_lock_acquire>:
 800cf74:	4801      	ldr	r0, [pc, #4]	; (800cf7c <__sinit_lock_acquire+0x8>)
 800cf76:	f000 b8a7 	b.w	800d0c8 <__retarget_lock_acquire_recursive>
 800cf7a:	bf00      	nop
 800cf7c:	20000356 	.word	0x20000356

0800cf80 <__sinit_lock_release>:
 800cf80:	4801      	ldr	r0, [pc, #4]	; (800cf88 <__sinit_lock_release+0x8>)
 800cf82:	f000 b8a2 	b.w	800d0ca <__retarget_lock_release_recursive>
 800cf86:	bf00      	nop
 800cf88:	20000356 	.word	0x20000356

0800cf8c <__sinit>:
 800cf8c:	b510      	push	{r4, lr}
 800cf8e:	4604      	mov	r4, r0
 800cf90:	f7ff fff0 	bl	800cf74 <__sinit_lock_acquire>
 800cf94:	69a3      	ldr	r3, [r4, #24]
 800cf96:	b11b      	cbz	r3, 800cfa0 <__sinit+0x14>
 800cf98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf9c:	f7ff bff0 	b.w	800cf80 <__sinit_lock_release>
 800cfa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cfa4:	6523      	str	r3, [r4, #80]	; 0x50
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	4b12      	ldr	r3, [pc, #72]	; (800cff4 <__sinit+0x68>)
 800cfaa:	4a13      	ldr	r2, [pc, #76]	; (800cff8 <__sinit+0x6c>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	62a2      	str	r2, [r4, #40]	; 0x28
 800cfb0:	42a3      	cmp	r3, r4
 800cfb2:	bf04      	itt	eq
 800cfb4:	2301      	moveq	r3, #1
 800cfb6:	61a3      	streq	r3, [r4, #24]
 800cfb8:	f000 f820 	bl	800cffc <__sfp>
 800cfbc:	6060      	str	r0, [r4, #4]
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f000 f81c 	bl	800cffc <__sfp>
 800cfc4:	60a0      	str	r0, [r4, #8]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 f818 	bl	800cffc <__sfp>
 800cfcc:	2200      	movs	r2, #0
 800cfce:	2104      	movs	r1, #4
 800cfd0:	60e0      	str	r0, [r4, #12]
 800cfd2:	6860      	ldr	r0, [r4, #4]
 800cfd4:	f7ff ff82 	bl	800cedc <std>
 800cfd8:	2201      	movs	r2, #1
 800cfda:	2109      	movs	r1, #9
 800cfdc:	68a0      	ldr	r0, [r4, #8]
 800cfde:	f7ff ff7d 	bl	800cedc <std>
 800cfe2:	2202      	movs	r2, #2
 800cfe4:	2112      	movs	r1, #18
 800cfe6:	68e0      	ldr	r0, [r4, #12]
 800cfe8:	f7ff ff78 	bl	800cedc <std>
 800cfec:	2301      	movs	r3, #1
 800cfee:	61a3      	str	r3, [r4, #24]
 800cff0:	e7d2      	b.n	800cf98 <__sinit+0xc>
 800cff2:	bf00      	nop
 800cff4:	0800d89c 	.word	0x0800d89c
 800cff8:	0800cf25 	.word	0x0800cf25

0800cffc <__sfp>:
 800cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffe:	4607      	mov	r7, r0
 800d000:	f7ff ffac 	bl	800cf5c <__sfp_lock_acquire>
 800d004:	4b1e      	ldr	r3, [pc, #120]	; (800d080 <__sfp+0x84>)
 800d006:	681e      	ldr	r6, [r3, #0]
 800d008:	69b3      	ldr	r3, [r6, #24]
 800d00a:	b913      	cbnz	r3, 800d012 <__sfp+0x16>
 800d00c:	4630      	mov	r0, r6
 800d00e:	f7ff ffbd 	bl	800cf8c <__sinit>
 800d012:	3648      	adds	r6, #72	; 0x48
 800d014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d018:	3b01      	subs	r3, #1
 800d01a:	d503      	bpl.n	800d024 <__sfp+0x28>
 800d01c:	6833      	ldr	r3, [r6, #0]
 800d01e:	b30b      	cbz	r3, 800d064 <__sfp+0x68>
 800d020:	6836      	ldr	r6, [r6, #0]
 800d022:	e7f7      	b.n	800d014 <__sfp+0x18>
 800d024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d028:	b9d5      	cbnz	r5, 800d060 <__sfp+0x64>
 800d02a:	4b16      	ldr	r3, [pc, #88]	; (800d084 <__sfp+0x88>)
 800d02c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d030:	6665      	str	r5, [r4, #100]	; 0x64
 800d032:	60e3      	str	r3, [r4, #12]
 800d034:	f000 f847 	bl	800d0c6 <__retarget_lock_init_recursive>
 800d038:	f7ff ff96 	bl	800cf68 <__sfp_lock_release>
 800d03c:	2208      	movs	r2, #8
 800d03e:	4629      	mov	r1, r5
 800d040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d044:	6025      	str	r5, [r4, #0]
 800d046:	61a5      	str	r5, [r4, #24]
 800d048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d04c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d050:	f7fd fa8a 	bl	800a568 <memset>
 800d054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d05c:	4620      	mov	r0, r4
 800d05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d060:	3468      	adds	r4, #104	; 0x68
 800d062:	e7d9      	b.n	800d018 <__sfp+0x1c>
 800d064:	2104      	movs	r1, #4
 800d066:	4638      	mov	r0, r7
 800d068:	f7ff ff62 	bl	800cf30 <__sfmoreglue>
 800d06c:	4604      	mov	r4, r0
 800d06e:	6030      	str	r0, [r6, #0]
 800d070:	2800      	cmp	r0, #0
 800d072:	d1d5      	bne.n	800d020 <__sfp+0x24>
 800d074:	f7ff ff78 	bl	800cf68 <__sfp_lock_release>
 800d078:	230c      	movs	r3, #12
 800d07a:	603b      	str	r3, [r7, #0]
 800d07c:	e7ee      	b.n	800d05c <__sfp+0x60>
 800d07e:	bf00      	nop
 800d080:	0800d89c 	.word	0x0800d89c
 800d084:	ffff0001 	.word	0xffff0001

0800d088 <_fwalk_reent>:
 800d088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d08c:	4606      	mov	r6, r0
 800d08e:	4688      	mov	r8, r1
 800d090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d094:	2700      	movs	r7, #0
 800d096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d09a:	f1b9 0901 	subs.w	r9, r9, #1
 800d09e:	d505      	bpl.n	800d0ac <_fwalk_reent+0x24>
 800d0a0:	6824      	ldr	r4, [r4, #0]
 800d0a2:	2c00      	cmp	r4, #0
 800d0a4:	d1f7      	bne.n	800d096 <_fwalk_reent+0xe>
 800d0a6:	4638      	mov	r0, r7
 800d0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ac:	89ab      	ldrh	r3, [r5, #12]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d907      	bls.n	800d0c2 <_fwalk_reent+0x3a>
 800d0b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	d003      	beq.n	800d0c2 <_fwalk_reent+0x3a>
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	4630      	mov	r0, r6
 800d0be:	47c0      	blx	r8
 800d0c0:	4307      	orrs	r7, r0
 800d0c2:	3568      	adds	r5, #104	; 0x68
 800d0c4:	e7e9      	b.n	800d09a <_fwalk_reent+0x12>

0800d0c6 <__retarget_lock_init_recursive>:
 800d0c6:	4770      	bx	lr

0800d0c8 <__retarget_lock_acquire_recursive>:
 800d0c8:	4770      	bx	lr

0800d0ca <__retarget_lock_release_recursive>:
 800d0ca:	4770      	bx	lr

0800d0cc <__swhatbuf_r>:
 800d0cc:	b570      	push	{r4, r5, r6, lr}
 800d0ce:	460e      	mov	r6, r1
 800d0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d4:	b096      	sub	sp, #88	; 0x58
 800d0d6:	4614      	mov	r4, r2
 800d0d8:	2900      	cmp	r1, #0
 800d0da:	461d      	mov	r5, r3
 800d0dc:	da08      	bge.n	800d0f0 <__swhatbuf_r+0x24>
 800d0de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	602a      	str	r2, [r5, #0]
 800d0e6:	061a      	lsls	r2, r3, #24
 800d0e8:	d410      	bmi.n	800d10c <__swhatbuf_r+0x40>
 800d0ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0ee:	e00e      	b.n	800d10e <__swhatbuf_r+0x42>
 800d0f0:	466a      	mov	r2, sp
 800d0f2:	f000 f903 	bl	800d2fc <_fstat_r>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	dbf1      	blt.n	800d0de <__swhatbuf_r+0x12>
 800d0fa:	9a01      	ldr	r2, [sp, #4]
 800d0fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d100:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d104:	425a      	negs	r2, r3
 800d106:	415a      	adcs	r2, r3
 800d108:	602a      	str	r2, [r5, #0]
 800d10a:	e7ee      	b.n	800d0ea <__swhatbuf_r+0x1e>
 800d10c:	2340      	movs	r3, #64	; 0x40
 800d10e:	2000      	movs	r0, #0
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	b016      	add	sp, #88	; 0x58
 800d114:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d118 <__smakebuf_r>:
 800d118:	898b      	ldrh	r3, [r1, #12]
 800d11a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d11c:	079d      	lsls	r5, r3, #30
 800d11e:	4606      	mov	r6, r0
 800d120:	460c      	mov	r4, r1
 800d122:	d507      	bpl.n	800d134 <__smakebuf_r+0x1c>
 800d124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d128:	6023      	str	r3, [r4, #0]
 800d12a:	6123      	str	r3, [r4, #16]
 800d12c:	2301      	movs	r3, #1
 800d12e:	6163      	str	r3, [r4, #20]
 800d130:	b002      	add	sp, #8
 800d132:	bd70      	pop	{r4, r5, r6, pc}
 800d134:	ab01      	add	r3, sp, #4
 800d136:	466a      	mov	r2, sp
 800d138:	f7ff ffc8 	bl	800d0cc <__swhatbuf_r>
 800d13c:	9900      	ldr	r1, [sp, #0]
 800d13e:	4605      	mov	r5, r0
 800d140:	4630      	mov	r0, r6
 800d142:	f7ff f965 	bl	800c410 <_malloc_r>
 800d146:	b948      	cbnz	r0, 800d15c <__smakebuf_r+0x44>
 800d148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d14c:	059a      	lsls	r2, r3, #22
 800d14e:	d4ef      	bmi.n	800d130 <__smakebuf_r+0x18>
 800d150:	f023 0303 	bic.w	r3, r3, #3
 800d154:	f043 0302 	orr.w	r3, r3, #2
 800d158:	81a3      	strh	r3, [r4, #12]
 800d15a:	e7e3      	b.n	800d124 <__smakebuf_r+0xc>
 800d15c:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <__smakebuf_r+0x7c>)
 800d15e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	6020      	str	r0, [r4, #0]
 800d164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d168:	6120      	str	r0, [r4, #16]
 800d16a:	81a3      	strh	r3, [r4, #12]
 800d16c:	9b00      	ldr	r3, [sp, #0]
 800d16e:	6163      	str	r3, [r4, #20]
 800d170:	9b01      	ldr	r3, [sp, #4]
 800d172:	b15b      	cbz	r3, 800d18c <__smakebuf_r+0x74>
 800d174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d178:	4630      	mov	r0, r6
 800d17a:	f000 f8d1 	bl	800d320 <_isatty_r>
 800d17e:	b128      	cbz	r0, 800d18c <__smakebuf_r+0x74>
 800d180:	89a3      	ldrh	r3, [r4, #12]
 800d182:	f023 0303 	bic.w	r3, r3, #3
 800d186:	f043 0301 	orr.w	r3, r3, #1
 800d18a:	81a3      	strh	r3, [r4, #12]
 800d18c:	89a0      	ldrh	r0, [r4, #12]
 800d18e:	4305      	orrs	r5, r0
 800d190:	81a5      	strh	r5, [r4, #12]
 800d192:	e7cd      	b.n	800d130 <__smakebuf_r+0x18>
 800d194:	0800cf25 	.word	0x0800cf25

0800d198 <_malloc_usable_size_r>:
 800d198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d19c:	1f18      	subs	r0, r3, #4
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bfbc      	itt	lt
 800d1a2:	580b      	ldrlt	r3, [r1, r0]
 800d1a4:	18c0      	addlt	r0, r0, r3
 800d1a6:	4770      	bx	lr

0800d1a8 <_raise_r>:
 800d1a8:	291f      	cmp	r1, #31
 800d1aa:	b538      	push	{r3, r4, r5, lr}
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	460d      	mov	r5, r1
 800d1b0:	d904      	bls.n	800d1bc <_raise_r+0x14>
 800d1b2:	2316      	movs	r3, #22
 800d1b4:	6003      	str	r3, [r0, #0]
 800d1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
 800d1bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1be:	b112      	cbz	r2, 800d1c6 <_raise_r+0x1e>
 800d1c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1c4:	b94b      	cbnz	r3, 800d1da <_raise_r+0x32>
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f000 f830 	bl	800d22c <_getpid_r>
 800d1cc:	462a      	mov	r2, r5
 800d1ce:	4601      	mov	r1, r0
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1d6:	f000 b817 	b.w	800d208 <_kill_r>
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d00a      	beq.n	800d1f4 <_raise_r+0x4c>
 800d1de:	1c59      	adds	r1, r3, #1
 800d1e0:	d103      	bne.n	800d1ea <_raise_r+0x42>
 800d1e2:	2316      	movs	r3, #22
 800d1e4:	6003      	str	r3, [r0, #0]
 800d1e6:	2001      	movs	r0, #1
 800d1e8:	e7e7      	b.n	800d1ba <_raise_r+0x12>
 800d1ea:	2400      	movs	r4, #0
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1f2:	4798      	blx	r3
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	e7e0      	b.n	800d1ba <_raise_r+0x12>

0800d1f8 <raise>:
 800d1f8:	4b02      	ldr	r3, [pc, #8]	; (800d204 <raise+0xc>)
 800d1fa:	4601      	mov	r1, r0
 800d1fc:	6818      	ldr	r0, [r3, #0]
 800d1fe:	f7ff bfd3 	b.w	800d1a8 <_raise_r>
 800d202:	bf00      	nop
 800d204:	20000020 	.word	0x20000020

0800d208 <_kill_r>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	2300      	movs	r3, #0
 800d20c:	4d06      	ldr	r5, [pc, #24]	; (800d228 <_kill_r+0x20>)
 800d20e:	4604      	mov	r4, r0
 800d210:	4608      	mov	r0, r1
 800d212:	4611      	mov	r1, r2
 800d214:	602b      	str	r3, [r5, #0]
 800d216:	f7f4 fc3c 	bl	8001a92 <_kill>
 800d21a:	1c43      	adds	r3, r0, #1
 800d21c:	d102      	bne.n	800d224 <_kill_r+0x1c>
 800d21e:	682b      	ldr	r3, [r5, #0]
 800d220:	b103      	cbz	r3, 800d224 <_kill_r+0x1c>
 800d222:	6023      	str	r3, [r4, #0]
 800d224:	bd38      	pop	{r3, r4, r5, pc}
 800d226:	bf00      	nop
 800d228:	20000350 	.word	0x20000350

0800d22c <_getpid_r>:
 800d22c:	f7f4 bc29 	b.w	8001a82 <_getpid>

0800d230 <__sread>:
 800d230:	b510      	push	{r4, lr}
 800d232:	460c      	mov	r4, r1
 800d234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d238:	f000 f894 	bl	800d364 <_read_r>
 800d23c:	2800      	cmp	r0, #0
 800d23e:	bfab      	itete	ge
 800d240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d242:	89a3      	ldrhlt	r3, [r4, #12]
 800d244:	181b      	addge	r3, r3, r0
 800d246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d24a:	bfac      	ite	ge
 800d24c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d24e:	81a3      	strhlt	r3, [r4, #12]
 800d250:	bd10      	pop	{r4, pc}

0800d252 <__swrite>:
 800d252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d256:	461f      	mov	r7, r3
 800d258:	898b      	ldrh	r3, [r1, #12]
 800d25a:	4605      	mov	r5, r0
 800d25c:	460c      	mov	r4, r1
 800d25e:	05db      	lsls	r3, r3, #23
 800d260:	4616      	mov	r6, r2
 800d262:	d505      	bpl.n	800d270 <__swrite+0x1e>
 800d264:	2302      	movs	r3, #2
 800d266:	2200      	movs	r2, #0
 800d268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d26c:	f000 f868 	bl	800d340 <_lseek_r>
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	4632      	mov	r2, r6
 800d274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d278:	4628      	mov	r0, r5
 800d27a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d27e:	81a3      	strh	r3, [r4, #12]
 800d280:	463b      	mov	r3, r7
 800d282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d286:	f000 b817 	b.w	800d2b8 <_write_r>

0800d28a <__sseek>:
 800d28a:	b510      	push	{r4, lr}
 800d28c:	460c      	mov	r4, r1
 800d28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d292:	f000 f855 	bl	800d340 <_lseek_r>
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	bf15      	itete	ne
 800d29c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d29e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2a6:	81a3      	strheq	r3, [r4, #12]
 800d2a8:	bf18      	it	ne
 800d2aa:	81a3      	strhne	r3, [r4, #12]
 800d2ac:	bd10      	pop	{r4, pc}

0800d2ae <__sclose>:
 800d2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b2:	f000 b813 	b.w	800d2dc <_close_r>
	...

0800d2b8 <_write_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	4d06      	ldr	r5, [pc, #24]	; (800d2d8 <_write_r+0x20>)
 800d2be:	4608      	mov	r0, r1
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	602a      	str	r2, [r5, #0]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	f7f4 fc1a 	bl	8001b00 <_write>
 800d2cc:	1c43      	adds	r3, r0, #1
 800d2ce:	d102      	bne.n	800d2d6 <_write_r+0x1e>
 800d2d0:	682b      	ldr	r3, [r5, #0]
 800d2d2:	b103      	cbz	r3, 800d2d6 <_write_r+0x1e>
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	bd38      	pop	{r3, r4, r5, pc}
 800d2d8:	20000350 	.word	0x20000350

0800d2dc <_close_r>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	2300      	movs	r3, #0
 800d2e0:	4d05      	ldr	r5, [pc, #20]	; (800d2f8 <_close_r+0x1c>)
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	4608      	mov	r0, r1
 800d2e6:	602b      	str	r3, [r5, #0]
 800d2e8:	f7f4 fc26 	bl	8001b38 <_close>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	d102      	bne.n	800d2f6 <_close_r+0x1a>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	b103      	cbz	r3, 800d2f6 <_close_r+0x1a>
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	20000350 	.word	0x20000350

0800d2fc <_fstat_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	2300      	movs	r3, #0
 800d300:	4d06      	ldr	r5, [pc, #24]	; (800d31c <_fstat_r+0x20>)
 800d302:	4604      	mov	r4, r0
 800d304:	4608      	mov	r0, r1
 800d306:	4611      	mov	r1, r2
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f7f4 fc21 	bl	8001b50 <_fstat>
 800d30e:	1c43      	adds	r3, r0, #1
 800d310:	d102      	bne.n	800d318 <_fstat_r+0x1c>
 800d312:	682b      	ldr	r3, [r5, #0]
 800d314:	b103      	cbz	r3, 800d318 <_fstat_r+0x1c>
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	bd38      	pop	{r3, r4, r5, pc}
 800d31a:	bf00      	nop
 800d31c:	20000350 	.word	0x20000350

0800d320 <_isatty_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	2300      	movs	r3, #0
 800d324:	4d05      	ldr	r5, [pc, #20]	; (800d33c <_isatty_r+0x1c>)
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	602b      	str	r3, [r5, #0]
 800d32c:	f7f4 fc20 	bl	8001b70 <_isatty>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_isatty_r+0x1a>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_isatty_r+0x1a>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	20000350 	.word	0x20000350

0800d340 <_lseek_r>:
 800d340:	b538      	push	{r3, r4, r5, lr}
 800d342:	4604      	mov	r4, r0
 800d344:	4d06      	ldr	r5, [pc, #24]	; (800d360 <_lseek_r+0x20>)
 800d346:	4608      	mov	r0, r1
 800d348:	4611      	mov	r1, r2
 800d34a:	2200      	movs	r2, #0
 800d34c:	602a      	str	r2, [r5, #0]
 800d34e:	461a      	mov	r2, r3
 800d350:	f7f4 fc19 	bl	8001b86 <_lseek>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d102      	bne.n	800d35e <_lseek_r+0x1e>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	b103      	cbz	r3, 800d35e <_lseek_r+0x1e>
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	20000350 	.word	0x20000350

0800d364 <_read_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	4604      	mov	r4, r0
 800d368:	4d06      	ldr	r5, [pc, #24]	; (800d384 <_read_r+0x20>)
 800d36a:	4608      	mov	r0, r1
 800d36c:	4611      	mov	r1, r2
 800d36e:	2200      	movs	r2, #0
 800d370:	602a      	str	r2, [r5, #0]
 800d372:	461a      	mov	r2, r3
 800d374:	f7f4 fba7 	bl	8001ac6 <_read>
 800d378:	1c43      	adds	r3, r0, #1
 800d37a:	d102      	bne.n	800d382 <_read_r+0x1e>
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	b103      	cbz	r3, 800d382 <_read_r+0x1e>
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	bd38      	pop	{r3, r4, r5, pc}
 800d384:	20000350 	.word	0x20000350

0800d388 <round>:
 800d388:	ec51 0b10 	vmov	r0, r1, d0
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d392:	460b      	mov	r3, r1
 800d394:	ee10 2a10 	vmov	r2, s0
 800d398:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d39c:	2c13      	cmp	r4, #19
 800d39e:	dc19      	bgt.n	800d3d4 <round+0x4c>
 800d3a0:	2c00      	cmp	r4, #0
 800d3a2:	da09      	bge.n	800d3b8 <round+0x30>
 800d3a4:	3401      	adds	r4, #1
 800d3a6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d3aa:	d103      	bne.n	800d3b4 <round+0x2c>
 800d3ac:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d3b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	e028      	b.n	800d40a <round+0x82>
 800d3b8:	4d15      	ldr	r5, [pc, #84]	; (800d410 <round+0x88>)
 800d3ba:	4125      	asrs	r5, r4
 800d3bc:	ea01 0605 	and.w	r6, r1, r5
 800d3c0:	4332      	orrs	r2, r6
 800d3c2:	d00e      	beq.n	800d3e2 <round+0x5a>
 800d3c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d3c8:	fa42 f404 	asr.w	r4, r2, r4
 800d3cc:	4423      	add	r3, r4
 800d3ce:	ea23 0305 	bic.w	r3, r3, r5
 800d3d2:	e7ef      	b.n	800d3b4 <round+0x2c>
 800d3d4:	2c33      	cmp	r4, #51	; 0x33
 800d3d6:	dd07      	ble.n	800d3e8 <round+0x60>
 800d3d8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d3dc:	d101      	bne.n	800d3e2 <round+0x5a>
 800d3de:	f7f2 ff59 	bl	8000294 <__adddf3>
 800d3e2:	ec41 0b10 	vmov	d0, r0, r1
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
 800d3e8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d3ec:	f04f 35ff 	mov.w	r5, #4294967295
 800d3f0:	40f5      	lsrs	r5, r6
 800d3f2:	4228      	tst	r0, r5
 800d3f4:	d0f5      	beq.n	800d3e2 <round+0x5a>
 800d3f6:	2101      	movs	r1, #1
 800d3f8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d3fc:	fa01 f404 	lsl.w	r4, r1, r4
 800d400:	1912      	adds	r2, r2, r4
 800d402:	bf28      	it	cs
 800d404:	185b      	addcs	r3, r3, r1
 800d406:	ea22 0205 	bic.w	r2, r2, r5
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	e7e8      	b.n	800d3e2 <round+0x5a>
 800d410:	000fffff 	.word	0x000fffff

0800d414 <_init>:
 800d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d416:	bf00      	nop
 800d418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d41a:	bc08      	pop	{r3}
 800d41c:	469e      	mov	lr, r3
 800d41e:	4770      	bx	lr

0800d420 <_fini>:
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d422:	bf00      	nop
 800d424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d426:	bc08      	pop	{r3}
 800d428:	469e      	mov	lr, r3
 800d42a:	4770      	bx	lr
