
CBM_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fe8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800a0f8  0800a0f8  0001a0f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9ac  0800a9ac  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9ac  0800a9ac  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9ac  0800a9ac  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9ac  0800a9ac  0001a9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9b0  0800a9b0  0001a9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a9b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001f4  0800aba8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  0800aba8  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016abb  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e0d  00000000  00000000  00036cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0003aae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  0003c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc3a  00000000  00000000  0003da10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abdb  00000000  00000000  0005b64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d869  00000000  00000000  00076225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113a8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007858  00000000  00000000  00113ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a0e0 	.word	0x0800a0e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800a0e0 	.word	0x0800a0e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b0f6      	sub	sp, #472	; 0x1d8
 8001100:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f003 f8e1 	bl	80042c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 f94b 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f000 fa33 	bl	8001574 <MX_GPIO_Init>
  MX_SPI1_Init();
 800110e:	f000 f983 	bl	8001418 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001112:	f000 fa05 	bl	8001520 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001116:	f000 f9b5 	bl	8001484 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  c = config();
 800111a:	4c89      	ldr	r4, [pc, #548]	; (8001340 <main+0x244>)
 800111c:	463b      	mov	r3, r7
 800111e:	4618      	mov	r0, r3
 8001120:	f005 fb44 	bl	80067ac <config>
 8001124:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001128:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800112c:	461d      	mov	r5, r3
 800112e:	6828      	ldr	r0, [r5, #0]
 8001130:	6869      	ldr	r1, [r5, #4]
 8001132:	68aa      	ldr	r2, [r5, #8]
 8001134:	68eb      	ldr	r3, [r5, #12]
 8001136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001138:	7c2b      	ldrb	r3, [r5, #16]
 800113a:	7023      	strb	r3, [r4, #0]

  main_print_debug("****************PROGRAM STARTED******************");
 800113c:	4b81      	ldr	r3, [pc, #516]	; (8001344 <main+0x248>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4981      	ldr	r1, [pc, #516]	; (8001348 <main+0x24c>)
 8001142:	4618      	mov	r0, r3
 8001144:	f005 fe76 	bl	8006e34 <print_debug>
  main_print_debug("Peripherals initialized!");
 8001148:	4b7e      	ldr	r3, [pc, #504]	; (8001344 <main+0x248>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	497f      	ldr	r1, [pc, #508]	; (800134c <main+0x250>)
 800114e:	4618      	mov	r0, r3
 8001150:	f005 fe70 	bl	8006e34 <print_debug>
  comm_start();
 8001154:	f005 fe62 	bl	8006e1c <comm_start>

  main_print_debug("SPSGRF initialized!");
 8001158:	4b7a      	ldr	r3, [pc, #488]	; (8001344 <main+0x248>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	497c      	ldr	r1, [pc, #496]	; (8001350 <main+0x254>)
 800115e:	4618      	mov	r0, r3
 8001160:	f005 fe68 	bl	8006e34 <print_debug>
  uint8_t enc_data[16];
  uint8_t dec_data[12];
  uint8_t len;

  struct sensor_values sensor_value;
  sensor_value.temperature = 21.32;
 8001164:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001168:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800116c:	4a79      	ldr	r2, [pc, #484]	; (8001354 <main+0x258>)
 800116e:	601a      	str	r2, [r3, #0]
  sensor_value.acc.x.rms = 21.32;
 8001170:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001174:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001178:	4a76      	ldr	r2, [pc, #472]	; (8001354 <main+0x258>)
 800117a:	605a      	str	r2, [r3, #4]
  sensor_value.acc.x.peak = 11.23;
 800117c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001180:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001184:	4a74      	ldr	r2, [pc, #464]	; (8001358 <main+0x25c>)
 8001186:	609a      	str	r2, [r3, #8]
  sensor_value.acc.x.crest = 8.1;
 8001188:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800118c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001190:	4a72      	ldr	r2, [pc, #456]	; (800135c <main+0x260>)
 8001192:	60da      	str	r2, [r3, #12]
  sensor_value.acc.y.rms = 21.324;
 8001194:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001198:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800119c:	4a70      	ldr	r2, [pc, #448]	; (8001360 <main+0x264>)
 800119e:	611a      	str	r2, [r3, #16]
  sensor_value.acc.y.peak = 11.234;
 80011a0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011a4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011a8:	4a6e      	ldr	r2, [pc, #440]	; (8001364 <main+0x268>)
 80011aa:	615a      	str	r2, [r3, #20]
  sensor_value.acc.y.crest = 8.13;
 80011ac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011b0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011b4:	4a6c      	ldr	r2, [pc, #432]	; (8001368 <main+0x26c>)
 80011b6:	619a      	str	r2, [r3, #24]
  sensor_value.acc.z.rms = 21.327;
 80011b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011bc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011c0:	4a6a      	ldr	r2, [pc, #424]	; (800136c <main+0x270>)
 80011c2:	61da      	str	r2, [r3, #28]
  sensor_value.acc.z.peak = 11.231;
 80011c4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011c8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011cc:	4a68      	ldr	r2, [pc, #416]	; (8001370 <main+0x274>)
 80011ce:	621a      	str	r2, [r3, #32]
  sensor_value.acc.z.crest = 8.12;
 80011d0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011d4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011d8:	4a66      	ldr	r2, [pc, #408]	; (8001374 <main+0x278>)
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_print_debug("Main loop begin");
 80011dc:	4b59      	ldr	r3, [pc, #356]	; (8001344 <main+0x248>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4965      	ldr	r1, [pc, #404]	; (8001378 <main+0x27c>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 fe26 	bl	8006e34 <print_debug>
  while (1)
  {
	  switch(state){
 80011e8:	4b64      	ldr	r3, [pc, #400]	; (800137c <main+0x280>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d8fb      	bhi.n	80011e8 <main+0xec>
 80011f0:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <main+0xfc>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	0800124f 	.word	0x0800124f
 80011fc:	08001293 	.word	0x08001293
 8001200:	08001211 	.word	0x08001211
 8001204:	08001269 	.word	0x08001269
 8001208:	0800127b 	.word	0x0800127b
 800120c:	080012af 	.word	0x080012af
	  case PREP_DATA:
		  main_print_debug("Data send request");
 8001210:	4b4c      	ldr	r3, [pc, #304]	; (8001344 <main+0x248>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	495a      	ldr	r1, [pc, #360]	; (8001380 <main+0x284>)
 8001216:	4618      	mov	r0, r3
 8001218:	f005 fe0c 	bl	8006e34 <print_debug>
		  len = comm_request(data,sensor_value);
 800121c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001220:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 8001224:	f107 05a4 	add.w	r5, r7, #164	; 0xa4
 8001228:	4668      	mov	r0, sp
 800122a:	f104 030c 	add.w	r3, r4, #12
 800122e:	2264      	movs	r2, #100	; 0x64
 8001230:	4619      	mov	r1, r3
 8001232:	f006 f803 	bl	800723c <memcpy>
 8001236:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800123a:	4628      	mov	r0, r5
 800123c:	f005 fb20 	bl	8006880 <comm_request>
 8001240:	4603      	mov	r3, r0
 8001242:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
		  state = ENCRYPT;
 8001246:	4b4d      	ldr	r3, [pc, #308]	; (800137c <main+0x280>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
		  break;
 800124c:	e077      	b.n	800133e <main+0x242>
	  case ENCRYPT:
		  comm_encrypt(data, len, enc_data);
 800124e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001252:	f897 116f 	ldrb.w	r1, [r7, #367]	; 0x16f
 8001256:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800125a:	4618      	mov	r0, r3
 800125c:	f005 fcee 	bl	8006c3c <comm_encrypt>
		  state = SEND;
 8001260:	4b46      	ldr	r3, [pc, #280]	; (800137c <main+0x280>)
 8001262:	2203      	movs	r2, #3
 8001264:	701a      	strb	r2, [r3, #0]
		  break;
 8001266:	e06a      	b.n	800133e <main+0x242>
	  case SEND:
		  comm_send(enc_data);
 8001268:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800126c:	4618      	mov	r0, r3
 800126e:	f005 fccb 	bl	8006c08 <comm_send>
		  state = IDLE;
 8001272:	4b42      	ldr	r3, [pc, #264]	; (800137c <main+0x280>)
 8001274:	2205      	movs	r2, #5
 8001276:	701a      	strb	r2, [r3, #0]
		  break;
 8001278:	e061      	b.n	800133e <main+0x242>
	  case RECEIVE:
		  main_print_debug("Starting RX state");
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <main+0x248>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4941      	ldr	r1, [pc, #260]	; (8001384 <main+0x288>)
 8001280:	4618      	mov	r0, r3
 8001282:	f005 fdd7 	bl	8006e34 <print_debug>
		  SPSGRF_StartRx();
 8001286:	f005 ff93 	bl	80071b0 <SPSGRF_StartRx>
		  state = IDLE;
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <main+0x280>)
 800128c:	2205      	movs	r2, #5
 800128e:	701a      	strb	r2, [r3, #0]
		  break;
 8001290:	e055      	b.n	800133e <main+0x242>
	  case DECRYPT:
		  comm_decrypt(dec_data);
 8001292:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001296:	4618      	mov	r0, r3
 8001298:	f005 fd5e 	bl	8006d58 <comm_decrypt>
		  comm_received(dec_data);
 800129c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012a0:	4618      	mov	r0, r3
 80012a2:	f005 fb5f 	bl	8006964 <comm_received>
		  state = RECEIVE;
 80012a6:	4b35      	ldr	r3, [pc, #212]	; (800137c <main+0x280>)
 80012a8:	2204      	movs	r2, #4
 80012aa:	701a      	strb	r2, [r3, #0]
		  break;
 80012ac:	e047      	b.n	800133e <main+0x242>

	  case IDLE:
		  if(interrupt_flag == 1){
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <main+0x28c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d142      	bne.n	800133c <main+0x240>
			main_print_debug("Got interrupted");
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <main+0x248>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4934      	ldr	r1, [pc, #208]	; (800138c <main+0x290>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f005 fdb9 	bl	8006e34 <print_debug>
			interrupt_flag = 0;
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <main+0x28c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
			if(irqStatus.IRQ_RX_DATA_READY)
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <main+0x294>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d008      	beq.n	80012e8 <main+0x1ec>
			{
				main_print_debug("data received");
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <main+0x248>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	492e      	ldr	r1, [pc, #184]	; (8001394 <main+0x298>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f005 fda9 	bl	8006e34 <print_debug>
				state = DECRYPT;
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <main+0x280>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
			}
			if(irqStatus.IRQ_RX_DATA_DISC)
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <main+0x294>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <main+0x200>
			{
				state = RECEIVE;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <main+0x280>)
 80012f8:	2204      	movs	r2, #4
 80012fa:	701a      	strb	r2, [r3, #0]
			}
			if(irqStatus.IRQ_TX_DATA_SENT)
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <main+0x294>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d008      	beq.n	800131c <main+0x220>
			{
				main_print_debug("Data send!");
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <main+0x248>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4922      	ldr	r1, [pc, #136]	; (8001398 <main+0x29c>)
 8001310:	4618      	mov	r0, r3
 8001312:	f005 fd8f 	bl	8006e34 <print_debug>
				state = RECEIVE;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <main+0x280>)
 8001318:	2204      	movs	r2, #4
 800131a:	701a      	strb	r2, [r3, #0]
			}
			if(irqStatus.IRQ_AES_END)
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <main+0x294>)
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <main+0x240>
			{
				main_print_debug("Encryption done");
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <main+0x248>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	491b      	ldr	r1, [pc, #108]	; (800139c <main+0x2a0>)
 8001330:	4618      	mov	r0, r3
 8001332:	f005 fd7f 	bl	8006e34 <print_debug>
				state = IDLE;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <main+0x280>)
 8001338:	2205      	movs	r2, #5
 800133a:	701a      	strb	r2, [r3, #0]
			}
		  }
		  break;
 800133c:	bf00      	nop
	  switch(state){
 800133e:	e753      	b.n	80011e8 <main+0xec>
 8001340:	200002f8 	.word	0x200002f8
 8001344:	20000000 	.word	0x20000000
 8001348:	0800a100 	.word	0x0800a100
 800134c:	0800a134 	.word	0x0800a134
 8001350:	0800a150 	.word	0x0800a150
 8001354:	41aa8f5c 	.word	0x41aa8f5c
 8001358:	4133ae14 	.word	0x4133ae14
 800135c:	4101999a 	.word	0x4101999a
 8001360:	41aa978d 	.word	0x41aa978d
 8001364:	4133be77 	.word	0x4133be77
 8001368:	4102147b 	.word	0x4102147b
 800136c:	41aa9db2 	.word	0x41aa9db2
 8001370:	4133b22d 	.word	0x4133b22d
 8001374:	4101eb85 	.word	0x4101eb85
 8001378:	0800a164 	.word	0x0800a164
 800137c:	20000004 	.word	0x20000004
 8001380:	0800a174 	.word	0x0800a174
 8001384:	0800a188 	.word	0x0800a188
 8001388:	200002f4 	.word	0x200002f4
 800138c:	0800a19c 	.word	0x0800a19c
 8001390:	20000328 	.word	0x20000328
 8001394:	0800a1ac 	.word	0x0800a1ac
 8001398:	0800a1bc 	.word	0x0800a1bc
 800139c:	0800a1c8 	.word	0x0800a1c8

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b090      	sub	sp, #64	; 0x40
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	2228      	movs	r2, #40	; 0x28
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f005 ff52 	bl	8007258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c6:	2301      	movs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ca:	2310      	movs	r3, #16
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fafa 	bl	80049d0 <HAL_RCC_OscConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013e2:	f000 f95f 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fd68 	bl	8004ed4 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800140a:	f000 f94b 	bl	80016a4 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3740      	adds	r7, #64	; 0x40
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_SPI1_Init+0x64>)
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <MX_SPI1_Init+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_SPI1_Init+0x64>)
 8001424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_SPI1_Init+0x64>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_SPI1_Init+0x64>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_SPI1_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_SPI1_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_SPI1_Init+0x64>)
 8001444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_SPI1_Init+0x64>)
 800144c:	2228      	movs	r2, #40	; 0x28
 800144e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <MX_SPI1_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_SPI1_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <MX_SPI1_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_SPI1_Init+0x64>)
 8001464:	220a      	movs	r2, #10
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_SPI1_Init+0x64>)
 800146a:	f003 fecb 	bl	8005204 <HAL_SPI_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001474:	f000 f916 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000210 	.word	0x20000210
 8001480:	40013000 	.word	0x40013000

08001484 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <MX_TIM2_Init+0x98>)
 80014a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_TIM2_Init+0x98>)
 80014aa:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80014ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_TIM2_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_TIM2_Init+0x98>)
 80014b8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80014bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_TIM2_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_TIM2_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <MX_TIM2_Init+0x98>)
 80014cc:	f004 fc06 	bl	8005cdc <HAL_TIM_Base_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014d6:	f000 f8e5 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4619      	mov	r1, r3
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_TIM2_Init+0x98>)
 80014e8:	f004 fd4f 	bl	8005f8a <HAL_TIM_ConfigClockSource>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014f2:	f000 f8d7 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <MX_TIM2_Init+0x98>)
 8001504:	f004 ff2a 	bl	800635c <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800150e:	f000 f8c9 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000268 	.word	0x20000268

08001520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_USART1_UART_Init+0x50>)
 8001528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_USART1_UART_Init+0x4c>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_USART1_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_USART1_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001558:	f004 ff70 	bl	800643c <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001562:	f000 f89f 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002b0 	.word	0x200002b0
 8001570:	40013800 	.word	0x40013800

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001588:	4b41      	ldr	r3, [pc, #260]	; (8001690 <MX_GPIO_Init+0x11c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a40      	ldr	r2, [pc, #256]	; (8001690 <MX_GPIO_Init+0x11c>)
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <MX_GPIO_Init+0x11c>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a0:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <MX_GPIO_Init+0x11c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a3a      	ldr	r2, [pc, #232]	; (8001690 <MX_GPIO_Init+0x11c>)
 80015a6:	f043 0320 	orr.w	r3, r3, #32
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b38      	ldr	r3, [pc, #224]	; (8001690 <MX_GPIO_Init+0x11c>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0320 	and.w	r3, r3, #32
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <MX_GPIO_Init+0x11c>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a34      	ldr	r2, [pc, #208]	; (8001690 <MX_GPIO_Init+0x11c>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <MX_GPIO_Init+0x11c>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <MX_GPIO_Init+0x11c>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a2e      	ldr	r2, [pc, #184]	; (8001690 <MX_GPIO_Init+0x11c>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_GPIO_Init+0x11c>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ee:	4829      	ldr	r0, [pc, #164]	; (8001694 <MX_GPIO_Init+0x120>)
 80015f0:	f003 f9b4 	bl	800495c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_CS_GPIO_Port, SPIRIT1_CS_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2110      	movs	r1, #16
 80015f8:	4827      	ldr	r0, [pc, #156]	; (8001698 <MX_GPIO_Init+0x124>)
 80015fa:	f003 f9af 	bl	800495c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2101      	movs	r1, #1
 8001602:	4826      	ldr	r0, [pc, #152]	; (800169c <MX_GPIO_Init+0x128>)
 8001604:	f003 f9aa 	bl	800495c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2302      	movs	r3, #2
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	4619      	mov	r1, r3
 8001620:	481c      	ldr	r0, [pc, #112]	; (8001694 <MX_GPIO_Init+0x120>)
 8001622:	f003 f817 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRIT1_CS_Pin */
  GPIO_InitStruct.Pin = SPIRIT1_CS_Pin;
 8001626:	2310      	movs	r3, #16
 8001628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2302      	movs	r3, #2
 8001634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPIRIT1_CS_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4619      	mov	r1, r3
 800163c:	4816      	ldr	r0, [pc, #88]	; (8001698 <MX_GPIO_Init+0x124>)
 800163e:	f003 f809 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRIT1_SDN_Pin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 8001642:	2301      	movs	r3, #1
 8001644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2302      	movs	r3, #2
 8001650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	4619      	mov	r1, r3
 8001658:	4810      	ldr	r0, [pc, #64]	; (800169c <MX_GPIO_Init+0x128>)
 800165a:	f002 fffb 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRIT1_GPIO3_Pin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 800165e:	2302      	movs	r3, #2
 8001660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_GPIO_Init+0x12c>)
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4619      	mov	r1, r3
 8001670:	480a      	ldr	r0, [pc, #40]	; (800169c <MX_GPIO_Init+0x128>)
 8001672:	f002 ffef 	bl	8004654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2007      	movs	r0, #7
 800167c:	f002 ffa5 	bl	80045ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001680:	2007      	movs	r0, #7
 8001682:	f002 ffbe 	bl	8004602 <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	40011000 	.word	0x40011000
 8001698:	40010800 	.word	0x40010800
 800169c:	40010c00 	.word	0x40010c00
 80016a0:	10210000 	.word	0x10210000

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>
	...

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_MspInit+0x5c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6193      	str	r3, [r2, #24]
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_MspInit+0x5c>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_MspInit+0x5c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_MspInit+0x5c>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_MspInit+0x60>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_MspInit+0x60>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000

08001714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1b      	ldr	r2, [pc, #108]	; (800179c <HAL_SPI_MspInit+0x88>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d12f      	bne.n	8001794 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_SPI_MspInit+0x8c>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <HAL_SPI_MspInit+0x8c>)
 800173a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_SPI_MspInit+0x8c>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_SPI_MspInit+0x8c>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_SPI_MspInit+0x8c>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_SPI_MspInit+0x8c>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001764:	23a0      	movs	r3, #160	; 0xa0
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	480b      	ldr	r0, [pc, #44]	; (80017a4 <HAL_SPI_MspInit+0x90>)
 8001778:	f002 ff6c 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177c:	2340      	movs	r3, #64	; 0x40
 800177e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_SPI_MspInit+0x90>)
 8001790:	f002 ff60 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40013000 	.word	0x40013000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010800 	.word	0x40010800

080017a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d113      	bne.n	80017e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	201c      	movs	r0, #28
 80017d8:	f002 fef7 	bl	80045ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017dc:	201c      	movs	r0, #28
 80017de:	f002 ff10 	bl	8004602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1c      	ldr	r2, [pc, #112]	; (800187c <HAL_UART_MspInit+0x8c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d131      	bne.n	8001874 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_UART_MspInit+0x90>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <HAL_UART_MspInit+0x90>)
 8001816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_UART_MspInit+0x90>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_UART_MspInit+0x90>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_UART_MspInit+0x90>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_UART_MspInit+0x90>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001844:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	4619      	mov	r1, r3
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <HAL_UART_MspInit+0x94>)
 8001856:	f002 fefd 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800185a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800185e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	4619      	mov	r1, r3
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <HAL_UART_MspInit+0x94>)
 8001870:	f002 fef0 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001874:	bf00      	nop
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40013800 	.word	0x40013800
 8001880:	40021000 	.word	0x40021000
 8001884:	40010800 	.word	0x40010800

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800188c:	e7fe      	b.n	800188c <NMI_Handler+0x4>
	...

08001890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_UART_Transmit(&huart1,(uint8_t *) "hardfault!", sizeof("hardfault!"), 100);
 8001894:	2364      	movs	r3, #100	; 0x64
 8001896:	220b      	movs	r2, #11
 8001898:	4902      	ldr	r1, [pc, #8]	; (80018a4 <HardFault_Handler+0x14>)
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <HardFault_Handler+0x18>)
 800189c:	f004 fe1b 	bl	80064d6 <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <HardFault_Handler+0x10>
 80018a2:	bf00      	nop
 80018a4:	0800a1e4 	.word	0x0800a1e4
 80018a8:	200002b0 	.word	0x200002b0

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e6:	f002 fd35 	bl	8004354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <EXTI1_IRQHandler>:
/**
  * @brief This function handles EXTI line1 interrupt.
  */

void EXTI1_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  SpiritIrqGetStatus(&irqStatus);
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <EXTI1_IRQHandler+0x20>)
 80018f6:	f000 fbc7 	bl	8002088 <SpiritIrqGetStatus>
  SpiritIrqClearStatus();
 80018fa:	f000 fbf7 	bl	80020ec <SpiritIrqClearStatus>
  interrupt_flag = 1;
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <EXTI1_IRQHandler+0x24>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 8001904:	2002      	movs	r0, #2
 8001906:	f003 f841 	bl	800498c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000328 	.word	0x20000328
 8001914:	200002f4 	.word	0x200002f4

08001918 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  state = PREP_DATA;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <TIM2_IRQHandler+0x14>)
 800191e:	2202      	movs	r2, #2
 8001920:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001922:	4803      	ldr	r0, [pc, #12]	; (8001930 <TIM2_IRQHandler+0x18>)
 8001924:	f004 fa29 	bl	8005d7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000004 	.word	0x20000004
 8001930:	20000268 	.word	0x20000268

08001934 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
	return 1;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <_kill>:

int _kill(int pid, int sig)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800194c:	f005 fc4c 	bl	80071e8 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	2216      	movs	r2, #22
 8001954:	601a      	str	r2, [r3, #0]
	return -1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_exit>:

void _exit (int status)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800196a:	f04f 31ff 	mov.w	r1, #4294967295
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffe7 	bl	8001942 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001974:	e7fe      	b.n	8001974 <_exit+0x12>

08001976 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e00a      	b.n	800199e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001988:	f3af 8000 	nop.w
 800198c:	4601      	mov	r1, r0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	60ba      	str	r2, [r7, #8]
 8001994:	b2ca      	uxtb	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbf0      	blt.n	8001988 <_read+0x12>
	}

return len;
 80019a6:	687b      	ldr	r3, [r7, #4]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e009      	b.n	80019d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3301      	adds	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dbf1      	blt.n	80019c2 <_write+0x12>
	}
	return len;
 80019de:	687b      	ldr	r3, [r7, #4]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_close>:

int _close(int file)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <_isatty>:

int _isatty(int file)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	return 1;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f005 fbb6 	bl	80071e8 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20005000 	.word	0x20005000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	20000360 	.word	0x20000360
 8001ab0:	20000388 	.word	0x20000388

08001ab4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	; (8001af8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	; (8001b04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ae6:	f7ff ffe5 	bl	8001ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aea:	f005 fb83 	bl	80071f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aee:	f7ff fb05 	bl	80010fc <main>
  bx lr
 8001af2:	4770      	bx	lr
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001afc:	0800a9b4 	.word	0x0800a9b4
  ldr r2, =_sbss
 8001b00:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001b04:	20000388 	.word	0x20000388

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>
	...

08001b0c <SpiritAesMode>:
 * @param  xNewState new state for AES engine.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None
 */
void SpiritAesMode(SpiritFunctionalState xNewState)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Modifies the register value */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8001b1a:	f107 030f 	add.w	r3, r7, #15
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2101      	movs	r1, #1
 8001b22:	2001      	movs	r0, #1
 8001b24:	f002 fa9a 	bl	800405c <RadioSpiReadRegisters>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <SpiritAesMode+0x70>)
 8001b2c:	b212      	sxth	r2, r2
 8001b2e:	4611      	mov	r1, r2
 8001b30:	7019      	strb	r1, [r3, #0]
 8001b32:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b36:	705a      	strb	r2, [r3, #1]
  if(xNewState == S_ENABLE)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d105      	bne.n	8001b4a <SpiritAesMode+0x3e>
  {
    tempRegValue |= AES_MASK;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	f043 0320 	orr.w	r3, r3, #32
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e004      	b.n	8001b54 <SpiritAesMode+0x48>
  }
  else
  {
    tempRegValue &= ~AES_MASK;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	f023 0320 	bic.w	r3, r3, #32
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the ANA_FUNC_CONF0 register to enable or disable the AES engine */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8001b54:	f107 030f 	add.w	r3, r7, #15
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f002 fa31 	bl	8003fc4 <RadioSpiWriteRegisters>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SpiritAesMode+0x70>)
 8001b66:	b212      	sxth	r2, r2
 8001b68:	4611      	mov	r1, r2
 8001b6a:	7019      	strb	r1, [r3, #0]
 8001b6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b70:	705a      	strb	r2, [r3, #1]

}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000036c 	.word	0x2000036c

08001b80 <SpiritAesWriteDataIn>:
 * @param  cDataLength length of data in bytes.
 *         This parameter is an uint8_t.
 * @retval None
 */
void SpiritAesWriteDataIn(uint8_t* pcBufferDataIn, uint8_t cDataLength)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dataInArray[16];

  /* Verifies that there are no more than 16 bytes */
  (cDataLength>16) ? (cDataLength=16) : cDataLength;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d901      	bls.n	8001b96 <SpiritAesWriteDataIn+0x16>
 8001b92:	2310      	movs	r3, #16
 8001b94:	70fb      	strb	r3, [r7, #3]

  /* Fill the dataInArray with the data buffer, using padding */
  for(i=0;i<16;i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	77fb      	strb	r3, [r7, #31]
 8001b9a:	e01b      	b.n	8001bd4 <SpiritAesWriteDataIn+0x54>
  {
    (i<(16 - cDataLength)) ? (dataInArray[i]=0):(dataInArray[i]=pcBufferDataIn[15-i]);
 8001b9c:	7ffa      	ldrb	r2, [r7, #31]
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	f1c3 0310 	rsb	r3, r3, #16
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	da06      	bge.n	8001bb6 <SpiritAesWriteDataIn+0x36>
 8001ba8:	7ffb      	ldrb	r3, [r7, #31]
 8001baa:	3320      	adds	r3, #32
 8001bac:	443b      	add	r3, r7
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001bb4:	e00b      	b.n	8001bce <SpiritAesWriteDataIn+0x4e>
 8001bb6:	7ffb      	ldrb	r3, [r7, #31]
 8001bb8:	f1c3 030f 	rsb	r3, r3, #15
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	441a      	add	r2, r3
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	3320      	adds	r3, #32
 8001bc8:	443b      	add	r3, r7
 8001bca:	f803 2c14 	strb.w	r2, [r3, #-20]
  for(i=0;i<16;i++)
 8001bce:	7ffb      	ldrb	r3, [r7, #31]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	77fb      	strb	r3, [r7, #31]
 8001bd4:	7ffb      	ldrb	r3, [r7, #31]
 8001bd6:	2b0f      	cmp	r3, #15
 8001bd8:	d9e0      	bls.n	8001b9c <SpiritAesWriteDataIn+0x1c>

  }

  /* Writes the AES_DATA_IN registers */
  g_xStatus = SpiritSpiWriteRegisters(AES_DATA_IN_15_BASE, 16, dataInArray);
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	461a      	mov	r2, r3
 8001be0:	2110      	movs	r1, #16
 8001be2:	2080      	movs	r0, #128	; 0x80
 8001be4:	f002 f9ee 	bl	8003fc4 <RadioSpiWriteRegisters>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SpiritAesWriteDataIn+0x80>)
 8001bec:	b212      	sxth	r2, r2
 8001bee:	4611      	mov	r1, r2
 8001bf0:	7019      	strb	r1, [r3, #0]
 8001bf2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001bf6:	705a      	strb	r2, [r3, #1]

}
 8001bf8:	bf00      	nop
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000036c 	.word	0x2000036c

08001c04 <SpiritAesReadDataOut>:
 * @param  cDataLength length of data to read in bytes.
 *         This parameter is a uint8_t.
 * @retval None
 */
void SpiritAesReadDataOut(uint8_t* pcBufferDataOut, uint8_t cDataLength)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
  uint8_t address, dataOutArray[16];

  /* Verifies that there are no more than 16 bytes */
  (cDataLength>16) ? (cDataLength=16) : cDataLength;
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	2b10      	cmp	r3, #16
 8001c14:	d901      	bls.n	8001c1a <SpiritAesReadDataOut+0x16>
 8001c16:	2310      	movs	r3, #16
 8001c18:	70fb      	strb	r3, [r7, #3]

  /* Evaluates the address of AES_DATA_OUT from which start to read */
  address = AES_DATA_OUT_15_BASE+16-cDataLength;
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8001c20:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8001c24:	33e4      	adds	r3, #228	; 0xe4
 8001c26:	76fb      	strb	r3, [r7, #27]

  /* Reads the exact number of AES_DATA_OUT registers */
  g_xStatus = (SpiritSpiReadRegisters(address, cDataLength, dataOutArray));
 8001c28:	f107 0208 	add.w	r2, r7, #8
 8001c2c:	78f9      	ldrb	r1, [r7, #3]
 8001c2e:	7efb      	ldrb	r3, [r7, #27]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fa13 	bl	800405c <RadioSpiReadRegisters>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <SpiritAesReadDataOut+0x74>)
 8001c3a:	b212      	sxth	r2, r2
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	7019      	strb	r1, [r3, #0]
 8001c40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c44:	705a      	strb	r2, [r3, #1]

  /* Copy in the user buffer the read values changing the order */
  for(int i = (cDataLength-1); i>=0; i--)
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	e00c      	b.n	8001c68 <SpiritAesReadDataOut+0x64>
  {
    *pcBufferDataOut = dataOutArray[i];
 8001c4e:	f107 0208 	add.w	r2, r7, #8
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4413      	add	r3, r2
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	701a      	strb	r2, [r3, #0]
    pcBufferDataOut++;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	607b      	str	r3, [r7, #4]
  for(int i = (cDataLength-1); i>=0; i--)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	daef      	bge.n	8001c4e <SpiritAesReadDataOut+0x4a>
  }

}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	2000036c 	.word	0x2000036c

08001c7c <SpiritAesWriteKey>:
 *         The last byte of the buffer shall be the less significant byte AES_KEY_15 of the AES key.
 * 	   This parameter is an uint8_t*.
 * @retval None
 */
void SpiritAesWriteKey(uint8_t* pcKey)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint8_t pcTempKey[16]; 
  for (uint8_t i = 0; i < 16; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	77fb      	strb	r3, [r7, #31]
 8001c88:	e00d      	b.n	8001ca6 <SpiritAesWriteKey+0x2a>
  {
    pcTempKey[15-i] = pcKey[i];
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	441a      	add	r2, r3
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	f1c3 030f 	rsb	r3, r3, #15
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	3320      	adds	r3, #32
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (uint8_t i = 0; i < 16; i++)
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	77fb      	strb	r3, [r7, #31]
 8001ca6:	7ffb      	ldrb	r3, [r7, #31]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d9ee      	bls.n	8001c8a <SpiritAesWriteKey+0xe>
  }
  
  /* Writes the AES_DATA_IN registers */
  g_xStatus = SpiritSpiWriteRegisters(AES_KEY_IN_15_BASE, 16, pcTempKey);
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2110      	movs	r1, #16
 8001cb4:	2070      	movs	r0, #112	; 0x70
 8001cb6:	f002 f985 	bl	8003fc4 <RadioSpiWriteRegisters>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SpiritAesWriteKey+0x58>)
 8001cbe:	b212      	sxth	r2, r2
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	7019      	strb	r1, [r3, #0]
 8001cc4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cc8:	705a      	strb	r2, [r3, #1]

}
 8001cca:	bf00      	nop
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000036c 	.word	0x2000036c

08001cd8 <SpiritAesExecuteEncryption>:
 * @brief  Executes the encryption operation.
 * @param  None.
 * @retval None.
 */
void SpiritAesExecuteEncryption(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Sends the COMMAND_AES_ENC command */
  g_xStatus = SpiritSpiCommandStrobes(COMMAND_AES_ENC);
 8001cdc:	206a      	movs	r0, #106	; 0x6a
 8001cde:	f002 fa09 	bl	80040f4 <RadioSpiCommandStrobes>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <SpiritAesExecuteEncryption+0x20>)
 8001ce6:	b212      	sxth	r2, r2
 8001ce8:	4611      	mov	r1, r2
 8001cea:	7019      	strb	r1, [r3, #0]
 8001cec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cf0:	705a      	strb	r2, [r3, #1]

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000036c 	.word	0x2000036c

08001cfc <SpiritAesDeriveDecKeyExecuteDec>:
 * @brief  Executes the key derivation and the decryption operation.
 * @param  None.
 * @retval None.
 */
void SpiritAesDeriveDecKeyExecuteDec(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Sends the COMMAND_AES_KEY_DEC command */
  g_xStatus = SpiritSpiCommandStrobes(COMMAND_AES_KEY_DEC);
 8001d00:	206d      	movs	r0, #109	; 0x6d
 8001d02:	f002 f9f7 	bl	80040f4 <RadioSpiCommandStrobes>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SpiritAesDeriveDecKeyExecuteDec+0x20>)
 8001d0a:	b212      	sxth	r2, r2
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	7019      	strb	r1, [r3, #0]
 8001d10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d14:	705a      	strb	r2, [r3, #1]

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000036c 	.word	0x2000036c

08001d20 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001d2a:	f107 030f 	add.w	r3, r7, #15
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2101      	movs	r1, #1
 8001d32:	2050      	movs	r0, #80	; 0x50
 8001d34:	f002 f992 	bl	800405c <RadioSpiReadRegisters>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <SpiritCalibrationVco+0x6c>)
 8001d3c:	b212      	sxth	r2, r2
 8001d3e:	4611      	mov	r1, r2
 8001d40:	7019      	strb	r1, [r3, #0]
 8001d42:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d46:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e004      	b.n	8001d64 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	f023 0302 	bic.w	r3, r3, #2
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001d64:	f107 030f 	add.w	r3, r7, #15
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	2050      	movs	r0, #80	; 0x50
 8001d6e:	f002 f929 	bl	8003fc4 <RadioSpiWriteRegisters>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SpiritCalibrationVco+0x6c>)
 8001d76:	b212      	sxth	r2, r2
 8001d78:	4611      	mov	r1, r2
 8001d7a:	7019      	strb	r1, [r3, #0]
 8001d7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d80:	705a      	strb	r2, [r3, #1]

}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000036c 	.word	0x2000036c

08001d90 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	20e5      	movs	r0, #229	; 0xe5
 8001d9e:	f002 f95d 	bl	800405c <RadioSpiReadRegisters>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <SpiritCalibrationGetVcoCalData+0x34>)
 8001da6:	b212      	sxth	r2, r2
 8001da8:	4611      	mov	r1, r2
 8001daa:	7019      	strb	r1, [r3, #0]
 8001dac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001db0:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db8:	b2db      	uxtb	r3, r3

}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000036c 	.word	0x2000036c

08001dc8 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001dd2:	f107 030f 	add.w	r3, r7, #15
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2101      	movs	r1, #1
 8001dda:	206e      	movs	r0, #110	; 0x6e
 8001ddc:	f002 f93e 	bl	800405c <RadioSpiReadRegisters>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001de4:	b212      	sxth	r2, r2
 8001de6:	4611      	mov	r1, r2
 8001de8:	7019      	strb	r1, [r3, #0]
 8001dea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001dee:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001e04:	f107 030f 	add.w	r3, r7, #15
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	206e      	movs	r0, #110	; 0x6e
 8001e0e:	f002 f8d9 	bl	8003fc4 <RadioSpiWriteRegisters>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001e16:	b212      	sxth	r2, r2
 8001e18:	4611      	mov	r1, r2
 8001e1a:	7019      	strb	r1, [r3, #0]
 8001e1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e20:	705a      	strb	r2, [r3, #1]

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000036c 	.word	0x2000036c

08001e30 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001e3a:	f107 030f 	add.w	r3, r7, #15
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2101      	movs	r1, #1
 8001e42:	206f      	movs	r0, #111	; 0x6f
 8001e44:	f002 f90a 	bl	800405c <RadioSpiReadRegisters>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001e4c:	b212      	sxth	r2, r2
 8001e4e:	4611      	mov	r1, r2
 8001e50:	7019      	strb	r1, [r3, #0]
 8001e52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e56:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001e6c:	f107 030f 	add.w	r3, r7, #15
 8001e70:	461a      	mov	r2, r3
 8001e72:	2101      	movs	r1, #1
 8001e74:	206f      	movs	r0, #111	; 0x6f
 8001e76:	f002 f8a5 	bl	8003fc4 <RadioSpiWriteRegisters>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001e7e:	b212      	sxth	r2, r2
 8001e80:	4611      	mov	r1, r2
 8001e82:	7019      	strb	r1, [r3, #0]
 8001e84:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e88:	705a      	strb	r2, [r3, #1]

}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000036c 	.word	0x2000036c

08001e98 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001ea2:	f107 030f 	add.w	r3, r7, #15
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	209e      	movs	r0, #158	; 0x9e
 8001eac:	f002 f8d6 	bl	800405c <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	f023 0306 	bic.w	r3, r3, #6
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	e004      	b.n	8001ed6 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001ed6:	f107 030f 	add.w	r3, r7, #15
 8001eda:	461a      	mov	r2, r3
 8001edc:	2101      	movs	r1, #1
 8001ede:	209e      	movs	r0, #158	; 0x9e
 8001ee0:	f002 f870 	bl	8003fc4 <RadioSpiWriteRegisters>
  
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 f8fb 	bl	80040f4 <RadioSpiCommandStrobes>
 8001efe:	4602      	mov	r2, r0
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SpiritCmdStrobeCommand+0x2c>)
 8001f02:	b212      	sxth	r2, r2
 8001f04:	4611      	mov	r1, r2
 8001f06:	7019      	strb	r1, [r3, #0]
 8001f08:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f0c:	705a      	strb	r2, [r3, #1]
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000036c 	.word	0x2000036c

08001f1c <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	785a      	ldrb	r2, [r3, #1]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	789b      	ldrb	r3, [r3, #2]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f107 020f 	add.w	r2, r7, #15
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 f83f 	bl	8003fc4 <RadioSpiWriteRegisters>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <SpiritGpioInit+0x44>)
 8001f4a:	b212      	sxth	r2, r2
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	7019      	strb	r1, [r3, #0]
 8001f50:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f54:	705a      	strb	r2, [r3, #1]

}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000036c 	.word	0x2000036c

08001f64 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001f76:	f107 0308 	add.w	r3, r7, #8
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f005 f96a 	bl	8007258 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	461a      	mov	r2, r3
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	461a      	mov	r2, r3
 8001f96:	2104      	movs	r1, #4
 8001f98:	2090      	movs	r0, #144	; 0x90
 8001f9a:	f002 f813 	bl	8003fc4 <RadioSpiWriteRegisters>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SpiritIrqDeInit+0x54>)
 8001fa2:	b212      	sxth	r2, r2
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	7019      	strb	r1, [r3, #0]
 8001fa8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fac:	705a      	strb	r2, [r3, #1]
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000036c 	.word	0x2000036c

08001fbc <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	2090      	movs	r0, #144	; 0x90
 8001fd6:	f002 f841 	bl	800405c <RadioSpiReadRegisters>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <SpiritIrq+0xc8>)
 8001fde:	b212      	sxth	r2, r2
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	7019      	strb	r1, [r3, #0]
 8001fe4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fe8:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	74fb      	strb	r3, [r7, #19]
 8001fee:	e011      	b.n	8002014 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	3318      	adds	r3, #24
 8001ff4:	443b      	add	r3, r7
 8001ff6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	f1c3 0303 	rsb	r3, r3, #3
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4413      	add	r3, r2
 800200c:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 800200e:	7cfb      	ldrb	r3, [r7, #19]
 8002010:	3301      	adds	r3, #1
 8002012:	74fb      	strb	r3, [r7, #19]
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d9ea      	bls.n	8001ff0 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	43db      	mvns	r3, r3
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4013      	ands	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e003      	b.n	8002034 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8002034:	2300      	movs	r3, #0
 8002036:	74bb      	strb	r3, [r7, #18]
 8002038:	e00e      	b.n	8002058 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 800203a:	7cbb      	ldrb	r3, [r7, #18]
 800203c:	f1c3 0303 	rsb	r3, r3, #3
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	40da      	lsrs	r2, r3
 8002046:	7cbb      	ldrb	r3, [r7, #18]
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	3318      	adds	r3, #24
 800204c:	443b      	add	r3, r7
 800204e:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8002052:	7cbb      	ldrb	r3, [r7, #18]
 8002054:	3301      	adds	r3, #1
 8002056:	74bb      	strb	r3, [r7, #18]
 8002058:	7cbb      	ldrb	r3, [r7, #18]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d9ed      	bls.n	800203a <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	461a      	mov	r2, r3
 8002064:	2104      	movs	r1, #4
 8002066:	2090      	movs	r0, #144	; 0x90
 8002068:	f001 ffac 	bl	8003fc4 <RadioSpiWriteRegisters>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SpiritIrq+0xc8>)
 8002070:	b212      	sxth	r2, r2
 8002072:	4611      	mov	r1, r2
 8002074:	7019      	strb	r1, [r3, #0]
 8002076:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800207a:	705a      	strb	r2, [r3, #1]

}
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	2000036c 	.word	0x2000036c

08002088 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	461a      	mov	r2, r3
 800209a:	2104      	movs	r1, #4
 800209c:	20fa      	movs	r0, #250	; 0xfa
 800209e:	f001 ffdd 	bl	800405c <RadioSpiReadRegisters>
 80020a2:	4602      	mov	r2, r0
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <SpiritIrqGetStatus+0x60>)
 80020a6:	b212      	sxth	r2, r2
 80020a8:	4611      	mov	r1, r2
 80020aa:	7019      	strb	r1, [r3, #0]
 80020ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020b0:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	74fb      	strb	r3, [r7, #19]
 80020b6:	e00e      	b.n	80020d6 <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	f1c3 0303 	rsb	r3, r3, #3
 80020be:	3318      	adds	r3, #24
 80020c0:	443b      	add	r3, r7
 80020c2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	3301      	adds	r3, #1
 80020d4:	74fb      	strb	r3, [r7, #19]
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d9ed      	bls.n	80020b8 <SpiritIrqGetStatus+0x30>
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000036c 	.word	0x2000036c

080020ec <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	461a      	mov	r2, r3
 80020f6:	2104      	movs	r1, #4
 80020f8:	20fa      	movs	r0, #250	; 0xfa
 80020fa:	f001 ffaf 	bl	800405c <RadioSpiReadRegisters>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <SpiritIrqClearStatus+0x2c>)
 8002102:	b212      	sxth	r2, r2
 8002104:	4611      	mov	r1, r2
 8002106:	7019      	strb	r1, [r3, #0]
 8002108:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800210c:	705a      	strb	r2, [r3, #1]

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000036c 	.word	0x2000036c

0800211c <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	461a      	mov	r2, r3
 8002126:	2101      	movs	r1, #1
 8002128:	20e7      	movs	r0, #231	; 0xe7
 800212a:	f001 ff97 	bl	800405c <RadioSpiReadRegisters>
 800212e:	4602      	mov	r2, r0
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8002132:	b212      	sxth	r2, r2
 8002134:	4611      	mov	r1, r2
 8002136:	7019      	strb	r1, [r3, #0]
 8002138:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800213c:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002144:	b2db      	uxtb	r3, r3

}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000036c 	.word	0x2000036c

08002154 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8002154:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002158:	b08a      	sub	sp, #40	; 0x28
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a70      	ldr	r2, [pc, #448]	; (8002324 <SpiritManagementSetFrequencyBase+0x1d0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d307      	bcc.n	8002176 <SpiritManagementSetFrequencyBase+0x22>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a6f      	ldr	r2, [pc, #444]	; (8002328 <SpiritManagementSetFrequencyBase+0x1d4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d803      	bhi.n	8002176 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002174:	e01a      	b.n	80021ac <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a6c      	ldr	r2, [pc, #432]	; (800232c <SpiritManagementSetFrequencyBase+0x1d8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d907      	bls.n	800218e <SpiritManagementSetFrequencyBase+0x3a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a6b      	ldr	r2, [pc, #428]	; (8002330 <SpiritManagementSetFrequencyBase+0x1dc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d803      	bhi.n	800218e <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800218c:	e00e      	b.n	80021ac <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a68      	ldr	r2, [pc, #416]	; (8002334 <SpiritManagementSetFrequencyBase+0x1e0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d907      	bls.n	80021a6 <SpiritManagementSetFrequencyBase+0x52>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a67      	ldr	r2, [pc, #412]	; (8002338 <SpiritManagementSetFrequencyBase+0x1e4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d803      	bhi.n	80021a6 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 800219e:	2302      	movs	r3, #2
 80021a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021a4:	e002      	b.n	80021ac <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 80021a6:	2303      	movs	r3, #3
 80021a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80021ac:	f000 fffe 	bl	80031ac <SpiritRadioGetFrequencyOffset>
 80021b0:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80021b2:	f000 ffdb 	bl	800316c <SpiritRadioGetChannelSpace>
 80021b6:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80021b8:	f000 ffc0 	bl	800313c <SpiritRadioGetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80021c0:	6a3a      	ldr	r2, [r7, #32]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	441a      	add	r2, r3
 80021c6:	7efb      	ldrb	r3, [r7, #27]
 80021c8:	69f9      	ldr	r1, [r7, #28]
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80021d2:	f001 fdd7 	bl	8003d84 <SpiritRadioGetRefDiv>
 80021d6:	4603      	mov	r3, r0
 80021d8:	3301      	adds	r3, #1
 80021da:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80021dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d83a      	bhi.n	800225a <SpiritManagementSetFrequencyBase+0x106>
 80021e4:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <SpiritManagementSetFrequencyBase+0x98>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	08002245 	.word	0x08002245
 80021f0:	0800222d 	.word	0x0800222d
 80021f4:	08002215 	.word	0x08002215
 80021f8:	080021fd 	.word	0x080021fd
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	4a4f      	ldr	r2, [pc, #316]	; (800233c <SpiritManagementSetFrequencyBase+0x1e8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d803      	bhi.n	800220c <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff fe47 	bl	8001e98 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800220a:	e026      	b.n	800225a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 800220c:	2001      	movs	r0, #1
 800220e:	f7ff fe43 	bl	8001e98 <SpiritCalibrationSelectVco>
    break;
 8002212:	e022      	b.n	800225a <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	4a4a      	ldr	r2, [pc, #296]	; (8002340 <SpiritManagementSetFrequencyBase+0x1ec>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d803      	bhi.n	8002224 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff fe3b 	bl	8001e98 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002222:	e01a      	b.n	800225a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002224:	2001      	movs	r0, #1
 8002226:	f7ff fe37 	bl	8001e98 <SpiritCalibrationSelectVco>
    break;
 800222a:	e016      	b.n	800225a <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	4a45      	ldr	r2, [pc, #276]	; (8002344 <SpiritManagementSetFrequencyBase+0x1f0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d803      	bhi.n	800223c <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff fe2f 	bl	8001e98 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800223a:	e00e      	b.n	800225a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff fe2b 	bl	8001e98 <SpiritCalibrationSelectVco>
    break;
 8002242:	e00a      	b.n	800225a <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	4a40      	ldr	r2, [pc, #256]	; (8002348 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d803      	bhi.n	8002254 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff fe23 	bl	8001e98 <SpiritCalibrationSelectVco>
 8002252:	e002      	b.n	800225a <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff fe1f 	bl	8001e98 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f000 fe86 	bl	8002f6c <SpiritRadioSearchWCP>
 8002260:	4603      	mov	r3, r0
 8002262:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7fe f8bd 	bl	80003e4 <__aeabi_ui2d>
 800226a:	4604      	mov	r4, r0
 800226c:	460d      	mov	r5, r1
 800226e:	7cfb      	ldrb	r3, [r7, #19]
 8002270:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002274:	4935      	ldr	r1, [pc, #212]	; (800234c <SpiritManagementSetFrequencyBase+0x1f8>)
 8002276:	5c8a      	ldrb	r2, [r1, r2]
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	049b      	lsls	r3, r3, #18
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f8c0 	bl	8000404 <__aeabi_i2d>
 8002284:	4680      	mov	r8, r0
 8002286:	4689      	mov	r9, r1
 8002288:	f001 fdf0 	bl	8003e6c <SpiritRadioGetXtalFrequency>
 800228c:	4603      	mov	r3, r0
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f8a8 	bl	80003e4 <__aeabi_ui2d>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4640      	mov	r0, r8
 800229a:	4649      	mov	r1, r9
 800229c:	f7fe fa46 	bl	800072c <__aeabi_ddiv>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4620      	mov	r0, r4
 80022a6:	4629      	mov	r1, r5
 80022a8:	f7fe f916 	bl	80004d8 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f7fe fbe8 	bl	8000a88 <__aeabi_d2uiz>
 80022b8:	4603      	mov	r3, r0
 80022ba:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	0d5b      	lsrs	r3, r3, #21
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	7cbb      	ldrb	r3, [r7, #18]
 80022ca:	015b      	lsls	r3, r3, #5
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	0b5b      	lsrs	r3, r3, #13
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022f0:	4917      	ldr	r1, [pc, #92]	; (8002350 <SpiritManagementSetFrequencyBase+0x1fc>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	461a      	mov	r2, r3
 8002300:	2104      	movs	r1, #4
 8002302:	2008      	movs	r0, #8
 8002304:	f001 fe5e 	bl	8003fc4 <RadioSpiWriteRegisters>
 8002308:	4602      	mov	r2, r0
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <SpiritManagementSetFrequencyBase+0x200>)
 800230c:	b212      	sxth	r2, r2
 800230e:	4611      	mov	r1, r2
 8002310:	7019      	strb	r1, [r3, #0]
 8002312:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002316:	705a      	strb	r2, [r3, #1]
}
 8002318:	bf00      	nop
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002322:	bf00      	nop
 8002324:	2e5f5680 	.word	0x2e5f5680
 8002328:	390c2fe0 	.word	0x390c2fe0
 800232c:	1701e47f 	.word	0x1701e47f
 8002330:	1c146a60 	.word	0x1c146a60
 8002334:	11d260bf 	.word	0x11d260bf
 8002338:	14ced7e0 	.word	0x14ced7e0
 800233c:	099cf4e1 	.word	0x099cf4e1
 8002340:	1339e9c3 	.word	0x1339e9c3
 8002344:	19a28d05 	.word	0x19a28d05
 8002348:	33451a0a 	.word	0x33451a0a
 800234c:	0800a47c 	.word	0x0800a47c
 8002350:	0800a478 	.word	0x0800a478
 8002354:	2000036c 	.word	0x2000036c

08002358 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002366:	f001 fd81 	bl	8003e6c <SpiritRadioGetXtalFrequency>
 800236a:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 800236c:	2300      	movs	r3, #0
 800236e:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4a57      	ldr	r2, [pc, #348]	; (80024d0 <SpiritManagementWaVcoCalibration+0x178>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d90f      	bls.n	8002398 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002378:	f001 fd04 	bl	8003d84 <SpiritRadioGetRefDiv>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10a      	bne.n	8002398 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8002386:	f001 f873 	bl	8003470 <SpiritRadioGetFrequencyBase>
 800238a:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 800238c:	2001      	movs	r0, #1
 800238e:	f001 fcc9 	bl	8003d24 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fede 	bl	8002154 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002398:	f001 f86a 	bl	8003470 <SpiritRadioGetFrequencyBase>
 800239c:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 800239e:	2325      	movs	r3, #37	; 0x25
 80023a0:	707b      	strb	r3, [r7, #1]
 80023a2:	1c7b      	adds	r3, r7, #1
 80023a4:	461a      	mov	r2, r3
 80023a6:	2101      	movs	r1, #1
 80023a8:	20a1      	movs	r0, #161	; 0xa1
 80023aa:	f001 fe0b 	bl	8003fc4 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 80023ae:	2001      	movs	r0, #1
 80023b0:	f7ff fcb6 	bl	8001d20 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 80023b4:	f001 fdd4 	bl	8003f60 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 80023b8:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <SpiritManagementWaVcoCalibration+0x17c>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b40      	cmp	r3, #64	; 0x40
 80023c4:	d10d      	bne.n	80023e2 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 80023ca:	2062      	movs	r0, #98	; 0x62
 80023cc:	f7ff fd8e 	bl	8001eec <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80023d0:	f001 fdc6 	bl	8003f60 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80023d4:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <SpiritManagementWaVcoCalibration+0x17c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d1f6      	bne.n	80023d0 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80023e2:	2066      	movs	r0, #102	; 0x66
 80023e4:	f7ff fd82 	bl	8001eec <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80023ec:	f001 fdb8 	bl	8003f60 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80023f0:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <SpiritManagementWaVcoCalibration+0x17c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b13      	cmp	r3, #19
 80023fc:	d106      	bne.n	800240c <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80023fe:	7b7b      	ldrb	r3, [r7, #13]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	737a      	strb	r2, [r7, #13]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d101      	bne.n	800240c <SpiritManagementWaVcoCalibration+0xb4>
 8002408:	2301      	movs	r3, #1
 800240a:	e05d      	b.n	80024c8 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 800240c:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <SpiritManagementWaVcoCalibration+0x17c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b0f      	cmp	r3, #15
 8002418:	d1e8      	bne.n	80023ec <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 800241a:	f7ff fcb9 	bl	8001d90 <SpiritCalibrationGetVcoCalData>
 800241e:	4603      	mov	r3, r0
 8002420:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8002422:	2062      	movs	r0, #98	; 0x62
 8002424:	f7ff fd62 	bl	8001eec <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002428:	f001 fd9a 	bl	8003f60 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <SpiritManagementWaVcoCalibration+0x17c>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b03      	cmp	r3, #3
 8002438:	d1f6      	bne.n	8002428 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 800243a:	2065      	movs	r0, #101	; 0x65
 800243c:	f7ff fd56 	bl	8001eec <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002440:	2300      	movs	r3, #0
 8002442:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002444:	f001 fd8c 	bl	8003f60 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <SpiritManagementWaVcoCalibration+0x17c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b13      	cmp	r3, #19
 8002454:	d106      	bne.n	8002464 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8002456:	7b7b      	ldrb	r3, [r7, #13]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	737a      	strb	r2, [r7, #13]
 800245c:	2b05      	cmp	r3, #5
 800245e:	d101      	bne.n	8002464 <SpiritManagementWaVcoCalibration+0x10c>
 8002460:	2301      	movs	r3, #1
 8002462:	e031      	b.n	80024c8 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b0f      	cmp	r3, #15
 8002470:	d1e8      	bne.n	8002444 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002472:	f7ff fc8d 	bl	8001d90 <SpiritCalibrationGetVcoCalData>
 8002476:	4603      	mov	r3, r0
 8002478:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800247a:	2062      	movs	r0, #98	; 0x62
 800247c:	f7ff fd36 	bl	8001eec <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002480:	f001 fd6e 	bl	8003f60 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b03      	cmp	r3, #3
 8002490:	d1f6      	bne.n	8002480 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002492:	7bbb      	ldrb	r3, [r7, #14]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d102      	bne.n	800249e <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002498:	2063      	movs	r0, #99	; 0x63
 800249a:	f7ff fd27 	bl	8001eec <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7ff fc3e 	bl	8001d20 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 80024aa:	2000      	movs	r0, #0
 80024ac:	f001 fc3a 	bl	8003d24 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fe4f 	bl	8002154 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fc85 	bl	8001dc8 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 80024be:	78bb      	ldrb	r3, [r7, #2]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fcb5 	bl	8001e30 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	01c9c380 	.word	0x01c9c380
 80024d4:	2000036c 	.word	0x2000036c

080024d8 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <SpiritManagementWaCmdStrobeTx+0x60>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d023      	beq.n	8002530 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <SpiritManagementWaCmdStrobeTx+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <SpiritManagementWaCmdStrobeTx+0x68>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d908      	bls.n	8002504 <SpiritManagementWaCmdStrobeTx+0x2c>
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <SpiritManagementWaCmdStrobeTx+0x64>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a13      	ldr	r2, [pc, #76]	; (8002544 <SpiritManagementWaCmdStrobeTx+0x6c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d803      	bhi.n	8002504 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80024fc:	20c0      	movs	r0, #192	; 0xc0
 80024fe:	f001 fb87 	bl	8003c10 <SpiritRadioSetPACwc>
 8002502:	e002      	b.n	800250a <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8002504:	2000      	movs	r0, #0
 8002506:	f001 fb83 	bl	8003c10 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 800250a:	2311      	movs	r3, #17
 800250c:	71fb      	strb	r3, [r7, #7]
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	461a      	mov	r2, r3
 8002512:	2101      	movs	r1, #1
 8002514:	20a9      	movs	r0, #169	; 0xa9
 8002516:	f001 fd55 	bl	8003fc4 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 800251a:	2320      	movs	r3, #32
 800251c:	71fb      	strb	r3, [r7, #7]
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	461a      	mov	r2, r3
 8002522:	2101      	movs	r1, #1
 8002524:	20a5      	movs	r0, #165	; 0xa5
 8002526:	f001 fd4d 	bl	8003fc4 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 800252a:	4b03      	ldr	r3, [pc, #12]	; (8002538 <SpiritManagementWaCmdStrobeTx+0x60>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000000c 	.word	0x2000000c
 800253c:	20000364 	.word	0x20000364
 8002540:	08f0d17f 	.word	0x08f0d17f
 8002544:	1c03a180 	.word	0x1c03a180

08002548 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d00d      	beq.n	8002574 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002558:	2398      	movs	r3, #152	; 0x98
 800255a:	71fb      	strb	r3, [r7, #7]
 800255c:	1dfb      	adds	r3, r7, #7
 800255e:	461a      	mov	r2, r3
 8002560:	2101      	movs	r1, #1
 8002562:	20a5      	movs	r0, #165	; 0xa5
 8002564:	f001 fd2e 	bl	8003fc4 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002568:	2000      	movs	r0, #0
 800256a:	f001 fb51 	bl	8003c10 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 800256e:	4b03      	ldr	r3, [pc, #12]	; (800257c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
  }
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2000000c 	.word	0x2000000c

08002580 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <SpiritManagementWaTRxFcMem+0x20>)
 800258a:	2202      	movs	r2, #2
 800258c:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <SpiritManagementWaTRxFcMem+0x24>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2000000c 	.word	0x2000000c
 80025a4:	20000364 	.word	0x20000364

080025a8 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 80025ae:	23ca      	movs	r3, #202	; 0xca
 80025b0:	71fb      	strb	r3, [r7, #7]
 80025b2:	1dfb      	adds	r3, r7, #7
 80025b4:	461a      	mov	r2, r3
 80025b6:	2101      	movs	r1, #1
 80025b8:	20b2      	movs	r0, #178	; 0xb2
 80025ba:	f001 fd03 	bl	8003fc4 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80025be:	2304      	movs	r3, #4
 80025c0:	71fb      	strb	r3, [r7, #7]
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	461a      	mov	r2, r3
 80025c6:	2101      	movs	r1, #1
 80025c8:	20a8      	movs	r0, #168	; 0xa8
 80025ca:	f001 fcfb 	bl	8003fc4 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 80025ce:	1dfb      	adds	r3, r7, #7
 80025d0:	461a      	mov	r2, r3
 80025d2:	2101      	movs	r1, #1
 80025d4:	20a8      	movs	r0, #168	; 0xa8
 80025d6:	f001 fd41 	bl	800405c <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80025da:	2300      	movs	r3, #0
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	1dfb      	adds	r3, r7, #7
 80025e0:	461a      	mov	r2, r3
 80025e2:	2101      	movs	r1, #1
 80025e4:	20a8      	movs	r0, #168	; 0xa8
 80025e6:	f001 fced 	bl	8003fc4 <RadioSpiWriteRegisters>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	461a      	mov	r2, r3
 8002602:	2101      	movs	r1, #1
 8002604:	2051      	movs	r0, #81	; 0x51
 8002606:	f001 fd29 	bl	800405c <RadioSpiReadRegisters>
 800260a:	4602      	mov	r2, r0
 800260c:	4b63      	ldr	r3, [pc, #396]	; (800279c <SpiritPktBasicInit+0x1a8>)
 800260e:	b212      	sxth	r2, r2
 8002610:	4611      	mov	r1, r2
 8002612:	7019      	strb	r1, [r3, #0]
 8002614:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002618:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 800261a:	7a3b      	ldrb	r3, [r7, #8]
 800261c:	f023 0320 	bic.w	r3, r3, #32
 8002620:	b2db      	uxtb	r3, r3
 8002622:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002624:	7a3b      	ldrb	r3, [r7, #8]
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	461a      	mov	r2, r3
 8002634:	2101      	movs	r1, #1
 8002636:	2051      	movs	r0, #81	; 0x51
 8002638:	f001 fcc4 	bl	8003fc4 <RadioSpiWriteRegisters>
 800263c:	4602      	mov	r2, r0
 800263e:	4b57      	ldr	r3, [pc, #348]	; (800279c <SpiritPktBasicInit+0x1a8>)
 8002640:	b212      	sxth	r2, r2
 8002642:	4611      	mov	r1, r2
 8002644:	7019      	strb	r1, [r3, #0]
 8002646:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800264a:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800264c:	f107 0308 	add.w	r3, r7, #8
 8002650:	461a      	mov	r2, r3
 8002652:	2101      	movs	r1, #1
 8002654:	204f      	movs	r0, #79	; 0x4f
 8002656:	f001 fd01 	bl	800405c <RadioSpiReadRegisters>
 800265a:	4602      	mov	r2, r0
 800265c:	4b4f      	ldr	r3, [pc, #316]	; (800279c <SpiritPktBasicInit+0x1a8>)
 800265e:	b212      	sxth	r2, r2
 8002660:	4611      	mov	r1, r2
 8002662:	7019      	strb	r1, [r3, #0]
 8002664:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002668:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 800266a:	7a3b      	ldrb	r3, [r7, #8]
 800266c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002670:	b2db      	uxtb	r3, r3
 8002672:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	461a      	mov	r2, r3
 800267a:	2101      	movs	r1, #1
 800267c:	204f      	movs	r0, #79	; 0x4f
 800267e:	f001 fca1 	bl	8003fc4 <RadioSpiWriteRegisters>
 8002682:	4602      	mov	r2, r0
 8002684:	4b45      	ldr	r3, [pc, #276]	; (800279c <SpiritPktBasicInit+0x1a8>)
 8002686:	b212      	sxth	r2, r2
 8002688:	4611      	mov	r1, r2
 800268a:	7019      	strb	r1, [r3, #0]
 800268c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002690:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7b1b      	ldrb	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d102      	bne.n	80026a0 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 800269a:	2308      	movs	r3, #8
 800269c:	723b      	strb	r3, [r7, #8]
 800269e:	e001      	b.n	80026a4 <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 80026a0:	2300      	movs	r3, #0
 80026a2:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 80026a4:	7a3a      	ldrb	r2, [r7, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7adb      	ldrb	r3, [r3, #11]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7a5b      	ldrb	r3, [r3, #9]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <SpiritPktBasicInit+0xca>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	7a5b      	ldrb	r3, [r3, #9]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 80026d8:	4313      	orrs	r3, r2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7a9b      	ldrb	r3, [r3, #10]
 80026e2:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7b9b      	ldrb	r3, [r3, #14]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d104      	bne.n	80026f6 <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	f043 0310 	orr.w	r3, r3, #16
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7b5b      	ldrb	r3, [r3, #13]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d104      	bne.n	8002708 <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	461a      	mov	r2, r3
 800270e:	2104      	movs	r1, #4
 8002710:	2030      	movs	r0, #48	; 0x30
 8002712:	f001 fc57 	bl	8003fc4 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e01d      	b.n	8002758 <SpiritPktBasicInit+0x164>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f1c3 0303 	rsb	r3, r3, #3
 800272a:	429a      	cmp	r2, r3
 800272c:	da06      	bge.n	800273c <SpiritPktBasicInit+0x148>
    {
      tempRegValue[i]=0;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	3310      	adds	r3, #16
 8002732:	443b      	add	r3, r7
 8002734:	2200      	movs	r2, #0
 8002736:	f803 2c08 	strb.w	r2, [r3, #-8]
 800273a:	e00a      	b.n	8002752 <SpiritPktBasicInit+0x15e>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	40da      	lsrs	r2, r3
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	3310      	adds	r3, #16
 800274c:	443b      	add	r3, r7
 800274e:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	3301      	adds	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d9de      	bls.n	800271c <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7a9b      	ldrb	r3, [r3, #10]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d103      	bne.n	800276e <SpiritPktBasicInit+0x17a>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 8002766:	2000      	movs	r0, #0
 8002768:	f000 f8fc 	bl	8002964 <SpiritPktCommonFilterOnCrc>
 800276c:	e002      	b.n	8002774 <SpiritPktBasicInit+0x180>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 800276e:	2001      	movs	r0, #1
 8002770:	f000 f8f8 	bl	8002964 <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	461a      	mov	r2, r3
 800277a:	2104      	movs	r1, #4
 800277c:	2036      	movs	r0, #54	; 0x36
 800277e:	f001 fc21 	bl	8003fc4 <RadioSpiWriteRegisters>
 8002782:	4602      	mov	r2, r0
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SpiritPktBasicInit+0x1a8>)
 8002786:	b212      	sxth	r2, r2
 8002788:	4611      	mov	r1, r2
 800278a:	7019      	strb	r1, [r3, #0]
 800278c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002790:	705a      	strb	r2, [r3, #1]

}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2000036c 	.word	0x2000036c

080027a0 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	461a      	mov	r2, r3
 80027ae:	2101      	movs	r1, #1
 80027b0:	204f      	movs	r0, #79	; 0x4f
 80027b2:	f001 fc53 	bl	800405c <RadioSpiReadRegisters>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <SpiritPktBasicAddressesInit+0xd8>)
 80027ba:	b212      	sxth	r2, r2
 80027bc:	4611      	mov	r1, r2
 80027be:	7019      	strb	r1, [r3, #0]
 80027c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027c4:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d105      	bne.n	80027da <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80027ce:	7b3b      	ldrb	r3, [r7, #12]
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	733b      	strb	r3, [r7, #12]
 80027d8:	e004      	b.n	80027e4 <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80027da:	7b3b      	ldrb	r3, [r7, #12]
 80027dc:	f023 0308 	bic.w	r3, r3, #8
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	789b      	ldrb	r3, [r3, #2]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80027ec:	7b3b      	ldrb	r3, [r7, #12]
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	733b      	strb	r3, [r7, #12]
 80027f6:	e004      	b.n	8002802 <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80027f8:	7b3b      	ldrb	r3, [r7, #12]
 80027fa:	f023 0304 	bic.w	r3, r3, #4
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	791b      	ldrb	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d105      	bne.n	8002816 <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800280a:	7b3b      	ldrb	r3, [r7, #12]
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	b2db      	uxtb	r3, r3
 8002812:	733b      	strb	r3, [r7, #12]
 8002814:	e004      	b.n	8002820 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002816:	7b3b      	ldrb	r3, [r7, #12]
 8002818:	f023 0302 	bic.w	r3, r3, #2
 800281c:	b2db      	uxtb	r3, r3
 800281e:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	461a      	mov	r2, r3
 8002826:	2101      	movs	r1, #1
 8002828:	204f      	movs	r0, #79	; 0x4f
 800282a:	f001 fbcb 	bl	8003fc4 <RadioSpiWriteRegisters>
 800282e:	4602      	mov	r2, r0
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <SpiritPktBasicAddressesInit+0xd8>)
 8002832:	b212      	sxth	r2, r2
 8002834:	4611      	mov	r1, r2
 8002836:	7019      	strb	r1, [r3, #0]
 8002838:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800283c:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	795b      	ldrb	r3, [r3, #5]
 8002842:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	78db      	ldrb	r3, [r3, #3]
 8002848:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002850:	f107 030c 	add.w	r3, r7, #12
 8002854:	461a      	mov	r2, r3
 8002856:	2103      	movs	r1, #3
 8002858:	204c      	movs	r0, #76	; 0x4c
 800285a:	f001 fbb3 	bl	8003fc4 <RadioSpiWriteRegisters>
 800285e:	4602      	mov	r2, r0
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SpiritPktBasicAddressesInit+0xd8>)
 8002862:	b212      	sxth	r2, r2
 8002864:	4611      	mov	r1, r2
 8002866:	7019      	strb	r1, [r3, #0]
 8002868:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800286c:	705a      	strb	r2, [r3, #1]
  
  
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000036c 	.word	0x2000036c

0800287c <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	461a      	mov	r2, r3
 8002886:	2101      	movs	r1, #1
 8002888:	2030      	movs	r0, #48	; 0x30
 800288a:	f001 fbe7 	bl	800405c <RadioSpiReadRegisters>
 800288e:	4602      	mov	r2, r0
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <SpiritPktBasicGetAddressField+0x3c>)
 8002892:	b212      	sxth	r2, r2
 8002894:	4611      	mov	r1, r2
 8002896:	7019      	strb	r1, [r3, #0]
 8002898:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800289c:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	f003 0318 	and.w	r3, r3, #24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 80028ac:	2300      	movs	r3, #0
  }

}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	2000036c 	.word	0x2000036c

080028bc <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 80028ca:	f7ff ffd7 	bl	800287c <SpiritPktBasicGetAddressField>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 80028d4:	2301      	movs	r3, #1
 80028d6:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 80028d8:	f000 f828 	bl	800292c <SpiritPktCommonGetControlLength>
 80028dc:	4603      	mov	r3, r0
 80028de:	b29a      	uxth	r2, r3
 80028e0:	89fb      	ldrh	r3, [r7, #14]
 80028e2:	4413      	add	r3, r2
 80028e4:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	89fb      	ldrh	r3, [r7, #14]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 80028f4:	88fa      	ldrh	r2, [r7, #6]
 80028f6:	89fb      	ldrh	r3, [r7, #14]
 80028f8:	4413      	add	r3, r2
 80028fa:	121b      	asrs	r3, r3, #8
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	461a      	mov	r2, r3
 8002906:	2102      	movs	r1, #2
 8002908:	2034      	movs	r0, #52	; 0x34
 800290a:	f001 fb5b 	bl	8003fc4 <RadioSpiWriteRegisters>
 800290e:	4602      	mov	r2, r0
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <SpiritPktBasicSetPayloadLength+0x6c>)
 8002912:	b212      	sxth	r2, r2
 8002914:	4611      	mov	r1, r2
 8002916:	7019      	strb	r1, [r3, #0]
 8002918:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800291c:	705a      	strb	r2, [r3, #1]

}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	2000036c 	.word	0x2000036c

0800292c <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	461a      	mov	r2, r3
 8002936:	2101      	movs	r1, #1
 8002938:	2030      	movs	r0, #48	; 0x30
 800293a:	f001 fb8f 	bl	800405c <RadioSpiReadRegisters>
 800293e:	4602      	mov	r2, r0
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <SpiritPktCommonGetControlLength+0x34>)
 8002942:	b212      	sxth	r2, r2
 8002944:	4611      	mov	r1, r2
 8002946:	7019      	strb	r1, [r3, #0]
 8002948:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800294c:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	b2db      	uxtb	r3, r3

}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000036c 	.word	0x2000036c

08002964 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 800296e:	f107 030f 	add.w	r3, r7, #15
 8002972:	461a      	mov	r2, r3
 8002974:	2101      	movs	r1, #1
 8002976:	204f      	movs	r0, #79	; 0x4f
 8002978:	f001 fb70 	bl	800405c <RadioSpiReadRegisters>
 800297c:	4602      	mov	r2, r0
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002980:	b212      	sxth	r2, r2
 8002982:	4611      	mov	r1, r2
 8002984:	7019      	strb	r1, [r3, #0]
 8002986:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800298a:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d105      	bne.n	800299e <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e004      	b.n	80029a8 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80029a8:	f107 030f 	add.w	r3, r7, #15
 80029ac:	461a      	mov	r2, r3
 80029ae:	2101      	movs	r1, #1
 80029b0:	204f      	movs	r0, #79	; 0x4f
 80029b2:	f001 fb07 	bl	8003fc4 <RadioSpiWriteRegisters>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <SpiritPktCommonFilterOnCrc+0x6c>)
 80029ba:	b212      	sxth	r2, r2
 80029bc:	4611      	mov	r1, r2
 80029be:	7019      	strb	r1, [r3, #0]
 80029c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029c4:	705a      	strb	r2, [r3, #1]

}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2000036c 	.word	0x2000036c

080029d4 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 80029de:	1dfb      	adds	r3, r7, #7
 80029e0:	461a      	mov	r2, r3
 80029e2:	2101      	movs	r1, #1
 80029e4:	204b      	movs	r0, #75	; 0x4b
 80029e6:	f001 faed 	bl	8003fc4 <RadioSpiWriteRegisters>
 80029ea:	4602      	mov	r2, r0
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <SpiritPktCommonSetDestinationAddress+0x30>)
 80029ee:	b212      	sxth	r2, r2
 80029f0:	4611      	mov	r1, r2
 80029f2:	7019      	strb	r1, [r3, #0]
 80029f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029f8:	705a      	strb	r2, [r3, #1]

}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000036c 	.word	0x2000036c

08002a08 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002a12:	f107 030f 	add.w	r3, r7, #15
 8002a16:	461a      	mov	r2, r3
 8002a18:	2101      	movs	r1, #1
 8002a1a:	203a      	movs	r0, #58	; 0x3a
 8002a1c:	f001 fb1e 	bl	800405c <RadioSpiReadRegisters>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <SpiritQiSqiCheck+0x6c>)
 8002a24:	b212      	sxth	r2, r2
 8002a26:	4611      	mov	r1, r2
 8002a28:	7019      	strb	r1, [r3, #0]
 8002a2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a2e:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d105      	bne.n	8002a42 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e004      	b.n	8002a4c <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	f023 0302 	bic.w	r3, r3, #2
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002a4c:	f107 030f 	add.w	r3, r7, #15
 8002a50:	461a      	mov	r2, r3
 8002a52:	2101      	movs	r1, #1
 8002a54:	203a      	movs	r0, #58	; 0x3a
 8002a56:	f001 fab5 	bl	8003fc4 <RadioSpiWriteRegisters>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <SpiritQiSqiCheck+0x6c>)
 8002a5e:	b212      	sxth	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	7019      	strb	r1, [r3, #0]
 8002a64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a68:	705a      	strb	r2, [r3, #1]

}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000036c 	.word	0x2000036c

08002a78 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002a82:	f107 030f 	add.w	r3, r7, #15
 8002a86:	461a      	mov	r2, r3
 8002a88:	2101      	movs	r1, #1
 8002a8a:	203a      	movs	r0, #58	; 0x3a
 8002a8c:	f001 fae6 	bl	800405c <RadioSpiReadRegisters>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <SpiritQiSetSqiThreshold+0x64>)
 8002a94:	b212      	sxth	r2, r2
 8002a96:	4611      	mov	r1, r2
 8002a98:	7019      	strb	r1, [r3, #0]
 8002a9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a9e:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002ab4:	f107 030f 	add.w	r3, r7, #15
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2101      	movs	r1, #1
 8002abc:	203a      	movs	r0, #58	; 0x3a
 8002abe:	f001 fa81 	bl	8003fc4 <RadioSpiWriteRegisters>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <SpiritQiSetSqiThreshold+0x64>)
 8002ac6:	b212      	sxth	r2, r2
 8002ac8:	4611      	mov	r1, r2
 8002aca:	7019      	strb	r1, [r3, #0]
 8002acc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ad0:	705a      	strb	r2, [r3, #1]

}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000036c 	.word	0x2000036c

08002ae0 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3382      	adds	r3, #130	; 0x82
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002af4:	f107 030f 	add.w	r3, r7, #15
 8002af8:	461a      	mov	r2, r3
 8002afa:	2101      	movs	r1, #1
 8002afc:	2022      	movs	r0, #34	; 0x22
 8002afe:	f001 fa61 	bl	8003fc4 <RadioSpiWriteRegisters>
 8002b02:	4602      	mov	r2, r0
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SpiritQiSetRssiThresholddBm+0x3c>)
 8002b06:	b212      	sxth	r2, r2
 8002b08:	4611      	mov	r1, r2
 8002b0a:	7019      	strb	r1, [r3, #0]
 8002b0c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b10:	705a      	strb	r2, [r3, #1]

}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2000036c 	.word	0x2000036c

08002b20 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b08d      	sub	sp, #52	; 0x34
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002b28:	23a0      	movs	r3, #160	; 0xa0
 8002b2a:	747b      	strb	r3, [r7, #17]
 8002b2c:	f107 0311 	add.w	r3, r7, #17
 8002b30:	461a      	mov	r2, r3
 8002b32:	2101      	movs	r1, #1
 8002b34:	209f      	movs	r0, #159	; 0x9f
 8002b36:	f001 fa45 	bl	8003fc4 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe f87b 	bl	8000c3c <__aeabi_i2f>
 8002b46:	4604      	mov	r4, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe f871 	bl	8000c34 <__aeabi_ui2f>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4619      	mov	r1, r3
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7fe f8c4 	bl	8000ce4 <__aeabi_fmul>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	49a0      	ldr	r1, [pc, #640]	; (8002de0 <SpiritRadioInit+0x2c0>)
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe f973 	bl	8000e4c <__aeabi_fdiv>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fa81 	bl	8001070 <__aeabi_f2iz>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002b72:	2063      	movs	r0, #99	; 0x63
 8002b74:	f001 fabe 	bl	80040f4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73bb      	strb	r3, [r7, #14]
 8002b7c:	e004      	b.n	8002b88 <SpiritRadioInit+0x68>
 8002b7e:	7bbb      	ldrb	r3, [r7, #14]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	73bb      	strb	r3, [r7, #14]
 8002b88:	7bbb      	ldrb	r3, [r7, #14]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2bff      	cmp	r3, #255	; 0xff
 8002b8e:	d1f6      	bne.n	8002b7e <SpiritRadioInit+0x5e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002b90:	f001 f9e6 	bl	8003f60 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002b94:	4b93      	ldr	r3, [pc, #588]	; (8002de4 <SpiritRadioInit+0x2c4>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d1ea      	bne.n	8002b78 <SpiritRadioInit+0x58>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002ba2:	4b91      	ldr	r3, [pc, #580]	; (8002de8 <SpiritRadioInit+0x2c8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a91      	ldr	r2, [pc, #580]	; (8002dec <SpiritRadioInit+0x2cc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d803      	bhi.n	8002bb4 <SpiritRadioInit+0x94>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f001 f90b 	bl	8003dc8 <SpiritRadioSetDigDiv>
 8002bb2:	e002      	b.n	8002bba <SpiritRadioInit+0x9a>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f001 f907 	bl	8003dc8 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002bba:	2062      	movs	r0, #98	; 0x62
 8002bbc:	f001 fa9a 	bl	80040f4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	737b      	strb	r3, [r7, #13]
 8002bc4:	e004      	b.n	8002bd0 <SpiritRadioInit+0xb0>
 8002bc6:	7b7b      	ldrb	r3, [r7, #13]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	737b      	strb	r3, [r7, #13]
 8002bd0:	7b7b      	ldrb	r3, [r7, #13]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2bff      	cmp	r3, #255	; 0xff
 8002bd6:	d1f6      	bne.n	8002bc6 <SpiritRadioInit+0xa6>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002bd8:	f001 f9c2 	bl	8003f60 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002bdc:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <SpiritRadioInit+0x2c4>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d1ea      	bne.n	8002bc0 <SpiritRadioInit+0xa0>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bec:	f7fe f826 	bl	8000c3c <__aeabi_i2f>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f04f 4191 	mov.w	r1, #1216348160	; 0x48800000
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe f874 	bl	8000ce4 <__aeabi_fmul>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	461c      	mov	r4, r3
 8002c00:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <SpiritRadioInit+0x2c8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe f815 	bl	8000c34 <__aeabi_ui2f>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f7fe f91c 	bl	8000e4c <__aeabi_fdiv>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fa2a 	bl	8001070 <__aeabi_f2iz>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002c20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002c30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	025a      	lsls	r2, r3, #9
 8002c3c:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <SpiritRadioInit+0x2c8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	099b      	lsrs	r3, r3, #6
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fc94 	bl	8002580 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2101      	movs	r1, #1
 8002c60:	20a3      	movs	r0, #163	; 0xa3
 8002c62:	f001 f9fb 	bl	800405c <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002c66:	7c3b      	ldrb	r3, [r7, #16]
 8002c68:	f023 0302 	bic.w	r3, r3, #2
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	743b      	strb	r3, [r7, #16]
 8002c70:	f107 0310 	add.w	r3, r7, #16
 8002c74:	461a      	mov	r2, r3
 8002c76:	2101      	movs	r1, #1
 8002c78:	20a3      	movs	r0, #163	; 0xa3
 8002c7a:	f001 f9a3 	bl	8003fc4 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f107 0216 	add.w	r2, r7, #22
 8002c86:	f107 0117 	add.w	r1, r7, #23
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fc38 	bl	8003500 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7b5a      	ldrb	r2, [r3, #13]
 8002c98:	7dbb      	ldrb	r3, [r7, #22]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	201c      	movs	r0, #28
 8002caa:	f001 f9d7 	bl	800405c <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f107 0214 	add.w	r2, r7, #20
 8002cb6:	f107 0115 	add.w	r1, r7, #21
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fdb8 	bl	8003830 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002cc0:	7d3b      	ldrb	r3, [r7, #20]
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	b25a      	sxtb	r2, r3
 8002cc6:	7c3b      	ldrb	r3, [r7, #16]
 8002cc8:	b25b      	sxtb	r3, r3
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	b25b      	sxtb	r3, r3
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	b25a      	sxtb	r2, r3
 8002cd4:	7d7b      	ldrb	r3, [r7, #21]
 8002cd6:	b25b      	sxtb	r3, r3
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f107 0212 	add.w	r2, r7, #18
 8002ce8:	f107 0113 	add.w	r1, r7, #19
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fcb9 	bl	8003664 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002cf2:	7cfb      	ldrb	r3, [r7, #19]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	b25a      	sxtb	r2, r3
 8002cf8:	7cbb      	ldrb	r3, [r7, #18]
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002d04:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <SpiritRadioInit+0x2c8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0b1b      	lsrs	r3, r3, #12
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd ff92 	bl	8000c34 <__aeabi_ui2f>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4619      	mov	r1, r3
 8002d14:	4836      	ldr	r0, [pc, #216]	; (8002df0 <SpiritRadioInit+0x2d0>)
 8002d16:	f7fe f899 	bl	8000e4c <__aeabi_fdiv>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fed5 	bl	8000ad0 <__aeabi_fsub>
 8002d26:	4603      	mov	r3, r0
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d2c:	f7fe f9c6 	bl	80010bc <__aeabi_f2uiz>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd ff7e 	bl	8000c34 <__aeabi_ui2f>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d3e:	f7fd fec7 	bl	8000ad0 <__aeabi_fsub>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe f987 	bl	800105c <__aeabi_fcmpgt>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <SpiritRadioInit+0x244>
 8002d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d56:	f7fe f9b1 	bl	80010bc <__aeabi_f2uiz>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e004      	b.n	8002d6e <SpiritRadioInit+0x24e>
 8002d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d66:	f7fe f9a9 	bl	80010bc <__aeabi_f2uiz>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <SpiritRadioInit+0x2c8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <SpiritRadioInit+0x2cc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d802      	bhi.n	8002d80 <SpiritRadioInit+0x260>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	777b      	strb	r3, [r7, #29]
 8002d7e:	e03f      	b.n	8002e00 <SpiritRadioInit+0x2e0>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <SpiritRadioInit+0x2c8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0b5b      	lsrs	r3, r3, #13
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd ff54 	bl	8000c34 <__aeabi_ui2f>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4817      	ldr	r0, [pc, #92]	; (8002df0 <SpiritRadioInit+0x2d0>)
 8002d92:	f7fe f85b 	bl	8000e4c <__aeabi_fdiv>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fe97 	bl	8000ad0 <__aeabi_fsub>
 8002da2:	4603      	mov	r3, r0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002da8:	f7fe f988 	bl	80010bc <__aeabi_f2uiz>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd ff40 	bl	8000c34 <__aeabi_ui2f>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4619      	mov	r1, r3
 8002db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dba:	f7fd fe89 	bl	8000ad0 <__aeabi_fsub>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe f949 	bl	800105c <__aeabi_fcmpgt>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d011      	beq.n	8002df4 <SpiritRadioInit+0x2d4>
 8002dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dd2:	f7fe f973 	bl	80010bc <__aeabi_f2uiz>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e00e      	b.n	8002dfe <SpiritRadioInit+0x2de>
 8002de0:	49742400 	.word	0x49742400
 8002de4:	2000036c 	.word	0x2000036c
 8002de8:	20000368 	.word	0x20000368
 8002dec:	01c9c37f 	.word	0x01c9c37f
 8002df0:	49afd520 	.word	0x49afd520
 8002df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002df6:	f7fe f961 	bl	80010bc <__aeabi_f2uiz>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002e00:	f107 030f 	add.w	r3, r7, #15
 8002e04:	461a      	mov	r2, r3
 8002e06:	2101      	movs	r1, #1
 8002e08:	2007      	movs	r0, #7
 8002e0a:	f001 f8db 	bl	8003fc4 <RadioSpiWriteRegisters>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <SpiritRadioInit+0x3c4>)
 8002e12:	b212      	sxth	r2, r2
 8002e14:	4611      	mov	r1, r2
 8002e16:	7019      	strb	r1, [r3, #0]
 8002e18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e1c:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002e1e:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <SpiritRadioInit+0x3c8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a32      	ldr	r2, [pc, #200]	; (8002eec <SpiritRadioInit+0x3cc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d90b      	bls.n	8002e40 <SpiritRadioInit+0x320>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <SpiritRadioInit+0x3c8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a30      	ldr	r2, [pc, #192]	; (8002ef0 <SpiritRadioInit+0x3d0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	bf8c      	ite	hi
 8002e32:	2301      	movhi	r3, #1
 8002e34:	2300      	movls	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 f85d 	bl	8002ef8 <SpiritRadioSetXtalFlag>
 8002e3e:	e00a      	b.n	8002e56 <SpiritRadioInit+0x336>
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <SpiritRadioInit+0x3c8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <SpiritRadioInit+0x3d4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	bf8c      	ite	hi
 8002e4a:	2301      	movhi	r3, #1
 8002e4c:	2300      	movls	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f851 	bl	8002ef8 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	206c      	movs	r0, #108	; 0x6c
 8002e60:	f001 f8b0 	bl	8003fc4 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002e64:	f107 031c 	add.w	r3, r7, #28
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	200c      	movs	r0, #12
 8002e6e:	f001 f8a9 	bl	8003fc4 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002e72:	f107 0318 	add.w	r3, r7, #24
 8002e76:	461a      	mov	r2, r3
 8002e78:	2104      	movs	r1, #4
 8002e7a:	201a      	movs	r0, #26
 8002e7c:	f001 f8a2 	bl	8003fc4 <RadioSpiWriteRegisters>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <SpiritRadioInit+0x3c4>)
 8002e84:	b212      	sxth	r2, r2
 8002e86:	4611      	mov	r1, r2
 8002e88:	7019      	strb	r1, [r3, #0]
 8002e8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e8e:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002e90:	2001      	movs	r0, #1
 8002e92:	f000 ff15 	bl	8003cc0 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002e9a:	23e3      	movs	r3, #227	; 0xe3
 8002e9c:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002e9e:	f107 031c 	add.w	r3, r7, #28
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	2099      	movs	r0, #153	; 0x99
 8002ea8:	f001 f88c 	bl	8003fc4 <RadioSpiWriteRegisters>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <SpiritRadioInit+0x3c4>)
 8002eb0:	b212      	sxth	r2, r2
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	7019      	strb	r1, [r3, #0]
 8002eb6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002eba:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002ebc:	2322      	movs	r3, #34	; 0x22
 8002ebe:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	20bc      	movs	r0, #188	; 0xbc
 8002eca:	f001 f87b 	bl	8003fc4 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f9ae 	bl	8003234 <SpiritRadioSetFrequencyBase>
 8002ed8:	4603      	mov	r3, r0
  
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3734      	adds	r7, #52	; 0x34
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000036c 	.word	0x2000036c
 8002ee8:	20000368 	.word	0x20000368
 8002eec:	01c9c380 	.word	0x01c9c380
 8002ef0:	02faf07f 	.word	0x02faf07f
 8002ef4:	017d783f 	.word	0x017d783f

08002ef8 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002f06:	f107 030f 	add.w	r3, r7, #15
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f001 f8a4 	bl	800405c <RadioSpiReadRegisters>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <SpiritRadioSetXtalFlag+0x70>)
 8002f18:	b212      	sxth	r2, r2
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	7019      	strb	r1, [r3, #0]
 8002f1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f22:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e004      	b.n	8002f40 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002f40:	f107 030f 	add.w	r3, r7, #15
 8002f44:	461a      	mov	r2, r3
 8002f46:	2101      	movs	r1, #1
 8002f48:	2001      	movs	r0, #1
 8002f4a:	f001 f83b 	bl	8003fc4 <RadioSpiWriteRegisters>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <SpiritRadioSetXtalFlag+0x70>)
 8002f52:	b212      	sxth	r2, r2
 8002f54:	4611      	mov	r1, r2
 8002f56:	7019      	strb	r1, [r3, #0]
 8002f58:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f5c:	705a      	strb	r2, [r3, #1]
  
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000036c 	.word	0x2000036c

08002f6c <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a3a      	ldr	r2, [pc, #232]	; (800306c <SpiritRadioSearchWCP+0x100>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d306      	bcc.n	8002f96 <SpiritRadioSearchWCP+0x2a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a39      	ldr	r2, [pc, #228]	; (8003070 <SpiritRadioSearchWCP+0x104>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d802      	bhi.n	8002f96 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002f90:	2306      	movs	r3, #6
 8002f92:	73bb      	strb	r3, [r7, #14]
 8002f94:	e01f      	b.n	8002fd6 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a36      	ldr	r2, [pc, #216]	; (8003074 <SpiritRadioSearchWCP+0x108>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d906      	bls.n	8002fac <SpiritRadioSearchWCP+0x40>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a35      	ldr	r2, [pc, #212]	; (8003078 <SpiritRadioSearchWCP+0x10c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d802      	bhi.n	8002fac <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	73bb      	strb	r3, [r7, #14]
 8002faa:	e014      	b.n	8002fd6 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a33      	ldr	r2, [pc, #204]	; (800307c <SpiritRadioSearchWCP+0x110>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d906      	bls.n	8002fc2 <SpiritRadioSearchWCP+0x56>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a32      	ldr	r2, [pc, #200]	; (8003080 <SpiritRadioSearchWCP+0x114>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d802      	bhi.n	8002fc2 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	73bb      	strb	r3, [r7, #14]
 8002fc0:	e009      	b.n	8002fd6 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2f      	ldr	r2, [pc, #188]	; (8003084 <SpiritRadioSearchWCP+0x118>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d905      	bls.n	8002fd6 <SpiritRadioSearchWCP+0x6a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2e      	ldr	r2, [pc, #184]	; (8003088 <SpiritRadioSearchWCP+0x11c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d801      	bhi.n	8002fd6 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a2c      	ldr	r2, [pc, #176]	; (800308c <SpiritRadioSearchWCP+0x120>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	7bba      	ldrb	r2, [r7, #14]
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002fe8:	f241 631f 	movw	r3, #5663	; 0x161f
 8002fec:	461a      	mov	r2, r3
 8002fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d302      	bcc.n	8003002 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002ffc:	230f      	movs	r3, #15
 8002ffe:	73fb      	strb	r3, [r7, #15]
 8003000:	e023      	b.n	800304a <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e005      	b.n	8003014 <SpiritRadioSearchWCP+0xa8>
 8003008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003018:	2b0e      	cmp	r3, #14
 800301a:	dc0c      	bgt.n	8003036 <SpiritRadioSearchWCP+0xca>
 800301c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003020:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <SpiritRadioSearchWCP+0x124>)
 8003022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003026:	461a      	mov	r2, r3
 8003028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302c:	fb02 f303 	mul.w	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d8e8      	bhi.n	8003008 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <SpiritRadioSearchWCP+0xde>
      i--;
 800303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 800304a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304e:	425a      	negs	r2, r3
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	f002 0207 	and.w	r2, r2, #7
 8003058:	bf58      	it	pl
 800305a:	4253      	negpl	r3, r2
 800305c:	b25b      	sxtb	r3, r3
 800305e:	b2db      	uxtb	r3, r3
  
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	2e5f5680 	.word	0x2e5f5680
 8003070:	390c2fe0 	.word	0x390c2fe0
 8003074:	1701e47f 	.word	0x1701e47f
 8003078:	1c146a60 	.word	0x1c146a60
 800307c:	11d260bf 	.word	0x11d260bf
 8003080:	14ced7e0 	.word	0x14ced7e0
 8003084:	08e18f3f 	.word	0x08e18f3f
 8003088:	0a6fd060 	.word	0x0a6fd060
 800308c:	10624dd3 	.word	0x10624dd3
 8003090:	0800a53c 	.word	0x0800a53c

08003094 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	461a      	mov	r2, r3
 800309e:	2104      	movs	r1, #4
 80030a0:	2008      	movs	r0, #8
 80030a2:	f000 ffdb 	bl	800405c <RadioSpiReadRegisters>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <SpiritRadioGetSynthWord+0x48>)
 80030aa:	b212      	sxth	r2, r2
 80030ac:	4611      	mov	r1, r2
 80030ae:	7019      	strb	r1, [r3, #0]
 80030b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030b4:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80030b6:	793b      	ldrb	r3, [r7, #4]
 80030b8:	055b      	lsls	r3, r3, #21
 80030ba:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80030be:	797b      	ldrb	r3, [r7, #5]
 80030c0:	035b      	lsls	r3, r3, #13
 80030c2:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80030c4:	79bb      	ldrb	r3, [r7, #6]
 80030c6:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80030c8:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80030ca:	79fa      	ldrb	r2, [r7, #7]
 80030cc:	08d2      	lsrs	r2, r2, #3
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	4413      	add	r3, r2
  
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000036c 	.word	0x2000036c

080030e0 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80030e6:	1dfb      	adds	r3, r7, #7
 80030e8:	461a      	mov	r2, r3
 80030ea:	2101      	movs	r1, #1
 80030ec:	200b      	movs	r0, #11
 80030ee:	f000 ffb5 	bl	800405c <RadioSpiReadRegisters>
 80030f2:	4602      	mov	r2, r0
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <SpiritRadioGetBand+0x58>)
 80030f6:	b212      	sxth	r2, r2
 80030f8:	4611      	mov	r1, r2
 80030fa:	7019      	strb	r1, [r3, #0]
 80030fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003100:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 800310c:	2300      	movs	r3, #0
 800310e:	e00e      	b.n	800312e <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	2b03      	cmp	r3, #3
 8003118:	d101      	bne.n	800311e <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 800311a:	2301      	movs	r3, #1
 800311c:	e007      	b.n	800312e <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	2b04      	cmp	r3, #4
 8003126:	d101      	bne.n	800312c <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003128:	2302      	movs	r3, #2
 800312a:	e000      	b.n	800312e <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 800312c:	2303      	movs	r3, #3
  }
  
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	2000036c 	.word	0x2000036c

0800313c <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	461a      	mov	r2, r3
 8003146:	2101      	movs	r1, #1
 8003148:	206c      	movs	r0, #108	; 0x6c
 800314a:	f000 ff87 	bl	800405c <RadioSpiReadRegisters>
 800314e:	4602      	mov	r2, r0
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <SpiritRadioGetChannel+0x2c>)
 8003152:	b212      	sxth	r2, r2
 8003154:	4611      	mov	r1, r2
 8003156:	7019      	strb	r1, [r3, #0]
 8003158:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800315c:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 800315e:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	2000036c 	.word	0x2000036c

0800316c <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	461a      	mov	r2, r3
 8003176:	2101      	movs	r1, #1
 8003178:	200c      	movs	r0, #12
 800317a:	f000 ff6f 	bl	800405c <RadioSpiReadRegisters>
 800317e:	4602      	mov	r2, r0
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <SpiritRadioGetChannelSpace+0x38>)
 8003182:	b212      	sxth	r2, r2
 8003184:	4611      	mov	r1, r2
 8003186:	7019      	strb	r1, [r3, #0]
 8003188:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800318c:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	461a      	mov	r2, r3
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <SpiritRadioGetChannelSpace+0x3c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	0bdb      	lsrs	r3, r3, #15
  
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	2000036c 	.word	0x2000036c
 80031a8:	20000368 	.word	0x20000368

080031ac <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	461a      	mov	r2, r3
 80031b6:	2102      	movs	r1, #2
 80031b8:	200e      	movs	r0, #14
 80031ba:	f000 ff4f 	bl	800405c <RadioSpiReadRegisters>
 80031be:	4602      	mov	r2, r0
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <SpiritRadioGetFrequencyOffset+0x80>)
 80031c2:	b212      	sxth	r2, r2
 80031c4:	4611      	mov	r1, r2
 80031c6:	7019      	strb	r1, [r3, #0]
 80031c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80031cc:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80031ce:	793b      	ldrb	r3, [r7, #4]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	797b      	ldrb	r3, [r7, #5]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	4413      	add	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80031e0:	887b      	ldrh	r3, [r7, #2]
 80031e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80031ea:	887b      	ldrh	r3, [r7, #2]
 80031ec:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80031f0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	807b      	strh	r3, [r7, #2]
 80031f8:	e004      	b.n	8003204 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80031fa:	887b      	ldrh	r3, [r7, #2]
 80031fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003200:	b29b      	uxth	r3, r3
 8003202:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8003204:	1cbb      	adds	r3, r7, #2
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 800320a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800320e:	4a08      	ldr	r2, [pc, #32]	; (8003230 <SpiritRadioGetFrequencyOffset+0x84>)
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	da03      	bge.n	8003222 <SpiritRadioGetFrequencyOffset+0x76>
 800321a:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800321e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003222:	149b      	asrs	r3, r3, #18
  
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000036c 	.word	0x2000036c
 8003230:	20000368 	.word	0x20000368

08003234 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8003234:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003238:	b08a      	sub	sp, #40	; 0x28
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 800323e:	2300      	movs	r3, #0
 8003240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a79      	ldr	r2, [pc, #484]	; (800342c <SpiritRadioSetFrequencyBase+0x1f8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d307      	bcc.n	800325c <SpiritRadioSetFrequencyBase+0x28>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a78      	ldr	r2, [pc, #480]	; (8003430 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d803      	bhi.n	800325c <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003254:	2300      	movs	r3, #0
 8003256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800325a:	e022      	b.n	80032a2 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a75      	ldr	r2, [pc, #468]	; (8003434 <SpiritRadioSetFrequencyBase+0x200>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d907      	bls.n	8003274 <SpiritRadioSetFrequencyBase+0x40>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a74      	ldr	r2, [pc, #464]	; (8003438 <SpiritRadioSetFrequencyBase+0x204>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d803      	bhi.n	8003274 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003272:	e016      	b.n	80032a2 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a71      	ldr	r2, [pc, #452]	; (800343c <SpiritRadioSetFrequencyBase+0x208>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d907      	bls.n	800328c <SpiritRadioSetFrequencyBase+0x58>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a70      	ldr	r2, [pc, #448]	; (8003440 <SpiritRadioSetFrequencyBase+0x20c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d803      	bhi.n	800328c <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003284:	2302      	movs	r3, #2
 8003286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800328a:	e00a      	b.n	80032a2 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a6d      	ldr	r2, [pc, #436]	; (8003444 <SpiritRadioSetFrequencyBase+0x210>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d906      	bls.n	80032a2 <SpiritRadioSetFrequencyBase+0x6e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a6c      	ldr	r2, [pc, #432]	; (8003448 <SpiritRadioSetFrequencyBase+0x214>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d802      	bhi.n	80032a2 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 800329c:	2303      	movs	r3, #3
 800329e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80032a2:	f7ff ff83 	bl	80031ac <SpiritRadioGetFrequencyOffset>
 80032a6:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80032a8:	f7ff ff60 	bl	800316c <SpiritRadioGetChannelSpace>
 80032ac:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80032ae:	f7ff ff45 	bl	800313c <SpiritRadioGetChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80032b6:	6a3a      	ldr	r2, [r7, #32]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	441a      	add	r2, r3
 80032bc:	7efb      	ldrb	r3, [r7, #27]
 80032be:	69f9      	ldr	r1, [r7, #28]
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80032c8:	f000 fd5c 	bl	8003d84 <SpiritRadioGetRefDiv>
 80032cc:	4603      	mov	r3, r0
 80032ce:	3301      	adds	r3, #1
 80032d0:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80032d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d839      	bhi.n	800334e <SpiritRadioSetFrequencyBase+0x11a>
 80032da:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <SpiritRadioSetFrequencyBase+0xac>)
 80032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e0:	08003339 	.word	0x08003339
 80032e4:	08003321 	.word	0x08003321
 80032e8:	08003309 	.word	0x08003309
 80032ec:	080032f1 	.word	0x080032f1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	4a56      	ldr	r2, [pc, #344]	; (800344c <SpiritRadioSetFrequencyBase+0x218>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d803      	bhi.n	8003300 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7fe fdcd 	bl	8001e98 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80032fe:	e026      	b.n	800334e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003300:	2001      	movs	r0, #1
 8003302:	f7fe fdc9 	bl	8001e98 <SpiritCalibrationSelectVco>
    break;
 8003306:	e022      	b.n	800334e <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	4a51      	ldr	r2, [pc, #324]	; (8003450 <SpiritRadioSetFrequencyBase+0x21c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d803      	bhi.n	8003318 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fe fdc1 	bl	8001e98 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003316:	e01a      	b.n	800334e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003318:	2001      	movs	r0, #1
 800331a:	f7fe fdbd 	bl	8001e98 <SpiritCalibrationSelectVco>
    break;
 800331e:	e016      	b.n	800334e <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4a4c      	ldr	r2, [pc, #304]	; (8003454 <SpiritRadioSetFrequencyBase+0x220>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d803      	bhi.n	8003330 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003328:	2000      	movs	r0, #0
 800332a:	f7fe fdb5 	bl	8001e98 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800332e:	e00e      	b.n	800334e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003330:	2001      	movs	r0, #1
 8003332:	f7fe fdb1 	bl	8001e98 <SpiritCalibrationSelectVco>
    break;
 8003336:	e00a      	b.n	800334e <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	4a47      	ldr	r2, [pc, #284]	; (8003458 <SpiritRadioSetFrequencyBase+0x224>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d803      	bhi.n	8003348 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003340:	2000      	movs	r0, #0
 8003342:	f7fe fda9 	bl	8001e98 <SpiritCalibrationSelectVco>
 8003346:	e002      	b.n	800334e <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003348:	2001      	movs	r0, #1
 800334a:	f7fe fda5 	bl	8001e98 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7ff fe0c 	bl	8002f6c <SpiritRadioSearchWCP>
 8003354:	4603      	mov	r3, r0
 8003356:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800335c:	4a3f      	ldr	r2, [pc, #252]	; (800345c <SpiritRadioSetFrequencyBase+0x228>)
 800335e:	5cd3      	ldrb	r3, [r2, r3]
 8003360:	461a      	mov	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f83b 	bl	80003e4 <__aeabi_ui2d>
 800336e:	4604      	mov	r4, r0
 8003370:	460d      	mov	r5, r1
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	049b      	lsls	r3, r3, #18
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd f844 	bl	8000404 <__aeabi_i2d>
 800337c:	4680      	mov	r8, r0
 800337e:	4689      	mov	r9, r1
 8003380:	4b37      	ldr	r3, [pc, #220]	; (8003460 <SpiritRadioSetFrequencyBase+0x22c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f82d 	bl	80003e4 <__aeabi_ui2d>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4640      	mov	r0, r8
 8003390:	4649      	mov	r1, r9
 8003392:	f7fd f9cb 	bl	800072c <__aeabi_ddiv>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4620      	mov	r0, r4
 800339c:	4629      	mov	r1, r5
 800339e:	f7fd f89b 	bl	80004d8 <__aeabi_dmul>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	f7fd fb6d 	bl	8000a88 <__aeabi_d2uiz>
 80033ae:	4603      	mov	r3, r0
 80033b0:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	0d5b      	lsrs	r3, r3, #21
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	7cbb      	ldrb	r3, [r7, #18]
 80033c0:	015b      	lsls	r3, r3, #5
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	4313      	orrs	r3, r2
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	0b5b      	lsrs	r3, r3, #13
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033e6:	491f      	ldr	r1, [pc, #124]	; (8003464 <SpiritRadioSetFrequencyBase+0x230>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	461a      	mov	r2, r3
 80033f6:	2104      	movs	r1, #4
 80033f8:	2008      	movs	r0, #8
 80033fa:	f000 fde3 	bl	8003fc4 <RadioSpiWriteRegisters>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <SpiritRadioSetFrequencyBase+0x234>)
 8003402:	b212      	sxth	r2, r2
 8003404:	4611      	mov	r1, r2
 8003406:	7019      	strb	r1, [r3, #0]
 8003408:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800340c:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 800340e:	4b17      	ldr	r3, [pc, #92]	; (800346c <SpiritRadioSetFrequencyBase+0x238>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d103      	bne.n	800341e <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8003416:	f7fe ff9f 	bl	8002358 <SpiritManagementWaVcoCalibration>
 800341a:	4603      	mov	r3, r0
 800341c:	e000      	b.n	8003420 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800342a:	bf00      	nop
 800342c:	2e5f5680 	.word	0x2e5f5680
 8003430:	390c2fe0 	.word	0x390c2fe0
 8003434:	1701e47f 	.word	0x1701e47f
 8003438:	1c146a60 	.word	0x1c146a60
 800343c:	11d260bf 	.word	0x11d260bf
 8003440:	14ced7e0 	.word	0x14ced7e0
 8003444:	08e18f3f 	.word	0x08e18f3f
 8003448:	0a6fd060 	.word	0x0a6fd060
 800344c:	099cf4e1 	.word	0x099cf4e1
 8003450:	1339e9c3 	.word	0x1339e9c3
 8003454:	19a28d05 	.word	0x19a28d05
 8003458:	33451a0a 	.word	0x33451a0a
 800345c:	0800a480 	.word	0x0800a480
 8003460:	20000368 	.word	0x20000368
 8003464:	0800a484 	.word	0x0800a484
 8003468:	2000036c 	.word	0x2000036c
 800346c:	2000000d 	.word	0x2000000d

08003470 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003470:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003478:	f7ff fe0c 	bl	8003094 <SpiritRadioGetSynthWord>
 800347c:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 800347e:	f7ff fe2f 	bl	80030e0 <SpiritRadioGetBand>
 8003482:	4603      	mov	r3, r0
 8003484:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003486:	f000 fc7d 	bl	8003d84 <SpiritRadioGetRefDiv>
 800348a:	4603      	mov	r3, r0
 800348c:	3301      	adds	r3, #1
 800348e:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7fc ffa7 	bl	80003e4 <__aeabi_ui2d>
 8003496:	4604      	mov	r4, r0
 8003498:	460d      	mov	r5, r1
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <SpiritRadioGetFrequencyBase+0x88>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fc ffa0 	bl	80003e4 <__aeabi_ui2d>
 80034a4:	4680      	mov	r8, r0
 80034a6:	4689      	mov	r9, r1
 80034a8:	78bb      	ldrb	r3, [r7, #2]
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	4913      	ldr	r1, [pc, #76]	; (80034fc <SpiritRadioGetFrequencyBase+0x8c>)
 80034ae:	5c8a      	ldrb	r2, [r1, r2]
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	049b      	lsls	r3, r3, #18
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fc ffa4 	bl	8000404 <__aeabi_i2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4640      	mov	r0, r8
 80034c2:	4649      	mov	r1, r9
 80034c4:	f7fd f932 	bl	800072c <__aeabi_ddiv>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fd f802 	bl	80004d8 <__aeabi_dmul>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f006 fdb8 	bl	800a050 <round>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f7fd face 	bl	8000a88 <__aeabi_d2uiz>
 80034ec:	4603      	mov	r3, r0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034f8:	20000368 	.word	0x20000368
 80034fc:	0800a480 	.word	0x0800a480

08003500 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 800350c:	2300      	movs	r3, #0
 800350e:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003510:	230f      	movs	r3, #15
 8003512:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003518:	f000 fc86 	bl	8003e28 <SpiritRadioGetDigDiv>
 800351c:	4603      	mov	r3, r0
 800351e:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003520:	e015      	b.n	800354e <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003522:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <SpiritRadioSearchDatarateME+0x160>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800352a:	f1c3 0114 	rsb	r1, r3, #20
 800352e:	7ebb      	ldrb	r3, [r7, #26]
 8003530:	440b      	add	r3, r1
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 800353c:	2301      	movs	r3, #1
 800353e:	763b      	strb	r3, [r7, #24]
 8003540:	e005      	b.n	800354e <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003542:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b2db      	uxtb	r3, r3
 800354c:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 800354e:	7e3b      	ldrb	r3, [r7, #24]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <SpiritRadioSearchDatarateME+0x5e>
 8003556:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800355a:	2b00      	cmp	r3, #0
 800355c:	dae1      	bge.n	8003522 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 800355e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003562:	2b00      	cmp	r3, #0
 8003564:	da01      	bge.n	800356a <SpiritRadioSearchDatarateME+0x6a>
 8003566:	2300      	movs	r3, #0
 8003568:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 800356a:	7ffa      	ldrb	r2, [r7, #31]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003570:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003574:	f1c3 0317 	rsb	r3, r3, #23
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	409a      	lsls	r2, r3
 800357c:	4b38      	ldr	r3, [pc, #224]	; (8003660 <SpiritRadioSearchDatarateME+0x160>)
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	7ebb      	ldrb	r3, [r7, #26]
 8003582:	3305      	adds	r3, #5
 8003584:	fa21 f303 	lsr.w	r3, r1, r3
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 800358e:	2300      	movs	r3, #0
 8003590:	77bb      	strb	r3, [r7, #30]
 8003592:	e031      	b.n	80035f8 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 8003594:	7e7a      	ldrb	r2, [r7, #25]
 8003596:	7fbb      	ldrb	r3, [r7, #30]
 8003598:	4413      	add	r3, r2
 800359a:	2b01      	cmp	r3, #1
 800359c:	d021      	beq.n	80035e2 <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	7e7b      	ldrb	r3, [r7, #25]
 80035a4:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80035a8:	7fbb      	ldrb	r3, [r7, #30]
 80035aa:	440b      	add	r3, r1
 80035ac:	3b01      	subs	r3, #1
 80035ae:	4618      	mov	r0, r3
 80035b0:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <SpiritRadioSearchDatarateME+0x160>)
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	7ebb      	ldrb	r3, [r7, #26]
 80035b6:	3305      	adds	r3, #5
 80035b8:	fa21 f303 	lsr.w	r3, r1, r3
 80035bc:	fb03 f100 	mul.w	r1, r3, r0
 80035c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035c4:	f1c3 0317 	rsb	r3, r3, #23
 80035c8:	fa21 f303 	lsr.w	r3, r1, r3
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	7fbb      	ldrb	r3, [r7, #30]
 80035d4:	b212      	sxth	r2, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	3320      	adds	r3, #32
 80035da:	443b      	add	r3, r7
 80035dc:	f823 2c10 	strh.w	r2, [r3, #-16]
 80035e0:	e007      	b.n	80035f2 <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80035e2:	7fbb      	ldrb	r3, [r7, #30]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	3320      	adds	r3, #32
 80035e8:	443b      	add	r3, r7
 80035ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80035ee:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80035f2:	7fbb      	ldrb	r3, [r7, #30]
 80035f4:	3301      	adds	r3, #1
 80035f6:	77bb      	strb	r3, [r7, #30]
 80035f8:	7fbb      	ldrb	r3, [r7, #30]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d9ca      	bls.n	8003594 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80035fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003602:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003604:	2300      	movs	r3, #0
 8003606:	76fb      	strb	r3, [r7, #27]
 8003608:	e021      	b.n	800364e <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 800360a:	7efb      	ldrb	r3, [r7, #27]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	3320      	adds	r3, #32
 8003610:	443b      	add	r3, r7
 8003612:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	bfb8      	it	lt
 800361a:	425b      	neglt	r3, r3
 800361c:	b29b      	uxth	r3, r3
 800361e:	8bba      	ldrh	r2, [r7, #28]
 8003620:	429a      	cmp	r2, r3
 8003622:	d911      	bls.n	8003648 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003624:	7efb      	ldrb	r3, [r7, #27]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	3320      	adds	r3, #32
 800362a:	443b      	add	r3, r7
 800362c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	bfb8      	it	lt
 8003634:	425b      	neglt	r3, r3
 8003636:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003638:	7e7a      	ldrb	r2, [r7, #25]
 800363a:	7efb      	ldrb	r3, [r7, #27]
 800363c:	4413      	add	r3, r2
 800363e:	b2db      	uxtb	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003648:	7efb      	ldrb	r3, [r7, #27]
 800364a:	3301      	adds	r3, #1
 800364c:	76fb      	strb	r3, [r7, #27]
 800364e:	7efb      	ldrb	r3, [r7, #27]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d9da      	bls.n	800360a <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000368 	.word	0x20000368

08003664 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003676:	f000 fbd7 	bl	8003e28 <SpiritRadioGetDigDiv>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003680:	2302      	movs	r3, #2
 8003682:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003686:	e002      	b.n	800368e <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 800368e:	4b63      	ldr	r3, [pc, #396]	; (800381c <SpiritRadioSearchChannelBwME+0x1b8>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	4a61      	ldr	r2, [pc, #388]	; (8003820 <SpiritRadioSearchChannelBwME+0x1bc>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 80036a4:	2300      	movs	r3, #0
 80036a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036aa:	e006      	b.n	80036ba <SpiritRadioSearchChannelBwME+0x56>
 80036ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036be:	2b59      	cmp	r3, #89	; 0x59
 80036c0:	dc0f      	bgt.n	80036e2 <SpiritRadioSearchChannelBwME+0x7e>
 80036c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036c6:	4a57      	ldr	r2, [pc, #348]	; (8003824 <SpiritRadioSearchChannelBwME+0x1c0>)
 80036c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036cc:	461a      	mov	r2, r3
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	4a54      	ldr	r2, [pc, #336]	; (8003828 <SpiritRadioSearchChannelBwME+0x1c4>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	0adb      	lsrs	r3, r3, #11
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d3e4      	bcc.n	80036ac <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 80036e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d077      	beq.n	80037da <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80036ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ee:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80036f6:	e03a      	b.n	800376e <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 80036f8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80036fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003700:	4413      	add	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	dc06      	bgt.n	8003714 <SpiritRadioSearchChannelBwME+0xb0>
 8003706:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800370a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800370e:	4413      	add	r3, r2
 8003710:	2b5a      	cmp	r3, #90	; 0x5a
 8003712:	dc1e      	bgt.n	8003752 <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	b29a      	uxth	r2, r3
 8003718:	f997 101b 	ldrsb.w	r1, [r7, #27]
 800371c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003720:	440b      	add	r3, r1
 8003722:	3b01      	subs	r3, #1
 8003724:	493f      	ldr	r1, [pc, #252]	; (8003824 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003726:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800372a:	4619      	mov	r1, r3
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	493d      	ldr	r1, [pc, #244]	; (8003828 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003734:	fba1 1303 	umull	r1, r3, r1, r3
 8003738:	0adb      	lsrs	r3, r3, #11
 800373a:	b29b      	uxth	r3, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	b29a      	uxth	r2, r3
 8003740:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003744:	b212      	sxth	r2, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	3328      	adds	r3, #40	; 0x28
 800374a:	443b      	add	r3, r7
 800374c:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003750:	e008      	b.n	8003764 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003752:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	3328      	adds	r3, #40	; 0x28
 800375a:	443b      	add	r3, r7
 800375c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003760:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003764:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003768:	3301      	adds	r3, #1
 800376a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800376e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003772:	2b02      	cmp	r3, #2
 8003774:	d9c0      	bls.n	80036f8 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800377a:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 800377c:	2300      	movs	r3, #0
 800377e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003782:	e026      	b.n	80037d2 <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003784:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	3328      	adds	r3, #40	; 0x28
 800378c:	443b      	add	r3, r7
 800378e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003792:	2b00      	cmp	r3, #0
 8003794:	bfb8      	it	lt
 8003796:	425b      	neglt	r3, r3
 8003798:	b29b      	uxth	r3, r3
 800379a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800379c:	429a      	cmp	r2, r3
 800379e:	d913      	bls.n	80037c8 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 80037a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	3328      	adds	r3, #40	; 0x28
 80037a8:	443b      	add	r3, r7
 80037aa:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	bfb8      	it	lt
 80037b2:	425b      	neglt	r3, r3
 80037b4:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 80037b6:	7efa      	ldrb	r2, [r7, #27]
 80037b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037bc:	4413      	add	r3, r2
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 80037c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037cc:	3301      	adds	r3, #1
 80037ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80037d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d9d4      	bls.n	8003784 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80037da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037de:	4a13      	ldr	r2, [pc, #76]	; (800382c <SpiritRadioSearchChannelBwME+0x1c8>)
 80037e0:	fb82 1203 	smull	r1, r2, r2, r3
 80037e4:	1052      	asrs	r2, r2, #1
 80037e6:	17db      	asrs	r3, r3, #31
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 80037f2:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <SpiritRadioSearchChannelBwME+0x1c8>)
 80037f8:	fb83 1302 	smull	r1, r3, r3, r2
 80037fc:	1059      	asrs	r1, r3, #1
 80037fe:	17d3      	asrs	r3, r2, #31
 8003800:	1ac9      	subs	r1, r1, r3
 8003802:	460b      	mov	r3, r1
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	440b      	add	r3, r1
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	b25b      	sxtb	r3, r3
 800380c:	b2da      	uxtb	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	701a      	strb	r2, [r3, #0]
  
}
 8003812:	bf00      	nop
 8003814:	3728      	adds	r7, #40	; 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000368 	.word	0x20000368
 8003820:	51eb851f 	.word	0x51eb851f
 8003824:	0800a488 	.word	0x0800a488
 8003828:	c9a633fd 	.word	0xc9a633fd
 800382c:	38e38e39 	.word	0x38e38e39

08003830 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003830:	b5b0      	push	{r4, r5, r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003840:	4b55      	ldr	r3, [pc, #340]	; (8003998 <SpiritRadioSearchFreqDevME+0x168>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd f9f5 	bl	8000c34 <__aeabi_ui2f>
 800384a:	4603      	mov	r3, r0
 800384c:	f04f 4191 	mov.w	r1, #1216348160	; 0x48800000
 8003850:	4618      	mov	r0, r3
 8003852:	f7fd fafb 	bl	8000e4c <__aeabi_fdiv>
 8003856:	4603      	mov	r3, r0
 8003858:	61bb      	str	r3, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003860:	e02a      	b.n	80038b8 <SpiritRadioSearchFreqDevME+0x88>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003866:	2201      	movs	r2, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	4618      	mov	r0, r3
 800386e:	f7fc fdc9 	bl	8000404 <__aeabi_i2d>
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	4b49      	ldr	r3, [pc, #292]	; (800399c <SpiritRadioSearchFreqDevME+0x16c>)
 8003878:	f7fc fe2e 	bl	80004d8 <__aeabi_dmul>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	f7fd f900 	bl	8000a88 <__aeabi_d2uiz>
 8003888:	4603      	mov	r3, r0
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd f9d2 	bl	8000c34 <__aeabi_ui2f>
 8003890:	4603      	mov	r3, r0
 8003892:	69b9      	ldr	r1, [r7, #24]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd fa25 	bl	8000ce4 <__aeabi_fmul>
 800389a:	4603      	mov	r3, r0
 800389c:	4618      	mov	r0, r3
 800389e:	f7fd fc0d 	bl	80010bc <__aeabi_f2uiz>
 80038a2:	4603      	mov	r3, r0
 80038a4:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d309      	bcc.n	80038c2 <SpiritRadioSearchFreqDevME+0x92>
  for(i=0;i<10;i++)
 80038ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b2:	3301      	adds	r3, #1
 80038b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d9d0      	bls.n	8003862 <SpiritRadioSearchFreqDevME+0x32>
 80038c0:	e000      	b.n	80038c4 <SpiritRadioSearchFreqDevME+0x94>
      break;
 80038c2:	bf00      	nop
  }
  (*pcE) = i;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80038ca:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038d2:	e045      	b.n	8003960 <SpiritRadioSearchFreqDevME+0x130>
  {
    bp=b;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 80038d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fc fd91 	bl	8000404 <__aeabi_i2d>
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	4b2e      	ldr	r3, [pc, #184]	; (80039a0 <SpiritRadioSearchFreqDevME+0x170>)
 80038e8:	f7fc fc40 	bl	800016c <__adddf3>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038fc:	f7fc ff16 	bl	800072c <__aeabi_ddiv>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4614      	mov	r4, r2
 8003906:	461d      	mov	r5, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	2301      	movs	r3, #1
 8003910:	4093      	lsls	r3, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f7fc fd76 	bl	8000404 <__aeabi_i2d>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4620      	mov	r0, r4
 800391e:	4629      	mov	r1, r5
 8003920:	f7fc fdda 	bl	80004d8 <__aeabi_dmul>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	f7fd f8ac 	bl	8000a88 <__aeabi_d2uiz>
 8003930:	4603      	mov	r3, r0
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd f97e 	bl	8000c34 <__aeabi_ui2f>
 8003938:	4603      	mov	r3, r0
 800393a:	69b9      	ldr	r1, [r7, #24]
 800393c:	4618      	mov	r0, r3
 800393e:	f7fd f9d1 	bl	8000ce4 <__aeabi_fmul>
 8003942:	4603      	mov	r3, r0
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd fbb9 	bl	80010bc <__aeabi_f2uiz>
 800394a:	4603      	mov	r3, r0
 800394c:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	429a      	cmp	r2, r3
 8003954:	d309      	bcc.n	800396a <SpiritRadioSearchFreqDevME+0x13a>
  for(i=0;i<8;i++)
 8003956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800395a:	3301      	adds	r3, #1
 800395c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003964:	2b07      	cmp	r3, #7
 8003966:	d9b5      	bls.n	80038d4 <SpiritRadioSearchFreqDevME+0xa4>
 8003968:	e000      	b.n	800396c <SpiritRadioSearchFreqDevME+0x13c>
      break;
 800396a:	bf00      	nop
  }
  
  (*pcM)=i;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003972:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	1ad2      	subs	r2, r2, r3
 800397a:	69f9      	ldr	r1, [r7, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1acb      	subs	r3, r1, r3
 8003980:	429a      	cmp	r2, r3
 8003982:	d205      	bcs.n	8003990 <SpiritRadioSearchFreqDevME+0x160>
    (*pcM)--;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	3b01      	subs	r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	701a      	strb	r2, [r3, #0]
  
}
 8003990:	bf00      	nop
 8003992:	3728      	adds	r7, #40	; 0x28
 8003994:	46bd      	mov	sp, r7
 8003996:	bdb0      	pop	{r4, r5, r7, pc}
 8003998:	20000368 	.word	0x20000368
 800399c:	401e0000 	.word	0x401e0000
 80039a0:	40200000 	.word	0x40200000

080039a4 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint8_t i=0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  uint8_t j=0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73bb      	strb	r3, [r7, #14]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a74      	ldr	r2, [pc, #464]	; (8003b8c <SpiritRadioGetdBm2Reg+0x1e8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d30c      	bcc.n	80039d8 <SpiritRadioGetdBm2Reg+0x34>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a73      	ldr	r2, [pc, #460]	; (8003b90 <SpiritRadioGetdBm2Reg+0x1ec>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d808      	bhi.n	80039d8 <SpiritRadioGetdBm2Reg+0x34>
  {
    i=0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
    if(lFBase<900000000) i=1;// 868   
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a71      	ldr	r2, [pc, #452]	; (8003b94 <SpiritRadioGetdBm2Reg+0x1f0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d822      	bhi.n	8003a18 <SpiritRadioGetdBm2Reg+0x74>
 80039d2:	2301      	movs	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
 80039d6:	e01f      	b.n	8003a18 <SpiritRadioGetdBm2Reg+0x74>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a6f      	ldr	r2, [pc, #444]	; (8003b98 <SpiritRadioGetdBm2Reg+0x1f4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d906      	bls.n	80039ee <SpiritRadioGetdBm2Reg+0x4a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a6e      	ldr	r2, [pc, #440]	; (8003b9c <SpiritRadioGetdBm2Reg+0x1f8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d802      	bhi.n	80039ee <SpiritRadioGetdBm2Reg+0x4a>
  {
    i=2;
 80039e8:	2302      	movs	r3, #2
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	e014      	b.n	8003a18 <SpiritRadioGetdBm2Reg+0x74>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a6b      	ldr	r2, [pc, #428]	; (8003ba0 <SpiritRadioGetdBm2Reg+0x1fc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d906      	bls.n	8003a04 <SpiritRadioGetdBm2Reg+0x60>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a6a      	ldr	r2, [pc, #424]	; (8003ba4 <SpiritRadioGetdBm2Reg+0x200>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d802      	bhi.n	8003a04 <SpiritRadioGetdBm2Reg+0x60>
  {
    i=3;
 80039fe:	2303      	movs	r3, #3
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	e009      	b.n	8003a18 <SpiritRadioGetdBm2Reg+0x74>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a68      	ldr	r2, [pc, #416]	; (8003ba8 <SpiritRadioGetdBm2Reg+0x204>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d905      	bls.n	8003a18 <SpiritRadioGetdBm2Reg+0x74>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a67      	ldr	r2, [pc, #412]	; (8003bac <SpiritRadioGetdBm2Reg+0x208>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d801      	bhi.n	8003a18 <SpiritRadioGetdBm2Reg+0x74>
  {
    i=4;
 8003a14:	2304      	movs	r3, #4
 8003a16:	73fb      	strb	r3, [r7, #15]
  }
  
  j=1;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73bb      	strb	r3, [r7, #14]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003a1c:	f04f 0100 	mov.w	r1, #0
 8003a20:	6838      	ldr	r0, [r7, #0]
 8003a22:	f7fd fb1b 	bl	800105c <__aeabi_fcmpgt>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d033      	beq.n	8003a94 <SpiritRadioGetdBm2Reg+0xf0>
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	4960      	ldr	r1, [pc, #384]	; (8003bb0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	440b      	add	r3, r1
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	485c      	ldr	r0, [pc, #368]	; (8003bb4 <SpiritRadioGetdBm2Reg+0x210>)
 8003a42:	f7fd fa03 	bl	8000e4c <__aeabi_fdiv>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461c      	mov	r4, r3
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	4958      	ldr	r1, [pc, #352]	; (8003bb0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	330c      	adds	r3, #12
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	4954      	ldr	r1, [pc, #336]	; (8003bb0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	440b      	add	r3, r1
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fd f9ec 	bl	8000e4c <__aeabi_fdiv>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4619      	mov	r1, r3
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7fd f829 	bl	8000ad0 <__aeabi_fsub>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4619      	mov	r1, r3
 8003a82:	6838      	ldr	r0, [r7, #0]
 8003a84:	f7fd faea 	bl	800105c <__aeabi_fcmpgt>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <SpiritRadioGetdBm2Reg+0xf0>
      j=0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73bb      	strb	r3, [r7, #14]
 8003a92:	e03a      	b.n	8003b0a <SpiritRadioGetdBm2Reg+0x166>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003a94:	f04f 0100 	mov.w	r1, #0
 8003a98:	6838      	ldr	r0, [r7, #0]
 8003a9a:	f7fd facb 	bl	8001034 <__aeabi_fcmple>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d032      	beq.n	8003b0a <SpiritRadioGetdBm2Reg+0x166>
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	4942      	ldr	r1, [pc, #264]	; (8003bb0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	483f      	ldr	r0, [pc, #252]	; (8003bb8 <SpiritRadioGetdBm2Reg+0x214>)
 8003aba:	f7fd f9c7 	bl	8000e4c <__aeabi_fdiv>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	493a      	ldr	r1, [pc, #232]	; (8003bb0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	4936      	ldr	r1, [pc, #216]	; (8003bb0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003ad8:	4613      	mov	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fd f9b0 	bl	8000e4c <__aeabi_fdiv>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4619      	mov	r1, r3
 8003af0:	4620      	mov	r0, r4
 8003af2:	f7fc ffed 	bl	8000ad0 <__aeabi_fsub>
 8003af6:	4603      	mov	r3, r0
 8003af8:	4619      	mov	r1, r3
 8003afa:	6838      	ldr	r0, [r7, #0]
 8003afc:	f7fd fa90 	bl	8001020 <__aeabi_fcmplt>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <SpiritRadioGetdBm2Reg+0x166>
      j=2;
 8003b06:	2302      	movs	r3, #2
 8003b08:	73bb      	strb	r3, [r7, #14]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	7bbb      	ldrb	r3, [r7, #14]
 8003b0e:	0059      	lsls	r1, r3, #1
 8003b10:	4827      	ldr	r0, [pc, #156]	; (8003bb0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003b12:	4613      	mov	r3, r2
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	4413      	add	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003b20:	6839      	ldr	r1, [r7, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd f8de 	bl	8000ce4 <__aeabi_fmul>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461c      	mov	r4, r3
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	7bbb      	ldrb	r3, [r7, #14]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	481e      	ldr	r0, [pc, #120]	; (8003bb0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	440b      	add	r3, r1
 8003b40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003b44:	4619      	mov	r1, r3
 8003b46:	4620      	mov	r0, r4
 8003b48:	f7fc ffc4 	bl	8000ad4 <__addsf3>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	60bb      	str	r3, [r7, #8]
  
  if(fReg<1)
 8003b50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b54:	68b8      	ldr	r0, [r7, #8]
 8003b56:	f7fd fa63 	bl	8001020 <__aeabi_fcmplt>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <SpiritRadioGetdBm2Reg+0x1c4>
    fReg=1;
 8003b60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	e008      	b.n	8003b7a <SpiritRadioGetdBm2Reg+0x1d6>
  else if(fReg>90) 
 8003b68:	4914      	ldr	r1, [pc, #80]	; (8003bbc <SpiritRadioGetdBm2Reg+0x218>)
 8003b6a:	68b8      	ldr	r0, [r7, #8]
 8003b6c:	f7fd fa76 	bl	800105c <__aeabi_fcmpgt>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <SpiritRadioGetdBm2Reg+0x1d6>
    fReg=90;
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <SpiritRadioGetdBm2Reg+0x218>)
 8003b78:	60bb      	str	r3, [r7, #8]
  
  return ((uint8_t)fReg);
 8003b7a:	68b8      	ldr	r0, [r7, #8]
 8003b7c:	f7fd fa9e 	bl	80010bc <__aeabi_f2uiz>
 8003b80:	4603      	mov	r3, r0
 8003b82:	b2db      	uxtb	r3, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd90      	pop	{r4, r7, pc}
 8003b8c:	2e5f5680 	.word	0x2e5f5680
 8003b90:	390c2fe0 	.word	0x390c2fe0
 8003b94:	35a4e8ff 	.word	0x35a4e8ff
 8003b98:	1701e47f 	.word	0x1701e47f
 8003b9c:	1c146a60 	.word	0x1c146a60
 8003ba0:	11d260bf 	.word	0x11d260bf
 8003ba4:	14ced7e0 	.word	0x14ced7e0
 8003ba8:	08e18f3f 	.word	0x08e18f3f
 8003bac:	0a6fd060 	.word	0x0a6fd060
 8003bb0:	0800a55c 	.word	0x0800a55c
 8003bb4:	41500000 	.word	0x41500000
 8003bb8:	42200000 	.word	0x42200000
 8003bbc:	42b40000 	.word	0x42b40000

08003bc0 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003bcc:	f7ff fc50 	bl	8003470 <SpiritRadioGetFrequencyBase>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	6839      	ldr	r1, [r7, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fee5 	bl	80039a4 <SpiritRadioGetdBm2Reg>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	f1c3 0317 	rsb	r3, r3, #23
 8003be4:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003be6:	f107 020e 	add.w	r2, r7, #14
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f9e8 	bl	8003fc4 <RadioSpiWriteRegisters>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <SpiritRadioSetPALeveldBm+0x4c>)
 8003bf8:	b212      	sxth	r2, r2
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	7019      	strb	r1, [r3, #0]
 8003bfe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c02:	705a      	strb	r2, [r3, #1]
  
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	2000036c 	.word	0x2000036c

08003c10 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003c1a:	f107 030f 	add.w	r3, r7, #15
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2101      	movs	r1, #1
 8003c22:	2018      	movs	r0, #24
 8003c24:	f000 fa1a 	bl	800405c <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003c3c:	f107 030f 	add.w	r3, r7, #15
 8003c40:	461a      	mov	r2, r3
 8003c42:	2101      	movs	r1, #1
 8003c44:	2018      	movs	r0, #24
 8003c46:	f000 f9bd 	bl	8003fc4 <RadioSpiWriteRegisters>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <SpiritRadioSetPACwc+0x54>)
 8003c4e:	b212      	sxth	r2, r2
 8003c50:	4611      	mov	r1, r2
 8003c52:	7019      	strb	r1, [r3, #0]
 8003c54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c58:	705a      	strb	r2, [r3, #1]
  
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	2000036c 	.word	0x2000036c

08003c68 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003c72:	f107 030f 	add.w	r3, r7, #15
 8003c76:	461a      	mov	r2, r3
 8003c78:	2101      	movs	r1, #1
 8003c7a:	2018      	movs	r0, #24
 8003c7c:	f000 f9ee 	bl	800405c <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	f023 0307 	bic.w	r3, r3, #7
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003c94:	f107 030f 	add.w	r3, r7, #15
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	2018      	movs	r0, #24
 8003c9e:	f000 f991 	bl	8003fc4 <RadioSpiWriteRegisters>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003ca6:	b212      	sxth	r2, r2
 8003ca8:	4611      	mov	r1, r2
 8003caa:	7019      	strb	r1, [r3, #0]
 8003cac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003cb0:	705a      	strb	r2, [r3, #1]
  
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	2000036c 	.word	0x2000036c

08003cc0 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003cce:	f107 030f 	add.w	r3, r7, #15
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	201e      	movs	r0, #30
 8003cd8:	f000 f9c0 	bl	800405c <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d105      	bne.n	8003cee <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	73fb      	strb	r3, [r7, #15]
 8003cec:	e004      	b.n	8003cf8 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003cf8:	f107 030f 	add.w	r3, r7, #15
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2101      	movs	r1, #1
 8003d00:	201e      	movs	r0, #30
 8003d02:	f000 f95f 	bl	8003fc4 <RadioSpiWriteRegisters>
 8003d06:	4602      	mov	r2, r0
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <SpiritRadioAFCFreezeOnSync+0x60>)
 8003d0a:	b212      	sxth	r2, r2
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	7019      	strb	r1, [r3, #0]
 8003d10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d14:	705a      	strb	r2, [r3, #1]
  
}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	2000036c 	.word	0x2000036c

08003d24 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003d2e:	f107 030f 	add.w	r3, r7, #15
 8003d32:	461a      	mov	r2, r3
 8003d34:	2101      	movs	r1, #1
 8003d36:	209e      	movs	r0, #158	; 0x9e
 8003d38:	f000 f990 	bl	800405c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d105      	bne.n	8003d4e <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e004      	b.n	8003d58 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003d58:	f107 030f 	add.w	r3, r7, #15
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2101      	movs	r1, #1
 8003d60:	209e      	movs	r0, #158	; 0x9e
 8003d62:	f000 f92f 	bl	8003fc4 <RadioSpiWriteRegisters>
 8003d66:	4602      	mov	r2, r0
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <SpiritRadioSetRefDiv+0x5c>)
 8003d6a:	b212      	sxth	r2, r2
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	7019      	strb	r1, [r3, #0]
 8003d70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d74:	705a      	strb	r2, [r3, #1]
  
}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	2000036c 	.word	0x2000036c

08003d84 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003d8a:	1dfb      	adds	r3, r7, #7
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2101      	movs	r1, #1
 8003d90:	209e      	movs	r0, #158	; 0x9e
 8003d92:	f000 f963 	bl	800405c <RadioSpiReadRegisters>
 8003d96:	4602      	mov	r2, r0
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <SpiritRadioGetRefDiv+0x40>)
 8003d9a:	b212      	sxth	r2, r2
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	7019      	strb	r1, [r3, #0]
 8003da0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003da4:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	09db      	lsrs	r3, r3, #7
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003db8:	2300      	movs	r3, #0
  }
  
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	2000036c 	.word	0x2000036c

08003dc8 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003dd2:	f107 030f 	add.w	r3, r7, #15
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2101      	movs	r1, #1
 8003dda:	20b4      	movs	r0, #180	; 0xb4
 8003ddc:	f000 f93e 	bl	800405c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d105      	bne.n	8003df2 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	f023 0308 	bic.w	r3, r3, #8
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e004      	b.n	8003dfc <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	f043 0308 	orr.w	r3, r3, #8
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003dfc:	f107 030f 	add.w	r3, r7, #15
 8003e00:	461a      	mov	r2, r3
 8003e02:	2101      	movs	r1, #1
 8003e04:	20b4      	movs	r0, #180	; 0xb4
 8003e06:	f000 f8dd 	bl	8003fc4 <RadioSpiWriteRegisters>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <SpiritRadioSetDigDiv+0x5c>)
 8003e0e:	b212      	sxth	r2, r2
 8003e10:	4611      	mov	r1, r2
 8003e12:	7019      	strb	r1, [r3, #0]
 8003e14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e18:	705a      	strb	r2, [r3, #1]
  
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	2000036c 	.word	0x2000036c

08003e28 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003e2e:	1dfb      	adds	r3, r7, #7
 8003e30:	461a      	mov	r2, r3
 8003e32:	2101      	movs	r1, #1
 8003e34:	20b4      	movs	r0, #180	; 0xb4
 8003e36:	f000 f911 	bl	800405c <RadioSpiReadRegisters>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <SpiritRadioGetDigDiv+0x40>)
 8003e3e:	b212      	sxth	r2, r2
 8003e40:	4611      	mov	r1, r2
 8003e42:	7019      	strb	r1, [r3, #0]
 8003e44:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e48:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003e5c:	2301      	movs	r3, #1
  }
  
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2000036c 	.word	0x2000036c

08003e6c <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003e70:	4b02      	ldr	r3, [pc, #8]	; (8003e7c <SpiritRadioGetXtalFrequency+0x10>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	20000368 	.word	0x20000368

08003e80 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003e88:	4a03      	ldr	r2, [pc, #12]	; (8003e98 <SpiritRadioSetXtalFrequency+0x18>)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6013      	str	r3, [r2, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	20000368 	.word	0x20000368

08003e9c <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	2101      	movs	r1, #1
 8003eac:	2054      	movs	r0, #84	; 0x54
 8003eae:	f000 f889 	bl	8003fc4 <RadioSpiWriteRegisters>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <SpiritTimerSetRxTimeoutCounter+0x30>)
 8003eb6:	b212      	sxth	r2, r2
 8003eb8:	4611      	mov	r1, r2
 8003eba:	7019      	strb	r1, [r3, #0]
 8003ebc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ec0:	705a      	strb	r2, [r3, #1]

}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000036c 	.word	0x2000036c

08003ed0 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003eda:	f107 030c 	add.w	r3, r7, #12
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	204f      	movs	r0, #79	; 0x4f
 8003ee4:	f000 f8ba 	bl	800405c <RadioSpiReadRegisters>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b1c      	ldr	r3, [pc, #112]	; (8003f5c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003eec:	b212      	sxth	r2, r2
 8003eee:	4611      	mov	r1, r2
 8003ef0:	7019      	strb	r1, [r3, #0]
 8003ef2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ef6:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003ef8:	7b3b      	ldrb	r3, [r7, #12]
 8003efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8003f02:	7b3b      	ldrb	r3, [r7, #12]
 8003f04:	b25a      	sxtb	r2, r3
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	b25b      	sxtb	r3, r3
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	b25b      	sxtb	r3, r3
 8003f12:	4313      	orrs	r3, r2
 8003f14:	b25b      	sxtb	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003f1a:	7b7b      	ldrb	r3, [r7, #13]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8003f24:	7b7b      	ldrb	r3, [r7, #13]
 8003f26:	b25a      	sxtb	r2, r3
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	015b      	lsls	r3, r3, #5
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	b25b      	sxtb	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003f36:	f107 030c 	add.w	r3, r7, #12
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	204f      	movs	r0, #79	; 0x4f
 8003f40:	f000 f840 	bl	8003fc4 <RadioSpiWriteRegisters>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003f48:	b212      	sxth	r2, r2
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	7019      	strb	r1, [r3, #0]
 8003f4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f52:	705a      	strb	r2, [r3, #1]

}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	2000036c 	.word	0x2000036c

08003f60 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	20c0      	movs	r0, #192	; 0xc0
 8003f6e:	f000 f875 	bl	800405c <RadioSpiReadRegisters>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <SpiritRefreshStatus+0x3c>)
 8003f76:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <SpiritRefreshStatus+0x3c>)
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d1f1      	bne.n	8003f66 <SpiritRefreshStatus+0x6>
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <SpiritRefreshStatus+0x40>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d1ea      	bne.n	8003f66 <SpiritRefreshStatus+0x6>

}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000036c 	.word	0x2000036c
 8003fa0:	2000036d 	.word	0x2000036d

08003fa4 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <RadioSpiInit+0x1c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <RadioSpiInit+0x16>
  {
    Error_Handler();
 8003fb6:	f7fd fb75 	bl	80016a4 <Error_Handler>
  }
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000010 	.word	0x20000010

08003fc4 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	4603      	mov	r3, r0
 8003fcc:	603a      	str	r2, [r7, #0]
 8003fce:	71fb      	strb	r3, [r7, #7]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	743b      	strb	r3, [r7, #16]
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003fdc:	2007      	movs	r0, #7
 8003fde:	f000 fb1e 	bl	800461e <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2110      	movs	r1, #16
 8003fe6:	481b      	ldr	r0, [pc, #108]	; (8004054 <RadioSpiWriteRegisters+0x90>)
 8003fe8:	f000 fcb8 	bl	800495c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003fec:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <RadioSpiWriteRegisters+0x94>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	f107 020c 	add.w	r2, r7, #12
 8003ff4:	f107 0110 	add.w	r1, r7, #16
 8003ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2302      	movs	r3, #2
 8004000:	f001 fbd1 	bl	80057a6 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004004:	4b14      	ldr	r3, [pc, #80]	; (8004058 <RadioSpiWriteRegisters+0x94>)
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	79bb      	ldrb	r3, [r7, #6]
 800400a:	b29a      	uxth	r2, r3
 800400c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004010:	6839      	ldr	r1, [r7, #0]
 8004012:	f001 f97b 	bl	800530c <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004016:	2201      	movs	r2, #1
 8004018:	2110      	movs	r1, #16
 800401a:	480e      	ldr	r0, [pc, #56]	; (8004054 <RadioSpiWriteRegisters+0x90>)
 800401c:	f000 fc9e 	bl	800495c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004020:	2007      	movs	r0, #7
 8004022:	f000 faee 	bl	8004602 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004026:	f107 0308 	add.w	r3, r7, #8
 800402a:	3301      	adds	r3, #1
 800402c:	7b3a      	ldrb	r2, [r7, #12]
 800402e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004030:	f107 0308 	add.w	r3, r7, #8
 8004034:	7b7a      	ldrb	r2, [r7, #13]
 8004036:	701a      	strb	r2, [r3, #0]

  return status;
 8004038:	893b      	ldrh	r3, [r7, #8]
 800403a:	82bb      	strh	r3, [r7, #20]
 800403c:	2300      	movs	r3, #0
 800403e:	7d3a      	ldrb	r2, [r7, #20]
 8004040:	f362 0307 	bfi	r3, r2, #0, #8
 8004044:	7d7a      	ldrb	r2, [r7, #21]
 8004046:	f362 230f 	bfi	r3, r2, #8, #8

}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40010800 	.word	0x40010800
 8004058:	20000010 	.word	0x20000010

0800405c <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
 8004062:	4603      	mov	r3, r0
 8004064:	603a      	str	r2, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
 8004068:	460b      	mov	r3, r1
 800406a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 800406c:	2301      	movs	r3, #1
 800406e:	743b      	strb	r3, [r7, #16]
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004074:	2007      	movs	r0, #7
 8004076:	f000 fad2 	bl	800461e <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800407a:	2200      	movs	r2, #0
 800407c:	2110      	movs	r1, #16
 800407e:	481b      	ldr	r0, [pc, #108]	; (80040ec <RadioSpiReadRegisters+0x90>)
 8004080:	f000 fc6c 	bl	800495c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <RadioSpiReadRegisters+0x94>)
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	f107 020c 	add.w	r2, r7, #12
 800408c:	f107 0110 	add.w	r1, r7, #16
 8004090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2302      	movs	r3, #2
 8004098:	f001 fb85 	bl	80057a6 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <RadioSpiReadRegisters+0x94>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	79bb      	ldrb	r3, [r7, #6]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040a8:	6839      	ldr	r1, [r7, #0]
 80040aa:	f001 fa6b 	bl	8005584 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80040ae:	2201      	movs	r2, #1
 80040b0:	2110      	movs	r1, #16
 80040b2:	480e      	ldr	r0, [pc, #56]	; (80040ec <RadioSpiReadRegisters+0x90>)
 80040b4:	f000 fc52 	bl	800495c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80040b8:	2007      	movs	r0, #7
 80040ba:	f000 faa2 	bl	8004602 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80040be:	f107 0308 	add.w	r3, r7, #8
 80040c2:	3301      	adds	r3, #1
 80040c4:	7b3a      	ldrb	r2, [r7, #12]
 80040c6:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80040c8:	f107 0308 	add.w	r3, r7, #8
 80040cc:	7b7a      	ldrb	r2, [r7, #13]
 80040ce:	701a      	strb	r2, [r3, #0]

  return status;
 80040d0:	893b      	ldrh	r3, [r7, #8]
 80040d2:	82bb      	strh	r3, [r7, #20]
 80040d4:	2300      	movs	r3, #0
 80040d6:	7d3a      	ldrb	r2, [r7, #20]
 80040d8:	f362 0307 	bfi	r3, r2, #0, #8
 80040dc:	7d7a      	ldrb	r2, [r7, #21]
 80040de:	f362 230f 	bfi	r3, r2, #8, #8
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40010800 	.word	0x40010800
 80040f0:	20000010 	.word	0x20000010

080040f4 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	743b      	strb	r3, [r7, #16]
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004106:	2007      	movs	r0, #7
 8004108:	f000 fa89 	bl	800461e <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800410c:	2200      	movs	r2, #0
 800410e:	2110      	movs	r1, #16
 8004110:	4816      	ldr	r0, [pc, #88]	; (800416c <RadioSpiCommandStrobes+0x78>)
 8004112:	f000 fc23 	bl	800495c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004116:	4b16      	ldr	r3, [pc, #88]	; (8004170 <RadioSpiCommandStrobes+0x7c>)
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	f107 020c 	add.w	r2, r7, #12
 800411e:	f107 0110 	add.w	r1, r7, #16
 8004122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	2302      	movs	r3, #2
 800412a:	f001 fb3c 	bl	80057a6 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800412e:	2201      	movs	r2, #1
 8004130:	2110      	movs	r1, #16
 8004132:	480e      	ldr	r0, [pc, #56]	; (800416c <RadioSpiCommandStrobes+0x78>)
 8004134:	f000 fc12 	bl	800495c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004138:	2007      	movs	r0, #7
 800413a:	f000 fa62 	bl	8004602 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	3301      	adds	r3, #1
 8004144:	7b3a      	ldrb	r2, [r7, #12]
 8004146:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004148:	f107 0308 	add.w	r3, r7, #8
 800414c:	7b7a      	ldrb	r2, [r7, #13]
 800414e:	701a      	strb	r2, [r3, #0]

  return status;
 8004150:	893b      	ldrh	r3, [r7, #8]
 8004152:	82bb      	strh	r3, [r7, #20]
 8004154:	2300      	movs	r3, #0
 8004156:	7d3a      	ldrb	r2, [r7, #20]
 8004158:	f362 0307 	bfi	r3, r2, #0, #8
 800415c:	7d7a      	ldrb	r2, [r7, #21]
 800415e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40010800 	.word	0x40010800
 8004170:	20000010 	.word	0x20000010

08004174 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af02      	add	r7, sp, #8
 800417a:	4603      	mov	r3, r0
 800417c:	6039      	str	r1, [r7, #0]
 800417e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004180:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004184:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004186:	2007      	movs	r0, #7
 8004188:	f000 fa49 	bl	800461e <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800418c:	2200      	movs	r2, #0
 800418e:	2110      	movs	r1, #16
 8004190:	481a      	ldr	r0, [pc, #104]	; (80041fc <RadioSpiWriteFifo+0x88>)
 8004192:	f000 fbe3 	bl	800495c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <RadioSpiWriteFifo+0x8c>)
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	f107 020c 	add.w	r2, r7, #12
 800419e:	f107 0110 	add.w	r1, r7, #16
 80041a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	2302      	movs	r3, #2
 80041aa:	f001 fafc 	bl	80057a6 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <RadioSpiWriteFifo+0x8c>)
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	f001 f8a6 	bl	800530c <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80041c0:	2201      	movs	r2, #1
 80041c2:	2110      	movs	r1, #16
 80041c4:	480d      	ldr	r0, [pc, #52]	; (80041fc <RadioSpiWriteFifo+0x88>)
 80041c6:	f000 fbc9 	bl	800495c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80041ca:	2007      	movs	r0, #7
 80041cc:	f000 fa19 	bl	8004602 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	3301      	adds	r3, #1
 80041d6:	7b3a      	ldrb	r2, [r7, #12]
 80041d8:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80041da:	f107 0308 	add.w	r3, r7, #8
 80041de:	7b7a      	ldrb	r2, [r7, #13]
 80041e0:	701a      	strb	r2, [r3, #0]

  return status;
 80041e2:	893b      	ldrh	r3, [r7, #8]
 80041e4:	82bb      	strh	r3, [r7, #20]
 80041e6:	2300      	movs	r3, #0
 80041e8:	7d3a      	ldrb	r2, [r7, #20]
 80041ea:	f362 0307 	bfi	r3, r2, #0, #8
 80041ee:	7d7a      	ldrb	r2, [r7, #21]
 80041f0:	f362 230f 	bfi	r3, r2, #8, #8
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40010800 	.word	0x40010800
 8004200:	20000010 	.word	0x20000010

08004204 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	4603      	mov	r3, r0
 800420c:	6039      	str	r1, [r7, #0]
 800420e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8004210:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004214:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004216:	2007      	movs	r0, #7
 8004218:	f000 fa01 	bl	800461e <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800421c:	2200      	movs	r2, #0
 800421e:	2110      	movs	r1, #16
 8004220:	481a      	ldr	r0, [pc, #104]	; (800428c <RadioSpiReadFifo+0x88>)
 8004222:	f000 fb9b 	bl	800495c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004226:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <RadioSpiReadFifo+0x8c>)
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	f107 020c 	add.w	r2, r7, #12
 800422e:	f107 0110 	add.w	r1, r7, #16
 8004232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2302      	movs	r3, #2
 800423a:	f001 fab4 	bl	80057a6 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800423e:	4b14      	ldr	r3, [pc, #80]	; (8004290 <RadioSpiReadFifo+0x8c>)
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	b29a      	uxth	r2, r3
 8004246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424a:	6839      	ldr	r1, [r7, #0]
 800424c:	f001 f99a 	bl	8005584 <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 8004250:	2201      	movs	r2, #1
 8004252:	2110      	movs	r1, #16
 8004254:	480d      	ldr	r0, [pc, #52]	; (800428c <RadioSpiReadFifo+0x88>)
 8004256:	f000 fb81 	bl	800495c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800425a:	2007      	movs	r0, #7
 800425c:	f000 f9d1 	bl	8004602 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004260:	f107 0308 	add.w	r3, r7, #8
 8004264:	3301      	adds	r3, #1
 8004266:	7b3a      	ldrb	r2, [r7, #12]
 8004268:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800426a:	f107 0308 	add.w	r3, r7, #8
 800426e:	7b7a      	ldrb	r2, [r7, #13]
 8004270:	701a      	strb	r2, [r3, #0]

  return status;
 8004272:	893b      	ldrh	r3, [r7, #8]
 8004274:	82bb      	strh	r3, [r7, #20]
 8004276:	2300      	movs	r3, #0
 8004278:	7d3a      	ldrb	r2, [r7, #20]
 800427a:	f362 0307 	bfi	r3, r2, #0, #8
 800427e:	7d7a      	ldrb	r2, [r7, #21]
 8004280:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40010800 	.word	0x40010800
 8004290:	20000010 	.word	0x20000010

08004294 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8004298:	2201      	movs	r2, #1
 800429a:	2101      	movs	r1, #1
 800429c:	4802      	ldr	r0, [pc, #8]	; (80042a8 <RadioEnterShutdown+0x14>)
 800429e:	f000 fb5d 	bl	800495c <HAL_GPIO_WritePin>
}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40010c00 	.word	0x40010c00

080042ac <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80042b0:	2200      	movs	r2, #0
 80042b2:	2101      	movs	r1, #1
 80042b4:	4803      	ldr	r0, [pc, #12]	; (80042c4 <RadioExitShutdown+0x18>)
 80042b6:	f000 fb51 	bl	800495c <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 80042ba:	2001      	movs	r0, #1
 80042bc:	f000 f866 	bl	800438c <HAL_Delay>
}
 80042c0:	bf00      	nop
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40010c00 	.word	0x40010c00

080042c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <HAL_Init+0x28>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <HAL_Init+0x28>)
 80042d2:	f043 0310 	orr.w	r3, r3, #16
 80042d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042d8:	2003      	movs	r0, #3
 80042da:	f000 f96b 	bl	80045b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042de:	200f      	movs	r0, #15
 80042e0:	f000 f808 	bl	80042f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042e4:	f7fd f9e4 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40022000 	.word	0x40022000

080042f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042fc:	4b12      	ldr	r3, [pc, #72]	; (8004348 <HAL_InitTick+0x54>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b12      	ldr	r3, [pc, #72]	; (800434c <HAL_InitTick+0x58>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	4619      	mov	r1, r3
 8004306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800430a:	fbb3 f3f1 	udiv	r3, r3, r1
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f991 	bl	800463a <HAL_SYSTICK_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e00e      	b.n	8004340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b0f      	cmp	r3, #15
 8004326:	d80a      	bhi.n	800433e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004328:	2200      	movs	r2, #0
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	f000 f94b 	bl	80045ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004334:	4a06      	ldr	r2, [pc, #24]	; (8004350 <HAL_InitTick+0x5c>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000008 	.word	0x20000008
 800434c:	20000018 	.word	0x20000018
 8004350:	20000014 	.word	0x20000014

08004354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_IncTick+0x1c>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_IncTick+0x20>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4413      	add	r3, r2
 8004364:	4a03      	ldr	r2, [pc, #12]	; (8004374 <HAL_IncTick+0x20>)
 8004366:	6013      	str	r3, [r2, #0]
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	20000018 	.word	0x20000018
 8004374:	20000370 	.word	0x20000370

08004378 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return uwTick;
 800437c:	4b02      	ldr	r3, [pc, #8]	; (8004388 <HAL_GetTick+0x10>)
 800437e:	681b      	ldr	r3, [r3, #0]
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr
 8004388:	20000370 	.word	0x20000370

0800438c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004394:	f7ff fff0 	bl	8004378 <HAL_GetTick>
 8004398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d005      	beq.n	80043b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_Delay+0x44>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043b2:	bf00      	nop
 80043b4:	f7ff ffe0 	bl	8004378 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d8f7      	bhi.n	80043b4 <HAL_Delay+0x28>
  {
  }
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000018 	.word	0x20000018

080043d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <__NVIC_SetPriorityGrouping+0x44>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043f0:	4013      	ands	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004406:	4a04      	ldr	r2, [pc, #16]	; (8004418 <__NVIC_SetPriorityGrouping+0x44>)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	60d3      	str	r3, [r2, #12]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <__NVIC_GetPriorityGrouping+0x18>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0a1b      	lsrs	r3, r3, #8
 8004426:	f003 0307 	and.w	r3, r3, #7
}
 800442a:	4618      	mov	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	2b00      	cmp	r3, #0
 8004448:	db0b      	blt.n	8004462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	f003 021f 	and.w	r2, r3, #31
 8004450:	4906      	ldr	r1, [pc, #24]	; (800446c <__NVIC_EnableIRQ+0x34>)
 8004452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2001      	movs	r0, #1
 800445a:	fa00 f202 	lsl.w	r2, r0, r2
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	e000e100 	.word	0xe000e100

08004470 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	db12      	blt.n	80044a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	490a      	ldr	r1, [pc, #40]	; (80044b4 <__NVIC_DisableIRQ+0x44>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2001      	movs	r0, #1
 8004492:	fa00 f202 	lsl.w	r2, r0, r2
 8004496:	3320      	adds	r3, #32
 8004498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800449c:	f3bf 8f4f 	dsb	sy
}
 80044a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044a2:	f3bf 8f6f 	isb	sy
}
 80044a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	e000e100 	.word	0xe000e100

080044b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	6039      	str	r1, [r7, #0]
 80044c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	db0a      	blt.n	80044e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	490c      	ldr	r1, [pc, #48]	; (8004504 <__NVIC_SetPriority+0x4c>)
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	0112      	lsls	r2, r2, #4
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	440b      	add	r3, r1
 80044dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044e0:	e00a      	b.n	80044f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	4908      	ldr	r1, [pc, #32]	; (8004508 <__NVIC_SetPriority+0x50>)
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	3b04      	subs	r3, #4
 80044f0:	0112      	lsls	r2, r2, #4
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	440b      	add	r3, r1
 80044f6:	761a      	strb	r2, [r3, #24]
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	e000e100 	.word	0xe000e100
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800450c:	b480      	push	{r7}
 800450e:	b089      	sub	sp, #36	; 0x24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f1c3 0307 	rsb	r3, r3, #7
 8004526:	2b04      	cmp	r3, #4
 8004528:	bf28      	it	cs
 800452a:	2304      	movcs	r3, #4
 800452c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3304      	adds	r3, #4
 8004532:	2b06      	cmp	r3, #6
 8004534:	d902      	bls.n	800453c <NVIC_EncodePriority+0x30>
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3b03      	subs	r3, #3
 800453a:	e000      	b.n	800453e <NVIC_EncodePriority+0x32>
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004540:	f04f 32ff 	mov.w	r2, #4294967295
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43da      	mvns	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	401a      	ands	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004554:	f04f 31ff 	mov.w	r1, #4294967295
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fa01 f303 	lsl.w	r3, r1, r3
 800455e:	43d9      	mvns	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004564:	4313      	orrs	r3, r2
         );
}
 8004566:	4618      	mov	r0, r3
 8004568:	3724      	adds	r7, #36	; 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3b01      	subs	r3, #1
 800457c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004580:	d301      	bcc.n	8004586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004582:	2301      	movs	r3, #1
 8004584:	e00f      	b.n	80045a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <SysTick_Config+0x40>)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458e:	210f      	movs	r1, #15
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	f7ff ff90 	bl	80044b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <SysTick_Config+0x40>)
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <SysTick_Config+0x40>)
 80045a0:	2207      	movs	r2, #7
 80045a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	e000e010 	.word	0xe000e010

080045b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff09 	bl	80043d4 <__NVIC_SetPriorityGrouping>
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	4603      	mov	r3, r0
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045dc:	f7ff ff1e 	bl	800441c <__NVIC_GetPriorityGrouping>
 80045e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	6978      	ldr	r0, [r7, #20]
 80045e8:	f7ff ff90 	bl	800450c <NVIC_EncodePriority>
 80045ec:	4602      	mov	r2, r0
 80045ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff ff5f 	bl	80044b8 <__NVIC_SetPriority>
}
 80045fa:	bf00      	nop
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	4603      	mov	r3, r0
 800460a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800460c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ff11 	bl	8004438 <__NVIC_EnableIRQ>
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	4603      	mov	r3, r0
 8004626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ff1f 	bl	8004470 <__NVIC_DisableIRQ>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff ff94 	bl	8004570 <SysTick_Config>
 8004648:	4603      	mov	r3, r0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004654:	b480      	push	{r7}
 8004656:	b08b      	sub	sp, #44	; 0x2c
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800465e:	2300      	movs	r3, #0
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004662:	2300      	movs	r3, #0
 8004664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004666:	e169      	b.n	800493c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004668:	2201      	movs	r2, #1
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	429a      	cmp	r2, r3
 8004682:	f040 8158 	bne.w	8004936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4a9a      	ldr	r2, [pc, #616]	; (80048f4 <HAL_GPIO_Init+0x2a0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d05e      	beq.n	800474e <HAL_GPIO_Init+0xfa>
 8004690:	4a98      	ldr	r2, [pc, #608]	; (80048f4 <HAL_GPIO_Init+0x2a0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d875      	bhi.n	8004782 <HAL_GPIO_Init+0x12e>
 8004696:	4a98      	ldr	r2, [pc, #608]	; (80048f8 <HAL_GPIO_Init+0x2a4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d058      	beq.n	800474e <HAL_GPIO_Init+0xfa>
 800469c:	4a96      	ldr	r2, [pc, #600]	; (80048f8 <HAL_GPIO_Init+0x2a4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d86f      	bhi.n	8004782 <HAL_GPIO_Init+0x12e>
 80046a2:	4a96      	ldr	r2, [pc, #600]	; (80048fc <HAL_GPIO_Init+0x2a8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d052      	beq.n	800474e <HAL_GPIO_Init+0xfa>
 80046a8:	4a94      	ldr	r2, [pc, #592]	; (80048fc <HAL_GPIO_Init+0x2a8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d869      	bhi.n	8004782 <HAL_GPIO_Init+0x12e>
 80046ae:	4a94      	ldr	r2, [pc, #592]	; (8004900 <HAL_GPIO_Init+0x2ac>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d04c      	beq.n	800474e <HAL_GPIO_Init+0xfa>
 80046b4:	4a92      	ldr	r2, [pc, #584]	; (8004900 <HAL_GPIO_Init+0x2ac>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d863      	bhi.n	8004782 <HAL_GPIO_Init+0x12e>
 80046ba:	4a92      	ldr	r2, [pc, #584]	; (8004904 <HAL_GPIO_Init+0x2b0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d046      	beq.n	800474e <HAL_GPIO_Init+0xfa>
 80046c0:	4a90      	ldr	r2, [pc, #576]	; (8004904 <HAL_GPIO_Init+0x2b0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d85d      	bhi.n	8004782 <HAL_GPIO_Init+0x12e>
 80046c6:	2b12      	cmp	r3, #18
 80046c8:	d82a      	bhi.n	8004720 <HAL_GPIO_Init+0xcc>
 80046ca:	2b12      	cmp	r3, #18
 80046cc:	d859      	bhi.n	8004782 <HAL_GPIO_Init+0x12e>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <HAL_GPIO_Init+0x80>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	0800474f 	.word	0x0800474f
 80046d8:	08004729 	.word	0x08004729
 80046dc:	0800473b 	.word	0x0800473b
 80046e0:	0800477d 	.word	0x0800477d
 80046e4:	08004783 	.word	0x08004783
 80046e8:	08004783 	.word	0x08004783
 80046ec:	08004783 	.word	0x08004783
 80046f0:	08004783 	.word	0x08004783
 80046f4:	08004783 	.word	0x08004783
 80046f8:	08004783 	.word	0x08004783
 80046fc:	08004783 	.word	0x08004783
 8004700:	08004783 	.word	0x08004783
 8004704:	08004783 	.word	0x08004783
 8004708:	08004783 	.word	0x08004783
 800470c:	08004783 	.word	0x08004783
 8004710:	08004783 	.word	0x08004783
 8004714:	08004783 	.word	0x08004783
 8004718:	08004731 	.word	0x08004731
 800471c:	08004745 	.word	0x08004745
 8004720:	4a79      	ldr	r2, [pc, #484]	; (8004908 <HAL_GPIO_Init+0x2b4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004726:	e02c      	b.n	8004782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	623b      	str	r3, [r7, #32]
          break;
 800472e:	e029      	b.n	8004784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	3304      	adds	r3, #4
 8004736:	623b      	str	r3, [r7, #32]
          break;
 8004738:	e024      	b.n	8004784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	3308      	adds	r3, #8
 8004740:	623b      	str	r3, [r7, #32]
          break;
 8004742:	e01f      	b.n	8004784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	330c      	adds	r3, #12
 800474a:	623b      	str	r3, [r7, #32]
          break;
 800474c:	e01a      	b.n	8004784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004756:	2304      	movs	r3, #4
 8004758:	623b      	str	r3, [r7, #32]
          break;
 800475a:	e013      	b.n	8004784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d105      	bne.n	8004770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004764:	2308      	movs	r3, #8
 8004766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	611a      	str	r2, [r3, #16]
          break;
 800476e:	e009      	b.n	8004784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004770:	2308      	movs	r3, #8
 8004772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	615a      	str	r2, [r3, #20]
          break;
 800477a:	e003      	b.n	8004784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800477c:	2300      	movs	r3, #0
 800477e:	623b      	str	r3, [r7, #32]
          break;
 8004780:	e000      	b.n	8004784 <HAL_GPIO_Init+0x130>
          break;
 8004782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2bff      	cmp	r3, #255	; 0xff
 8004788:	d801      	bhi.n	800478e <HAL_GPIO_Init+0x13a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	e001      	b.n	8004792 <HAL_GPIO_Init+0x13e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2bff      	cmp	r3, #255	; 0xff
 8004798:	d802      	bhi.n	80047a0 <HAL_GPIO_Init+0x14c>
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	e002      	b.n	80047a6 <HAL_GPIO_Init+0x152>
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	3b08      	subs	r3, #8
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	210f      	movs	r1, #15
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	401a      	ands	r2, r3
 80047b8:	6a39      	ldr	r1, [r7, #32]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	431a      	orrs	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80b1 	beq.w	8004936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80047d4:	4b4d      	ldr	r3, [pc, #308]	; (800490c <HAL_GPIO_Init+0x2b8>)
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	4a4c      	ldr	r2, [pc, #304]	; (800490c <HAL_GPIO_Init+0x2b8>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6193      	str	r3, [r2, #24]
 80047e0:	4b4a      	ldr	r3, [pc, #296]	; (800490c <HAL_GPIO_Init+0x2b8>)
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80047ec:	4a48      	ldr	r2, [pc, #288]	; (8004910 <HAL_GPIO_Init+0x2bc>)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	3302      	adds	r3, #2
 80047f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	220f      	movs	r2, #15
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4013      	ands	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a40      	ldr	r2, [pc, #256]	; (8004914 <HAL_GPIO_Init+0x2c0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <HAL_GPIO_Init+0x1ec>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3f      	ldr	r2, [pc, #252]	; (8004918 <HAL_GPIO_Init+0x2c4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00d      	beq.n	800483c <HAL_GPIO_Init+0x1e8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3e      	ldr	r2, [pc, #248]	; (800491c <HAL_GPIO_Init+0x2c8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <HAL_GPIO_Init+0x1e4>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3d      	ldr	r2, [pc, #244]	; (8004920 <HAL_GPIO_Init+0x2cc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <HAL_GPIO_Init+0x1e0>
 8004830:	2303      	movs	r3, #3
 8004832:	e006      	b.n	8004842 <HAL_GPIO_Init+0x1ee>
 8004834:	2304      	movs	r3, #4
 8004836:	e004      	b.n	8004842 <HAL_GPIO_Init+0x1ee>
 8004838:	2302      	movs	r3, #2
 800483a:	e002      	b.n	8004842 <HAL_GPIO_Init+0x1ee>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_GPIO_Init+0x1ee>
 8004840:	2300      	movs	r3, #0
 8004842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004844:	f002 0203 	and.w	r2, r2, #3
 8004848:	0092      	lsls	r2, r2, #2
 800484a:	4093      	lsls	r3, r2
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004852:	492f      	ldr	r1, [pc, #188]	; (8004910 <HAL_GPIO_Init+0x2bc>)
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	3302      	adds	r3, #2
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d006      	beq.n	800487a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800486c:	4b2d      	ldr	r3, [pc, #180]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	492c      	ldr	r1, [pc, #176]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]
 8004878:	e006      	b.n	8004888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800487a:	4b2a      	ldr	r3, [pc, #168]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	43db      	mvns	r3, r3
 8004882:	4928      	ldr	r1, [pc, #160]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 8004884:	4013      	ands	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d006      	beq.n	80048a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004894:	4b23      	ldr	r3, [pc, #140]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	4922      	ldr	r1, [pc, #136]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	604b      	str	r3, [r1, #4]
 80048a0:	e006      	b.n	80048b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	491e      	ldr	r1, [pc, #120]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d006      	beq.n	80048ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048bc:	4b19      	ldr	r3, [pc, #100]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	4918      	ldr	r1, [pc, #96]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]
 80048c8:	e006      	b.n	80048d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048ca:	4b16      	ldr	r3, [pc, #88]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	4914      	ldr	r1, [pc, #80]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d021      	beq.n	8004928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048e4:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	490e      	ldr	r1, [pc, #56]	; (8004924 <HAL_GPIO_Init+0x2d0>)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60cb      	str	r3, [r1, #12]
 80048f0:	e021      	b.n	8004936 <HAL_GPIO_Init+0x2e2>
 80048f2:	bf00      	nop
 80048f4:	10320000 	.word	0x10320000
 80048f8:	10310000 	.word	0x10310000
 80048fc:	10220000 	.word	0x10220000
 8004900:	10210000 	.word	0x10210000
 8004904:	10120000 	.word	0x10120000
 8004908:	10110000 	.word	0x10110000
 800490c:	40021000 	.word	0x40021000
 8004910:	40010000 	.word	0x40010000
 8004914:	40010800 	.word	0x40010800
 8004918:	40010c00 	.word	0x40010c00
 800491c:	40011000 	.word	0x40011000
 8004920:	40011400 	.word	0x40011400
 8004924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_GPIO_Init+0x304>)
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	43db      	mvns	r3, r3
 8004930:	4909      	ldr	r1, [pc, #36]	; (8004958 <HAL_GPIO_Init+0x304>)
 8004932:	4013      	ands	r3, r2
 8004934:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	3301      	adds	r3, #1
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	fa22 f303 	lsr.w	r3, r2, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	f47f ae8e 	bne.w	8004668 <HAL_GPIO_Init+0x14>
  }
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	372c      	adds	r7, #44	; 0x2c
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr
 8004958:	40010400 	.word	0x40010400

0800495c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
 8004968:	4613      	mov	r3, r2
 800496a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800496c:	787b      	ldrb	r3, [r7, #1]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004972:	887a      	ldrh	r2, [r7, #2]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004978:	e003      	b.n	8004982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	041a      	lsls	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	611a      	str	r2, [r3, #16]
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004998:	695a      	ldr	r2, [r3, #20]
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d006      	beq.n	80049b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049a2:	4a05      	ldr	r2, [pc, #20]	; (80049b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049a4:	88fb      	ldrh	r3, [r7, #6]
 80049a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f806 	bl	80049bc <HAL_GPIO_EXTI_Callback>
  }
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40010400 	.word	0x40010400

080049bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e272      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8087 	beq.w	8004afe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049f0:	4b92      	ldr	r3, [pc, #584]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d00c      	beq.n	8004a16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049fc:	4b8f      	ldr	r3, [pc, #572]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d112      	bne.n	8004a2e <HAL_RCC_OscConfig+0x5e>
 8004a08:	4b8c      	ldr	r3, [pc, #560]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d10b      	bne.n	8004a2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a16:	4b89      	ldr	r3, [pc, #548]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d06c      	beq.n	8004afc <HAL_RCC_OscConfig+0x12c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d168      	bne.n	8004afc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e24c      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a36:	d106      	bne.n	8004a46 <HAL_RCC_OscConfig+0x76>
 8004a38:	4b80      	ldr	r3, [pc, #512]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a7f      	ldr	r2, [pc, #508]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	e02e      	b.n	8004aa4 <HAL_RCC_OscConfig+0xd4>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x98>
 8004a4e:	4b7b      	ldr	r3, [pc, #492]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7a      	ldr	r2, [pc, #488]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b78      	ldr	r3, [pc, #480]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a77      	ldr	r2, [pc, #476]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e01d      	b.n	8004aa4 <HAL_RCC_OscConfig+0xd4>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0xbc>
 8004a72:	4b72      	ldr	r3, [pc, #456]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a71      	ldr	r2, [pc, #452]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	4b6f      	ldr	r3, [pc, #444]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a6e      	ldr	r2, [pc, #440]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCC_OscConfig+0xd4>
 8004a8c:	4b6b      	ldr	r3, [pc, #428]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6a      	ldr	r2, [pc, #424]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4b68      	ldr	r3, [pc, #416]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a67      	ldr	r2, [pc, #412]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d013      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7ff fc64 	bl	8004378 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab4:	f7ff fc60 	bl	8004378 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	; 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e200      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xe4>
 8004ad2:	e014      	b.n	8004afe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7ff fc50 	bl	8004378 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004adc:	f7ff fc4c 	bl	8004378 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e1ec      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aee:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x10c>
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d063      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b0a:	4b4c      	ldr	r3, [pc, #304]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b16:	4b49      	ldr	r3, [pc, #292]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d11c      	bne.n	8004b5c <HAL_RCC_OscConfig+0x18c>
 8004b22:	4b46      	ldr	r3, [pc, #280]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d116      	bne.n	8004b5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2e:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <HAL_RCC_OscConfig+0x176>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d001      	beq.n	8004b46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e1c0      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b46:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4939      	ldr	r1, [pc, #228]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5a:	e03a      	b.n	8004bd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d020      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b64:	4b36      	ldr	r3, [pc, #216]	; (8004c40 <HAL_RCC_OscConfig+0x270>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7ff fc05 	bl	8004378 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b72:	f7ff fc01 	bl	8004378 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e1a1      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b84:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b90:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4927      	ldr	r1, [pc, #156]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	600b      	str	r3, [r1, #0]
 8004ba4:	e015      	b.n	8004bd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ba6:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7ff fbe4 	bl	8004378 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb4:	f7ff fbe0 	bl	8004378 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e180      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bc6:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d03a      	beq.n	8004c54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d019      	beq.n	8004c1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004be6:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <HAL_RCC_OscConfig+0x274>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bec:	f7ff fbc4 	bl	8004378 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf4:	f7ff fbc0 	bl	8004378 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e160      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c06:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <HAL_RCC_OscConfig+0x26c>)
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c12:	2001      	movs	r0, #1
 8004c14:	f000 fad8 	bl	80051c8 <RCC_Delay>
 8004c18:	e01c      	b.n	8004c54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <HAL_RCC_OscConfig+0x274>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c20:	f7ff fbaa 	bl	8004378 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c26:	e00f      	b.n	8004c48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c28:	f7ff fba6 	bl	8004378 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d908      	bls.n	8004c48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e146      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	42420000 	.word	0x42420000
 8004c44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c48:	4b92      	ldr	r3, [pc, #584]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e9      	bne.n	8004c28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80a6 	beq.w	8004dae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c66:	4b8b      	ldr	r3, [pc, #556]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10d      	bne.n	8004c8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c72:	4b88      	ldr	r3, [pc, #544]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4a87      	ldr	r2, [pc, #540]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	61d3      	str	r3, [r2, #28]
 8004c7e:	4b85      	ldr	r3, [pc, #532]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	60bb      	str	r3, [r7, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8e:	4b82      	ldr	r3, [pc, #520]	; (8004e98 <HAL_RCC_OscConfig+0x4c8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d118      	bne.n	8004ccc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c9a:	4b7f      	ldr	r3, [pc, #508]	; (8004e98 <HAL_RCC_OscConfig+0x4c8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7e      	ldr	r2, [pc, #504]	; (8004e98 <HAL_RCC_OscConfig+0x4c8>)
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca6:	f7ff fb67 	bl	8004378 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cae:	f7ff fb63 	bl	8004378 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b64      	cmp	r3, #100	; 0x64
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e103      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc0:	4b75      	ldr	r3, [pc, #468]	; (8004e98 <HAL_RCC_OscConfig+0x4c8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d106      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x312>
 8004cd4:	4b6f      	ldr	r3, [pc, #444]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	4a6e      	ldr	r2, [pc, #440]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	6213      	str	r3, [r2, #32]
 8004ce0:	e02d      	b.n	8004d3e <HAL_RCC_OscConfig+0x36e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x334>
 8004cea:	4b6a      	ldr	r3, [pc, #424]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	4a69      	ldr	r2, [pc, #420]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	6213      	str	r3, [r2, #32]
 8004cf6:	4b67      	ldr	r3, [pc, #412]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	4a66      	ldr	r2, [pc, #408]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	f023 0304 	bic.w	r3, r3, #4
 8004d00:	6213      	str	r3, [r2, #32]
 8004d02:	e01c      	b.n	8004d3e <HAL_RCC_OscConfig+0x36e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	d10c      	bne.n	8004d26 <HAL_RCC_OscConfig+0x356>
 8004d0c:	4b61      	ldr	r3, [pc, #388]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	4a60      	ldr	r2, [pc, #384]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d12:	f043 0304 	orr.w	r3, r3, #4
 8004d16:	6213      	str	r3, [r2, #32]
 8004d18:	4b5e      	ldr	r3, [pc, #376]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	4a5d      	ldr	r2, [pc, #372]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6213      	str	r3, [r2, #32]
 8004d24:	e00b      	b.n	8004d3e <HAL_RCC_OscConfig+0x36e>
 8004d26:	4b5b      	ldr	r3, [pc, #364]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	4a5a      	ldr	r2, [pc, #360]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	6213      	str	r3, [r2, #32]
 8004d32:	4b58      	ldr	r3, [pc, #352]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	4a57      	ldr	r2, [pc, #348]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d015      	beq.n	8004d72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d46:	f7ff fb17 	bl	8004378 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7ff fb13 	bl	8004378 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e0b1      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	4b4b      	ldr	r3, [pc, #300]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ee      	beq.n	8004d4e <HAL_RCC_OscConfig+0x37e>
 8004d70:	e014      	b.n	8004d9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d72:	f7ff fb01 	bl	8004378 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7ff fafd 	bl	8004378 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e09b      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d90:	4b40      	ldr	r3, [pc, #256]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ee      	bne.n	8004d7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d105      	bne.n	8004dae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da2:	4b3c      	ldr	r3, [pc, #240]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4a3b      	ldr	r2, [pc, #236]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8087 	beq.w	8004ec6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db8:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d061      	beq.n	8004e88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d146      	bne.n	8004e5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dcc:	4b33      	ldr	r3, [pc, #204]	; (8004e9c <HAL_RCC_OscConfig+0x4cc>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd2:	f7ff fad1 	bl	8004378 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dda:	f7ff facd 	bl	8004378 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e06d      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dec:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f0      	bne.n	8004dda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e00:	d108      	bne.n	8004e14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	4921      	ldr	r1, [pc, #132]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e14:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a19      	ldr	r1, [r3, #32]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	430b      	orrs	r3, r1
 8004e26:	491b      	ldr	r1, [pc, #108]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <HAL_RCC_OscConfig+0x4cc>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e32:	f7ff faa1 	bl	8004378 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3a:	f7ff fa9d 	bl	8004378 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e03d      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e4c:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x46a>
 8004e58:	e035      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5a:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <HAL_RCC_OscConfig+0x4cc>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7ff fa8a 	bl	8004378 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e68:	f7ff fa86 	bl	8004378 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e026      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x498>
 8004e86:	e01e      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d107      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e019      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
 8004e94:	40021000 	.word	0x40021000
 8004e98:	40007000 	.word	0x40007000
 8004e9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_OscConfig+0x500>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d106      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d001      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40021000 	.word	0x40021000

08004ed4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0d0      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee8:	4b6a      	ldr	r3, [pc, #424]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d910      	bls.n	8004f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef6:	4b67      	ldr	r3, [pc, #412]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 0207 	bic.w	r2, r3, #7
 8004efe:	4965      	ldr	r1, [pc, #404]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	4b63      	ldr	r3, [pc, #396]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0b8      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f30:	4b59      	ldr	r3, [pc, #356]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a58      	ldr	r2, [pc, #352]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f48:	4b53      	ldr	r3, [pc, #332]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4a52      	ldr	r2, [pc, #328]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f54:	4b50      	ldr	r3, [pc, #320]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	494d      	ldr	r1, [pc, #308]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d040      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d107      	bne.n	8004f8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b47      	ldr	r3, [pc, #284]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d115      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e07f      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f92:	4b41      	ldr	r3, [pc, #260]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e073      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e06b      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb2:	4b39      	ldr	r3, [pc, #228]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f023 0203 	bic.w	r2, r3, #3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	4936      	ldr	r1, [pc, #216]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc4:	f7ff f9d8 	bl	8004378 <HAL_GetTick>
 8004fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fcc:	f7ff f9d4 	bl	8004378 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e053      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f003 020c 	and.w	r2, r3, #12
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d1eb      	bne.n	8004fcc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d210      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005002:	4b24      	ldr	r3, [pc, #144]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 0207 	bic.w	r2, r3, #7
 800500a:	4922      	ldr	r1, [pc, #136]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	4313      	orrs	r3, r2
 8005010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b20      	ldr	r3, [pc, #128]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e032      	b.n	800508a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4916      	ldr	r1, [pc, #88]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 800503e:	4313      	orrs	r3, r2
 8005040:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800504e:	4b12      	ldr	r3, [pc, #72]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	490e      	ldr	r1, [pc, #56]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005062:	f000 f821 	bl	80050a8 <HAL_RCC_GetSysClockFreq>
 8005066:	4602      	mov	r2, r0
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	490a      	ldr	r1, [pc, #40]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	5ccb      	ldrb	r3, [r1, r3]
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <HAL_RCC_ClockConfig+0x1cc>)
 800507c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff f936 	bl	80042f4 <HAL_InitTick>

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40022000 	.word	0x40022000
 8005098:	40021000 	.word	0x40021000
 800509c:	0800a460 	.word	0x0800a460
 80050a0:	20000008 	.word	0x20000008
 80050a4:	20000014 	.word	0x20000014

080050a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a8:	b490      	push	{r4, r7}
 80050aa:	b08a      	sub	sp, #40	; 0x28
 80050ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050ae:	4b29      	ldr	r3, [pc, #164]	; (8005154 <HAL_RCC_GetSysClockFreq+0xac>)
 80050b0:	1d3c      	adds	r4, r7, #4
 80050b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80050b8:	f240 2301 	movw	r3, #513	; 0x201
 80050bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	2300      	movs	r3, #0
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050d2:	4b21      	ldr	r3, [pc, #132]	; (8005158 <HAL_RCC_GetSysClockFreq+0xb0>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 030c 	and.w	r3, r3, #12
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d002      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0x40>
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d003      	beq.n	80050ee <HAL_RCC_GetSysClockFreq+0x46>
 80050e6:	e02b      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050e8:	4b1c      	ldr	r3, [pc, #112]	; (800515c <HAL_RCC_GetSysClockFreq+0xb4>)
 80050ea:	623b      	str	r3, [r7, #32]
      break;
 80050ec:	e02b      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	0c9b      	lsrs	r3, r3, #18
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	3328      	adds	r3, #40	; 0x28
 80050f8:	443b      	add	r3, r7
 80050fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80050fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d012      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800510a:	4b13      	ldr	r3, [pc, #76]	; (8005158 <HAL_RCC_GetSysClockFreq+0xb0>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	0c5b      	lsrs	r3, r3, #17
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	3328      	adds	r3, #40	; 0x28
 8005116:	443b      	add	r3, r7
 8005118:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800511c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4a0e      	ldr	r2, [pc, #56]	; (800515c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005122:	fb03 f202 	mul.w	r2, r3, r2
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
 800512e:	e004      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4a0b      	ldr	r2, [pc, #44]	; (8005160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005134:	fb02 f303 	mul.w	r3, r2, r3
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	623b      	str	r3, [r7, #32]
      break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005142:	623b      	str	r3, [r7, #32]
      break;
 8005144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005146:	6a3b      	ldr	r3, [r7, #32]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3728      	adds	r7, #40	; 0x28
 800514c:	46bd      	mov	sp, r7
 800514e:	bc90      	pop	{r4, r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	0800a1f0 	.word	0x0800a1f0
 8005158:	40021000 	.word	0x40021000
 800515c:	007a1200 	.word	0x007a1200
 8005160:	003d0900 	.word	0x003d0900

08005164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005168:	4b02      	ldr	r3, [pc, #8]	; (8005174 <HAL_RCC_GetHCLKFreq+0x10>)
 800516a:	681b      	ldr	r3, [r3, #0]
}
 800516c:	4618      	mov	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr
 8005174:	20000008 	.word	0x20000008

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800517c:	f7ff fff2 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b05      	ldr	r3, [pc, #20]	; (8005198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4903      	ldr	r1, [pc, #12]	; (800519c <HAL_RCC_GetPCLK1Freq+0x24>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	0800a470 	.word	0x0800a470

080051a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051a4:	f7ff ffde 	bl	8005164 <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	0adb      	lsrs	r3, r3, #11
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4903      	ldr	r1, [pc, #12]	; (80051c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40021000 	.word	0x40021000
 80051c4:	0800a470 	.word	0x0800a470

080051c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051d0:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <RCC_Delay+0x34>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <RCC_Delay+0x38>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	0a5b      	lsrs	r3, r3, #9
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051e4:	bf00      	nop
  }
  while (Delay --);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1e5a      	subs	r2, r3, #1
 80051ea:	60fa      	str	r2, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f9      	bne.n	80051e4 <RCC_Delay+0x1c>
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr
 80051fc:	20000008 	.word	0x20000008
 8005200:	10624dd3 	.word	0x10624dd3

08005204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e076      	b.n	8005304 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	2b00      	cmp	r3, #0
 800521c:	d108      	bne.n	8005230 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005226:	d009      	beq.n	800523c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	61da      	str	r2, [r3, #28]
 800522e:	e005      	b.n	800523c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7fc fa5c 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005272:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c0:	ea42 0103 	orr.w	r1, r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	0c1a      	lsrs	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f002 0204 	and.w	r2, r2, #4
 80052e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_SPI_Transmit+0x22>
 800532a:	2302      	movs	r3, #2
 800532c:	e126      	b.n	800557c <HAL_SPI_Transmit+0x270>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005336:	f7ff f81f 	bl	8004378 <HAL_GetTick>
 800533a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d002      	beq.n	8005352 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800534c:	2302      	movs	r3, #2
 800534e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005350:	e10b      	b.n	800556a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_SPI_Transmit+0x52>
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005362:	e102      	b.n	800556a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2203      	movs	r2, #3
 8005368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	88fa      	ldrh	r2, [r7, #6]
 800537c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	88fa      	ldrh	r2, [r7, #6]
 8005382:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053aa:	d10f      	bne.n	80053cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	d007      	beq.n	80053ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f2:	d14b      	bne.n	800548c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <HAL_SPI_Transmit+0xf6>
 80053fc:	8afb      	ldrh	r3, [r7, #22]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d13e      	bne.n	8005480 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	881a      	ldrh	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	1c9a      	adds	r2, r3, #2
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005426:	e02b      	b.n	8005480 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b02      	cmp	r3, #2
 8005434:	d112      	bne.n	800545c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	881a      	ldrh	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	1c9a      	adds	r2, r3, #2
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	86da      	strh	r2, [r3, #54]	; 0x36
 800545a:	e011      	b.n	8005480 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800545c:	f7fe ff8c 	bl	8004378 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d803      	bhi.n	8005474 <HAL_SPI_Transmit+0x168>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d102      	bne.n	800547a <HAL_SPI_Transmit+0x16e>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800547e:	e074      	b.n	800556a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ce      	bne.n	8005428 <HAL_SPI_Transmit+0x11c>
 800548a:	e04c      	b.n	8005526 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_SPI_Transmit+0x18e>
 8005494:	8afb      	ldrh	r3, [r7, #22]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d140      	bne.n	800551c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054c0:	e02c      	b.n	800551c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d113      	bne.n	80054f8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80054f6:	e011      	b.n	800551c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f8:	f7fe ff3e 	bl	8004378 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d803      	bhi.n	8005510 <HAL_SPI_Transmit+0x204>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d102      	bne.n	8005516 <HAL_SPI_Transmit+0x20a>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	77fb      	strb	r3, [r7, #31]
          goto error;
 800551a:	e026      	b.n	800556a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1cd      	bne.n	80054c2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fbb8 	bl	8005ca0 <SPI_EndRxTxTransaction>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e000      	b.n	800556a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005568:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800557a:	7ffb      	ldrb	r3, [r7, #31]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3720      	adds	r7, #32
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af02      	add	r7, sp, #8
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055a0:	d112      	bne.n	80055c8 <HAL_SPI_Receive+0x44>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10e      	bne.n	80055c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2204      	movs	r2, #4
 80055ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055b2:	88fa      	ldrh	r2, [r7, #6]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f8f1 	bl	80057a6 <HAL_SPI_TransmitReceive>
 80055c4:	4603      	mov	r3, r0
 80055c6:	e0ea      	b.n	800579e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_SPI_Receive+0x52>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e0e3      	b.n	800579e <HAL_SPI_Receive+0x21a>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055de:	f7fe fecb 	bl	8004378 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d002      	beq.n	80055f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
 80055f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055f4:	e0ca      	b.n	800578c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_SPI_Receive+0x7e>
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005606:	e0c1      	b.n	800578c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2204      	movs	r2, #4
 800560c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564e:	d10f      	bne.n	8005670 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800566e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d007      	beq.n	800568e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800568c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d162      	bne.n	800575c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005696:	e02e      	b.n	80056f6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d115      	bne.n	80056d2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f103 020c 	add.w	r2, r3, #12
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056d0:	e011      	b.n	80056f6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d2:	f7fe fe51 	bl	8004378 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d803      	bhi.n	80056ea <HAL_SPI_Receive+0x166>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d102      	bne.n	80056f0 <HAL_SPI_Receive+0x16c>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056f4:	e04a      	b.n	800578c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1cb      	bne.n	8005698 <HAL_SPI_Receive+0x114>
 8005700:	e031      	b.n	8005766 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b01      	cmp	r3, #1
 800570e:	d113      	bne.n	8005738 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	b292      	uxth	r2, r2
 800571c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	1c9a      	adds	r2, r3, #2
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005736:	e011      	b.n	800575c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005738:	f7fe fe1e 	bl	8004378 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d803      	bhi.n	8005750 <HAL_SPI_Receive+0x1cc>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d102      	bne.n	8005756 <HAL_SPI_Receive+0x1d2>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	75fb      	strb	r3, [r7, #23]
          goto error;
 800575a:	e017      	b.n	800578c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1cd      	bne.n	8005702 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fa46 	bl	8005bfc <SPI_EndRxTransaction>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	75fb      	strb	r3, [r7, #23]
 8005788:	e000      	b.n	800578c <HAL_SPI_Receive+0x208>
  }

error :
 800578a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800579c:	7dfb      	ldrb	r3, [r7, #23]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b08c      	sub	sp, #48	; 0x30
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
 80057b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057b4:	2301      	movs	r3, #1
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_SPI_TransmitReceive+0x26>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e18a      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x33c>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057d4:	f7fe fdd0 	bl	8004378 <HAL_GetTick>
 80057d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057ea:	887b      	ldrh	r3, [r7, #2]
 80057ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d00f      	beq.n	8005816 <HAL_SPI_TransmitReceive+0x70>
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057fc:	d107      	bne.n	800580e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <HAL_SPI_TransmitReceive+0x68>
 8005806:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800580a:	2b04      	cmp	r3, #4
 800580c:	d003      	beq.n	8005816 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800580e:	2302      	movs	r3, #2
 8005810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005814:	e15b      	b.n	8005ace <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_SPI_TransmitReceive+0x82>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <HAL_SPI_TransmitReceive+0x82>
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800582e:	e14e      	b.n	8005ace <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b04      	cmp	r3, #4
 800583a:	d003      	beq.n	8005844 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2205      	movs	r2, #5
 8005840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	887a      	ldrh	r2, [r7, #2]
 8005854:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	887a      	ldrh	r2, [r7, #2]
 800585a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	887a      	ldrh	r2, [r7, #2]
 8005866:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	887a      	ldrh	r2, [r7, #2]
 800586c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b40      	cmp	r3, #64	; 0x40
 8005886:	d007      	beq.n	8005898 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005896:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a0:	d178      	bne.n	8005994 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_SPI_TransmitReceive+0x10a>
 80058aa:	8b7b      	ldrh	r3, [r7, #26]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d166      	bne.n	800597e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b4:	881a      	ldrh	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	1c9a      	adds	r2, r3, #2
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058d4:	e053      	b.n	800597e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d11b      	bne.n	800591c <HAL_SPI_TransmitReceive+0x176>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d016      	beq.n	800591c <HAL_SPI_TransmitReceive+0x176>
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d113      	bne.n	800591c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	881a      	ldrh	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	1c9a      	adds	r2, r3, #2
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d119      	bne.n	800595e <HAL_SPI_TransmitReceive+0x1b8>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d014      	beq.n	800595e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	b292      	uxth	r2, r2
 8005940:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	1c9a      	adds	r2, r3, #2
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800595a:	2301      	movs	r3, #1
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800595e:	f7fe fd0b 	bl	8004378 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800596a:	429a      	cmp	r2, r3
 800596c:	d807      	bhi.n	800597e <HAL_SPI_TransmitReceive+0x1d8>
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d003      	beq.n	800597e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800597c:	e0a7      	b.n	8005ace <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1a6      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x130>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1a1      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x130>
 8005992:	e07c      	b.n	8005a8e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <HAL_SPI_TransmitReceive+0x1fc>
 800599c:	8b7b      	ldrh	r3, [r7, #26]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d16b      	bne.n	8005a7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	330c      	adds	r3, #12
 80059ac:	7812      	ldrb	r2, [r2, #0]
 80059ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c8:	e057      	b.n	8005a7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d11c      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x26c>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d017      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x26c>
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d114      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	7812      	ldrb	r2, [r2, #0]
 80059f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d119      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x2ae>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d014      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a50:	2301      	movs	r3, #1
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a54:	f7fe fc90 	bl	8004378 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d803      	bhi.n	8005a6c <HAL_SPI_TransmitReceive+0x2c6>
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	d102      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x2cc>
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a78:	e029      	b.n	8005ace <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1a2      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x224>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d19d      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f904 	bl	8005ca0 <SPI_EndRxTxTransaction>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d006      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005aaa:	e010      	b.n	8005ace <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	e000      	b.n	8005ace <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005acc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ade:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3730      	adds	r7, #48	; 0x30
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	4613      	mov	r3, r2
 8005afa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005afc:	f7fe fc3c 	bl	8004378 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	4413      	add	r3, r2
 8005b0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b0c:	f7fe fc34 	bl	8004378 <HAL_GetTick>
 8005b10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b12:	4b39      	ldr	r3, [pc, #228]	; (8005bf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	015b      	lsls	r3, r3, #5
 8005b18:	0d1b      	lsrs	r3, r3, #20
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	fb02 f303 	mul.w	r3, r2, r3
 8005b20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b22:	e054      	b.n	8005bce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d050      	beq.n	8005bce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b2c:	f7fe fc24 	bl	8004378 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d902      	bls.n	8005b42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d13d      	bne.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5a:	d111      	bne.n	8005b80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b64:	d004      	beq.n	8005b70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6e:	d107      	bne.n	8005b80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b88:	d10f      	bne.n	8005baa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ba8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e017      	b.n	8005bee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	bf0c      	ite	eq
 8005bde:	2301      	moveq	r3, #1
 8005be0:	2300      	movne	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d19b      	bne.n	8005b24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000008 	.word	0x20000008

08005bfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c10:	d111      	bne.n	8005c36 <SPI_EndRxTransaction+0x3a>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1a:	d004      	beq.n	8005c26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d107      	bne.n	8005c36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c34:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c3e:	d117      	bne.n	8005c70 <SPI_EndRxTransaction+0x74>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c48:	d112      	bne.n	8005c70 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	2101      	movs	r1, #1
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff ff49 	bl	8005aec <SPI_WaitFlagStateUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01a      	beq.n	8005c96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e013      	b.n	8005c98 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	2180      	movs	r1, #128	; 0x80
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7ff ff36 	bl	8005aec <SPI_WaitFlagStateUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8a:	f043 0220 	orr.w	r2, r3, #32
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e000      	b.n	8005c98 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2180      	movs	r1, #128	; 0x80
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f7ff ff18 	bl	8005aec <SPI_WaitFlagStateUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc6:	f043 0220 	orr.w	r2, r3, #32
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e000      	b.n	8005cd4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e041      	b.n	8005d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fb fd50 	bl	80017a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f000 fa26 	bl	800616c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d122      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d11b      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f06f 0202 	mvn.w	r2, #2
 8005da6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9ba 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005dc2:	e005      	b.n	8005dd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f9ad 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f9bc 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d122      	bne.n	8005e2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d11b      	bne.n	8005e2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f06f 0204 	mvn.w	r2, #4
 8005dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f990 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005e16:	e005      	b.n	8005e24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f983 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f992 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d122      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d11b      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f06f 0208 	mvn.w	r2, #8
 8005e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2204      	movs	r2, #4
 8005e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f966 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005e6a:	e005      	b.n	8005e78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f959 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f968 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d122      	bne.n	8005ed2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f003 0310 	and.w	r3, r3, #16
 8005e96:	2b10      	cmp	r3, #16
 8005e98:	d11b      	bne.n	8005ed2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f06f 0210 	mvn.w	r2, #16
 8005ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f93c 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005ebe:	e005      	b.n	8005ecc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f92f 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f93e 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d10e      	bne.n	8005efe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d107      	bne.n	8005efe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f06f 0201 	mvn.w	r2, #1
 8005ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f90a 	bl	8006112 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b80      	cmp	r3, #128	; 0x80
 8005f0a:	d10e      	bne.n	8005f2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f16:	2b80      	cmp	r3, #128	; 0x80
 8005f18:	d107      	bne.n	8005f2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fa80 	bl	800642a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d10e      	bne.n	8005f56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d107      	bne.n	8005f56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f902 	bl	800615a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d10e      	bne.n	8005f82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d107      	bne.n	8005f82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f06f 0220 	mvn.w	r2, #32
 8005f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fa4b 	bl	8006418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_ConfigClockSource+0x18>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e0b3      	b.n	800610a <HAL_TIM_ConfigClockSource+0x180>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fc0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fc8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	d03e      	beq.n	800605a <HAL_TIM_ConfigClockSource+0xd0>
 8005fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe0:	f200 8087 	bhi.w	80060f2 <HAL_TIM_ConfigClockSource+0x168>
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	f000 8085 	beq.w	80060f6 <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff0:	d87f      	bhi.n	80060f2 <HAL_TIM_ConfigClockSource+0x168>
 8005ff2:	2b70      	cmp	r3, #112	; 0x70
 8005ff4:	d01a      	beq.n	800602c <HAL_TIM_ConfigClockSource+0xa2>
 8005ff6:	2b70      	cmp	r3, #112	; 0x70
 8005ff8:	d87b      	bhi.n	80060f2 <HAL_TIM_ConfigClockSource+0x168>
 8005ffa:	2b60      	cmp	r3, #96	; 0x60
 8005ffc:	d050      	beq.n	80060a0 <HAL_TIM_ConfigClockSource+0x116>
 8005ffe:	2b60      	cmp	r3, #96	; 0x60
 8006000:	d877      	bhi.n	80060f2 <HAL_TIM_ConfigClockSource+0x168>
 8006002:	2b50      	cmp	r3, #80	; 0x50
 8006004:	d03c      	beq.n	8006080 <HAL_TIM_ConfigClockSource+0xf6>
 8006006:	2b50      	cmp	r3, #80	; 0x50
 8006008:	d873      	bhi.n	80060f2 <HAL_TIM_ConfigClockSource+0x168>
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d058      	beq.n	80060c0 <HAL_TIM_ConfigClockSource+0x136>
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	d86f      	bhi.n	80060f2 <HAL_TIM_ConfigClockSource+0x168>
 8006012:	2b30      	cmp	r3, #48	; 0x30
 8006014:	d064      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0x156>
 8006016:	2b30      	cmp	r3, #48	; 0x30
 8006018:	d86b      	bhi.n	80060f2 <HAL_TIM_ConfigClockSource+0x168>
 800601a:	2b20      	cmp	r3, #32
 800601c:	d060      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0x156>
 800601e:	2b20      	cmp	r3, #32
 8006020:	d867      	bhi.n	80060f2 <HAL_TIM_ConfigClockSource+0x168>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d05c      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0x156>
 8006026:	2b10      	cmp	r3, #16
 8006028:	d05a      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800602a:	e062      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	6899      	ldr	r1, [r3, #8]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f000 f96f 	bl	800631e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800604e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	609a      	str	r2, [r3, #8]
      break;
 8006058:	e04e      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6899      	ldr	r1, [r3, #8]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f000 f958 	bl	800631e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800607c:	609a      	str	r2, [r3, #8]
      break;
 800607e:	e03b      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6859      	ldr	r1, [r3, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	461a      	mov	r2, r3
 800608e:	f000 f8cf 	bl	8006230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2150      	movs	r1, #80	; 0x50
 8006098:	4618      	mov	r0, r3
 800609a:	f000 f926 	bl	80062ea <TIM_ITRx_SetConfig>
      break;
 800609e:	e02b      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	6859      	ldr	r1, [r3, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f000 f8ed 	bl	800628c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2160      	movs	r1, #96	; 0x60
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 f916 	bl	80062ea <TIM_ITRx_SetConfig>
      break;
 80060be:	e01b      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	6859      	ldr	r1, [r3, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	461a      	mov	r2, r3
 80060ce:	f000 f8af 	bl	8006230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2140      	movs	r1, #64	; 0x40
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 f906 	bl	80062ea <TIM_ITRx_SetConfig>
      break;
 80060de:	e00b      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f000 f8fd 	bl	80062ea <TIM_ITRx_SetConfig>
        break;
 80060f0:	e002      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80060f2:	bf00      	nop
 80060f4:	e000      	b.n	80060f8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80060f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr

08006124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr

0800616c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a29      	ldr	r2, [pc, #164]	; (8006224 <TIM_Base_SetConfig+0xb8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00b      	beq.n	800619c <TIM_Base_SetConfig+0x30>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618a:	d007      	beq.n	800619c <TIM_Base_SetConfig+0x30>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a26      	ldr	r2, [pc, #152]	; (8006228 <TIM_Base_SetConfig+0xbc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d003      	beq.n	800619c <TIM_Base_SetConfig+0x30>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a25      	ldr	r2, [pc, #148]	; (800622c <TIM_Base_SetConfig+0xc0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d108      	bne.n	80061ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <TIM_Base_SetConfig+0xb8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00b      	beq.n	80061ce <TIM_Base_SetConfig+0x62>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061bc:	d007      	beq.n	80061ce <TIM_Base_SetConfig+0x62>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a19      	ldr	r2, [pc, #100]	; (8006228 <TIM_Base_SetConfig+0xbc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_Base_SetConfig+0x62>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a18      	ldr	r2, [pc, #96]	; (800622c <TIM_Base_SetConfig+0xc0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d108      	bne.n	80061e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a07      	ldr	r2, [pc, #28]	; (8006224 <TIM_Base_SetConfig+0xb8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d103      	bne.n	8006214 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	615a      	str	r2, [r3, #20]
}
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800

08006230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f023 0201 	bic.w	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800625a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f023 030a 	bic.w	r3, r3, #10
 800626c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr

0800628c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f023 0210 	bic.w	r2, r3, #16
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	031b      	lsls	r3, r3, #12
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	bf00      	nop
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr

080062ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	f043 0307 	orr.w	r3, r3, #7
 800630c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	609a      	str	r2, [r3, #8]
}
 8006314:	bf00      	nop
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800631e:	b480      	push	{r7}
 8006320:	b087      	sub	sp, #28
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006338:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	021a      	lsls	r2, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	431a      	orrs	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4313      	orrs	r3, r2
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	609a      	str	r2, [r3, #8]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006370:	2302      	movs	r3, #2
 8006372:	e046      	b.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a16      	ldr	r2, [pc, #88]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00e      	beq.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d009      	beq.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a12      	ldr	r2, [pc, #72]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d004      	beq.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a10      	ldr	r2, [pc, #64]	; (8006414 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d10c      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr
 800640c:	40012c00 	.word	0x40012c00
 8006410:	40000400 	.word	0x40000400
 8006414:	40000800 	.word	0x40000800

08006418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr

0800642a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr

0800643c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e03f      	b.n	80064ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fb f9c4 	bl	80017f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800647e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f905 	bl	8006690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b08a      	sub	sp, #40	; 0x28
 80064da:	af02      	add	r7, sp, #8
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	4613      	mov	r3, r2
 80064e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d17c      	bne.n	80065f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_UART_Transmit+0x2c>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e075      	b.n	80065f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_UART_Transmit+0x3e>
 8006510:	2302      	movs	r3, #2
 8006512:	e06e      	b.n	80065f2 <HAL_UART_Transmit+0x11c>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2221      	movs	r2, #33	; 0x21
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800652a:	f7fd ff25 	bl	8004378 <HAL_GetTick>
 800652e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006544:	d108      	bne.n	8006558 <HAL_UART_Transmit+0x82>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	e003      	b.n	8006560 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800655c:	2300      	movs	r3, #0
 800655e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006568:	e02a      	b.n	80065c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2200      	movs	r2, #0
 8006572:	2180      	movs	r1, #128	; 0x80
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f840 	bl	80065fa <UART_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e036      	b.n	80065f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006598:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	3302      	adds	r3, #2
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	e007      	b.n	80065b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	3301      	adds	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1cf      	bne.n	800656a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2200      	movs	r2, #0
 80065d2:	2140      	movs	r1, #64	; 0x40
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f810 	bl	80065fa <UART_WaitOnFlagUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e006      	b.n	80065f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	e000      	b.n	80065f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80065f0:	2302      	movs	r3, #2
  }
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3720      	adds	r7, #32
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660a:	e02c      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d028      	beq.n	8006666 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d007      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0x30>
 800661a:	f7fd fead 	bl	8004378 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	429a      	cmp	r2, r3
 8006628:	d21d      	bcs.n	8006666 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006638:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695a      	ldr	r2, [r3, #20]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0201 	bic.w	r2, r2, #1
 8006648:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e00f      	b.n	8006686 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4013      	ands	r3, r2
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	429a      	cmp	r2, r3
 8006682:	d0c3      	beq.n	800660c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80066ca:	f023 030c 	bic.w	r3, r3, #12
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	430b      	orrs	r3, r1
 80066d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2c      	ldr	r2, [pc, #176]	; (80067a4 <UART_SetConfig+0x114>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d103      	bne.n	8006700 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80066f8:	f7fe fd52 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	e002      	b.n	8006706 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006700:	f7fe fd3a 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8006704:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009a      	lsls	r2, r3, #2
 8006710:	441a      	add	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	4a22      	ldr	r2, [pc, #136]	; (80067a8 <UART_SetConfig+0x118>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	0119      	lsls	r1, r3, #4
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009a      	lsls	r2, r3, #2
 8006730:	441a      	add	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	fbb2 f2f3 	udiv	r2, r2, r3
 800673c:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <UART_SetConfig+0x118>)
 800673e:	fba3 0302 	umull	r0, r3, r3, r2
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	2064      	movs	r0, #100	; 0x64
 8006746:	fb00 f303 	mul.w	r3, r0, r3
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	3332      	adds	r3, #50	; 0x32
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <UART_SetConfig+0x118>)
 8006752:	fba2 2303 	umull	r2, r3, r2, r3
 8006756:	095b      	lsrs	r3, r3, #5
 8006758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800675c:	4419      	add	r1, r3
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	009a      	lsls	r2, r3, #2
 8006768:	441a      	add	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	fbb2 f2f3 	udiv	r2, r2, r3
 8006774:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <UART_SetConfig+0x118>)
 8006776:	fba3 0302 	umull	r0, r3, r3, r2
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	2064      	movs	r0, #100	; 0x64
 800677e:	fb00 f303 	mul.w	r3, r0, r3
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	3332      	adds	r3, #50	; 0x32
 8006788:	4a07      	ldr	r2, [pc, #28]	; (80067a8 <UART_SetConfig+0x118>)
 800678a:	fba2 2303 	umull	r2, r3, r2, r3
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	f003 020f 	and.w	r2, r3, #15
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	440a      	add	r2, r1
 800679a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40013800 	.word	0x40013800
 80067a8:	51eb851f 	.word	0x51eb851f

080067ac <config>:
#include "stdio.h"
#include <string.h>

uint8_t sensor_id = 0xAA;

struct config config(){
 80067ac:	b4b0      	push	{r4, r5, r7}
 80067ae:	b089      	sub	sp, #36	; 0x24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

	struct config t;
	uint8_t flag = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	77fb      	strb	r3, [r7, #31]
	set_flag(flag,SEND_TEMP_FLAG);
 80067b8:	7ffb      	ldrb	r3, [r7, #31]
 80067ba:	f043 0301 	orr.w	r3, r3, #1
 80067be:	77fb      	strb	r3, [r7, #31]
	//set_flag(flag,SEND_CO2_FLAG);
	set_flag(flag,SEND_VIBRATION_FLAG);
 80067c0:	7ffb      	ldrb	r3, [r7, #31]
 80067c2:	f043 0304 	orr.w	r3, r3, #4
 80067c6:	77fb      	strb	r3, [r7, #31]

	t.send_flag = flag;
 80067c8:	7ffb      	ldrb	r3, [r7, #31]
 80067ca:	733b      	strb	r3, [r7, #12]
	memcpy(t.key,"HALLO_adwFegadwa", 16);
 80067cc:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <config+0x54>)
 80067ce:	f107 040d 	add.w	r4, r7, #13
 80067d2:	461d      	mov	r5, r3
 80067d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067d6:	6020      	str	r0, [r4, #0]
 80067d8:	6061      	str	r1, [r4, #4]
 80067da:	60a2      	str	r2, [r4, #8]
 80067dc:	60e3      	str	r3, [r4, #12]

	return t;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	461d      	mov	r5, r3
 80067e2:	f107 040c 	add.w	r4, r7, #12
 80067e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067e8:	6028      	str	r0, [r5, #0]
 80067ea:	6069      	str	r1, [r5, #4]
 80067ec:	60aa      	str	r2, [r5, #8]
 80067ee:	60eb      	str	r3, [r5, #12]
 80067f0:	7823      	ldrb	r3, [r4, #0]
 80067f2:	742b      	strb	r3, [r5, #16]
}
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	3724      	adds	r7, #36	; 0x24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bcb0      	pop	{r4, r5, r7}
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	0800a200 	.word	0x0800a200

08006804 <comm_builddata>:
#endif

uint8_t gateway_received = 0;
uint8_t message_send = 0;

void comm_builddata(uint8_t *temp, float *value, uint8_t placement){
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	4613      	mov	r3, r2
 8006810:	71fb      	strb	r3, [r7, #7]
	union convert f;
	f.t = *value;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	613b      	str	r3, [r7, #16]
	printf("%f",*value);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7f9 fe03 	bl	8000428 <__aeabi_f2d>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4814      	ldr	r0, [pc, #80]	; (8006878 <comm_builddata+0x74>)
 8006828:	f001 f97e 	bl	8007b28 <iprintf>
	int i = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	617b      	str	r3, [r7, #20]
	for(i=0; i<4; i++){
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	e017      	b.n	8006866 <comm_builddata+0x62>
		printf("%02x ",f.b[i]);
 8006836:	f107 0210 	add.w	r2, r7, #16
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	4413      	add	r3, r2
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	4619      	mov	r1, r3
 8006842:	480e      	ldr	r0, [pc, #56]	; (800687c <comm_builddata+0x78>)
 8006844:	f001 f970 	bl	8007b28 <iprintf>
		temp[placement + i] = f.b[i];
 8006848:	79fa      	ldrb	r2, [r7, #7]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	4413      	add	r3, r2
 800684e:	461a      	mov	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f107 0110 	add.w	r1, r7, #16
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	440a      	add	r2, r1
 800685c:	7812      	ldrb	r2, [r2, #0]
 800685e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<4; i++){
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	3301      	adds	r3, #1
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b03      	cmp	r3, #3
 800686a:	dde4      	ble.n	8006836 <comm_builddata+0x32>
	}
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	0800a21c 	.word	0x0800a21c
 800687c:	0800a220 	.word	0x0800a220

08006880 <comm_request>:

uint8_t comm_request(uint8_t *temp, struct sensor_values sensor_value){
 8006880:	b084      	sub	sp, #16
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	f107 001c 	add.w	r0, r7, #28
 800688e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//make sensor data ready for send
	int i;
	VECTOR *ptr_data = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	60bb      	str	r3, [r7, #8]
	ptr_data = &sensor_value.acc.x;
 8006896:	f107 031c 	add.w	r3, r7, #28
 800689a:	3304      	adds	r3, #4
 800689c:	60bb      	str	r3, [r7, #8]

	memset(temp,0,200);
 800689e:	22c8      	movs	r2, #200	; 0xc8
 80068a0:	2100      	movs	r1, #0
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fcd8 	bl	8007258 <memset>
	temp[0] = sensor_id;
 80068a8:	4b2b      	ldr	r3, [pc, #172]	; (8006958 <comm_request+0xd8>)
 80068aa:	781a      	ldrb	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	701a      	strb	r2, [r3, #0]
	temp[1] = DATAPKT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3301      	adds	r3, #1
 80068b4:	2201      	movs	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]

	memcpy(&temp[2], &c.send_flag, 1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3302      	adds	r3, #2
 80068bc:	4a27      	ldr	r2, [pc, #156]	; (800695c <comm_request+0xdc>)
 80068be:	7812      	ldrb	r2, [r2, #0]
 80068c0:	701a      	strb	r2, [r3, #0]
	comm_builddata(temp,&sensor_value.temperature, 3);
 80068c2:	f107 031c 	add.w	r3, r7, #28
 80068c6:	2203      	movs	r2, #3
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ff9a 	bl	8006804 <comm_builddata>

	for(i=0; i<4;i++){
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e032      	b.n	800693c <comm_request+0xbc>
		comm_builddata(temp,&ptr_data->rms, 7+(12*i));
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	0052      	lsls	r2, r2, #1
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	3307      	adds	r3, #7
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	461a      	mov	r2, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff ff89 	bl	8006804 <comm_builddata>
		comm_builddata(temp,&ptr_data->peak, 11+(12*i));
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	1d19      	adds	r1, r3, #4
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	0052      	lsls	r2, r2, #1
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	b2db      	uxtb	r3, r3
 8006904:	330b      	adds	r3, #11
 8006906:	b2db      	uxtb	r3, r3
 8006908:	461a      	mov	r2, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff ff7a 	bl	8006804 <comm_builddata>
		comm_builddata(temp,&ptr_data->crest, 15+(12*i));
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f103 0108 	add.w	r1, r3, #8
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	0052      	lsls	r2, r2, #1
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	b2db      	uxtb	r3, r3
 8006924:	330f      	adds	r3, #15
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff ff6a 	bl	8006804 <comm_builddata>
		ptr_data++;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	330c      	adds	r3, #12
 8006934:	60bb      	str	r3, [r7, #8]
	for(i=0; i<4;i++){
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b03      	cmp	r3, #3
 8006940:	ddc9      	ble.n	80068d6 <comm_request+0x56>
	}
	message_send = 1;
 8006942:	4b07      	ldr	r3, [pc, #28]	; (8006960 <comm_request+0xe0>)
 8006944:	2201      	movs	r2, #1
 8006946:	701a      	strb	r2, [r3, #0]
	return 13;
 8006948:	230d      	movs	r3, #13
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006954:	b004      	add	sp, #16
 8006956:	4770      	bx	lr
 8006958:	20000019 	.word	0x20000019
 800695c:	200002f8 	.word	0x200002f8
 8006960:	20000375 	.word	0x20000375

08006964 <comm_received>:
	 }
	 SPSGRF_StartTx((uint8_t *)temp,(size*3));
	}
}

void comm_received(uint8_t *data){
 8006964:	b580      	push	{r7, lr}
 8006966:	b09c      	sub	sp, #112	; 0x70
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	union convert f;
	uint16_t tempvalue;
	uint8_t dataframe[20];
	uint8_t enc_data[20];

	if(data[1] == DATAPKT){
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3301      	adds	r3, #1
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b01      	cmp	r3, #1
 8006974:	f040 8090 	bne.w	8006a98 <comm_received+0x134>
#ifdef COMM_DEBUG
		memset(&tmp, 0, 50);
 8006978:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800697c:	2232      	movs	r2, #50	; 0x32
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fc69 	bl	8007258 <memset>

		sprintf(tmp, "Device id: %d \n\r", data[0]);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006990:	498e      	ldr	r1, [pc, #568]	; (8006bcc <comm_received+0x268>)
 8006992:	4618      	mov	r0, r3
 8006994:	f001 f8e0 	bl	8007b58 <siprintf>
		comm_print_debug(tmp);
 8006998:	4b8d      	ldr	r3, [pc, #564]	; (8006bd0 <comm_received+0x26c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80069a0:	4611      	mov	r1, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fa46 	bl	8006e34 <print_debug>
		sprintf(tmp, "send flag: %d \n\r", data[2]);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3302      	adds	r3, #2
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069b4:	4987      	ldr	r1, [pc, #540]	; (8006bd4 <comm_received+0x270>)
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 f8ce 	bl	8007b58 <siprintf>
		comm_print_debug(tmp);
 80069bc:	4b84      	ldr	r3, [pc, #528]	; (8006bd0 <comm_received+0x26c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80069c4:	4611      	mov	r1, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fa34 	bl	8006e34 <print_debug>

		memcpy(&f.b, &data[3], 4);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3303      	adds	r3, #3
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	63bb      	str	r3, [r7, #56]	; 0x38
		sprintf(tmp, "temperature: %f\n\r", f.t);
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7f9 fd26 	bl	8000428 <__aeabi_f2d>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80069e4:	497c      	ldr	r1, [pc, #496]	; (8006bd8 <comm_received+0x274>)
 80069e6:	f001 f8b7 	bl	8007b58 <siprintf>
		comm_print_debug(tmp);
 80069ea:	4b79      	ldr	r3, [pc, #484]	; (8006bd0 <comm_received+0x26c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80069f2:	4611      	mov	r1, r2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fa1d 	bl	8006e34 <print_debug>

		memcpy(&tempvalue, &data[7],2);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3307      	adds	r3, #7
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	86fb      	strh	r3, [r7, #54]	; 0x36
		sprintf(tmp, "x value: %d\n\r", tempvalue);
 8006a04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a06:	461a      	mov	r2, r3
 8006a08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a0c:	4973      	ldr	r1, [pc, #460]	; (8006bdc <comm_received+0x278>)
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 f8a2 	bl	8007b58 <siprintf>
		comm_print_debug(tmp);
 8006a14:	4b6e      	ldr	r3, [pc, #440]	; (8006bd0 <comm_received+0x26c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fa08 	bl	8006e34 <print_debug>

		memcpy(&tempvalue, &data[9],2);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3309      	adds	r3, #9
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	86fb      	strh	r3, [r7, #54]	; 0x36
		sprintf(tmp, "y value: %d\n\r", tempvalue);
 8006a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a30:	461a      	mov	r2, r3
 8006a32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a36:	496a      	ldr	r1, [pc, #424]	; (8006be0 <comm_received+0x27c>)
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 f88d 	bl	8007b58 <siprintf>
		comm_print_debug(tmp);
 8006a3e:	4b64      	ldr	r3, [pc, #400]	; (8006bd0 <comm_received+0x26c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006a46:	4611      	mov	r1, r2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 f9f3 	bl	8006e34 <print_debug>

		memcpy(&tempvalue, &data[11],2);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	330b      	adds	r3, #11
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	86fb      	strh	r3, [r7, #54]	; 0x36
		sprintf(tmp, "z value: %d\n\r", tempvalue);
 8006a58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a60:	4960      	ldr	r1, [pc, #384]	; (8006be4 <comm_received+0x280>)
 8006a62:	4618      	mov	r0, r3
 8006a64:	f001 f878 	bl	8007b58 <siprintf>
		comm_print_debug(tmp);
 8006a68:	4b59      	ldr	r3, [pc, #356]	; (8006bd0 <comm_received+0x26c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f9de 	bl	8006e34 <print_debug>
#endif
		message_send = 1;
 8006a78:	4b5b      	ldr	r3, [pc, #364]	; (8006be8 <comm_received+0x284>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	701a      	strb	r2, [r3, #0]
		comm_encrypt(data, 13 ,enc_data);
 8006a7e:	f107 030c 	add.w	r3, r7, #12
 8006a82:	461a      	mov	r2, r3
 8006a84:	210d      	movs	r1, #13
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f8d8 	bl	8006c3c <comm_encrypt>
		comm_send(enc_data);
 8006a8c:	f107 030c 	add.w	r3, r7, #12
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 f8b9 	bl	8006c08 <comm_send>
			comm_send(last_message);
		}
	}else{
		//ERR
	}
}
 8006a96:	e094      	b.n	8006bc2 <comm_received+0x25e>
	}else if(data[1] == COMMAND){
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 808f 	bne.w	8006bc2 <comm_received+0x25e>
		if(data[2] == SENSORS_CHECK){
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d142      	bne.n	8006b34 <comm_received+0x1d0>
			comm_print_debug("a sensor is checking whos in range");
 8006aae:	4b48      	ldr	r3, [pc, #288]	; (8006bd0 <comm_received+0x26c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	494e      	ldr	r1, [pc, #312]	; (8006bec <comm_received+0x288>)
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 f9bd 	bl	8006e34 <print_debug>
			nodes.node_in_range++;
 8006aba:	4b4d      	ldr	r3, [pc, #308]	; (8006bf0 <comm_received+0x28c>)
 8006abc:	789b      	ldrb	r3, [r3, #2]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	4b4b      	ldr	r3, [pc, #300]	; (8006bf0 <comm_received+0x28c>)
 8006ac4:	709a      	strb	r2, [r3, #2]
			nodes.node[nodes.node_in_range].node_id = data[0];
 8006ac6:	4b4a      	ldr	r3, [pc, #296]	; (8006bf0 <comm_received+0x28c>)
 8006ac8:	789b      	ldrb	r3, [r3, #2]
 8006aca:	4619      	mov	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	7818      	ldrb	r0, [r3, #0]
 8006ad0:	4a47      	ldr	r2, [pc, #284]	; (8006bf0 <comm_received+0x28c>)
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	440b      	add	r3, r1
 8006ad8:	4413      	add	r3, r2
 8006ada:	3304      	adds	r3, #4
 8006adc:	4602      	mov	r2, r0
 8006ade:	701a      	strb	r2, [r3, #0]
			nodes.node[nodes.node_in_range].node_gw_connected = data[3];
 8006ae0:	4b43      	ldr	r3, [pc, #268]	; (8006bf0 <comm_received+0x28c>)
 8006ae2:	789b      	ldrb	r3, [r3, #2]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	78d8      	ldrb	r0, [r3, #3]
 8006aea:	4a41      	ldr	r2, [pc, #260]	; (8006bf0 <comm_received+0x28c>)
 8006aec:	460b      	mov	r3, r1
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	440b      	add	r3, r1
 8006af2:	4413      	add	r3, r2
 8006af4:	3305      	adds	r3, #5
 8006af6:	4602      	mov	r2, r0
 8006af8:	701a      	strb	r2, [r3, #0]
			dataframe[0] = MY_ADDRESS_CFG;
 8006afa:	23aa      	movs	r3, #170	; 0xaa
 8006afc:	f887 3020 	strb.w	r3, [r7, #32]
			dataframe[1] = COMMAND;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			dataframe[2] = ACK;
 8006b06:	2302      	movs	r3, #2
 8006b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			dataframe[3] = nodes.gateway_connected;
 8006b0c:	4b38      	ldr	r3, [pc, #224]	; (8006bf0 <comm_received+0x28c>)
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			comm_encrypt(dataframe, 4 ,enc_data);
 8006b14:	f107 020c 	add.w	r2, r7, #12
 8006b18:	f107 0320 	add.w	r3, r7, #32
 8006b1c:	2104      	movs	r1, #4
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f88c 	bl	8006c3c <comm_encrypt>
			comm_send(enc_data);
 8006b24:	f107 030c 	add.w	r3, r7, #12
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 f86d 	bl	8006c08 <comm_send>
			if(nodes.gateway_connected == 0 && nodes.node[nodes.node_in_range].node_gw_connected == 1){
 8006b2e:	4b30      	ldr	r3, [pc, #192]	; (8006bf0 <comm_received+0x28c>)
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	2b00      	cmp	r3, #0
		if(data[2] == CONV_TO_CONPOINT){
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3302      	adds	r3, #2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d11b      	bne.n	8006b76 <comm_received+0x212>
			dataframe[0] = MY_ADDRESS_CFG;
 8006b3e:	23aa      	movs	r3, #170	; 0xaa
 8006b40:	f887 3020 	strb.w	r3, [r7, #32]
			dataframe[1] = COMMAND;
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			dataframe[2] = ACK;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			comm_encrypt(dataframe, 3 ,enc_data);
 8006b50:	f107 020c 	add.w	r2, r7, #12
 8006b54:	f107 0320 	add.w	r3, r7, #32
 8006b58:	2103      	movs	r1, #3
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f86e 	bl	8006c3c <comm_encrypt>
			comm_send(enc_data);
 8006b60:	f107 030c 	add.w	r3, r7, #12
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 f84f 	bl	8006c08 <comm_send>
			comm_print_debug("Sensor asked me to send their messages to the gateway");
 8006b6a:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <comm_received+0x26c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4921      	ldr	r1, [pc, #132]	; (8006bf4 <comm_received+0x290>)
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 f95f 	bl	8006e34 <print_debug>
		if(data[2] == ACK){
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3302      	adds	r3, #2
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d108      	bne.n	8006b92 <comm_received+0x22e>
			gateway_received = 1;
 8006b80:	4b1d      	ldr	r3, [pc, #116]	; (8006bf8 <comm_received+0x294>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	701a      	strb	r2, [r3, #0]
			comm_print_debug("got ack from gateway");
 8006b86:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <comm_received+0x26c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	491c      	ldr	r1, [pc, #112]	; (8006bfc <comm_received+0x298>)
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 f951 	bl	8006e34 <print_debug>
		if(message_send == 1 && gateway_received == 0){
 8006b92:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <comm_received+0x284>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d113      	bne.n	8006bc2 <comm_received+0x25e>
 8006b9a:	4b17      	ldr	r3, [pc, #92]	; (8006bf8 <comm_received+0x294>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10f      	bne.n	8006bc2 <comm_received+0x25e>
			message_send = 0;
 8006ba2:	4b11      	ldr	r3, [pc, #68]	; (8006be8 <comm_received+0x284>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 8006ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bac:	f7fd fbee 	bl	800438c <HAL_Delay>
			comm_print_debug("message didn't arrive");
 8006bb0:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <comm_received+0x26c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4912      	ldr	r1, [pc, #72]	; (8006c00 <comm_received+0x29c>)
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f93c 	bl	8006e34 <print_debug>
			comm_send(last_message);
 8006bbc:	4811      	ldr	r0, [pc, #68]	; (8006c04 <comm_received+0x2a0>)
 8006bbe:	f000 f823 	bl	8006c08 <comm_send>
}
 8006bc2:	bf00      	nop
 8006bc4:	3770      	adds	r7, #112	; 0x70
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	0800a228 	.word	0x0800a228
 8006bd0:	2000001c 	.word	0x2000001c
 8006bd4:	0800a23c 	.word	0x0800a23c
 8006bd8:	0800a250 	.word	0x0800a250
 8006bdc:	0800a264 	.word	0x0800a264
 8006be0:	0800a274 	.word	0x0800a274
 8006be4:	0800a284 	.word	0x0800a284
 8006be8:	20000375 	.word	0x20000375
 8006bec:	0800a294 	.word	0x0800a294
 8006bf0:	2000030c 	.word	0x2000030c
 8006bf4:	0800a2b8 	.word	0x0800a2b8
 8006bf8:	20000374 	.word	0x20000374
 8006bfc:	0800a2f0 	.word	0x0800a2f0
 8006c00:	0800a308 	.word	0x0800a308
 8006c04:	2000032c 	.word	0x2000032c

08006c08 <comm_send>:

void comm_send(uint8_t * data){
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	SpiritPktBasicSetDestinationAddress(nodes.destination_node);
 8006c10:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <comm_send+0x2c>)
 8006c12:	78db      	ldrb	r3, [r3, #3]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fb fedd 	bl	80029d4 <SpiritPktCommonSetDestinationAddress>
	SPSGRF_StartTx(data,16);
 8006c1a:	2110      	movs	r1, #16
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 faa3 	bl	8007168 <SPSGRF_StartTx>
	memcpy(last_message, data , 16);
 8006c22:	2210      	movs	r2, #16
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4804      	ldr	r0, [pc, #16]	; (8006c38 <comm_send+0x30>)
 8006c28:	f000 fb08 	bl	800723c <memcpy>
}
 8006c2c:	bf00      	nop
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	2000030c 	.word	0x2000030c
 8006c38:	2000032c 	.word	0x2000032c

08006c3c <comm_encrypt>:

void comm_encrypt(uint8_t *data, uint8_t len ,uint8_t *enc_data){
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b0a0      	sub	sp, #128	; 0x80
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	460b      	mov	r3, r1
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	72fb      	strb	r3, [r7, #11]
	char temp[50];
	char str[50];
#ifdef DEBUG_ENCRYPTION
	memset(temp,0, 50);
 8006c4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c4e:	2232      	movs	r2, #50	; 0x32
 8006c50:	2100      	movs	r1, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fb00 	bl	8007258 <memset>
	strcpy(temp, "data:");
 8006c58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c5c:	4a3a      	ldr	r2, [pc, #232]	; (8006d48 <comm_encrypt+0x10c>)
 8006c5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c62:	6018      	str	r0, [r3, #0]
 8006c64:	3304      	adds	r3, #4
 8006c66:	8019      	strh	r1, [r3, #0]
	for(int i = 0; i<len; i++){
 8006c68:	2300      	movs	r3, #0
 8006c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c6c:	e015      	b.n	8006c9a <comm_encrypt+0x5e>
	sprintf(str,"%X", data[i]);
 8006c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f107 0310 	add.w	r3, r7, #16
 8006c7c:	4933      	ldr	r1, [pc, #204]	; (8006d4c <comm_encrypt+0x110>)
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 ff6a 	bl	8007b58 <siprintf>
	strcat(temp,str);
 8006c84:	f107 0210 	add.w	r2, r7, #16
 8006c88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 ff82 	bl	8007b98 <strcat>
	for(int i = 0; i<len; i++){
 8006c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c96:	3301      	adds	r3, #1
 8006c98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c9a:	7afb      	ldrb	r3, [r7, #11]
 8006c9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	dbe5      	blt.n	8006c6e <comm_encrypt+0x32>
	}
	comm_print_debug(temp);
 8006ca2:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <comm_encrypt+0x114>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006caa:	4611      	mov	r1, r2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f8c1 	bl	8006e34 <print_debug>
#endif

	SpiritAesWriteDataIn(data , len);
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7fa ff62 	bl	8001b80 <SpiritAesWriteDataIn>
	SpiritAesExecuteEncryption();
 8006cbc:	f7fb f80c 	bl	8001cd8 <SpiritAesExecuteEncryption>
	while(!irqStatus.IRQ_AES_END);
 8006cc0:	bf00      	nop
 8006cc2:	4b24      	ldr	r3, [pc, #144]	; (8006d54 <comm_encrypt+0x118>)
 8006cc4:	78db      	ldrb	r3, [r3, #3]
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0f8      	beq.n	8006cc2 <comm_encrypt+0x86>
	SpiritAesReadDataOut(enc_data , 16);
 8006cd0:	2110      	movs	r1, #16
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fa ff96 	bl	8001c04 <SpiritAesReadDataOut>

#ifdef DEBUG_ENCRYPTION
	memset(temp,0, 50);
 8006cd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006cdc:	2232      	movs	r2, #50	; 0x32
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fab9 	bl	8007258 <memset>
	strcpy(temp, "data:");
 8006ce6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006cea:	4a17      	ldr	r2, [pc, #92]	; (8006d48 <comm_encrypt+0x10c>)
 8006cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cf0:	6018      	str	r0, [r3, #0]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	8019      	strh	r1, [r3, #0]
	for(int i = 0; i<16; i++){
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cfa:	e015      	b.n	8006d28 <comm_encrypt+0xec>
	  sprintf(str,"%X", enc_data[i]);
 8006cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	4413      	add	r3, r2
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	f107 0310 	add.w	r3, r7, #16
 8006d0a:	4910      	ldr	r1, [pc, #64]	; (8006d4c <comm_encrypt+0x110>)
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 ff23 	bl	8007b58 <siprintf>
	  strcat(temp,str);
 8006d12:	f107 0210 	add.w	r2, r7, #16
 8006d16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 ff3b 	bl	8007b98 <strcat>
	for(int i = 0; i<16; i++){
 8006d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d24:	3301      	adds	r3, #1
 8006d26:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d2a:	2b0f      	cmp	r3, #15
 8006d2c:	dde6      	ble.n	8006cfc <comm_encrypt+0xc0>
	}
	comm_print_debug(temp);
 8006d2e:	4b08      	ldr	r3, [pc, #32]	; (8006d50 <comm_encrypt+0x114>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006d36:	4611      	mov	r1, r2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f87b 	bl	8006e34 <print_debug>
#endif
}
 8006d3e:	bf00      	nop
 8006d40:	3780      	adds	r7, #128	; 0x80
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	0800a320 	.word	0x0800a320
 8006d4c:	0800a328 	.word	0x0800a328
 8006d50:	2000001c 	.word	0x2000001c
 8006d54:	20000328 	.word	0x20000328

08006d58 <comm_decrypt>:

void comm_decrypt(uint8_t *data){
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b0a2      	sub	sp, #136	; 0x88
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
	uint8_t rxdata[20];
	SPSGRF_GetRxData(rxdata);
 8006d60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fa2c 	bl	80071c2 <SPSGRF_GetRxData>
	char temp[50];
	char str[50];

	SpiritAesWriteDataIn(rxdata, 16);
 8006d6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006d6e:	2110      	movs	r1, #16
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fa ff05 	bl	8001b80 <SpiritAesWriteDataIn>
	SpiritAesDeriveDecKeyExecuteDec();
 8006d76:	f7fa ffc1 	bl	8001cfc <SpiritAesDeriveDecKeyExecuteDec>
	while(!irqStatus.IRQ_AES_END);
 8006d7a:	bf00      	nop
 8006d7c:	4b23      	ldr	r3, [pc, #140]	; (8006e0c <comm_decrypt+0xb4>)
 8006d7e:	78db      	ldrb	r3, [r3, #3]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0f8      	beq.n	8006d7c <comm_decrypt+0x24>

	SpiritAesReadDataOut(data , 13);
 8006d8a:	210d      	movs	r1, #13
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7fa ff39 	bl	8001c04 <SpiritAesReadDataOut>
	#ifdef DEBUG_ENCRYPTION
	memset(temp,0, 50);
 8006d92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d96:	2232      	movs	r2, #50	; 0x32
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fa5c 	bl	8007258 <memset>
	strcpy(temp, "data:");
 8006da0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006da4:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <comm_decrypt+0xb8>)
 8006da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006daa:	6018      	str	r0, [r3, #0]
 8006dac:	3304      	adds	r3, #4
 8006dae:	8019      	strh	r1, [r3, #0]
	for(int i = 0; i<12; i++){
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006db6:	e018      	b.n	8006dea <comm_decrypt+0x92>
		sprintf(str,"%X", data[i]);
 8006db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f107 0308 	add.w	r3, r7, #8
 8006dc8:	4912      	ldr	r1, [pc, #72]	; (8006e14 <comm_decrypt+0xbc>)
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fec4 	bl	8007b58 <siprintf>
		strcat(temp,str);
 8006dd0:	f107 0208 	add.w	r2, r7, #8
 8006dd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006dd8:	4611      	mov	r1, r2
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fedc 	bl	8007b98 <strcat>
	for(int i = 0; i<12; i++){
 8006de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006de4:	3301      	adds	r3, #1
 8006de6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dee:	2b0b      	cmp	r3, #11
 8006df0:	dde2      	ble.n	8006db8 <comm_decrypt+0x60>
	}
	comm_print_debug(temp);
 8006df2:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <comm_decrypt+0xc0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 f819 	bl	8006e34 <print_debug>
	#endif
}
 8006e02:	bf00      	nop
 8006e04:	3788      	adds	r7, #136	; 0x88
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000328 	.word	0x20000328
 8006e10:	0800a320 	.word	0x0800a320
 8006e14:	0800a328 	.word	0x0800a328
 8006e18:	2000001c 	.word	0x2000001c

08006e1c <comm_start>:

void comm_start(){
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
	SPSGRF_Init();
 8006e20:	f000 f872 	bl	8006f08 <SPSGRF_Init>
	SpiritAesWriteKey(c.key);
 8006e24:	4802      	ldr	r0, [pc, #8]	; (8006e30 <comm_start+0x14>)
 8006e26:	f7fa ff29 	bl	8001c7c <SpiritAesWriteKey>
	//mesh_init();
}
 8006e2a:	bf00      	nop
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	200002f9 	.word	0x200002f9

08006e34 <print_debug>:

char debug_level = DBL_DEFAULT;

#ifdef ENABLE_DEBUG

void print_debug(const char *module, const char *text){
 8006e34:	b580      	push	{r7, lr}
 8006e36:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006e40:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8006e44:	6018      	str	r0, [r3, #0]
 8006e46:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006e4a:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8006e4e:	6019      	str	r1, [r3, #0]
	char tmp_debug[1000]="";
 8006e50:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006e54:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 f9f7 	bl	8007258 <memset>
	strcat(tmp_debug, module);
 8006e6a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006e6e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8006e72:	f107 0208 	add.w	r2, r7, #8
 8006e76:	6819      	ldr	r1, [r3, #0]
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f000 fe8d 	bl	8007b98 <strcat>
	strcat(tmp_debug,":\t");
 8006e7e:	f107 0308 	add.w	r3, r7, #8
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7f9 f964 	bl	8000150 <strlen>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f107 0308 	add.w	r3, r7, #8
 8006e90:	4413      	add	r3, r2
 8006e92:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <print_debug+0xc4>)
 8006e94:	8811      	ldrh	r1, [r2, #0]
 8006e96:	7892      	ldrb	r2, [r2, #2]
 8006e98:	8019      	strh	r1, [r3, #0]
 8006e9a:	709a      	strb	r2, [r3, #2]
	strcat(tmp_debug,text);
 8006e9c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006ea0:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8006ea4:	f107 0208 	add.w	r2, r7, #8
 8006ea8:	6819      	ldr	r1, [r3, #0]
 8006eaa:	4610      	mov	r0, r2
 8006eac:	f000 fe74 	bl	8007b98 <strcat>
	strcat(tmp_debug,"\r\n");
 8006eb0:	f107 0308 	add.w	r3, r7, #8
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7f9 f94b 	bl	8000150 <strlen>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f107 0308 	add.w	r3, r7, #8
 8006ec2:	4413      	add	r3, r2
 8006ec4:	4a0d      	ldr	r2, [pc, #52]	; (8006efc <print_debug+0xc8>)
 8006ec6:	8811      	ldrh	r1, [r2, #0]
 8006ec8:	7892      	ldrb	r2, [r2, #2]
 8006eca:	8019      	strh	r1, [r3, #0]
 8006ecc:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*) tmp_debug, strlen(tmp_debug), 100);
 8006ece:	f107 0308 	add.w	r3, r7, #8
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7f9 f93c 	bl	8000150 <strlen>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	f107 0108 	add.w	r1, r7, #8
 8006ee0:	2364      	movs	r3, #100	; 0x64
 8006ee2:	4807      	ldr	r0, [pc, #28]	; (8006f00 <print_debug+0xcc>)
 8006ee4:	f7ff faf7 	bl	80064d6 <HAL_UART_Transmit>
	HAL_Delay(100);
 8006ee8:	2064      	movs	r0, #100	; 0x64
 8006eea:	f7fd fa4f 	bl	800438c <HAL_Delay>
}
 8006eee:	bf00      	nop
 8006ef0:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	0800a32c 	.word	0x0800a32c
 8006efc:	0800a330 	.word	0x0800a330
 8006f00:	200002b0 	.word	0x200002b0
 8006f04:	00000000 	.word	0x00000000

08006f08 <SPSGRF_Init>:
* @retval None
*/
const char *spsgrfmod = "SPSGRF";
#define spsgrf_print_debug(str) print_debug(spsgrfmod, str)
void SPSGRF_Init(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b0a8      	sub	sp, #160	; 0xa0
 8006f0c:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 8006f0e:	f7fd f849 	bl	8003fa4 <RadioSpiInit>

  // restart the radio
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Booting module");
 8006f12:	4b85      	ldr	r3, [pc, #532]	; (8007128 <SPSGRF_Init+0x220>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4985      	ldr	r1, [pc, #532]	; (800712c <SPSGRF_Init+0x224>)
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff ff8b 	bl	8006e34 <print_debug>
#endif
  SpiritEnterShutdown();
 8006f1e:	f7fd f9b9 	bl	8004294 <RadioEnterShutdown>
  SpiritExitShutdown();
 8006f22:	f7fd f9c3 	bl	80042ac <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 8006f26:	f7fb fb3f 	bl	80025a8 <SpiritManagementWaExtraCurrent>
  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	70fb      	strb	r3, [r7, #3]
 8006f2e:	e004      	b.n	8006f3a <SPSGRF_Init+0x32>
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	3301      	adds	r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	70fb      	strb	r3, [r7, #3]
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2bff      	cmp	r3, #255	; 0xff
 8006f40:	d1f6      	bne.n	8006f30 <SPSGRF_Init+0x28>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 8006f42:	f7fd f80d 	bl	8003f60 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8006f46:	4b7a      	ldr	r3, [pc, #488]	; (8007130 <SPSGRF_Init+0x228>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d1ea      	bne.n	8006f2a <SPSGRF_Init+0x22>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Initialize radio RF parameters");
 8006f54:	4b74      	ldr	r3, [pc, #464]	; (8007128 <SPSGRF_Init+0x220>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4976      	ldr	r1, [pc, #472]	; (8007134 <SPSGRF_Init+0x22c>)
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff ff6a 	bl	8006e34 <print_debug>
  char tmp[100];
  sprintf(tmp, "Setting frequency to %f",BASE_FREQUENCY);
 8006f60:	1d38      	adds	r0, r7, #4
 8006f62:	a36f      	add	r3, pc, #444	; (adr r3, 8007120 <SPSGRF_Init+0x218>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	4973      	ldr	r1, [pc, #460]	; (8007138 <SPSGRF_Init+0x230>)
 8006f6a:	f000 fdf5 	bl	8007b58 <siprintf>
  spsgrf_print_debug(tmp);
 8006f6e:	4b6e      	ldr	r3, [pc, #440]	; (8007128 <SPSGRF_Init+0x220>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	1d3a      	adds	r2, r7, #4
 8006f74:	4611      	mov	r1, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff ff5c 	bl	8006e34 <print_debug>
  sprintf(tmp, "Setting baudrate to %d",DATARATE);
 8006f7c:	1d3b      	adds	r3, r7, #4
 8006f7e:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8006f82:	496e      	ldr	r1, [pc, #440]	; (800713c <SPSGRF_Init+0x234>)
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fde7 	bl	8007b58 <siprintf>
    spsgrf_print_debug(tmp);
 8006f8a:	4b67      	ldr	r3, [pc, #412]	; (8007128 <SPSGRF_Init+0x220>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	1d3a      	adds	r2, r7, #4
 8006f90:	4611      	mov	r1, r2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff ff4e 	bl	8006e34 <print_debug>
#endif
  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8006f9e:	4b68      	ldr	r3, [pc, #416]	; (8007140 <SPSGRF_Init+0x238>)
 8006fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8006fa4:	4b67      	ldr	r3, [pc, #412]	; (8007144 <SPSGRF_Init+0x23c>)
 8006fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  xRadioInit.lDatarate = DATARATE;
 8006fb6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8006fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8006fbe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006fc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  xRadioInit.lBandwidth = BANDWIDTH;
 8006fc6:	4b5f      	ldr	r3, [pc, #380]	; (8007144 <SPSGRF_Init+0x23c>)
 8006fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8006fcc:	485e      	ldr	r0, [pc, #376]	; (8007148 <SPSGRF_Init+0x240>)
 8006fce:	f7fc ff57 	bl	8003e80 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 8006fd2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fb fda2 	bl	8002b20 <SpiritRadioInit>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Setting power level");
 8006fdc:	4b52      	ldr	r3, [pc, #328]	; (8007128 <SPSGRF_Init+0x220>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	495a      	ldr	r1, [pc, #360]	; (800714c <SPSGRF_Init+0x244>)
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff ff26 	bl	8006e34 <print_debug>
#endif
  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8006fe8:	4959      	ldr	r1, [pc, #356]	; (8007150 <SPSGRF_Init+0x248>)
 8006fea:	2007      	movs	r0, #7
 8006fec:	f7fc fde8 	bl	8003bc0 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8006ff0:	2007      	movs	r0, #7
 8006ff2:	f7fc fe39 	bl	8003c68 <SpiritRadioSetPALevelMaxIndex>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configure packet handler to use the Basic packet format");
 8006ff6:	4b4c      	ldr	r3, [pc, #304]	; (8007128 <SPSGRF_Init+0x220>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4956      	ldr	r1, [pc, #344]	; (8007154 <SPSGRF_Init+0x24c>)
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff ff19 	bl	8006e34 <print_debug>
#endif
  // Configure packet handler to use the Basic packet format
  xBasicInit.xPreambleLength = PREAMBLE_LENGTH;
 8007002:	2318      	movs	r3, #24
 8007004:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  xBasicInit.xSyncLength = SYNC_LENGTH;
 8007008:	2306      	movs	r3, #6
 800700a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  xBasicInit.lSyncWords = SYNC_WORD;
 800700e:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8007012:	67bb      	str	r3, [r7, #120]	; 0x78
  xBasicInit.xFixVarLength = LENGTH_TYPE;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  xBasicInit.cPktLengthWidth = LENGTH_WIDTH;
 800701a:	2307      	movs	r3, #7
 800701c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  xBasicInit.xCrcMode = CRC_MODE;
 8007020:	2320      	movs	r3, #32
 8007022:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  xBasicInit.xControlLength = CONTROL_LENGTH;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  xBasicInit.xAddressField = EN_ADDRESS;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  xBasicInit.xFec = EN_FEC;
 8007032:	2300      	movs	r3, #0
 8007034:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  xBasicInit.xDataWhitening = EN_WHITENING;
 8007038:	2301      	movs	r3, #1
 800703a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  SpiritPktBasicInit(&xBasicInit);
 800703e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007042:	4618      	mov	r0, r3
 8007044:	f7fb fad6 	bl	80025f4 <SpiritPktBasicInit>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configuring automatic packet filtering");
 8007048:	4b37      	ldr	r3, [pc, #220]	; (8007128 <SPSGRF_Init+0x220>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4942      	ldr	r1, [pc, #264]	; (8007158 <SPSGRF_Init+0x250>)
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff fef0 	bl	8006e34 <print_debug>
#endif
  // Configure destination address criteria for automatic packet filtering
  xBasicAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8007054:	2301      	movs	r3, #1
 8007056:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  xBasicAddress.cMyAddress = MY_ADDRESS;
 800705a:	23aa      	movs	r3, #170	; 0xaa
 800705c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  xBasicAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8007060:	2301      	movs	r3, #1
 8007062:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  xBasicAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8007066:	23ee      	movs	r3, #238	; 0xee
 8007068:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  xBasicAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 800706c:	2301      	movs	r3, #1
 800706e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  xBasicAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8007072:	23ff      	movs	r3, #255	; 0xff
 8007074:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  SpiritPktBasicAddressesInit(&xBasicAddress);
 8007078:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800707c:	4618      	mov	r0, r3
 800707e:	f7fb fb8f 	bl	80027a0 <SpiritPktBasicAddressesInit>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configuring interrupt pin");
 8007082:	4b29      	ldr	r3, [pc, #164]	; (8007128 <SPSGRF_Init+0x220>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4935      	ldr	r1, [pc, #212]	; (800715c <SPSGRF_Init+0x254>)
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fed3 	bl	8006e34 <print_debug>
#endif
  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 800708e:	2302      	movs	r3, #2
 8007090:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8007094:	2302      	movs	r3, #2
 8007096:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 800709a:	2300      	movs	r3, #0
 800709c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  SpiritGpioInit(&xGpioInit);
 80070a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fa ff39 	bl	8001f1c <SpiritGpioInit>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Enable interrupt types");
 80070aa:	4b1f      	ldr	r3, [pc, #124]	; (8007128 <SPSGRF_Init+0x220>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	492c      	ldr	r1, [pc, #176]	; (8007160 <SPSGRF_Init+0x258>)
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff febf 	bl	8006e34 <print_debug>
#endif
  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 80070b6:	2000      	movs	r0, #0
 80070b8:	f7fa ff54 	bl	8001f64 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 80070bc:	2101      	movs	r1, #1
 80070be:	2004      	movs	r0, #4
 80070c0:	f7fa ff7c 	bl	8001fbc <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 80070c4:	2101      	movs	r1, #1
 80070c6:	2001      	movs	r0, #1
 80070c8:	f7fa ff78 	bl	8001fbc <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 80070cc:	2101      	movs	r1, #1
 80070ce:	2002      	movs	r0, #2
 80070d0:	f7fa ff74 	bl	8001fbc <SpiritIrq>
  SpiritIrq(AES_END, S_ENABLE);
 80070d4:	2101      	movs	r1, #1
 80070d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80070da:	f7fa ff6f 	bl	8001fbc <SpiritIrq>
  SpiritIrqClearStatus();
 80070de:	f7fb f805 	bl	80020ec <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80070e2:	2000      	movs	r0, #0
 80070e4:	f7fb fcc8 	bl	8002a78 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80070e8:	2001      	movs	r0, #1
 80070ea:	f7fb fc8d 	bl	8002a08 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80070ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
 80070f2:	f7fb fcf5 	bl	8002ae0 <SpiritQiSetRssiThresholddBm>

  SpiritAesMode(S_ENABLE);
 80070f6:	2001      	movs	r0, #1
 80070f8:	f7fa fd08 	bl	8001b0c <SpiritAesMode>
  spsgrf_print_debug("Set RX timeout to 2000");
#endif
  SpiritTimerSetRxTimeoutMs(2000.0);
#else
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Set RX timeout to infinite");
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <SPSGRF_Init+0x220>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4918      	ldr	r1, [pc, #96]	; (8007164 <SPSGRF_Init+0x25c>)
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff fe96 	bl	8006e34 <print_debug>
#endif
  SET_INFINITE_RX_TIMEOUT();
 8007108:	2000      	movs	r0, #0
 800710a:	f7fc fec7 	bl	8003e9c <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 800710e:	2002      	movs	r0, #2
 8007110:	f7fc fede 	bl	8003ed0 <SpiritTimerSetRxTimeoutStopCondition>
}
 8007114:	bf00      	nop
 8007116:	37a0      	adds	r7, #160	; 0xa0
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	f3af 8000 	nop.w
 8007120:	80000000 	.word	0x80000000
 8007124:	41c9de50 	.word	0x41c9de50
 8007128:	20000020 	.word	0x20000020
 800712c:	0800a33c 	.word	0x0800a33c
 8007130:	2000036c 	.word	0x2000036c
 8007134:	0800a34c 	.word	0x0800a34c
 8007138:	0800a36c 	.word	0x0800a36c
 800713c:	0800a384 	.word	0x0800a384
 8007140:	33bca100 	.word	0x33bca100
 8007144:	000186a0 	.word	0x000186a0
 8007148:	02faf080 	.word	0x02faf080
 800714c:	0800a39c 	.word	0x0800a39c
 8007150:	4139999a 	.word	0x4139999a
 8007154:	0800a3b0 	.word	0x0800a3b0
 8007158:	0800a3e8 	.word	0x0800a3e8
 800715c:	0800a410 	.word	0x0800a410
 8007160:	0800a42c 	.word	0x0800a42c
 8007164:	0800a444 	.word	0x0800a444

08007168 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 8007174:	2072      	movs	r0, #114	; 0x72
 8007176:	f7fa feb9 	bl	8001eec <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	2b60      	cmp	r3, #96	; 0x60
 800717e:	bf28      	it	cs
 8007180:	2360      	movcs	r3, #96	; 0x60
 8007182:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	4618      	mov	r0, r3
 800718a:	f7fc fff3 	bl	8004174 <RadioSpiWriteFifo>
  SpiritPktBasicSetPayloadLength(txLen);
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	b29b      	uxth	r3, r3
 8007192:	4618      	mov	r0, r3
 8007194:	f7fb fb92 	bl	80028bc <SpiritPktBasicSetPayloadLength>
  SpiritCmdStrobeSabort();
 8007198:	2067      	movs	r0, #103	; 0x67
 800719a:	f7fa fea7 	bl	8001eec <SpiritCmdStrobeCommand>
  SpiritCmdStrobeTx();
 800719e:	f7fb f99b 	bl	80024d8 <SpiritManagementWaCmdStrobeTx>
 80071a2:	2060      	movs	r0, #96	; 0x60
 80071a4:	f7fa fea2 	bl	8001eec <SpiritCmdStrobeCommand>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 80071b4:	f7fb f9c8 	bl	8002548 <SpiritManagementWaCmdStrobeRx>
 80071b8:	2061      	movs	r0, #97	; 0x61
 80071ba:	f7fa fe97 	bl	8001eec <SpiritCmdStrobeCommand>
}
 80071be:	bf00      	nop
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 80071ca:	f7fa ffa7 	bl	800211c <SpiritLinearFifoReadNumElementsRxFifo>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fd f814 	bl	8004204 <RadioSpiReadFifo>

  return len;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <__errno>:
 80071e8:	4b01      	ldr	r3, [pc, #4]	; (80071f0 <__errno+0x8>)
 80071ea:	6818      	ldr	r0, [r3, #0]
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000024 	.word	0x20000024

080071f4 <__libc_init_array>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	2600      	movs	r6, #0
 80071f8:	4d0c      	ldr	r5, [pc, #48]	; (800722c <__libc_init_array+0x38>)
 80071fa:	4c0d      	ldr	r4, [pc, #52]	; (8007230 <__libc_init_array+0x3c>)
 80071fc:	1b64      	subs	r4, r4, r5
 80071fe:	10a4      	asrs	r4, r4, #2
 8007200:	42a6      	cmp	r6, r4
 8007202:	d109      	bne.n	8007218 <__libc_init_array+0x24>
 8007204:	f002 ff6c 	bl	800a0e0 <_init>
 8007208:	2600      	movs	r6, #0
 800720a:	4d0a      	ldr	r5, [pc, #40]	; (8007234 <__libc_init_array+0x40>)
 800720c:	4c0a      	ldr	r4, [pc, #40]	; (8007238 <__libc_init_array+0x44>)
 800720e:	1b64      	subs	r4, r4, r5
 8007210:	10a4      	asrs	r4, r4, #2
 8007212:	42a6      	cmp	r6, r4
 8007214:	d105      	bne.n	8007222 <__libc_init_array+0x2e>
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	f855 3b04 	ldr.w	r3, [r5], #4
 800721c:	4798      	blx	r3
 800721e:	3601      	adds	r6, #1
 8007220:	e7ee      	b.n	8007200 <__libc_init_array+0xc>
 8007222:	f855 3b04 	ldr.w	r3, [r5], #4
 8007226:	4798      	blx	r3
 8007228:	3601      	adds	r6, #1
 800722a:	e7f2      	b.n	8007212 <__libc_init_array+0x1e>
 800722c:	0800a9ac 	.word	0x0800a9ac
 8007230:	0800a9ac 	.word	0x0800a9ac
 8007234:	0800a9ac 	.word	0x0800a9ac
 8007238:	0800a9b0 	.word	0x0800a9b0

0800723c <memcpy>:
 800723c:	440a      	add	r2, r1
 800723e:	4291      	cmp	r1, r2
 8007240:	f100 33ff 	add.w	r3, r0, #4294967295
 8007244:	d100      	bne.n	8007248 <memcpy+0xc>
 8007246:	4770      	bx	lr
 8007248:	b510      	push	{r4, lr}
 800724a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800724e:	4291      	cmp	r1, r2
 8007250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007254:	d1f9      	bne.n	800724a <memcpy+0xe>
 8007256:	bd10      	pop	{r4, pc}

08007258 <memset>:
 8007258:	4603      	mov	r3, r0
 800725a:	4402      	add	r2, r0
 800725c:	4293      	cmp	r3, r2
 800725e:	d100      	bne.n	8007262 <memset+0xa>
 8007260:	4770      	bx	lr
 8007262:	f803 1b01 	strb.w	r1, [r3], #1
 8007266:	e7f9      	b.n	800725c <memset+0x4>

08007268 <__cvt>:
 8007268:	2b00      	cmp	r3, #0
 800726a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800726e:	461f      	mov	r7, r3
 8007270:	bfbb      	ittet	lt
 8007272:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007276:	461f      	movlt	r7, r3
 8007278:	2300      	movge	r3, #0
 800727a:	232d      	movlt	r3, #45	; 0x2d
 800727c:	b088      	sub	sp, #32
 800727e:	4614      	mov	r4, r2
 8007280:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007282:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007284:	7013      	strb	r3, [r2, #0]
 8007286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007288:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800728c:	f023 0820 	bic.w	r8, r3, #32
 8007290:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007294:	d005      	beq.n	80072a2 <__cvt+0x3a>
 8007296:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800729a:	d100      	bne.n	800729e <__cvt+0x36>
 800729c:	3501      	adds	r5, #1
 800729e:	2302      	movs	r3, #2
 80072a0:	e000      	b.n	80072a4 <__cvt+0x3c>
 80072a2:	2303      	movs	r3, #3
 80072a4:	aa07      	add	r2, sp, #28
 80072a6:	9204      	str	r2, [sp, #16]
 80072a8:	aa06      	add	r2, sp, #24
 80072aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80072ae:	e9cd 3500 	strd	r3, r5, [sp]
 80072b2:	4622      	mov	r2, r4
 80072b4:	463b      	mov	r3, r7
 80072b6:	f000 fd0b 	bl	8007cd0 <_dtoa_r>
 80072ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072be:	4606      	mov	r6, r0
 80072c0:	d102      	bne.n	80072c8 <__cvt+0x60>
 80072c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072c4:	07db      	lsls	r3, r3, #31
 80072c6:	d522      	bpl.n	800730e <__cvt+0xa6>
 80072c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072cc:	eb06 0905 	add.w	r9, r6, r5
 80072d0:	d110      	bne.n	80072f4 <__cvt+0x8c>
 80072d2:	7833      	ldrb	r3, [r6, #0]
 80072d4:	2b30      	cmp	r3, #48	; 0x30
 80072d6:	d10a      	bne.n	80072ee <__cvt+0x86>
 80072d8:	2200      	movs	r2, #0
 80072da:	2300      	movs	r3, #0
 80072dc:	4620      	mov	r0, r4
 80072de:	4639      	mov	r1, r7
 80072e0:	f7f9 fb62 	bl	80009a8 <__aeabi_dcmpeq>
 80072e4:	b918      	cbnz	r0, 80072ee <__cvt+0x86>
 80072e6:	f1c5 0501 	rsb	r5, r5, #1
 80072ea:	f8ca 5000 	str.w	r5, [sl]
 80072ee:	f8da 3000 	ldr.w	r3, [sl]
 80072f2:	4499      	add	r9, r3
 80072f4:	2200      	movs	r2, #0
 80072f6:	2300      	movs	r3, #0
 80072f8:	4620      	mov	r0, r4
 80072fa:	4639      	mov	r1, r7
 80072fc:	f7f9 fb54 	bl	80009a8 <__aeabi_dcmpeq>
 8007300:	b108      	cbz	r0, 8007306 <__cvt+0x9e>
 8007302:	f8cd 901c 	str.w	r9, [sp, #28]
 8007306:	2230      	movs	r2, #48	; 0x30
 8007308:	9b07      	ldr	r3, [sp, #28]
 800730a:	454b      	cmp	r3, r9
 800730c:	d307      	bcc.n	800731e <__cvt+0xb6>
 800730e:	4630      	mov	r0, r6
 8007310:	9b07      	ldr	r3, [sp, #28]
 8007312:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007314:	1b9b      	subs	r3, r3, r6
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	b008      	add	sp, #32
 800731a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800731e:	1c59      	adds	r1, r3, #1
 8007320:	9107      	str	r1, [sp, #28]
 8007322:	701a      	strb	r2, [r3, #0]
 8007324:	e7f0      	b.n	8007308 <__cvt+0xa0>

08007326 <__exponent>:
 8007326:	4603      	mov	r3, r0
 8007328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800732a:	2900      	cmp	r1, #0
 800732c:	f803 2b02 	strb.w	r2, [r3], #2
 8007330:	bfb6      	itet	lt
 8007332:	222d      	movlt	r2, #45	; 0x2d
 8007334:	222b      	movge	r2, #43	; 0x2b
 8007336:	4249      	neglt	r1, r1
 8007338:	2909      	cmp	r1, #9
 800733a:	7042      	strb	r2, [r0, #1]
 800733c:	dd2b      	ble.n	8007396 <__exponent+0x70>
 800733e:	f10d 0407 	add.w	r4, sp, #7
 8007342:	46a4      	mov	ip, r4
 8007344:	270a      	movs	r7, #10
 8007346:	fb91 f6f7 	sdiv	r6, r1, r7
 800734a:	460a      	mov	r2, r1
 800734c:	46a6      	mov	lr, r4
 800734e:	fb07 1516 	mls	r5, r7, r6, r1
 8007352:	2a63      	cmp	r2, #99	; 0x63
 8007354:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007358:	4631      	mov	r1, r6
 800735a:	f104 34ff 	add.w	r4, r4, #4294967295
 800735e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007362:	dcf0      	bgt.n	8007346 <__exponent+0x20>
 8007364:	3130      	adds	r1, #48	; 0x30
 8007366:	f1ae 0502 	sub.w	r5, lr, #2
 800736a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800736e:	4629      	mov	r1, r5
 8007370:	1c44      	adds	r4, r0, #1
 8007372:	4561      	cmp	r1, ip
 8007374:	d30a      	bcc.n	800738c <__exponent+0x66>
 8007376:	f10d 0209 	add.w	r2, sp, #9
 800737a:	eba2 020e 	sub.w	r2, r2, lr
 800737e:	4565      	cmp	r5, ip
 8007380:	bf88      	it	hi
 8007382:	2200      	movhi	r2, #0
 8007384:	4413      	add	r3, r2
 8007386:	1a18      	subs	r0, r3, r0
 8007388:	b003      	add	sp, #12
 800738a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800738c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007390:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007394:	e7ed      	b.n	8007372 <__exponent+0x4c>
 8007396:	2330      	movs	r3, #48	; 0x30
 8007398:	3130      	adds	r1, #48	; 0x30
 800739a:	7083      	strb	r3, [r0, #2]
 800739c:	70c1      	strb	r1, [r0, #3]
 800739e:	1d03      	adds	r3, r0, #4
 80073a0:	e7f1      	b.n	8007386 <__exponent+0x60>
	...

080073a4 <_printf_float>:
 80073a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a8:	b091      	sub	sp, #68	; 0x44
 80073aa:	460c      	mov	r4, r1
 80073ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80073b0:	4616      	mov	r6, r2
 80073b2:	461f      	mov	r7, r3
 80073b4:	4605      	mov	r5, r0
 80073b6:	f001 fb6f 	bl	8008a98 <_localeconv_r>
 80073ba:	6803      	ldr	r3, [r0, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	9309      	str	r3, [sp, #36]	; 0x24
 80073c0:	f7f8 fec6 	bl	8000150 <strlen>
 80073c4:	2300      	movs	r3, #0
 80073c6:	930e      	str	r3, [sp, #56]	; 0x38
 80073c8:	f8d8 3000 	ldr.w	r3, [r8]
 80073cc:	900a      	str	r0, [sp, #40]	; 0x28
 80073ce:	3307      	adds	r3, #7
 80073d0:	f023 0307 	bic.w	r3, r3, #7
 80073d4:	f103 0208 	add.w	r2, r3, #8
 80073d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80073dc:	f8d4 b000 	ldr.w	fp, [r4]
 80073e0:	f8c8 2000 	str.w	r2, [r8]
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073ec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80073f0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80073f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80073f6:	f04f 32ff 	mov.w	r2, #4294967295
 80073fa:	4640      	mov	r0, r8
 80073fc:	4b9c      	ldr	r3, [pc, #624]	; (8007670 <_printf_float+0x2cc>)
 80073fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007400:	f7f9 fb04 	bl	8000a0c <__aeabi_dcmpun>
 8007404:	bb70      	cbnz	r0, 8007464 <_printf_float+0xc0>
 8007406:	f04f 32ff 	mov.w	r2, #4294967295
 800740a:	4640      	mov	r0, r8
 800740c:	4b98      	ldr	r3, [pc, #608]	; (8007670 <_printf_float+0x2cc>)
 800740e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007410:	f7f9 fade 	bl	80009d0 <__aeabi_dcmple>
 8007414:	bb30      	cbnz	r0, 8007464 <_printf_float+0xc0>
 8007416:	2200      	movs	r2, #0
 8007418:	2300      	movs	r3, #0
 800741a:	4640      	mov	r0, r8
 800741c:	4651      	mov	r1, sl
 800741e:	f7f9 facd 	bl	80009bc <__aeabi_dcmplt>
 8007422:	b110      	cbz	r0, 800742a <_printf_float+0x86>
 8007424:	232d      	movs	r3, #45	; 0x2d
 8007426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800742a:	4b92      	ldr	r3, [pc, #584]	; (8007674 <_printf_float+0x2d0>)
 800742c:	4892      	ldr	r0, [pc, #584]	; (8007678 <_printf_float+0x2d4>)
 800742e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007432:	bf94      	ite	ls
 8007434:	4698      	movls	r8, r3
 8007436:	4680      	movhi	r8, r0
 8007438:	2303      	movs	r3, #3
 800743a:	f04f 0a00 	mov.w	sl, #0
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	f02b 0304 	bic.w	r3, fp, #4
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	4633      	mov	r3, r6
 8007448:	4621      	mov	r1, r4
 800744a:	4628      	mov	r0, r5
 800744c:	9700      	str	r7, [sp, #0]
 800744e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007450:	f000 f9d4 	bl	80077fc <_printf_common>
 8007454:	3001      	adds	r0, #1
 8007456:	f040 8090 	bne.w	800757a <_printf_float+0x1d6>
 800745a:	f04f 30ff 	mov.w	r0, #4294967295
 800745e:	b011      	add	sp, #68	; 0x44
 8007460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007464:	4642      	mov	r2, r8
 8007466:	4653      	mov	r3, sl
 8007468:	4640      	mov	r0, r8
 800746a:	4651      	mov	r1, sl
 800746c:	f7f9 face 	bl	8000a0c <__aeabi_dcmpun>
 8007470:	b148      	cbz	r0, 8007486 <_printf_float+0xe2>
 8007472:	f1ba 0f00 	cmp.w	sl, #0
 8007476:	bfb8      	it	lt
 8007478:	232d      	movlt	r3, #45	; 0x2d
 800747a:	4880      	ldr	r0, [pc, #512]	; (800767c <_printf_float+0x2d8>)
 800747c:	bfb8      	it	lt
 800747e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007482:	4b7f      	ldr	r3, [pc, #508]	; (8007680 <_printf_float+0x2dc>)
 8007484:	e7d3      	b.n	800742e <_printf_float+0x8a>
 8007486:	6863      	ldr	r3, [r4, #4]
 8007488:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	d142      	bne.n	8007516 <_printf_float+0x172>
 8007490:	2306      	movs	r3, #6
 8007492:	6063      	str	r3, [r4, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	9206      	str	r2, [sp, #24]
 8007498:	aa0e      	add	r2, sp, #56	; 0x38
 800749a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800749e:	aa0d      	add	r2, sp, #52	; 0x34
 80074a0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80074a4:	9203      	str	r2, [sp, #12]
 80074a6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80074aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	6863      	ldr	r3, [r4, #4]
 80074b2:	4642      	mov	r2, r8
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	4628      	mov	r0, r5
 80074b8:	4653      	mov	r3, sl
 80074ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80074bc:	f7ff fed4 	bl	8007268 <__cvt>
 80074c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074c2:	4680      	mov	r8, r0
 80074c4:	2947      	cmp	r1, #71	; 0x47
 80074c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80074c8:	d108      	bne.n	80074dc <_printf_float+0x138>
 80074ca:	1cc8      	adds	r0, r1, #3
 80074cc:	db02      	blt.n	80074d4 <_printf_float+0x130>
 80074ce:	6863      	ldr	r3, [r4, #4]
 80074d0:	4299      	cmp	r1, r3
 80074d2:	dd40      	ble.n	8007556 <_printf_float+0x1b2>
 80074d4:	f1a9 0902 	sub.w	r9, r9, #2
 80074d8:	fa5f f989 	uxtb.w	r9, r9
 80074dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80074e0:	d81f      	bhi.n	8007522 <_printf_float+0x17e>
 80074e2:	464a      	mov	r2, r9
 80074e4:	3901      	subs	r1, #1
 80074e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074ea:	910d      	str	r1, [sp, #52]	; 0x34
 80074ec:	f7ff ff1b 	bl	8007326 <__exponent>
 80074f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074f2:	4682      	mov	sl, r0
 80074f4:	1813      	adds	r3, r2, r0
 80074f6:	2a01      	cmp	r2, #1
 80074f8:	6123      	str	r3, [r4, #16]
 80074fa:	dc02      	bgt.n	8007502 <_printf_float+0x15e>
 80074fc:	6822      	ldr	r2, [r4, #0]
 80074fe:	07d2      	lsls	r2, r2, #31
 8007500:	d501      	bpl.n	8007506 <_printf_float+0x162>
 8007502:	3301      	adds	r3, #1
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800750a:	2b00      	cmp	r3, #0
 800750c:	d09b      	beq.n	8007446 <_printf_float+0xa2>
 800750e:	232d      	movs	r3, #45	; 0x2d
 8007510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007514:	e797      	b.n	8007446 <_printf_float+0xa2>
 8007516:	2947      	cmp	r1, #71	; 0x47
 8007518:	d1bc      	bne.n	8007494 <_printf_float+0xf0>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1ba      	bne.n	8007494 <_printf_float+0xf0>
 800751e:	2301      	movs	r3, #1
 8007520:	e7b7      	b.n	8007492 <_printf_float+0xee>
 8007522:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007526:	d118      	bne.n	800755a <_printf_float+0x1b6>
 8007528:	2900      	cmp	r1, #0
 800752a:	6863      	ldr	r3, [r4, #4]
 800752c:	dd0b      	ble.n	8007546 <_printf_float+0x1a2>
 800752e:	6121      	str	r1, [r4, #16]
 8007530:	b913      	cbnz	r3, 8007538 <_printf_float+0x194>
 8007532:	6822      	ldr	r2, [r4, #0]
 8007534:	07d0      	lsls	r0, r2, #31
 8007536:	d502      	bpl.n	800753e <_printf_float+0x19a>
 8007538:	3301      	adds	r3, #1
 800753a:	440b      	add	r3, r1
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	f04f 0a00 	mov.w	sl, #0
 8007542:	65a1      	str	r1, [r4, #88]	; 0x58
 8007544:	e7df      	b.n	8007506 <_printf_float+0x162>
 8007546:	b913      	cbnz	r3, 800754e <_printf_float+0x1aa>
 8007548:	6822      	ldr	r2, [r4, #0]
 800754a:	07d2      	lsls	r2, r2, #31
 800754c:	d501      	bpl.n	8007552 <_printf_float+0x1ae>
 800754e:	3302      	adds	r3, #2
 8007550:	e7f4      	b.n	800753c <_printf_float+0x198>
 8007552:	2301      	movs	r3, #1
 8007554:	e7f2      	b.n	800753c <_printf_float+0x198>
 8007556:	f04f 0967 	mov.w	r9, #103	; 0x67
 800755a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800755c:	4299      	cmp	r1, r3
 800755e:	db05      	blt.n	800756c <_printf_float+0x1c8>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	6121      	str	r1, [r4, #16]
 8007564:	07d8      	lsls	r0, r3, #31
 8007566:	d5ea      	bpl.n	800753e <_printf_float+0x19a>
 8007568:	1c4b      	adds	r3, r1, #1
 800756a:	e7e7      	b.n	800753c <_printf_float+0x198>
 800756c:	2900      	cmp	r1, #0
 800756e:	bfcc      	ite	gt
 8007570:	2201      	movgt	r2, #1
 8007572:	f1c1 0202 	rsble	r2, r1, #2
 8007576:	4413      	add	r3, r2
 8007578:	e7e0      	b.n	800753c <_printf_float+0x198>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	055a      	lsls	r2, r3, #21
 800757e:	d407      	bmi.n	8007590 <_printf_float+0x1ec>
 8007580:	6923      	ldr	r3, [r4, #16]
 8007582:	4642      	mov	r2, r8
 8007584:	4631      	mov	r1, r6
 8007586:	4628      	mov	r0, r5
 8007588:	47b8      	blx	r7
 800758a:	3001      	adds	r0, #1
 800758c:	d12b      	bne.n	80075e6 <_printf_float+0x242>
 800758e:	e764      	b.n	800745a <_printf_float+0xb6>
 8007590:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007594:	f240 80dd 	bls.w	8007752 <_printf_float+0x3ae>
 8007598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800759c:	2200      	movs	r2, #0
 800759e:	2300      	movs	r3, #0
 80075a0:	f7f9 fa02 	bl	80009a8 <__aeabi_dcmpeq>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d033      	beq.n	8007610 <_printf_float+0x26c>
 80075a8:	2301      	movs	r3, #1
 80075aa:	4631      	mov	r1, r6
 80075ac:	4628      	mov	r0, r5
 80075ae:	4a35      	ldr	r2, [pc, #212]	; (8007684 <_printf_float+0x2e0>)
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	f43f af51 	beq.w	800745a <_printf_float+0xb6>
 80075b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80075bc:	429a      	cmp	r2, r3
 80075be:	db02      	blt.n	80075c6 <_printf_float+0x222>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	07d8      	lsls	r0, r3, #31
 80075c4:	d50f      	bpl.n	80075e6 <_printf_float+0x242>
 80075c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f af42 	beq.w	800745a <_printf_float+0xb6>
 80075d6:	f04f 0800 	mov.w	r8, #0
 80075da:	f104 091a 	add.w	r9, r4, #26
 80075de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e0:	3b01      	subs	r3, #1
 80075e2:	4543      	cmp	r3, r8
 80075e4:	dc09      	bgt.n	80075fa <_printf_float+0x256>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	079b      	lsls	r3, r3, #30
 80075ea:	f100 8102 	bmi.w	80077f2 <_printf_float+0x44e>
 80075ee:	68e0      	ldr	r0, [r4, #12]
 80075f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075f2:	4298      	cmp	r0, r3
 80075f4:	bfb8      	it	lt
 80075f6:	4618      	movlt	r0, r3
 80075f8:	e731      	b.n	800745e <_printf_float+0xba>
 80075fa:	2301      	movs	r3, #1
 80075fc:	464a      	mov	r2, r9
 80075fe:	4631      	mov	r1, r6
 8007600:	4628      	mov	r0, r5
 8007602:	47b8      	blx	r7
 8007604:	3001      	adds	r0, #1
 8007606:	f43f af28 	beq.w	800745a <_printf_float+0xb6>
 800760a:	f108 0801 	add.w	r8, r8, #1
 800760e:	e7e6      	b.n	80075de <_printf_float+0x23a>
 8007610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007612:	2b00      	cmp	r3, #0
 8007614:	dc38      	bgt.n	8007688 <_printf_float+0x2e4>
 8007616:	2301      	movs	r3, #1
 8007618:	4631      	mov	r1, r6
 800761a:	4628      	mov	r0, r5
 800761c:	4a19      	ldr	r2, [pc, #100]	; (8007684 <_printf_float+0x2e0>)
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	f43f af1a 	beq.w	800745a <_printf_float+0xb6>
 8007626:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800762a:	4313      	orrs	r3, r2
 800762c:	d102      	bne.n	8007634 <_printf_float+0x290>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	07d9      	lsls	r1, r3, #31
 8007632:	d5d8      	bpl.n	80075e6 <_printf_float+0x242>
 8007634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af0b 	beq.w	800745a <_printf_float+0xb6>
 8007644:	f04f 0900 	mov.w	r9, #0
 8007648:	f104 0a1a 	add.w	sl, r4, #26
 800764c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800764e:	425b      	negs	r3, r3
 8007650:	454b      	cmp	r3, r9
 8007652:	dc01      	bgt.n	8007658 <_printf_float+0x2b4>
 8007654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007656:	e794      	b.n	8007582 <_printf_float+0x1de>
 8007658:	2301      	movs	r3, #1
 800765a:	4652      	mov	r2, sl
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f aef9 	beq.w	800745a <_printf_float+0xb6>
 8007668:	f109 0901 	add.w	r9, r9, #1
 800766c:	e7ee      	b.n	800764c <_printf_float+0x2a8>
 800766e:	bf00      	nop
 8007670:	7fefffff 	.word	0x7fefffff
 8007674:	0800a5d8 	.word	0x0800a5d8
 8007678:	0800a5dc 	.word	0x0800a5dc
 800767c:	0800a5e4 	.word	0x0800a5e4
 8007680:	0800a5e0 	.word	0x0800a5e0
 8007684:	0800a5e8 	.word	0x0800a5e8
 8007688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800768a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800768c:	429a      	cmp	r2, r3
 800768e:	bfa8      	it	ge
 8007690:	461a      	movge	r2, r3
 8007692:	2a00      	cmp	r2, #0
 8007694:	4691      	mov	r9, r2
 8007696:	dc37      	bgt.n	8007708 <_printf_float+0x364>
 8007698:	f04f 0b00 	mov.w	fp, #0
 800769c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076a0:	f104 021a 	add.w	r2, r4, #26
 80076a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80076a8:	ebaa 0309 	sub.w	r3, sl, r9
 80076ac:	455b      	cmp	r3, fp
 80076ae:	dc33      	bgt.n	8007718 <_printf_float+0x374>
 80076b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076b4:	429a      	cmp	r2, r3
 80076b6:	db3b      	blt.n	8007730 <_printf_float+0x38c>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	07da      	lsls	r2, r3, #31
 80076bc:	d438      	bmi.n	8007730 <_printf_float+0x38c>
 80076be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80076c2:	eba3 020a 	sub.w	r2, r3, sl
 80076c6:	eba3 0901 	sub.w	r9, r3, r1
 80076ca:	4591      	cmp	r9, r2
 80076cc:	bfa8      	it	ge
 80076ce:	4691      	movge	r9, r2
 80076d0:	f1b9 0f00 	cmp.w	r9, #0
 80076d4:	dc34      	bgt.n	8007740 <_printf_float+0x39c>
 80076d6:	f04f 0800 	mov.w	r8, #0
 80076da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076de:	f104 0a1a 	add.w	sl, r4, #26
 80076e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	eba3 0309 	sub.w	r3, r3, r9
 80076ec:	4543      	cmp	r3, r8
 80076ee:	f77f af7a 	ble.w	80075e6 <_printf_float+0x242>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4652      	mov	r2, sl
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f aeac 	beq.w	800745a <_printf_float+0xb6>
 8007702:	f108 0801 	add.w	r8, r8, #1
 8007706:	e7ec      	b.n	80076e2 <_printf_float+0x33e>
 8007708:	4613      	mov	r3, r2
 800770a:	4631      	mov	r1, r6
 800770c:	4642      	mov	r2, r8
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	d1c0      	bne.n	8007698 <_printf_float+0x2f4>
 8007716:	e6a0      	b.n	800745a <_printf_float+0xb6>
 8007718:	2301      	movs	r3, #1
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f ae99 	beq.w	800745a <_printf_float+0xb6>
 8007728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800772a:	f10b 0b01 	add.w	fp, fp, #1
 800772e:	e7b9      	b.n	80076a4 <_printf_float+0x300>
 8007730:	4631      	mov	r1, r6
 8007732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007736:	4628      	mov	r0, r5
 8007738:	47b8      	blx	r7
 800773a:	3001      	adds	r0, #1
 800773c:	d1bf      	bne.n	80076be <_printf_float+0x31a>
 800773e:	e68c      	b.n	800745a <_printf_float+0xb6>
 8007740:	464b      	mov	r3, r9
 8007742:	4631      	mov	r1, r6
 8007744:	4628      	mov	r0, r5
 8007746:	eb08 020a 	add.w	r2, r8, sl
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	d1c2      	bne.n	80076d6 <_printf_float+0x332>
 8007750:	e683      	b.n	800745a <_printf_float+0xb6>
 8007752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007754:	2a01      	cmp	r2, #1
 8007756:	dc01      	bgt.n	800775c <_printf_float+0x3b8>
 8007758:	07db      	lsls	r3, r3, #31
 800775a:	d537      	bpl.n	80077cc <_printf_float+0x428>
 800775c:	2301      	movs	r3, #1
 800775e:	4642      	mov	r2, r8
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	47b8      	blx	r7
 8007766:	3001      	adds	r0, #1
 8007768:	f43f ae77 	beq.w	800745a <_printf_float+0xb6>
 800776c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007770:	4631      	mov	r1, r6
 8007772:	4628      	mov	r0, r5
 8007774:	47b8      	blx	r7
 8007776:	3001      	adds	r0, #1
 8007778:	f43f ae6f 	beq.w	800745a <_printf_float+0xb6>
 800777c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007780:	2200      	movs	r2, #0
 8007782:	2300      	movs	r3, #0
 8007784:	f7f9 f910 	bl	80009a8 <__aeabi_dcmpeq>
 8007788:	b9d8      	cbnz	r0, 80077c2 <_printf_float+0x41e>
 800778a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800778c:	f108 0201 	add.w	r2, r8, #1
 8007790:	3b01      	subs	r3, #1
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	47b8      	blx	r7
 8007798:	3001      	adds	r0, #1
 800779a:	d10e      	bne.n	80077ba <_printf_float+0x416>
 800779c:	e65d      	b.n	800745a <_printf_float+0xb6>
 800779e:	2301      	movs	r3, #1
 80077a0:	464a      	mov	r2, r9
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	f43f ae56 	beq.w	800745a <_printf_float+0xb6>
 80077ae:	f108 0801 	add.w	r8, r8, #1
 80077b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077b4:	3b01      	subs	r3, #1
 80077b6:	4543      	cmp	r3, r8
 80077b8:	dcf1      	bgt.n	800779e <_printf_float+0x3fa>
 80077ba:	4653      	mov	r3, sl
 80077bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077c0:	e6e0      	b.n	8007584 <_printf_float+0x1e0>
 80077c2:	f04f 0800 	mov.w	r8, #0
 80077c6:	f104 091a 	add.w	r9, r4, #26
 80077ca:	e7f2      	b.n	80077b2 <_printf_float+0x40e>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4642      	mov	r2, r8
 80077d0:	e7df      	b.n	8007792 <_printf_float+0x3ee>
 80077d2:	2301      	movs	r3, #1
 80077d4:	464a      	mov	r2, r9
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	f43f ae3c 	beq.w	800745a <_printf_float+0xb6>
 80077e2:	f108 0801 	add.w	r8, r8, #1
 80077e6:	68e3      	ldr	r3, [r4, #12]
 80077e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80077ea:	1a5b      	subs	r3, r3, r1
 80077ec:	4543      	cmp	r3, r8
 80077ee:	dcf0      	bgt.n	80077d2 <_printf_float+0x42e>
 80077f0:	e6fd      	b.n	80075ee <_printf_float+0x24a>
 80077f2:	f04f 0800 	mov.w	r8, #0
 80077f6:	f104 0919 	add.w	r9, r4, #25
 80077fa:	e7f4      	b.n	80077e6 <_printf_float+0x442>

080077fc <_printf_common>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	4616      	mov	r6, r2
 8007802:	4699      	mov	r9, r3
 8007804:	688a      	ldr	r2, [r1, #8]
 8007806:	690b      	ldr	r3, [r1, #16]
 8007808:	4607      	mov	r7, r0
 800780a:	4293      	cmp	r3, r2
 800780c:	bfb8      	it	lt
 800780e:	4613      	movlt	r3, r2
 8007810:	6033      	str	r3, [r6, #0]
 8007812:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007816:	460c      	mov	r4, r1
 8007818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800781c:	b10a      	cbz	r2, 8007822 <_printf_common+0x26>
 800781e:	3301      	adds	r3, #1
 8007820:	6033      	str	r3, [r6, #0]
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	0699      	lsls	r1, r3, #26
 8007826:	bf42      	ittt	mi
 8007828:	6833      	ldrmi	r3, [r6, #0]
 800782a:	3302      	addmi	r3, #2
 800782c:	6033      	strmi	r3, [r6, #0]
 800782e:	6825      	ldr	r5, [r4, #0]
 8007830:	f015 0506 	ands.w	r5, r5, #6
 8007834:	d106      	bne.n	8007844 <_printf_common+0x48>
 8007836:	f104 0a19 	add.w	sl, r4, #25
 800783a:	68e3      	ldr	r3, [r4, #12]
 800783c:	6832      	ldr	r2, [r6, #0]
 800783e:	1a9b      	subs	r3, r3, r2
 8007840:	42ab      	cmp	r3, r5
 8007842:	dc28      	bgt.n	8007896 <_printf_common+0x9a>
 8007844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007848:	1e13      	subs	r3, r2, #0
 800784a:	6822      	ldr	r2, [r4, #0]
 800784c:	bf18      	it	ne
 800784e:	2301      	movne	r3, #1
 8007850:	0692      	lsls	r2, r2, #26
 8007852:	d42d      	bmi.n	80078b0 <_printf_common+0xb4>
 8007854:	4649      	mov	r1, r9
 8007856:	4638      	mov	r0, r7
 8007858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800785c:	47c0      	blx	r8
 800785e:	3001      	adds	r0, #1
 8007860:	d020      	beq.n	80078a4 <_printf_common+0xa8>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	68e5      	ldr	r5, [r4, #12]
 8007866:	f003 0306 	and.w	r3, r3, #6
 800786a:	2b04      	cmp	r3, #4
 800786c:	bf18      	it	ne
 800786e:	2500      	movne	r5, #0
 8007870:	6832      	ldr	r2, [r6, #0]
 8007872:	f04f 0600 	mov.w	r6, #0
 8007876:	68a3      	ldr	r3, [r4, #8]
 8007878:	bf08      	it	eq
 800787a:	1aad      	subeq	r5, r5, r2
 800787c:	6922      	ldr	r2, [r4, #16]
 800787e:	bf08      	it	eq
 8007880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007884:	4293      	cmp	r3, r2
 8007886:	bfc4      	itt	gt
 8007888:	1a9b      	subgt	r3, r3, r2
 800788a:	18ed      	addgt	r5, r5, r3
 800788c:	341a      	adds	r4, #26
 800788e:	42b5      	cmp	r5, r6
 8007890:	d11a      	bne.n	80078c8 <_printf_common+0xcc>
 8007892:	2000      	movs	r0, #0
 8007894:	e008      	b.n	80078a8 <_printf_common+0xac>
 8007896:	2301      	movs	r3, #1
 8007898:	4652      	mov	r2, sl
 800789a:	4649      	mov	r1, r9
 800789c:	4638      	mov	r0, r7
 800789e:	47c0      	blx	r8
 80078a0:	3001      	adds	r0, #1
 80078a2:	d103      	bne.n	80078ac <_printf_common+0xb0>
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ac:	3501      	adds	r5, #1
 80078ae:	e7c4      	b.n	800783a <_printf_common+0x3e>
 80078b0:	2030      	movs	r0, #48	; 0x30
 80078b2:	18e1      	adds	r1, r4, r3
 80078b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078be:	4422      	add	r2, r4
 80078c0:	3302      	adds	r3, #2
 80078c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078c6:	e7c5      	b.n	8007854 <_printf_common+0x58>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4622      	mov	r2, r4
 80078cc:	4649      	mov	r1, r9
 80078ce:	4638      	mov	r0, r7
 80078d0:	47c0      	blx	r8
 80078d2:	3001      	adds	r0, #1
 80078d4:	d0e6      	beq.n	80078a4 <_printf_common+0xa8>
 80078d6:	3601      	adds	r6, #1
 80078d8:	e7d9      	b.n	800788e <_printf_common+0x92>
	...

080078dc <_printf_i>:
 80078dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	7e0f      	ldrb	r7, [r1, #24]
 80078e2:	4691      	mov	r9, r2
 80078e4:	2f78      	cmp	r7, #120	; 0x78
 80078e6:	4680      	mov	r8, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	469a      	mov	sl, r3
 80078ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078f2:	d807      	bhi.n	8007904 <_printf_i+0x28>
 80078f4:	2f62      	cmp	r7, #98	; 0x62
 80078f6:	d80a      	bhi.n	800790e <_printf_i+0x32>
 80078f8:	2f00      	cmp	r7, #0
 80078fa:	f000 80d9 	beq.w	8007ab0 <_printf_i+0x1d4>
 80078fe:	2f58      	cmp	r7, #88	; 0x58
 8007900:	f000 80a4 	beq.w	8007a4c <_printf_i+0x170>
 8007904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800790c:	e03a      	b.n	8007984 <_printf_i+0xa8>
 800790e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007912:	2b15      	cmp	r3, #21
 8007914:	d8f6      	bhi.n	8007904 <_printf_i+0x28>
 8007916:	a101      	add	r1, pc, #4	; (adr r1, 800791c <_printf_i+0x40>)
 8007918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800791c:	08007975 	.word	0x08007975
 8007920:	08007989 	.word	0x08007989
 8007924:	08007905 	.word	0x08007905
 8007928:	08007905 	.word	0x08007905
 800792c:	08007905 	.word	0x08007905
 8007930:	08007905 	.word	0x08007905
 8007934:	08007989 	.word	0x08007989
 8007938:	08007905 	.word	0x08007905
 800793c:	08007905 	.word	0x08007905
 8007940:	08007905 	.word	0x08007905
 8007944:	08007905 	.word	0x08007905
 8007948:	08007a97 	.word	0x08007a97
 800794c:	080079b9 	.word	0x080079b9
 8007950:	08007a79 	.word	0x08007a79
 8007954:	08007905 	.word	0x08007905
 8007958:	08007905 	.word	0x08007905
 800795c:	08007ab9 	.word	0x08007ab9
 8007960:	08007905 	.word	0x08007905
 8007964:	080079b9 	.word	0x080079b9
 8007968:	08007905 	.word	0x08007905
 800796c:	08007905 	.word	0x08007905
 8007970:	08007a81 	.word	0x08007a81
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	1d1a      	adds	r2, r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	602a      	str	r2, [r5, #0]
 800797c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007984:	2301      	movs	r3, #1
 8007986:	e0a4      	b.n	8007ad2 <_printf_i+0x1f6>
 8007988:	6820      	ldr	r0, [r4, #0]
 800798a:	6829      	ldr	r1, [r5, #0]
 800798c:	0606      	lsls	r6, r0, #24
 800798e:	f101 0304 	add.w	r3, r1, #4
 8007992:	d50a      	bpl.n	80079aa <_printf_i+0xce>
 8007994:	680e      	ldr	r6, [r1, #0]
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	2e00      	cmp	r6, #0
 800799a:	da03      	bge.n	80079a4 <_printf_i+0xc8>
 800799c:	232d      	movs	r3, #45	; 0x2d
 800799e:	4276      	negs	r6, r6
 80079a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a4:	230a      	movs	r3, #10
 80079a6:	485e      	ldr	r0, [pc, #376]	; (8007b20 <_printf_i+0x244>)
 80079a8:	e019      	b.n	80079de <_printf_i+0x102>
 80079aa:	680e      	ldr	r6, [r1, #0]
 80079ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079b0:	602b      	str	r3, [r5, #0]
 80079b2:	bf18      	it	ne
 80079b4:	b236      	sxthne	r6, r6
 80079b6:	e7ef      	b.n	8007998 <_printf_i+0xbc>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	6820      	ldr	r0, [r4, #0]
 80079bc:	1d19      	adds	r1, r3, #4
 80079be:	6029      	str	r1, [r5, #0]
 80079c0:	0601      	lsls	r1, r0, #24
 80079c2:	d501      	bpl.n	80079c8 <_printf_i+0xec>
 80079c4:	681e      	ldr	r6, [r3, #0]
 80079c6:	e002      	b.n	80079ce <_printf_i+0xf2>
 80079c8:	0646      	lsls	r6, r0, #25
 80079ca:	d5fb      	bpl.n	80079c4 <_printf_i+0xe8>
 80079cc:	881e      	ldrh	r6, [r3, #0]
 80079ce:	2f6f      	cmp	r7, #111	; 0x6f
 80079d0:	bf0c      	ite	eq
 80079d2:	2308      	moveq	r3, #8
 80079d4:	230a      	movne	r3, #10
 80079d6:	4852      	ldr	r0, [pc, #328]	; (8007b20 <_printf_i+0x244>)
 80079d8:	2100      	movs	r1, #0
 80079da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079de:	6865      	ldr	r5, [r4, #4]
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	bfa8      	it	ge
 80079e4:	6821      	ldrge	r1, [r4, #0]
 80079e6:	60a5      	str	r5, [r4, #8]
 80079e8:	bfa4      	itt	ge
 80079ea:	f021 0104 	bicge.w	r1, r1, #4
 80079ee:	6021      	strge	r1, [r4, #0]
 80079f0:	b90e      	cbnz	r6, 80079f6 <_printf_i+0x11a>
 80079f2:	2d00      	cmp	r5, #0
 80079f4:	d04d      	beq.n	8007a92 <_printf_i+0x1b6>
 80079f6:	4615      	mov	r5, r2
 80079f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80079fc:	fb03 6711 	mls	r7, r3, r1, r6
 8007a00:	5dc7      	ldrb	r7, [r0, r7]
 8007a02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a06:	4637      	mov	r7, r6
 8007a08:	42bb      	cmp	r3, r7
 8007a0a:	460e      	mov	r6, r1
 8007a0c:	d9f4      	bls.n	80079f8 <_printf_i+0x11c>
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	d10b      	bne.n	8007a2a <_printf_i+0x14e>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	07de      	lsls	r6, r3, #31
 8007a16:	d508      	bpl.n	8007a2a <_printf_i+0x14e>
 8007a18:	6923      	ldr	r3, [r4, #16]
 8007a1a:	6861      	ldr	r1, [r4, #4]
 8007a1c:	4299      	cmp	r1, r3
 8007a1e:	bfde      	ittt	le
 8007a20:	2330      	movle	r3, #48	; 0x30
 8007a22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a2a:	1b52      	subs	r2, r2, r5
 8007a2c:	6122      	str	r2, [r4, #16]
 8007a2e:	464b      	mov	r3, r9
 8007a30:	4621      	mov	r1, r4
 8007a32:	4640      	mov	r0, r8
 8007a34:	f8cd a000 	str.w	sl, [sp]
 8007a38:	aa03      	add	r2, sp, #12
 8007a3a:	f7ff fedf 	bl	80077fc <_printf_common>
 8007a3e:	3001      	adds	r0, #1
 8007a40:	d14c      	bne.n	8007adc <_printf_i+0x200>
 8007a42:	f04f 30ff 	mov.w	r0, #4294967295
 8007a46:	b004      	add	sp, #16
 8007a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4c:	4834      	ldr	r0, [pc, #208]	; (8007b20 <_printf_i+0x244>)
 8007a4e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a52:	6829      	ldr	r1, [r5, #0]
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a5a:	6029      	str	r1, [r5, #0]
 8007a5c:	061d      	lsls	r5, r3, #24
 8007a5e:	d514      	bpl.n	8007a8a <_printf_i+0x1ae>
 8007a60:	07df      	lsls	r7, r3, #31
 8007a62:	bf44      	itt	mi
 8007a64:	f043 0320 	orrmi.w	r3, r3, #32
 8007a68:	6023      	strmi	r3, [r4, #0]
 8007a6a:	b91e      	cbnz	r6, 8007a74 <_printf_i+0x198>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	f023 0320 	bic.w	r3, r3, #32
 8007a72:	6023      	str	r3, [r4, #0]
 8007a74:	2310      	movs	r3, #16
 8007a76:	e7af      	b.n	80079d8 <_printf_i+0xfc>
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	f043 0320 	orr.w	r3, r3, #32
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	2378      	movs	r3, #120	; 0x78
 8007a82:	4828      	ldr	r0, [pc, #160]	; (8007b24 <_printf_i+0x248>)
 8007a84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a88:	e7e3      	b.n	8007a52 <_printf_i+0x176>
 8007a8a:	0659      	lsls	r1, r3, #25
 8007a8c:	bf48      	it	mi
 8007a8e:	b2b6      	uxthmi	r6, r6
 8007a90:	e7e6      	b.n	8007a60 <_printf_i+0x184>
 8007a92:	4615      	mov	r5, r2
 8007a94:	e7bb      	b.n	8007a0e <_printf_i+0x132>
 8007a96:	682b      	ldr	r3, [r5, #0]
 8007a98:	6826      	ldr	r6, [r4, #0]
 8007a9a:	1d18      	adds	r0, r3, #4
 8007a9c:	6961      	ldr	r1, [r4, #20]
 8007a9e:	6028      	str	r0, [r5, #0]
 8007aa0:	0635      	lsls	r5, r6, #24
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	d501      	bpl.n	8007aaa <_printf_i+0x1ce>
 8007aa6:	6019      	str	r1, [r3, #0]
 8007aa8:	e002      	b.n	8007ab0 <_printf_i+0x1d4>
 8007aaa:	0670      	lsls	r0, r6, #25
 8007aac:	d5fb      	bpl.n	8007aa6 <_printf_i+0x1ca>
 8007aae:	8019      	strh	r1, [r3, #0]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4615      	mov	r5, r2
 8007ab4:	6123      	str	r3, [r4, #16]
 8007ab6:	e7ba      	b.n	8007a2e <_printf_i+0x152>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	2100      	movs	r1, #0
 8007abc:	1d1a      	adds	r2, r3, #4
 8007abe:	602a      	str	r2, [r5, #0]
 8007ac0:	681d      	ldr	r5, [r3, #0]
 8007ac2:	6862      	ldr	r2, [r4, #4]
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 fff7 	bl	8008ab8 <memchr>
 8007aca:	b108      	cbz	r0, 8007ad0 <_printf_i+0x1f4>
 8007acc:	1b40      	subs	r0, r0, r5
 8007ace:	6060      	str	r0, [r4, #4]
 8007ad0:	6863      	ldr	r3, [r4, #4]
 8007ad2:	6123      	str	r3, [r4, #16]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ada:	e7a8      	b.n	8007a2e <_printf_i+0x152>
 8007adc:	462a      	mov	r2, r5
 8007ade:	4649      	mov	r1, r9
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	6923      	ldr	r3, [r4, #16]
 8007ae4:	47d0      	blx	sl
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d0ab      	beq.n	8007a42 <_printf_i+0x166>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	079b      	lsls	r3, r3, #30
 8007aee:	d413      	bmi.n	8007b18 <_printf_i+0x23c>
 8007af0:	68e0      	ldr	r0, [r4, #12]
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	4298      	cmp	r0, r3
 8007af6:	bfb8      	it	lt
 8007af8:	4618      	movlt	r0, r3
 8007afa:	e7a4      	b.n	8007a46 <_printf_i+0x16a>
 8007afc:	2301      	movs	r3, #1
 8007afe:	4632      	mov	r2, r6
 8007b00:	4649      	mov	r1, r9
 8007b02:	4640      	mov	r0, r8
 8007b04:	47d0      	blx	sl
 8007b06:	3001      	adds	r0, #1
 8007b08:	d09b      	beq.n	8007a42 <_printf_i+0x166>
 8007b0a:	3501      	adds	r5, #1
 8007b0c:	68e3      	ldr	r3, [r4, #12]
 8007b0e:	9903      	ldr	r1, [sp, #12]
 8007b10:	1a5b      	subs	r3, r3, r1
 8007b12:	42ab      	cmp	r3, r5
 8007b14:	dcf2      	bgt.n	8007afc <_printf_i+0x220>
 8007b16:	e7eb      	b.n	8007af0 <_printf_i+0x214>
 8007b18:	2500      	movs	r5, #0
 8007b1a:	f104 0619 	add.w	r6, r4, #25
 8007b1e:	e7f5      	b.n	8007b0c <_printf_i+0x230>
 8007b20:	0800a5ea 	.word	0x0800a5ea
 8007b24:	0800a5fb 	.word	0x0800a5fb

08007b28 <iprintf>:
 8007b28:	b40f      	push	{r0, r1, r2, r3}
 8007b2a:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <iprintf+0x2c>)
 8007b2c:	b513      	push	{r0, r1, r4, lr}
 8007b2e:	681c      	ldr	r4, [r3, #0]
 8007b30:	b124      	cbz	r4, 8007b3c <iprintf+0x14>
 8007b32:	69a3      	ldr	r3, [r4, #24]
 8007b34:	b913      	cbnz	r3, 8007b3c <iprintf+0x14>
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 ff10 	bl	800895c <__sinit>
 8007b3c:	ab05      	add	r3, sp, #20
 8007b3e:	4620      	mov	r0, r4
 8007b40:	9a04      	ldr	r2, [sp, #16]
 8007b42:	68a1      	ldr	r1, [r4, #8]
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	f001 fdbb 	bl	80096c0 <_vfiprintf_r>
 8007b4a:	b002      	add	sp, #8
 8007b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b50:	b004      	add	sp, #16
 8007b52:	4770      	bx	lr
 8007b54:	20000024 	.word	0x20000024

08007b58 <siprintf>:
 8007b58:	b40e      	push	{r1, r2, r3}
 8007b5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b5e:	b500      	push	{lr}
 8007b60:	b09c      	sub	sp, #112	; 0x70
 8007b62:	ab1d      	add	r3, sp, #116	; 0x74
 8007b64:	9002      	str	r0, [sp, #8]
 8007b66:	9006      	str	r0, [sp, #24]
 8007b68:	9107      	str	r1, [sp, #28]
 8007b6a:	9104      	str	r1, [sp, #16]
 8007b6c:	4808      	ldr	r0, [pc, #32]	; (8007b90 <siprintf+0x38>)
 8007b6e:	4909      	ldr	r1, [pc, #36]	; (8007b94 <siprintf+0x3c>)
 8007b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b74:	9105      	str	r1, [sp, #20]
 8007b76:	6800      	ldr	r0, [r0, #0]
 8007b78:	a902      	add	r1, sp, #8
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	f001 fc78 	bl	8009470 <_svfiprintf_r>
 8007b80:	2200      	movs	r2, #0
 8007b82:	9b02      	ldr	r3, [sp, #8]
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	b01c      	add	sp, #112	; 0x70
 8007b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b8c:	b003      	add	sp, #12
 8007b8e:	4770      	bx	lr
 8007b90:	20000024 	.word	0x20000024
 8007b94:	ffff0208 	.word	0xffff0208

08007b98 <strcat>:
 8007b98:	4602      	mov	r2, r0
 8007b9a:	b510      	push	{r4, lr}
 8007b9c:	7814      	ldrb	r4, [r2, #0]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	3201      	adds	r2, #1
 8007ba2:	2c00      	cmp	r4, #0
 8007ba4:	d1fa      	bne.n	8007b9c <strcat+0x4>
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	d1f9      	bne.n	8007ba8 <strcat+0x10>
 8007bb4:	bd10      	pop	{r4, pc}

08007bb6 <quorem>:
 8007bb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bba:	6903      	ldr	r3, [r0, #16]
 8007bbc:	690c      	ldr	r4, [r1, #16]
 8007bbe:	4607      	mov	r7, r0
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	f2c0 8082 	blt.w	8007cca <quorem+0x114>
 8007bc6:	3c01      	subs	r4, #1
 8007bc8:	f100 0514 	add.w	r5, r0, #20
 8007bcc:	f101 0814 	add.w	r8, r1, #20
 8007bd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bde:	3301      	adds	r3, #1
 8007be0:	429a      	cmp	r2, r3
 8007be2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007be6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bee:	d331      	bcc.n	8007c54 <quorem+0x9e>
 8007bf0:	f04f 0e00 	mov.w	lr, #0
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	46ac      	mov	ip, r5
 8007bf8:	46f2      	mov	sl, lr
 8007bfa:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bfe:	b293      	uxth	r3, r2
 8007c00:	fb06 e303 	mla	r3, r6, r3, lr
 8007c04:	0c12      	lsrs	r2, r2, #16
 8007c06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	fb06 e202 	mla	r2, r6, r2, lr
 8007c10:	ebaa 0303 	sub.w	r3, sl, r3
 8007c14:	f8dc a000 	ldr.w	sl, [ip]
 8007c18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c1c:	fa1f fa8a 	uxth.w	sl, sl
 8007c20:	4453      	add	r3, sl
 8007c22:	f8dc a000 	ldr.w	sl, [ip]
 8007c26:	b292      	uxth	r2, r2
 8007c28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c36:	4581      	cmp	r9, r0
 8007c38:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c3c:	f84c 3b04 	str.w	r3, [ip], #4
 8007c40:	d2db      	bcs.n	8007bfa <quorem+0x44>
 8007c42:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c46:	b92b      	cbnz	r3, 8007c54 <quorem+0x9e>
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	3b04      	subs	r3, #4
 8007c4c:	429d      	cmp	r5, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	d32f      	bcc.n	8007cb2 <quorem+0xfc>
 8007c52:	613c      	str	r4, [r7, #16]
 8007c54:	4638      	mov	r0, r7
 8007c56:	f001 f9bb 	bl	8008fd0 <__mcmp>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	db25      	blt.n	8007caa <quorem+0xf4>
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f04f 0c00 	mov.w	ip, #0
 8007c64:	3601      	adds	r6, #1
 8007c66:	f858 1b04 	ldr.w	r1, [r8], #4
 8007c6a:	f8d0 e000 	ldr.w	lr, [r0]
 8007c6e:	b28b      	uxth	r3, r1
 8007c70:	ebac 0303 	sub.w	r3, ip, r3
 8007c74:	fa1f f28e 	uxth.w	r2, lr
 8007c78:	4413      	add	r3, r2
 8007c7a:	0c0a      	lsrs	r2, r1, #16
 8007c7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c8a:	45c1      	cmp	r9, r8
 8007c8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c90:	f840 3b04 	str.w	r3, [r0], #4
 8007c94:	d2e7      	bcs.n	8007c66 <quorem+0xb0>
 8007c96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c9e:	b922      	cbnz	r2, 8007caa <quorem+0xf4>
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	429d      	cmp	r5, r3
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	d30a      	bcc.n	8007cbe <quorem+0x108>
 8007ca8:	613c      	str	r4, [r7, #16]
 8007caa:	4630      	mov	r0, r6
 8007cac:	b003      	add	sp, #12
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	3b04      	subs	r3, #4
 8007cb6:	2a00      	cmp	r2, #0
 8007cb8:	d1cb      	bne.n	8007c52 <quorem+0x9c>
 8007cba:	3c01      	subs	r4, #1
 8007cbc:	e7c6      	b.n	8007c4c <quorem+0x96>
 8007cbe:	6812      	ldr	r2, [r2, #0]
 8007cc0:	3b04      	subs	r3, #4
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	d1f0      	bne.n	8007ca8 <quorem+0xf2>
 8007cc6:	3c01      	subs	r4, #1
 8007cc8:	e7eb      	b.n	8007ca2 <quorem+0xec>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e7ee      	b.n	8007cac <quorem+0xf6>
	...

08007cd0 <_dtoa_r>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	4616      	mov	r6, r2
 8007cd6:	461f      	mov	r7, r3
 8007cd8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007cda:	b099      	sub	sp, #100	; 0x64
 8007cdc:	4605      	mov	r5, r0
 8007cde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ce2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007ce6:	b974      	cbnz	r4, 8007d06 <_dtoa_r+0x36>
 8007ce8:	2010      	movs	r0, #16
 8007cea:	f000 fedd 	bl	8008aa8 <malloc>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	6268      	str	r0, [r5, #36]	; 0x24
 8007cf2:	b920      	cbnz	r0, 8007cfe <_dtoa_r+0x2e>
 8007cf4:	21ea      	movs	r1, #234	; 0xea
 8007cf6:	4ba8      	ldr	r3, [pc, #672]	; (8007f98 <_dtoa_r+0x2c8>)
 8007cf8:	48a8      	ldr	r0, [pc, #672]	; (8007f9c <_dtoa_r+0x2cc>)
 8007cfa:	f001 ff37 	bl	8009b6c <__assert_func>
 8007cfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d02:	6004      	str	r4, [r0, #0]
 8007d04:	60c4      	str	r4, [r0, #12]
 8007d06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d08:	6819      	ldr	r1, [r3, #0]
 8007d0a:	b151      	cbz	r1, 8007d22 <_dtoa_r+0x52>
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4093      	lsls	r3, r2
 8007d12:	604a      	str	r2, [r1, #4]
 8007d14:	608b      	str	r3, [r1, #8]
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 ff1c 	bl	8008b54 <_Bfree>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	1e3b      	subs	r3, r7, #0
 8007d24:	bfaf      	iteee	ge
 8007d26:	2300      	movge	r3, #0
 8007d28:	2201      	movlt	r2, #1
 8007d2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d2e:	9305      	strlt	r3, [sp, #20]
 8007d30:	bfa8      	it	ge
 8007d32:	f8c8 3000 	strge.w	r3, [r8]
 8007d36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007d3a:	4b99      	ldr	r3, [pc, #612]	; (8007fa0 <_dtoa_r+0x2d0>)
 8007d3c:	bfb8      	it	lt
 8007d3e:	f8c8 2000 	strlt.w	r2, [r8]
 8007d42:	ea33 0309 	bics.w	r3, r3, r9
 8007d46:	d119      	bne.n	8007d7c <_dtoa_r+0xac>
 8007d48:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d54:	4333      	orrs	r3, r6
 8007d56:	f000 857f 	beq.w	8008858 <_dtoa_r+0xb88>
 8007d5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d5c:	b953      	cbnz	r3, 8007d74 <_dtoa_r+0xa4>
 8007d5e:	4b91      	ldr	r3, [pc, #580]	; (8007fa4 <_dtoa_r+0x2d4>)
 8007d60:	e022      	b.n	8007da8 <_dtoa_r+0xd8>
 8007d62:	4b91      	ldr	r3, [pc, #580]	; (8007fa8 <_dtoa_r+0x2d8>)
 8007d64:	9303      	str	r3, [sp, #12]
 8007d66:	3308      	adds	r3, #8
 8007d68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	9803      	ldr	r0, [sp, #12]
 8007d6e:	b019      	add	sp, #100	; 0x64
 8007d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	4b8b      	ldr	r3, [pc, #556]	; (8007fa4 <_dtoa_r+0x2d4>)
 8007d76:	9303      	str	r3, [sp, #12]
 8007d78:	3303      	adds	r3, #3
 8007d7a:	e7f5      	b.n	8007d68 <_dtoa_r+0x98>
 8007d7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007d80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007d84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f7f8 fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8007d90:	4680      	mov	r8, r0
 8007d92:	b158      	cbz	r0, 8007dac <_dtoa_r+0xdc>
 8007d94:	2301      	movs	r3, #1
 8007d96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 8558 	beq.w	8008852 <_dtoa_r+0xb82>
 8007da2:	4882      	ldr	r0, [pc, #520]	; (8007fac <_dtoa_r+0x2dc>)
 8007da4:	6018      	str	r0, [r3, #0]
 8007da6:	1e43      	subs	r3, r0, #1
 8007da8:	9303      	str	r3, [sp, #12]
 8007daa:	e7df      	b.n	8007d6c <_dtoa_r+0x9c>
 8007dac:	ab16      	add	r3, sp, #88	; 0x58
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	ab17      	add	r3, sp, #92	; 0x5c
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	4628      	mov	r0, r5
 8007db6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007dba:	f001 f9b1 	bl	8009120 <__d2b>
 8007dbe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007dc2:	4683      	mov	fp, r0
 8007dc4:	2c00      	cmp	r4, #0
 8007dc6:	d07f      	beq.n	8007ec8 <_dtoa_r+0x1f8>
 8007dc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dd6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007dda:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007dde:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007de2:	2200      	movs	r2, #0
 8007de4:	4b72      	ldr	r3, [pc, #456]	; (8007fb0 <_dtoa_r+0x2e0>)
 8007de6:	f7f8 f9bf 	bl	8000168 <__aeabi_dsub>
 8007dea:	a365      	add	r3, pc, #404	; (adr r3, 8007f80 <_dtoa_r+0x2b0>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f7f8 fb72 	bl	80004d8 <__aeabi_dmul>
 8007df4:	a364      	add	r3, pc, #400	; (adr r3, 8007f88 <_dtoa_r+0x2b8>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f7f8 f9b7 	bl	800016c <__adddf3>
 8007dfe:	4606      	mov	r6, r0
 8007e00:	4620      	mov	r0, r4
 8007e02:	460f      	mov	r7, r1
 8007e04:	f7f8 fafe 	bl	8000404 <__aeabi_i2d>
 8007e08:	a361      	add	r3, pc, #388	; (adr r3, 8007f90 <_dtoa_r+0x2c0>)
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	f7f8 fb63 	bl	80004d8 <__aeabi_dmul>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4630      	mov	r0, r6
 8007e18:	4639      	mov	r1, r7
 8007e1a:	f7f8 f9a7 	bl	800016c <__adddf3>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460f      	mov	r7, r1
 8007e22:	f7f8 fe09 	bl	8000a38 <__aeabi_d2iz>
 8007e26:	2200      	movs	r2, #0
 8007e28:	4682      	mov	sl, r0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	4639      	mov	r1, r7
 8007e30:	f7f8 fdc4 	bl	80009bc <__aeabi_dcmplt>
 8007e34:	b148      	cbz	r0, 8007e4a <_dtoa_r+0x17a>
 8007e36:	4650      	mov	r0, sl
 8007e38:	f7f8 fae4 	bl	8000404 <__aeabi_i2d>
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	463b      	mov	r3, r7
 8007e40:	f7f8 fdb2 	bl	80009a8 <__aeabi_dcmpeq>
 8007e44:	b908      	cbnz	r0, 8007e4a <_dtoa_r+0x17a>
 8007e46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e4a:	f1ba 0f16 	cmp.w	sl, #22
 8007e4e:	d858      	bhi.n	8007f02 <_dtoa_r+0x232>
 8007e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e54:	4b57      	ldr	r3, [pc, #348]	; (8007fb4 <_dtoa_r+0x2e4>)
 8007e56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f7f8 fdad 	bl	80009bc <__aeabi_dcmplt>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d04f      	beq.n	8007f06 <_dtoa_r+0x236>
 8007e66:	2300      	movs	r3, #0
 8007e68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e70:	1b1c      	subs	r4, r3, r4
 8007e72:	1e63      	subs	r3, r4, #1
 8007e74:	9309      	str	r3, [sp, #36]	; 0x24
 8007e76:	bf49      	itett	mi
 8007e78:	f1c4 0301 	rsbmi	r3, r4, #1
 8007e7c:	2300      	movpl	r3, #0
 8007e7e:	9306      	strmi	r3, [sp, #24]
 8007e80:	2300      	movmi	r3, #0
 8007e82:	bf54      	ite	pl
 8007e84:	9306      	strpl	r3, [sp, #24]
 8007e86:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007e88:	f1ba 0f00 	cmp.w	sl, #0
 8007e8c:	db3d      	blt.n	8007f0a <_dtoa_r+0x23a>
 8007e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e90:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007e94:	4453      	add	r3, sl
 8007e96:	9309      	str	r3, [sp, #36]	; 0x24
 8007e98:	2300      	movs	r3, #0
 8007e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e9e:	2b09      	cmp	r3, #9
 8007ea0:	f200 808c 	bhi.w	8007fbc <_dtoa_r+0x2ec>
 8007ea4:	2b05      	cmp	r3, #5
 8007ea6:	bfc4      	itt	gt
 8007ea8:	3b04      	subgt	r3, #4
 8007eaa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007eac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007eae:	bfc8      	it	gt
 8007eb0:	2400      	movgt	r4, #0
 8007eb2:	f1a3 0302 	sub.w	r3, r3, #2
 8007eb6:	bfd8      	it	le
 8007eb8:	2401      	movle	r4, #1
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	f200 808a 	bhi.w	8007fd4 <_dtoa_r+0x304>
 8007ec0:	e8df f003 	tbb	[pc, r3]
 8007ec4:	5b4d4f2d 	.word	0x5b4d4f2d
 8007ec8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007ecc:	441c      	add	r4, r3
 8007ece:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	bfc3      	ittte	gt
 8007ed6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007eda:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007ede:	fa09 f303 	lslgt.w	r3, r9, r3
 8007ee2:	f1c3 0320 	rsble	r3, r3, #32
 8007ee6:	bfc6      	itte	gt
 8007ee8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007eec:	4318      	orrgt	r0, r3
 8007eee:	fa06 f003 	lslle.w	r0, r6, r3
 8007ef2:	f7f8 fa77 	bl	80003e4 <__aeabi_ui2d>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007efc:	3c01      	subs	r4, #1
 8007efe:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f00:	e76f      	b.n	8007de2 <_dtoa_r+0x112>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e7b2      	b.n	8007e6c <_dtoa_r+0x19c>
 8007f06:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f08:	e7b1      	b.n	8007e6e <_dtoa_r+0x19e>
 8007f0a:	9b06      	ldr	r3, [sp, #24]
 8007f0c:	eba3 030a 	sub.w	r3, r3, sl
 8007f10:	9306      	str	r3, [sp, #24]
 8007f12:	f1ca 0300 	rsb	r3, sl, #0
 8007f16:	930a      	str	r3, [sp, #40]	; 0x28
 8007f18:	2300      	movs	r3, #0
 8007f1a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f1c:	e7be      	b.n	8007e9c <_dtoa_r+0x1cc>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dc58      	bgt.n	8007fda <_dtoa_r+0x30a>
 8007f28:	f04f 0901 	mov.w	r9, #1
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f32:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007f36:	2200      	movs	r2, #0
 8007f38:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007f3a:	6042      	str	r2, [r0, #4]
 8007f3c:	2204      	movs	r2, #4
 8007f3e:	f102 0614 	add.w	r6, r2, #20
 8007f42:	429e      	cmp	r6, r3
 8007f44:	6841      	ldr	r1, [r0, #4]
 8007f46:	d94e      	bls.n	8007fe6 <_dtoa_r+0x316>
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f000 fdc3 	bl	8008ad4 <_Balloc>
 8007f4e:	9003      	str	r0, [sp, #12]
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d14c      	bne.n	8007fee <_dtoa_r+0x31e>
 8007f54:	4602      	mov	r2, r0
 8007f56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f5a:	4b17      	ldr	r3, [pc, #92]	; (8007fb8 <_dtoa_r+0x2e8>)
 8007f5c:	e6cc      	b.n	8007cf8 <_dtoa_r+0x28>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e7de      	b.n	8007f20 <_dtoa_r+0x250>
 8007f62:	2300      	movs	r3, #0
 8007f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f68:	eb0a 0903 	add.w	r9, sl, r3
 8007f6c:	f109 0301 	add.w	r3, r9, #1
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	9308      	str	r3, [sp, #32]
 8007f74:	bfb8      	it	lt
 8007f76:	2301      	movlt	r3, #1
 8007f78:	e7dd      	b.n	8007f36 <_dtoa_r+0x266>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e7f2      	b.n	8007f64 <_dtoa_r+0x294>
 8007f7e:	bf00      	nop
 8007f80:	636f4361 	.word	0x636f4361
 8007f84:	3fd287a7 	.word	0x3fd287a7
 8007f88:	8b60c8b3 	.word	0x8b60c8b3
 8007f8c:	3fc68a28 	.word	0x3fc68a28
 8007f90:	509f79fb 	.word	0x509f79fb
 8007f94:	3fd34413 	.word	0x3fd34413
 8007f98:	0800a619 	.word	0x0800a619
 8007f9c:	0800a630 	.word	0x0800a630
 8007fa0:	7ff00000 	.word	0x7ff00000
 8007fa4:	0800a615 	.word	0x0800a615
 8007fa8:	0800a60c 	.word	0x0800a60c
 8007fac:	0800a5e9 	.word	0x0800a5e9
 8007fb0:	3ff80000 	.word	0x3ff80000
 8007fb4:	0800a780 	.word	0x0800a780
 8007fb8:	0800a68b 	.word	0x0800a68b
 8007fbc:	2401      	movs	r4, #1
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007fc2:	9322      	str	r3, [sp, #136]	; 0x88
 8007fc4:	f04f 39ff 	mov.w	r9, #4294967295
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2312      	movs	r3, #18
 8007fcc:	f8cd 9020 	str.w	r9, [sp, #32]
 8007fd0:	9223      	str	r2, [sp, #140]	; 0x8c
 8007fd2:	e7b0      	b.n	8007f36 <_dtoa_r+0x266>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fd8:	e7f4      	b.n	8007fc4 <_dtoa_r+0x2f4>
 8007fda:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007fde:	464b      	mov	r3, r9
 8007fe0:	f8cd 9020 	str.w	r9, [sp, #32]
 8007fe4:	e7a7      	b.n	8007f36 <_dtoa_r+0x266>
 8007fe6:	3101      	adds	r1, #1
 8007fe8:	6041      	str	r1, [r0, #4]
 8007fea:	0052      	lsls	r2, r2, #1
 8007fec:	e7a7      	b.n	8007f3e <_dtoa_r+0x26e>
 8007fee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ff0:	9a03      	ldr	r2, [sp, #12]
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	9b08      	ldr	r3, [sp, #32]
 8007ff6:	2b0e      	cmp	r3, #14
 8007ff8:	f200 80a8 	bhi.w	800814c <_dtoa_r+0x47c>
 8007ffc:	2c00      	cmp	r4, #0
 8007ffe:	f000 80a5 	beq.w	800814c <_dtoa_r+0x47c>
 8008002:	f1ba 0f00 	cmp.w	sl, #0
 8008006:	dd34      	ble.n	8008072 <_dtoa_r+0x3a2>
 8008008:	4a9a      	ldr	r2, [pc, #616]	; (8008274 <_dtoa_r+0x5a4>)
 800800a:	f00a 030f 	and.w	r3, sl, #15
 800800e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008012:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800801a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800801e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008022:	d016      	beq.n	8008052 <_dtoa_r+0x382>
 8008024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008028:	4b93      	ldr	r3, [pc, #588]	; (8008278 <_dtoa_r+0x5a8>)
 800802a:	2703      	movs	r7, #3
 800802c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008030:	f7f8 fb7c 	bl	800072c <__aeabi_ddiv>
 8008034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008038:	f004 040f 	and.w	r4, r4, #15
 800803c:	4e8e      	ldr	r6, [pc, #568]	; (8008278 <_dtoa_r+0x5a8>)
 800803e:	b954      	cbnz	r4, 8008056 <_dtoa_r+0x386>
 8008040:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008048:	f7f8 fb70 	bl	800072c <__aeabi_ddiv>
 800804c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008050:	e029      	b.n	80080a6 <_dtoa_r+0x3d6>
 8008052:	2702      	movs	r7, #2
 8008054:	e7f2      	b.n	800803c <_dtoa_r+0x36c>
 8008056:	07e1      	lsls	r1, r4, #31
 8008058:	d508      	bpl.n	800806c <_dtoa_r+0x39c>
 800805a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800805e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008062:	f7f8 fa39 	bl	80004d8 <__aeabi_dmul>
 8008066:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800806a:	3701      	adds	r7, #1
 800806c:	1064      	asrs	r4, r4, #1
 800806e:	3608      	adds	r6, #8
 8008070:	e7e5      	b.n	800803e <_dtoa_r+0x36e>
 8008072:	f000 80a5 	beq.w	80081c0 <_dtoa_r+0x4f0>
 8008076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800807a:	f1ca 0400 	rsb	r4, sl, #0
 800807e:	4b7d      	ldr	r3, [pc, #500]	; (8008274 <_dtoa_r+0x5a4>)
 8008080:	f004 020f 	and.w	r2, r4, #15
 8008084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	f7f8 fa24 	bl	80004d8 <__aeabi_dmul>
 8008090:	2702      	movs	r7, #2
 8008092:	2300      	movs	r3, #0
 8008094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008098:	4e77      	ldr	r6, [pc, #476]	; (8008278 <_dtoa_r+0x5a8>)
 800809a:	1124      	asrs	r4, r4, #4
 800809c:	2c00      	cmp	r4, #0
 800809e:	f040 8084 	bne.w	80081aa <_dtoa_r+0x4da>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1d2      	bne.n	800804c <_dtoa_r+0x37c>
 80080a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 808b 	beq.w	80081c4 <_dtoa_r+0x4f4>
 80080ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80080b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80080b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080ba:	2200      	movs	r2, #0
 80080bc:	4b6f      	ldr	r3, [pc, #444]	; (800827c <_dtoa_r+0x5ac>)
 80080be:	f7f8 fc7d 	bl	80009bc <__aeabi_dcmplt>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d07e      	beq.n	80081c4 <_dtoa_r+0x4f4>
 80080c6:	9b08      	ldr	r3, [sp, #32]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d07b      	beq.n	80081c4 <_dtoa_r+0x4f4>
 80080cc:	f1b9 0f00 	cmp.w	r9, #0
 80080d0:	dd38      	ble.n	8008144 <_dtoa_r+0x474>
 80080d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080d6:	2200      	movs	r2, #0
 80080d8:	4b69      	ldr	r3, [pc, #420]	; (8008280 <_dtoa_r+0x5b0>)
 80080da:	f7f8 f9fd 	bl	80004d8 <__aeabi_dmul>
 80080de:	464c      	mov	r4, r9
 80080e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80080e8:	3701      	adds	r7, #1
 80080ea:	4638      	mov	r0, r7
 80080ec:	f7f8 f98a 	bl	8000404 <__aeabi_i2d>
 80080f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080f4:	f7f8 f9f0 	bl	80004d8 <__aeabi_dmul>
 80080f8:	2200      	movs	r2, #0
 80080fa:	4b62      	ldr	r3, [pc, #392]	; (8008284 <_dtoa_r+0x5b4>)
 80080fc:	f7f8 f836 	bl	800016c <__adddf3>
 8008100:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008104:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008108:	9611      	str	r6, [sp, #68]	; 0x44
 800810a:	2c00      	cmp	r4, #0
 800810c:	d15d      	bne.n	80081ca <_dtoa_r+0x4fa>
 800810e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008112:	2200      	movs	r2, #0
 8008114:	4b5c      	ldr	r3, [pc, #368]	; (8008288 <_dtoa_r+0x5b8>)
 8008116:	f7f8 f827 	bl	8000168 <__aeabi_dsub>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008122:	4633      	mov	r3, r6
 8008124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008126:	f7f8 fc67 	bl	80009f8 <__aeabi_dcmpgt>
 800812a:	2800      	cmp	r0, #0
 800812c:	f040 829c 	bne.w	8008668 <_dtoa_r+0x998>
 8008130:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008136:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800813a:	f7f8 fc3f 	bl	80009bc <__aeabi_dcmplt>
 800813e:	2800      	cmp	r0, #0
 8008140:	f040 8290 	bne.w	8008664 <_dtoa_r+0x994>
 8008144:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008148:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800814c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800814e:	2b00      	cmp	r3, #0
 8008150:	f2c0 8152 	blt.w	80083f8 <_dtoa_r+0x728>
 8008154:	f1ba 0f0e 	cmp.w	sl, #14
 8008158:	f300 814e 	bgt.w	80083f8 <_dtoa_r+0x728>
 800815c:	4b45      	ldr	r3, [pc, #276]	; (8008274 <_dtoa_r+0x5a4>)
 800815e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008162:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008166:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800816a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800816c:	2b00      	cmp	r3, #0
 800816e:	f280 80db 	bge.w	8008328 <_dtoa_r+0x658>
 8008172:	9b08      	ldr	r3, [sp, #32]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f300 80d7 	bgt.w	8008328 <_dtoa_r+0x658>
 800817a:	f040 8272 	bne.w	8008662 <_dtoa_r+0x992>
 800817e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008182:	2200      	movs	r2, #0
 8008184:	4b40      	ldr	r3, [pc, #256]	; (8008288 <_dtoa_r+0x5b8>)
 8008186:	f7f8 f9a7 	bl	80004d8 <__aeabi_dmul>
 800818a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800818e:	f7f8 fc29 	bl	80009e4 <__aeabi_dcmpge>
 8008192:	9c08      	ldr	r4, [sp, #32]
 8008194:	4626      	mov	r6, r4
 8008196:	2800      	cmp	r0, #0
 8008198:	f040 8248 	bne.w	800862c <_dtoa_r+0x95c>
 800819c:	2331      	movs	r3, #49	; 0x31
 800819e:	9f03      	ldr	r7, [sp, #12]
 80081a0:	f10a 0a01 	add.w	sl, sl, #1
 80081a4:	f807 3b01 	strb.w	r3, [r7], #1
 80081a8:	e244      	b.n	8008634 <_dtoa_r+0x964>
 80081aa:	07e2      	lsls	r2, r4, #31
 80081ac:	d505      	bpl.n	80081ba <_dtoa_r+0x4ea>
 80081ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081b2:	f7f8 f991 	bl	80004d8 <__aeabi_dmul>
 80081b6:	2301      	movs	r3, #1
 80081b8:	3701      	adds	r7, #1
 80081ba:	1064      	asrs	r4, r4, #1
 80081bc:	3608      	adds	r6, #8
 80081be:	e76d      	b.n	800809c <_dtoa_r+0x3cc>
 80081c0:	2702      	movs	r7, #2
 80081c2:	e770      	b.n	80080a6 <_dtoa_r+0x3d6>
 80081c4:	46d0      	mov	r8, sl
 80081c6:	9c08      	ldr	r4, [sp, #32]
 80081c8:	e78f      	b.n	80080ea <_dtoa_r+0x41a>
 80081ca:	9903      	ldr	r1, [sp, #12]
 80081cc:	4b29      	ldr	r3, [pc, #164]	; (8008274 <_dtoa_r+0x5a4>)
 80081ce:	4421      	add	r1, r4
 80081d0:	9112      	str	r1, [sp, #72]	; 0x48
 80081d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80081dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081e0:	2900      	cmp	r1, #0
 80081e2:	d055      	beq.n	8008290 <_dtoa_r+0x5c0>
 80081e4:	2000      	movs	r0, #0
 80081e6:	4929      	ldr	r1, [pc, #164]	; (800828c <_dtoa_r+0x5bc>)
 80081e8:	f7f8 faa0 	bl	800072c <__aeabi_ddiv>
 80081ec:	463b      	mov	r3, r7
 80081ee:	4632      	mov	r2, r6
 80081f0:	f7f7 ffba 	bl	8000168 <__aeabi_dsub>
 80081f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081f8:	9f03      	ldr	r7, [sp, #12]
 80081fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081fe:	f7f8 fc1b 	bl	8000a38 <__aeabi_d2iz>
 8008202:	4604      	mov	r4, r0
 8008204:	f7f8 f8fe 	bl	8000404 <__aeabi_i2d>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008210:	f7f7 ffaa 	bl	8000168 <__aeabi_dsub>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	3430      	adds	r4, #48	; 0x30
 800821a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800821e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008222:	f807 4b01 	strb.w	r4, [r7], #1
 8008226:	f7f8 fbc9 	bl	80009bc <__aeabi_dcmplt>
 800822a:	2800      	cmp	r0, #0
 800822c:	d174      	bne.n	8008318 <_dtoa_r+0x648>
 800822e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008232:	2000      	movs	r0, #0
 8008234:	4911      	ldr	r1, [pc, #68]	; (800827c <_dtoa_r+0x5ac>)
 8008236:	f7f7 ff97 	bl	8000168 <__aeabi_dsub>
 800823a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800823e:	f7f8 fbbd 	bl	80009bc <__aeabi_dcmplt>
 8008242:	2800      	cmp	r0, #0
 8008244:	f040 80b7 	bne.w	80083b6 <_dtoa_r+0x6e6>
 8008248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800824a:	429f      	cmp	r7, r3
 800824c:	f43f af7a 	beq.w	8008144 <_dtoa_r+0x474>
 8008250:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008254:	2200      	movs	r2, #0
 8008256:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <_dtoa_r+0x5b0>)
 8008258:	f7f8 f93e 	bl	80004d8 <__aeabi_dmul>
 800825c:	2200      	movs	r2, #0
 800825e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008266:	4b06      	ldr	r3, [pc, #24]	; (8008280 <_dtoa_r+0x5b0>)
 8008268:	f7f8 f936 	bl	80004d8 <__aeabi_dmul>
 800826c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008270:	e7c3      	b.n	80081fa <_dtoa_r+0x52a>
 8008272:	bf00      	nop
 8008274:	0800a780 	.word	0x0800a780
 8008278:	0800a758 	.word	0x0800a758
 800827c:	3ff00000 	.word	0x3ff00000
 8008280:	40240000 	.word	0x40240000
 8008284:	401c0000 	.word	0x401c0000
 8008288:	40140000 	.word	0x40140000
 800828c:	3fe00000 	.word	0x3fe00000
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f7f8 f920 	bl	80004d8 <__aeabi_dmul>
 8008298:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800829a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800829e:	9c03      	ldr	r4, [sp, #12]
 80082a0:	9314      	str	r3, [sp, #80]	; 0x50
 80082a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082a6:	f7f8 fbc7 	bl	8000a38 <__aeabi_d2iz>
 80082aa:	9015      	str	r0, [sp, #84]	; 0x54
 80082ac:	f7f8 f8aa 	bl	8000404 <__aeabi_i2d>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082b8:	f7f7 ff56 	bl	8000168 <__aeabi_dsub>
 80082bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082be:	4606      	mov	r6, r0
 80082c0:	3330      	adds	r3, #48	; 0x30
 80082c2:	f804 3b01 	strb.w	r3, [r4], #1
 80082c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082c8:	460f      	mov	r7, r1
 80082ca:	429c      	cmp	r4, r3
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	d124      	bne.n	800831c <_dtoa_r+0x64c>
 80082d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082d6:	4bb0      	ldr	r3, [pc, #704]	; (8008598 <_dtoa_r+0x8c8>)
 80082d8:	f7f7 ff48 	bl	800016c <__adddf3>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4630      	mov	r0, r6
 80082e2:	4639      	mov	r1, r7
 80082e4:	f7f8 fb88 	bl	80009f8 <__aeabi_dcmpgt>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d163      	bne.n	80083b4 <_dtoa_r+0x6e4>
 80082ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082f0:	2000      	movs	r0, #0
 80082f2:	49a9      	ldr	r1, [pc, #676]	; (8008598 <_dtoa_r+0x8c8>)
 80082f4:	f7f7 ff38 	bl	8000168 <__aeabi_dsub>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4630      	mov	r0, r6
 80082fe:	4639      	mov	r1, r7
 8008300:	f7f8 fb5c 	bl	80009bc <__aeabi_dcmplt>
 8008304:	2800      	cmp	r0, #0
 8008306:	f43f af1d 	beq.w	8008144 <_dtoa_r+0x474>
 800830a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800830c:	1e7b      	subs	r3, r7, #1
 800830e:	9314      	str	r3, [sp, #80]	; 0x50
 8008310:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008314:	2b30      	cmp	r3, #48	; 0x30
 8008316:	d0f8      	beq.n	800830a <_dtoa_r+0x63a>
 8008318:	46c2      	mov	sl, r8
 800831a:	e03b      	b.n	8008394 <_dtoa_r+0x6c4>
 800831c:	4b9f      	ldr	r3, [pc, #636]	; (800859c <_dtoa_r+0x8cc>)
 800831e:	f7f8 f8db 	bl	80004d8 <__aeabi_dmul>
 8008322:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008326:	e7bc      	b.n	80082a2 <_dtoa_r+0x5d2>
 8008328:	9f03      	ldr	r7, [sp, #12]
 800832a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800832e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f8 f9f9 	bl	800072c <__aeabi_ddiv>
 800833a:	f7f8 fb7d 	bl	8000a38 <__aeabi_d2iz>
 800833e:	4604      	mov	r4, r0
 8008340:	f7f8 f860 	bl	8000404 <__aeabi_i2d>
 8008344:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008348:	f7f8 f8c6 	bl	80004d8 <__aeabi_dmul>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4640      	mov	r0, r8
 8008352:	4649      	mov	r1, r9
 8008354:	f7f7 ff08 	bl	8000168 <__aeabi_dsub>
 8008358:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800835c:	f807 6b01 	strb.w	r6, [r7], #1
 8008360:	9e03      	ldr	r6, [sp, #12]
 8008362:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008366:	1bbe      	subs	r6, r7, r6
 8008368:	45b4      	cmp	ip, r6
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	d136      	bne.n	80083de <_dtoa_r+0x70e>
 8008370:	f7f7 fefc 	bl	800016c <__adddf3>
 8008374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008378:	4680      	mov	r8, r0
 800837a:	4689      	mov	r9, r1
 800837c:	f7f8 fb3c 	bl	80009f8 <__aeabi_dcmpgt>
 8008380:	bb58      	cbnz	r0, 80083da <_dtoa_r+0x70a>
 8008382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008386:	4640      	mov	r0, r8
 8008388:	4649      	mov	r1, r9
 800838a:	f7f8 fb0d 	bl	80009a8 <__aeabi_dcmpeq>
 800838e:	b108      	cbz	r0, 8008394 <_dtoa_r+0x6c4>
 8008390:	07e1      	lsls	r1, r4, #31
 8008392:	d422      	bmi.n	80083da <_dtoa_r+0x70a>
 8008394:	4628      	mov	r0, r5
 8008396:	4659      	mov	r1, fp
 8008398:	f000 fbdc 	bl	8008b54 <_Bfree>
 800839c:	2300      	movs	r3, #0
 800839e:	703b      	strb	r3, [r7, #0]
 80083a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80083a2:	f10a 0001 	add.w	r0, sl, #1
 80083a6:	6018      	str	r0, [r3, #0]
 80083a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f43f acde 	beq.w	8007d6c <_dtoa_r+0x9c>
 80083b0:	601f      	str	r7, [r3, #0]
 80083b2:	e4db      	b.n	8007d6c <_dtoa_r+0x9c>
 80083b4:	4627      	mov	r7, r4
 80083b6:	463b      	mov	r3, r7
 80083b8:	461f      	mov	r7, r3
 80083ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083be:	2a39      	cmp	r2, #57	; 0x39
 80083c0:	d107      	bne.n	80083d2 <_dtoa_r+0x702>
 80083c2:	9a03      	ldr	r2, [sp, #12]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d1f7      	bne.n	80083b8 <_dtoa_r+0x6e8>
 80083c8:	2230      	movs	r2, #48	; 0x30
 80083ca:	9903      	ldr	r1, [sp, #12]
 80083cc:	f108 0801 	add.w	r8, r8, #1
 80083d0:	700a      	strb	r2, [r1, #0]
 80083d2:	781a      	ldrb	r2, [r3, #0]
 80083d4:	3201      	adds	r2, #1
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	e79e      	b.n	8008318 <_dtoa_r+0x648>
 80083da:	46d0      	mov	r8, sl
 80083dc:	e7eb      	b.n	80083b6 <_dtoa_r+0x6e6>
 80083de:	2200      	movs	r2, #0
 80083e0:	4b6e      	ldr	r3, [pc, #440]	; (800859c <_dtoa_r+0x8cc>)
 80083e2:	f7f8 f879 	bl	80004d8 <__aeabi_dmul>
 80083e6:	2200      	movs	r2, #0
 80083e8:	2300      	movs	r3, #0
 80083ea:	4680      	mov	r8, r0
 80083ec:	4689      	mov	r9, r1
 80083ee:	f7f8 fadb 	bl	80009a8 <__aeabi_dcmpeq>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d09b      	beq.n	800832e <_dtoa_r+0x65e>
 80083f6:	e7cd      	b.n	8008394 <_dtoa_r+0x6c4>
 80083f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083fa:	2a00      	cmp	r2, #0
 80083fc:	f000 80d0 	beq.w	80085a0 <_dtoa_r+0x8d0>
 8008400:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008402:	2a01      	cmp	r2, #1
 8008404:	f300 80ae 	bgt.w	8008564 <_dtoa_r+0x894>
 8008408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800840a:	2a00      	cmp	r2, #0
 800840c:	f000 80a6 	beq.w	800855c <_dtoa_r+0x88c>
 8008410:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008414:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008416:	9f06      	ldr	r7, [sp, #24]
 8008418:	9a06      	ldr	r2, [sp, #24]
 800841a:	2101      	movs	r1, #1
 800841c:	441a      	add	r2, r3
 800841e:	9206      	str	r2, [sp, #24]
 8008420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008422:	4628      	mov	r0, r5
 8008424:	441a      	add	r2, r3
 8008426:	9209      	str	r2, [sp, #36]	; 0x24
 8008428:	f000 fc4a 	bl	8008cc0 <__i2b>
 800842c:	4606      	mov	r6, r0
 800842e:	2f00      	cmp	r7, #0
 8008430:	dd0c      	ble.n	800844c <_dtoa_r+0x77c>
 8008432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	dd09      	ble.n	800844c <_dtoa_r+0x77c>
 8008438:	42bb      	cmp	r3, r7
 800843a:	bfa8      	it	ge
 800843c:	463b      	movge	r3, r7
 800843e:	9a06      	ldr	r2, [sp, #24]
 8008440:	1aff      	subs	r7, r7, r3
 8008442:	1ad2      	subs	r2, r2, r3
 8008444:	9206      	str	r2, [sp, #24]
 8008446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	9309      	str	r3, [sp, #36]	; 0x24
 800844c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844e:	b1f3      	cbz	r3, 800848e <_dtoa_r+0x7be>
 8008450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 80a8 	beq.w	80085a8 <_dtoa_r+0x8d8>
 8008458:	2c00      	cmp	r4, #0
 800845a:	dd10      	ble.n	800847e <_dtoa_r+0x7ae>
 800845c:	4631      	mov	r1, r6
 800845e:	4622      	mov	r2, r4
 8008460:	4628      	mov	r0, r5
 8008462:	f000 fceb 	bl	8008e3c <__pow5mult>
 8008466:	465a      	mov	r2, fp
 8008468:	4601      	mov	r1, r0
 800846a:	4606      	mov	r6, r0
 800846c:	4628      	mov	r0, r5
 800846e:	f000 fc3d 	bl	8008cec <__multiply>
 8008472:	4680      	mov	r8, r0
 8008474:	4659      	mov	r1, fp
 8008476:	4628      	mov	r0, r5
 8008478:	f000 fb6c 	bl	8008b54 <_Bfree>
 800847c:	46c3      	mov	fp, r8
 800847e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008480:	1b1a      	subs	r2, r3, r4
 8008482:	d004      	beq.n	800848e <_dtoa_r+0x7be>
 8008484:	4659      	mov	r1, fp
 8008486:	4628      	mov	r0, r5
 8008488:	f000 fcd8 	bl	8008e3c <__pow5mult>
 800848c:	4683      	mov	fp, r0
 800848e:	2101      	movs	r1, #1
 8008490:	4628      	mov	r0, r5
 8008492:	f000 fc15 	bl	8008cc0 <__i2b>
 8008496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008498:	4604      	mov	r4, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	f340 8086 	ble.w	80085ac <_dtoa_r+0x8dc>
 80084a0:	461a      	mov	r2, r3
 80084a2:	4601      	mov	r1, r0
 80084a4:	4628      	mov	r0, r5
 80084a6:	f000 fcc9 	bl	8008e3c <__pow5mult>
 80084aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084ac:	4604      	mov	r4, r0
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	dd7f      	ble.n	80085b2 <_dtoa_r+0x8e2>
 80084b2:	f04f 0800 	mov.w	r8, #0
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084bc:	6918      	ldr	r0, [r3, #16]
 80084be:	f000 fbb1 	bl	8008c24 <__hi0bits>
 80084c2:	f1c0 0020 	rsb	r0, r0, #32
 80084c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c8:	4418      	add	r0, r3
 80084ca:	f010 001f 	ands.w	r0, r0, #31
 80084ce:	f000 8092 	beq.w	80085f6 <_dtoa_r+0x926>
 80084d2:	f1c0 0320 	rsb	r3, r0, #32
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	f340 808a 	ble.w	80085f0 <_dtoa_r+0x920>
 80084dc:	f1c0 001c 	rsb	r0, r0, #28
 80084e0:	9b06      	ldr	r3, [sp, #24]
 80084e2:	4407      	add	r7, r0
 80084e4:	4403      	add	r3, r0
 80084e6:	9306      	str	r3, [sp, #24]
 80084e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ea:	4403      	add	r3, r0
 80084ec:	9309      	str	r3, [sp, #36]	; 0x24
 80084ee:	9b06      	ldr	r3, [sp, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	dd05      	ble.n	8008500 <_dtoa_r+0x830>
 80084f4:	4659      	mov	r1, fp
 80084f6:	461a      	mov	r2, r3
 80084f8:	4628      	mov	r0, r5
 80084fa:	f000 fcf9 	bl	8008ef0 <__lshift>
 80084fe:	4683      	mov	fp, r0
 8008500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008502:	2b00      	cmp	r3, #0
 8008504:	dd05      	ble.n	8008512 <_dtoa_r+0x842>
 8008506:	4621      	mov	r1, r4
 8008508:	461a      	mov	r2, r3
 800850a:	4628      	mov	r0, r5
 800850c:	f000 fcf0 	bl	8008ef0 <__lshift>
 8008510:	4604      	mov	r4, r0
 8008512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d070      	beq.n	80085fa <_dtoa_r+0x92a>
 8008518:	4621      	mov	r1, r4
 800851a:	4658      	mov	r0, fp
 800851c:	f000 fd58 	bl	8008fd0 <__mcmp>
 8008520:	2800      	cmp	r0, #0
 8008522:	da6a      	bge.n	80085fa <_dtoa_r+0x92a>
 8008524:	2300      	movs	r3, #0
 8008526:	4659      	mov	r1, fp
 8008528:	220a      	movs	r2, #10
 800852a:	4628      	mov	r0, r5
 800852c:	f000 fb34 	bl	8008b98 <__multadd>
 8008530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008532:	4683      	mov	fp, r0
 8008534:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 8194 	beq.w	8008866 <_dtoa_r+0xb96>
 800853e:	4631      	mov	r1, r6
 8008540:	2300      	movs	r3, #0
 8008542:	220a      	movs	r2, #10
 8008544:	4628      	mov	r0, r5
 8008546:	f000 fb27 	bl	8008b98 <__multadd>
 800854a:	f1b9 0f00 	cmp.w	r9, #0
 800854e:	4606      	mov	r6, r0
 8008550:	f300 8093 	bgt.w	800867a <_dtoa_r+0x9aa>
 8008554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008556:	2b02      	cmp	r3, #2
 8008558:	dc57      	bgt.n	800860a <_dtoa_r+0x93a>
 800855a:	e08e      	b.n	800867a <_dtoa_r+0x9aa>
 800855c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800855e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008562:	e757      	b.n	8008414 <_dtoa_r+0x744>
 8008564:	9b08      	ldr	r3, [sp, #32]
 8008566:	1e5c      	subs	r4, r3, #1
 8008568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800856a:	42a3      	cmp	r3, r4
 800856c:	bfb7      	itett	lt
 800856e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008570:	1b1c      	subge	r4, r3, r4
 8008572:	1ae2      	sublt	r2, r4, r3
 8008574:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008576:	bfbe      	ittt	lt
 8008578:	940a      	strlt	r4, [sp, #40]	; 0x28
 800857a:	189b      	addlt	r3, r3, r2
 800857c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800857e:	9b08      	ldr	r3, [sp, #32]
 8008580:	bfb8      	it	lt
 8008582:	2400      	movlt	r4, #0
 8008584:	2b00      	cmp	r3, #0
 8008586:	bfbb      	ittet	lt
 8008588:	9b06      	ldrlt	r3, [sp, #24]
 800858a:	9a08      	ldrlt	r2, [sp, #32]
 800858c:	9f06      	ldrge	r7, [sp, #24]
 800858e:	1a9f      	sublt	r7, r3, r2
 8008590:	bfac      	ite	ge
 8008592:	9b08      	ldrge	r3, [sp, #32]
 8008594:	2300      	movlt	r3, #0
 8008596:	e73f      	b.n	8008418 <_dtoa_r+0x748>
 8008598:	3fe00000 	.word	0x3fe00000
 800859c:	40240000 	.word	0x40240000
 80085a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085a2:	9f06      	ldr	r7, [sp, #24]
 80085a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80085a6:	e742      	b.n	800842e <_dtoa_r+0x75e>
 80085a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085aa:	e76b      	b.n	8008484 <_dtoa_r+0x7b4>
 80085ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	dc19      	bgt.n	80085e6 <_dtoa_r+0x916>
 80085b2:	9b04      	ldr	r3, [sp, #16]
 80085b4:	b9bb      	cbnz	r3, 80085e6 <_dtoa_r+0x916>
 80085b6:	9b05      	ldr	r3, [sp, #20]
 80085b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085bc:	b99b      	cbnz	r3, 80085e6 <_dtoa_r+0x916>
 80085be:	9b05      	ldr	r3, [sp, #20]
 80085c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085c4:	0d1b      	lsrs	r3, r3, #20
 80085c6:	051b      	lsls	r3, r3, #20
 80085c8:	b183      	cbz	r3, 80085ec <_dtoa_r+0x91c>
 80085ca:	f04f 0801 	mov.w	r8, #1
 80085ce:	9b06      	ldr	r3, [sp, #24]
 80085d0:	3301      	adds	r3, #1
 80085d2:	9306      	str	r3, [sp, #24]
 80085d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d6:	3301      	adds	r3, #1
 80085d8:	9309      	str	r3, [sp, #36]	; 0x24
 80085da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f47f af6a 	bne.w	80084b6 <_dtoa_r+0x7e6>
 80085e2:	2001      	movs	r0, #1
 80085e4:	e76f      	b.n	80084c6 <_dtoa_r+0x7f6>
 80085e6:	f04f 0800 	mov.w	r8, #0
 80085ea:	e7f6      	b.n	80085da <_dtoa_r+0x90a>
 80085ec:	4698      	mov	r8, r3
 80085ee:	e7f4      	b.n	80085da <_dtoa_r+0x90a>
 80085f0:	f43f af7d 	beq.w	80084ee <_dtoa_r+0x81e>
 80085f4:	4618      	mov	r0, r3
 80085f6:	301c      	adds	r0, #28
 80085f8:	e772      	b.n	80084e0 <_dtoa_r+0x810>
 80085fa:	9b08      	ldr	r3, [sp, #32]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dc36      	bgt.n	800866e <_dtoa_r+0x99e>
 8008600:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008602:	2b02      	cmp	r3, #2
 8008604:	dd33      	ble.n	800866e <_dtoa_r+0x99e>
 8008606:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800860a:	f1b9 0f00 	cmp.w	r9, #0
 800860e:	d10d      	bne.n	800862c <_dtoa_r+0x95c>
 8008610:	4621      	mov	r1, r4
 8008612:	464b      	mov	r3, r9
 8008614:	2205      	movs	r2, #5
 8008616:	4628      	mov	r0, r5
 8008618:	f000 fabe 	bl	8008b98 <__multadd>
 800861c:	4601      	mov	r1, r0
 800861e:	4604      	mov	r4, r0
 8008620:	4658      	mov	r0, fp
 8008622:	f000 fcd5 	bl	8008fd0 <__mcmp>
 8008626:	2800      	cmp	r0, #0
 8008628:	f73f adb8 	bgt.w	800819c <_dtoa_r+0x4cc>
 800862c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800862e:	9f03      	ldr	r7, [sp, #12]
 8008630:	ea6f 0a03 	mvn.w	sl, r3
 8008634:	f04f 0800 	mov.w	r8, #0
 8008638:	4621      	mov	r1, r4
 800863a:	4628      	mov	r0, r5
 800863c:	f000 fa8a 	bl	8008b54 <_Bfree>
 8008640:	2e00      	cmp	r6, #0
 8008642:	f43f aea7 	beq.w	8008394 <_dtoa_r+0x6c4>
 8008646:	f1b8 0f00 	cmp.w	r8, #0
 800864a:	d005      	beq.n	8008658 <_dtoa_r+0x988>
 800864c:	45b0      	cmp	r8, r6
 800864e:	d003      	beq.n	8008658 <_dtoa_r+0x988>
 8008650:	4641      	mov	r1, r8
 8008652:	4628      	mov	r0, r5
 8008654:	f000 fa7e 	bl	8008b54 <_Bfree>
 8008658:	4631      	mov	r1, r6
 800865a:	4628      	mov	r0, r5
 800865c:	f000 fa7a 	bl	8008b54 <_Bfree>
 8008660:	e698      	b.n	8008394 <_dtoa_r+0x6c4>
 8008662:	2400      	movs	r4, #0
 8008664:	4626      	mov	r6, r4
 8008666:	e7e1      	b.n	800862c <_dtoa_r+0x95c>
 8008668:	46c2      	mov	sl, r8
 800866a:	4626      	mov	r6, r4
 800866c:	e596      	b.n	800819c <_dtoa_r+0x4cc>
 800866e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 80fd 	beq.w	8008874 <_dtoa_r+0xba4>
 800867a:	2f00      	cmp	r7, #0
 800867c:	dd05      	ble.n	800868a <_dtoa_r+0x9ba>
 800867e:	4631      	mov	r1, r6
 8008680:	463a      	mov	r2, r7
 8008682:	4628      	mov	r0, r5
 8008684:	f000 fc34 	bl	8008ef0 <__lshift>
 8008688:	4606      	mov	r6, r0
 800868a:	f1b8 0f00 	cmp.w	r8, #0
 800868e:	d05c      	beq.n	800874a <_dtoa_r+0xa7a>
 8008690:	4628      	mov	r0, r5
 8008692:	6871      	ldr	r1, [r6, #4]
 8008694:	f000 fa1e 	bl	8008ad4 <_Balloc>
 8008698:	4607      	mov	r7, r0
 800869a:	b928      	cbnz	r0, 80086a8 <_dtoa_r+0x9d8>
 800869c:	4602      	mov	r2, r0
 800869e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086a2:	4b7f      	ldr	r3, [pc, #508]	; (80088a0 <_dtoa_r+0xbd0>)
 80086a4:	f7ff bb28 	b.w	8007cf8 <_dtoa_r+0x28>
 80086a8:	6932      	ldr	r2, [r6, #16]
 80086aa:	f106 010c 	add.w	r1, r6, #12
 80086ae:	3202      	adds	r2, #2
 80086b0:	0092      	lsls	r2, r2, #2
 80086b2:	300c      	adds	r0, #12
 80086b4:	f7fe fdc2 	bl	800723c <memcpy>
 80086b8:	2201      	movs	r2, #1
 80086ba:	4639      	mov	r1, r7
 80086bc:	4628      	mov	r0, r5
 80086be:	f000 fc17 	bl	8008ef0 <__lshift>
 80086c2:	46b0      	mov	r8, r6
 80086c4:	4606      	mov	r6, r0
 80086c6:	9b03      	ldr	r3, [sp, #12]
 80086c8:	3301      	adds	r3, #1
 80086ca:	9308      	str	r3, [sp, #32]
 80086cc:	9b03      	ldr	r3, [sp, #12]
 80086ce:	444b      	add	r3, r9
 80086d0:	930a      	str	r3, [sp, #40]	; 0x28
 80086d2:	9b04      	ldr	r3, [sp, #16]
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	9309      	str	r3, [sp, #36]	; 0x24
 80086da:	9b08      	ldr	r3, [sp, #32]
 80086dc:	4621      	mov	r1, r4
 80086de:	3b01      	subs	r3, #1
 80086e0:	4658      	mov	r0, fp
 80086e2:	9304      	str	r3, [sp, #16]
 80086e4:	f7ff fa67 	bl	8007bb6 <quorem>
 80086e8:	4603      	mov	r3, r0
 80086ea:	4641      	mov	r1, r8
 80086ec:	3330      	adds	r3, #48	; 0x30
 80086ee:	9006      	str	r0, [sp, #24]
 80086f0:	4658      	mov	r0, fp
 80086f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80086f4:	f000 fc6c 	bl	8008fd0 <__mcmp>
 80086f8:	4632      	mov	r2, r6
 80086fa:	4681      	mov	r9, r0
 80086fc:	4621      	mov	r1, r4
 80086fe:	4628      	mov	r0, r5
 8008700:	f000 fc82 	bl	8009008 <__mdiff>
 8008704:	68c2      	ldr	r2, [r0, #12]
 8008706:	4607      	mov	r7, r0
 8008708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800870a:	bb02      	cbnz	r2, 800874e <_dtoa_r+0xa7e>
 800870c:	4601      	mov	r1, r0
 800870e:	4658      	mov	r0, fp
 8008710:	f000 fc5e 	bl	8008fd0 <__mcmp>
 8008714:	4602      	mov	r2, r0
 8008716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008718:	4639      	mov	r1, r7
 800871a:	4628      	mov	r0, r5
 800871c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008720:	f000 fa18 	bl	8008b54 <_Bfree>
 8008724:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008728:	9f08      	ldr	r7, [sp, #32]
 800872a:	ea43 0102 	orr.w	r1, r3, r2
 800872e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008730:	430b      	orrs	r3, r1
 8008732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008734:	d10d      	bne.n	8008752 <_dtoa_r+0xa82>
 8008736:	2b39      	cmp	r3, #57	; 0x39
 8008738:	d029      	beq.n	800878e <_dtoa_r+0xabe>
 800873a:	f1b9 0f00 	cmp.w	r9, #0
 800873e:	dd01      	ble.n	8008744 <_dtoa_r+0xa74>
 8008740:	9b06      	ldr	r3, [sp, #24]
 8008742:	3331      	adds	r3, #49	; 0x31
 8008744:	9a04      	ldr	r2, [sp, #16]
 8008746:	7013      	strb	r3, [r2, #0]
 8008748:	e776      	b.n	8008638 <_dtoa_r+0x968>
 800874a:	4630      	mov	r0, r6
 800874c:	e7b9      	b.n	80086c2 <_dtoa_r+0x9f2>
 800874e:	2201      	movs	r2, #1
 8008750:	e7e2      	b.n	8008718 <_dtoa_r+0xa48>
 8008752:	f1b9 0f00 	cmp.w	r9, #0
 8008756:	db06      	blt.n	8008766 <_dtoa_r+0xa96>
 8008758:	9922      	ldr	r1, [sp, #136]	; 0x88
 800875a:	ea41 0909 	orr.w	r9, r1, r9
 800875e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008760:	ea59 0101 	orrs.w	r1, r9, r1
 8008764:	d120      	bne.n	80087a8 <_dtoa_r+0xad8>
 8008766:	2a00      	cmp	r2, #0
 8008768:	ddec      	ble.n	8008744 <_dtoa_r+0xa74>
 800876a:	4659      	mov	r1, fp
 800876c:	2201      	movs	r2, #1
 800876e:	4628      	mov	r0, r5
 8008770:	9308      	str	r3, [sp, #32]
 8008772:	f000 fbbd 	bl	8008ef0 <__lshift>
 8008776:	4621      	mov	r1, r4
 8008778:	4683      	mov	fp, r0
 800877a:	f000 fc29 	bl	8008fd0 <__mcmp>
 800877e:	2800      	cmp	r0, #0
 8008780:	9b08      	ldr	r3, [sp, #32]
 8008782:	dc02      	bgt.n	800878a <_dtoa_r+0xaba>
 8008784:	d1de      	bne.n	8008744 <_dtoa_r+0xa74>
 8008786:	07da      	lsls	r2, r3, #31
 8008788:	d5dc      	bpl.n	8008744 <_dtoa_r+0xa74>
 800878a:	2b39      	cmp	r3, #57	; 0x39
 800878c:	d1d8      	bne.n	8008740 <_dtoa_r+0xa70>
 800878e:	2339      	movs	r3, #57	; 0x39
 8008790:	9a04      	ldr	r2, [sp, #16]
 8008792:	7013      	strb	r3, [r2, #0]
 8008794:	463b      	mov	r3, r7
 8008796:	461f      	mov	r7, r3
 8008798:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800879c:	3b01      	subs	r3, #1
 800879e:	2a39      	cmp	r2, #57	; 0x39
 80087a0:	d050      	beq.n	8008844 <_dtoa_r+0xb74>
 80087a2:	3201      	adds	r2, #1
 80087a4:	701a      	strb	r2, [r3, #0]
 80087a6:	e747      	b.n	8008638 <_dtoa_r+0x968>
 80087a8:	2a00      	cmp	r2, #0
 80087aa:	dd03      	ble.n	80087b4 <_dtoa_r+0xae4>
 80087ac:	2b39      	cmp	r3, #57	; 0x39
 80087ae:	d0ee      	beq.n	800878e <_dtoa_r+0xabe>
 80087b0:	3301      	adds	r3, #1
 80087b2:	e7c7      	b.n	8008744 <_dtoa_r+0xa74>
 80087b4:	9a08      	ldr	r2, [sp, #32]
 80087b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087bc:	428a      	cmp	r2, r1
 80087be:	d02a      	beq.n	8008816 <_dtoa_r+0xb46>
 80087c0:	4659      	mov	r1, fp
 80087c2:	2300      	movs	r3, #0
 80087c4:	220a      	movs	r2, #10
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 f9e6 	bl	8008b98 <__multadd>
 80087cc:	45b0      	cmp	r8, r6
 80087ce:	4683      	mov	fp, r0
 80087d0:	f04f 0300 	mov.w	r3, #0
 80087d4:	f04f 020a 	mov.w	r2, #10
 80087d8:	4641      	mov	r1, r8
 80087da:	4628      	mov	r0, r5
 80087dc:	d107      	bne.n	80087ee <_dtoa_r+0xb1e>
 80087de:	f000 f9db 	bl	8008b98 <__multadd>
 80087e2:	4680      	mov	r8, r0
 80087e4:	4606      	mov	r6, r0
 80087e6:	9b08      	ldr	r3, [sp, #32]
 80087e8:	3301      	adds	r3, #1
 80087ea:	9308      	str	r3, [sp, #32]
 80087ec:	e775      	b.n	80086da <_dtoa_r+0xa0a>
 80087ee:	f000 f9d3 	bl	8008b98 <__multadd>
 80087f2:	4631      	mov	r1, r6
 80087f4:	4680      	mov	r8, r0
 80087f6:	2300      	movs	r3, #0
 80087f8:	220a      	movs	r2, #10
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f9cc 	bl	8008b98 <__multadd>
 8008800:	4606      	mov	r6, r0
 8008802:	e7f0      	b.n	80087e6 <_dtoa_r+0xb16>
 8008804:	f1b9 0f00 	cmp.w	r9, #0
 8008808:	bfcc      	ite	gt
 800880a:	464f      	movgt	r7, r9
 800880c:	2701      	movle	r7, #1
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	9a03      	ldr	r2, [sp, #12]
 8008814:	4417      	add	r7, r2
 8008816:	4659      	mov	r1, fp
 8008818:	2201      	movs	r2, #1
 800881a:	4628      	mov	r0, r5
 800881c:	9308      	str	r3, [sp, #32]
 800881e:	f000 fb67 	bl	8008ef0 <__lshift>
 8008822:	4621      	mov	r1, r4
 8008824:	4683      	mov	fp, r0
 8008826:	f000 fbd3 	bl	8008fd0 <__mcmp>
 800882a:	2800      	cmp	r0, #0
 800882c:	dcb2      	bgt.n	8008794 <_dtoa_r+0xac4>
 800882e:	d102      	bne.n	8008836 <_dtoa_r+0xb66>
 8008830:	9b08      	ldr	r3, [sp, #32]
 8008832:	07db      	lsls	r3, r3, #31
 8008834:	d4ae      	bmi.n	8008794 <_dtoa_r+0xac4>
 8008836:	463b      	mov	r3, r7
 8008838:	461f      	mov	r7, r3
 800883a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800883e:	2a30      	cmp	r2, #48	; 0x30
 8008840:	d0fa      	beq.n	8008838 <_dtoa_r+0xb68>
 8008842:	e6f9      	b.n	8008638 <_dtoa_r+0x968>
 8008844:	9a03      	ldr	r2, [sp, #12]
 8008846:	429a      	cmp	r2, r3
 8008848:	d1a5      	bne.n	8008796 <_dtoa_r+0xac6>
 800884a:	2331      	movs	r3, #49	; 0x31
 800884c:	f10a 0a01 	add.w	sl, sl, #1
 8008850:	e779      	b.n	8008746 <_dtoa_r+0xa76>
 8008852:	4b14      	ldr	r3, [pc, #80]	; (80088a4 <_dtoa_r+0xbd4>)
 8008854:	f7ff baa8 	b.w	8007da8 <_dtoa_r+0xd8>
 8008858:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800885a:	2b00      	cmp	r3, #0
 800885c:	f47f aa81 	bne.w	8007d62 <_dtoa_r+0x92>
 8008860:	4b11      	ldr	r3, [pc, #68]	; (80088a8 <_dtoa_r+0xbd8>)
 8008862:	f7ff baa1 	b.w	8007da8 <_dtoa_r+0xd8>
 8008866:	f1b9 0f00 	cmp.w	r9, #0
 800886a:	dc03      	bgt.n	8008874 <_dtoa_r+0xba4>
 800886c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800886e:	2b02      	cmp	r3, #2
 8008870:	f73f aecb 	bgt.w	800860a <_dtoa_r+0x93a>
 8008874:	9f03      	ldr	r7, [sp, #12]
 8008876:	4621      	mov	r1, r4
 8008878:	4658      	mov	r0, fp
 800887a:	f7ff f99c 	bl	8007bb6 <quorem>
 800887e:	9a03      	ldr	r2, [sp, #12]
 8008880:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008884:	f807 3b01 	strb.w	r3, [r7], #1
 8008888:	1aba      	subs	r2, r7, r2
 800888a:	4591      	cmp	r9, r2
 800888c:	ddba      	ble.n	8008804 <_dtoa_r+0xb34>
 800888e:	4659      	mov	r1, fp
 8008890:	2300      	movs	r3, #0
 8008892:	220a      	movs	r2, #10
 8008894:	4628      	mov	r0, r5
 8008896:	f000 f97f 	bl	8008b98 <__multadd>
 800889a:	4683      	mov	fp, r0
 800889c:	e7eb      	b.n	8008876 <_dtoa_r+0xba6>
 800889e:	bf00      	nop
 80088a0:	0800a68b 	.word	0x0800a68b
 80088a4:	0800a5e8 	.word	0x0800a5e8
 80088a8:	0800a60c 	.word	0x0800a60c

080088ac <std>:
 80088ac:	2300      	movs	r3, #0
 80088ae:	b510      	push	{r4, lr}
 80088b0:	4604      	mov	r4, r0
 80088b2:	e9c0 3300 	strd	r3, r3, [r0]
 80088b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ba:	6083      	str	r3, [r0, #8]
 80088bc:	8181      	strh	r1, [r0, #12]
 80088be:	6643      	str	r3, [r0, #100]	; 0x64
 80088c0:	81c2      	strh	r2, [r0, #14]
 80088c2:	6183      	str	r3, [r0, #24]
 80088c4:	4619      	mov	r1, r3
 80088c6:	2208      	movs	r2, #8
 80088c8:	305c      	adds	r0, #92	; 0x5c
 80088ca:	f7fe fcc5 	bl	8007258 <memset>
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <std+0x38>)
 80088d0:	6224      	str	r4, [r4, #32]
 80088d2:	6263      	str	r3, [r4, #36]	; 0x24
 80088d4:	4b04      	ldr	r3, [pc, #16]	; (80088e8 <std+0x3c>)
 80088d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80088d8:	4b04      	ldr	r3, [pc, #16]	; (80088ec <std+0x40>)
 80088da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088dc:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <std+0x44>)
 80088de:	6323      	str	r3, [r4, #48]	; 0x30
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	bf00      	nop
 80088e4:	08009941 	.word	0x08009941
 80088e8:	08009963 	.word	0x08009963
 80088ec:	0800999b 	.word	0x0800999b
 80088f0:	080099bf 	.word	0x080099bf

080088f4 <_cleanup_r>:
 80088f4:	4901      	ldr	r1, [pc, #4]	; (80088fc <_cleanup_r+0x8>)
 80088f6:	f000 b8af 	b.w	8008a58 <_fwalk_reent>
 80088fa:	bf00      	nop
 80088fc:	08009ccd 	.word	0x08009ccd

08008900 <__sfmoreglue>:
 8008900:	2268      	movs	r2, #104	; 0x68
 8008902:	b570      	push	{r4, r5, r6, lr}
 8008904:	1e4d      	subs	r5, r1, #1
 8008906:	4355      	muls	r5, r2
 8008908:	460e      	mov	r6, r1
 800890a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800890e:	f000 fcdf 	bl	80092d0 <_malloc_r>
 8008912:	4604      	mov	r4, r0
 8008914:	b140      	cbz	r0, 8008928 <__sfmoreglue+0x28>
 8008916:	2100      	movs	r1, #0
 8008918:	e9c0 1600 	strd	r1, r6, [r0]
 800891c:	300c      	adds	r0, #12
 800891e:	60a0      	str	r0, [r4, #8]
 8008920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008924:	f7fe fc98 	bl	8007258 <memset>
 8008928:	4620      	mov	r0, r4
 800892a:	bd70      	pop	{r4, r5, r6, pc}

0800892c <__sfp_lock_acquire>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__sfp_lock_acquire+0x8>)
 800892e:	f000 b8b8 	b.w	8008aa2 <__retarget_lock_acquire_recursive>
 8008932:	bf00      	nop
 8008934:	20000377 	.word	0x20000377

08008938 <__sfp_lock_release>:
 8008938:	4801      	ldr	r0, [pc, #4]	; (8008940 <__sfp_lock_release+0x8>)
 800893a:	f000 b8b3 	b.w	8008aa4 <__retarget_lock_release_recursive>
 800893e:	bf00      	nop
 8008940:	20000377 	.word	0x20000377

08008944 <__sinit_lock_acquire>:
 8008944:	4801      	ldr	r0, [pc, #4]	; (800894c <__sinit_lock_acquire+0x8>)
 8008946:	f000 b8ac 	b.w	8008aa2 <__retarget_lock_acquire_recursive>
 800894a:	bf00      	nop
 800894c:	20000378 	.word	0x20000378

08008950 <__sinit_lock_release>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__sinit_lock_release+0x8>)
 8008952:	f000 b8a7 	b.w	8008aa4 <__retarget_lock_release_recursive>
 8008956:	bf00      	nop
 8008958:	20000378 	.word	0x20000378

0800895c <__sinit>:
 800895c:	b510      	push	{r4, lr}
 800895e:	4604      	mov	r4, r0
 8008960:	f7ff fff0 	bl	8008944 <__sinit_lock_acquire>
 8008964:	69a3      	ldr	r3, [r4, #24]
 8008966:	b11b      	cbz	r3, 8008970 <__sinit+0x14>
 8008968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800896c:	f7ff bff0 	b.w	8008950 <__sinit_lock_release>
 8008970:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008974:	6523      	str	r3, [r4, #80]	; 0x50
 8008976:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <__sinit+0x68>)
 8008978:	4a13      	ldr	r2, [pc, #76]	; (80089c8 <__sinit+0x6c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	62a2      	str	r2, [r4, #40]	; 0x28
 800897e:	42a3      	cmp	r3, r4
 8008980:	bf08      	it	eq
 8008982:	2301      	moveq	r3, #1
 8008984:	4620      	mov	r0, r4
 8008986:	bf08      	it	eq
 8008988:	61a3      	streq	r3, [r4, #24]
 800898a:	f000 f81f 	bl	80089cc <__sfp>
 800898e:	6060      	str	r0, [r4, #4]
 8008990:	4620      	mov	r0, r4
 8008992:	f000 f81b 	bl	80089cc <__sfp>
 8008996:	60a0      	str	r0, [r4, #8]
 8008998:	4620      	mov	r0, r4
 800899a:	f000 f817 	bl	80089cc <__sfp>
 800899e:	2200      	movs	r2, #0
 80089a0:	2104      	movs	r1, #4
 80089a2:	60e0      	str	r0, [r4, #12]
 80089a4:	6860      	ldr	r0, [r4, #4]
 80089a6:	f7ff ff81 	bl	80088ac <std>
 80089aa:	2201      	movs	r2, #1
 80089ac:	2109      	movs	r1, #9
 80089ae:	68a0      	ldr	r0, [r4, #8]
 80089b0:	f7ff ff7c 	bl	80088ac <std>
 80089b4:	2202      	movs	r2, #2
 80089b6:	2112      	movs	r1, #18
 80089b8:	68e0      	ldr	r0, [r4, #12]
 80089ba:	f7ff ff77 	bl	80088ac <std>
 80089be:	2301      	movs	r3, #1
 80089c0:	61a3      	str	r3, [r4, #24]
 80089c2:	e7d1      	b.n	8008968 <__sinit+0xc>
 80089c4:	0800a5d4 	.word	0x0800a5d4
 80089c8:	080088f5 	.word	0x080088f5

080089cc <__sfp>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	4607      	mov	r7, r0
 80089d0:	f7ff ffac 	bl	800892c <__sfp_lock_acquire>
 80089d4:	4b1e      	ldr	r3, [pc, #120]	; (8008a50 <__sfp+0x84>)
 80089d6:	681e      	ldr	r6, [r3, #0]
 80089d8:	69b3      	ldr	r3, [r6, #24]
 80089da:	b913      	cbnz	r3, 80089e2 <__sfp+0x16>
 80089dc:	4630      	mov	r0, r6
 80089de:	f7ff ffbd 	bl	800895c <__sinit>
 80089e2:	3648      	adds	r6, #72	; 0x48
 80089e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	d503      	bpl.n	80089f4 <__sfp+0x28>
 80089ec:	6833      	ldr	r3, [r6, #0]
 80089ee:	b30b      	cbz	r3, 8008a34 <__sfp+0x68>
 80089f0:	6836      	ldr	r6, [r6, #0]
 80089f2:	e7f7      	b.n	80089e4 <__sfp+0x18>
 80089f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089f8:	b9d5      	cbnz	r5, 8008a30 <__sfp+0x64>
 80089fa:	4b16      	ldr	r3, [pc, #88]	; (8008a54 <__sfp+0x88>)
 80089fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a00:	60e3      	str	r3, [r4, #12]
 8008a02:	6665      	str	r5, [r4, #100]	; 0x64
 8008a04:	f000 f84c 	bl	8008aa0 <__retarget_lock_init_recursive>
 8008a08:	f7ff ff96 	bl	8008938 <__sfp_lock_release>
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	4629      	mov	r1, r5
 8008a10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a18:	6025      	str	r5, [r4, #0]
 8008a1a:	61a5      	str	r5, [r4, #24]
 8008a1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a20:	f7fe fc1a 	bl	8007258 <memset>
 8008a24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a30:	3468      	adds	r4, #104	; 0x68
 8008a32:	e7d9      	b.n	80089e8 <__sfp+0x1c>
 8008a34:	2104      	movs	r1, #4
 8008a36:	4638      	mov	r0, r7
 8008a38:	f7ff ff62 	bl	8008900 <__sfmoreglue>
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	6030      	str	r0, [r6, #0]
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d1d5      	bne.n	80089f0 <__sfp+0x24>
 8008a44:	f7ff ff78 	bl	8008938 <__sfp_lock_release>
 8008a48:	230c      	movs	r3, #12
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	e7ee      	b.n	8008a2c <__sfp+0x60>
 8008a4e:	bf00      	nop
 8008a50:	0800a5d4 	.word	0x0800a5d4
 8008a54:	ffff0001 	.word	0xffff0001

08008a58 <_fwalk_reent>:
 8008a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	4688      	mov	r8, r1
 8008a60:	2700      	movs	r7, #0
 8008a62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a6a:	f1b9 0901 	subs.w	r9, r9, #1
 8008a6e:	d505      	bpl.n	8008a7c <_fwalk_reent+0x24>
 8008a70:	6824      	ldr	r4, [r4, #0]
 8008a72:	2c00      	cmp	r4, #0
 8008a74:	d1f7      	bne.n	8008a66 <_fwalk_reent+0xe>
 8008a76:	4638      	mov	r0, r7
 8008a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7c:	89ab      	ldrh	r3, [r5, #12]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d907      	bls.n	8008a92 <_fwalk_reent+0x3a>
 8008a82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a86:	3301      	adds	r3, #1
 8008a88:	d003      	beq.n	8008a92 <_fwalk_reent+0x3a>
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	47c0      	blx	r8
 8008a90:	4307      	orrs	r7, r0
 8008a92:	3568      	adds	r5, #104	; 0x68
 8008a94:	e7e9      	b.n	8008a6a <_fwalk_reent+0x12>
	...

08008a98 <_localeconv_r>:
 8008a98:	4800      	ldr	r0, [pc, #0]	; (8008a9c <_localeconv_r+0x4>)
 8008a9a:	4770      	bx	lr
 8008a9c:	20000178 	.word	0x20000178

08008aa0 <__retarget_lock_init_recursive>:
 8008aa0:	4770      	bx	lr

08008aa2 <__retarget_lock_acquire_recursive>:
 8008aa2:	4770      	bx	lr

08008aa4 <__retarget_lock_release_recursive>:
 8008aa4:	4770      	bx	lr
	...

08008aa8 <malloc>:
 8008aa8:	4b02      	ldr	r3, [pc, #8]	; (8008ab4 <malloc+0xc>)
 8008aaa:	4601      	mov	r1, r0
 8008aac:	6818      	ldr	r0, [r3, #0]
 8008aae:	f000 bc0f 	b.w	80092d0 <_malloc_r>
 8008ab2:	bf00      	nop
 8008ab4:	20000024 	.word	0x20000024

08008ab8 <memchr>:
 8008ab8:	4603      	mov	r3, r0
 8008aba:	b510      	push	{r4, lr}
 8008abc:	b2c9      	uxtb	r1, r1
 8008abe:	4402      	add	r2, r0
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	d101      	bne.n	8008aca <memchr+0x12>
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	e003      	b.n	8008ad2 <memchr+0x1a>
 8008aca:	7804      	ldrb	r4, [r0, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	428c      	cmp	r4, r1
 8008ad0:	d1f6      	bne.n	8008ac0 <memchr+0x8>
 8008ad2:	bd10      	pop	{r4, pc}

08008ad4 <_Balloc>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ad8:	4604      	mov	r4, r0
 8008ada:	460d      	mov	r5, r1
 8008adc:	b976      	cbnz	r6, 8008afc <_Balloc+0x28>
 8008ade:	2010      	movs	r0, #16
 8008ae0:	f7ff ffe2 	bl	8008aa8 <malloc>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	6260      	str	r0, [r4, #36]	; 0x24
 8008ae8:	b920      	cbnz	r0, 8008af4 <_Balloc+0x20>
 8008aea:	2166      	movs	r1, #102	; 0x66
 8008aec:	4b17      	ldr	r3, [pc, #92]	; (8008b4c <_Balloc+0x78>)
 8008aee:	4818      	ldr	r0, [pc, #96]	; (8008b50 <_Balloc+0x7c>)
 8008af0:	f001 f83c 	bl	8009b6c <__assert_func>
 8008af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008af8:	6006      	str	r6, [r0, #0]
 8008afa:	60c6      	str	r6, [r0, #12]
 8008afc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008afe:	68f3      	ldr	r3, [r6, #12]
 8008b00:	b183      	cbz	r3, 8008b24 <_Balloc+0x50>
 8008b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b0a:	b9b8      	cbnz	r0, 8008b3c <_Balloc+0x68>
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b12:	1d72      	adds	r2, r6, #5
 8008b14:	4620      	mov	r0, r4
 8008b16:	0092      	lsls	r2, r2, #2
 8008b18:	f000 fb5e 	bl	80091d8 <_calloc_r>
 8008b1c:	b160      	cbz	r0, 8008b38 <_Balloc+0x64>
 8008b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b22:	e00e      	b.n	8008b42 <_Balloc+0x6e>
 8008b24:	2221      	movs	r2, #33	; 0x21
 8008b26:	2104      	movs	r1, #4
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fb55 	bl	80091d8 <_calloc_r>
 8008b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b30:	60f0      	str	r0, [r6, #12]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e4      	bne.n	8008b02 <_Balloc+0x2e>
 8008b38:	2000      	movs	r0, #0
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	6802      	ldr	r2, [r0, #0]
 8008b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b42:	2300      	movs	r3, #0
 8008b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b48:	e7f7      	b.n	8008b3a <_Balloc+0x66>
 8008b4a:	bf00      	nop
 8008b4c:	0800a619 	.word	0x0800a619
 8008b50:	0800a6fc 	.word	0x0800a6fc

08008b54 <_Bfree>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b58:	4605      	mov	r5, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	b976      	cbnz	r6, 8008b7c <_Bfree+0x28>
 8008b5e:	2010      	movs	r0, #16
 8008b60:	f7ff ffa2 	bl	8008aa8 <malloc>
 8008b64:	4602      	mov	r2, r0
 8008b66:	6268      	str	r0, [r5, #36]	; 0x24
 8008b68:	b920      	cbnz	r0, 8008b74 <_Bfree+0x20>
 8008b6a:	218a      	movs	r1, #138	; 0x8a
 8008b6c:	4b08      	ldr	r3, [pc, #32]	; (8008b90 <_Bfree+0x3c>)
 8008b6e:	4809      	ldr	r0, [pc, #36]	; (8008b94 <_Bfree+0x40>)
 8008b70:	f000 fffc 	bl	8009b6c <__assert_func>
 8008b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b78:	6006      	str	r6, [r0, #0]
 8008b7a:	60c6      	str	r6, [r0, #12]
 8008b7c:	b13c      	cbz	r4, 8008b8e <_Bfree+0x3a>
 8008b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b80:	6862      	ldr	r2, [r4, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b88:	6021      	str	r1, [r4, #0]
 8008b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	0800a619 	.word	0x0800a619
 8008b94:	0800a6fc 	.word	0x0800a6fc

08008b98 <__multadd>:
 8008b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	461e      	mov	r6, r3
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	690d      	ldr	r5, [r1, #16]
 8008ba6:	f101 0c14 	add.w	ip, r1, #20
 8008baa:	f8dc 3000 	ldr.w	r3, [ip]
 8008bae:	3001      	adds	r0, #1
 8008bb0:	b299      	uxth	r1, r3
 8008bb2:	fb02 6101 	mla	r1, r2, r1, r6
 8008bb6:	0c1e      	lsrs	r6, r3, #16
 8008bb8:	0c0b      	lsrs	r3, r1, #16
 8008bba:	fb02 3306 	mla	r3, r2, r6, r3
 8008bbe:	b289      	uxth	r1, r1
 8008bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bc4:	4285      	cmp	r5, r0
 8008bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bca:	f84c 1b04 	str.w	r1, [ip], #4
 8008bce:	dcec      	bgt.n	8008baa <__multadd+0x12>
 8008bd0:	b30e      	cbz	r6, 8008c16 <__multadd+0x7e>
 8008bd2:	68a3      	ldr	r3, [r4, #8]
 8008bd4:	42ab      	cmp	r3, r5
 8008bd6:	dc19      	bgt.n	8008c0c <__multadd+0x74>
 8008bd8:	6861      	ldr	r1, [r4, #4]
 8008bda:	4638      	mov	r0, r7
 8008bdc:	3101      	adds	r1, #1
 8008bde:	f7ff ff79 	bl	8008ad4 <_Balloc>
 8008be2:	4680      	mov	r8, r0
 8008be4:	b928      	cbnz	r0, 8008bf2 <__multadd+0x5a>
 8008be6:	4602      	mov	r2, r0
 8008be8:	21b5      	movs	r1, #181	; 0xb5
 8008bea:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <__multadd+0x84>)
 8008bec:	480c      	ldr	r0, [pc, #48]	; (8008c20 <__multadd+0x88>)
 8008bee:	f000 ffbd 	bl	8009b6c <__assert_func>
 8008bf2:	6922      	ldr	r2, [r4, #16]
 8008bf4:	f104 010c 	add.w	r1, r4, #12
 8008bf8:	3202      	adds	r2, #2
 8008bfa:	0092      	lsls	r2, r2, #2
 8008bfc:	300c      	adds	r0, #12
 8008bfe:	f7fe fb1d 	bl	800723c <memcpy>
 8008c02:	4621      	mov	r1, r4
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff ffa5 	bl	8008b54 <_Bfree>
 8008c0a:	4644      	mov	r4, r8
 8008c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c10:	3501      	adds	r5, #1
 8008c12:	615e      	str	r6, [r3, #20]
 8008c14:	6125      	str	r5, [r4, #16]
 8008c16:	4620      	mov	r0, r4
 8008c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c1c:	0800a68b 	.word	0x0800a68b
 8008c20:	0800a6fc 	.word	0x0800a6fc

08008c24 <__hi0bits>:
 8008c24:	0c02      	lsrs	r2, r0, #16
 8008c26:	0412      	lsls	r2, r2, #16
 8008c28:	4603      	mov	r3, r0
 8008c2a:	b9ca      	cbnz	r2, 8008c60 <__hi0bits+0x3c>
 8008c2c:	0403      	lsls	r3, r0, #16
 8008c2e:	2010      	movs	r0, #16
 8008c30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c34:	bf04      	itt	eq
 8008c36:	021b      	lsleq	r3, r3, #8
 8008c38:	3008      	addeq	r0, #8
 8008c3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c3e:	bf04      	itt	eq
 8008c40:	011b      	lsleq	r3, r3, #4
 8008c42:	3004      	addeq	r0, #4
 8008c44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c48:	bf04      	itt	eq
 8008c4a:	009b      	lsleq	r3, r3, #2
 8008c4c:	3002      	addeq	r0, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	db05      	blt.n	8008c5e <__hi0bits+0x3a>
 8008c52:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008c56:	f100 0001 	add.w	r0, r0, #1
 8008c5a:	bf08      	it	eq
 8008c5c:	2020      	moveq	r0, #32
 8008c5e:	4770      	bx	lr
 8008c60:	2000      	movs	r0, #0
 8008c62:	e7e5      	b.n	8008c30 <__hi0bits+0xc>

08008c64 <__lo0bits>:
 8008c64:	6803      	ldr	r3, [r0, #0]
 8008c66:	4602      	mov	r2, r0
 8008c68:	f013 0007 	ands.w	r0, r3, #7
 8008c6c:	d00b      	beq.n	8008c86 <__lo0bits+0x22>
 8008c6e:	07d9      	lsls	r1, r3, #31
 8008c70:	d421      	bmi.n	8008cb6 <__lo0bits+0x52>
 8008c72:	0798      	lsls	r0, r3, #30
 8008c74:	bf49      	itett	mi
 8008c76:	085b      	lsrmi	r3, r3, #1
 8008c78:	089b      	lsrpl	r3, r3, #2
 8008c7a:	2001      	movmi	r0, #1
 8008c7c:	6013      	strmi	r3, [r2, #0]
 8008c7e:	bf5c      	itt	pl
 8008c80:	2002      	movpl	r0, #2
 8008c82:	6013      	strpl	r3, [r2, #0]
 8008c84:	4770      	bx	lr
 8008c86:	b299      	uxth	r1, r3
 8008c88:	b909      	cbnz	r1, 8008c8e <__lo0bits+0x2a>
 8008c8a:	2010      	movs	r0, #16
 8008c8c:	0c1b      	lsrs	r3, r3, #16
 8008c8e:	b2d9      	uxtb	r1, r3
 8008c90:	b909      	cbnz	r1, 8008c96 <__lo0bits+0x32>
 8008c92:	3008      	adds	r0, #8
 8008c94:	0a1b      	lsrs	r3, r3, #8
 8008c96:	0719      	lsls	r1, r3, #28
 8008c98:	bf04      	itt	eq
 8008c9a:	091b      	lsreq	r3, r3, #4
 8008c9c:	3004      	addeq	r0, #4
 8008c9e:	0799      	lsls	r1, r3, #30
 8008ca0:	bf04      	itt	eq
 8008ca2:	089b      	lsreq	r3, r3, #2
 8008ca4:	3002      	addeq	r0, #2
 8008ca6:	07d9      	lsls	r1, r3, #31
 8008ca8:	d403      	bmi.n	8008cb2 <__lo0bits+0x4e>
 8008caa:	085b      	lsrs	r3, r3, #1
 8008cac:	f100 0001 	add.w	r0, r0, #1
 8008cb0:	d003      	beq.n	8008cba <__lo0bits+0x56>
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	4770      	bx	lr
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	4770      	bx	lr
 8008cba:	2020      	movs	r0, #32
 8008cbc:	4770      	bx	lr
	...

08008cc0 <__i2b>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	f7ff ff05 	bl	8008ad4 <_Balloc>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	b928      	cbnz	r0, 8008cda <__i2b+0x1a>
 8008cce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008cd2:	4b04      	ldr	r3, [pc, #16]	; (8008ce4 <__i2b+0x24>)
 8008cd4:	4804      	ldr	r0, [pc, #16]	; (8008ce8 <__i2b+0x28>)
 8008cd6:	f000 ff49 	bl	8009b6c <__assert_func>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	6144      	str	r4, [r0, #20]
 8008cde:	6103      	str	r3, [r0, #16]
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	bf00      	nop
 8008ce4:	0800a68b 	.word	0x0800a68b
 8008ce8:	0800a6fc 	.word	0x0800a6fc

08008cec <__multiply>:
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	4691      	mov	r9, r2
 8008cf2:	690a      	ldr	r2, [r1, #16]
 8008cf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	bfbe      	ittt	lt
 8008cfe:	460b      	movlt	r3, r1
 8008d00:	464c      	movlt	r4, r9
 8008d02:	4699      	movlt	r9, r3
 8008d04:	6927      	ldr	r7, [r4, #16]
 8008d06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	6861      	ldr	r1, [r4, #4]
 8008d0e:	eb07 060a 	add.w	r6, r7, sl
 8008d12:	42b3      	cmp	r3, r6
 8008d14:	b085      	sub	sp, #20
 8008d16:	bfb8      	it	lt
 8008d18:	3101      	addlt	r1, #1
 8008d1a:	f7ff fedb 	bl	8008ad4 <_Balloc>
 8008d1e:	b930      	cbnz	r0, 8008d2e <__multiply+0x42>
 8008d20:	4602      	mov	r2, r0
 8008d22:	f240 115d 	movw	r1, #349	; 0x15d
 8008d26:	4b43      	ldr	r3, [pc, #268]	; (8008e34 <__multiply+0x148>)
 8008d28:	4843      	ldr	r0, [pc, #268]	; (8008e38 <__multiply+0x14c>)
 8008d2a:	f000 ff1f 	bl	8009b6c <__assert_func>
 8008d2e:	f100 0514 	add.w	r5, r0, #20
 8008d32:	462b      	mov	r3, r5
 8008d34:	2200      	movs	r2, #0
 8008d36:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d3a:	4543      	cmp	r3, r8
 8008d3c:	d321      	bcc.n	8008d82 <__multiply+0x96>
 8008d3e:	f104 0314 	add.w	r3, r4, #20
 8008d42:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d46:	f109 0314 	add.w	r3, r9, #20
 8008d4a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d4e:	9202      	str	r2, [sp, #8]
 8008d50:	1b3a      	subs	r2, r7, r4
 8008d52:	3a15      	subs	r2, #21
 8008d54:	f022 0203 	bic.w	r2, r2, #3
 8008d58:	3204      	adds	r2, #4
 8008d5a:	f104 0115 	add.w	r1, r4, #21
 8008d5e:	428f      	cmp	r7, r1
 8008d60:	bf38      	it	cc
 8008d62:	2204      	movcc	r2, #4
 8008d64:	9201      	str	r2, [sp, #4]
 8008d66:	9a02      	ldr	r2, [sp, #8]
 8008d68:	9303      	str	r3, [sp, #12]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d80c      	bhi.n	8008d88 <__multiply+0x9c>
 8008d6e:	2e00      	cmp	r6, #0
 8008d70:	dd03      	ble.n	8008d7a <__multiply+0x8e>
 8008d72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d059      	beq.n	8008e2e <__multiply+0x142>
 8008d7a:	6106      	str	r6, [r0, #16]
 8008d7c:	b005      	add	sp, #20
 8008d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d82:	f843 2b04 	str.w	r2, [r3], #4
 8008d86:	e7d8      	b.n	8008d3a <__multiply+0x4e>
 8008d88:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d8c:	f1ba 0f00 	cmp.w	sl, #0
 8008d90:	d023      	beq.n	8008dda <__multiply+0xee>
 8008d92:	46a9      	mov	r9, r5
 8008d94:	f04f 0c00 	mov.w	ip, #0
 8008d98:	f104 0e14 	add.w	lr, r4, #20
 8008d9c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008da0:	f8d9 1000 	ldr.w	r1, [r9]
 8008da4:	fa1f fb82 	uxth.w	fp, r2
 8008da8:	b289      	uxth	r1, r1
 8008daa:	fb0a 110b 	mla	r1, sl, fp, r1
 8008dae:	4461      	add	r1, ip
 8008db0:	f8d9 c000 	ldr.w	ip, [r9]
 8008db4:	0c12      	lsrs	r2, r2, #16
 8008db6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008dba:	fb0a c202 	mla	r2, sl, r2, ip
 8008dbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008dc2:	b289      	uxth	r1, r1
 8008dc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008dc8:	4577      	cmp	r7, lr
 8008dca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dce:	f849 1b04 	str.w	r1, [r9], #4
 8008dd2:	d8e3      	bhi.n	8008d9c <__multiply+0xb0>
 8008dd4:	9a01      	ldr	r2, [sp, #4]
 8008dd6:	f845 c002 	str.w	ip, [r5, r2]
 8008dda:	9a03      	ldr	r2, [sp, #12]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008de2:	f1b9 0f00 	cmp.w	r9, #0
 8008de6:	d020      	beq.n	8008e2a <__multiply+0x13e>
 8008de8:	46ae      	mov	lr, r5
 8008dea:	f04f 0a00 	mov.w	sl, #0
 8008dee:	6829      	ldr	r1, [r5, #0]
 8008df0:	f104 0c14 	add.w	ip, r4, #20
 8008df4:	f8bc b000 	ldrh.w	fp, [ip]
 8008df8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008dfc:	b289      	uxth	r1, r1
 8008dfe:	fb09 220b 	mla	r2, r9, fp, r2
 8008e02:	4492      	add	sl, r2
 8008e04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008e08:	f84e 1b04 	str.w	r1, [lr], #4
 8008e0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e10:	f8be 1000 	ldrh.w	r1, [lr]
 8008e14:	0c12      	lsrs	r2, r2, #16
 8008e16:	fb09 1102 	mla	r1, r9, r2, r1
 8008e1a:	4567      	cmp	r7, ip
 8008e1c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008e20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e24:	d8e6      	bhi.n	8008df4 <__multiply+0x108>
 8008e26:	9a01      	ldr	r2, [sp, #4]
 8008e28:	50a9      	str	r1, [r5, r2]
 8008e2a:	3504      	adds	r5, #4
 8008e2c:	e79b      	b.n	8008d66 <__multiply+0x7a>
 8008e2e:	3e01      	subs	r6, #1
 8008e30:	e79d      	b.n	8008d6e <__multiply+0x82>
 8008e32:	bf00      	nop
 8008e34:	0800a68b 	.word	0x0800a68b
 8008e38:	0800a6fc 	.word	0x0800a6fc

08008e3c <__pow5mult>:
 8008e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e40:	4615      	mov	r5, r2
 8008e42:	f012 0203 	ands.w	r2, r2, #3
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	d007      	beq.n	8008e5c <__pow5mult+0x20>
 8008e4c:	4c25      	ldr	r4, [pc, #148]	; (8008ee4 <__pow5mult+0xa8>)
 8008e4e:	3a01      	subs	r2, #1
 8008e50:	2300      	movs	r3, #0
 8008e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e56:	f7ff fe9f 	bl	8008b98 <__multadd>
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	10ad      	asrs	r5, r5, #2
 8008e5e:	d03d      	beq.n	8008edc <__pow5mult+0xa0>
 8008e60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e62:	b97c      	cbnz	r4, 8008e84 <__pow5mult+0x48>
 8008e64:	2010      	movs	r0, #16
 8008e66:	f7ff fe1f 	bl	8008aa8 <malloc>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6270      	str	r0, [r6, #36]	; 0x24
 8008e6e:	b928      	cbnz	r0, 8008e7c <__pow5mult+0x40>
 8008e70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e74:	4b1c      	ldr	r3, [pc, #112]	; (8008ee8 <__pow5mult+0xac>)
 8008e76:	481d      	ldr	r0, [pc, #116]	; (8008eec <__pow5mult+0xb0>)
 8008e78:	f000 fe78 	bl	8009b6c <__assert_func>
 8008e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e80:	6004      	str	r4, [r0, #0]
 8008e82:	60c4      	str	r4, [r0, #12]
 8008e84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e8c:	b94c      	cbnz	r4, 8008ea2 <__pow5mult+0x66>
 8008e8e:	f240 2171 	movw	r1, #625	; 0x271
 8008e92:	4630      	mov	r0, r6
 8008e94:	f7ff ff14 	bl	8008cc0 <__i2b>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ea0:	6003      	str	r3, [r0, #0]
 8008ea2:	f04f 0900 	mov.w	r9, #0
 8008ea6:	07eb      	lsls	r3, r5, #31
 8008ea8:	d50a      	bpl.n	8008ec0 <__pow5mult+0x84>
 8008eaa:	4639      	mov	r1, r7
 8008eac:	4622      	mov	r2, r4
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7ff ff1c 	bl	8008cec <__multiply>
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7ff fe4b 	bl	8008b54 <_Bfree>
 8008ebe:	4647      	mov	r7, r8
 8008ec0:	106d      	asrs	r5, r5, #1
 8008ec2:	d00b      	beq.n	8008edc <__pow5mult+0xa0>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	b938      	cbnz	r0, 8008ed8 <__pow5mult+0x9c>
 8008ec8:	4622      	mov	r2, r4
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f7ff ff0d 	bl	8008cec <__multiply>
 8008ed2:	6020      	str	r0, [r4, #0]
 8008ed4:	f8c0 9000 	str.w	r9, [r0]
 8008ed8:	4604      	mov	r4, r0
 8008eda:	e7e4      	b.n	8008ea6 <__pow5mult+0x6a>
 8008edc:	4638      	mov	r0, r7
 8008ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee2:	bf00      	nop
 8008ee4:	0800a848 	.word	0x0800a848
 8008ee8:	0800a619 	.word	0x0800a619
 8008eec:	0800a6fc 	.word	0x0800a6fc

08008ef0 <__lshift>:
 8008ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	4691      	mov	r9, r2
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	6849      	ldr	r1, [r1, #4]
 8008efe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f08:	f108 0601 	add.w	r6, r8, #1
 8008f0c:	42b3      	cmp	r3, r6
 8008f0e:	db0b      	blt.n	8008f28 <__lshift+0x38>
 8008f10:	4638      	mov	r0, r7
 8008f12:	f7ff fddf 	bl	8008ad4 <_Balloc>
 8008f16:	4605      	mov	r5, r0
 8008f18:	b948      	cbnz	r0, 8008f2e <__lshift+0x3e>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f20:	4b29      	ldr	r3, [pc, #164]	; (8008fc8 <__lshift+0xd8>)
 8008f22:	482a      	ldr	r0, [pc, #168]	; (8008fcc <__lshift+0xdc>)
 8008f24:	f000 fe22 	bl	8009b6c <__assert_func>
 8008f28:	3101      	adds	r1, #1
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	e7ee      	b.n	8008f0c <__lshift+0x1c>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f100 0114 	add.w	r1, r0, #20
 8008f34:	f100 0210 	add.w	r2, r0, #16
 8008f38:	4618      	mov	r0, r3
 8008f3a:	4553      	cmp	r3, sl
 8008f3c:	db37      	blt.n	8008fae <__lshift+0xbe>
 8008f3e:	6920      	ldr	r0, [r4, #16]
 8008f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f44:	f104 0314 	add.w	r3, r4, #20
 8008f48:	f019 091f 	ands.w	r9, r9, #31
 8008f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f54:	d02f      	beq.n	8008fb6 <__lshift+0xc6>
 8008f56:	468a      	mov	sl, r1
 8008f58:	f04f 0c00 	mov.w	ip, #0
 8008f5c:	f1c9 0e20 	rsb	lr, r9, #32
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	fa02 f209 	lsl.w	r2, r2, r9
 8008f66:	ea42 020c 	orr.w	r2, r2, ip
 8008f6a:	f84a 2b04 	str.w	r2, [sl], #4
 8008f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f72:	4298      	cmp	r0, r3
 8008f74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008f78:	d8f2      	bhi.n	8008f60 <__lshift+0x70>
 8008f7a:	1b03      	subs	r3, r0, r4
 8008f7c:	3b15      	subs	r3, #21
 8008f7e:	f023 0303 	bic.w	r3, r3, #3
 8008f82:	3304      	adds	r3, #4
 8008f84:	f104 0215 	add.w	r2, r4, #21
 8008f88:	4290      	cmp	r0, r2
 8008f8a:	bf38      	it	cc
 8008f8c:	2304      	movcc	r3, #4
 8008f8e:	f841 c003 	str.w	ip, [r1, r3]
 8008f92:	f1bc 0f00 	cmp.w	ip, #0
 8008f96:	d001      	beq.n	8008f9c <__lshift+0xac>
 8008f98:	f108 0602 	add.w	r6, r8, #2
 8008f9c:	3e01      	subs	r6, #1
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	612e      	str	r6, [r5, #16]
 8008fa4:	f7ff fdd6 	bl	8008b54 <_Bfree>
 8008fa8:	4628      	mov	r0, r5
 8008faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fae:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	e7c1      	b.n	8008f3a <__lshift+0x4a>
 8008fb6:	3904      	subs	r1, #4
 8008fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fbc:	4298      	cmp	r0, r3
 8008fbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fc2:	d8f9      	bhi.n	8008fb8 <__lshift+0xc8>
 8008fc4:	e7ea      	b.n	8008f9c <__lshift+0xac>
 8008fc6:	bf00      	nop
 8008fc8:	0800a68b 	.word	0x0800a68b
 8008fcc:	0800a6fc 	.word	0x0800a6fc

08008fd0 <__mcmp>:
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	690a      	ldr	r2, [r1, #16]
 8008fd4:	6900      	ldr	r0, [r0, #16]
 8008fd6:	b530      	push	{r4, r5, lr}
 8008fd8:	1a80      	subs	r0, r0, r2
 8008fda:	d10d      	bne.n	8008ff8 <__mcmp+0x28>
 8008fdc:	3314      	adds	r3, #20
 8008fde:	3114      	adds	r1, #20
 8008fe0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fe4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fe8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ff0:	4295      	cmp	r5, r2
 8008ff2:	d002      	beq.n	8008ffa <__mcmp+0x2a>
 8008ff4:	d304      	bcc.n	8009000 <__mcmp+0x30>
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	bd30      	pop	{r4, r5, pc}
 8008ffa:	42a3      	cmp	r3, r4
 8008ffc:	d3f4      	bcc.n	8008fe8 <__mcmp+0x18>
 8008ffe:	e7fb      	b.n	8008ff8 <__mcmp+0x28>
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e7f8      	b.n	8008ff8 <__mcmp+0x28>
	...

08009008 <__mdiff>:
 8009008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	460d      	mov	r5, r1
 800900e:	4607      	mov	r7, r0
 8009010:	4611      	mov	r1, r2
 8009012:	4628      	mov	r0, r5
 8009014:	4614      	mov	r4, r2
 8009016:	f7ff ffdb 	bl	8008fd0 <__mcmp>
 800901a:	1e06      	subs	r6, r0, #0
 800901c:	d111      	bne.n	8009042 <__mdiff+0x3a>
 800901e:	4631      	mov	r1, r6
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff fd57 	bl	8008ad4 <_Balloc>
 8009026:	4602      	mov	r2, r0
 8009028:	b928      	cbnz	r0, 8009036 <__mdiff+0x2e>
 800902a:	f240 2132 	movw	r1, #562	; 0x232
 800902e:	4b3a      	ldr	r3, [pc, #232]	; (8009118 <__mdiff+0x110>)
 8009030:	483a      	ldr	r0, [pc, #232]	; (800911c <__mdiff+0x114>)
 8009032:	f000 fd9b 	bl	8009b6c <__assert_func>
 8009036:	2301      	movs	r3, #1
 8009038:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800903c:	4610      	mov	r0, r2
 800903e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009042:	bfa4      	itt	ge
 8009044:	4623      	movge	r3, r4
 8009046:	462c      	movge	r4, r5
 8009048:	4638      	mov	r0, r7
 800904a:	6861      	ldr	r1, [r4, #4]
 800904c:	bfa6      	itte	ge
 800904e:	461d      	movge	r5, r3
 8009050:	2600      	movge	r6, #0
 8009052:	2601      	movlt	r6, #1
 8009054:	f7ff fd3e 	bl	8008ad4 <_Balloc>
 8009058:	4602      	mov	r2, r0
 800905a:	b918      	cbnz	r0, 8009064 <__mdiff+0x5c>
 800905c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009060:	4b2d      	ldr	r3, [pc, #180]	; (8009118 <__mdiff+0x110>)
 8009062:	e7e5      	b.n	8009030 <__mdiff+0x28>
 8009064:	f102 0814 	add.w	r8, r2, #20
 8009068:	46c2      	mov	sl, r8
 800906a:	f04f 0c00 	mov.w	ip, #0
 800906e:	6927      	ldr	r7, [r4, #16]
 8009070:	60c6      	str	r6, [r0, #12]
 8009072:	692e      	ldr	r6, [r5, #16]
 8009074:	f104 0014 	add.w	r0, r4, #20
 8009078:	f105 0914 	add.w	r9, r5, #20
 800907c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009080:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009084:	3410      	adds	r4, #16
 8009086:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800908a:	f859 3b04 	ldr.w	r3, [r9], #4
 800908e:	fa1f f18b 	uxth.w	r1, fp
 8009092:	448c      	add	ip, r1
 8009094:	b299      	uxth	r1, r3
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	ebac 0101 	sub.w	r1, ip, r1
 800909c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80090a4:	b289      	uxth	r1, r1
 80090a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80090aa:	454e      	cmp	r6, r9
 80090ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80090b0:	f84a 3b04 	str.w	r3, [sl], #4
 80090b4:	d8e7      	bhi.n	8009086 <__mdiff+0x7e>
 80090b6:	1b73      	subs	r3, r6, r5
 80090b8:	3b15      	subs	r3, #21
 80090ba:	f023 0303 	bic.w	r3, r3, #3
 80090be:	3515      	adds	r5, #21
 80090c0:	3304      	adds	r3, #4
 80090c2:	42ae      	cmp	r6, r5
 80090c4:	bf38      	it	cc
 80090c6:	2304      	movcc	r3, #4
 80090c8:	4418      	add	r0, r3
 80090ca:	4443      	add	r3, r8
 80090cc:	461e      	mov	r6, r3
 80090ce:	4605      	mov	r5, r0
 80090d0:	4575      	cmp	r5, lr
 80090d2:	d30e      	bcc.n	80090f2 <__mdiff+0xea>
 80090d4:	f10e 0103 	add.w	r1, lr, #3
 80090d8:	1a09      	subs	r1, r1, r0
 80090da:	f021 0103 	bic.w	r1, r1, #3
 80090de:	3803      	subs	r0, #3
 80090e0:	4586      	cmp	lr, r0
 80090e2:	bf38      	it	cc
 80090e4:	2100      	movcc	r1, #0
 80090e6:	4419      	add	r1, r3
 80090e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80090ec:	b18b      	cbz	r3, 8009112 <__mdiff+0x10a>
 80090ee:	6117      	str	r7, [r2, #16]
 80090f0:	e7a4      	b.n	800903c <__mdiff+0x34>
 80090f2:	f855 8b04 	ldr.w	r8, [r5], #4
 80090f6:	fa1f f188 	uxth.w	r1, r8
 80090fa:	4461      	add	r1, ip
 80090fc:	140c      	asrs	r4, r1, #16
 80090fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009102:	b289      	uxth	r1, r1
 8009104:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009108:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800910c:	f846 1b04 	str.w	r1, [r6], #4
 8009110:	e7de      	b.n	80090d0 <__mdiff+0xc8>
 8009112:	3f01      	subs	r7, #1
 8009114:	e7e8      	b.n	80090e8 <__mdiff+0xe0>
 8009116:	bf00      	nop
 8009118:	0800a68b 	.word	0x0800a68b
 800911c:	0800a6fc 	.word	0x0800a6fc

08009120 <__d2b>:
 8009120:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009124:	2101      	movs	r1, #1
 8009126:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800912a:	4690      	mov	r8, r2
 800912c:	461d      	mov	r5, r3
 800912e:	f7ff fcd1 	bl	8008ad4 <_Balloc>
 8009132:	4604      	mov	r4, r0
 8009134:	b930      	cbnz	r0, 8009144 <__d2b+0x24>
 8009136:	4602      	mov	r2, r0
 8009138:	f240 310a 	movw	r1, #778	; 0x30a
 800913c:	4b24      	ldr	r3, [pc, #144]	; (80091d0 <__d2b+0xb0>)
 800913e:	4825      	ldr	r0, [pc, #148]	; (80091d4 <__d2b+0xb4>)
 8009140:	f000 fd14 	bl	8009b6c <__assert_func>
 8009144:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009148:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800914c:	bb2d      	cbnz	r5, 800919a <__d2b+0x7a>
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	f1b8 0300 	subs.w	r3, r8, #0
 8009154:	d026      	beq.n	80091a4 <__d2b+0x84>
 8009156:	4668      	mov	r0, sp
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	f7ff fd83 	bl	8008c64 <__lo0bits>
 800915e:	9900      	ldr	r1, [sp, #0]
 8009160:	b1f0      	cbz	r0, 80091a0 <__d2b+0x80>
 8009162:	9a01      	ldr	r2, [sp, #4]
 8009164:	f1c0 0320 	rsb	r3, r0, #32
 8009168:	fa02 f303 	lsl.w	r3, r2, r3
 800916c:	430b      	orrs	r3, r1
 800916e:	40c2      	lsrs	r2, r0
 8009170:	6163      	str	r3, [r4, #20]
 8009172:	9201      	str	r2, [sp, #4]
 8009174:	9b01      	ldr	r3, [sp, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	bf14      	ite	ne
 800917a:	2102      	movne	r1, #2
 800917c:	2101      	moveq	r1, #1
 800917e:	61a3      	str	r3, [r4, #24]
 8009180:	6121      	str	r1, [r4, #16]
 8009182:	b1c5      	cbz	r5, 80091b6 <__d2b+0x96>
 8009184:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009188:	4405      	add	r5, r0
 800918a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800918e:	603d      	str	r5, [r7, #0]
 8009190:	6030      	str	r0, [r6, #0]
 8009192:	4620      	mov	r0, r4
 8009194:	b002      	add	sp, #8
 8009196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800919a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800919e:	e7d6      	b.n	800914e <__d2b+0x2e>
 80091a0:	6161      	str	r1, [r4, #20]
 80091a2:	e7e7      	b.n	8009174 <__d2b+0x54>
 80091a4:	a801      	add	r0, sp, #4
 80091a6:	f7ff fd5d 	bl	8008c64 <__lo0bits>
 80091aa:	2101      	movs	r1, #1
 80091ac:	9b01      	ldr	r3, [sp, #4]
 80091ae:	6121      	str	r1, [r4, #16]
 80091b0:	6163      	str	r3, [r4, #20]
 80091b2:	3020      	adds	r0, #32
 80091b4:	e7e5      	b.n	8009182 <__d2b+0x62>
 80091b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80091ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091be:	6038      	str	r0, [r7, #0]
 80091c0:	6918      	ldr	r0, [r3, #16]
 80091c2:	f7ff fd2f 	bl	8008c24 <__hi0bits>
 80091c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80091ca:	6031      	str	r1, [r6, #0]
 80091cc:	e7e1      	b.n	8009192 <__d2b+0x72>
 80091ce:	bf00      	nop
 80091d0:	0800a68b 	.word	0x0800a68b
 80091d4:	0800a6fc 	.word	0x0800a6fc

080091d8 <_calloc_r>:
 80091d8:	b570      	push	{r4, r5, r6, lr}
 80091da:	fba1 5402 	umull	r5, r4, r1, r2
 80091de:	b934      	cbnz	r4, 80091ee <_calloc_r+0x16>
 80091e0:	4629      	mov	r1, r5
 80091e2:	f000 f875 	bl	80092d0 <_malloc_r>
 80091e6:	4606      	mov	r6, r0
 80091e8:	b928      	cbnz	r0, 80091f6 <_calloc_r+0x1e>
 80091ea:	4630      	mov	r0, r6
 80091ec:	bd70      	pop	{r4, r5, r6, pc}
 80091ee:	220c      	movs	r2, #12
 80091f0:	2600      	movs	r6, #0
 80091f2:	6002      	str	r2, [r0, #0]
 80091f4:	e7f9      	b.n	80091ea <_calloc_r+0x12>
 80091f6:	462a      	mov	r2, r5
 80091f8:	4621      	mov	r1, r4
 80091fa:	f7fe f82d 	bl	8007258 <memset>
 80091fe:	e7f4      	b.n	80091ea <_calloc_r+0x12>

08009200 <_free_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4605      	mov	r5, r0
 8009204:	2900      	cmp	r1, #0
 8009206:	d040      	beq.n	800928a <_free_r+0x8a>
 8009208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800920c:	1f0c      	subs	r4, r1, #4
 800920e:	2b00      	cmp	r3, #0
 8009210:	bfb8      	it	lt
 8009212:	18e4      	addlt	r4, r4, r3
 8009214:	f000 fe4c 	bl	8009eb0 <__malloc_lock>
 8009218:	4a1c      	ldr	r2, [pc, #112]	; (800928c <_free_r+0x8c>)
 800921a:	6813      	ldr	r3, [r2, #0]
 800921c:	b933      	cbnz	r3, 800922c <_free_r+0x2c>
 800921e:	6063      	str	r3, [r4, #4]
 8009220:	6014      	str	r4, [r2, #0]
 8009222:	4628      	mov	r0, r5
 8009224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009228:	f000 be48 	b.w	8009ebc <__malloc_unlock>
 800922c:	42a3      	cmp	r3, r4
 800922e:	d908      	bls.n	8009242 <_free_r+0x42>
 8009230:	6820      	ldr	r0, [r4, #0]
 8009232:	1821      	adds	r1, r4, r0
 8009234:	428b      	cmp	r3, r1
 8009236:	bf01      	itttt	eq
 8009238:	6819      	ldreq	r1, [r3, #0]
 800923a:	685b      	ldreq	r3, [r3, #4]
 800923c:	1809      	addeq	r1, r1, r0
 800923e:	6021      	streq	r1, [r4, #0]
 8009240:	e7ed      	b.n	800921e <_free_r+0x1e>
 8009242:	461a      	mov	r2, r3
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	b10b      	cbz	r3, 800924c <_free_r+0x4c>
 8009248:	42a3      	cmp	r3, r4
 800924a:	d9fa      	bls.n	8009242 <_free_r+0x42>
 800924c:	6811      	ldr	r1, [r2, #0]
 800924e:	1850      	adds	r0, r2, r1
 8009250:	42a0      	cmp	r0, r4
 8009252:	d10b      	bne.n	800926c <_free_r+0x6c>
 8009254:	6820      	ldr	r0, [r4, #0]
 8009256:	4401      	add	r1, r0
 8009258:	1850      	adds	r0, r2, r1
 800925a:	4283      	cmp	r3, r0
 800925c:	6011      	str	r1, [r2, #0]
 800925e:	d1e0      	bne.n	8009222 <_free_r+0x22>
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	4401      	add	r1, r0
 8009266:	6011      	str	r1, [r2, #0]
 8009268:	6053      	str	r3, [r2, #4]
 800926a:	e7da      	b.n	8009222 <_free_r+0x22>
 800926c:	d902      	bls.n	8009274 <_free_r+0x74>
 800926e:	230c      	movs	r3, #12
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	e7d6      	b.n	8009222 <_free_r+0x22>
 8009274:	6820      	ldr	r0, [r4, #0]
 8009276:	1821      	adds	r1, r4, r0
 8009278:	428b      	cmp	r3, r1
 800927a:	bf01      	itttt	eq
 800927c:	6819      	ldreq	r1, [r3, #0]
 800927e:	685b      	ldreq	r3, [r3, #4]
 8009280:	1809      	addeq	r1, r1, r0
 8009282:	6021      	streq	r1, [r4, #0]
 8009284:	6063      	str	r3, [r4, #4]
 8009286:	6054      	str	r4, [r2, #4]
 8009288:	e7cb      	b.n	8009222 <_free_r+0x22>
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	2000037c 	.word	0x2000037c

08009290 <sbrk_aligned>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	4e0e      	ldr	r6, [pc, #56]	; (80092cc <sbrk_aligned+0x3c>)
 8009294:	460c      	mov	r4, r1
 8009296:	6831      	ldr	r1, [r6, #0]
 8009298:	4605      	mov	r5, r0
 800929a:	b911      	cbnz	r1, 80092a2 <sbrk_aligned+0x12>
 800929c:	f000 fb40 	bl	8009920 <_sbrk_r>
 80092a0:	6030      	str	r0, [r6, #0]
 80092a2:	4621      	mov	r1, r4
 80092a4:	4628      	mov	r0, r5
 80092a6:	f000 fb3b 	bl	8009920 <_sbrk_r>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	d00a      	beq.n	80092c4 <sbrk_aligned+0x34>
 80092ae:	1cc4      	adds	r4, r0, #3
 80092b0:	f024 0403 	bic.w	r4, r4, #3
 80092b4:	42a0      	cmp	r0, r4
 80092b6:	d007      	beq.n	80092c8 <sbrk_aligned+0x38>
 80092b8:	1a21      	subs	r1, r4, r0
 80092ba:	4628      	mov	r0, r5
 80092bc:	f000 fb30 	bl	8009920 <_sbrk_r>
 80092c0:	3001      	adds	r0, #1
 80092c2:	d101      	bne.n	80092c8 <sbrk_aligned+0x38>
 80092c4:	f04f 34ff 	mov.w	r4, #4294967295
 80092c8:	4620      	mov	r0, r4
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	20000380 	.word	0x20000380

080092d0 <_malloc_r>:
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	1ccd      	adds	r5, r1, #3
 80092d6:	f025 0503 	bic.w	r5, r5, #3
 80092da:	3508      	adds	r5, #8
 80092dc:	2d0c      	cmp	r5, #12
 80092de:	bf38      	it	cc
 80092e0:	250c      	movcc	r5, #12
 80092e2:	2d00      	cmp	r5, #0
 80092e4:	4607      	mov	r7, r0
 80092e6:	db01      	blt.n	80092ec <_malloc_r+0x1c>
 80092e8:	42a9      	cmp	r1, r5
 80092ea:	d905      	bls.n	80092f8 <_malloc_r+0x28>
 80092ec:	230c      	movs	r3, #12
 80092ee:	2600      	movs	r6, #0
 80092f0:	603b      	str	r3, [r7, #0]
 80092f2:	4630      	mov	r0, r6
 80092f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f8:	4e2e      	ldr	r6, [pc, #184]	; (80093b4 <_malloc_r+0xe4>)
 80092fa:	f000 fdd9 	bl	8009eb0 <__malloc_lock>
 80092fe:	6833      	ldr	r3, [r6, #0]
 8009300:	461c      	mov	r4, r3
 8009302:	bb34      	cbnz	r4, 8009352 <_malloc_r+0x82>
 8009304:	4629      	mov	r1, r5
 8009306:	4638      	mov	r0, r7
 8009308:	f7ff ffc2 	bl	8009290 <sbrk_aligned>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	4604      	mov	r4, r0
 8009310:	d14d      	bne.n	80093ae <_malloc_r+0xde>
 8009312:	6834      	ldr	r4, [r6, #0]
 8009314:	4626      	mov	r6, r4
 8009316:	2e00      	cmp	r6, #0
 8009318:	d140      	bne.n	800939c <_malloc_r+0xcc>
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	4631      	mov	r1, r6
 800931e:	4638      	mov	r0, r7
 8009320:	eb04 0803 	add.w	r8, r4, r3
 8009324:	f000 fafc 	bl	8009920 <_sbrk_r>
 8009328:	4580      	cmp	r8, r0
 800932a:	d13a      	bne.n	80093a2 <_malloc_r+0xd2>
 800932c:	6821      	ldr	r1, [r4, #0]
 800932e:	3503      	adds	r5, #3
 8009330:	1a6d      	subs	r5, r5, r1
 8009332:	f025 0503 	bic.w	r5, r5, #3
 8009336:	3508      	adds	r5, #8
 8009338:	2d0c      	cmp	r5, #12
 800933a:	bf38      	it	cc
 800933c:	250c      	movcc	r5, #12
 800933e:	4638      	mov	r0, r7
 8009340:	4629      	mov	r1, r5
 8009342:	f7ff ffa5 	bl	8009290 <sbrk_aligned>
 8009346:	3001      	adds	r0, #1
 8009348:	d02b      	beq.n	80093a2 <_malloc_r+0xd2>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	442b      	add	r3, r5
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	e00e      	b.n	8009370 <_malloc_r+0xa0>
 8009352:	6822      	ldr	r2, [r4, #0]
 8009354:	1b52      	subs	r2, r2, r5
 8009356:	d41e      	bmi.n	8009396 <_malloc_r+0xc6>
 8009358:	2a0b      	cmp	r2, #11
 800935a:	d916      	bls.n	800938a <_malloc_r+0xba>
 800935c:	1961      	adds	r1, r4, r5
 800935e:	42a3      	cmp	r3, r4
 8009360:	6025      	str	r5, [r4, #0]
 8009362:	bf18      	it	ne
 8009364:	6059      	strne	r1, [r3, #4]
 8009366:	6863      	ldr	r3, [r4, #4]
 8009368:	bf08      	it	eq
 800936a:	6031      	streq	r1, [r6, #0]
 800936c:	5162      	str	r2, [r4, r5]
 800936e:	604b      	str	r3, [r1, #4]
 8009370:	4638      	mov	r0, r7
 8009372:	f104 060b 	add.w	r6, r4, #11
 8009376:	f000 fda1 	bl	8009ebc <__malloc_unlock>
 800937a:	f026 0607 	bic.w	r6, r6, #7
 800937e:	1d23      	adds	r3, r4, #4
 8009380:	1af2      	subs	r2, r6, r3
 8009382:	d0b6      	beq.n	80092f2 <_malloc_r+0x22>
 8009384:	1b9b      	subs	r3, r3, r6
 8009386:	50a3      	str	r3, [r4, r2]
 8009388:	e7b3      	b.n	80092f2 <_malloc_r+0x22>
 800938a:	6862      	ldr	r2, [r4, #4]
 800938c:	42a3      	cmp	r3, r4
 800938e:	bf0c      	ite	eq
 8009390:	6032      	streq	r2, [r6, #0]
 8009392:	605a      	strne	r2, [r3, #4]
 8009394:	e7ec      	b.n	8009370 <_malloc_r+0xa0>
 8009396:	4623      	mov	r3, r4
 8009398:	6864      	ldr	r4, [r4, #4]
 800939a:	e7b2      	b.n	8009302 <_malloc_r+0x32>
 800939c:	4634      	mov	r4, r6
 800939e:	6876      	ldr	r6, [r6, #4]
 80093a0:	e7b9      	b.n	8009316 <_malloc_r+0x46>
 80093a2:	230c      	movs	r3, #12
 80093a4:	4638      	mov	r0, r7
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	f000 fd88 	bl	8009ebc <__malloc_unlock>
 80093ac:	e7a1      	b.n	80092f2 <_malloc_r+0x22>
 80093ae:	6025      	str	r5, [r4, #0]
 80093b0:	e7de      	b.n	8009370 <_malloc_r+0xa0>
 80093b2:	bf00      	nop
 80093b4:	2000037c 	.word	0x2000037c

080093b8 <__ssputs_r>:
 80093b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093bc:	688e      	ldr	r6, [r1, #8]
 80093be:	4682      	mov	sl, r0
 80093c0:	429e      	cmp	r6, r3
 80093c2:	460c      	mov	r4, r1
 80093c4:	4690      	mov	r8, r2
 80093c6:	461f      	mov	r7, r3
 80093c8:	d838      	bhi.n	800943c <__ssputs_r+0x84>
 80093ca:	898a      	ldrh	r2, [r1, #12]
 80093cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093d0:	d032      	beq.n	8009438 <__ssputs_r+0x80>
 80093d2:	6825      	ldr	r5, [r4, #0]
 80093d4:	6909      	ldr	r1, [r1, #16]
 80093d6:	3301      	adds	r3, #1
 80093d8:	eba5 0901 	sub.w	r9, r5, r1
 80093dc:	6965      	ldr	r5, [r4, #20]
 80093de:	444b      	add	r3, r9
 80093e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093e8:	106d      	asrs	r5, r5, #1
 80093ea:	429d      	cmp	r5, r3
 80093ec:	bf38      	it	cc
 80093ee:	461d      	movcc	r5, r3
 80093f0:	0553      	lsls	r3, r2, #21
 80093f2:	d531      	bpl.n	8009458 <__ssputs_r+0xa0>
 80093f4:	4629      	mov	r1, r5
 80093f6:	f7ff ff6b 	bl	80092d0 <_malloc_r>
 80093fa:	4606      	mov	r6, r0
 80093fc:	b950      	cbnz	r0, 8009414 <__ssputs_r+0x5c>
 80093fe:	230c      	movs	r3, #12
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	f8ca 3000 	str.w	r3, [sl]
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009414:	464a      	mov	r2, r9
 8009416:	6921      	ldr	r1, [r4, #16]
 8009418:	f7fd ff10 	bl	800723c <memcpy>
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009426:	81a3      	strh	r3, [r4, #12]
 8009428:	6126      	str	r6, [r4, #16]
 800942a:	444e      	add	r6, r9
 800942c:	6026      	str	r6, [r4, #0]
 800942e:	463e      	mov	r6, r7
 8009430:	6165      	str	r5, [r4, #20]
 8009432:	eba5 0509 	sub.w	r5, r5, r9
 8009436:	60a5      	str	r5, [r4, #8]
 8009438:	42be      	cmp	r6, r7
 800943a:	d900      	bls.n	800943e <__ssputs_r+0x86>
 800943c:	463e      	mov	r6, r7
 800943e:	4632      	mov	r2, r6
 8009440:	4641      	mov	r1, r8
 8009442:	6820      	ldr	r0, [r4, #0]
 8009444:	f000 fd1a 	bl	8009e7c <memmove>
 8009448:	68a3      	ldr	r3, [r4, #8]
 800944a:	2000      	movs	r0, #0
 800944c:	1b9b      	subs	r3, r3, r6
 800944e:	60a3      	str	r3, [r4, #8]
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	4433      	add	r3, r6
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	e7db      	b.n	8009410 <__ssputs_r+0x58>
 8009458:	462a      	mov	r2, r5
 800945a:	f000 fd35 	bl	8009ec8 <_realloc_r>
 800945e:	4606      	mov	r6, r0
 8009460:	2800      	cmp	r0, #0
 8009462:	d1e1      	bne.n	8009428 <__ssputs_r+0x70>
 8009464:	4650      	mov	r0, sl
 8009466:	6921      	ldr	r1, [r4, #16]
 8009468:	f7ff feca 	bl	8009200 <_free_r>
 800946c:	e7c7      	b.n	80093fe <__ssputs_r+0x46>
	...

08009470 <_svfiprintf_r>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	4698      	mov	r8, r3
 8009476:	898b      	ldrh	r3, [r1, #12]
 8009478:	4607      	mov	r7, r0
 800947a:	061b      	lsls	r3, r3, #24
 800947c:	460d      	mov	r5, r1
 800947e:	4614      	mov	r4, r2
 8009480:	b09d      	sub	sp, #116	; 0x74
 8009482:	d50e      	bpl.n	80094a2 <_svfiprintf_r+0x32>
 8009484:	690b      	ldr	r3, [r1, #16]
 8009486:	b963      	cbnz	r3, 80094a2 <_svfiprintf_r+0x32>
 8009488:	2140      	movs	r1, #64	; 0x40
 800948a:	f7ff ff21 	bl	80092d0 <_malloc_r>
 800948e:	6028      	str	r0, [r5, #0]
 8009490:	6128      	str	r0, [r5, #16]
 8009492:	b920      	cbnz	r0, 800949e <_svfiprintf_r+0x2e>
 8009494:	230c      	movs	r3, #12
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	e0d1      	b.n	8009642 <_svfiprintf_r+0x1d2>
 800949e:	2340      	movs	r3, #64	; 0x40
 80094a0:	616b      	str	r3, [r5, #20]
 80094a2:	2300      	movs	r3, #0
 80094a4:	9309      	str	r3, [sp, #36]	; 0x24
 80094a6:	2320      	movs	r3, #32
 80094a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094ac:	2330      	movs	r3, #48	; 0x30
 80094ae:	f04f 0901 	mov.w	r9, #1
 80094b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80094b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800965c <_svfiprintf_r+0x1ec>
 80094ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094be:	4623      	mov	r3, r4
 80094c0:	469a      	mov	sl, r3
 80094c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c6:	b10a      	cbz	r2, 80094cc <_svfiprintf_r+0x5c>
 80094c8:	2a25      	cmp	r2, #37	; 0x25
 80094ca:	d1f9      	bne.n	80094c0 <_svfiprintf_r+0x50>
 80094cc:	ebba 0b04 	subs.w	fp, sl, r4
 80094d0:	d00b      	beq.n	80094ea <_svfiprintf_r+0x7a>
 80094d2:	465b      	mov	r3, fp
 80094d4:	4622      	mov	r2, r4
 80094d6:	4629      	mov	r1, r5
 80094d8:	4638      	mov	r0, r7
 80094da:	f7ff ff6d 	bl	80093b8 <__ssputs_r>
 80094de:	3001      	adds	r0, #1
 80094e0:	f000 80aa 	beq.w	8009638 <_svfiprintf_r+0x1c8>
 80094e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094e6:	445a      	add	r2, fp
 80094e8:	9209      	str	r2, [sp, #36]	; 0x24
 80094ea:	f89a 3000 	ldrb.w	r3, [sl]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 80a2 	beq.w	8009638 <_svfiprintf_r+0x1c8>
 80094f4:	2300      	movs	r3, #0
 80094f6:	f04f 32ff 	mov.w	r2, #4294967295
 80094fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094fe:	f10a 0a01 	add.w	sl, sl, #1
 8009502:	9304      	str	r3, [sp, #16]
 8009504:	9307      	str	r3, [sp, #28]
 8009506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800950a:	931a      	str	r3, [sp, #104]	; 0x68
 800950c:	4654      	mov	r4, sl
 800950e:	2205      	movs	r2, #5
 8009510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009514:	4851      	ldr	r0, [pc, #324]	; (800965c <_svfiprintf_r+0x1ec>)
 8009516:	f7ff facf 	bl	8008ab8 <memchr>
 800951a:	9a04      	ldr	r2, [sp, #16]
 800951c:	b9d8      	cbnz	r0, 8009556 <_svfiprintf_r+0xe6>
 800951e:	06d0      	lsls	r0, r2, #27
 8009520:	bf44      	itt	mi
 8009522:	2320      	movmi	r3, #32
 8009524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009528:	0711      	lsls	r1, r2, #28
 800952a:	bf44      	itt	mi
 800952c:	232b      	movmi	r3, #43	; 0x2b
 800952e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009532:	f89a 3000 	ldrb.w	r3, [sl]
 8009536:	2b2a      	cmp	r3, #42	; 0x2a
 8009538:	d015      	beq.n	8009566 <_svfiprintf_r+0xf6>
 800953a:	4654      	mov	r4, sl
 800953c:	2000      	movs	r0, #0
 800953e:	f04f 0c0a 	mov.w	ip, #10
 8009542:	9a07      	ldr	r2, [sp, #28]
 8009544:	4621      	mov	r1, r4
 8009546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800954a:	3b30      	subs	r3, #48	; 0x30
 800954c:	2b09      	cmp	r3, #9
 800954e:	d94e      	bls.n	80095ee <_svfiprintf_r+0x17e>
 8009550:	b1b0      	cbz	r0, 8009580 <_svfiprintf_r+0x110>
 8009552:	9207      	str	r2, [sp, #28]
 8009554:	e014      	b.n	8009580 <_svfiprintf_r+0x110>
 8009556:	eba0 0308 	sub.w	r3, r0, r8
 800955a:	fa09 f303 	lsl.w	r3, r9, r3
 800955e:	4313      	orrs	r3, r2
 8009560:	46a2      	mov	sl, r4
 8009562:	9304      	str	r3, [sp, #16]
 8009564:	e7d2      	b.n	800950c <_svfiprintf_r+0x9c>
 8009566:	9b03      	ldr	r3, [sp, #12]
 8009568:	1d19      	adds	r1, r3, #4
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	9103      	str	r1, [sp, #12]
 800956e:	2b00      	cmp	r3, #0
 8009570:	bfbb      	ittet	lt
 8009572:	425b      	neglt	r3, r3
 8009574:	f042 0202 	orrlt.w	r2, r2, #2
 8009578:	9307      	strge	r3, [sp, #28]
 800957a:	9307      	strlt	r3, [sp, #28]
 800957c:	bfb8      	it	lt
 800957e:	9204      	strlt	r2, [sp, #16]
 8009580:	7823      	ldrb	r3, [r4, #0]
 8009582:	2b2e      	cmp	r3, #46	; 0x2e
 8009584:	d10c      	bne.n	80095a0 <_svfiprintf_r+0x130>
 8009586:	7863      	ldrb	r3, [r4, #1]
 8009588:	2b2a      	cmp	r3, #42	; 0x2a
 800958a:	d135      	bne.n	80095f8 <_svfiprintf_r+0x188>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	3402      	adds	r4, #2
 8009590:	1d1a      	adds	r2, r3, #4
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	9203      	str	r2, [sp, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	bfb8      	it	lt
 800959a:	f04f 33ff 	movlt.w	r3, #4294967295
 800959e:	9305      	str	r3, [sp, #20]
 80095a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009660 <_svfiprintf_r+0x1f0>
 80095a4:	2203      	movs	r2, #3
 80095a6:	4650      	mov	r0, sl
 80095a8:	7821      	ldrb	r1, [r4, #0]
 80095aa:	f7ff fa85 	bl	8008ab8 <memchr>
 80095ae:	b140      	cbz	r0, 80095c2 <_svfiprintf_r+0x152>
 80095b0:	2340      	movs	r3, #64	; 0x40
 80095b2:	eba0 000a 	sub.w	r0, r0, sl
 80095b6:	fa03 f000 	lsl.w	r0, r3, r0
 80095ba:	9b04      	ldr	r3, [sp, #16]
 80095bc:	3401      	adds	r4, #1
 80095be:	4303      	orrs	r3, r0
 80095c0:	9304      	str	r3, [sp, #16]
 80095c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c6:	2206      	movs	r2, #6
 80095c8:	4826      	ldr	r0, [pc, #152]	; (8009664 <_svfiprintf_r+0x1f4>)
 80095ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095ce:	f7ff fa73 	bl	8008ab8 <memchr>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d038      	beq.n	8009648 <_svfiprintf_r+0x1d8>
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <_svfiprintf_r+0x1f8>)
 80095d8:	bb1b      	cbnz	r3, 8009622 <_svfiprintf_r+0x1b2>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	3307      	adds	r3, #7
 80095de:	f023 0307 	bic.w	r3, r3, #7
 80095e2:	3308      	adds	r3, #8
 80095e4:	9303      	str	r3, [sp, #12]
 80095e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e8:	4433      	add	r3, r6
 80095ea:	9309      	str	r3, [sp, #36]	; 0x24
 80095ec:	e767      	b.n	80094be <_svfiprintf_r+0x4e>
 80095ee:	460c      	mov	r4, r1
 80095f0:	2001      	movs	r0, #1
 80095f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80095f6:	e7a5      	b.n	8009544 <_svfiprintf_r+0xd4>
 80095f8:	2300      	movs	r3, #0
 80095fa:	f04f 0c0a 	mov.w	ip, #10
 80095fe:	4619      	mov	r1, r3
 8009600:	3401      	adds	r4, #1
 8009602:	9305      	str	r3, [sp, #20]
 8009604:	4620      	mov	r0, r4
 8009606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800960a:	3a30      	subs	r2, #48	; 0x30
 800960c:	2a09      	cmp	r2, #9
 800960e:	d903      	bls.n	8009618 <_svfiprintf_r+0x1a8>
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0c5      	beq.n	80095a0 <_svfiprintf_r+0x130>
 8009614:	9105      	str	r1, [sp, #20]
 8009616:	e7c3      	b.n	80095a0 <_svfiprintf_r+0x130>
 8009618:	4604      	mov	r4, r0
 800961a:	2301      	movs	r3, #1
 800961c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009620:	e7f0      	b.n	8009604 <_svfiprintf_r+0x194>
 8009622:	ab03      	add	r3, sp, #12
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	462a      	mov	r2, r5
 8009628:	4638      	mov	r0, r7
 800962a:	4b10      	ldr	r3, [pc, #64]	; (800966c <_svfiprintf_r+0x1fc>)
 800962c:	a904      	add	r1, sp, #16
 800962e:	f7fd feb9 	bl	80073a4 <_printf_float>
 8009632:	1c42      	adds	r2, r0, #1
 8009634:	4606      	mov	r6, r0
 8009636:	d1d6      	bne.n	80095e6 <_svfiprintf_r+0x176>
 8009638:	89ab      	ldrh	r3, [r5, #12]
 800963a:	065b      	lsls	r3, r3, #25
 800963c:	f53f af2c 	bmi.w	8009498 <_svfiprintf_r+0x28>
 8009640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009642:	b01d      	add	sp, #116	; 0x74
 8009644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009648:	ab03      	add	r3, sp, #12
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	462a      	mov	r2, r5
 800964e:	4638      	mov	r0, r7
 8009650:	4b06      	ldr	r3, [pc, #24]	; (800966c <_svfiprintf_r+0x1fc>)
 8009652:	a904      	add	r1, sp, #16
 8009654:	f7fe f942 	bl	80078dc <_printf_i>
 8009658:	e7eb      	b.n	8009632 <_svfiprintf_r+0x1c2>
 800965a:	bf00      	nop
 800965c:	0800a854 	.word	0x0800a854
 8009660:	0800a85a 	.word	0x0800a85a
 8009664:	0800a85e 	.word	0x0800a85e
 8009668:	080073a5 	.word	0x080073a5
 800966c:	080093b9 	.word	0x080093b9

08009670 <__sfputc_r>:
 8009670:	6893      	ldr	r3, [r2, #8]
 8009672:	b410      	push	{r4}
 8009674:	3b01      	subs	r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	6093      	str	r3, [r2, #8]
 800967a:	da07      	bge.n	800968c <__sfputc_r+0x1c>
 800967c:	6994      	ldr	r4, [r2, #24]
 800967e:	42a3      	cmp	r3, r4
 8009680:	db01      	blt.n	8009686 <__sfputc_r+0x16>
 8009682:	290a      	cmp	r1, #10
 8009684:	d102      	bne.n	800968c <__sfputc_r+0x1c>
 8009686:	bc10      	pop	{r4}
 8009688:	f000 b99e 	b.w	80099c8 <__swbuf_r>
 800968c:	6813      	ldr	r3, [r2, #0]
 800968e:	1c58      	adds	r0, r3, #1
 8009690:	6010      	str	r0, [r2, #0]
 8009692:	7019      	strb	r1, [r3, #0]
 8009694:	4608      	mov	r0, r1
 8009696:	bc10      	pop	{r4}
 8009698:	4770      	bx	lr

0800969a <__sfputs_r>:
 800969a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969c:	4606      	mov	r6, r0
 800969e:	460f      	mov	r7, r1
 80096a0:	4614      	mov	r4, r2
 80096a2:	18d5      	adds	r5, r2, r3
 80096a4:	42ac      	cmp	r4, r5
 80096a6:	d101      	bne.n	80096ac <__sfputs_r+0x12>
 80096a8:	2000      	movs	r0, #0
 80096aa:	e007      	b.n	80096bc <__sfputs_r+0x22>
 80096ac:	463a      	mov	r2, r7
 80096ae:	4630      	mov	r0, r6
 80096b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b4:	f7ff ffdc 	bl	8009670 <__sfputc_r>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d1f3      	bne.n	80096a4 <__sfputs_r+0xa>
 80096bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096c0 <_vfiprintf_r>:
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	460d      	mov	r5, r1
 80096c6:	4614      	mov	r4, r2
 80096c8:	4698      	mov	r8, r3
 80096ca:	4606      	mov	r6, r0
 80096cc:	b09d      	sub	sp, #116	; 0x74
 80096ce:	b118      	cbz	r0, 80096d8 <_vfiprintf_r+0x18>
 80096d0:	6983      	ldr	r3, [r0, #24]
 80096d2:	b90b      	cbnz	r3, 80096d8 <_vfiprintf_r+0x18>
 80096d4:	f7ff f942 	bl	800895c <__sinit>
 80096d8:	4b89      	ldr	r3, [pc, #548]	; (8009900 <_vfiprintf_r+0x240>)
 80096da:	429d      	cmp	r5, r3
 80096dc:	d11b      	bne.n	8009716 <_vfiprintf_r+0x56>
 80096de:	6875      	ldr	r5, [r6, #4]
 80096e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096e2:	07d9      	lsls	r1, r3, #31
 80096e4:	d405      	bmi.n	80096f2 <_vfiprintf_r+0x32>
 80096e6:	89ab      	ldrh	r3, [r5, #12]
 80096e8:	059a      	lsls	r2, r3, #22
 80096ea:	d402      	bmi.n	80096f2 <_vfiprintf_r+0x32>
 80096ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ee:	f7ff f9d8 	bl	8008aa2 <__retarget_lock_acquire_recursive>
 80096f2:	89ab      	ldrh	r3, [r5, #12]
 80096f4:	071b      	lsls	r3, r3, #28
 80096f6:	d501      	bpl.n	80096fc <_vfiprintf_r+0x3c>
 80096f8:	692b      	ldr	r3, [r5, #16]
 80096fa:	b9eb      	cbnz	r3, 8009738 <_vfiprintf_r+0x78>
 80096fc:	4629      	mov	r1, r5
 80096fe:	4630      	mov	r0, r6
 8009700:	f000 f9c6 	bl	8009a90 <__swsetup_r>
 8009704:	b1c0      	cbz	r0, 8009738 <_vfiprintf_r+0x78>
 8009706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009708:	07dc      	lsls	r4, r3, #31
 800970a:	d50e      	bpl.n	800972a <_vfiprintf_r+0x6a>
 800970c:	f04f 30ff 	mov.w	r0, #4294967295
 8009710:	b01d      	add	sp, #116	; 0x74
 8009712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009716:	4b7b      	ldr	r3, [pc, #492]	; (8009904 <_vfiprintf_r+0x244>)
 8009718:	429d      	cmp	r5, r3
 800971a:	d101      	bne.n	8009720 <_vfiprintf_r+0x60>
 800971c:	68b5      	ldr	r5, [r6, #8]
 800971e:	e7df      	b.n	80096e0 <_vfiprintf_r+0x20>
 8009720:	4b79      	ldr	r3, [pc, #484]	; (8009908 <_vfiprintf_r+0x248>)
 8009722:	429d      	cmp	r5, r3
 8009724:	bf08      	it	eq
 8009726:	68f5      	ldreq	r5, [r6, #12]
 8009728:	e7da      	b.n	80096e0 <_vfiprintf_r+0x20>
 800972a:	89ab      	ldrh	r3, [r5, #12]
 800972c:	0598      	lsls	r0, r3, #22
 800972e:	d4ed      	bmi.n	800970c <_vfiprintf_r+0x4c>
 8009730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009732:	f7ff f9b7 	bl	8008aa4 <__retarget_lock_release_recursive>
 8009736:	e7e9      	b.n	800970c <_vfiprintf_r+0x4c>
 8009738:	2300      	movs	r3, #0
 800973a:	9309      	str	r3, [sp, #36]	; 0x24
 800973c:	2320      	movs	r3, #32
 800973e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009742:	2330      	movs	r3, #48	; 0x30
 8009744:	f04f 0901 	mov.w	r9, #1
 8009748:	f8cd 800c 	str.w	r8, [sp, #12]
 800974c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800990c <_vfiprintf_r+0x24c>
 8009750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009754:	4623      	mov	r3, r4
 8009756:	469a      	mov	sl, r3
 8009758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800975c:	b10a      	cbz	r2, 8009762 <_vfiprintf_r+0xa2>
 800975e:	2a25      	cmp	r2, #37	; 0x25
 8009760:	d1f9      	bne.n	8009756 <_vfiprintf_r+0x96>
 8009762:	ebba 0b04 	subs.w	fp, sl, r4
 8009766:	d00b      	beq.n	8009780 <_vfiprintf_r+0xc0>
 8009768:	465b      	mov	r3, fp
 800976a:	4622      	mov	r2, r4
 800976c:	4629      	mov	r1, r5
 800976e:	4630      	mov	r0, r6
 8009770:	f7ff ff93 	bl	800969a <__sfputs_r>
 8009774:	3001      	adds	r0, #1
 8009776:	f000 80aa 	beq.w	80098ce <_vfiprintf_r+0x20e>
 800977a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800977c:	445a      	add	r2, fp
 800977e:	9209      	str	r2, [sp, #36]	; 0x24
 8009780:	f89a 3000 	ldrb.w	r3, [sl]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 80a2 	beq.w	80098ce <_vfiprintf_r+0x20e>
 800978a:	2300      	movs	r3, #0
 800978c:	f04f 32ff 	mov.w	r2, #4294967295
 8009790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009794:	f10a 0a01 	add.w	sl, sl, #1
 8009798:	9304      	str	r3, [sp, #16]
 800979a:	9307      	str	r3, [sp, #28]
 800979c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097a0:	931a      	str	r3, [sp, #104]	; 0x68
 80097a2:	4654      	mov	r4, sl
 80097a4:	2205      	movs	r2, #5
 80097a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097aa:	4858      	ldr	r0, [pc, #352]	; (800990c <_vfiprintf_r+0x24c>)
 80097ac:	f7ff f984 	bl	8008ab8 <memchr>
 80097b0:	9a04      	ldr	r2, [sp, #16]
 80097b2:	b9d8      	cbnz	r0, 80097ec <_vfiprintf_r+0x12c>
 80097b4:	06d1      	lsls	r1, r2, #27
 80097b6:	bf44      	itt	mi
 80097b8:	2320      	movmi	r3, #32
 80097ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097be:	0713      	lsls	r3, r2, #28
 80097c0:	bf44      	itt	mi
 80097c2:	232b      	movmi	r3, #43	; 0x2b
 80097c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097c8:	f89a 3000 	ldrb.w	r3, [sl]
 80097cc:	2b2a      	cmp	r3, #42	; 0x2a
 80097ce:	d015      	beq.n	80097fc <_vfiprintf_r+0x13c>
 80097d0:	4654      	mov	r4, sl
 80097d2:	2000      	movs	r0, #0
 80097d4:	f04f 0c0a 	mov.w	ip, #10
 80097d8:	9a07      	ldr	r2, [sp, #28]
 80097da:	4621      	mov	r1, r4
 80097dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097e0:	3b30      	subs	r3, #48	; 0x30
 80097e2:	2b09      	cmp	r3, #9
 80097e4:	d94e      	bls.n	8009884 <_vfiprintf_r+0x1c4>
 80097e6:	b1b0      	cbz	r0, 8009816 <_vfiprintf_r+0x156>
 80097e8:	9207      	str	r2, [sp, #28]
 80097ea:	e014      	b.n	8009816 <_vfiprintf_r+0x156>
 80097ec:	eba0 0308 	sub.w	r3, r0, r8
 80097f0:	fa09 f303 	lsl.w	r3, r9, r3
 80097f4:	4313      	orrs	r3, r2
 80097f6:	46a2      	mov	sl, r4
 80097f8:	9304      	str	r3, [sp, #16]
 80097fa:	e7d2      	b.n	80097a2 <_vfiprintf_r+0xe2>
 80097fc:	9b03      	ldr	r3, [sp, #12]
 80097fe:	1d19      	adds	r1, r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	9103      	str	r1, [sp, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	bfbb      	ittet	lt
 8009808:	425b      	neglt	r3, r3
 800980a:	f042 0202 	orrlt.w	r2, r2, #2
 800980e:	9307      	strge	r3, [sp, #28]
 8009810:	9307      	strlt	r3, [sp, #28]
 8009812:	bfb8      	it	lt
 8009814:	9204      	strlt	r2, [sp, #16]
 8009816:	7823      	ldrb	r3, [r4, #0]
 8009818:	2b2e      	cmp	r3, #46	; 0x2e
 800981a:	d10c      	bne.n	8009836 <_vfiprintf_r+0x176>
 800981c:	7863      	ldrb	r3, [r4, #1]
 800981e:	2b2a      	cmp	r3, #42	; 0x2a
 8009820:	d135      	bne.n	800988e <_vfiprintf_r+0x1ce>
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	3402      	adds	r4, #2
 8009826:	1d1a      	adds	r2, r3, #4
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	9203      	str	r2, [sp, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	bfb8      	it	lt
 8009830:	f04f 33ff 	movlt.w	r3, #4294967295
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009910 <_vfiprintf_r+0x250>
 800983a:	2203      	movs	r2, #3
 800983c:	4650      	mov	r0, sl
 800983e:	7821      	ldrb	r1, [r4, #0]
 8009840:	f7ff f93a 	bl	8008ab8 <memchr>
 8009844:	b140      	cbz	r0, 8009858 <_vfiprintf_r+0x198>
 8009846:	2340      	movs	r3, #64	; 0x40
 8009848:	eba0 000a 	sub.w	r0, r0, sl
 800984c:	fa03 f000 	lsl.w	r0, r3, r0
 8009850:	9b04      	ldr	r3, [sp, #16]
 8009852:	3401      	adds	r4, #1
 8009854:	4303      	orrs	r3, r0
 8009856:	9304      	str	r3, [sp, #16]
 8009858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800985c:	2206      	movs	r2, #6
 800985e:	482d      	ldr	r0, [pc, #180]	; (8009914 <_vfiprintf_r+0x254>)
 8009860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009864:	f7ff f928 	bl	8008ab8 <memchr>
 8009868:	2800      	cmp	r0, #0
 800986a:	d03f      	beq.n	80098ec <_vfiprintf_r+0x22c>
 800986c:	4b2a      	ldr	r3, [pc, #168]	; (8009918 <_vfiprintf_r+0x258>)
 800986e:	bb1b      	cbnz	r3, 80098b8 <_vfiprintf_r+0x1f8>
 8009870:	9b03      	ldr	r3, [sp, #12]
 8009872:	3307      	adds	r3, #7
 8009874:	f023 0307 	bic.w	r3, r3, #7
 8009878:	3308      	adds	r3, #8
 800987a:	9303      	str	r3, [sp, #12]
 800987c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987e:	443b      	add	r3, r7
 8009880:	9309      	str	r3, [sp, #36]	; 0x24
 8009882:	e767      	b.n	8009754 <_vfiprintf_r+0x94>
 8009884:	460c      	mov	r4, r1
 8009886:	2001      	movs	r0, #1
 8009888:	fb0c 3202 	mla	r2, ip, r2, r3
 800988c:	e7a5      	b.n	80097da <_vfiprintf_r+0x11a>
 800988e:	2300      	movs	r3, #0
 8009890:	f04f 0c0a 	mov.w	ip, #10
 8009894:	4619      	mov	r1, r3
 8009896:	3401      	adds	r4, #1
 8009898:	9305      	str	r3, [sp, #20]
 800989a:	4620      	mov	r0, r4
 800989c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098a0:	3a30      	subs	r2, #48	; 0x30
 80098a2:	2a09      	cmp	r2, #9
 80098a4:	d903      	bls.n	80098ae <_vfiprintf_r+0x1ee>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d0c5      	beq.n	8009836 <_vfiprintf_r+0x176>
 80098aa:	9105      	str	r1, [sp, #20]
 80098ac:	e7c3      	b.n	8009836 <_vfiprintf_r+0x176>
 80098ae:	4604      	mov	r4, r0
 80098b0:	2301      	movs	r3, #1
 80098b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098b6:	e7f0      	b.n	800989a <_vfiprintf_r+0x1da>
 80098b8:	ab03      	add	r3, sp, #12
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	462a      	mov	r2, r5
 80098be:	4630      	mov	r0, r6
 80098c0:	4b16      	ldr	r3, [pc, #88]	; (800991c <_vfiprintf_r+0x25c>)
 80098c2:	a904      	add	r1, sp, #16
 80098c4:	f7fd fd6e 	bl	80073a4 <_printf_float>
 80098c8:	4607      	mov	r7, r0
 80098ca:	1c78      	adds	r0, r7, #1
 80098cc:	d1d6      	bne.n	800987c <_vfiprintf_r+0x1bc>
 80098ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098d0:	07d9      	lsls	r1, r3, #31
 80098d2:	d405      	bmi.n	80098e0 <_vfiprintf_r+0x220>
 80098d4:	89ab      	ldrh	r3, [r5, #12]
 80098d6:	059a      	lsls	r2, r3, #22
 80098d8:	d402      	bmi.n	80098e0 <_vfiprintf_r+0x220>
 80098da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098dc:	f7ff f8e2 	bl	8008aa4 <__retarget_lock_release_recursive>
 80098e0:	89ab      	ldrh	r3, [r5, #12]
 80098e2:	065b      	lsls	r3, r3, #25
 80098e4:	f53f af12 	bmi.w	800970c <_vfiprintf_r+0x4c>
 80098e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ea:	e711      	b.n	8009710 <_vfiprintf_r+0x50>
 80098ec:	ab03      	add	r3, sp, #12
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	462a      	mov	r2, r5
 80098f2:	4630      	mov	r0, r6
 80098f4:	4b09      	ldr	r3, [pc, #36]	; (800991c <_vfiprintf_r+0x25c>)
 80098f6:	a904      	add	r1, sp, #16
 80098f8:	f7fd fff0 	bl	80078dc <_printf_i>
 80098fc:	e7e4      	b.n	80098c8 <_vfiprintf_r+0x208>
 80098fe:	bf00      	nop
 8009900:	0800a6bc 	.word	0x0800a6bc
 8009904:	0800a6dc 	.word	0x0800a6dc
 8009908:	0800a69c 	.word	0x0800a69c
 800990c:	0800a854 	.word	0x0800a854
 8009910:	0800a85a 	.word	0x0800a85a
 8009914:	0800a85e 	.word	0x0800a85e
 8009918:	080073a5 	.word	0x080073a5
 800991c:	0800969b 	.word	0x0800969b

08009920 <_sbrk_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	2300      	movs	r3, #0
 8009924:	4d05      	ldr	r5, [pc, #20]	; (800993c <_sbrk_r+0x1c>)
 8009926:	4604      	mov	r4, r0
 8009928:	4608      	mov	r0, r1
 800992a:	602b      	str	r3, [r5, #0]
 800992c:	f7f8 f88c 	bl	8001a48 <_sbrk>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_sbrk_r+0x1a>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_sbrk_r+0x1a>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	20000384 	.word	0x20000384

08009940 <__sread>:
 8009940:	b510      	push	{r4, lr}
 8009942:	460c      	mov	r4, r1
 8009944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009948:	f000 faee 	bl	8009f28 <_read_r>
 800994c:	2800      	cmp	r0, #0
 800994e:	bfab      	itete	ge
 8009950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009952:	89a3      	ldrhlt	r3, [r4, #12]
 8009954:	181b      	addge	r3, r3, r0
 8009956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800995a:	bfac      	ite	ge
 800995c:	6563      	strge	r3, [r4, #84]	; 0x54
 800995e:	81a3      	strhlt	r3, [r4, #12]
 8009960:	bd10      	pop	{r4, pc}

08009962 <__swrite>:
 8009962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009966:	461f      	mov	r7, r3
 8009968:	898b      	ldrh	r3, [r1, #12]
 800996a:	4605      	mov	r5, r0
 800996c:	05db      	lsls	r3, r3, #23
 800996e:	460c      	mov	r4, r1
 8009970:	4616      	mov	r6, r2
 8009972:	d505      	bpl.n	8009980 <__swrite+0x1e>
 8009974:	2302      	movs	r3, #2
 8009976:	2200      	movs	r2, #0
 8009978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800997c:	f000 f9f4 	bl	8009d68 <_lseek_r>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	4632      	mov	r2, r6
 8009984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	4628      	mov	r0, r5
 800998c:	463b      	mov	r3, r7
 800998e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	f000 b869 	b.w	8009a6c <_write_r>

0800999a <__sseek>:
 800999a:	b510      	push	{r4, lr}
 800999c:	460c      	mov	r4, r1
 800999e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a2:	f000 f9e1 	bl	8009d68 <_lseek_r>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	bf15      	itete	ne
 80099ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80099ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099b6:	81a3      	strheq	r3, [r4, #12]
 80099b8:	bf18      	it	ne
 80099ba:	81a3      	strhne	r3, [r4, #12]
 80099bc:	bd10      	pop	{r4, pc}

080099be <__sclose>:
 80099be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c2:	f000 b8f1 	b.w	8009ba8 <_close_r>
	...

080099c8 <__swbuf_r>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	460e      	mov	r6, r1
 80099cc:	4614      	mov	r4, r2
 80099ce:	4605      	mov	r5, r0
 80099d0:	b118      	cbz	r0, 80099da <__swbuf_r+0x12>
 80099d2:	6983      	ldr	r3, [r0, #24]
 80099d4:	b90b      	cbnz	r3, 80099da <__swbuf_r+0x12>
 80099d6:	f7fe ffc1 	bl	800895c <__sinit>
 80099da:	4b21      	ldr	r3, [pc, #132]	; (8009a60 <__swbuf_r+0x98>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	d12b      	bne.n	8009a38 <__swbuf_r+0x70>
 80099e0:	686c      	ldr	r4, [r5, #4]
 80099e2:	69a3      	ldr	r3, [r4, #24]
 80099e4:	60a3      	str	r3, [r4, #8]
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	071a      	lsls	r2, r3, #28
 80099ea:	d52f      	bpl.n	8009a4c <__swbuf_r+0x84>
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	b36b      	cbz	r3, 8009a4c <__swbuf_r+0x84>
 80099f0:	6923      	ldr	r3, [r4, #16]
 80099f2:	6820      	ldr	r0, [r4, #0]
 80099f4:	b2f6      	uxtb	r6, r6
 80099f6:	1ac0      	subs	r0, r0, r3
 80099f8:	6963      	ldr	r3, [r4, #20]
 80099fa:	4637      	mov	r7, r6
 80099fc:	4283      	cmp	r3, r0
 80099fe:	dc04      	bgt.n	8009a0a <__swbuf_r+0x42>
 8009a00:	4621      	mov	r1, r4
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 f962 	bl	8009ccc <_fflush_r>
 8009a08:	bb30      	cbnz	r0, 8009a58 <__swbuf_r+0x90>
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	60a3      	str	r3, [r4, #8]
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	1c5a      	adds	r2, r3, #1
 8009a16:	6022      	str	r2, [r4, #0]
 8009a18:	701e      	strb	r6, [r3, #0]
 8009a1a:	6963      	ldr	r3, [r4, #20]
 8009a1c:	4283      	cmp	r3, r0
 8009a1e:	d004      	beq.n	8009a2a <__swbuf_r+0x62>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	07db      	lsls	r3, r3, #31
 8009a24:	d506      	bpl.n	8009a34 <__swbuf_r+0x6c>
 8009a26:	2e0a      	cmp	r6, #10
 8009a28:	d104      	bne.n	8009a34 <__swbuf_r+0x6c>
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	f000 f94d 	bl	8009ccc <_fflush_r>
 8009a32:	b988      	cbnz	r0, 8009a58 <__swbuf_r+0x90>
 8009a34:	4638      	mov	r0, r7
 8009a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a38:	4b0a      	ldr	r3, [pc, #40]	; (8009a64 <__swbuf_r+0x9c>)
 8009a3a:	429c      	cmp	r4, r3
 8009a3c:	d101      	bne.n	8009a42 <__swbuf_r+0x7a>
 8009a3e:	68ac      	ldr	r4, [r5, #8]
 8009a40:	e7cf      	b.n	80099e2 <__swbuf_r+0x1a>
 8009a42:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <__swbuf_r+0xa0>)
 8009a44:	429c      	cmp	r4, r3
 8009a46:	bf08      	it	eq
 8009a48:	68ec      	ldreq	r4, [r5, #12]
 8009a4a:	e7ca      	b.n	80099e2 <__swbuf_r+0x1a>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f000 f81e 	bl	8009a90 <__swsetup_r>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d0cb      	beq.n	80099f0 <__swbuf_r+0x28>
 8009a58:	f04f 37ff 	mov.w	r7, #4294967295
 8009a5c:	e7ea      	b.n	8009a34 <__swbuf_r+0x6c>
 8009a5e:	bf00      	nop
 8009a60:	0800a6bc 	.word	0x0800a6bc
 8009a64:	0800a6dc 	.word	0x0800a6dc
 8009a68:	0800a69c 	.word	0x0800a69c

08009a6c <_write_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4604      	mov	r4, r0
 8009a70:	4608      	mov	r0, r1
 8009a72:	4611      	mov	r1, r2
 8009a74:	2200      	movs	r2, #0
 8009a76:	4d05      	ldr	r5, [pc, #20]	; (8009a8c <_write_r+0x20>)
 8009a78:	602a      	str	r2, [r5, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f7f7 ff98 	bl	80019b0 <_write>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_write_r+0x1e>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_write_r+0x1e>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	20000384 	.word	0x20000384

08009a90 <__swsetup_r>:
 8009a90:	4b32      	ldr	r3, [pc, #200]	; (8009b5c <__swsetup_r+0xcc>)
 8009a92:	b570      	push	{r4, r5, r6, lr}
 8009a94:	681d      	ldr	r5, [r3, #0]
 8009a96:	4606      	mov	r6, r0
 8009a98:	460c      	mov	r4, r1
 8009a9a:	b125      	cbz	r5, 8009aa6 <__swsetup_r+0x16>
 8009a9c:	69ab      	ldr	r3, [r5, #24]
 8009a9e:	b913      	cbnz	r3, 8009aa6 <__swsetup_r+0x16>
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f7fe ff5b 	bl	800895c <__sinit>
 8009aa6:	4b2e      	ldr	r3, [pc, #184]	; (8009b60 <__swsetup_r+0xd0>)
 8009aa8:	429c      	cmp	r4, r3
 8009aaa:	d10f      	bne.n	8009acc <__swsetup_r+0x3c>
 8009aac:	686c      	ldr	r4, [r5, #4]
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ab4:	0719      	lsls	r1, r3, #28
 8009ab6:	d42c      	bmi.n	8009b12 <__swsetup_r+0x82>
 8009ab8:	06dd      	lsls	r5, r3, #27
 8009aba:	d411      	bmi.n	8009ae0 <__swsetup_r+0x50>
 8009abc:	2309      	movs	r3, #9
 8009abe:	6033      	str	r3, [r6, #0]
 8009ac0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac8:	81a3      	strh	r3, [r4, #12]
 8009aca:	e03e      	b.n	8009b4a <__swsetup_r+0xba>
 8009acc:	4b25      	ldr	r3, [pc, #148]	; (8009b64 <__swsetup_r+0xd4>)
 8009ace:	429c      	cmp	r4, r3
 8009ad0:	d101      	bne.n	8009ad6 <__swsetup_r+0x46>
 8009ad2:	68ac      	ldr	r4, [r5, #8]
 8009ad4:	e7eb      	b.n	8009aae <__swsetup_r+0x1e>
 8009ad6:	4b24      	ldr	r3, [pc, #144]	; (8009b68 <__swsetup_r+0xd8>)
 8009ad8:	429c      	cmp	r4, r3
 8009ada:	bf08      	it	eq
 8009adc:	68ec      	ldreq	r4, [r5, #12]
 8009ade:	e7e6      	b.n	8009aae <__swsetup_r+0x1e>
 8009ae0:	0758      	lsls	r0, r3, #29
 8009ae2:	d512      	bpl.n	8009b0a <__swsetup_r+0x7a>
 8009ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ae6:	b141      	cbz	r1, 8009afa <__swsetup_r+0x6a>
 8009ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aec:	4299      	cmp	r1, r3
 8009aee:	d002      	beq.n	8009af6 <__swsetup_r+0x66>
 8009af0:	4630      	mov	r0, r6
 8009af2:	f7ff fb85 	bl	8009200 <_free_r>
 8009af6:	2300      	movs	r3, #0
 8009af8:	6363      	str	r3, [r4, #52]	; 0x34
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b00:	81a3      	strh	r3, [r4, #12]
 8009b02:	2300      	movs	r3, #0
 8009b04:	6063      	str	r3, [r4, #4]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	f043 0308 	orr.w	r3, r3, #8
 8009b10:	81a3      	strh	r3, [r4, #12]
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	b94b      	cbnz	r3, 8009b2a <__swsetup_r+0x9a>
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b20:	d003      	beq.n	8009b2a <__swsetup_r+0x9a>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4630      	mov	r0, r6
 8009b26:	f000 f957 	bl	8009dd8 <__smakebuf_r>
 8009b2a:	89a0      	ldrh	r0, [r4, #12]
 8009b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b30:	f010 0301 	ands.w	r3, r0, #1
 8009b34:	d00a      	beq.n	8009b4c <__swsetup_r+0xbc>
 8009b36:	2300      	movs	r3, #0
 8009b38:	60a3      	str	r3, [r4, #8]
 8009b3a:	6963      	ldr	r3, [r4, #20]
 8009b3c:	425b      	negs	r3, r3
 8009b3e:	61a3      	str	r3, [r4, #24]
 8009b40:	6923      	ldr	r3, [r4, #16]
 8009b42:	b943      	cbnz	r3, 8009b56 <__swsetup_r+0xc6>
 8009b44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b48:	d1ba      	bne.n	8009ac0 <__swsetup_r+0x30>
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}
 8009b4c:	0781      	lsls	r1, r0, #30
 8009b4e:	bf58      	it	pl
 8009b50:	6963      	ldrpl	r3, [r4, #20]
 8009b52:	60a3      	str	r3, [r4, #8]
 8009b54:	e7f4      	b.n	8009b40 <__swsetup_r+0xb0>
 8009b56:	2000      	movs	r0, #0
 8009b58:	e7f7      	b.n	8009b4a <__swsetup_r+0xba>
 8009b5a:	bf00      	nop
 8009b5c:	20000024 	.word	0x20000024
 8009b60:	0800a6bc 	.word	0x0800a6bc
 8009b64:	0800a6dc 	.word	0x0800a6dc
 8009b68:	0800a69c 	.word	0x0800a69c

08009b6c <__assert_func>:
 8009b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b6e:	4614      	mov	r4, r2
 8009b70:	461a      	mov	r2, r3
 8009b72:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <__assert_func+0x2c>)
 8009b74:	4605      	mov	r5, r0
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68d8      	ldr	r0, [r3, #12]
 8009b7a:	b14c      	cbz	r4, 8009b90 <__assert_func+0x24>
 8009b7c:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <__assert_func+0x30>)
 8009b7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b82:	9100      	str	r1, [sp, #0]
 8009b84:	462b      	mov	r3, r5
 8009b86:	4906      	ldr	r1, [pc, #24]	; (8009ba0 <__assert_func+0x34>)
 8009b88:	f000 f8dc 	bl	8009d44 <fiprintf>
 8009b8c:	f000 f9eb 	bl	8009f66 <abort>
 8009b90:	4b04      	ldr	r3, [pc, #16]	; (8009ba4 <__assert_func+0x38>)
 8009b92:	461c      	mov	r4, r3
 8009b94:	e7f3      	b.n	8009b7e <__assert_func+0x12>
 8009b96:	bf00      	nop
 8009b98:	20000024 	.word	0x20000024
 8009b9c:	0800a865 	.word	0x0800a865
 8009ba0:	0800a872 	.word	0x0800a872
 8009ba4:	0800a8a0 	.word	0x0800a8a0

08009ba8 <_close_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	2300      	movs	r3, #0
 8009bac:	4d05      	ldr	r5, [pc, #20]	; (8009bc4 <_close_r+0x1c>)
 8009bae:	4604      	mov	r4, r0
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	602b      	str	r3, [r5, #0]
 8009bb4:	f7f7 ff18 	bl	80019e8 <_close>
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	d102      	bne.n	8009bc2 <_close_r+0x1a>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	b103      	cbz	r3, 8009bc2 <_close_r+0x1a>
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
 8009bc4:	20000384 	.word	0x20000384

08009bc8 <__sflush_r>:
 8009bc8:	898a      	ldrh	r2, [r1, #12]
 8009bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bcc:	4605      	mov	r5, r0
 8009bce:	0710      	lsls	r0, r2, #28
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	d457      	bmi.n	8009c84 <__sflush_r+0xbc>
 8009bd4:	684b      	ldr	r3, [r1, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	dc04      	bgt.n	8009be4 <__sflush_r+0x1c>
 8009bda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dc01      	bgt.n	8009be4 <__sflush_r+0x1c>
 8009be0:	2000      	movs	r0, #0
 8009be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009be6:	2e00      	cmp	r6, #0
 8009be8:	d0fa      	beq.n	8009be0 <__sflush_r+0x18>
 8009bea:	2300      	movs	r3, #0
 8009bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bf0:	682f      	ldr	r7, [r5, #0]
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	d032      	beq.n	8009c5c <__sflush_r+0x94>
 8009bf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	075a      	lsls	r2, r3, #29
 8009bfc:	d505      	bpl.n	8009c0a <__sflush_r+0x42>
 8009bfe:	6863      	ldr	r3, [r4, #4]
 8009c00:	1ac0      	subs	r0, r0, r3
 8009c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c04:	b10b      	cbz	r3, 8009c0a <__sflush_r+0x42>
 8009c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c08:	1ac0      	subs	r0, r0, r3
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c10:	4628      	mov	r0, r5
 8009c12:	6a21      	ldr	r1, [r4, #32]
 8009c14:	47b0      	blx	r6
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	d106      	bne.n	8009c2a <__sflush_r+0x62>
 8009c1c:	6829      	ldr	r1, [r5, #0]
 8009c1e:	291d      	cmp	r1, #29
 8009c20:	d82c      	bhi.n	8009c7c <__sflush_r+0xb4>
 8009c22:	4a29      	ldr	r2, [pc, #164]	; (8009cc8 <__sflush_r+0x100>)
 8009c24:	40ca      	lsrs	r2, r1
 8009c26:	07d6      	lsls	r6, r2, #31
 8009c28:	d528      	bpl.n	8009c7c <__sflush_r+0xb4>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	6062      	str	r2, [r4, #4]
 8009c2e:	6922      	ldr	r2, [r4, #16]
 8009c30:	04d9      	lsls	r1, r3, #19
 8009c32:	6022      	str	r2, [r4, #0]
 8009c34:	d504      	bpl.n	8009c40 <__sflush_r+0x78>
 8009c36:	1c42      	adds	r2, r0, #1
 8009c38:	d101      	bne.n	8009c3e <__sflush_r+0x76>
 8009c3a:	682b      	ldr	r3, [r5, #0]
 8009c3c:	b903      	cbnz	r3, 8009c40 <__sflush_r+0x78>
 8009c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c42:	602f      	str	r7, [r5, #0]
 8009c44:	2900      	cmp	r1, #0
 8009c46:	d0cb      	beq.n	8009be0 <__sflush_r+0x18>
 8009c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	d002      	beq.n	8009c56 <__sflush_r+0x8e>
 8009c50:	4628      	mov	r0, r5
 8009c52:	f7ff fad5 	bl	8009200 <_free_r>
 8009c56:	2000      	movs	r0, #0
 8009c58:	6360      	str	r0, [r4, #52]	; 0x34
 8009c5a:	e7c2      	b.n	8009be2 <__sflush_r+0x1a>
 8009c5c:	6a21      	ldr	r1, [r4, #32]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4628      	mov	r0, r5
 8009c62:	47b0      	blx	r6
 8009c64:	1c41      	adds	r1, r0, #1
 8009c66:	d1c7      	bne.n	8009bf8 <__sflush_r+0x30>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d0c4      	beq.n	8009bf8 <__sflush_r+0x30>
 8009c6e:	2b1d      	cmp	r3, #29
 8009c70:	d001      	beq.n	8009c76 <__sflush_r+0xae>
 8009c72:	2b16      	cmp	r3, #22
 8009c74:	d101      	bne.n	8009c7a <__sflush_r+0xb2>
 8009c76:	602f      	str	r7, [r5, #0]
 8009c78:	e7b2      	b.n	8009be0 <__sflush_r+0x18>
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	e7ae      	b.n	8009be2 <__sflush_r+0x1a>
 8009c84:	690f      	ldr	r7, [r1, #16]
 8009c86:	2f00      	cmp	r7, #0
 8009c88:	d0aa      	beq.n	8009be0 <__sflush_r+0x18>
 8009c8a:	0793      	lsls	r3, r2, #30
 8009c8c:	bf18      	it	ne
 8009c8e:	2300      	movne	r3, #0
 8009c90:	680e      	ldr	r6, [r1, #0]
 8009c92:	bf08      	it	eq
 8009c94:	694b      	ldreq	r3, [r1, #20]
 8009c96:	1bf6      	subs	r6, r6, r7
 8009c98:	600f      	str	r7, [r1, #0]
 8009c9a:	608b      	str	r3, [r1, #8]
 8009c9c:	2e00      	cmp	r6, #0
 8009c9e:	dd9f      	ble.n	8009be0 <__sflush_r+0x18>
 8009ca0:	4633      	mov	r3, r6
 8009ca2:	463a      	mov	r2, r7
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	6a21      	ldr	r1, [r4, #32]
 8009ca8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009cac:	47e0      	blx	ip
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	dc06      	bgt.n	8009cc0 <__sflush_r+0xf8>
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	e790      	b.n	8009be2 <__sflush_r+0x1a>
 8009cc0:	4407      	add	r7, r0
 8009cc2:	1a36      	subs	r6, r6, r0
 8009cc4:	e7ea      	b.n	8009c9c <__sflush_r+0xd4>
 8009cc6:	bf00      	nop
 8009cc8:	20400001 	.word	0x20400001

08009ccc <_fflush_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	690b      	ldr	r3, [r1, #16]
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	b913      	cbnz	r3, 8009cdc <_fflush_r+0x10>
 8009cd6:	2500      	movs	r5, #0
 8009cd8:	4628      	mov	r0, r5
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	b118      	cbz	r0, 8009ce6 <_fflush_r+0x1a>
 8009cde:	6983      	ldr	r3, [r0, #24]
 8009ce0:	b90b      	cbnz	r3, 8009ce6 <_fflush_r+0x1a>
 8009ce2:	f7fe fe3b 	bl	800895c <__sinit>
 8009ce6:	4b14      	ldr	r3, [pc, #80]	; (8009d38 <_fflush_r+0x6c>)
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	d11b      	bne.n	8009d24 <_fflush_r+0x58>
 8009cec:	686c      	ldr	r4, [r5, #4]
 8009cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0ef      	beq.n	8009cd6 <_fflush_r+0xa>
 8009cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cf8:	07d0      	lsls	r0, r2, #31
 8009cfa:	d404      	bmi.n	8009d06 <_fflush_r+0x3a>
 8009cfc:	0599      	lsls	r1, r3, #22
 8009cfe:	d402      	bmi.n	8009d06 <_fflush_r+0x3a>
 8009d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d02:	f7fe fece 	bl	8008aa2 <__retarget_lock_acquire_recursive>
 8009d06:	4628      	mov	r0, r5
 8009d08:	4621      	mov	r1, r4
 8009d0a:	f7ff ff5d 	bl	8009bc8 <__sflush_r>
 8009d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d10:	4605      	mov	r5, r0
 8009d12:	07da      	lsls	r2, r3, #31
 8009d14:	d4e0      	bmi.n	8009cd8 <_fflush_r+0xc>
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	059b      	lsls	r3, r3, #22
 8009d1a:	d4dd      	bmi.n	8009cd8 <_fflush_r+0xc>
 8009d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d1e:	f7fe fec1 	bl	8008aa4 <__retarget_lock_release_recursive>
 8009d22:	e7d9      	b.n	8009cd8 <_fflush_r+0xc>
 8009d24:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <_fflush_r+0x70>)
 8009d26:	429c      	cmp	r4, r3
 8009d28:	d101      	bne.n	8009d2e <_fflush_r+0x62>
 8009d2a:	68ac      	ldr	r4, [r5, #8]
 8009d2c:	e7df      	b.n	8009cee <_fflush_r+0x22>
 8009d2e:	4b04      	ldr	r3, [pc, #16]	; (8009d40 <_fflush_r+0x74>)
 8009d30:	429c      	cmp	r4, r3
 8009d32:	bf08      	it	eq
 8009d34:	68ec      	ldreq	r4, [r5, #12]
 8009d36:	e7da      	b.n	8009cee <_fflush_r+0x22>
 8009d38:	0800a6bc 	.word	0x0800a6bc
 8009d3c:	0800a6dc 	.word	0x0800a6dc
 8009d40:	0800a69c 	.word	0x0800a69c

08009d44 <fiprintf>:
 8009d44:	b40e      	push	{r1, r2, r3}
 8009d46:	b503      	push	{r0, r1, lr}
 8009d48:	4601      	mov	r1, r0
 8009d4a:	ab03      	add	r3, sp, #12
 8009d4c:	4805      	ldr	r0, [pc, #20]	; (8009d64 <fiprintf+0x20>)
 8009d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d52:	6800      	ldr	r0, [r0, #0]
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	f7ff fcb3 	bl	80096c0 <_vfiprintf_r>
 8009d5a:	b002      	add	sp, #8
 8009d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d60:	b003      	add	sp, #12
 8009d62:	4770      	bx	lr
 8009d64:	20000024 	.word	0x20000024

08009d68 <_lseek_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	4611      	mov	r1, r2
 8009d70:	2200      	movs	r2, #0
 8009d72:	4d05      	ldr	r5, [pc, #20]	; (8009d88 <_lseek_r+0x20>)
 8009d74:	602a      	str	r2, [r5, #0]
 8009d76:	461a      	mov	r2, r3
 8009d78:	f7f7 fe5a 	bl	8001a30 <_lseek>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_lseek_r+0x1e>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_lseek_r+0x1e>
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	20000384 	.word	0x20000384

08009d8c <__swhatbuf_r>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	460e      	mov	r6, r1
 8009d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d94:	4614      	mov	r4, r2
 8009d96:	2900      	cmp	r1, #0
 8009d98:	461d      	mov	r5, r3
 8009d9a:	b096      	sub	sp, #88	; 0x58
 8009d9c:	da08      	bge.n	8009db0 <__swhatbuf_r+0x24>
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009da4:	602a      	str	r2, [r5, #0]
 8009da6:	061a      	lsls	r2, r3, #24
 8009da8:	d410      	bmi.n	8009dcc <__swhatbuf_r+0x40>
 8009daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dae:	e00e      	b.n	8009dce <__swhatbuf_r+0x42>
 8009db0:	466a      	mov	r2, sp
 8009db2:	f000 f8df 	bl	8009f74 <_fstat_r>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	dbf1      	blt.n	8009d9e <__swhatbuf_r+0x12>
 8009dba:	9a01      	ldr	r2, [sp, #4]
 8009dbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dc4:	425a      	negs	r2, r3
 8009dc6:	415a      	adcs	r2, r3
 8009dc8:	602a      	str	r2, [r5, #0]
 8009dca:	e7ee      	b.n	8009daa <__swhatbuf_r+0x1e>
 8009dcc:	2340      	movs	r3, #64	; 0x40
 8009dce:	2000      	movs	r0, #0
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	b016      	add	sp, #88	; 0x58
 8009dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009dd8 <__smakebuf_r>:
 8009dd8:	898b      	ldrh	r3, [r1, #12]
 8009dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ddc:	079d      	lsls	r5, r3, #30
 8009dde:	4606      	mov	r6, r0
 8009de0:	460c      	mov	r4, r1
 8009de2:	d507      	bpl.n	8009df4 <__smakebuf_r+0x1c>
 8009de4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	6123      	str	r3, [r4, #16]
 8009dec:	2301      	movs	r3, #1
 8009dee:	6163      	str	r3, [r4, #20]
 8009df0:	b002      	add	sp, #8
 8009df2:	bd70      	pop	{r4, r5, r6, pc}
 8009df4:	466a      	mov	r2, sp
 8009df6:	ab01      	add	r3, sp, #4
 8009df8:	f7ff ffc8 	bl	8009d8c <__swhatbuf_r>
 8009dfc:	9900      	ldr	r1, [sp, #0]
 8009dfe:	4605      	mov	r5, r0
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7ff fa65 	bl	80092d0 <_malloc_r>
 8009e06:	b948      	cbnz	r0, 8009e1c <__smakebuf_r+0x44>
 8009e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e0c:	059a      	lsls	r2, r3, #22
 8009e0e:	d4ef      	bmi.n	8009df0 <__smakebuf_r+0x18>
 8009e10:	f023 0303 	bic.w	r3, r3, #3
 8009e14:	f043 0302 	orr.w	r3, r3, #2
 8009e18:	81a3      	strh	r3, [r4, #12]
 8009e1a:	e7e3      	b.n	8009de4 <__smakebuf_r+0xc>
 8009e1c:	4b0d      	ldr	r3, [pc, #52]	; (8009e54 <__smakebuf_r+0x7c>)
 8009e1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	6020      	str	r0, [r4, #0]
 8009e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	9b00      	ldr	r3, [sp, #0]
 8009e2c:	6120      	str	r0, [r4, #16]
 8009e2e:	6163      	str	r3, [r4, #20]
 8009e30:	9b01      	ldr	r3, [sp, #4]
 8009e32:	b15b      	cbz	r3, 8009e4c <__smakebuf_r+0x74>
 8009e34:	4630      	mov	r0, r6
 8009e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e3a:	f000 f8ad 	bl	8009f98 <_isatty_r>
 8009e3e:	b128      	cbz	r0, 8009e4c <__smakebuf_r+0x74>
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	f023 0303 	bic.w	r3, r3, #3
 8009e46:	f043 0301 	orr.w	r3, r3, #1
 8009e4a:	81a3      	strh	r3, [r4, #12]
 8009e4c:	89a0      	ldrh	r0, [r4, #12]
 8009e4e:	4305      	orrs	r5, r0
 8009e50:	81a5      	strh	r5, [r4, #12]
 8009e52:	e7cd      	b.n	8009df0 <__smakebuf_r+0x18>
 8009e54:	080088f5 	.word	0x080088f5

08009e58 <__ascii_mbtowc>:
 8009e58:	b082      	sub	sp, #8
 8009e5a:	b901      	cbnz	r1, 8009e5e <__ascii_mbtowc+0x6>
 8009e5c:	a901      	add	r1, sp, #4
 8009e5e:	b142      	cbz	r2, 8009e72 <__ascii_mbtowc+0x1a>
 8009e60:	b14b      	cbz	r3, 8009e76 <__ascii_mbtowc+0x1e>
 8009e62:	7813      	ldrb	r3, [r2, #0]
 8009e64:	600b      	str	r3, [r1, #0]
 8009e66:	7812      	ldrb	r2, [r2, #0]
 8009e68:	1e10      	subs	r0, r2, #0
 8009e6a:	bf18      	it	ne
 8009e6c:	2001      	movne	r0, #1
 8009e6e:	b002      	add	sp, #8
 8009e70:	4770      	bx	lr
 8009e72:	4610      	mov	r0, r2
 8009e74:	e7fb      	b.n	8009e6e <__ascii_mbtowc+0x16>
 8009e76:	f06f 0001 	mvn.w	r0, #1
 8009e7a:	e7f8      	b.n	8009e6e <__ascii_mbtowc+0x16>

08009e7c <memmove>:
 8009e7c:	4288      	cmp	r0, r1
 8009e7e:	b510      	push	{r4, lr}
 8009e80:	eb01 0402 	add.w	r4, r1, r2
 8009e84:	d902      	bls.n	8009e8c <memmove+0x10>
 8009e86:	4284      	cmp	r4, r0
 8009e88:	4623      	mov	r3, r4
 8009e8a:	d807      	bhi.n	8009e9c <memmove+0x20>
 8009e8c:	1e43      	subs	r3, r0, #1
 8009e8e:	42a1      	cmp	r1, r4
 8009e90:	d008      	beq.n	8009ea4 <memmove+0x28>
 8009e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e9a:	e7f8      	b.n	8009e8e <memmove+0x12>
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	4402      	add	r2, r0
 8009ea0:	428a      	cmp	r2, r1
 8009ea2:	d100      	bne.n	8009ea6 <memmove+0x2a>
 8009ea4:	bd10      	pop	{r4, pc}
 8009ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eae:	e7f7      	b.n	8009ea0 <memmove+0x24>

08009eb0 <__malloc_lock>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	; (8009eb8 <__malloc_lock+0x8>)
 8009eb2:	f7fe bdf6 	b.w	8008aa2 <__retarget_lock_acquire_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	20000376 	.word	0x20000376

08009ebc <__malloc_unlock>:
 8009ebc:	4801      	ldr	r0, [pc, #4]	; (8009ec4 <__malloc_unlock+0x8>)
 8009ebe:	f7fe bdf1 	b.w	8008aa4 <__retarget_lock_release_recursive>
 8009ec2:	bf00      	nop
 8009ec4:	20000376 	.word	0x20000376

08009ec8 <_realloc_r>:
 8009ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ecc:	4680      	mov	r8, r0
 8009ece:	4614      	mov	r4, r2
 8009ed0:	460e      	mov	r6, r1
 8009ed2:	b921      	cbnz	r1, 8009ede <_realloc_r+0x16>
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eda:	f7ff b9f9 	b.w	80092d0 <_malloc_r>
 8009ede:	b92a      	cbnz	r2, 8009eec <_realloc_r+0x24>
 8009ee0:	f7ff f98e 	bl	8009200 <_free_r>
 8009ee4:	4625      	mov	r5, r4
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eec:	f000 f864 	bl	8009fb8 <_malloc_usable_size_r>
 8009ef0:	4284      	cmp	r4, r0
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	d802      	bhi.n	8009efc <_realloc_r+0x34>
 8009ef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009efa:	d812      	bhi.n	8009f22 <_realloc_r+0x5a>
 8009efc:	4621      	mov	r1, r4
 8009efe:	4640      	mov	r0, r8
 8009f00:	f7ff f9e6 	bl	80092d0 <_malloc_r>
 8009f04:	4605      	mov	r5, r0
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d0ed      	beq.n	8009ee6 <_realloc_r+0x1e>
 8009f0a:	42bc      	cmp	r4, r7
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	4631      	mov	r1, r6
 8009f10:	bf28      	it	cs
 8009f12:	463a      	movcs	r2, r7
 8009f14:	f7fd f992 	bl	800723c <memcpy>
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	f7ff f970 	bl	8009200 <_free_r>
 8009f20:	e7e1      	b.n	8009ee6 <_realloc_r+0x1e>
 8009f22:	4635      	mov	r5, r6
 8009f24:	e7df      	b.n	8009ee6 <_realloc_r+0x1e>
	...

08009f28 <_read_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	4608      	mov	r0, r1
 8009f2e:	4611      	mov	r1, r2
 8009f30:	2200      	movs	r2, #0
 8009f32:	4d05      	ldr	r5, [pc, #20]	; (8009f48 <_read_r+0x20>)
 8009f34:	602a      	str	r2, [r5, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	f7f7 fd1d 	bl	8001976 <_read>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_read_r+0x1e>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_read_r+0x1e>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20000384 	.word	0x20000384

08009f4c <__ascii_wctomb>:
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	4608      	mov	r0, r1
 8009f50:	b141      	cbz	r1, 8009f64 <__ascii_wctomb+0x18>
 8009f52:	2aff      	cmp	r2, #255	; 0xff
 8009f54:	d904      	bls.n	8009f60 <__ascii_wctomb+0x14>
 8009f56:	228a      	movs	r2, #138	; 0x8a
 8009f58:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	4770      	bx	lr
 8009f60:	2001      	movs	r0, #1
 8009f62:	700a      	strb	r2, [r1, #0]
 8009f64:	4770      	bx	lr

08009f66 <abort>:
 8009f66:	2006      	movs	r0, #6
 8009f68:	b508      	push	{r3, lr}
 8009f6a:	f000 f855 	bl	800a018 <raise>
 8009f6e:	2001      	movs	r0, #1
 8009f70:	f7f7 fcf7 	bl	8001962 <_exit>

08009f74 <_fstat_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	2300      	movs	r3, #0
 8009f78:	4d06      	ldr	r5, [pc, #24]	; (8009f94 <_fstat_r+0x20>)
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	4608      	mov	r0, r1
 8009f7e:	4611      	mov	r1, r2
 8009f80:	602b      	str	r3, [r5, #0]
 8009f82:	f7f7 fd3c 	bl	80019fe <_fstat>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	d102      	bne.n	8009f90 <_fstat_r+0x1c>
 8009f8a:	682b      	ldr	r3, [r5, #0]
 8009f8c:	b103      	cbz	r3, 8009f90 <_fstat_r+0x1c>
 8009f8e:	6023      	str	r3, [r4, #0]
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
 8009f92:	bf00      	nop
 8009f94:	20000384 	.word	0x20000384

08009f98 <_isatty_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	4d05      	ldr	r5, [pc, #20]	; (8009fb4 <_isatty_r+0x1c>)
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	f7f7 fd3a 	bl	8001a1c <_isatty>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_isatty_r+0x1a>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_isatty_r+0x1a>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	20000384 	.word	0x20000384

08009fb8 <_malloc_usable_size_r>:
 8009fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fbc:	1f18      	subs	r0, r3, #4
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	bfbc      	itt	lt
 8009fc2:	580b      	ldrlt	r3, [r1, r0]
 8009fc4:	18c0      	addlt	r0, r0, r3
 8009fc6:	4770      	bx	lr

08009fc8 <_raise_r>:
 8009fc8:	291f      	cmp	r1, #31
 8009fca:	b538      	push	{r3, r4, r5, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	460d      	mov	r5, r1
 8009fd0:	d904      	bls.n	8009fdc <_raise_r+0x14>
 8009fd2:	2316      	movs	r3, #22
 8009fd4:	6003      	str	r3, [r0, #0]
 8009fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009fde:	b112      	cbz	r2, 8009fe6 <_raise_r+0x1e>
 8009fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fe4:	b94b      	cbnz	r3, 8009ffa <_raise_r+0x32>
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 f830 	bl	800a04c <_getpid_r>
 8009fec:	462a      	mov	r2, r5
 8009fee:	4601      	mov	r1, r0
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ff6:	f000 b817 	b.w	800a028 <_kill_r>
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d00a      	beq.n	800a014 <_raise_r+0x4c>
 8009ffe:	1c59      	adds	r1, r3, #1
 800a000:	d103      	bne.n	800a00a <_raise_r+0x42>
 800a002:	2316      	movs	r3, #22
 800a004:	6003      	str	r3, [r0, #0]
 800a006:	2001      	movs	r0, #1
 800a008:	e7e7      	b.n	8009fda <_raise_r+0x12>
 800a00a:	2400      	movs	r4, #0
 800a00c:	4628      	mov	r0, r5
 800a00e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a012:	4798      	blx	r3
 800a014:	2000      	movs	r0, #0
 800a016:	e7e0      	b.n	8009fda <_raise_r+0x12>

0800a018 <raise>:
 800a018:	4b02      	ldr	r3, [pc, #8]	; (800a024 <raise+0xc>)
 800a01a:	4601      	mov	r1, r0
 800a01c:	6818      	ldr	r0, [r3, #0]
 800a01e:	f7ff bfd3 	b.w	8009fc8 <_raise_r>
 800a022:	bf00      	nop
 800a024:	20000024 	.word	0x20000024

0800a028 <_kill_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	2300      	movs	r3, #0
 800a02c:	4d06      	ldr	r5, [pc, #24]	; (800a048 <_kill_r+0x20>)
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	4611      	mov	r1, r2
 800a034:	602b      	str	r3, [r5, #0]
 800a036:	f7f7 fc84 	bl	8001942 <_kill>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	d102      	bne.n	800a044 <_kill_r+0x1c>
 800a03e:	682b      	ldr	r3, [r5, #0]
 800a040:	b103      	cbz	r3, 800a044 <_kill_r+0x1c>
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	bd38      	pop	{r3, r4, r5, pc}
 800a046:	bf00      	nop
 800a048:	20000384 	.word	0x20000384

0800a04c <_getpid_r>:
 800a04c:	f7f7 bc72 	b.w	8001934 <_getpid>

0800a050 <round>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a056:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800a05a:	2c13      	cmp	r4, #19
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	4606      	mov	r6, r0
 800a062:	460d      	mov	r5, r1
 800a064:	dc19      	bgt.n	800a09a <round+0x4a>
 800a066:	2c00      	cmp	r4, #0
 800a068:	da09      	bge.n	800a07e <round+0x2e>
 800a06a:	3401      	adds	r4, #1
 800a06c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a070:	d103      	bne.n	800a07a <round+0x2a>
 800a072:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a076:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a07a:	2200      	movs	r2, #0
 800a07c:	e02a      	b.n	800a0d4 <round+0x84>
 800a07e:	4917      	ldr	r1, [pc, #92]	; (800a0dc <round+0x8c>)
 800a080:	4121      	asrs	r1, r4
 800a082:	ea03 0001 	and.w	r0, r3, r1
 800a086:	4302      	orrs	r2, r0
 800a088:	d010      	beq.n	800a0ac <round+0x5c>
 800a08a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a08e:	fa42 f404 	asr.w	r4, r2, r4
 800a092:	4423      	add	r3, r4
 800a094:	ea23 0301 	bic.w	r3, r3, r1
 800a098:	e7ef      	b.n	800a07a <round+0x2a>
 800a09a:	2c33      	cmp	r4, #51	; 0x33
 800a09c:	dd09      	ble.n	800a0b2 <round+0x62>
 800a09e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a0a2:	d103      	bne.n	800a0ac <round+0x5c>
 800a0a4:	f7f6 f862 	bl	800016c <__adddf3>
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b2:	f04f 31ff 	mov.w	r1, #4294967295
 800a0b6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a0ba:	40f9      	lsrs	r1, r7
 800a0bc:	4208      	tst	r0, r1
 800a0be:	d0f5      	beq.n	800a0ac <round+0x5c>
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a0c6:	fa00 f404 	lsl.w	r4, r0, r4
 800a0ca:	1912      	adds	r2, r2, r4
 800a0cc:	bf28      	it	cs
 800a0ce:	181b      	addcs	r3, r3, r0
 800a0d0:	ea22 0201 	bic.w	r2, r2, r1
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	e7e6      	b.n	800a0a8 <round+0x58>
 800a0da:	bf00      	nop
 800a0dc:	000fffff 	.word	0x000fffff

0800a0e0 <_init>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	bf00      	nop
 800a0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e6:	bc08      	pop	{r3}
 800a0e8:	469e      	mov	lr, r3
 800a0ea:	4770      	bx	lr

0800a0ec <_fini>:
 800a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ee:	bf00      	nop
 800a0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f2:	bc08      	pop	{r3}
 800a0f4:	469e      	mov	lr, r3
 800a0f6:	4770      	bx	lr
