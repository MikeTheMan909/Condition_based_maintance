
CBM_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a404  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  0800a518  0800a518  0001a518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800addc  0800addc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800addc  0800addc  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800addc  0800addc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800addc  0800addc  0001addc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade0  0800ade0  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ade4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001f4  0800afd8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  0800afd8  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b40  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e49  00000000  00000000  00036d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0003aba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  0003c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc40  00000000  00000000  0003dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aca8  00000000  00000000  0005b710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d8cf  00000000  00000000  000763b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113c87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007838  00000000  00000000  00113cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a4fc 	.word	0x0800a4fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800a4fc 	.word	0x0800a4fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b0f6      	sub	sp, #472	; 0x1d8
 8001100:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f003 f955 	bl	80043b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 f9bf 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f000 faa7 	bl	800165c <MX_GPIO_Init>
  MX_SPI1_Init();
 800110e:	f000 f9f7 	bl	8001500 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001112:	f000 fa79 	bl	8001608 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001116:	f000 fa29 	bl	800156c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  c = config();
 800111a:	4c9c      	ldr	r4, [pc, #624]	; (800138c <main+0x290>)
 800111c:	463b      	mov	r3, r7
 800111e:	4618      	mov	r0, r3
 8001120:	f005 fbb8 	bl	8006894 <config>
 8001124:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001128:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800112c:	461d      	mov	r5, r3
 800112e:	6828      	ldr	r0, [r5, #0]
 8001130:	6869      	ldr	r1, [r5, #4]
 8001132:	68aa      	ldr	r2, [r5, #8]
 8001134:	68eb      	ldr	r3, [r5, #12]
 8001136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001138:	7c2b      	ldrb	r3, [r5, #16]
 800113a:	7023      	strb	r3, [r4, #0]

  main_print_debug("****************PROGRAM STARTED******************");
 800113c:	4b94      	ldr	r3, [pc, #592]	; (8001390 <main+0x294>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4994      	ldr	r1, [pc, #592]	; (8001394 <main+0x298>)
 8001142:	4618      	mov	r0, r3
 8001144:	f005 ffea 	bl	800711c <print_debug>
  main_print_debug("Peripherals initialized!");
 8001148:	4b91      	ldr	r3, [pc, #580]	; (8001390 <main+0x294>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4992      	ldr	r1, [pc, #584]	; (8001398 <main+0x29c>)
 800114e:	4618      	mov	r0, r3
 8001150:	f005 ffe4 	bl	800711c <print_debug>
  comm_start();
 8001154:	f005 ffd6 	bl	8007104 <comm_start>

  main_print_debug("SPSGRF initialized!");
 8001158:	4b8d      	ldr	r3, [pc, #564]	; (8001390 <main+0x294>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	498f      	ldr	r1, [pc, #572]	; (800139c <main+0x2a0>)
 800115e:	4618      	mov	r0, r3
 8001160:	f005 ffdc 	bl	800711c <print_debug>
  uint8_t enc_data[16];
  uint8_t dec_data[12];
  uint8_t len;

  struct sensor_values sensor_value;
  sensor_value.temperature = 21.32;
 8001164:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001168:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800116c:	4a8c      	ldr	r2, [pc, #560]	; (80013a0 <main+0x2a4>)
 800116e:	601a      	str	r2, [r3, #0]
  sensor_value.acc.x.rms = 21.32;
 8001170:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001174:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001178:	4a89      	ldr	r2, [pc, #548]	; (80013a0 <main+0x2a4>)
 800117a:	605a      	str	r2, [r3, #4]
  sensor_value.acc.x.peak = 11.23;
 800117c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001180:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001184:	4a87      	ldr	r2, [pc, #540]	; (80013a4 <main+0x2a8>)
 8001186:	609a      	str	r2, [r3, #8]
  sensor_value.acc.x.crest = 8.1;
 8001188:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800118c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001190:	4a85      	ldr	r2, [pc, #532]	; (80013a8 <main+0x2ac>)
 8001192:	60da      	str	r2, [r3, #12]
  sensor_value.acc.y.rms = 21.324;
 8001194:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001198:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800119c:	4a83      	ldr	r2, [pc, #524]	; (80013ac <main+0x2b0>)
 800119e:	611a      	str	r2, [r3, #16]
  sensor_value.acc.y.peak = 11.234;
 80011a0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011a4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011a8:	4a81      	ldr	r2, [pc, #516]	; (80013b0 <main+0x2b4>)
 80011aa:	615a      	str	r2, [r3, #20]
  sensor_value.acc.y.crest = 8.13;
 80011ac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011b0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011b4:	4a7f      	ldr	r2, [pc, #508]	; (80013b4 <main+0x2b8>)
 80011b6:	619a      	str	r2, [r3, #24]
  sensor_value.acc.z.rms = 21.327;
 80011b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011bc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011c0:	4a7d      	ldr	r2, [pc, #500]	; (80013b8 <main+0x2bc>)
 80011c2:	61da      	str	r2, [r3, #28]
  sensor_value.acc.z.peak = 11.231;
 80011c4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011c8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011cc:	4a7b      	ldr	r2, [pc, #492]	; (80013bc <main+0x2c0>)
 80011ce:	621a      	str	r2, [r3, #32]
  sensor_value.acc.z.crest = 8.12;
 80011d0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011d4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011d8:	4a79      	ldr	r2, [pc, #484]	; (80013c0 <main+0x2c4>)
 80011da:	625a      	str	r2, [r3, #36]	; 0x24

  sensor_value.velo.x.rms = 21.32;
 80011dc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011e0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011e4:	4a6e      	ldr	r2, [pc, #440]	; (80013a0 <main+0x2a4>)
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
  sensor_value.velo.x.peak = 11.23;
 80011e8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011ec:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011f0:	4a6c      	ldr	r2, [pc, #432]	; (80013a4 <main+0x2a8>)
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  sensor_value.velo.x.crest = 8.1;
 80011f4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80011f8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011fc:	4a6a      	ldr	r2, [pc, #424]	; (80013a8 <main+0x2ac>)
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
  sensor_value.velo.y.rms = 21.324;
 8001200:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001204:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001208:	4a68      	ldr	r2, [pc, #416]	; (80013ac <main+0x2b0>)
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
  sensor_value.velo.y.peak = 11.234;
 800120c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001210:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001214:	4a66      	ldr	r2, [pc, #408]	; (80013b0 <main+0x2b4>)
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
  sensor_value.velo.y.crest = 8.13;
 8001218:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800121c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001220:	4a64      	ldr	r2, [pc, #400]	; (80013b4 <main+0x2b8>)
 8001222:	63da      	str	r2, [r3, #60]	; 0x3c
  sensor_value.velo.z.rms = 21.327;
 8001224:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001228:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800122c:	4a62      	ldr	r2, [pc, #392]	; (80013b8 <main+0x2bc>)
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
  sensor_value.velo.z.peak = 11.231;
 8001230:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001234:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001238:	4a60      	ldr	r2, [pc, #384]	; (80013bc <main+0x2c0>)
 800123a:	645a      	str	r2, [r3, #68]	; 0x44
  sensor_value.velo.z.crest = 8.12;
 800123c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001240:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001244:	4a5e      	ldr	r2, [pc, #376]	; (80013c0 <main+0x2c4>)
 8001246:	649a      	str	r2, [r3, #72]	; 0x48

  sensor_value.disp.x.rms = 21.32;
 8001248:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800124c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001250:	4a53      	ldr	r2, [pc, #332]	; (80013a0 <main+0x2a4>)
 8001252:	64da      	str	r2, [r3, #76]	; 0x4c
  sensor_value.disp.x.peak = 11.23;
 8001254:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001258:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800125c:	4a51      	ldr	r2, [pc, #324]	; (80013a4 <main+0x2a8>)
 800125e:	651a      	str	r2, [r3, #80]	; 0x50
  sensor_value.disp.x.crest = 0;
 8001260:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001264:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
  sensor_value.disp.y.rms = 21.324;
 800126e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001272:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001276:	4a4d      	ldr	r2, [pc, #308]	; (80013ac <main+0x2b0>)
 8001278:	659a      	str	r2, [r3, #88]	; 0x58
  sensor_value.disp.y.peak = 11.234;
 800127a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800127e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001282:	4a4b      	ldr	r2, [pc, #300]	; (80013b0 <main+0x2b4>)
 8001284:	65da      	str	r2, [r3, #92]	; 0x5c
  sensor_value.disp.y.crest = 0;
 8001286:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800128a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	661a      	str	r2, [r3, #96]	; 0x60
  sensor_value.disp.z.rms = 21.327;
 8001294:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001298:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800129c:	4a46      	ldr	r2, [pc, #280]	; (80013b8 <main+0x2bc>)
 800129e:	665a      	str	r2, [r3, #100]	; 0x64
  sensor_value.disp.z.peak = 11.231;
 80012a0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80012a4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80012a8:	4a44      	ldr	r2, [pc, #272]	; (80013bc <main+0x2c0>)
 80012aa:	669a      	str	r2, [r3, #104]	; 0x68
  sensor_value.disp.z.crest = 0;
 80012ac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80012b0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_print_debug("Main loop begin");
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <main+0x294>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4941      	ldr	r1, [pc, #260]	; (80013c4 <main+0x2c8>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f005 ff2b 	bl	800711c <print_debug>
  while (1)
  {
	  switch(state){
 80012c6:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <main+0x2cc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d8fb      	bhi.n	80012c6 <main+0x1ca>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <main+0x1d8>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	0800132b 	.word	0x0800132b
 80012d8:	0800136f 	.word	0x0800136f
 80012dc:	080012ed 	.word	0x080012ed
 80012e0:	08001345 	.word	0x08001345
 80012e4:	08001357 	.word	0x08001357
 80012e8:	080013d5 	.word	0x080013d5
	  case PREP_DATA:
		  main_print_debug("Data send request");
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <main+0x294>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4936      	ldr	r1, [pc, #216]	; (80013cc <main+0x2d0>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f005 ff12 	bl	800711c <print_debug>
		  len = comm_request(data,sensor_value);
 80012f8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80012fc:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 8001300:	f107 05a4 	add.w	r5, r7, #164	; 0xa4
 8001304:	4668      	mov	r0, sp
 8001306:	f104 030c 	add.w	r3, r4, #12
 800130a:	2264      	movs	r2, #100	; 0x64
 800130c:	4619      	mov	r1, r3
 800130e:	f006 f985 	bl	800761c <memcpy>
 8001312:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001316:	4628      	mov	r0, r5
 8001318:	f005 fb44 	bl	80069a4 <comm_request>
 800131c:	4603      	mov	r3, r0
 800131e:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
		  state = ENCRYPT;
 8001322:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <main+0x2cc>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
		  break;
 8001328:	e09c      	b.n	8001464 <main+0x368>
	  case ENCRYPT:
		  comm_encrypt(data, len, enc_data);
 800132a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800132e:	f897 116f 	ldrb.w	r1, [r7, #367]	; 0x16f
 8001332:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001336:	4618      	mov	r0, r3
 8001338:	f005 fdfe 	bl	8006f38 <comm_encrypt>
		  state = DECRYPT;
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <main+0x2cc>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
		  break;
 8001342:	e08f      	b.n	8001464 <main+0x368>
	  case SEND:
		  comm_send(enc_data);
 8001344:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001348:	4618      	mov	r0, r3
 800134a:	f005 fddb 	bl	8006f04 <comm_send>
		  state = IDLE;
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <main+0x2cc>)
 8001350:	2205      	movs	r2, #5
 8001352:	701a      	strb	r2, [r3, #0]
		  break;
 8001354:	e086      	b.n	8001464 <main+0x368>
	  case RECEIVE:
		  main_print_debug("Starting RX state");
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <main+0x294>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	491d      	ldr	r1, [pc, #116]	; (80013d0 <main+0x2d4>)
 800135c:	4618      	mov	r0, r3
 800135e:	f005 fedd 	bl	800711c <print_debug>
		  SPSGRF_StartRx();
 8001362:	f006 f915 	bl	8007590 <SPSGRF_StartRx>
		  state = IDLE;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <main+0x2cc>)
 8001368:	2205      	movs	r2, #5
 800136a:	701a      	strb	r2, [r3, #0]
		  break;
 800136c:	e07a      	b.n	8001464 <main+0x368>
	  case DECRYPT:
		  comm_decrypt(dec_data);
 800136e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001372:	4618      	mov	r0, r3
 8001374:	f005 fe64 	bl	8007040 <comm_decrypt>
		  comm_received(dec_data);
 8001378:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800137c:	4618      	mov	r0, r3
 800137e:	f005 fc6f 	bl	8006c60 <comm_received>
		  state = RECEIVE;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <main+0x2cc>)
 8001384:	2204      	movs	r2, #4
 8001386:	701a      	strb	r2, [r3, #0]
		  break;
 8001388:	e06c      	b.n	8001464 <main+0x368>
 800138a:	bf00      	nop
 800138c:	200002f8 	.word	0x200002f8
 8001390:	20000000 	.word	0x20000000
 8001394:	0800a520 	.word	0x0800a520
 8001398:	0800a554 	.word	0x0800a554
 800139c:	0800a570 	.word	0x0800a570
 80013a0:	41aa8f5c 	.word	0x41aa8f5c
 80013a4:	4133ae14 	.word	0x4133ae14
 80013a8:	4101999a 	.word	0x4101999a
 80013ac:	41aa978d 	.word	0x41aa978d
 80013b0:	4133be77 	.word	0x4133be77
 80013b4:	4102147b 	.word	0x4102147b
 80013b8:	41aa9db2 	.word	0x41aa9db2
 80013bc:	4133b22d 	.word	0x4133b22d
 80013c0:	4101eb85 	.word	0x4101eb85
 80013c4:	0800a584 	.word	0x0800a584
 80013c8:	20000004 	.word	0x20000004
 80013cc:	0800a594 	.word	0x0800a594
 80013d0:	0800a5a8 	.word	0x0800a5a8

	  case IDLE:
		  if(interrupt_flag == 1){
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <main+0x36c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d142      	bne.n	8001462 <main+0x366>
			main_print_debug("Got interrupted");
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <main+0x370>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4923      	ldr	r1, [pc, #140]	; (8001470 <main+0x374>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f005 fe9a 	bl	800711c <print_debug>
			interrupt_flag = 0;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <main+0x36c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
			if(irqStatus.IRQ_RX_DATA_READY)
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <main+0x378>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <main+0x312>
			{
				main_print_debug("data received");
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <main+0x370>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	491d      	ldr	r1, [pc, #116]	; (8001478 <main+0x37c>)
 8001402:	4618      	mov	r0, r3
 8001404:	f005 fe8a 	bl	800711c <print_debug>
				state = DECRYPT;
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <main+0x380>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
			}
			if(irqStatus.IRQ_RX_DATA_DISC)
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <main+0x378>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <main+0x326>
			{
				state = RECEIVE;
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <main+0x380>)
 800141e:	2204      	movs	r2, #4
 8001420:	701a      	strb	r2, [r3, #0]
			}
			if(irqStatus.IRQ_TX_DATA_SENT)
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <main+0x378>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <main+0x346>
			{
				main_print_debug("Data send!");
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <main+0x370>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4912      	ldr	r1, [pc, #72]	; (8001480 <main+0x384>)
 8001436:	4618      	mov	r0, r3
 8001438:	f005 fe70 	bl	800711c <print_debug>
				state = RECEIVE;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <main+0x380>)
 800143e:	2204      	movs	r2, #4
 8001440:	701a      	strb	r2, [r3, #0]
			}
			if(irqStatus.IRQ_AES_END)
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <main+0x378>)
 8001444:	78db      	ldrb	r3, [r3, #3]
 8001446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <main+0x366>
			{
				main_print_debug("Encryption done");
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <main+0x370>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	490b      	ldr	r1, [pc, #44]	; (8001484 <main+0x388>)
 8001456:	4618      	mov	r0, r3
 8001458:	f005 fe60 	bl	800711c <print_debug>
				state = IDLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <main+0x380>)
 800145e:	2205      	movs	r2, #5
 8001460:	701a      	strb	r2, [r3, #0]
			}
		  }
		  break;
 8001462:	bf00      	nop
	  switch(state){
 8001464:	e72f      	b.n	80012c6 <main+0x1ca>
 8001466:	bf00      	nop
 8001468:	200002f4 	.word	0x200002f4
 800146c:	20000000 	.word	0x20000000
 8001470:	0800a5bc 	.word	0x0800a5bc
 8001474:	20000328 	.word	0x20000328
 8001478:	0800a5cc 	.word	0x0800a5cc
 800147c:	20000004 	.word	0x20000004
 8001480:	0800a5dc 	.word	0x0800a5dc
 8001484:	0800a5e8 	.word	0x0800a5e8

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b090      	sub	sp, #64	; 0x40
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	2228      	movs	r2, #40	; 0x28
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f006 f8ce 	bl	8007638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ae:	2301      	movs	r3, #1
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b2:	2310      	movs	r3, #16
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 fafa 	bl	8004ab8 <HAL_RCC_OscConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014ca:	f000 f95f 	bl	800178c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ce:	230f      	movs	r3, #15
 80014d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fd68 	bl	8004fbc <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014f2:	f000 f94b 	bl	800178c <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3740      	adds	r7, #64	; 0x40
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_SPI1_Init+0x64>)
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <MX_SPI1_Init+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_SPI1_Init+0x64>)
 800150c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001510:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_SPI1_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_SPI1_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_SPI1_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_SPI1_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_SPI1_Init+0x64>)
 800152c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001530:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_SPI1_Init+0x64>)
 8001534:	2228      	movs	r2, #40	; 0x28
 8001536:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <MX_SPI1_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_SPI1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <MX_SPI1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_SPI1_Init+0x64>)
 800154c:	220a      	movs	r2, #10
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <MX_SPI1_Init+0x64>)
 8001552:	f003 fecb 	bl	80052ec <HAL_SPI_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800155c:	f000 f916 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000210 	.word	0x20000210
 8001568:	40013000 	.word	0x40013000

0800156c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_TIM2_Init+0x98>)
 800158a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_TIM2_Init+0x98>)
 8001592:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8001596:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_TIM2_Init+0x98>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_TIM2_Init+0x98>)
 80015a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80015a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_TIM2_Init+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_TIM2_Init+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b2:	4814      	ldr	r0, [pc, #80]	; (8001604 <MX_TIM2_Init+0x98>)
 80015b4:	f004 fc06 	bl	8005dc4 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015be:	f000 f8e5 	bl	800178c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_TIM2_Init+0x98>)
 80015d0:	f004 fd4f 	bl	8006072 <HAL_TIM_ConfigClockSource>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015da:	f000 f8d7 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <MX_TIM2_Init+0x98>)
 80015ec:	f004 ff2a 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015f6:	f000 f8c9 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000268 	.word	0x20000268

08001608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_USART1_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001640:	f004 ff70 	bl	8006524 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f000 f89f 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002b0 	.word	0x200002b0
 8001658:	40013800 	.word	0x40013800

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a40      	ldr	r2, [pc, #256]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <MX_GPIO_Init+0x11c>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001688:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <MX_GPIO_Init+0x11c>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a3a      	ldr	r2, [pc, #232]	; (8001778 <MX_GPIO_Init+0x11c>)
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b35      	ldr	r3, [pc, #212]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a34      	ldr	r2, [pc, #208]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a2e      	ldr	r2, [pc, #184]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	4829      	ldr	r0, [pc, #164]	; (800177c <MX_GPIO_Init+0x120>)
 80016d8:	f003 f9b4 	bl	8004a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_CS_GPIO_Port, SPIRIT1_CS_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	2110      	movs	r1, #16
 80016e0:	4827      	ldr	r0, [pc, #156]	; (8001780 <MX_GPIO_Init+0x124>)
 80016e2:	f003 f9af 	bl	8004a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2101      	movs	r1, #1
 80016ea:	4826      	ldr	r0, [pc, #152]	; (8001784 <MX_GPIO_Init+0x128>)
 80016ec:	f003 f9aa 	bl	8004a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2302      	movs	r3, #2
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	481c      	ldr	r0, [pc, #112]	; (800177c <MX_GPIO_Init+0x120>)
 800170a:	f003 f817 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRIT1_CS_Pin */
  GPIO_InitStruct.Pin = SPIRIT1_CS_Pin;
 800170e:	2310      	movs	r3, #16
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2302      	movs	r3, #2
 800171c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPIRIT1_CS_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4619      	mov	r1, r3
 8001724:	4816      	ldr	r0, [pc, #88]	; (8001780 <MX_GPIO_Init+0x124>)
 8001726:	f003 f809 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRIT1_SDN_Pin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 800172a:	2301      	movs	r3, #1
 800172c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2302      	movs	r3, #2
 8001738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4619      	mov	r1, r3
 8001740:	4810      	ldr	r0, [pc, #64]	; (8001784 <MX_GPIO_Init+0x128>)
 8001742:	f002 fffb 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIRIT1_GPIO3_Pin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8001746:	2302      	movs	r3, #2
 8001748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_GPIO_Init+0x12c>)
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4619      	mov	r1, r3
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <MX_GPIO_Init+0x128>)
 800175a:	f002 ffef 	bl	800473c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2007      	movs	r0, #7
 8001764:	f002 ffa5 	bl	80046b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001768:	2007      	movs	r0, #7
 800176a:	f002 ffbe 	bl	80046ea <HAL_NVIC_EnableIRQ>

}
 800176e:	bf00      	nop
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	40011000 	.word	0x40011000
 8001780:	40010800 	.word	0x40010800
 8001784:	40010c00 	.word	0x40010c00
 8001788:	10210000 	.word	0x10210000

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001794:	e7fe      	b.n	8001794 <Error_Handler+0x8>
	...

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_MspInit+0x5c>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <HAL_MspInit+0x5c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6193      	str	r3, [r2, #24]
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_MspInit+0x5c>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x5c>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_MspInit+0x5c>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	61d3      	str	r3, [r2, #28]
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_MspInit+0x5c>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_MspInit+0x60>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_MspInit+0x60>)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000

080017fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <HAL_SPI_MspInit+0x88>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d12f      	bne.n	800187c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 8001822:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a13      	ldr	r2, [pc, #76]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_SPI_MspInit+0x8c>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800184c:	23a0      	movs	r3, #160	; 0xa0
 800184e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	480b      	ldr	r0, [pc, #44]	; (800188c <HAL_SPI_MspInit+0x90>)
 8001860:	f002 ff6c 	bl	800473c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001864:	2340      	movs	r3, #64	; 0x40
 8001866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_SPI_MspInit+0x90>)
 8001878:	f002 ff60 	bl	800473c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40013000 	.word	0x40013000
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800

08001890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a0:	d113      	bne.n	80018ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_TIM_Base_MspInit+0x44>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <HAL_TIM_Base_MspInit+0x44>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_TIM_Base_MspInit+0x44>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	201c      	movs	r0, #28
 80018c0:	f002 fef7 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c4:	201c      	movs	r0, #28
 80018c6:	f002 ff10 	bl	80046ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_UART_MspInit+0x8c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d131      	bne.n	800195c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_UART_MspInit+0x90>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <HAL_UART_MspInit+0x90>)
 80018fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_UART_MspInit+0x90>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_UART_MspInit+0x90>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_UART_MspInit+0x90>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_UART_MspInit+0x90>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	4619      	mov	r1, r3
 800193c:	480b      	ldr	r0, [pc, #44]	; (800196c <HAL_UART_MspInit+0x94>)
 800193e:	f002 fefd 	bl	800473c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4619      	mov	r1, r3
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_UART_MspInit+0x94>)
 8001958:	f002 fef0 	bl	800473c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013800 	.word	0x40013800
 8001968:	40021000 	.word	0x40021000
 800196c:	40010800 	.word	0x40010800

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <NMI_Handler+0x4>
	...

08001978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_UART_Transmit(&huart1,(uint8_t *) "hardfault!", sizeof("hardfault!"), 100);
 800197c:	2364      	movs	r3, #100	; 0x64
 800197e:	220b      	movs	r2, #11
 8001980:	4902      	ldr	r1, [pc, #8]	; (800198c <HardFault_Handler+0x14>)
 8001982:	4803      	ldr	r0, [pc, #12]	; (8001990 <HardFault_Handler+0x18>)
 8001984:	f004 fe1b 	bl	80065be <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <HardFault_Handler+0x10>
 800198a:	bf00      	nop
 800198c:	0800a604 	.word	0x0800a604
 8001990:	200002b0 	.word	0x200002b0

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ce:	f002 fd35 	bl	800443c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <EXTI1_IRQHandler>:
/**
  * @brief This function handles EXTI line1 interrupt.
  */

void EXTI1_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  SpiritIrqGetStatus(&irqStatus);
 80019dc:	4806      	ldr	r0, [pc, #24]	; (80019f8 <EXTI1_IRQHandler+0x20>)
 80019de:	f000 fbc7 	bl	8002170 <SpiritIrqGetStatus>
  SpiritIrqClearStatus();
 80019e2:	f000 fbf7 	bl	80021d4 <SpiritIrqClearStatus>
  interrupt_flag = 1;
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <EXTI1_IRQHandler+0x24>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 80019ec:	2002      	movs	r0, #2
 80019ee:	f003 f841 	bl	8004a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000328 	.word	0x20000328
 80019fc:	200002f4 	.word	0x200002f4

08001a00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  state = PREP_DATA;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <TIM2_IRQHandler+0x14>)
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <TIM2_IRQHandler+0x18>)
 8001a0c:	f004 fa29 	bl	8005e62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000004 	.word	0x20000004
 8001a18:	20000268 	.word	0x20000268

08001a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <_kill>:

int _kill(int pid, int sig)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a34:	f005 fdc8 	bl	80075c8 <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2216      	movs	r2, #22
 8001a3c:	601a      	str	r2, [r3, #0]
	return -1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_exit>:

void _exit (int status)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a52:	f04f 31ff 	mov.w	r1, #4294967295
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffe7 	bl	8001a2a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a5c:	e7fe      	b.n	8001a5c <_exit+0x12>

08001a5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e00a      	b.n	8001a86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a70:	f3af 8000 	nop.w
 8001a74:	4601      	mov	r1, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	60ba      	str	r2, [r7, #8]
 8001a7c:	b2ca      	uxtb	r2, r1
 8001a7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dbf0      	blt.n	8001a70 <_read+0x12>
	}

return len;
 8001a8e:	687b      	ldr	r3, [r7, #4]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e009      	b.n	8001abe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	60ba      	str	r2, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	3301      	adds	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbf1      	blt.n	8001aaa <_write+0x12>
	}
	return len;
 8001ac6:	687b      	ldr	r3, [r7, #4]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_close>:

int _close(int file)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af6:	605a      	str	r2, [r3, #4]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <_isatty>:

int _isatty(int file)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
	return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f005 fd32 	bl	80075c8 <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20005000 	.word	0x20005000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	20000360 	.word	0x20000360
 8001b98:	20000388 	.word	0x20000388

08001b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	; (8001be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	; (8001bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bce:	f7ff ffe5 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f005 fcff 	bl	80075d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7ff fa91 	bl	80010fc <main>
  bx lr
 8001bda:	4770      	bx	lr
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001be4:	0800ade4 	.word	0x0800ade4
  ldr r2, =_sbss
 8001be8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001bec:	20000388 	.word	0x20000388

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <SpiritAesMode>:
 * @param  xNewState new state for AES engine.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None
 */
void SpiritAesMode(SpiritFunctionalState xNewState)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Modifies the register value */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8001c02:	f107 030f 	add.w	r3, r7, #15
 8001c06:	461a      	mov	r2, r3
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f002 fa9a 	bl	8004144 <RadioSpiReadRegisters>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <SpiritAesMode+0x70>)
 8001c14:	b212      	sxth	r2, r2
 8001c16:	4611      	mov	r1, r2
 8001c18:	7019      	strb	r1, [r3, #0]
 8001c1a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c1e:	705a      	strb	r2, [r3, #1]
  if(xNewState == S_ENABLE)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d105      	bne.n	8001c32 <SpiritAesMode+0x3e>
  {
    tempRegValue |= AES_MASK;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	f043 0320 	orr.w	r3, r3, #32
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e004      	b.n	8001c3c <SpiritAesMode+0x48>
  }
  else
  {
    tempRegValue &= ~AES_MASK;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	f023 0320 	bic.w	r3, r3, #32
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the ANA_FUNC_CONF0 register to enable or disable the AES engine */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8001c3c:	f107 030f 	add.w	r3, r7, #15
 8001c40:	461a      	mov	r2, r3
 8001c42:	2101      	movs	r1, #1
 8001c44:	2001      	movs	r0, #1
 8001c46:	f002 fa31 	bl	80040ac <RadioSpiWriteRegisters>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SpiritAesMode+0x70>)
 8001c4e:	b212      	sxth	r2, r2
 8001c50:	4611      	mov	r1, r2
 8001c52:	7019      	strb	r1, [r3, #0]
 8001c54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c58:	705a      	strb	r2, [r3, #1]

}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000036c 	.word	0x2000036c

08001c68 <SpiritAesWriteDataIn>:
 * @param  cDataLength length of data in bytes.
 *         This parameter is an uint8_t.
 * @retval None
 */
void SpiritAesWriteDataIn(uint8_t* pcBufferDataIn, uint8_t cDataLength)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dataInArray[16];

  /* Verifies that there are no more than 16 bytes */
  (cDataLength>16) ? (cDataLength=16) : cDataLength;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d901      	bls.n	8001c7e <SpiritAesWriteDataIn+0x16>
 8001c7a:	2310      	movs	r3, #16
 8001c7c:	70fb      	strb	r3, [r7, #3]

  /* Fill the dataInArray with the data buffer, using padding */
  for(i=0;i<16;i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	77fb      	strb	r3, [r7, #31]
 8001c82:	e01b      	b.n	8001cbc <SpiritAesWriteDataIn+0x54>
  {
    (i<(16 - cDataLength)) ? (dataInArray[i]=0):(dataInArray[i]=pcBufferDataIn[15-i]);
 8001c84:	7ffa      	ldrb	r2, [r7, #31]
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	f1c3 0310 	rsb	r3, r3, #16
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	da06      	bge.n	8001c9e <SpiritAesWriteDataIn+0x36>
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	3320      	adds	r3, #32
 8001c94:	443b      	add	r3, r7
 8001c96:	2200      	movs	r2, #0
 8001c98:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001c9c:	e00b      	b.n	8001cb6 <SpiritAesWriteDataIn+0x4e>
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ca0:	f1c3 030f 	rsb	r3, r3, #15
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	441a      	add	r2, r3
 8001caa:	7ffb      	ldrb	r3, [r7, #31]
 8001cac:	7812      	ldrb	r2, [r2, #0]
 8001cae:	3320      	adds	r3, #32
 8001cb0:	443b      	add	r3, r7
 8001cb2:	f803 2c14 	strb.w	r2, [r3, #-20]
  for(i=0;i<16;i++)
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	77fb      	strb	r3, [r7, #31]
 8001cbc:	7ffb      	ldrb	r3, [r7, #31]
 8001cbe:	2b0f      	cmp	r3, #15
 8001cc0:	d9e0      	bls.n	8001c84 <SpiritAesWriteDataIn+0x1c>

  }

  /* Writes the AES_DATA_IN registers */
  g_xStatus = SpiritSpiWriteRegisters(AES_DATA_IN_15_BASE, 16, dataInArray);
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2110      	movs	r1, #16
 8001cca:	2080      	movs	r0, #128	; 0x80
 8001ccc:	f002 f9ee 	bl	80040ac <RadioSpiWriteRegisters>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <SpiritAesWriteDataIn+0x80>)
 8001cd4:	b212      	sxth	r2, r2
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	7019      	strb	r1, [r3, #0]
 8001cda:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cde:	705a      	strb	r2, [r3, #1]

}
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000036c 	.word	0x2000036c

08001cec <SpiritAesReadDataOut>:
 * @param  cDataLength length of data to read in bytes.
 *         This parameter is a uint8_t.
 * @retval None
 */
void SpiritAesReadDataOut(uint8_t* pcBufferDataOut, uint8_t cDataLength)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
  uint8_t address, dataOutArray[16];

  /* Verifies that there are no more than 16 bytes */
  (cDataLength>16) ? (cDataLength=16) : cDataLength;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d901      	bls.n	8001d02 <SpiritAesReadDataOut+0x16>
 8001cfe:	2310      	movs	r3, #16
 8001d00:	70fb      	strb	r3, [r7, #3]

  /* Evaluates the address of AES_DATA_OUT from which start to read */
  address = AES_DATA_OUT_15_BASE+16-cDataLength;
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8001d08:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8001d0c:	33e4      	adds	r3, #228	; 0xe4
 8001d0e:	76fb      	strb	r3, [r7, #27]

  /* Reads the exact number of AES_DATA_OUT registers */
  g_xStatus = (SpiritSpiReadRegisters(address, cDataLength, dataOutArray));
 8001d10:	f107 0208 	add.w	r2, r7, #8
 8001d14:	78f9      	ldrb	r1, [r7, #3]
 8001d16:	7efb      	ldrb	r3, [r7, #27]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fa13 	bl	8004144 <RadioSpiReadRegisters>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <SpiritAesReadDataOut+0x74>)
 8001d22:	b212      	sxth	r2, r2
 8001d24:	4611      	mov	r1, r2
 8001d26:	7019      	strb	r1, [r3, #0]
 8001d28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d2c:	705a      	strb	r2, [r3, #1]

  /* Copy in the user buffer the read values changing the order */
  for(int i = (cDataLength-1); i>=0; i--)
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	e00c      	b.n	8001d50 <SpiritAesReadDataOut+0x64>
  {
    *pcBufferDataOut = dataOutArray[i];
 8001d36:	f107 0208 	add.w	r2, r7, #8
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	701a      	strb	r2, [r3, #0]
    pcBufferDataOut++;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3301      	adds	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
  for(int i = (cDataLength-1); i>=0; i--)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	daef      	bge.n	8001d36 <SpiritAesReadDataOut+0x4a>
  }

}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000036c 	.word	0x2000036c

08001d64 <SpiritAesWriteKey>:
 *         The last byte of the buffer shall be the less significant byte AES_KEY_15 of the AES key.
 * 	   This parameter is an uint8_t*.
 * @retval None
 */
void SpiritAesWriteKey(uint8_t* pcKey)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint8_t pcTempKey[16]; 
  for (uint8_t i = 0; i < 16; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	77fb      	strb	r3, [r7, #31]
 8001d70:	e00d      	b.n	8001d8e <SpiritAesWriteKey+0x2a>
  {
    pcTempKey[15-i] = pcKey[i];
 8001d72:	7ffb      	ldrb	r3, [r7, #31]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	441a      	add	r2, r3
 8001d78:	7ffb      	ldrb	r3, [r7, #31]
 8001d7a:	f1c3 030f 	rsb	r3, r3, #15
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	3320      	adds	r3, #32
 8001d82:	443b      	add	r3, r7
 8001d84:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (uint8_t i = 0; i < 16; i++)
 8001d88:	7ffb      	ldrb	r3, [r7, #31]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	77fb      	strb	r3, [r7, #31]
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d9ee      	bls.n	8001d72 <SpiritAesWriteKey+0xe>
  }
  
  /* Writes the AES_DATA_IN registers */
  g_xStatus = SpiritSpiWriteRegisters(AES_KEY_IN_15_BASE, 16, pcTempKey);
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2110      	movs	r1, #16
 8001d9c:	2070      	movs	r0, #112	; 0x70
 8001d9e:	f002 f985 	bl	80040ac <RadioSpiWriteRegisters>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SpiritAesWriteKey+0x58>)
 8001da6:	b212      	sxth	r2, r2
 8001da8:	4611      	mov	r1, r2
 8001daa:	7019      	strb	r1, [r3, #0]
 8001dac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001db0:	705a      	strb	r2, [r3, #1]

}
 8001db2:	bf00      	nop
 8001db4:	3720      	adds	r7, #32
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000036c 	.word	0x2000036c

08001dc0 <SpiritAesExecuteEncryption>:
 * @brief  Executes the encryption operation.
 * @param  None.
 * @retval None.
 */
void SpiritAesExecuteEncryption(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Sends the COMMAND_AES_ENC command */
  g_xStatus = SpiritSpiCommandStrobes(COMMAND_AES_ENC);
 8001dc4:	206a      	movs	r0, #106	; 0x6a
 8001dc6:	f002 fa09 	bl	80041dc <RadioSpiCommandStrobes>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SpiritAesExecuteEncryption+0x20>)
 8001dce:	b212      	sxth	r2, r2
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	7019      	strb	r1, [r3, #0]
 8001dd4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001dd8:	705a      	strb	r2, [r3, #1]

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000036c 	.word	0x2000036c

08001de4 <SpiritAesDeriveDecKeyExecuteDec>:
 * @brief  Executes the key derivation and the decryption operation.
 * @param  None.
 * @retval None.
 */
void SpiritAesDeriveDecKeyExecuteDec(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Sends the COMMAND_AES_KEY_DEC command */
  g_xStatus = SpiritSpiCommandStrobes(COMMAND_AES_KEY_DEC);
 8001de8:	206d      	movs	r0, #109	; 0x6d
 8001dea:	f002 f9f7 	bl	80041dc <RadioSpiCommandStrobes>
 8001dee:	4602      	mov	r2, r0
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <SpiritAesDeriveDecKeyExecuteDec+0x20>)
 8001df2:	b212      	sxth	r2, r2
 8001df4:	4611      	mov	r1, r2
 8001df6:	7019      	strb	r1, [r3, #0]
 8001df8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001dfc:	705a      	strb	r2, [r3, #1]

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000036c 	.word	0x2000036c

08001e08 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001e12:	f107 030f 	add.w	r3, r7, #15
 8001e16:	461a      	mov	r2, r3
 8001e18:	2101      	movs	r1, #1
 8001e1a:	2050      	movs	r0, #80	; 0x50
 8001e1c:	f002 f992 	bl	8004144 <RadioSpiReadRegisters>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <SpiritCalibrationVco+0x6c>)
 8001e24:	b212      	sxth	r2, r2
 8001e26:	4611      	mov	r1, r2
 8001e28:	7019      	strb	r1, [r3, #0]
 8001e2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e2e:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e004      	b.n	8001e4c <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	f023 0302 	bic.w	r3, r3, #2
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001e4c:	f107 030f 	add.w	r3, r7, #15
 8001e50:	461a      	mov	r2, r3
 8001e52:	2101      	movs	r1, #1
 8001e54:	2050      	movs	r0, #80	; 0x50
 8001e56:	f002 f929 	bl	80040ac <RadioSpiWriteRegisters>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <SpiritCalibrationVco+0x6c>)
 8001e5e:	b212      	sxth	r2, r2
 8001e60:	4611      	mov	r1, r2
 8001e62:	7019      	strb	r1, [r3, #0]
 8001e64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e68:	705a      	strb	r2, [r3, #1]

}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000036c 	.word	0x2000036c

08001e78 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	461a      	mov	r2, r3
 8001e82:	2101      	movs	r1, #1
 8001e84:	20e5      	movs	r0, #229	; 0xe5
 8001e86:	f002 f95d 	bl	8004144 <RadioSpiReadRegisters>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <SpiritCalibrationGetVcoCalData+0x34>)
 8001e8e:	b212      	sxth	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	7019      	strb	r1, [r3, #0]
 8001e94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e98:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea0:	b2db      	uxtb	r3, r3

}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000036c 	.word	0x2000036c

08001eb0 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001eba:	f107 030f 	add.w	r3, r7, #15
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	206e      	movs	r0, #110	; 0x6e
 8001ec4:	f002 f93e 	bl	8004144 <RadioSpiReadRegisters>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001ecc:	b212      	sxth	r2, r2
 8001ece:	4611      	mov	r1, r2
 8001ed0:	7019      	strb	r1, [r3, #0]
 8001ed2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ed6:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001eec:	f107 030f 	add.w	r3, r7, #15
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	206e      	movs	r0, #110	; 0x6e
 8001ef6:	f002 f8d9 	bl	80040ac <RadioSpiWriteRegisters>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001efe:	b212      	sxth	r2, r2
 8001f00:	4611      	mov	r1, r2
 8001f02:	7019      	strb	r1, [r3, #0]
 8001f04:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f08:	705a      	strb	r2, [r3, #1]

}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000036c 	.word	0x2000036c

08001f18 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001f22:	f107 030f 	add.w	r3, r7, #15
 8001f26:	461a      	mov	r2, r3
 8001f28:	2101      	movs	r1, #1
 8001f2a:	206f      	movs	r0, #111	; 0x6f
 8001f2c:	f002 f90a 	bl	8004144 <RadioSpiReadRegisters>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001f34:	b212      	sxth	r2, r2
 8001f36:	4611      	mov	r1, r2
 8001f38:	7019      	strb	r1, [r3, #0]
 8001f3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f3e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001f54:	f107 030f 	add.w	r3, r7, #15
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	206f      	movs	r0, #111	; 0x6f
 8001f5e:	f002 f8a5 	bl	80040ac <RadioSpiWriteRegisters>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001f66:	b212      	sxth	r2, r2
 8001f68:	4611      	mov	r1, r2
 8001f6a:	7019      	strb	r1, [r3, #0]
 8001f6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f70:	705a      	strb	r2, [r3, #1]

}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000036c 	.word	0x2000036c

08001f80 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001f8a:	f107 030f 	add.w	r3, r7, #15
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2101      	movs	r1, #1
 8001f92:	209e      	movs	r0, #158	; 0x9e
 8001f94:	f002 f8d6 	bl	8004144 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	f023 0306 	bic.w	r3, r3, #6
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	e004      	b.n	8001fbe <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001fbe:	f107 030f 	add.w	r3, r7, #15
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	209e      	movs	r0, #158	; 0x9e
 8001fc8:	f002 f870 	bl	80040ac <RadioSpiWriteRegisters>
  
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 f8fb 	bl	80041dc <RadioSpiCommandStrobes>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SpiritCmdStrobeCommand+0x2c>)
 8001fea:	b212      	sxth	r2, r2
 8001fec:	4611      	mov	r1, r2
 8001fee:	7019      	strb	r1, [r3, #0]
 8001ff0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ff4:	705a      	strb	r2, [r3, #1]
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000036c 	.word	0x2000036c

08002004 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	785a      	ldrb	r2, [r3, #1]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	789b      	ldrb	r3, [r3, #2]
 8002018:	4313      	orrs	r3, r2
 800201a:	b2db      	uxtb	r3, r3
 800201c:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f107 020f 	add.w	r2, r7, #15
 8002026:	2101      	movs	r1, #1
 8002028:	4618      	mov	r0, r3
 800202a:	f002 f83f 	bl	80040ac <RadioSpiWriteRegisters>
 800202e:	4602      	mov	r2, r0
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SpiritGpioInit+0x44>)
 8002032:	b212      	sxth	r2, r2
 8002034:	4611      	mov	r1, r2
 8002036:	7019      	strb	r1, [r3, #0]
 8002038:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800203c:	705a      	strb	r2, [r3, #1]

}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000036c 	.word	0x2000036c

0800204c <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00c      	beq.n	8002078 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	2204      	movs	r2, #4
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f005 fae6 	bl	8007638 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	461a      	mov	r2, r3
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	461a      	mov	r2, r3
 800207e:	2104      	movs	r1, #4
 8002080:	2090      	movs	r0, #144	; 0x90
 8002082:	f002 f813 	bl	80040ac <RadioSpiWriteRegisters>
 8002086:	4602      	mov	r2, r0
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SpiritIrqDeInit+0x54>)
 800208a:	b212      	sxth	r2, r2
 800208c:	4611      	mov	r1, r2
 800208e:	7019      	strb	r1, [r3, #0]
 8002090:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002094:	705a      	strb	r2, [r3, #1]
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000036c 	.word	0x2000036c

080020a4 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	461a      	mov	r2, r3
 80020ba:	2104      	movs	r1, #4
 80020bc:	2090      	movs	r0, #144	; 0x90
 80020be:	f002 f841 	bl	8004144 <RadioSpiReadRegisters>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <SpiritIrq+0xc8>)
 80020c6:	b212      	sxth	r2, r2
 80020c8:	4611      	mov	r1, r2
 80020ca:	7019      	strb	r1, [r3, #0]
 80020cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020d0:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	74fb      	strb	r3, [r7, #19]
 80020d6:	e011      	b.n	80020fc <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	3318      	adds	r3, #24
 80020dc:	443b      	add	r3, r7
 80020de:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80020e2:	461a      	mov	r2, r3
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	f1c3 0303 	rsb	r3, r3, #3
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4413      	add	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	3301      	adds	r3, #1
 80020fa:	74fb      	strb	r3, [r7, #19]
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d9ea      	bls.n	80020d8 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	43db      	mvns	r3, r3
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4013      	ands	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e003      	b.n	800211c <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 800211c:	2300      	movs	r3, #0
 800211e:	74bb      	strb	r3, [r7, #18]
 8002120:	e00e      	b.n	8002140 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8002122:	7cbb      	ldrb	r3, [r7, #18]
 8002124:	f1c3 0303 	rsb	r3, r3, #3
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	40da      	lsrs	r2, r3
 800212e:	7cbb      	ldrb	r3, [r7, #18]
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	3318      	adds	r3, #24
 8002134:	443b      	add	r3, r7
 8002136:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 800213a:	7cbb      	ldrb	r3, [r7, #18]
 800213c:	3301      	adds	r3, #1
 800213e:	74bb      	strb	r3, [r7, #18]
 8002140:	7cbb      	ldrb	r3, [r7, #18]
 8002142:	2b03      	cmp	r3, #3
 8002144:	d9ed      	bls.n	8002122 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	461a      	mov	r2, r3
 800214c:	2104      	movs	r1, #4
 800214e:	2090      	movs	r0, #144	; 0x90
 8002150:	f001 ffac 	bl	80040ac <RadioSpiWriteRegisters>
 8002154:	4602      	mov	r2, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <SpiritIrq+0xc8>)
 8002158:	b212      	sxth	r2, r2
 800215a:	4611      	mov	r1, r2
 800215c:	7019      	strb	r1, [r3, #0]
 800215e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002162:	705a      	strb	r2, [r3, #1]

}
 8002164:	bf00      	nop
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000036c 	.word	0x2000036c

08002170 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	461a      	mov	r2, r3
 8002182:	2104      	movs	r1, #4
 8002184:	20fa      	movs	r0, #250	; 0xfa
 8002186:	f001 ffdd 	bl	8004144 <RadioSpiReadRegisters>
 800218a:	4602      	mov	r2, r0
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <SpiritIrqGetStatus+0x60>)
 800218e:	b212      	sxth	r2, r2
 8002190:	4611      	mov	r1, r2
 8002192:	7019      	strb	r1, [r3, #0]
 8002194:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002198:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 800219a:	2300      	movs	r3, #0
 800219c:	74fb      	strb	r3, [r7, #19]
 800219e:	e00e      	b.n	80021be <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	f1c3 0303 	rsb	r3, r3, #3
 80021a6:	3318      	adds	r3, #24
 80021a8:	443b      	add	r3, r7
 80021aa:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3301      	adds	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	3301      	adds	r3, #1
 80021bc:	74fb      	strb	r3, [r7, #19]
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d9ed      	bls.n	80021a0 <SpiritIrqGetStatus+0x30>
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000036c 	.word	0x2000036c

080021d4 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	461a      	mov	r2, r3
 80021de:	2104      	movs	r1, #4
 80021e0:	20fa      	movs	r0, #250	; 0xfa
 80021e2:	f001 ffaf 	bl	8004144 <RadioSpiReadRegisters>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SpiritIrqClearStatus+0x2c>)
 80021ea:	b212      	sxth	r2, r2
 80021ec:	4611      	mov	r1, r2
 80021ee:	7019      	strb	r1, [r3, #0]
 80021f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021f4:	705a      	strb	r2, [r3, #1]

}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	2000036c 	.word	0x2000036c

08002204 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	461a      	mov	r2, r3
 800220e:	2101      	movs	r1, #1
 8002210:	20e7      	movs	r0, #231	; 0xe7
 8002212:	f001 ff97 	bl	8004144 <RadioSpiReadRegisters>
 8002216:	4602      	mov	r2, r0
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 800221a:	b212      	sxth	r2, r2
 800221c:	4611      	mov	r1, r2
 800221e:	7019      	strb	r1, [r3, #0]
 8002220:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002224:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800222c:	b2db      	uxtb	r3, r3

}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	2000036c 	.word	0x2000036c

0800223c <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 800223c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002240:	b08a      	sub	sp, #40	; 0x28
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a70      	ldr	r2, [pc, #448]	; (800240c <SpiritManagementSetFrequencyBase+0x1d0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d307      	bcc.n	800225e <SpiritManagementSetFrequencyBase+0x22>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a6f      	ldr	r2, [pc, #444]	; (8002410 <SpiritManagementSetFrequencyBase+0x1d4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d803      	bhi.n	800225e <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800225c:	e01a      	b.n	8002294 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a6c      	ldr	r2, [pc, #432]	; (8002414 <SpiritManagementSetFrequencyBase+0x1d8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d907      	bls.n	8002276 <SpiritManagementSetFrequencyBase+0x3a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a6b      	ldr	r2, [pc, #428]	; (8002418 <SpiritManagementSetFrequencyBase+0x1dc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d803      	bhi.n	8002276 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002274:	e00e      	b.n	8002294 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a68      	ldr	r2, [pc, #416]	; (800241c <SpiritManagementSetFrequencyBase+0x1e0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d907      	bls.n	800228e <SpiritManagementSetFrequencyBase+0x52>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a67      	ldr	r2, [pc, #412]	; (8002420 <SpiritManagementSetFrequencyBase+0x1e4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d803      	bhi.n	800228e <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8002286:	2302      	movs	r3, #2
 8002288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800228c:	e002      	b.n	8002294 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 800228e:	2303      	movs	r3, #3
 8002290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002294:	f000 fffe 	bl	8003294 <SpiritRadioGetFrequencyOffset>
 8002298:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 800229a:	f000 ffdb 	bl	8003254 <SpiritRadioGetChannelSpace>
 800229e:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80022a0:	f000 ffc0 	bl	8003224 <SpiritRadioGetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	441a      	add	r2, r3
 80022ae:	7efb      	ldrb	r3, [r7, #27]
 80022b0:	69f9      	ldr	r1, [r7, #28]
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80022ba:	f001 fdd7 	bl	8003e6c <SpiritRadioGetRefDiv>
 80022be:	4603      	mov	r3, r0
 80022c0:	3301      	adds	r3, #1
 80022c2:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80022c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d83a      	bhi.n	8002342 <SpiritManagementSetFrequencyBase+0x106>
 80022cc:	a201      	add	r2, pc, #4	; (adr r2, 80022d4 <SpiritManagementSetFrequencyBase+0x98>)
 80022ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d2:	bf00      	nop
 80022d4:	0800232d 	.word	0x0800232d
 80022d8:	08002315 	.word	0x08002315
 80022dc:	080022fd 	.word	0x080022fd
 80022e0:	080022e5 	.word	0x080022e5
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	4a4f      	ldr	r2, [pc, #316]	; (8002424 <SpiritManagementSetFrequencyBase+0x1e8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d803      	bhi.n	80022f4 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7ff fe47 	bl	8001f80 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80022f2:	e026      	b.n	8002342 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7ff fe43 	bl	8001f80 <SpiritCalibrationSelectVco>
    break;
 80022fa:	e022      	b.n	8002342 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4a4a      	ldr	r2, [pc, #296]	; (8002428 <SpiritManagementSetFrequencyBase+0x1ec>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d803      	bhi.n	800230c <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fe3b 	bl	8001f80 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800230a:	e01a      	b.n	8002342 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff fe37 	bl	8001f80 <SpiritCalibrationSelectVco>
    break;
 8002312:	e016      	b.n	8002342 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4a45      	ldr	r2, [pc, #276]	; (800242c <SpiritManagementSetFrequencyBase+0x1f0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d803      	bhi.n	8002324 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff fe2f 	bl	8001f80 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002322:	e00e      	b.n	8002342 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002324:	2001      	movs	r0, #1
 8002326:	f7ff fe2b 	bl	8001f80 <SpiritCalibrationSelectVco>
    break;
 800232a:	e00a      	b.n	8002342 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4a40      	ldr	r2, [pc, #256]	; (8002430 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d803      	bhi.n	800233c <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff fe23 	bl	8001f80 <SpiritCalibrationSelectVco>
 800233a:	e002      	b.n	8002342 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 800233c:	2001      	movs	r0, #1
 800233e:	f7ff fe1f 	bl	8001f80 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f000 fe86 	bl	8003054 <SpiritRadioSearchWCP>
 8002348:	4603      	mov	r3, r0
 800234a:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7fe f849 	bl	80003e4 <__aeabi_ui2d>
 8002352:	4604      	mov	r4, r0
 8002354:	460d      	mov	r5, r1
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800235c:	4935      	ldr	r1, [pc, #212]	; (8002434 <SpiritManagementSetFrequencyBase+0x1f8>)
 800235e:	5c8a      	ldrb	r2, [r1, r2]
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	049b      	lsls	r3, r3, #18
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f84c 	bl	8000404 <__aeabi_i2d>
 800236c:	4680      	mov	r8, r0
 800236e:	4689      	mov	r9, r1
 8002370:	f001 fdf0 	bl	8003f54 <SpiritRadioGetXtalFrequency>
 8002374:	4603      	mov	r3, r0
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f834 	bl	80003e4 <__aeabi_ui2d>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4640      	mov	r0, r8
 8002382:	4649      	mov	r1, r9
 8002384:	f7fe f9d2 	bl	800072c <__aeabi_ddiv>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4620      	mov	r0, r4
 800238e:	4629      	mov	r1, r5
 8002390:	f7fe f8a2 	bl	80004d8 <__aeabi_dmul>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	f7fe fb74 	bl	8000a88 <__aeabi_d2uiz>
 80023a0:	4603      	mov	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	0d5b      	lsrs	r3, r3, #21
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	7cbb      	ldrb	r3, [r7, #18]
 80023b2:	015b      	lsls	r3, r3, #5
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	0b5b      	lsrs	r3, r3, #13
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023d8:	4917      	ldr	r1, [pc, #92]	; (8002438 <SpiritManagementSetFrequencyBase+0x1fc>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	4313      	orrs	r3, r2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	461a      	mov	r2, r3
 80023e8:	2104      	movs	r1, #4
 80023ea:	2008      	movs	r0, #8
 80023ec:	f001 fe5e 	bl	80040ac <RadioSpiWriteRegisters>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <SpiritManagementSetFrequencyBase+0x200>)
 80023f4:	b212      	sxth	r2, r2
 80023f6:	4611      	mov	r1, r2
 80023f8:	7019      	strb	r1, [r3, #0]
 80023fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023fe:	705a      	strb	r2, [r3, #1]
}
 8002400:	bf00      	nop
 8002402:	3728      	adds	r7, #40	; 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800240a:	bf00      	nop
 800240c:	2e5f5680 	.word	0x2e5f5680
 8002410:	390c2fe0 	.word	0x390c2fe0
 8002414:	1701e47f 	.word	0x1701e47f
 8002418:	1c146a60 	.word	0x1c146a60
 800241c:	11d260bf 	.word	0x11d260bf
 8002420:	14ced7e0 	.word	0x14ced7e0
 8002424:	099cf4e1 	.word	0x099cf4e1
 8002428:	1339e9c3 	.word	0x1339e9c3
 800242c:	19a28d05 	.word	0x19a28d05
 8002430:	33451a0a 	.word	0x33451a0a
 8002434:	0800a8ac 	.word	0x0800a8ac
 8002438:	0800a8a8 	.word	0x0800a8a8
 800243c:	2000036c 	.word	0x2000036c

08002440 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800244e:	f001 fd81 	bl	8003f54 <SpiritRadioGetXtalFrequency>
 8002452:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002454:	2300      	movs	r3, #0
 8002456:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4a57      	ldr	r2, [pc, #348]	; (80025b8 <SpiritManagementWaVcoCalibration+0x178>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d90f      	bls.n	8002480 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002460:	f001 fd04 	bl	8003e6c <SpiritRadioGetRefDiv>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800246e:	f001 f873 	bl	8003558 <SpiritRadioGetFrequencyBase>
 8002472:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002474:	2001      	movs	r0, #1
 8002476:	f001 fcc9 	bl	8003e0c <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fede 	bl	800223c <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002480:	f001 f86a 	bl	8003558 <SpiritRadioGetFrequencyBase>
 8002484:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8002486:	2325      	movs	r3, #37	; 0x25
 8002488:	707b      	strb	r3, [r7, #1]
 800248a:	1c7b      	adds	r3, r7, #1
 800248c:	461a      	mov	r2, r3
 800248e:	2101      	movs	r1, #1
 8002490:	20a1      	movs	r0, #161	; 0xa1
 8002492:	f001 fe0b 	bl	80040ac <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8002496:	2001      	movs	r0, #1
 8002498:	f7ff fcb6 	bl	8001e08 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 800249c:	f001 fdd4 	bl	8004048 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 80024a0:	4b46      	ldr	r3, [pc, #280]	; (80025bc <SpiritManagementWaVcoCalibration+0x17c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d10d      	bne.n	80024ca <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 80024b2:	2062      	movs	r0, #98	; 0x62
 80024b4:	f7ff fd8e 	bl	8001fd4 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80024b8:	f001 fdc6 	bl	8004048 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80024bc:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <SpiritManagementWaVcoCalibration+0x17c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d1f6      	bne.n	80024b8 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80024ca:	2066      	movs	r0, #102	; 0x66
 80024cc:	f7ff fd82 	bl	8001fd4 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80024d4:	f001 fdb8 	bl	8004048 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80024d8:	4b38      	ldr	r3, [pc, #224]	; (80025bc <SpiritManagementWaVcoCalibration+0x17c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b13      	cmp	r3, #19
 80024e4:	d106      	bne.n	80024f4 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80024e6:	7b7b      	ldrb	r3, [r7, #13]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	737a      	strb	r2, [r7, #13]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d101      	bne.n	80024f4 <SpiritManagementWaVcoCalibration+0xb4>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e05d      	b.n	80025b0 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80024f4:	4b31      	ldr	r3, [pc, #196]	; (80025bc <SpiritManagementWaVcoCalibration+0x17c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	d1e8      	bne.n	80024d4 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 8002502:	f7ff fcb9 	bl	8001e78 <SpiritCalibrationGetVcoCalData>
 8002506:	4603      	mov	r3, r0
 8002508:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 800250a:	2062      	movs	r0, #98	; 0x62
 800250c:	f7ff fd62 	bl	8001fd4 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002510:	f001 fd9a 	bl	8004048 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <SpiritManagementWaVcoCalibration+0x17c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b03      	cmp	r3, #3
 8002520:	d1f6      	bne.n	8002510 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 8002522:	2065      	movs	r0, #101	; 0x65
 8002524:	f7ff fd56 	bl	8001fd4 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002528:	2300      	movs	r3, #0
 800252a:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 800252c:	f001 fd8c 	bl	8004048 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <SpiritManagementWaVcoCalibration+0x17c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b13      	cmp	r3, #19
 800253c:	d106      	bne.n	800254c <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 800253e:	7b7b      	ldrb	r3, [r7, #13]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	737a      	strb	r2, [r7, #13]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d101      	bne.n	800254c <SpiritManagementWaVcoCalibration+0x10c>
 8002548:	2301      	movs	r3, #1
 800254a:	e031      	b.n	80025b0 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <SpiritManagementWaVcoCalibration+0x17c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b0f      	cmp	r3, #15
 8002558:	d1e8      	bne.n	800252c <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 800255a:	f7ff fc8d 	bl	8001e78 <SpiritCalibrationGetVcoCalData>
 800255e:	4603      	mov	r3, r0
 8002560:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8002562:	2062      	movs	r0, #98	; 0x62
 8002564:	f7ff fd36 	bl	8001fd4 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002568:	f001 fd6e 	bl	8004048 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <SpiritManagementWaVcoCalibration+0x17c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b03      	cmp	r3, #3
 8002578:	d1f6      	bne.n	8002568 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 800257a:	7bbb      	ldrb	r3, [r7, #14]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d102      	bne.n	8002586 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002580:	2063      	movs	r0, #99	; 0x63
 8002582:	f7ff fd27 	bl	8001fd4 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8002586:	2000      	movs	r0, #0
 8002588:	f7ff fc3e 	bl	8001e08 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8002592:	2000      	movs	r0, #0
 8002594:	f001 fc3a 	bl	8003e0c <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff fe4f 	bl	800223c <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fc85 	bl	8001eb0 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 80025a6:	78bb      	ldrb	r3, [r7, #2]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fcb5 	bl	8001f18 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	01c9c380 	.word	0x01c9c380
 80025bc:	2000036c 	.word	0x2000036c

080025c0 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <SpiritManagementWaCmdStrobeTx+0x60>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d023      	beq.n	8002618 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <SpiritManagementWaCmdStrobeTx+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <SpiritManagementWaCmdStrobeTx+0x68>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d908      	bls.n	80025ec <SpiritManagementWaCmdStrobeTx+0x2c>
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <SpiritManagementWaCmdStrobeTx+0x64>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a13      	ldr	r2, [pc, #76]	; (800262c <SpiritManagementWaCmdStrobeTx+0x6c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d803      	bhi.n	80025ec <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80025e4:	20c0      	movs	r0, #192	; 0xc0
 80025e6:	f001 fb87 	bl	8003cf8 <SpiritRadioSetPACwc>
 80025ea:	e002      	b.n	80025f2 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f001 fb83 	bl	8003cf8 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80025f2:	2311      	movs	r3, #17
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	461a      	mov	r2, r3
 80025fa:	2101      	movs	r1, #1
 80025fc:	20a9      	movs	r0, #169	; 0xa9
 80025fe:	f001 fd55 	bl	80040ac <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 8002602:	2320      	movs	r3, #32
 8002604:	71fb      	strb	r3, [r7, #7]
 8002606:	1dfb      	adds	r3, r7, #7
 8002608:	461a      	mov	r2, r3
 800260a:	2101      	movs	r1, #1
 800260c:	20a5      	movs	r0, #165	; 0xa5
 800260e:	f001 fd4d 	bl	80040ac <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 8002612:	4b03      	ldr	r3, [pc, #12]	; (8002620 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
  }
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	2000000c 	.word	0x2000000c
 8002624:	20000364 	.word	0x20000364
 8002628:	08f0d17f 	.word	0x08f0d17f
 800262c:	1c03a180 	.word	0x1c03a180

08002630 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d00d      	beq.n	800265c <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002640:	2398      	movs	r3, #152	; 0x98
 8002642:	71fb      	strb	r3, [r7, #7]
 8002644:	1dfb      	adds	r3, r7, #7
 8002646:	461a      	mov	r2, r3
 8002648:	2101      	movs	r1, #1
 800264a:	20a5      	movs	r0, #165	; 0xa5
 800264c:	f001 fd2e 	bl	80040ac <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002650:	2000      	movs	r0, #0
 8002652:	f001 fb51 	bl	8003cf8 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002656:	4b03      	ldr	r3, [pc, #12]	; (8002664 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
  }
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000000c 	.word	0x2000000c

08002668 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <SpiritManagementWaTRxFcMem+0x20>)
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <SpiritManagementWaTRxFcMem+0x24>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	2000000c 	.word	0x2000000c
 800268c:	20000364 	.word	0x20000364

08002690 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002696:	23ca      	movs	r3, #202	; 0xca
 8002698:	71fb      	strb	r3, [r7, #7]
 800269a:	1dfb      	adds	r3, r7, #7
 800269c:	461a      	mov	r2, r3
 800269e:	2101      	movs	r1, #1
 80026a0:	20b2      	movs	r0, #178	; 0xb2
 80026a2:	f001 fd03 	bl	80040ac <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80026a6:	2304      	movs	r3, #4
 80026a8:	71fb      	strb	r3, [r7, #7]
 80026aa:	1dfb      	adds	r3, r7, #7
 80026ac:	461a      	mov	r2, r3
 80026ae:	2101      	movs	r1, #1
 80026b0:	20a8      	movs	r0, #168	; 0xa8
 80026b2:	f001 fcfb 	bl	80040ac <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 80026b6:	1dfb      	adds	r3, r7, #7
 80026b8:	461a      	mov	r2, r3
 80026ba:	2101      	movs	r1, #1
 80026bc:	20a8      	movs	r0, #168	; 0xa8
 80026be:	f001 fd41 	bl	8004144 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80026c2:	2300      	movs	r3, #0
 80026c4:	71fb      	strb	r3, [r7, #7]
 80026c6:	1dfb      	adds	r3, r7, #7
 80026c8:	461a      	mov	r2, r3
 80026ca:	2101      	movs	r1, #1
 80026cc:	20a8      	movs	r0, #168	; 0xa8
 80026ce:	f001 fced 	bl	80040ac <RadioSpiWriteRegisters>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	461a      	mov	r2, r3
 80026ea:	2101      	movs	r1, #1
 80026ec:	2051      	movs	r0, #81	; 0x51
 80026ee:	f001 fd29 	bl	8004144 <RadioSpiReadRegisters>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b63      	ldr	r3, [pc, #396]	; (8002884 <SpiritPktBasicInit+0x1a8>)
 80026f6:	b212      	sxth	r2, r2
 80026f8:	4611      	mov	r1, r2
 80026fa:	7019      	strb	r1, [r3, #0]
 80026fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002700:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002702:	7a3b      	ldrb	r3, [r7, #8]
 8002704:	f023 0320 	bic.w	r3, r3, #32
 8002708:	b2db      	uxtb	r3, r3
 800270a:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 800270c:	7a3b      	ldrb	r3, [r7, #8]
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	461a      	mov	r2, r3
 800271c:	2101      	movs	r1, #1
 800271e:	2051      	movs	r0, #81	; 0x51
 8002720:	f001 fcc4 	bl	80040ac <RadioSpiWriteRegisters>
 8002724:	4602      	mov	r2, r0
 8002726:	4b57      	ldr	r3, [pc, #348]	; (8002884 <SpiritPktBasicInit+0x1a8>)
 8002728:	b212      	sxth	r2, r2
 800272a:	4611      	mov	r1, r2
 800272c:	7019      	strb	r1, [r3, #0]
 800272e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002732:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	461a      	mov	r2, r3
 800273a:	2101      	movs	r1, #1
 800273c:	204f      	movs	r0, #79	; 0x4f
 800273e:	f001 fd01 	bl	8004144 <RadioSpiReadRegisters>
 8002742:	4602      	mov	r2, r0
 8002744:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <SpiritPktBasicInit+0x1a8>)
 8002746:	b212      	sxth	r2, r2
 8002748:	4611      	mov	r1, r2
 800274a:	7019      	strb	r1, [r3, #0]
 800274c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002750:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002752:	7a3b      	ldrb	r3, [r7, #8]
 8002754:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002758:	b2db      	uxtb	r3, r3
 800275a:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	461a      	mov	r2, r3
 8002762:	2101      	movs	r1, #1
 8002764:	204f      	movs	r0, #79	; 0x4f
 8002766:	f001 fca1 	bl	80040ac <RadioSpiWriteRegisters>
 800276a:	4602      	mov	r2, r0
 800276c:	4b45      	ldr	r3, [pc, #276]	; (8002884 <SpiritPktBasicInit+0x1a8>)
 800276e:	b212      	sxth	r2, r2
 8002770:	4611      	mov	r1, r2
 8002772:	7019      	strb	r1, [r3, #0]
 8002774:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002778:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7b1b      	ldrb	r3, [r3, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 8002782:	2308      	movs	r3, #8
 8002784:	723b      	strb	r3, [r7, #8]
 8002786:	e001      	b.n	800278c <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 8002788:	2300      	movs	r3, #0
 800278a:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 800278c:	7a3a      	ldrb	r2, [r7, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7adb      	ldrb	r3, [r3, #11]
 8002792:	4313      	orrs	r3, r2
 8002794:	b2db      	uxtb	r3, r3
 8002796:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7a5b      	ldrb	r3, [r3, #9]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <SpiritPktBasicInit+0xca>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7a5b      	ldrb	r3, [r3, #9]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 80027c0:	4313      	orrs	r3, r2
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7a9b      	ldrb	r3, [r3, #10]
 80027ca:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7b9b      	ldrb	r3, [r3, #14]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d104      	bne.n	80027de <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 80027d4:	7afb      	ldrb	r3, [r7, #11]
 80027d6:	f043 0310 	orr.w	r3, r3, #16
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7b5b      	ldrb	r3, [r3, #13]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d104      	bne.n	80027f0 <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 80027e6:	7afb      	ldrb	r3, [r7, #11]
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 80027f0:	f107 0308 	add.w	r3, r7, #8
 80027f4:	461a      	mov	r2, r3
 80027f6:	2104      	movs	r1, #4
 80027f8:	2030      	movs	r0, #48	; 0x30
 80027fa:	f001 fc57 	bl	80040ac <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	e01d      	b.n	8002840 <SpiritPktBasicInit+0x164>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	785b      	ldrb	r3, [r3, #1]
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f1c3 0303 	rsb	r3, r3, #3
 8002812:	429a      	cmp	r2, r3
 8002814:	da06      	bge.n	8002824 <SpiritPktBasicInit+0x148>
    {
      tempRegValue[i]=0;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	3310      	adds	r3, #16
 800281a:	443b      	add	r3, r7
 800281c:	2200      	movs	r2, #0
 800281e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002822:	e00a      	b.n	800283a <SpiritPktBasicInit+0x15e>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	40da      	lsrs	r2, r3
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	3310      	adds	r3, #16
 8002834:	443b      	add	r3, r7
 8002836:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	3301      	adds	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d9de      	bls.n	8002804 <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7a9b      	ldrb	r3, [r3, #10]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <SpiritPktBasicInit+0x17a>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 800284e:	2000      	movs	r0, #0
 8002850:	f000 f8fc 	bl	8002a4c <SpiritPktCommonFilterOnCrc>
 8002854:	e002      	b.n	800285c <SpiritPktBasicInit+0x180>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 8002856:	2001      	movs	r0, #1
 8002858:	f000 f8f8 	bl	8002a4c <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 800285c:	f107 0308 	add.w	r3, r7, #8
 8002860:	461a      	mov	r2, r3
 8002862:	2104      	movs	r1, #4
 8002864:	2036      	movs	r0, #54	; 0x36
 8002866:	f001 fc21 	bl	80040ac <RadioSpiWriteRegisters>
 800286a:	4602      	mov	r2, r0
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <SpiritPktBasicInit+0x1a8>)
 800286e:	b212      	sxth	r2, r2
 8002870:	4611      	mov	r1, r2
 8002872:	7019      	strb	r1, [r3, #0]
 8002874:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002878:	705a      	strb	r2, [r3, #1]

}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000036c 	.word	0x2000036c

08002888 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	461a      	mov	r2, r3
 8002896:	2101      	movs	r1, #1
 8002898:	204f      	movs	r0, #79	; 0x4f
 800289a:	f001 fc53 	bl	8004144 <RadioSpiReadRegisters>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <SpiritPktBasicAddressesInit+0xd8>)
 80028a2:	b212      	sxth	r2, r2
 80028a4:	4611      	mov	r1, r2
 80028a6:	7019      	strb	r1, [r3, #0]
 80028a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028ac:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80028b6:	7b3b      	ldrb	r3, [r7, #12]
 80028b8:	f043 0308 	orr.w	r3, r3, #8
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	733b      	strb	r3, [r7, #12]
 80028c0:	e004      	b.n	80028cc <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80028c2:	7b3b      	ldrb	r3, [r7, #12]
 80028c4:	f023 0308 	bic.w	r3, r3, #8
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	789b      	ldrb	r3, [r3, #2]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80028d4:	7b3b      	ldrb	r3, [r7, #12]
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	733b      	strb	r3, [r7, #12]
 80028de:	e004      	b.n	80028ea <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80028e0:	7b3b      	ldrb	r3, [r7, #12]
 80028e2:	f023 0304 	bic.w	r3, r3, #4
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	791b      	ldrb	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d105      	bne.n	80028fe <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80028f2:	7b3b      	ldrb	r3, [r7, #12]
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	733b      	strb	r3, [r7, #12]
 80028fc:	e004      	b.n	8002908 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80028fe:	7b3b      	ldrb	r3, [r7, #12]
 8002900:	f023 0302 	bic.w	r3, r3, #2
 8002904:	b2db      	uxtb	r3, r3
 8002906:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	461a      	mov	r2, r3
 800290e:	2101      	movs	r1, #1
 8002910:	204f      	movs	r0, #79	; 0x4f
 8002912:	f001 fbcb 	bl	80040ac <RadioSpiWriteRegisters>
 8002916:	4602      	mov	r2, r0
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <SpiritPktBasicAddressesInit+0xd8>)
 800291a:	b212      	sxth	r2, r2
 800291c:	4611      	mov	r1, r2
 800291e:	7019      	strb	r1, [r3, #0]
 8002920:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002924:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	795b      	ldrb	r3, [r3, #5]
 800292a:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	78db      	ldrb	r3, [r3, #3]
 8002930:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	461a      	mov	r2, r3
 800293e:	2103      	movs	r1, #3
 8002940:	204c      	movs	r0, #76	; 0x4c
 8002942:	f001 fbb3 	bl	80040ac <RadioSpiWriteRegisters>
 8002946:	4602      	mov	r2, r0
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SpiritPktBasicAddressesInit+0xd8>)
 800294a:	b212      	sxth	r2, r2
 800294c:	4611      	mov	r1, r2
 800294e:	7019      	strb	r1, [r3, #0]
 8002950:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002954:	705a      	strb	r2, [r3, #1]
  
  
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000036c 	.word	0x2000036c

08002964 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 800296a:	1dfb      	adds	r3, r7, #7
 800296c:	461a      	mov	r2, r3
 800296e:	2101      	movs	r1, #1
 8002970:	2030      	movs	r0, #48	; 0x30
 8002972:	f001 fbe7 	bl	8004144 <RadioSpiReadRegisters>
 8002976:	4602      	mov	r2, r0
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <SpiritPktBasicGetAddressField+0x3c>)
 800297a:	b212      	sxth	r2, r2
 800297c:	4611      	mov	r1, r2
 800297e:	7019      	strb	r1, [r3, #0]
 8002980:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002984:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	f003 0318 	and.w	r3, r3, #24
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 8002994:	2300      	movs	r3, #0
  }

}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000036c 	.word	0x2000036c

080029a4 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 80029b2:	f7ff ffd7 	bl	8002964 <SpiritPktBasicGetAddressField>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 80029bc:	2301      	movs	r3, #1
 80029be:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 80029c0:	f000 f828 	bl	8002a14 <SpiritPktCommonGetControlLength>
 80029c4:	4603      	mov	r3, r0
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	89fb      	ldrh	r3, [r7, #14]
 80029ca:	4413      	add	r3, r2
 80029cc:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	89fb      	ldrh	r3, [r7, #14]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	4413      	add	r3, r2
 80029e2:	121b      	asrs	r3, r3, #8
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	461a      	mov	r2, r3
 80029ee:	2102      	movs	r1, #2
 80029f0:	2034      	movs	r0, #52	; 0x34
 80029f2:	f001 fb5b 	bl	80040ac <RadioSpiWriteRegisters>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SpiritPktBasicSetPayloadLength+0x6c>)
 80029fa:	b212      	sxth	r2, r2
 80029fc:	4611      	mov	r1, r2
 80029fe:	7019      	strb	r1, [r3, #0]
 8002a00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a04:	705a      	strb	r2, [r3, #1]

}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000036c 	.word	0x2000036c

08002a14 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002a1a:	1dfb      	adds	r3, r7, #7
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2101      	movs	r1, #1
 8002a20:	2030      	movs	r0, #48	; 0x30
 8002a22:	f001 fb8f 	bl	8004144 <RadioSpiReadRegisters>
 8002a26:	4602      	mov	r2, r0
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <SpiritPktCommonGetControlLength+0x34>)
 8002a2a:	b212      	sxth	r2, r2
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	7019      	strb	r1, [r3, #0]
 8002a30:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a34:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	b2db      	uxtb	r3, r3

}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000036c 	.word	0x2000036c

08002a4c <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002a56:	f107 030f 	add.w	r3, r7, #15
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	204f      	movs	r0, #79	; 0x4f
 8002a60:	f001 fb70 	bl	8004144 <RadioSpiReadRegisters>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002a68:	b212      	sxth	r2, r2
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	7019      	strb	r1, [r3, #0]
 8002a6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a72:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d105      	bne.n	8002a86 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e004      	b.n	8002a90 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002a90:	f107 030f 	add.w	r3, r7, #15
 8002a94:	461a      	mov	r2, r3
 8002a96:	2101      	movs	r1, #1
 8002a98:	204f      	movs	r0, #79	; 0x4f
 8002a9a:	f001 fb07 	bl	80040ac <RadioSpiWriteRegisters>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002aa2:	b212      	sxth	r2, r2
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	7019      	strb	r1, [r3, #0]
 8002aa8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002aac:	705a      	strb	r2, [r3, #1]

}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000036c 	.word	0x2000036c

08002abc <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002ac6:	1dfb      	adds	r3, r7, #7
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2101      	movs	r1, #1
 8002acc:	204b      	movs	r0, #75	; 0x4b
 8002ace:	f001 faed 	bl	80040ac <RadioSpiWriteRegisters>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SpiritPktCommonSetDestinationAddress+0x30>)
 8002ad6:	b212      	sxth	r2, r2
 8002ad8:	4611      	mov	r1, r2
 8002ada:	7019      	strb	r1, [r3, #0]
 8002adc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ae0:	705a      	strb	r2, [r3, #1]

}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000036c 	.word	0x2000036c

08002af0 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002afa:	f107 030f 	add.w	r3, r7, #15
 8002afe:	461a      	mov	r2, r3
 8002b00:	2101      	movs	r1, #1
 8002b02:	203a      	movs	r0, #58	; 0x3a
 8002b04:	f001 fb1e 	bl	8004144 <RadioSpiReadRegisters>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <SpiritQiSqiCheck+0x6c>)
 8002b0c:	b212      	sxth	r2, r2
 8002b0e:	4611      	mov	r1, r2
 8002b10:	7019      	strb	r1, [r3, #0]
 8002b12:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b16:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e004      	b.n	8002b34 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	f023 0302 	bic.w	r3, r3, #2
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002b34:	f107 030f 	add.w	r3, r7, #15
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	203a      	movs	r0, #58	; 0x3a
 8002b3e:	f001 fab5 	bl	80040ac <RadioSpiWriteRegisters>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <SpiritQiSqiCheck+0x6c>)
 8002b46:	b212      	sxth	r2, r2
 8002b48:	4611      	mov	r1, r2
 8002b4a:	7019      	strb	r1, [r3, #0]
 8002b4c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b50:	705a      	strb	r2, [r3, #1]

}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	2000036c 	.word	0x2000036c

08002b60 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002b6a:	f107 030f 	add.w	r3, r7, #15
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2101      	movs	r1, #1
 8002b72:	203a      	movs	r0, #58	; 0x3a
 8002b74:	f001 fae6 	bl	8004144 <RadioSpiReadRegisters>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <SpiritQiSetSqiThreshold+0x64>)
 8002b7c:	b212      	sxth	r2, r2
 8002b7e:	4611      	mov	r1, r2
 8002b80:	7019      	strb	r1, [r3, #0]
 8002b82:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b86:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002b9c:	f107 030f 	add.w	r3, r7, #15
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	203a      	movs	r0, #58	; 0x3a
 8002ba6:	f001 fa81 	bl	80040ac <RadioSpiWriteRegisters>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <SpiritQiSetSqiThreshold+0x64>)
 8002bae:	b212      	sxth	r2, r2
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	7019      	strb	r1, [r3, #0]
 8002bb4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bb8:	705a      	strb	r2, [r3, #1]

}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2000036c 	.word	0x2000036c

08002bc8 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3382      	adds	r3, #130	; 0x82
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002bdc:	f107 030f 	add.w	r3, r7, #15
 8002be0:	461a      	mov	r2, r3
 8002be2:	2101      	movs	r1, #1
 8002be4:	2022      	movs	r0, #34	; 0x22
 8002be6:	f001 fa61 	bl	80040ac <RadioSpiWriteRegisters>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SpiritQiSetRssiThresholddBm+0x3c>)
 8002bee:	b212      	sxth	r2, r2
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	7019      	strb	r1, [r3, #0]
 8002bf4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bf8:	705a      	strb	r2, [r3, #1]

}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000036c 	.word	0x2000036c

08002c08 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b08d      	sub	sp, #52	; 0x34
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	747b      	strb	r3, [r7, #17]
 8002c14:	f107 0311 	add.w	r3, r7, #17
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	209f      	movs	r0, #159	; 0x9f
 8002c1e:	f001 fa45 	bl	80040ac <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe f807 	bl	8000c3c <__aeabi_i2f>
 8002c2e:	4604      	mov	r4, r0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fffd 	bl	8000c34 <__aeabi_ui2f>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7fe f850 	bl	8000ce4 <__aeabi_fmul>
 8002c44:	4603      	mov	r3, r0
 8002c46:	49a0      	ldr	r1, [pc, #640]	; (8002ec8 <SpiritRadioInit+0x2c0>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe f8ff 	bl	8000e4c <__aeabi_fdiv>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fa0d 	bl	8001070 <__aeabi_f2iz>
 8002c56:	4603      	mov	r3, r0
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002c5a:	2063      	movs	r0, #99	; 0x63
 8002c5c:	f001 fabe 	bl	80041dc <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002c60:	2300      	movs	r3, #0
 8002c62:	73bb      	strb	r3, [r7, #14]
 8002c64:	e004      	b.n	8002c70 <SpiritRadioInit+0x68>
 8002c66:	7bbb      	ldrb	r3, [r7, #14]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	73bb      	strb	r3, [r7, #14]
 8002c70:	7bbb      	ldrb	r3, [r7, #14]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2bff      	cmp	r3, #255	; 0xff
 8002c76:	d1f6      	bne.n	8002c66 <SpiritRadioInit+0x5e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002c78:	f001 f9e6 	bl	8004048 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002c7c:	4b93      	ldr	r3, [pc, #588]	; (8002ecc <SpiritRadioInit+0x2c4>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d1ea      	bne.n	8002c60 <SpiritRadioInit+0x58>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002c8a:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <SpiritRadioInit+0x2c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a91      	ldr	r2, [pc, #580]	; (8002ed4 <SpiritRadioInit+0x2cc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d803      	bhi.n	8002c9c <SpiritRadioInit+0x94>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f001 f90b 	bl	8003eb0 <SpiritRadioSetDigDiv>
 8002c9a:	e002      	b.n	8002ca2 <SpiritRadioInit+0x9a>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f001 f907 	bl	8003eb0 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002ca2:	2062      	movs	r0, #98	; 0x62
 8002ca4:	f001 fa9a 	bl	80041dc <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	737b      	strb	r3, [r7, #13]
 8002cac:	e004      	b.n	8002cb8 <SpiritRadioInit+0xb0>
 8002cae:	7b7b      	ldrb	r3, [r7, #13]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	737b      	strb	r3, [r7, #13]
 8002cb8:	7b7b      	ldrb	r3, [r7, #13]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2bff      	cmp	r3, #255	; 0xff
 8002cbe:	d1f6      	bne.n	8002cae <SpiritRadioInit+0xa6>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002cc0:	f001 f9c2 	bl	8004048 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002cc4:	4b81      	ldr	r3, [pc, #516]	; (8002ecc <SpiritRadioInit+0x2c4>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d1ea      	bne.n	8002ca8 <SpiritRadioInit+0xa0>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cd4:	f7fd ffb2 	bl	8000c3c <__aeabi_i2f>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f04f 4191 	mov.w	r1, #1216348160	; 0x48800000
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f800 	bl	8000ce4 <__aeabi_fmul>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461c      	mov	r4, r3
 8002ce8:	4b79      	ldr	r3, [pc, #484]	; (8002ed0 <SpiritRadioInit+0x2c8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd ffa1 	bl	8000c34 <__aeabi_ui2f>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7fe f8a8 	bl	8000e4c <__aeabi_fdiv>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f9b6 	bl	8001070 <__aeabi_f2iz>
 8002d04:	4603      	mov	r3, r0
 8002d06:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002d08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002d18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	025a      	lsls	r2, r3, #9
 8002d24:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <SpiritRadioInit+0x2c8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fc94 	bl	8002668 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002d40:	f107 0310 	add.w	r3, r7, #16
 8002d44:	461a      	mov	r2, r3
 8002d46:	2101      	movs	r1, #1
 8002d48:	20a3      	movs	r0, #163	; 0xa3
 8002d4a:	f001 f9fb 	bl	8004144 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002d4e:	7c3b      	ldrb	r3, [r7, #16]
 8002d50:	f023 0302 	bic.w	r3, r3, #2
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	743b      	strb	r3, [r7, #16]
 8002d58:	f107 0310 	add.w	r3, r7, #16
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2101      	movs	r1, #1
 8002d60:	20a3      	movs	r0, #163	; 0xa3
 8002d62:	f001 f9a3 	bl	80040ac <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f107 0216 	add.w	r2, r7, #22
 8002d6e:	f107 0117 	add.w	r1, r7, #23
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fc38 	bl	80035e8 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7b5a      	ldrb	r2, [r3, #13]
 8002d80:	7dbb      	ldrb	r3, [r7, #22]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2101      	movs	r1, #1
 8002d90:	201c      	movs	r0, #28
 8002d92:	f001 f9d7 	bl	8004144 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f107 0214 	add.w	r2, r7, #20
 8002d9e:	f107 0115 	add.w	r1, r7, #21
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fdb8 	bl	8003918 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002da8:	7d3b      	ldrb	r3, [r7, #20]
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	b25a      	sxtb	r2, r3
 8002dae:	7c3b      	ldrb	r3, [r7, #16]
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	4313      	orrs	r3, r2
 8002dba:	b25a      	sxtb	r2, r3
 8002dbc:	7d7b      	ldrb	r3, [r7, #21]
 8002dbe:	b25b      	sxtb	r3, r3
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f107 0212 	add.w	r2, r7, #18
 8002dd0:	f107 0113 	add.w	r1, r7, #19
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fcb9 	bl	800374c <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	b25a      	sxtb	r2, r3
 8002de0:	7cbb      	ldrb	r3, [r7, #18]
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	4313      	orrs	r3, r2
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002dec:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <SpiritRadioInit+0x2c8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0b1b      	lsrs	r3, r3, #12
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd ff1e 	bl	8000c34 <__aeabi_ui2f>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4836      	ldr	r0, [pc, #216]	; (8002ed8 <SpiritRadioInit+0x2d0>)
 8002dfe:	f7fe f825 	bl	8000e4c <__aeabi_fdiv>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fe61 	bl	8000ad0 <__aeabi_fsub>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e14:	f7fe f952 	bl	80010bc <__aeabi_f2uiz>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd ff0a 	bl	8000c34 <__aeabi_ui2f>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4619      	mov	r1, r3
 8002e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e26:	f7fd fe53 	bl	8000ad0 <__aeabi_fsub>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f913 	bl	800105c <__aeabi_fcmpgt>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <SpiritRadioInit+0x244>
 8002e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e3e:	f7fe f93d 	bl	80010bc <__aeabi_f2uiz>
 8002e42:	4603      	mov	r3, r0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e004      	b.n	8002e56 <SpiritRadioInit+0x24e>
 8002e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e4e:	f7fe f935 	bl	80010bc <__aeabi_f2uiz>
 8002e52:	4603      	mov	r3, r0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <SpiritRadioInit+0x2c8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <SpiritRadioInit+0x2cc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d802      	bhi.n	8002e68 <SpiritRadioInit+0x260>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	777b      	strb	r3, [r7, #29]
 8002e66:	e03f      	b.n	8002ee8 <SpiritRadioInit+0x2e0>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <SpiritRadioInit+0x2c8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0b5b      	lsrs	r3, r3, #13
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fee0 	bl	8000c34 <__aeabi_ui2f>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4619      	mov	r1, r3
 8002e78:	4817      	ldr	r0, [pc, #92]	; (8002ed8 <SpiritRadioInit+0x2d0>)
 8002e7a:	f7fd ffe7 	bl	8000e4c <__aeabi_fdiv>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd fe23 	bl	8000ad0 <__aeabi_fsub>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002e8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e90:	f7fe f914 	bl	80010bc <__aeabi_f2uiz>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fecc 	bl	8000c34 <__aeabi_ui2f>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ea2:	f7fd fe15 	bl	8000ad0 <__aeabi_fsub>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe f8d5 	bl	800105c <__aeabi_fcmpgt>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d011      	beq.n	8002edc <SpiritRadioInit+0x2d4>
 8002eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eba:	f7fe f8ff 	bl	80010bc <__aeabi_f2uiz>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e00e      	b.n	8002ee6 <SpiritRadioInit+0x2de>
 8002ec8:	49742400 	.word	0x49742400
 8002ecc:	2000036c 	.word	0x2000036c
 8002ed0:	20000368 	.word	0x20000368
 8002ed4:	01c9c37f 	.word	0x01c9c37f
 8002ed8:	49afd520 	.word	0x49afd520
 8002edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ede:	f7fe f8ed 	bl	80010bc <__aeabi_f2uiz>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002ee8:	f107 030f 	add.w	r3, r7, #15
 8002eec:	461a      	mov	r2, r3
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2007      	movs	r0, #7
 8002ef2:	f001 f8db 	bl	80040ac <RadioSpiWriteRegisters>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <SpiritRadioInit+0x3c4>)
 8002efa:	b212      	sxth	r2, r2
 8002efc:	4611      	mov	r1, r2
 8002efe:	7019      	strb	r1, [r3, #0]
 8002f00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f04:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002f06:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <SpiritRadioInit+0x3c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a32      	ldr	r2, [pc, #200]	; (8002fd4 <SpiritRadioInit+0x3cc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d90b      	bls.n	8002f28 <SpiritRadioInit+0x320>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002f10:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <SpiritRadioInit+0x3c8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a30      	ldr	r2, [pc, #192]	; (8002fd8 <SpiritRadioInit+0x3d0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	bf8c      	ite	hi
 8002f1a:	2301      	movhi	r3, #1
 8002f1c:	2300      	movls	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f85d 	bl	8002fe0 <SpiritRadioSetXtalFlag>
 8002f26:	e00a      	b.n	8002f3e <SpiritRadioInit+0x336>
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <SpiritRadioInit+0x3c8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a2b      	ldr	r2, [pc, #172]	; (8002fdc <SpiritRadioInit+0x3d4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	bf8c      	ite	hi
 8002f32:	2301      	movhi	r3, #1
 8002f34:	2300      	movls	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f851 	bl	8002fe0 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	330c      	adds	r3, #12
 8002f42:	461a      	mov	r2, r3
 8002f44:	2101      	movs	r1, #1
 8002f46:	206c      	movs	r0, #108	; 0x6c
 8002f48:	f001 f8b0 	bl	80040ac <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	461a      	mov	r2, r3
 8002f52:	2104      	movs	r1, #4
 8002f54:	200c      	movs	r0, #12
 8002f56:	f001 f8a9 	bl	80040ac <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002f5a:	f107 0318 	add.w	r3, r7, #24
 8002f5e:	461a      	mov	r2, r3
 8002f60:	2104      	movs	r1, #4
 8002f62:	201a      	movs	r0, #26
 8002f64:	f001 f8a2 	bl	80040ac <RadioSpiWriteRegisters>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <SpiritRadioInit+0x3c4>)
 8002f6c:	b212      	sxth	r2, r2
 8002f6e:	4611      	mov	r1, r2
 8002f70:	7019      	strb	r1, [r3, #0]
 8002f72:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f76:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f000 ff15 	bl	8003da8 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002f82:	23e3      	movs	r3, #227	; 0xe3
 8002f84:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	2099      	movs	r0, #153	; 0x99
 8002f90:	f001 f88c 	bl	80040ac <RadioSpiWriteRegisters>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <SpiritRadioInit+0x3c4>)
 8002f98:	b212      	sxth	r2, r2
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	7019      	strb	r1, [r3, #0]
 8002f9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fa2:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002fa4:	2322      	movs	r3, #34	; 0x22
 8002fa6:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	461a      	mov	r2, r3
 8002fae:	2101      	movs	r1, #1
 8002fb0:	20bc      	movs	r0, #188	; 0xbc
 8002fb2:	f001 f87b 	bl	80040ac <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f9ae 	bl	800331c <SpiritRadioSetFrequencyBase>
 8002fc0:	4603      	mov	r3, r0
  
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3734      	adds	r7, #52	; 0x34
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000036c 	.word	0x2000036c
 8002fd0:	20000368 	.word	0x20000368
 8002fd4:	01c9c380 	.word	0x01c9c380
 8002fd8:	02faf07f 	.word	0x02faf07f
 8002fdc:	017d783f 	.word	0x017d783f

08002fe0 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002fee:	f107 030f 	add.w	r3, r7, #15
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f001 f8a4 	bl	8004144 <RadioSpiReadRegisters>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b14      	ldr	r3, [pc, #80]	; (8003050 <SpiritRadioSetXtalFlag+0x70>)
 8003000:	b212      	sxth	r2, r2
 8003002:	4611      	mov	r1, r2
 8003004:	7019      	strb	r1, [r3, #0]
 8003006:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800300a:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d105      	bne.n	800301e <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003018:	b2db      	uxtb	r3, r3
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e004      	b.n	8003028 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003024:	b2db      	uxtb	r3, r3
 8003026:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003028:	f107 030f 	add.w	r3, r7, #15
 800302c:	461a      	mov	r2, r3
 800302e:	2101      	movs	r1, #1
 8003030:	2001      	movs	r0, #1
 8003032:	f001 f83b 	bl	80040ac <RadioSpiWriteRegisters>
 8003036:	4602      	mov	r2, r0
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <SpiritRadioSetXtalFlag+0x70>)
 800303a:	b212      	sxth	r2, r2
 800303c:	4611      	mov	r1, r2
 800303e:	7019      	strb	r1, [r3, #0]
 8003040:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003044:	705a      	strb	r2, [r3, #1]
  
}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2000036c 	.word	0x2000036c

08003054 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8003060:	2300      	movs	r3, #0
 8003062:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8003064:	2300      	movs	r3, #0
 8003066:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3a      	ldr	r2, [pc, #232]	; (8003154 <SpiritRadioSearchWCP+0x100>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d306      	bcc.n	800307e <SpiritRadioSearchWCP+0x2a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a39      	ldr	r2, [pc, #228]	; (8003158 <SpiritRadioSearchWCP+0x104>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d802      	bhi.n	800307e <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8003078:	2306      	movs	r3, #6
 800307a:	73bb      	strb	r3, [r7, #14]
 800307c:	e01f      	b.n	80030be <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a36      	ldr	r2, [pc, #216]	; (800315c <SpiritRadioSearchWCP+0x108>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d906      	bls.n	8003094 <SpiritRadioSearchWCP+0x40>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a35      	ldr	r2, [pc, #212]	; (8003160 <SpiritRadioSearchWCP+0x10c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d802      	bhi.n	8003094 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 800308e:	230c      	movs	r3, #12
 8003090:	73bb      	strb	r3, [r7, #14]
 8003092:	e014      	b.n	80030be <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a33      	ldr	r2, [pc, #204]	; (8003164 <SpiritRadioSearchWCP+0x110>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d906      	bls.n	80030aa <SpiritRadioSearchWCP+0x56>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a32      	ldr	r2, [pc, #200]	; (8003168 <SpiritRadioSearchWCP+0x114>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d802      	bhi.n	80030aa <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 80030a4:	2310      	movs	r3, #16
 80030a6:	73bb      	strb	r3, [r7, #14]
 80030a8:	e009      	b.n	80030be <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2f      	ldr	r2, [pc, #188]	; (800316c <SpiritRadioSearchWCP+0x118>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d905      	bls.n	80030be <SpiritRadioSearchWCP+0x6a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2e      	ldr	r2, [pc, #184]	; (8003170 <SpiritRadioSearchWCP+0x11c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d801      	bhi.n	80030be <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 80030ba:	2320      	movs	r3, #32
 80030bc:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2c      	ldr	r2, [pc, #176]	; (8003174 <SpiritRadioSearchWCP+0x120>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	7bba      	ldrb	r2, [r7, #14]
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 80030d0:	f241 631f 	movw	r3, #5663	; 0x161f
 80030d4:	461a      	mov	r2, r3
 80030d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d302      	bcc.n	80030ea <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 80030e4:	230f      	movs	r3, #15
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e023      	b.n	8003132 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	e005      	b.n	80030fc <SpiritRadioSearchWCP+0xa8>
 80030f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003100:	2b0e      	cmp	r3, #14
 8003102:	dc0c      	bgt.n	800311e <SpiritRadioSearchWCP+0xca>
 8003104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003108:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <SpiritRadioSearchWCP+0x124>)
 800310a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310e:	461a      	mov	r2, r3
 8003110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	429a      	cmp	r2, r3
 800311c:	d8e8      	bhi.n	80030f0 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 800311e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <SpiritRadioSearchWCP+0xde>
      i--;
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8003132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003136:	425a      	negs	r2, r3
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	f002 0207 	and.w	r2, r2, #7
 8003140:	bf58      	it	pl
 8003142:	4253      	negpl	r3, r2
 8003144:	b25b      	sxtb	r3, r3
 8003146:	b2db      	uxtb	r3, r3
  
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	2e5f5680 	.word	0x2e5f5680
 8003158:	390c2fe0 	.word	0x390c2fe0
 800315c:	1701e47f 	.word	0x1701e47f
 8003160:	1c146a60 	.word	0x1c146a60
 8003164:	11d260bf 	.word	0x11d260bf
 8003168:	14ced7e0 	.word	0x14ced7e0
 800316c:	08e18f3f 	.word	0x08e18f3f
 8003170:	0a6fd060 	.word	0x0a6fd060
 8003174:	10624dd3 	.word	0x10624dd3
 8003178:	0800a96c 	.word	0x0800a96c

0800317c <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	461a      	mov	r2, r3
 8003186:	2104      	movs	r1, #4
 8003188:	2008      	movs	r0, #8
 800318a:	f000 ffdb 	bl	8004144 <RadioSpiReadRegisters>
 800318e:	4602      	mov	r2, r0
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <SpiritRadioGetSynthWord+0x48>)
 8003192:	b212      	sxth	r2, r2
 8003194:	4611      	mov	r1, r2
 8003196:	7019      	strb	r1, [r3, #0]
 8003198:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800319c:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 800319e:	793b      	ldrb	r3, [r7, #4]
 80031a0:	055b      	lsls	r3, r3, #21
 80031a2:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80031a6:	797b      	ldrb	r3, [r7, #5]
 80031a8:	035b      	lsls	r3, r3, #13
 80031aa:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80031ac:	79bb      	ldrb	r3, [r7, #6]
 80031ae:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80031b0:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80031b2:	79fa      	ldrb	r2, [r7, #7]
 80031b4:	08d2      	lsrs	r2, r2, #3
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	4413      	add	r3, r2
  
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	2000036c 	.word	0x2000036c

080031c8 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	461a      	mov	r2, r3
 80031d2:	2101      	movs	r1, #1
 80031d4:	200b      	movs	r0, #11
 80031d6:	f000 ffb5 	bl	8004144 <RadioSpiReadRegisters>
 80031da:	4602      	mov	r2, r0
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <SpiritRadioGetBand+0x58>)
 80031de:	b212      	sxth	r2, r2
 80031e0:	4611      	mov	r1, r2
 80031e2:	7019      	strb	r1, [r3, #0]
 80031e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80031e8:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e00e      	b.n	8003216 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d101      	bne.n	8003206 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8003202:	2301      	movs	r3, #1
 8003204:	e007      	b.n	8003216 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	2b04      	cmp	r3, #4
 800320e:	d101      	bne.n	8003214 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003210:	2302      	movs	r3, #2
 8003212:	e000      	b.n	8003216 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003214:	2303      	movs	r3, #3
  }
  
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	2000036c 	.word	0x2000036c

08003224 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 800322a:	1dfb      	adds	r3, r7, #7
 800322c:	461a      	mov	r2, r3
 800322e:	2101      	movs	r1, #1
 8003230:	206c      	movs	r0, #108	; 0x6c
 8003232:	f000 ff87 	bl	8004144 <RadioSpiReadRegisters>
 8003236:	4602      	mov	r2, r0
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <SpiritRadioGetChannel+0x2c>)
 800323a:	b212      	sxth	r2, r2
 800323c:	4611      	mov	r1, r2
 800323e:	7019      	strb	r1, [r3, #0]
 8003240:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003244:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8003246:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	2000036c 	.word	0x2000036c

08003254 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	461a      	mov	r2, r3
 800325e:	2101      	movs	r1, #1
 8003260:	200c      	movs	r0, #12
 8003262:	f000 ff6f 	bl	8004144 <RadioSpiReadRegisters>
 8003266:	4602      	mov	r2, r0
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <SpiritRadioGetChannelSpace+0x38>)
 800326a:	b212      	sxth	r2, r2
 800326c:	4611      	mov	r1, r2
 800326e:	7019      	strb	r1, [r3, #0]
 8003270:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003274:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	461a      	mov	r2, r3
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <SpiritRadioGetChannelSpace+0x3c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	0bdb      	lsrs	r3, r3, #15
  
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	2000036c 	.word	0x2000036c
 8003290:	20000368 	.word	0x20000368

08003294 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	461a      	mov	r2, r3
 800329e:	2102      	movs	r1, #2
 80032a0:	200e      	movs	r0, #14
 80032a2:	f000 ff4f 	bl	8004144 <RadioSpiReadRegisters>
 80032a6:	4602      	mov	r2, r0
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <SpiritRadioGetFrequencyOffset+0x80>)
 80032aa:	b212      	sxth	r2, r2
 80032ac:	4611      	mov	r1, r2
 80032ae:	7019      	strb	r1, [r3, #0]
 80032b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032b4:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80032b6:	793b      	ldrb	r3, [r7, #4]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	b29a      	uxth	r2, r3
 80032be:	797b      	ldrb	r3, [r7, #5]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80032d8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80032dc:	b29b      	uxth	r3, r3
 80032de:	807b      	strh	r3, [r7, #2]
 80032e0:	e004      	b.n	80032ec <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80032ec:	1cbb      	adds	r3, r7, #2
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 80032f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <SpiritRadioGetFrequencyOffset+0x84>)
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da03      	bge.n	800330a <SpiritRadioGetFrequencyOffset+0x76>
 8003302:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003306:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800330a:	149b      	asrs	r3, r3, #18
  
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	2000036c 	.word	0x2000036c
 8003318:	20000368 	.word	0x20000368

0800331c <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 800331c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003320:	b08a      	sub	sp, #40	; 0x28
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8003326:	2300      	movs	r3, #0
 8003328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a79      	ldr	r2, [pc, #484]	; (8003514 <SpiritRadioSetFrequencyBase+0x1f8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d307      	bcc.n	8003344 <SpiritRadioSetFrequencyBase+0x28>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a78      	ldr	r2, [pc, #480]	; (8003518 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d803      	bhi.n	8003344 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 800333c:	2300      	movs	r3, #0
 800333e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003342:	e022      	b.n	800338a <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a75      	ldr	r2, [pc, #468]	; (800351c <SpiritRadioSetFrequencyBase+0x200>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d907      	bls.n	800335c <SpiritRadioSetFrequencyBase+0x40>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a74      	ldr	r2, [pc, #464]	; (8003520 <SpiritRadioSetFrequencyBase+0x204>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d803      	bhi.n	800335c <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800335a:	e016      	b.n	800338a <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a71      	ldr	r2, [pc, #452]	; (8003524 <SpiritRadioSetFrequencyBase+0x208>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d907      	bls.n	8003374 <SpiritRadioSetFrequencyBase+0x58>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a70      	ldr	r2, [pc, #448]	; (8003528 <SpiritRadioSetFrequencyBase+0x20c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d803      	bhi.n	8003374 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 800336c:	2302      	movs	r3, #2
 800336e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003372:	e00a      	b.n	800338a <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a6d      	ldr	r2, [pc, #436]	; (800352c <SpiritRadioSetFrequencyBase+0x210>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d906      	bls.n	800338a <SpiritRadioSetFrequencyBase+0x6e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a6c      	ldr	r2, [pc, #432]	; (8003530 <SpiritRadioSetFrequencyBase+0x214>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d802      	bhi.n	800338a <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8003384:	2303      	movs	r3, #3
 8003386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800338a:	f7ff ff83 	bl	8003294 <SpiritRadioGetFrequencyOffset>
 800338e:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003390:	f7ff ff60 	bl	8003254 <SpiritRadioGetChannelSpace>
 8003394:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8003396:	f7ff ff45 	bl	8003224 <SpiritRadioGetChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 800339e:	6a3a      	ldr	r2, [r7, #32]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	441a      	add	r2, r3
 80033a4:	7efb      	ldrb	r3, [r7, #27]
 80033a6:	69f9      	ldr	r1, [r7, #28]
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80033b0:	f000 fd5c 	bl	8003e6c <SpiritRadioGetRefDiv>
 80033b4:	4603      	mov	r3, r0
 80033b6:	3301      	adds	r3, #1
 80033b8:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80033ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d839      	bhi.n	8003436 <SpiritRadioSetFrequencyBase+0x11a>
 80033c2:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <SpiritRadioSetFrequencyBase+0xac>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	08003421 	.word	0x08003421
 80033cc:	08003409 	.word	0x08003409
 80033d0:	080033f1 	.word	0x080033f1
 80033d4:	080033d9 	.word	0x080033d9
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	4a56      	ldr	r2, [pc, #344]	; (8003534 <SpiritRadioSetFrequencyBase+0x218>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d803      	bhi.n	80033e8 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7fe fdcd 	bl	8001f80 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80033e6:	e026      	b.n	8003436 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80033e8:	2001      	movs	r0, #1
 80033ea:	f7fe fdc9 	bl	8001f80 <SpiritCalibrationSelectVco>
    break;
 80033ee:	e022      	b.n	8003436 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	4a51      	ldr	r2, [pc, #324]	; (8003538 <SpiritRadioSetFrequencyBase+0x21c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d803      	bhi.n	8003400 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80033f8:	2000      	movs	r0, #0
 80033fa:	f7fe fdc1 	bl	8001f80 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80033fe:	e01a      	b.n	8003436 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003400:	2001      	movs	r0, #1
 8003402:	f7fe fdbd 	bl	8001f80 <SpiritCalibrationSelectVco>
    break;
 8003406:	e016      	b.n	8003436 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	4a4c      	ldr	r2, [pc, #304]	; (800353c <SpiritRadioSetFrequencyBase+0x220>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d803      	bhi.n	8003418 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003410:	2000      	movs	r0, #0
 8003412:	f7fe fdb5 	bl	8001f80 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003416:	e00e      	b.n	8003436 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003418:	2001      	movs	r0, #1
 800341a:	f7fe fdb1 	bl	8001f80 <SpiritCalibrationSelectVco>
    break;
 800341e:	e00a      	b.n	8003436 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	4a47      	ldr	r2, [pc, #284]	; (8003540 <SpiritRadioSetFrequencyBase+0x224>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d803      	bhi.n	8003430 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003428:	2000      	movs	r0, #0
 800342a:	f7fe fda9 	bl	8001f80 <SpiritCalibrationSelectVco>
 800342e:	e002      	b.n	8003436 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003430:	2001      	movs	r0, #1
 8003432:	f7fe fda5 	bl	8001f80 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f7ff fe0c 	bl	8003054 <SpiritRadioSearchWCP>
 800343c:	4603      	mov	r3, r0
 800343e:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003444:	4a3f      	ldr	r2, [pc, #252]	; (8003544 <SpiritRadioSetFrequencyBase+0x228>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	461a      	mov	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	4618      	mov	r0, r3
 8003452:	f7fc ffc7 	bl	80003e4 <__aeabi_ui2d>
 8003456:	4604      	mov	r4, r0
 8003458:	460d      	mov	r5, r1
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	049b      	lsls	r3, r3, #18
 800345e:	4618      	mov	r0, r3
 8003460:	f7fc ffd0 	bl	8000404 <__aeabi_i2d>
 8003464:	4680      	mov	r8, r0
 8003466:	4689      	mov	r9, r1
 8003468:	4b37      	ldr	r3, [pc, #220]	; (8003548 <SpiritRadioSetFrequencyBase+0x22c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fc ffb9 	bl	80003e4 <__aeabi_ui2d>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4640      	mov	r0, r8
 8003478:	4649      	mov	r1, r9
 800347a:	f7fd f957 	bl	800072c <__aeabi_ddiv>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4620      	mov	r0, r4
 8003484:	4629      	mov	r1, r5
 8003486:	f7fd f827 	bl	80004d8 <__aeabi_dmul>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f7fd faf9 	bl	8000a88 <__aeabi_d2uiz>
 8003496:	4603      	mov	r3, r0
 8003498:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	0d5b      	lsrs	r3, r3, #21
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	7cbb      	ldrb	r3, [r7, #18]
 80034a8:	015b      	lsls	r3, r3, #5
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	4313      	orrs	r3, r2
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	0b5b      	lsrs	r3, r3, #13
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ce:	491f      	ldr	r1, [pc, #124]	; (800354c <SpiritRadioSetFrequencyBase+0x230>)
 80034d0:	5ccb      	ldrb	r3, [r1, r3]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80034d8:	f107 0308 	add.w	r3, r7, #8
 80034dc:	461a      	mov	r2, r3
 80034de:	2104      	movs	r1, #4
 80034e0:	2008      	movs	r0, #8
 80034e2:	f000 fde3 	bl	80040ac <RadioSpiWriteRegisters>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <SpiritRadioSetFrequencyBase+0x234>)
 80034ea:	b212      	sxth	r2, r2
 80034ec:	4611      	mov	r1, r2
 80034ee:	7019      	strb	r1, [r3, #0]
 80034f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034f4:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <SpiritRadioSetFrequencyBase+0x238>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d103      	bne.n	8003506 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 80034fe:	f7fe ff9f 	bl	8002440 <SpiritManagementWaVcoCalibration>
 8003502:	4603      	mov	r3, r0
 8003504:	e000      	b.n	8003508 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3728      	adds	r7, #40	; 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003512:	bf00      	nop
 8003514:	2e5f5680 	.word	0x2e5f5680
 8003518:	390c2fe0 	.word	0x390c2fe0
 800351c:	1701e47f 	.word	0x1701e47f
 8003520:	1c146a60 	.word	0x1c146a60
 8003524:	11d260bf 	.word	0x11d260bf
 8003528:	14ced7e0 	.word	0x14ced7e0
 800352c:	08e18f3f 	.word	0x08e18f3f
 8003530:	0a6fd060 	.word	0x0a6fd060
 8003534:	099cf4e1 	.word	0x099cf4e1
 8003538:	1339e9c3 	.word	0x1339e9c3
 800353c:	19a28d05 	.word	0x19a28d05
 8003540:	33451a0a 	.word	0x33451a0a
 8003544:	0800a8b0 	.word	0x0800a8b0
 8003548:	20000368 	.word	0x20000368
 800354c:	0800a8b4 	.word	0x0800a8b4
 8003550:	2000036c 	.word	0x2000036c
 8003554:	2000000d 	.word	0x2000000d

08003558 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003560:	f7ff fe0c 	bl	800317c <SpiritRadioGetSynthWord>
 8003564:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8003566:	f7ff fe2f 	bl	80031c8 <SpiritRadioGetBand>
 800356a:	4603      	mov	r3, r0
 800356c:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 800356e:	f000 fc7d 	bl	8003e6c <SpiritRadioGetRefDiv>
 8003572:	4603      	mov	r3, r0
 8003574:	3301      	adds	r3, #1
 8003576:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fc ff33 	bl	80003e4 <__aeabi_ui2d>
 800357e:	4604      	mov	r4, r0
 8003580:	460d      	mov	r5, r1
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <SpiritRadioGetFrequencyBase+0x88>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc ff2c 	bl	80003e4 <__aeabi_ui2d>
 800358c:	4680      	mov	r8, r0
 800358e:	4689      	mov	r9, r1
 8003590:	78bb      	ldrb	r3, [r7, #2]
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	4913      	ldr	r1, [pc, #76]	; (80035e4 <SpiritRadioGetFrequencyBase+0x8c>)
 8003596:	5c8a      	ldrb	r2, [r1, r2]
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	049b      	lsls	r3, r3, #18
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc ff30 	bl	8000404 <__aeabi_i2d>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4640      	mov	r0, r8
 80035aa:	4649      	mov	r1, r9
 80035ac:	f7fd f8be 	bl	800072c <__aeabi_ddiv>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4620      	mov	r0, r4
 80035b6:	4629      	mov	r1, r5
 80035b8:	f7fc ff8e 	bl	80004d8 <__aeabi_dmul>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	f006 ff52 	bl	800a46c <round>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	f7fd fa5a 	bl	8000a88 <__aeabi_d2uiz>
 80035d4:	4603      	mov	r3, r0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035e0:	20000368 	.word	0x20000368
 80035e4:	0800a8b0 	.word	0x0800a8b0

080035e8 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 80035f8:	230f      	movs	r3, #15
 80035fa:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003600:	f000 fc86 	bl	8003f10 <SpiritRadioGetDigDiv>
 8003604:	4603      	mov	r3, r0
 8003606:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003608:	e015      	b.n	8003636 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 800360a:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <SpiritRadioSearchDatarateME+0x160>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003612:	f1c3 0114 	rsb	r1, r3, #20
 8003616:	7ebb      	ldrb	r3, [r7, #26]
 8003618:	440b      	add	r3, r1
 800361a:	fa22 f303 	lsr.w	r3, r2, r3
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	429a      	cmp	r2, r3
 8003622:	d302      	bcc.n	800362a <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	763b      	strb	r3, [r7, #24]
 8003628:	e005      	b.n	8003636 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 800362a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003636:	7e3b      	ldrb	r3, [r7, #24]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <SpiritRadioSearchDatarateME+0x5e>
 800363e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003642:	2b00      	cmp	r3, #0
 8003644:	dae1      	bge.n	800360a <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003646:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800364a:	2b00      	cmp	r3, #0
 800364c:	da01      	bge.n	8003652 <SpiritRadioSearchDatarateME+0x6a>
 800364e:	2300      	movs	r3, #0
 8003650:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003652:	7ffa      	ldrb	r2, [r7, #31]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003658:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800365c:	f1c3 0317 	rsb	r3, r3, #23
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	409a      	lsls	r2, r3
 8003664:	4b38      	ldr	r3, [pc, #224]	; (8003748 <SpiritRadioSearchDatarateME+0x160>)
 8003666:	6819      	ldr	r1, [r3, #0]
 8003668:	7ebb      	ldrb	r3, [r7, #26]
 800366a:	3305      	adds	r3, #5
 800366c:	fa21 f303 	lsr.w	r3, r1, r3
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003676:	2300      	movs	r3, #0
 8003678:	77bb      	strb	r3, [r7, #30]
 800367a:	e031      	b.n	80036e0 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 800367c:	7e7a      	ldrb	r2, [r7, #25]
 800367e:	7fbb      	ldrb	r3, [r7, #30]
 8003680:	4413      	add	r3, r2
 8003682:	2b01      	cmp	r3, #1
 8003684:	d021      	beq.n	80036ca <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	b29a      	uxth	r2, r3
 800368a:	7e7b      	ldrb	r3, [r7, #25]
 800368c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003690:	7fbb      	ldrb	r3, [r7, #30]
 8003692:	440b      	add	r3, r1
 8003694:	3b01      	subs	r3, #1
 8003696:	4618      	mov	r0, r3
 8003698:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <SpiritRadioSearchDatarateME+0x160>)
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	7ebb      	ldrb	r3, [r7, #26]
 800369e:	3305      	adds	r3, #5
 80036a0:	fa21 f303 	lsr.w	r3, r1, r3
 80036a4:	fb03 f100 	mul.w	r1, r3, r0
 80036a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036ac:	f1c3 0317 	rsb	r3, r3, #23
 80036b0:	fa21 f303 	lsr.w	r3, r1, r3
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	7fbb      	ldrb	r3, [r7, #30]
 80036bc:	b212      	sxth	r2, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	3320      	adds	r3, #32
 80036c2:	443b      	add	r3, r7
 80036c4:	f823 2c10 	strh.w	r2, [r3, #-16]
 80036c8:	e007      	b.n	80036da <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80036ca:	7fbb      	ldrb	r3, [r7, #30]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	3320      	adds	r3, #32
 80036d0:	443b      	add	r3, r7
 80036d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80036d6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80036da:	7fbb      	ldrb	r3, [r7, #30]
 80036dc:	3301      	adds	r3, #1
 80036de:	77bb      	strb	r3, [r7, #30]
 80036e0:	7fbb      	ldrb	r3, [r7, #30]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d9ca      	bls.n	800367c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80036e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ea:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 80036ec:	2300      	movs	r3, #0
 80036ee:	76fb      	strb	r3, [r7, #27]
 80036f0:	e021      	b.n	8003736 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80036f2:	7efb      	ldrb	r3, [r7, #27]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	3320      	adds	r3, #32
 80036f8:	443b      	add	r3, r7
 80036fa:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bfb8      	it	lt
 8003702:	425b      	neglt	r3, r3
 8003704:	b29b      	uxth	r3, r3
 8003706:	8bba      	ldrh	r2, [r7, #28]
 8003708:	429a      	cmp	r2, r3
 800370a:	d911      	bls.n	8003730 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 800370c:	7efb      	ldrb	r3, [r7, #27]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	3320      	adds	r3, #32
 8003712:	443b      	add	r3, r7
 8003714:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	bfb8      	it	lt
 800371c:	425b      	neglt	r3, r3
 800371e:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003720:	7e7a      	ldrb	r2, [r7, #25]
 8003722:	7efb      	ldrb	r3, [r7, #27]
 8003724:	4413      	add	r3, r2
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003730:	7efb      	ldrb	r3, [r7, #27]
 8003732:	3301      	adds	r3, #1
 8003734:	76fb      	strb	r3, [r7, #27]
 8003736:	7efb      	ldrb	r3, [r7, #27]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d9da      	bls.n	80036f2 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000368 	.word	0x20000368

0800374c <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 800375e:	f000 fbd7 	bl	8003f10 <SpiritRadioGetDigDiv>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003768:	2302      	movs	r3, #2
 800376a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800376e:	e002      	b.n	8003776 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003776:	4b63      	ldr	r3, [pc, #396]	; (8003904 <SpiritRadioSearchChannelBwME+0x1b8>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	4a61      	ldr	r2, [pc, #388]	; (8003908 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 800378c:	2300      	movs	r3, #0
 800378e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003792:	e006      	b.n	80037a2 <SpiritRadioSearchChannelBwME+0x56>
 8003794:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003798:	b2db      	uxtb	r3, r3
 800379a:	3301      	adds	r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037a6:	2b59      	cmp	r3, #89	; 0x59
 80037a8:	dc0f      	bgt.n	80037ca <SpiritRadioSearchChannelBwME+0x7e>
 80037aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037ae:	4a57      	ldr	r2, [pc, #348]	; (800390c <SpiritRadioSearchChannelBwME+0x1c0>)
 80037b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037b4:	461a      	mov	r2, r3
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	4a54      	ldr	r2, [pc, #336]	; (8003910 <SpiritRadioSearchChannelBwME+0x1c4>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	0adb      	lsrs	r3, r3, #11
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3e4      	bcc.n	8003794 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 80037ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d077      	beq.n	80038c2 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80037d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d6:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80037de:	e03a      	b.n	8003856 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 80037e0:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80037e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80037e8:	4413      	add	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	dc06      	bgt.n	80037fc <SpiritRadioSearchChannelBwME+0xb0>
 80037ee:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80037f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80037f6:	4413      	add	r3, r2
 80037f8:	2b5a      	cmp	r3, #90	; 0x5a
 80037fa:	dc1e      	bgt.n	800383a <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003804:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003808:	440b      	add	r3, r1
 800380a:	3b01      	subs	r3, #1
 800380c:	493f      	ldr	r1, [pc, #252]	; (800390c <SpiritRadioSearchChannelBwME+0x1c0>)
 800380e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003812:	4619      	mov	r1, r3
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	493d      	ldr	r1, [pc, #244]	; (8003910 <SpiritRadioSearchChannelBwME+0x1c4>)
 800381c:	fba1 1303 	umull	r1, r3, r1, r3
 8003820:	0adb      	lsrs	r3, r3, #11
 8003822:	b29b      	uxth	r3, r3
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	b29a      	uxth	r2, r3
 8003828:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800382c:	b212      	sxth	r2, r2
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	3328      	adds	r3, #40	; 0x28
 8003832:	443b      	add	r3, r7
 8003834:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003838:	e008      	b.n	800384c <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 800383a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	3328      	adds	r3, #40	; 0x28
 8003842:	443b      	add	r3, r7
 8003844:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003848:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 800384c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003850:	3301      	adds	r3, #1
 8003852:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003856:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800385a:	2b02      	cmp	r3, #2
 800385c:	d9c0      	bls.n	80037e0 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 800385e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003862:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003864:	2300      	movs	r3, #0
 8003866:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800386a:	e026      	b.n	80038ba <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 800386c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	3328      	adds	r3, #40	; 0x28
 8003874:	443b      	add	r3, r7
 8003876:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	bfb8      	it	lt
 800387e:	425b      	neglt	r3, r3
 8003880:	b29b      	uxth	r3, r3
 8003882:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003884:	429a      	cmp	r2, r3
 8003886:	d913      	bls.n	80038b0 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003888:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	3328      	adds	r3, #40	; 0x28
 8003890:	443b      	add	r3, r7
 8003892:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	bfb8      	it	lt
 800389a:	425b      	neglt	r3, r3
 800389c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 800389e:	7efa      	ldrb	r2, [r7, #27]
 80038a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80038a4:	4413      	add	r3, r2
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 80038b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80038b4:	3301      	adds	r3, #1
 80038b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80038ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d9d4      	bls.n	800386c <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80038c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038c6:	4a13      	ldr	r2, [pc, #76]	; (8003914 <SpiritRadioSearchChannelBwME+0x1c8>)
 80038c8:	fb82 1203 	smull	r1, r2, r2, r3
 80038cc:	1052      	asrs	r2, r2, #1
 80038ce:	17db      	asrs	r3, r3, #31
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 80038da:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <SpiritRadioSearchChannelBwME+0x1c8>)
 80038e0:	fb83 1302 	smull	r1, r3, r3, r2
 80038e4:	1059      	asrs	r1, r3, #1
 80038e6:	17d3      	asrs	r3, r2, #31
 80038e8:	1ac9      	subs	r1, r1, r3
 80038ea:	460b      	mov	r3, r1
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	440b      	add	r3, r1
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	701a      	strb	r2, [r3, #0]
  
}
 80038fa:	bf00      	nop
 80038fc:	3728      	adds	r7, #40	; 0x28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000368 	.word	0x20000368
 8003908:	51eb851f 	.word	0x51eb851f
 800390c:	0800a8b8 	.word	0x0800a8b8
 8003910:	c9a633fd 	.word	0xc9a633fd
 8003914:	38e38e39 	.word	0x38e38e39

08003918 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003918:	b5b0      	push	{r4, r5, r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003924:	2300      	movs	r3, #0
 8003926:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003928:	4b55      	ldr	r3, [pc, #340]	; (8003a80 <SpiritRadioSearchFreqDevME+0x168>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd f981 	bl	8000c34 <__aeabi_ui2f>
 8003932:	4603      	mov	r3, r0
 8003934:	f04f 4191 	mov.w	r1, #1216348160	; 0x48800000
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd fa87 	bl	8000e4c <__aeabi_fdiv>
 800393e:	4603      	mov	r3, r0
 8003940:	61bb      	str	r3, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003942:	2300      	movs	r3, #0
 8003944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003948:	e02a      	b.n	80039a0 <SpiritRadioSearchFreqDevME+0x88>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 800394a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800394e:	2201      	movs	r2, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	4618      	mov	r0, r3
 8003956:	f7fc fd55 	bl	8000404 <__aeabi_i2d>
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <SpiritRadioSearchFreqDevME+0x16c>)
 8003960:	f7fc fdba 	bl	80004d8 <__aeabi_dmul>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	f7fd f88c 	bl	8000a88 <__aeabi_d2uiz>
 8003970:	4603      	mov	r3, r0
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd f95e 	bl	8000c34 <__aeabi_ui2f>
 8003978:	4603      	mov	r3, r0
 800397a:	69b9      	ldr	r1, [r7, #24]
 800397c:	4618      	mov	r0, r3
 800397e:	f7fd f9b1 	bl	8000ce4 <__aeabi_fmul>
 8003982:	4603      	mov	r3, r0
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd fb99 	bl	80010bc <__aeabi_f2uiz>
 800398a:	4603      	mov	r3, r0
 800398c:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	429a      	cmp	r2, r3
 8003994:	d309      	bcc.n	80039aa <SpiritRadioSearchFreqDevME+0x92>
  for(i=0;i<10;i++)
 8003996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800399a:	3301      	adds	r3, #1
 800399c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039a4:	2b09      	cmp	r3, #9
 80039a6:	d9d0      	bls.n	800394a <SpiritRadioSearchFreqDevME+0x32>
 80039a8:	e000      	b.n	80039ac <SpiritRadioSearchFreqDevME+0x94>
      break;
 80039aa:	bf00      	nop
  }
  (*pcE) = i;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039b2:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039ba:	e045      	b.n	8003a48 <SpiritRadioSearchFreqDevME+0x130>
  {
    bp=b;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 80039c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fc fd1d 	bl	8000404 <__aeabi_i2d>
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <SpiritRadioSearchFreqDevME+0x170>)
 80039d0:	f7fc fbcc 	bl	800016c <__adddf3>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4610      	mov	r0, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039e4:	f7fc fea2 	bl	800072c <__aeabi_ddiv>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4614      	mov	r4, r2
 80039ee:	461d      	mov	r5, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	2301      	movs	r3, #1
 80039f8:	4093      	lsls	r3, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fc fd02 	bl	8000404 <__aeabi_i2d>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4620      	mov	r0, r4
 8003a06:	4629      	mov	r1, r5
 8003a08:	f7fc fd66 	bl	80004d8 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	f7fd f838 	bl	8000a88 <__aeabi_d2uiz>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd f90a 	bl	8000c34 <__aeabi_ui2f>
 8003a20:	4603      	mov	r3, r0
 8003a22:	69b9      	ldr	r1, [r7, #24]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fd f95d 	bl	8000ce4 <__aeabi_fmul>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fd fb45 	bl	80010bc <__aeabi_f2uiz>
 8003a32:	4603      	mov	r3, r0
 8003a34:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d309      	bcc.n	8003a52 <SpiritRadioSearchFreqDevME+0x13a>
  for(i=0;i<8;i++)
 8003a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a42:	3301      	adds	r3, #1
 8003a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a4c:	2b07      	cmp	r3, #7
 8003a4e:	d9b5      	bls.n	80039bc <SpiritRadioSearchFreqDevME+0xa4>
 8003a50:	e000      	b.n	8003a54 <SpiritRadioSearchFreqDevME+0x13c>
      break;
 8003a52:	bf00      	nop
  }
  
  (*pcM)=i;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a5a:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	1ad2      	subs	r2, r2, r3
 8003a62:	69f9      	ldr	r1, [r7, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1acb      	subs	r3, r1, r3
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d205      	bcs.n	8003a78 <SpiritRadioSearchFreqDevME+0x160>
    (*pcM)--;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	701a      	strb	r2, [r3, #0]
  
}
 8003a78:	bf00      	nop
 8003a7a:	3728      	adds	r7, #40	; 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a80:	20000368 	.word	0x20000368
 8003a84:	401e0000 	.word	0x401e0000
 8003a88:	40200000 	.word	0x40200000

08003a8c <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint8_t i=0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
  uint8_t j=0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73bb      	strb	r3, [r7, #14]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a74      	ldr	r2, [pc, #464]	; (8003c74 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d30c      	bcc.n	8003ac0 <SpiritRadioGetdBm2Reg+0x34>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a73      	ldr	r2, [pc, #460]	; (8003c78 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d808      	bhi.n	8003ac0 <SpiritRadioGetdBm2Reg+0x34>
  {
    i=0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
    if(lFBase<900000000) i=1;// 868   
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a71      	ldr	r2, [pc, #452]	; (8003c7c <SpiritRadioGetdBm2Reg+0x1f0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d822      	bhi.n	8003b00 <SpiritRadioGetdBm2Reg+0x74>
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	e01f      	b.n	8003b00 <SpiritRadioGetdBm2Reg+0x74>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a6f      	ldr	r2, [pc, #444]	; (8003c80 <SpiritRadioGetdBm2Reg+0x1f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d906      	bls.n	8003ad6 <SpiritRadioGetdBm2Reg+0x4a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a6e      	ldr	r2, [pc, #440]	; (8003c84 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d802      	bhi.n	8003ad6 <SpiritRadioGetdBm2Reg+0x4a>
  {
    i=2;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	73fb      	strb	r3, [r7, #15]
 8003ad4:	e014      	b.n	8003b00 <SpiritRadioGetdBm2Reg+0x74>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a6b      	ldr	r2, [pc, #428]	; (8003c88 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d906      	bls.n	8003aec <SpiritRadioGetdBm2Reg+0x60>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a6a      	ldr	r2, [pc, #424]	; (8003c8c <SpiritRadioGetdBm2Reg+0x200>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d802      	bhi.n	8003aec <SpiritRadioGetdBm2Reg+0x60>
  {
    i=3;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e009      	b.n	8003b00 <SpiritRadioGetdBm2Reg+0x74>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a68      	ldr	r2, [pc, #416]	; (8003c90 <SpiritRadioGetdBm2Reg+0x204>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d905      	bls.n	8003b00 <SpiritRadioGetdBm2Reg+0x74>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <SpiritRadioGetdBm2Reg+0x208>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d801      	bhi.n	8003b00 <SpiritRadioGetdBm2Reg+0x74>
  {
    i=4;
 8003afc:	2304      	movs	r3, #4
 8003afe:	73fb      	strb	r3, [r7, #15]
  }
  
  j=1;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73bb      	strb	r3, [r7, #14]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	6838      	ldr	r0, [r7, #0]
 8003b0a:	f7fd faa7 	bl	800105c <__aeabi_fcmpgt>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d033      	beq.n	8003b7c <SpiritRadioGetdBm2Reg+0xf0>
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	4960      	ldr	r1, [pc, #384]	; (8003c98 <SpiritRadioGetdBm2Reg+0x20c>)
 8003b18:	4613      	mov	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	440b      	add	r3, r1
 8003b22:	3308      	adds	r3, #8
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4619      	mov	r1, r3
 8003b28:	485c      	ldr	r0, [pc, #368]	; (8003c9c <SpiritRadioGetdBm2Reg+0x210>)
 8003b2a:	f7fd f98f 	bl	8000e4c <__aeabi_fdiv>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	461c      	mov	r4, r3
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	4958      	ldr	r1, [pc, #352]	; (8003c98 <SpiritRadioGetdBm2Reg+0x20c>)
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	330c      	adds	r3, #12
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	4954      	ldr	r1, [pc, #336]	; (8003c98 <SpiritRadioGetdBm2Reg+0x20c>)
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	3308      	adds	r3, #8
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4619      	mov	r1, r3
 8003b58:	f7fd f978 	bl	8000e4c <__aeabi_fdiv>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7fc ffb5 	bl	8000ad0 <__aeabi_fsub>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4619      	mov	r1, r3
 8003b6a:	6838      	ldr	r0, [r7, #0]
 8003b6c:	f7fd fa76 	bl	800105c <__aeabi_fcmpgt>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <SpiritRadioGetdBm2Reg+0xf0>
      j=0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73bb      	strb	r3, [r7, #14]
 8003b7a:	e03a      	b.n	8003bf2 <SpiritRadioGetdBm2Reg+0x166>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003b7c:	f04f 0100 	mov.w	r1, #0
 8003b80:	6838      	ldr	r0, [r7, #0]
 8003b82:	f7fd fa57 	bl	8001034 <__aeabi_fcmple>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d032      	beq.n	8003bf2 <SpiritRadioGetdBm2Reg+0x166>
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	4942      	ldr	r1, [pc, #264]	; (8003c98 <SpiritRadioGetdBm2Reg+0x20c>)
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	483f      	ldr	r0, [pc, #252]	; (8003ca0 <SpiritRadioGetdBm2Reg+0x214>)
 8003ba2:	f7fd f953 	bl	8000e4c <__aeabi_fdiv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461c      	mov	r4, r3
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	493a      	ldr	r1, [pc, #232]	; (8003c98 <SpiritRadioGetdBm2Reg+0x20c>)
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	440b      	add	r3, r1
 8003bb8:	330c      	adds	r3, #12
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	4936      	ldr	r1, [pc, #216]	; (8003c98 <SpiritRadioGetdBm2Reg+0x20c>)
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	440b      	add	r3, r1
 8003bca:	3308      	adds	r3, #8
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f7fd f93c 	bl	8000e4c <__aeabi_fdiv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f7fc ff79 	bl	8000ad0 <__aeabi_fsub>
 8003bde:	4603      	mov	r3, r0
 8003be0:	4619      	mov	r1, r3
 8003be2:	6838      	ldr	r0, [r7, #0]
 8003be4:	f7fd fa1c 	bl	8001020 <__aeabi_fcmplt>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <SpiritRadioGetdBm2Reg+0x166>
      j=2;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	73bb      	strb	r3, [r7, #14]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003bf2:	7bfa      	ldrb	r2, [r7, #15]
 8003bf4:	7bbb      	ldrb	r3, [r7, #14]
 8003bf6:	0059      	lsls	r1, r3, #1
 8003bf8:	4827      	ldr	r0, [pc, #156]	; (8003c98 <SpiritRadioGetdBm2Reg+0x20c>)
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	440b      	add	r3, r1
 8003c04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003c08:	6839      	ldr	r1, [r7, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd f86a 	bl	8000ce4 <__aeabi_fmul>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461c      	mov	r4, r3
 8003c14:	7bfa      	ldrb	r2, [r7, #15]
 8003c16:	7bbb      	ldrb	r3, [r7, #14]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	1c59      	adds	r1, r3, #1
 8003c1c:	481e      	ldr	r0, [pc, #120]	; (8003c98 <SpiritRadioGetdBm2Reg+0x20c>)
 8003c1e:	4613      	mov	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	440b      	add	r3, r1
 8003c28:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7fc ff50 	bl	8000ad4 <__addsf3>
 8003c34:	4603      	mov	r3, r0
 8003c36:	60bb      	str	r3, [r7, #8]
  
  if(fReg<1)
 8003c38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003c3c:	68b8      	ldr	r0, [r7, #8]
 8003c3e:	f7fd f9ef 	bl	8001020 <__aeabi_fcmplt>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <SpiritRadioGetdBm2Reg+0x1c4>
    fReg=1;
 8003c48:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	e008      	b.n	8003c62 <SpiritRadioGetdBm2Reg+0x1d6>
  else if(fReg>90) 
 8003c50:	4914      	ldr	r1, [pc, #80]	; (8003ca4 <SpiritRadioGetdBm2Reg+0x218>)
 8003c52:	68b8      	ldr	r0, [r7, #8]
 8003c54:	f7fd fa02 	bl	800105c <__aeabi_fcmpgt>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <SpiritRadioGetdBm2Reg+0x1d6>
    fReg=90;
 8003c5e:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <SpiritRadioGetdBm2Reg+0x218>)
 8003c60:	60bb      	str	r3, [r7, #8]
  
  return ((uint8_t)fReg);
 8003c62:	68b8      	ldr	r0, [r7, #8]
 8003c64:	f7fd fa2a 	bl	80010bc <__aeabi_f2uiz>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	b2db      	uxtb	r3, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd90      	pop	{r4, r7, pc}
 8003c74:	2e5f5680 	.word	0x2e5f5680
 8003c78:	390c2fe0 	.word	0x390c2fe0
 8003c7c:	35a4e8ff 	.word	0x35a4e8ff
 8003c80:	1701e47f 	.word	0x1701e47f
 8003c84:	1c146a60 	.word	0x1c146a60
 8003c88:	11d260bf 	.word	0x11d260bf
 8003c8c:	14ced7e0 	.word	0x14ced7e0
 8003c90:	08e18f3f 	.word	0x08e18f3f
 8003c94:	0a6fd060 	.word	0x0a6fd060
 8003c98:	0800a98c 	.word	0x0800a98c
 8003c9c:	41500000 	.word	0x41500000
 8003ca0:	42200000 	.word	0x42200000
 8003ca4:	42b40000 	.word	0x42b40000

08003ca8 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	6039      	str	r1, [r7, #0]
 8003cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003cb4:	f7ff fc50 	bl	8003558 <SpiritRadioGetFrequencyBase>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	6839      	ldr	r1, [r7, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fee5 	bl	8003a8c <SpiritRadioGetdBm2Reg>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	f1c3 0317 	rsb	r3, r3, #23
 8003ccc:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003cce:	f107 020e 	add.w	r2, r7, #14
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f9e8 	bl	80040ac <RadioSpiWriteRegisters>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <SpiritRadioSetPALeveldBm+0x4c>)
 8003ce0:	b212      	sxth	r2, r2
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	7019      	strb	r1, [r3, #0]
 8003ce6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003cea:	705a      	strb	r2, [r3, #1]
  
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	2000036c 	.word	0x2000036c

08003cf8 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003d02:	f107 030f 	add.w	r3, r7, #15
 8003d06:	461a      	mov	r2, r3
 8003d08:	2101      	movs	r1, #1
 8003d0a:	2018      	movs	r0, #24
 8003d0c:	f000 fa1a 	bl	8004144 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003d24:	f107 030f 	add.w	r3, r7, #15
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	2018      	movs	r0, #24
 8003d2e:	f000 f9bd 	bl	80040ac <RadioSpiWriteRegisters>
 8003d32:	4602      	mov	r2, r0
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <SpiritRadioSetPACwc+0x54>)
 8003d36:	b212      	sxth	r2, r2
 8003d38:	4611      	mov	r1, r2
 8003d3a:	7019      	strb	r1, [r3, #0]
 8003d3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d40:	705a      	strb	r2, [r3, #1]
  
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	2000036c 	.word	0x2000036c

08003d50 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003d5a:	f107 030f 	add.w	r3, r7, #15
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2101      	movs	r1, #1
 8003d62:	2018      	movs	r0, #24
 8003d64:	f000 f9ee 	bl	8004144 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	f023 0307 	bic.w	r3, r3, #7
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003d7c:	f107 030f 	add.w	r3, r7, #15
 8003d80:	461a      	mov	r2, r3
 8003d82:	2101      	movs	r1, #1
 8003d84:	2018      	movs	r0, #24
 8003d86:	f000 f991 	bl	80040ac <RadioSpiWriteRegisters>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003d8e:	b212      	sxth	r2, r2
 8003d90:	4611      	mov	r1, r2
 8003d92:	7019      	strb	r1, [r3, #0]
 8003d94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d98:	705a      	strb	r2, [r3, #1]
  
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	2000036c 	.word	0x2000036c

08003da8 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003db6:	f107 030f 	add.w	r3, r7, #15
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	201e      	movs	r0, #30
 8003dc0:	f000 f9c0 	bl	8004144 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	73fb      	strb	r3, [r7, #15]
 8003dd4:	e004      	b.n	8003de0 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003de0:	f107 030f 	add.w	r3, r7, #15
 8003de4:	461a      	mov	r2, r3
 8003de6:	2101      	movs	r1, #1
 8003de8:	201e      	movs	r0, #30
 8003dea:	f000 f95f 	bl	80040ac <RadioSpiWriteRegisters>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <SpiritRadioAFCFreezeOnSync+0x60>)
 8003df2:	b212      	sxth	r2, r2
 8003df4:	4611      	mov	r1, r2
 8003df6:	7019      	strb	r1, [r3, #0]
 8003df8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003dfc:	705a      	strb	r2, [r3, #1]
  
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	2000036c 	.word	0x2000036c

08003e0c <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003e16:	f107 030f 	add.w	r3, r7, #15
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	209e      	movs	r0, #158	; 0x9e
 8003e20:	f000 f990 	bl	8004144 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e004      	b.n	8003e40 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003e40:	f107 030f 	add.w	r3, r7, #15
 8003e44:	461a      	mov	r2, r3
 8003e46:	2101      	movs	r1, #1
 8003e48:	209e      	movs	r0, #158	; 0x9e
 8003e4a:	f000 f92f 	bl	80040ac <RadioSpiWriteRegisters>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <SpiritRadioSetRefDiv+0x5c>)
 8003e52:	b212      	sxth	r2, r2
 8003e54:	4611      	mov	r1, r2
 8003e56:	7019      	strb	r1, [r3, #0]
 8003e58:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e5c:	705a      	strb	r2, [r3, #1]
  
}
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2000036c 	.word	0x2000036c

08003e6c <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003e72:	1dfb      	adds	r3, r7, #7
 8003e74:	461a      	mov	r2, r3
 8003e76:	2101      	movs	r1, #1
 8003e78:	209e      	movs	r0, #158	; 0x9e
 8003e7a:	f000 f963 	bl	8004144 <RadioSpiReadRegisters>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <SpiritRadioGetRefDiv+0x40>)
 8003e82:	b212      	sxth	r2, r2
 8003e84:	4611      	mov	r1, r2
 8003e86:	7019      	strb	r1, [r3, #0]
 8003e88:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e8c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	09db      	lsrs	r3, r3, #7
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003ea0:	2300      	movs	r3, #0
  }
  
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	2000036c 	.word	0x2000036c

08003eb0 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003eba:	f107 030f 	add.w	r3, r7, #15
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	20b4      	movs	r0, #180	; 0xb4
 8003ec4:	f000 f93e 	bl	8004144 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	f023 0308 	bic.w	r3, r3, #8
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	73fb      	strb	r3, [r7, #15]
 8003ed8:	e004      	b.n	8003ee4 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003ee4:	f107 030f 	add.w	r3, r7, #15
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2101      	movs	r1, #1
 8003eec:	20b4      	movs	r0, #180	; 0xb4
 8003eee:	f000 f8dd 	bl	80040ac <RadioSpiWriteRegisters>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <SpiritRadioSetDigDiv+0x5c>)
 8003ef6:	b212      	sxth	r2, r2
 8003ef8:	4611      	mov	r1, r2
 8003efa:	7019      	strb	r1, [r3, #0]
 8003efc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f00:	705a      	strb	r2, [r3, #1]
  
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000036c 	.word	0x2000036c

08003f10 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003f16:	1dfb      	adds	r3, r7, #7
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	20b4      	movs	r0, #180	; 0xb4
 8003f1e:	f000 f911 	bl	8004144 <RadioSpiReadRegisters>
 8003f22:	4602      	mov	r2, r0
 8003f24:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <SpiritRadioGetDigDiv+0x40>)
 8003f26:	b212      	sxth	r2, r2
 8003f28:	4611      	mov	r1, r2
 8003f2a:	7019      	strb	r1, [r3, #0]
 8003f2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f30:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	08db      	lsrs	r3, r3, #3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003f44:	2301      	movs	r3, #1
  }
  
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	2000036c 	.word	0x2000036c

08003f54 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003f58:	4b02      	ldr	r3, [pc, #8]	; (8003f64 <SpiritRadioGetXtalFrequency+0x10>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	20000368 	.word	0x20000368

08003f68 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003f70:	4a03      	ldr	r2, [pc, #12]	; (8003f80 <SpiritRadioSetXtalFrequency+0x18>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6013      	str	r3, [r2, #0]
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	20000368 	.word	0x20000368

08003f84 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8003f8e:	1dfb      	adds	r3, r7, #7
 8003f90:	461a      	mov	r2, r3
 8003f92:	2101      	movs	r1, #1
 8003f94:	2054      	movs	r0, #84	; 0x54
 8003f96:	f000 f889 	bl	80040ac <RadioSpiWriteRegisters>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <SpiritTimerSetRxTimeoutCounter+0x30>)
 8003f9e:	b212      	sxth	r2, r2
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	7019      	strb	r1, [r3, #0]
 8003fa4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003fa8:	705a      	strb	r2, [r3, #1]

}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	2000036c 	.word	0x2000036c

08003fb8 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003fc2:	f107 030c 	add.w	r3, r7, #12
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2102      	movs	r1, #2
 8003fca:	204f      	movs	r0, #79	; 0x4f
 8003fcc:	f000 f8ba 	bl	8004144 <RadioSpiReadRegisters>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003fd4:	b212      	sxth	r2, r2
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	7019      	strb	r1, [r3, #0]
 8003fda:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003fde:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003fe0:	7b3b      	ldrb	r3, [r7, #12]
 8003fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8003fea:	7b3b      	ldrb	r3, [r7, #12]
 8003fec:	b25a      	sxtb	r2, r3
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	b25b      	sxtb	r3, r3
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	b25b      	sxtb	r3, r3
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	b25b      	sxtb	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8004002:	7b7b      	ldrb	r3, [r7, #13]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	b2db      	uxtb	r3, r3
 800400a:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 800400c:	7b7b      	ldrb	r3, [r7, #13]
 800400e:	b25a      	sxtb	r2, r3
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	015b      	lsls	r3, r3, #5
 8004014:	b25b      	sxtb	r3, r3
 8004016:	4313      	orrs	r3, r2
 8004018:	b25b      	sxtb	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 800401e:	f107 030c 	add.w	r3, r7, #12
 8004022:	461a      	mov	r2, r3
 8004024:	2102      	movs	r1, #2
 8004026:	204f      	movs	r0, #79	; 0x4f
 8004028:	f000 f840 	bl	80040ac <RadioSpiWriteRegisters>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004030:	b212      	sxth	r2, r2
 8004032:	4611      	mov	r1, r2
 8004034:	7019      	strb	r1, [r3, #0]
 8004036:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800403a:	705a      	strb	r2, [r3, #1]

}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2000036c 	.word	0x2000036c

08004048 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	461a      	mov	r2, r3
 8004052:	2102      	movs	r1, #2
 8004054:	20c0      	movs	r0, #192	; 0xc0
 8004056:	f000 f875 	bl	8004144 <RadioSpiReadRegisters>
 800405a:	4603      	mov	r3, r0
 800405c:	4a09      	ldr	r2, [pc, #36]	; (8004084 <SpiritRefreshStatus+0x3c>)
 800405e:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004060:	4b08      	ldr	r3, [pc, #32]	; (8004084 <SpiritRefreshStatus+0x3c>)
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8004066:	429a      	cmp	r2, r3
 8004068:	d1f1      	bne.n	800404e <SpiritRefreshStatus+0x6>
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <SpiritRefreshStatus+0x40>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004074:	4293      	cmp	r3, r2
 8004076:	d1ea      	bne.n	800404e <SpiritRefreshStatus+0x6>

}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	2000036c 	.word	0x2000036c
 8004088:	2000036d 	.word	0x2000036d

0800408c <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <RadioSpiInit+0x1c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <RadioSpiInit+0x16>
  {
    Error_Handler();
 800409e:	f7fd fb75 	bl	800178c <Error_Handler>
  }
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000010 	.word	0x20000010

080040ac <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	4603      	mov	r3, r0
 80040b4:	603a      	str	r2, [r7, #0]
 80040b6:	71fb      	strb	r3, [r7, #7]
 80040b8:	460b      	mov	r3, r1
 80040ba:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 80040bc:	2300      	movs	r3, #0
 80040be:	743b      	strb	r3, [r7, #16]
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80040c4:	2007      	movs	r0, #7
 80040c6:	f000 fb1e 	bl	8004706 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 80040ca:	2200      	movs	r2, #0
 80040cc:	2110      	movs	r1, #16
 80040ce:	481b      	ldr	r0, [pc, #108]	; (800413c <RadioSpiWriteRegisters+0x90>)
 80040d0:	f000 fcb8 	bl	8004a44 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80040d4:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <RadioSpiWriteRegisters+0x94>)
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	f107 020c 	add.w	r2, r7, #12
 80040dc:	f107 0110 	add.w	r1, r7, #16
 80040e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	2302      	movs	r3, #2
 80040e8:	f001 fbd1 	bl	800588e <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80040ec:	4b14      	ldr	r3, [pc, #80]	; (8004140 <RadioSpiWriteRegisters+0x94>)
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	79bb      	ldrb	r3, [r7, #6]
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040f8:	6839      	ldr	r1, [r7, #0]
 80040fa:	f001 f97b 	bl	80053f4 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80040fe:	2201      	movs	r2, #1
 8004100:	2110      	movs	r1, #16
 8004102:	480e      	ldr	r0, [pc, #56]	; (800413c <RadioSpiWriteRegisters+0x90>)
 8004104:	f000 fc9e 	bl	8004a44 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004108:	2007      	movs	r0, #7
 800410a:	f000 faee 	bl	80046ea <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800410e:	f107 0308 	add.w	r3, r7, #8
 8004112:	3301      	adds	r3, #1
 8004114:	7b3a      	ldrb	r2, [r7, #12]
 8004116:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004118:	f107 0308 	add.w	r3, r7, #8
 800411c:	7b7a      	ldrb	r2, [r7, #13]
 800411e:	701a      	strb	r2, [r3, #0]

  return status;
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	82bb      	strh	r3, [r7, #20]
 8004124:	2300      	movs	r3, #0
 8004126:	7d3a      	ldrb	r2, [r7, #20]
 8004128:	f362 0307 	bfi	r3, r2, #0, #8
 800412c:	7d7a      	ldrb	r2, [r7, #21]
 800412e:	f362 230f 	bfi	r3, r2, #8, #8

}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40010800 	.word	0x40010800
 8004140:	20000010 	.word	0x20000010

08004144 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	4603      	mov	r3, r0
 800414c:	603a      	str	r2, [r7, #0]
 800414e:	71fb      	strb	r3, [r7, #7]
 8004150:	460b      	mov	r3, r1
 8004152:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8004154:	2301      	movs	r3, #1
 8004156:	743b      	strb	r3, [r7, #16]
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800415c:	2007      	movs	r0, #7
 800415e:	f000 fad2 	bl	8004706 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004162:	2200      	movs	r2, #0
 8004164:	2110      	movs	r1, #16
 8004166:	481b      	ldr	r0, [pc, #108]	; (80041d4 <RadioSpiReadRegisters+0x90>)
 8004168:	f000 fc6c 	bl	8004a44 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800416c:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <RadioSpiReadRegisters+0x94>)
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	f107 020c 	add.w	r2, r7, #12
 8004174:	f107 0110 	add.w	r1, r7, #16
 8004178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2302      	movs	r3, #2
 8004180:	f001 fb85 	bl	800588e <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004184:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <RadioSpiReadRegisters+0x94>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	79bb      	ldrb	r3, [r7, #6]
 800418a:	b29a      	uxth	r2, r3
 800418c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	f001 fa6b 	bl	800566c <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004196:	2201      	movs	r2, #1
 8004198:	2110      	movs	r1, #16
 800419a:	480e      	ldr	r0, [pc, #56]	; (80041d4 <RadioSpiReadRegisters+0x90>)
 800419c:	f000 fc52 	bl	8004a44 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80041a0:	2007      	movs	r0, #7
 80041a2:	f000 faa2 	bl	80046ea <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80041a6:	f107 0308 	add.w	r3, r7, #8
 80041aa:	3301      	adds	r3, #1
 80041ac:	7b3a      	ldrb	r2, [r7, #12]
 80041ae:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80041b0:	f107 0308 	add.w	r3, r7, #8
 80041b4:	7b7a      	ldrb	r2, [r7, #13]
 80041b6:	701a      	strb	r2, [r3, #0]

  return status;
 80041b8:	893b      	ldrh	r3, [r7, #8]
 80041ba:	82bb      	strh	r3, [r7, #20]
 80041bc:	2300      	movs	r3, #0
 80041be:	7d3a      	ldrb	r2, [r7, #20]
 80041c0:	f362 0307 	bfi	r3, r2, #0, #8
 80041c4:	7d7a      	ldrb	r2, [r7, #21]
 80041c6:	f362 230f 	bfi	r3, r2, #8, #8
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40010800 	.word	0x40010800
 80041d8:	20000010 	.word	0x20000010

080041dc <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	4603      	mov	r3, r0
 80041e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	743b      	strb	r3, [r7, #16]
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80041ee:	2007      	movs	r0, #7
 80041f0:	f000 fa89 	bl	8004706 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80041f4:	2200      	movs	r2, #0
 80041f6:	2110      	movs	r1, #16
 80041f8:	4816      	ldr	r0, [pc, #88]	; (8004254 <RadioSpiCommandStrobes+0x78>)
 80041fa:	f000 fc23 	bl	8004a44 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80041fe:	4b16      	ldr	r3, [pc, #88]	; (8004258 <RadioSpiCommandStrobes+0x7c>)
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	f107 020c 	add.w	r2, r7, #12
 8004206:	f107 0110 	add.w	r1, r7, #16
 800420a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2302      	movs	r3, #2
 8004212:	f001 fb3c 	bl	800588e <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004216:	2201      	movs	r2, #1
 8004218:	2110      	movs	r1, #16
 800421a:	480e      	ldr	r0, [pc, #56]	; (8004254 <RadioSpiCommandStrobes+0x78>)
 800421c:	f000 fc12 	bl	8004a44 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004220:	2007      	movs	r0, #7
 8004222:	f000 fa62 	bl	80046ea <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004226:	f107 0308 	add.w	r3, r7, #8
 800422a:	3301      	adds	r3, #1
 800422c:	7b3a      	ldrb	r2, [r7, #12]
 800422e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004230:	f107 0308 	add.w	r3, r7, #8
 8004234:	7b7a      	ldrb	r2, [r7, #13]
 8004236:	701a      	strb	r2, [r3, #0]

  return status;
 8004238:	893b      	ldrh	r3, [r7, #8]
 800423a:	82bb      	strh	r3, [r7, #20]
 800423c:	2300      	movs	r3, #0
 800423e:	7d3a      	ldrb	r2, [r7, #20]
 8004240:	f362 0307 	bfi	r3, r2, #0, #8
 8004244:	7d7a      	ldrb	r2, [r7, #21]
 8004246:	f362 230f 	bfi	r3, r2, #8, #8
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40010800 	.word	0x40010800
 8004258:	20000010 	.word	0x20000010

0800425c <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af02      	add	r7, sp, #8
 8004262:	4603      	mov	r3, r0
 8004264:	6039      	str	r1, [r7, #0]
 8004266:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004268:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800426c:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800426e:	2007      	movs	r0, #7
 8004270:	f000 fa49 	bl	8004706 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004274:	2200      	movs	r2, #0
 8004276:	2110      	movs	r1, #16
 8004278:	481a      	ldr	r0, [pc, #104]	; (80042e4 <RadioSpiWriteFifo+0x88>)
 800427a:	f000 fbe3 	bl	8004a44 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800427e:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <RadioSpiWriteFifo+0x8c>)
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	f107 020c 	add.w	r2, r7, #12
 8004286:	f107 0110 	add.w	r1, r7, #16
 800428a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2302      	movs	r3, #2
 8004292:	f001 fafc 	bl	800588e <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <RadioSpiWriteFifo+0x8c>)
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	b29a      	uxth	r2, r3
 800429e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	f001 f8a6 	bl	80053f4 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80042a8:	2201      	movs	r2, #1
 80042aa:	2110      	movs	r1, #16
 80042ac:	480d      	ldr	r0, [pc, #52]	; (80042e4 <RadioSpiWriteFifo+0x88>)
 80042ae:	f000 fbc9 	bl	8004a44 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80042b2:	2007      	movs	r0, #7
 80042b4:	f000 fa19 	bl	80046ea <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80042b8:	f107 0308 	add.w	r3, r7, #8
 80042bc:	3301      	adds	r3, #1
 80042be:	7b3a      	ldrb	r2, [r7, #12]
 80042c0:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80042c2:	f107 0308 	add.w	r3, r7, #8
 80042c6:	7b7a      	ldrb	r2, [r7, #13]
 80042c8:	701a      	strb	r2, [r3, #0]

  return status;
 80042ca:	893b      	ldrh	r3, [r7, #8]
 80042cc:	82bb      	strh	r3, [r7, #20]
 80042ce:	2300      	movs	r3, #0
 80042d0:	7d3a      	ldrb	r2, [r7, #20]
 80042d2:	f362 0307 	bfi	r3, r2, #0, #8
 80042d6:	7d7a      	ldrb	r2, [r7, #21]
 80042d8:	f362 230f 	bfi	r3, r2, #8, #8
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40010800 	.word	0x40010800
 80042e8:	20000010 	.word	0x20000010

080042ec <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	4603      	mov	r3, r0
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 80042f8:	f64f 7301 	movw	r3, #65281	; 0xff01
 80042fc:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80042fe:	2007      	movs	r0, #7
 8004300:	f000 fa01 	bl	8004706 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004304:	2200      	movs	r2, #0
 8004306:	2110      	movs	r1, #16
 8004308:	481a      	ldr	r0, [pc, #104]	; (8004374 <RadioSpiReadFifo+0x88>)
 800430a:	f000 fb9b 	bl	8004a44 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800430e:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <RadioSpiReadFifo+0x8c>)
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	f107 020c 	add.w	r2, r7, #12
 8004316:	f107 0110 	add.w	r1, r7, #16
 800431a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2302      	movs	r3, #2
 8004322:	f001 fab4 	bl	800588e <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <RadioSpiReadFifo+0x8c>)
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	b29a      	uxth	r2, r3
 800432e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	f001 f99a 	bl	800566c <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 8004338:	2201      	movs	r2, #1
 800433a:	2110      	movs	r1, #16
 800433c:	480d      	ldr	r0, [pc, #52]	; (8004374 <RadioSpiReadFifo+0x88>)
 800433e:	f000 fb81 	bl	8004a44 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004342:	2007      	movs	r0, #7
 8004344:	f000 f9d1 	bl	80046ea <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004348:	f107 0308 	add.w	r3, r7, #8
 800434c:	3301      	adds	r3, #1
 800434e:	7b3a      	ldrb	r2, [r7, #12]
 8004350:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	7b7a      	ldrb	r2, [r7, #13]
 8004358:	701a      	strb	r2, [r3, #0]

  return status;
 800435a:	893b      	ldrh	r3, [r7, #8]
 800435c:	82bb      	strh	r3, [r7, #20]
 800435e:	2300      	movs	r3, #0
 8004360:	7d3a      	ldrb	r2, [r7, #20]
 8004362:	f362 0307 	bfi	r3, r2, #0, #8
 8004366:	7d7a      	ldrb	r2, [r7, #21]
 8004368:	f362 230f 	bfi	r3, r2, #8, #8
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40010800 	.word	0x40010800
 8004378:	20000010 	.word	0x20000010

0800437c <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8004380:	2201      	movs	r2, #1
 8004382:	2101      	movs	r1, #1
 8004384:	4802      	ldr	r0, [pc, #8]	; (8004390 <RadioEnterShutdown+0x14>)
 8004386:	f000 fb5d 	bl	8004a44 <HAL_GPIO_WritePin>
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40010c00 	.word	0x40010c00

08004394 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 8004398:	2200      	movs	r2, #0
 800439a:	2101      	movs	r1, #1
 800439c:	4803      	ldr	r0, [pc, #12]	; (80043ac <RadioExitShutdown+0x18>)
 800439e:	f000 fb51 	bl	8004a44 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 80043a2:	2001      	movs	r0, #1
 80043a4:	f000 f866 	bl	8004474 <HAL_Delay>
}
 80043a8:	bf00      	nop
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40010c00 	.word	0x40010c00

080043b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_Init+0x28>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <HAL_Init+0x28>)
 80043ba:	f043 0310 	orr.w	r3, r3, #16
 80043be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c0:	2003      	movs	r0, #3
 80043c2:	f000 f96b 	bl	800469c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043c6:	200f      	movs	r0, #15
 80043c8:	f000 f808 	bl	80043dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043cc:	f7fd f9e4 	bl	8001798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40022000 	.word	0x40022000

080043dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <HAL_InitTick+0x54>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_InitTick+0x58>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4619      	mov	r1, r3
 80043ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f991 	bl	8004722 <HAL_SYSTICK_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e00e      	b.n	8004428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b0f      	cmp	r3, #15
 800440e:	d80a      	bhi.n	8004426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004410:	2200      	movs	r2, #0
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	f000 f94b 	bl	80046b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800441c:	4a06      	ldr	r2, [pc, #24]	; (8004438 <HAL_InitTick+0x5c>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000008 	.word	0x20000008
 8004434:	20000018 	.word	0x20000018
 8004438:	20000014 	.word	0x20000014

0800443c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_IncTick+0x1c>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_IncTick+0x20>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4413      	add	r3, r2
 800444c:	4a03      	ldr	r2, [pc, #12]	; (800445c <HAL_IncTick+0x20>)
 800444e:	6013      	str	r3, [r2, #0]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	20000018 	.word	0x20000018
 800445c:	20000370 	.word	0x20000370

08004460 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return uwTick;
 8004464:	4b02      	ldr	r3, [pc, #8]	; (8004470 <HAL_GetTick+0x10>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	20000370 	.word	0x20000370

08004474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7ff fff0 	bl	8004460 <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d005      	beq.n	800449a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HAL_Delay+0x44>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800449a:	bf00      	nop
 800449c:	f7ff ffe0 	bl	8004460 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d8f7      	bhi.n	800449c <HAL_Delay+0x28>
  {
  }
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000018 	.word	0x20000018

080044bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d8:	4013      	ands	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	60d3      	str	r3, [r2, #12]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <__NVIC_GetPriorityGrouping+0x18>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 0307 	and.w	r3, r3, #7
}
 8004512:	4618      	mov	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	2b00      	cmp	r3, #0
 8004530:	db0b      	blt.n	800454a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	4906      	ldr	r1, [pc, #24]	; (8004554 <__NVIC_EnableIRQ+0x34>)
 800453a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2001      	movs	r0, #1
 8004542:	fa00 f202 	lsl.w	r2, r0, r2
 8004546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	e000e100 	.word	0xe000e100

08004558 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db12      	blt.n	8004590 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	490a      	ldr	r1, [pc, #40]	; (800459c <__NVIC_DisableIRQ+0x44>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	3320      	adds	r3, #32
 8004580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004584:	f3bf 8f4f 	dsb	sy
}
 8004588:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800458a:	f3bf 8f6f 	isb	sy
}
 800458e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000e100 	.word	0xe000e100

080045a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	6039      	str	r1, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db0a      	blt.n	80045ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	490c      	ldr	r1, [pc, #48]	; (80045ec <__NVIC_SetPriority+0x4c>)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	0112      	lsls	r2, r2, #4
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	440b      	add	r3, r1
 80045c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045c8:	e00a      	b.n	80045e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	4908      	ldr	r1, [pc, #32]	; (80045f0 <__NVIC_SetPriority+0x50>)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	3b04      	subs	r3, #4
 80045d8:	0112      	lsls	r2, r2, #4
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	440b      	add	r3, r1
 80045de:	761a      	strb	r2, [r3, #24]
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000e100 	.word	0xe000e100
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b089      	sub	sp, #36	; 0x24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f1c3 0307 	rsb	r3, r3, #7
 800460e:	2b04      	cmp	r3, #4
 8004610:	bf28      	it	cs
 8004612:	2304      	movcs	r3, #4
 8004614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3304      	adds	r3, #4
 800461a:	2b06      	cmp	r3, #6
 800461c:	d902      	bls.n	8004624 <NVIC_EncodePriority+0x30>
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3b03      	subs	r3, #3
 8004622:	e000      	b.n	8004626 <NVIC_EncodePriority+0x32>
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004628:	f04f 32ff 	mov.w	r2, #4294967295
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43da      	mvns	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	401a      	ands	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800463c:	f04f 31ff 	mov.w	r1, #4294967295
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	43d9      	mvns	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800464c:	4313      	orrs	r3, r2
         );
}
 800464e:	4618      	mov	r0, r3
 8004650:	3724      	adds	r7, #36	; 0x24
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3b01      	subs	r3, #1
 8004664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004668:	d301      	bcc.n	800466e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800466a:	2301      	movs	r3, #1
 800466c:	e00f      	b.n	800468e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <SysTick_Config+0x40>)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004676:	210f      	movs	r1, #15
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	f7ff ff90 	bl	80045a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <SysTick_Config+0x40>)
 8004682:	2200      	movs	r2, #0
 8004684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <SysTick_Config+0x40>)
 8004688:	2207      	movs	r2, #7
 800468a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	e000e010 	.word	0xe000e010

0800469c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ff09 	bl	80044bc <__NVIC_SetPriorityGrouping>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	4603      	mov	r3, r0
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046c4:	f7ff ff1e 	bl	8004504 <__NVIC_GetPriorityGrouping>
 80046c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f7ff ff90 	bl	80045f4 <NVIC_EncodePriority>
 80046d4:	4602      	mov	r2, r0
 80046d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff5f 	bl	80045a0 <__NVIC_SetPriority>
}
 80046e2:	bf00      	nop
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	4603      	mov	r3, r0
 80046f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff11 	bl	8004520 <__NVIC_EnableIRQ>
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	4603      	mov	r3, r0
 800470e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff1f 	bl	8004558 <__NVIC_DisableIRQ>
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff ff94 	bl	8004658 <SysTick_Config>
 8004730:	4603      	mov	r3, r0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800473c:	b480      	push	{r7}
 800473e:	b08b      	sub	sp, #44	; 0x2c
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004746:	2300      	movs	r3, #0
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800474a:	2300      	movs	r3, #0
 800474c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800474e:	e169      	b.n	8004a24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004750:	2201      	movs	r2, #1
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	429a      	cmp	r2, r3
 800476a:	f040 8158 	bne.w	8004a1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4a9a      	ldr	r2, [pc, #616]	; (80049dc <HAL_GPIO_Init+0x2a0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d05e      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
 8004778:	4a98      	ldr	r2, [pc, #608]	; (80049dc <HAL_GPIO_Init+0x2a0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d875      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 800477e:	4a98      	ldr	r2, [pc, #608]	; (80049e0 <HAL_GPIO_Init+0x2a4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d058      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
 8004784:	4a96      	ldr	r2, [pc, #600]	; (80049e0 <HAL_GPIO_Init+0x2a4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d86f      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 800478a:	4a96      	ldr	r2, [pc, #600]	; (80049e4 <HAL_GPIO_Init+0x2a8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d052      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
 8004790:	4a94      	ldr	r2, [pc, #592]	; (80049e4 <HAL_GPIO_Init+0x2a8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d869      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 8004796:	4a94      	ldr	r2, [pc, #592]	; (80049e8 <HAL_GPIO_Init+0x2ac>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d04c      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
 800479c:	4a92      	ldr	r2, [pc, #584]	; (80049e8 <HAL_GPIO_Init+0x2ac>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d863      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 80047a2:	4a92      	ldr	r2, [pc, #584]	; (80049ec <HAL_GPIO_Init+0x2b0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d046      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
 80047a8:	4a90      	ldr	r2, [pc, #576]	; (80049ec <HAL_GPIO_Init+0x2b0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d85d      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 80047ae:	2b12      	cmp	r3, #18
 80047b0:	d82a      	bhi.n	8004808 <HAL_GPIO_Init+0xcc>
 80047b2:	2b12      	cmp	r3, #18
 80047b4:	d859      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <HAL_GPIO_Init+0x80>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	08004837 	.word	0x08004837
 80047c0:	08004811 	.word	0x08004811
 80047c4:	08004823 	.word	0x08004823
 80047c8:	08004865 	.word	0x08004865
 80047cc:	0800486b 	.word	0x0800486b
 80047d0:	0800486b 	.word	0x0800486b
 80047d4:	0800486b 	.word	0x0800486b
 80047d8:	0800486b 	.word	0x0800486b
 80047dc:	0800486b 	.word	0x0800486b
 80047e0:	0800486b 	.word	0x0800486b
 80047e4:	0800486b 	.word	0x0800486b
 80047e8:	0800486b 	.word	0x0800486b
 80047ec:	0800486b 	.word	0x0800486b
 80047f0:	0800486b 	.word	0x0800486b
 80047f4:	0800486b 	.word	0x0800486b
 80047f8:	0800486b 	.word	0x0800486b
 80047fc:	0800486b 	.word	0x0800486b
 8004800:	08004819 	.word	0x08004819
 8004804:	0800482d 	.word	0x0800482d
 8004808:	4a79      	ldr	r2, [pc, #484]	; (80049f0 <HAL_GPIO_Init+0x2b4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800480e:	e02c      	b.n	800486a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	623b      	str	r3, [r7, #32]
          break;
 8004816:	e029      	b.n	800486c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	3304      	adds	r3, #4
 800481e:	623b      	str	r3, [r7, #32]
          break;
 8004820:	e024      	b.n	800486c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	3308      	adds	r3, #8
 8004828:	623b      	str	r3, [r7, #32]
          break;
 800482a:	e01f      	b.n	800486c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	330c      	adds	r3, #12
 8004832:	623b      	str	r3, [r7, #32]
          break;
 8004834:	e01a      	b.n	800486c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800483e:	2304      	movs	r3, #4
 8004840:	623b      	str	r3, [r7, #32]
          break;
 8004842:	e013      	b.n	800486c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800484c:	2308      	movs	r3, #8
 800484e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	611a      	str	r2, [r3, #16]
          break;
 8004856:	e009      	b.n	800486c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004858:	2308      	movs	r3, #8
 800485a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	615a      	str	r2, [r3, #20]
          break;
 8004862:	e003      	b.n	800486c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004864:	2300      	movs	r3, #0
 8004866:	623b      	str	r3, [r7, #32]
          break;
 8004868:	e000      	b.n	800486c <HAL_GPIO_Init+0x130>
          break;
 800486a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2bff      	cmp	r3, #255	; 0xff
 8004870:	d801      	bhi.n	8004876 <HAL_GPIO_Init+0x13a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	e001      	b.n	800487a <HAL_GPIO_Init+0x13e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3304      	adds	r3, #4
 800487a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2bff      	cmp	r3, #255	; 0xff
 8004880:	d802      	bhi.n	8004888 <HAL_GPIO_Init+0x14c>
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	e002      	b.n	800488e <HAL_GPIO_Init+0x152>
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	3b08      	subs	r3, #8
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	210f      	movs	r1, #15
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	fa01 f303 	lsl.w	r3, r1, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	401a      	ands	r2, r3
 80048a0:	6a39      	ldr	r1, [r7, #32]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	431a      	orrs	r2, r3
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80b1 	beq.w	8004a1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048bc:	4b4d      	ldr	r3, [pc, #308]	; (80049f4 <HAL_GPIO_Init+0x2b8>)
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	4a4c      	ldr	r2, [pc, #304]	; (80049f4 <HAL_GPIO_Init+0x2b8>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6193      	str	r3, [r2, #24]
 80048c8:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <HAL_GPIO_Init+0x2b8>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048d4:	4a48      	ldr	r2, [pc, #288]	; (80049f8 <HAL_GPIO_Init+0x2bc>)
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	3302      	adds	r3, #2
 80048dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	220f      	movs	r2, #15
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a40      	ldr	r2, [pc, #256]	; (80049fc <HAL_GPIO_Init+0x2c0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_GPIO_Init+0x1ec>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a3f      	ldr	r2, [pc, #252]	; (8004a00 <HAL_GPIO_Init+0x2c4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00d      	beq.n	8004924 <HAL_GPIO_Init+0x1e8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3e      	ldr	r2, [pc, #248]	; (8004a04 <HAL_GPIO_Init+0x2c8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <HAL_GPIO_Init+0x1e4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3d      	ldr	r2, [pc, #244]	; (8004a08 <HAL_GPIO_Init+0x2cc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_GPIO_Init+0x1e0>
 8004918:	2303      	movs	r3, #3
 800491a:	e006      	b.n	800492a <HAL_GPIO_Init+0x1ee>
 800491c:	2304      	movs	r3, #4
 800491e:	e004      	b.n	800492a <HAL_GPIO_Init+0x1ee>
 8004920:	2302      	movs	r3, #2
 8004922:	e002      	b.n	800492a <HAL_GPIO_Init+0x1ee>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_GPIO_Init+0x1ee>
 8004928:	2300      	movs	r3, #0
 800492a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492c:	f002 0203 	and.w	r2, r2, #3
 8004930:	0092      	lsls	r2, r2, #2
 8004932:	4093      	lsls	r3, r2
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800493a:	492f      	ldr	r1, [pc, #188]	; (80049f8 <HAL_GPIO_Init+0x2bc>)
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	089b      	lsrs	r3, r3, #2
 8004940:	3302      	adds	r3, #2
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d006      	beq.n	8004962 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004954:	4b2d      	ldr	r3, [pc, #180]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	492c      	ldr	r1, [pc, #176]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]
 8004960:	e006      	b.n	8004970 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004962:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	43db      	mvns	r3, r3
 800496a:	4928      	ldr	r1, [pc, #160]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 800496c:	4013      	ands	r3, r2
 800496e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d006      	beq.n	800498a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800497c:	4b23      	ldr	r3, [pc, #140]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	4922      	ldr	r1, [pc, #136]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
 8004988:	e006      	b.n	8004998 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800498a:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	43db      	mvns	r3, r3
 8004992:	491e      	ldr	r1, [pc, #120]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 8004994:	4013      	ands	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	4918      	ldr	r1, [pc, #96]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]
 80049b0:	e006      	b.n	80049c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049b2:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	4914      	ldr	r1, [pc, #80]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049bc:	4013      	ands	r3, r2
 80049be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d021      	beq.n	8004a10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	490e      	ldr	r1, [pc, #56]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60cb      	str	r3, [r1, #12]
 80049d8:	e021      	b.n	8004a1e <HAL_GPIO_Init+0x2e2>
 80049da:	bf00      	nop
 80049dc:	10320000 	.word	0x10320000
 80049e0:	10310000 	.word	0x10310000
 80049e4:	10220000 	.word	0x10220000
 80049e8:	10210000 	.word	0x10210000
 80049ec:	10120000 	.word	0x10120000
 80049f0:	10110000 	.word	0x10110000
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40010800 	.word	0x40010800
 8004a00:	40010c00 	.word	0x40010c00
 8004a04:	40011000 	.word	0x40011000
 8004a08:	40011400 	.word	0x40011400
 8004a0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_GPIO_Init+0x304>)
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	43db      	mvns	r3, r3
 8004a18:	4909      	ldr	r1, [pc, #36]	; (8004a40 <HAL_GPIO_Init+0x304>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	3301      	adds	r3, #1
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f47f ae8e 	bne.w	8004750 <HAL_GPIO_Init+0x14>
  }
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	372c      	adds	r7, #44	; 0x2c
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40010400 	.word	0x40010400

08004a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	807b      	strh	r3, [r7, #2]
 8004a50:	4613      	mov	r3, r2
 8004a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a54:	787b      	ldrb	r3, [r7, #1]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a5a:	887a      	ldrh	r2, [r7, #2]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a60:	e003      	b.n	8004a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a62:	887b      	ldrh	r3, [r7, #2]
 8004a64:	041a      	lsls	r2, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	611a      	str	r2, [r3, #16]
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr

08004a74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a8a:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f806 	bl	8004aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40010400 	.word	0x40010400

08004aa4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e272      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8087 	beq.w	8004be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ad8:	4b92      	ldr	r3, [pc, #584]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 030c 	and.w	r3, r3, #12
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d00c      	beq.n	8004afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ae4:	4b8f      	ldr	r3, [pc, #572]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 030c 	and.w	r3, r3, #12
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d112      	bne.n	8004b16 <HAL_RCC_OscConfig+0x5e>
 8004af0:	4b8c      	ldr	r3, [pc, #560]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afc:	d10b      	bne.n	8004b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afe:	4b89      	ldr	r3, [pc, #548]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d06c      	beq.n	8004be4 <HAL_RCC_OscConfig+0x12c>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d168      	bne.n	8004be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e24c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCC_OscConfig+0x76>
 8004b20:	4b80      	ldr	r3, [pc, #512]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a7f      	ldr	r2, [pc, #508]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	e02e      	b.n	8004b8c <HAL_RCC_OscConfig+0xd4>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x98>
 8004b36:	4b7b      	ldr	r3, [pc, #492]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a7a      	ldr	r2, [pc, #488]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	4b78      	ldr	r3, [pc, #480]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a77      	ldr	r2, [pc, #476]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e01d      	b.n	8004b8c <HAL_RCC_OscConfig+0xd4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0xbc>
 8004b5a:	4b72      	ldr	r3, [pc, #456]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a71      	ldr	r2, [pc, #452]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4b6f      	ldr	r3, [pc, #444]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a6e      	ldr	r2, [pc, #440]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e00b      	b.n	8004b8c <HAL_RCC_OscConfig+0xd4>
 8004b74:	4b6b      	ldr	r3, [pc, #428]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a6a      	ldr	r2, [pc, #424]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4b68      	ldr	r3, [pc, #416]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a67      	ldr	r2, [pc, #412]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d013      	beq.n	8004bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7ff fc64 	bl	8004460 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7ff fc60 	bl	8004460 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	; 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e200      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	4b5d      	ldr	r3, [pc, #372]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0xe4>
 8004bba:	e014      	b.n	8004be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7ff fc50 	bl	8004460 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7ff fc4c 	bl	8004460 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e1ec      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd6:	4b53      	ldr	r3, [pc, #332]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x10c>
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d063      	beq.n	8004cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bf2:	4b4c      	ldr	r3, [pc, #304]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bfe:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d11c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x18c>
 8004c0a:	4b46      	ldr	r3, [pc, #280]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d116      	bne.n	8004c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c16:	4b43      	ldr	r3, [pc, #268]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_RCC_OscConfig+0x176>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d001      	beq.n	8004c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e1c0      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2e:	4b3d      	ldr	r3, [pc, #244]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4939      	ldr	r1, [pc, #228]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c42:	e03a      	b.n	8004cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d020      	beq.n	8004c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c4c:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c52:	f7ff fc05 	bl	8004460 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5a:	f7ff fc01 	bl	8004460 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e1a1      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6c:	4b2d      	ldr	r3, [pc, #180]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c78:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4927      	ldr	r1, [pc, #156]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	600b      	str	r3, [r1, #0]
 8004c8c:	e015      	b.n	8004cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8e:	4b26      	ldr	r3, [pc, #152]	; (8004d28 <HAL_RCC_OscConfig+0x270>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c94:	f7ff fbe4 	bl	8004460 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c9c:	f7ff fbe0 	bl	8004460 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e180      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cae:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d03a      	beq.n	8004d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d019      	beq.n	8004d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cce:	4b17      	ldr	r3, [pc, #92]	; (8004d2c <HAL_RCC_OscConfig+0x274>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd4:	f7ff fbc4 	bl	8004460 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cdc:	f7ff fbc0 	bl	8004460 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e160      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	f000 fad8 	bl	80052b0 <RCC_Delay>
 8004d00:	e01c      	b.n	8004d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d02:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <HAL_RCC_OscConfig+0x274>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d08:	f7ff fbaa 	bl	8004460 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d0e:	e00f      	b.n	8004d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d10:	f7ff fba6 	bl	8004460 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d908      	bls.n	8004d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e146      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
 8004d28:	42420000 	.word	0x42420000
 8004d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b92      	ldr	r3, [pc, #584]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e9      	bne.n	8004d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80a6 	beq.w	8004e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	4b8b      	ldr	r3, [pc, #556]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10d      	bne.n	8004d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	4b88      	ldr	r3, [pc, #544]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	4a87      	ldr	r2, [pc, #540]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d64:	61d3      	str	r3, [r2, #28]
 8004d66:	4b85      	ldr	r3, [pc, #532]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d76:	4b82      	ldr	r3, [pc, #520]	; (8004f80 <HAL_RCC_OscConfig+0x4c8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d118      	bne.n	8004db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d82:	4b7f      	ldr	r3, [pc, #508]	; (8004f80 <HAL_RCC_OscConfig+0x4c8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a7e      	ldr	r2, [pc, #504]	; (8004f80 <HAL_RCC_OscConfig+0x4c8>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8e:	f7ff fb67 	bl	8004460 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d96:	f7ff fb63 	bl	8004460 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b64      	cmp	r3, #100	; 0x64
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e103      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	4b75      	ldr	r3, [pc, #468]	; (8004f80 <HAL_RCC_OscConfig+0x4c8>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d106      	bne.n	8004dca <HAL_RCC_OscConfig+0x312>
 8004dbc:	4b6f      	ldr	r3, [pc, #444]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	4a6e      	ldr	r2, [pc, #440]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6213      	str	r3, [r2, #32]
 8004dc8:	e02d      	b.n	8004e26 <HAL_RCC_OscConfig+0x36e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0x334>
 8004dd2:	4b6a      	ldr	r3, [pc, #424]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4a69      	ldr	r2, [pc, #420]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	6213      	str	r3, [r2, #32]
 8004dde:	4b67      	ldr	r3, [pc, #412]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	4a66      	ldr	r2, [pc, #408]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	f023 0304 	bic.w	r3, r3, #4
 8004de8:	6213      	str	r3, [r2, #32]
 8004dea:	e01c      	b.n	8004e26 <HAL_RCC_OscConfig+0x36e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b05      	cmp	r3, #5
 8004df2:	d10c      	bne.n	8004e0e <HAL_RCC_OscConfig+0x356>
 8004df4:	4b61      	ldr	r3, [pc, #388]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	4a60      	ldr	r2, [pc, #384]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004dfa:	f043 0304 	orr.w	r3, r3, #4
 8004dfe:	6213      	str	r3, [r2, #32]
 8004e00:	4b5e      	ldr	r3, [pc, #376]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	4a5d      	ldr	r2, [pc, #372]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	6213      	str	r3, [r2, #32]
 8004e0c:	e00b      	b.n	8004e26 <HAL_RCC_OscConfig+0x36e>
 8004e0e:	4b5b      	ldr	r3, [pc, #364]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	4a5a      	ldr	r2, [pc, #360]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004e14:	f023 0301 	bic.w	r3, r3, #1
 8004e18:	6213      	str	r3, [r2, #32]
 8004e1a:	4b58      	ldr	r3, [pc, #352]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	4a57      	ldr	r2, [pc, #348]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004e20:	f023 0304 	bic.w	r3, r3, #4
 8004e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d015      	beq.n	8004e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2e:	f7ff fb17 	bl	8004460 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e34:	e00a      	b.n	8004e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e36:	f7ff fb13 	bl	8004460 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e0b1      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4c:	4b4b      	ldr	r3, [pc, #300]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0ee      	beq.n	8004e36 <HAL_RCC_OscConfig+0x37e>
 8004e58:	e014      	b.n	8004e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e5a:	f7ff fb01 	bl	8004460 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e60:	e00a      	b.n	8004e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e62:	f7ff fafd 	bl	8004460 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e09b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e78:	4b40      	ldr	r3, [pc, #256]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1ee      	bne.n	8004e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e8a:	4b3c      	ldr	r3, [pc, #240]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	4a3b      	ldr	r2, [pc, #236]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 8087 	beq.w	8004fae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ea0:	4b36      	ldr	r3, [pc, #216]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d061      	beq.n	8004f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d146      	bne.n	8004f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb4:	4b33      	ldr	r3, [pc, #204]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eba:	f7ff fad1 	bl	8004460 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec2:	f7ff facd 	bl	8004460 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e06d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed4:	4b29      	ldr	r3, [pc, #164]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee8:	d108      	bne.n	8004efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	4921      	ldr	r1, [pc, #132]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004efc:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a19      	ldr	r1, [r3, #32]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	491b      	ldr	r1, [pc, #108]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f14:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1a:	f7ff faa1 	bl	8004460 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f22:	f7ff fa9d 	bl	8004460 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e03d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f34:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0f0      	beq.n	8004f22 <HAL_RCC_OscConfig+0x46a>
 8004f40:	e035      	b.n	8004fae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7ff fa8a 	bl	8004460 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f50:	f7ff fa86 	bl	8004460 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e026      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <HAL_RCC_OscConfig+0x4c4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x498>
 8004f6e:	e01e      	b.n	8004fae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d107      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e019      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40007000 	.word	0x40007000
 8004f84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <HAL_RCC_OscConfig+0x500>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d001      	beq.n	8004fae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e000      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40021000 	.word	0x40021000

08004fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0d0      	b.n	8005172 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b6a      	ldr	r3, [pc, #424]	; (800517c <HAL_RCC_ClockConfig+0x1c0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d910      	bls.n	8005000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b67      	ldr	r3, [pc, #412]	; (800517c <HAL_RCC_ClockConfig+0x1c0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 0207 	bic.w	r2, r3, #7
 8004fe6:	4965      	ldr	r1, [pc, #404]	; (800517c <HAL_RCC_ClockConfig+0x1c0>)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b63      	ldr	r3, [pc, #396]	; (800517c <HAL_RCC_ClockConfig+0x1c0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0b8      	b.n	8005172 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d020      	beq.n	800504e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005018:	4b59      	ldr	r3, [pc, #356]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a58      	ldr	r2, [pc, #352]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005022:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005030:	4b53      	ldr	r3, [pc, #332]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4a52      	ldr	r2, [pc, #328]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 8005036:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800503a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503c:	4b50      	ldr	r3, [pc, #320]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	494d      	ldr	r1, [pc, #308]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d040      	beq.n	80050dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005062:	4b47      	ldr	r3, [pc, #284]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d115      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e07f      	b.n	8005172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507a:	4b41      	ldr	r3, [pc, #260]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e073      	b.n	8005172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508a:	4b3d      	ldr	r3, [pc, #244]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e06b      	b.n	8005172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f023 0203 	bic.w	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4936      	ldr	r1, [pc, #216]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ac:	f7ff f9d8 	bl	8004460 <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b4:	f7ff f9d4 	bl	8004460 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e053      	b.n	8005172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 020c 	and.w	r2, r3, #12
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	429a      	cmp	r2, r3
 80050da:	d1eb      	bne.n	80050b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050dc:	4b27      	ldr	r3, [pc, #156]	; (800517c <HAL_RCC_ClockConfig+0x1c0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d210      	bcs.n	800510c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b24      	ldr	r3, [pc, #144]	; (800517c <HAL_RCC_ClockConfig+0x1c0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f023 0207 	bic.w	r2, r3, #7
 80050f2:	4922      	ldr	r1, [pc, #136]	; (800517c <HAL_RCC_ClockConfig+0x1c0>)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fa:	4b20      	ldr	r3, [pc, #128]	; (800517c <HAL_RCC_ClockConfig+0x1c0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e032      	b.n	8005172 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4916      	ldr	r1, [pc, #88]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 8005126:	4313      	orrs	r3, r2
 8005128:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d009      	beq.n	800514a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	490e      	ldr	r1, [pc, #56]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 8005146:	4313      	orrs	r3, r2
 8005148:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800514a:	f000 f821 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 800514e:	4602      	mov	r2, r0
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_ClockConfig+0x1c4>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	490a      	ldr	r1, [pc, #40]	; (8005184 <HAL_RCC_ClockConfig+0x1c8>)
 800515c:	5ccb      	ldrb	r3, [r1, r3]
 800515e:	fa22 f303 	lsr.w	r3, r2, r3
 8005162:	4a09      	ldr	r2, [pc, #36]	; (8005188 <HAL_RCC_ClockConfig+0x1cc>)
 8005164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <HAL_RCC_ClockConfig+0x1d0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff f936 	bl	80043dc <HAL_InitTick>

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40022000 	.word	0x40022000
 8005180:	40021000 	.word	0x40021000
 8005184:	0800a890 	.word	0x0800a890
 8005188:	20000008 	.word	0x20000008
 800518c:	20000014 	.word	0x20000014

08005190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005190:	b490      	push	{r4, r7}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005196:	4b29      	ldr	r3, [pc, #164]	; (800523c <HAL_RCC_GetSysClockFreq+0xac>)
 8005198:	1d3c      	adds	r4, r7, #4
 800519a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800519c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051a0:	f240 2301 	movw	r3, #513	; 0x201
 80051a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	2300      	movs	r3, #0
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051ba:	4b21      	ldr	r3, [pc, #132]	; (8005240 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d002      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x40>
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d003      	beq.n	80051d6 <HAL_RCC_GetSysClockFreq+0x46>
 80051ce:	e02b      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051d0:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051d2:	623b      	str	r3, [r7, #32]
      break;
 80051d4:	e02b      	b.n	800522e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	0c9b      	lsrs	r3, r3, #18
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	3328      	adds	r3, #40	; 0x28
 80051e0:	443b      	add	r3, r7
 80051e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80051e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d012      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051f2:	4b13      	ldr	r3, [pc, #76]	; (8005240 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	0c5b      	lsrs	r3, r3, #17
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	3328      	adds	r3, #40	; 0x28
 80051fe:	443b      	add	r3, r7
 8005200:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005204:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <HAL_RCC_GetSysClockFreq+0xb4>)
 800520a:	fb03 f202 	mul.w	r2, r3, r2
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
 8005216:	e004      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	4a0b      	ldr	r2, [pc, #44]	; (8005248 <HAL_RCC_GetSysClockFreq+0xb8>)
 800521c:	fb02 f303 	mul.w	r3, r2, r3
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	623b      	str	r3, [r7, #32]
      break;
 8005226:	e002      	b.n	800522e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_RCC_GetSysClockFreq+0xb4>)
 800522a:	623b      	str	r3, [r7, #32]
      break;
 800522c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800522e:	6a3b      	ldr	r3, [r7, #32]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bc90      	pop	{r4, r7}
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	0800a610 	.word	0x0800a610
 8005240:	40021000 	.word	0x40021000
 8005244:	007a1200 	.word	0x007a1200
 8005248:	003d0900 	.word	0x003d0900

0800524c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005250:	4b02      	ldr	r3, [pc, #8]	; (800525c <HAL_RCC_GetHCLKFreq+0x10>)
 8005252:	681b      	ldr	r3, [r3, #0]
}
 8005254:	4618      	mov	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	20000008 	.word	0x20000008

08005260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005264:	f7ff fff2 	bl	800524c <HAL_RCC_GetHCLKFreq>
 8005268:	4602      	mov	r2, r0
 800526a:	4b05      	ldr	r3, [pc, #20]	; (8005280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	4903      	ldr	r1, [pc, #12]	; (8005284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005276:	5ccb      	ldrb	r3, [r1, r3]
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800527c:	4618      	mov	r0, r3
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40021000 	.word	0x40021000
 8005284:	0800a8a0 	.word	0x0800a8a0

08005288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800528c:	f7ff ffde 	bl	800524c <HAL_RCC_GetHCLKFreq>
 8005290:	4602      	mov	r2, r0
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	0adb      	lsrs	r3, r3, #11
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	4903      	ldr	r1, [pc, #12]	; (80052ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800529e:	5ccb      	ldrb	r3, [r1, r3]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40021000 	.word	0x40021000
 80052ac:	0800a8a0 	.word	0x0800a8a0

080052b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <RCC_Delay+0x34>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <RCC_Delay+0x38>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	0a5b      	lsrs	r3, r3, #9
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052cc:	bf00      	nop
  }
  while (Delay --);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1e5a      	subs	r2, r3, #1
 80052d2:	60fa      	str	r2, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f9      	bne.n	80052cc <RCC_Delay+0x1c>
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	20000008 	.word	0x20000008
 80052e8:	10624dd3 	.word	0x10624dd3

080052ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e076      	b.n	80053ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	d108      	bne.n	8005318 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530e:	d009      	beq.n	8005324 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	61da      	str	r2, [r3, #28]
 8005316:	e005      	b.n	8005324 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc fa5c 	bl	80017fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800535a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a8:	ea42 0103 	orr.w	r1, r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	0c1a      	lsrs	r2, r3, #16
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f002 0204 	and.w	r2, r2, #4
 80053ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_SPI_Transmit+0x22>
 8005412:	2302      	movs	r3, #2
 8005414:	e126      	b.n	8005664 <HAL_SPI_Transmit+0x270>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800541e:	f7ff f81f 	bl	8004460 <HAL_GetTick>
 8005422:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d002      	beq.n	800543a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005434:	2302      	movs	r3, #2
 8005436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005438:	e10b      	b.n	8005652 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <HAL_SPI_Transmit+0x52>
 8005440:	88fb      	ldrh	r3, [r7, #6]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	77fb      	strb	r3, [r7, #31]
    goto error;
 800544a:	e102      	b.n	8005652 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2203      	movs	r2, #3
 8005450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005492:	d10f      	bne.n	80054b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d007      	beq.n	80054d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054da:	d14b      	bne.n	8005574 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_SPI_Transmit+0xf6>
 80054e4:	8afb      	ldrh	r3, [r7, #22]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d13e      	bne.n	8005568 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	881a      	ldrh	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	1c9a      	adds	r2, r3, #2
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800550e:	e02b      	b.n	8005568 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b02      	cmp	r3, #2
 800551c:	d112      	bne.n	8005544 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	881a      	ldrh	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	1c9a      	adds	r2, r3, #2
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	86da      	strh	r2, [r3, #54]	; 0x36
 8005542:	e011      	b.n	8005568 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005544:	f7fe ff8c 	bl	8004460 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d803      	bhi.n	800555c <HAL_SPI_Transmit+0x168>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d102      	bne.n	8005562 <HAL_SPI_Transmit+0x16e>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005566:	e074      	b.n	8005652 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ce      	bne.n	8005510 <HAL_SPI_Transmit+0x11c>
 8005572:	e04c      	b.n	800560e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_SPI_Transmit+0x18e>
 800557c:	8afb      	ldrh	r3, [r7, #22]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d140      	bne.n	8005604 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	7812      	ldrb	r2, [r2, #0]
 800558e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055a8:	e02c      	b.n	8005604 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d113      	bne.n	80055e0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	7812      	ldrb	r2, [r2, #0]
 80055c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80055de:	e011      	b.n	8005604 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e0:	f7fe ff3e 	bl	8004460 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d803      	bhi.n	80055f8 <HAL_SPI_Transmit+0x204>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	d102      	bne.n	80055fe <HAL_SPI_Transmit+0x20a>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005602:	e026      	b.n	8005652 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1cd      	bne.n	80055aa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fbb8 	bl	8005d88 <SPI_EndRxTxTransaction>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e000      	b.n	8005652 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005650:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005662:	7ffb      	ldrb	r3, [r7, #31]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005688:	d112      	bne.n	80056b0 <HAL_SPI_Receive+0x44>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10e      	bne.n	80056b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2204      	movs	r2, #4
 8005696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f8f1 	bl	800588e <HAL_SPI_TransmitReceive>
 80056ac:	4603      	mov	r3, r0
 80056ae:	e0ea      	b.n	8005886 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_SPI_Receive+0x52>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e0e3      	b.n	8005886 <HAL_SPI_Receive+0x21a>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056c6:	f7fe fecb 	bl	8004460 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d002      	beq.n	80056de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
 80056da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056dc:	e0ca      	b.n	8005874 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_SPI_Receive+0x7e>
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ee:	e0c1      	b.n	8005874 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2204      	movs	r2, #4
 80056f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	88fa      	ldrh	r2, [r7, #6]
 8005708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005736:	d10f      	bne.n	8005758 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005746:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005756:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d007      	beq.n	8005776 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d162      	bne.n	8005844 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800577e:	e02e      	b.n	80057de <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b01      	cmp	r3, #1
 800578c:	d115      	bne.n	80057ba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f103 020c 	add.w	r2, r3, #12
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	7812      	ldrb	r2, [r2, #0]
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057b8:	e011      	b.n	80057de <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ba:	f7fe fe51 	bl	8004460 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d803      	bhi.n	80057d2 <HAL_SPI_Receive+0x166>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d102      	bne.n	80057d8 <HAL_SPI_Receive+0x16c>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057dc:	e04a      	b.n	8005874 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1cb      	bne.n	8005780 <HAL_SPI_Receive+0x114>
 80057e8:	e031      	b.n	800584e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d113      	bne.n	8005820 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	b292      	uxth	r2, r2
 8005804:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	1c9a      	adds	r2, r3, #2
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800581e:	e011      	b.n	8005844 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005820:	f7fe fe1e 	bl	8004460 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d803      	bhi.n	8005838 <HAL_SPI_Receive+0x1cc>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d102      	bne.n	800583e <HAL_SPI_Receive+0x1d2>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005842:	e017      	b.n	8005874 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1cd      	bne.n	80057ea <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fa46 	bl	8005ce4 <SPI_EndRxTransaction>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	75fb      	strb	r3, [r7, #23]
 8005870:	e000      	b.n	8005874 <HAL_SPI_Receive+0x208>
  }

error :
 8005872:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b08c      	sub	sp, #48	; 0x30
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800589c:	2301      	movs	r3, #1
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x26>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e18a      	b.n	8005bca <HAL_SPI_TransmitReceive+0x33c>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058bc:	f7fe fdd0 	bl	8004460 <HAL_GetTick>
 80058c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058d2:	887b      	ldrh	r3, [r7, #2]
 80058d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d00f      	beq.n	80058fe <HAL_SPI_TransmitReceive+0x70>
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e4:	d107      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d103      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x68>
 80058ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d003      	beq.n	80058fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
 80058f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058fc:	e15b      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_SPI_TransmitReceive+0x82>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_SPI_TransmitReceive+0x82>
 800590a:	887b      	ldrh	r3, [r7, #2]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d103      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005916:	e14e      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b04      	cmp	r3, #4
 8005922:	d003      	beq.n	800592c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2205      	movs	r2, #5
 8005928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	887a      	ldrh	r2, [r7, #2]
 800593c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	887a      	ldrh	r2, [r7, #2]
 8005942:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	887a      	ldrh	r2, [r7, #2]
 800594e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	887a      	ldrh	r2, [r7, #2]
 8005954:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d007      	beq.n	8005980 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800597e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005988:	d178      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x10a>
 8005992:	8b7b      	ldrh	r3, [r7, #26]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d166      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	881a      	ldrh	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059bc:	e053      	b.n	8005a66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d11b      	bne.n	8005a04 <HAL_SPI_TransmitReceive+0x176>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d016      	beq.n	8005a04 <HAL_SPI_TransmitReceive+0x176>
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d113      	bne.n	8005a04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	881a      	ldrh	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	1c9a      	adds	r2, r3, #2
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d119      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x1b8>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d014      	beq.n	8005a46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	b292      	uxth	r2, r2
 8005a28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a42:	2301      	movs	r3, #1
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a46:	f7fe fd0b 	bl	8004460 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d807      	bhi.n	8005a66 <HAL_SPI_TransmitReceive+0x1d8>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d003      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a64:	e0a7      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1a6      	bne.n	80059be <HAL_SPI_TransmitReceive+0x130>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1a1      	bne.n	80059be <HAL_SPI_TransmitReceive+0x130>
 8005a7a:	e07c      	b.n	8005b76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_SPI_TransmitReceive+0x1fc>
 8005a84:	8b7b      	ldrh	r3, [r7, #26]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d16b      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	7812      	ldrb	r2, [r2, #0]
 8005a96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ab0:	e057      	b.n	8005b62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d11c      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x26c>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d017      	beq.n	8005afa <HAL_SPI_TransmitReceive+0x26c>
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d114      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d119      	bne.n	8005b3c <HAL_SPI_TransmitReceive+0x2ae>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d014      	beq.n	8005b3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b3c:	f7fe fc90 	bl	8004460 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d803      	bhi.n	8005b54 <HAL_SPI_TransmitReceive+0x2c6>
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b52:	d102      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x2cc>
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b60:	e029      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1a2      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x224>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d19d      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f904 	bl	8005d88 <SPI_EndRxTxTransaction>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d006      	beq.n	8005b94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b92:	e010      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10b      	bne.n	8005bb4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	e000      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005bb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3730      	adds	r7, #48	; 0x30
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005be4:	f7fe fc3c 	bl	8004460 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bf4:	f7fe fc34 	bl	8004460 <HAL_GetTick>
 8005bf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bfa:	4b39      	ldr	r3, [pc, #228]	; (8005ce0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	015b      	lsls	r3, r3, #5
 8005c00:	0d1b      	lsrs	r3, r3, #20
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	fb02 f303 	mul.w	r3, r2, r3
 8005c08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c0a:	e054      	b.n	8005cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d050      	beq.n	8005cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c14:	f7fe fc24 	bl	8004460 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d902      	bls.n	8005c2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d13d      	bne.n	8005ca6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c42:	d111      	bne.n	8005c68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4c:	d004      	beq.n	8005c58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c56:	d107      	bne.n	8005c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c70:	d10f      	bne.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e017      	b.n	8005cd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	bf0c      	ite	eq
 8005cc6:	2301      	moveq	r3, #1
 8005cc8:	2300      	movne	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d19b      	bne.n	8005c0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20000008 	.word	0x20000008

08005ce4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf8:	d111      	bne.n	8005d1e <SPI_EndRxTransaction+0x3a>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d02:	d004      	beq.n	8005d0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d0c:	d107      	bne.n	8005d1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d1c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d26:	d117      	bne.n	8005d58 <SPI_EndRxTransaction+0x74>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d30:	d112      	bne.n	8005d58 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7ff ff49 	bl	8005bd4 <SPI_WaitFlagStateUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01a      	beq.n	8005d7e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4c:	f043 0220 	orr.w	r2, r3, #32
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e013      	b.n	8005d80 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2180      	movs	r1, #128	; 0x80
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7ff ff36 	bl	8005bd4 <SPI_WaitFlagStateUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d72:	f043 0220 	orr.w	r2, r3, #32
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e000      	b.n	8005d80 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2180      	movs	r1, #128	; 0x80
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7ff ff18 	bl	8005bd4 <SPI_WaitFlagStateUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dae:	f043 0220 	orr.w	r2, r3, #32
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e000      	b.n	8005dbc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e041      	b.n	8005e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb fd50 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f000 fa26 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d122      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d11b      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f06f 0202 	mvn.w	r2, #2
 8005e8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f9ba 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8005eaa:	e005      	b.n	8005eb8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f9ad 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f9bc 	bl	8006230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d122      	bne.n	8005f12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d11b      	bne.n	8005f12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f06f 0204 	mvn.w	r2, #4
 8005ee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f990 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8005efe:	e005      	b.n	8005f0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f983 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f992 	bl	8006230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d122      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d11b      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f06f 0208 	mvn.w	r2, #8
 8005f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f966 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8005f52:	e005      	b.n	8005f60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f959 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f968 	bl	8006230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d122      	bne.n	8005fba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	2b10      	cmp	r3, #16
 8005f80:	d11b      	bne.n	8005fba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f06f 0210 	mvn.w	r2, #16
 8005f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2208      	movs	r2, #8
 8005f90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f93c 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8005fa6:	e005      	b.n	8005fb4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f92f 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f93e 	bl	8006230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d10e      	bne.n	8005fe6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d107      	bne.n	8005fe6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f06f 0201 	mvn.w	r2, #1
 8005fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f90a 	bl	80061fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	d10e      	bne.n	8006012 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffe:	2b80      	cmp	r3, #128	; 0x80
 8006000:	d107      	bne.n	8006012 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800600a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fa80 	bl	8006512 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b40      	cmp	r3, #64	; 0x40
 800601e:	d10e      	bne.n	800603e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d107      	bne.n	800603e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f902 	bl	8006242 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b20      	cmp	r3, #32
 800604a:	d10e      	bne.n	800606a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b20      	cmp	r3, #32
 8006058:	d107      	bne.n	800606a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f06f 0220 	mvn.w	r2, #32
 8006062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fa4b 	bl	8006500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_TIM_ConfigClockSource+0x18>
 8006086:	2302      	movs	r3, #2
 8006088:	e0b3      	b.n	80061f2 <HAL_TIM_ConfigClockSource+0x180>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060b0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c2:	d03e      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0xd0>
 80060c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c8:	f200 8087 	bhi.w	80061da <HAL_TIM_ConfigClockSource+0x168>
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d0:	f000 8085 	beq.w	80061de <HAL_TIM_ConfigClockSource+0x16c>
 80060d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d8:	d87f      	bhi.n	80061da <HAL_TIM_ConfigClockSource+0x168>
 80060da:	2b70      	cmp	r3, #112	; 0x70
 80060dc:	d01a      	beq.n	8006114 <HAL_TIM_ConfigClockSource+0xa2>
 80060de:	2b70      	cmp	r3, #112	; 0x70
 80060e0:	d87b      	bhi.n	80061da <HAL_TIM_ConfigClockSource+0x168>
 80060e2:	2b60      	cmp	r3, #96	; 0x60
 80060e4:	d050      	beq.n	8006188 <HAL_TIM_ConfigClockSource+0x116>
 80060e6:	2b60      	cmp	r3, #96	; 0x60
 80060e8:	d877      	bhi.n	80061da <HAL_TIM_ConfigClockSource+0x168>
 80060ea:	2b50      	cmp	r3, #80	; 0x50
 80060ec:	d03c      	beq.n	8006168 <HAL_TIM_ConfigClockSource+0xf6>
 80060ee:	2b50      	cmp	r3, #80	; 0x50
 80060f0:	d873      	bhi.n	80061da <HAL_TIM_ConfigClockSource+0x168>
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d058      	beq.n	80061a8 <HAL_TIM_ConfigClockSource+0x136>
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d86f      	bhi.n	80061da <HAL_TIM_ConfigClockSource+0x168>
 80060fa:	2b30      	cmp	r3, #48	; 0x30
 80060fc:	d064      	beq.n	80061c8 <HAL_TIM_ConfigClockSource+0x156>
 80060fe:	2b30      	cmp	r3, #48	; 0x30
 8006100:	d86b      	bhi.n	80061da <HAL_TIM_ConfigClockSource+0x168>
 8006102:	2b20      	cmp	r3, #32
 8006104:	d060      	beq.n	80061c8 <HAL_TIM_ConfigClockSource+0x156>
 8006106:	2b20      	cmp	r3, #32
 8006108:	d867      	bhi.n	80061da <HAL_TIM_ConfigClockSource+0x168>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d05c      	beq.n	80061c8 <HAL_TIM_ConfigClockSource+0x156>
 800610e:	2b10      	cmp	r3, #16
 8006110:	d05a      	beq.n	80061c8 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006112:	e062      	b.n	80061da <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	6899      	ldr	r1, [r3, #8]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f000 f96f 	bl	8006406 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006136:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	609a      	str	r2, [r3, #8]
      break;
 8006140:	e04e      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6899      	ldr	r1, [r3, #8]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f000 f958 	bl	8006406 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006164:	609a      	str	r2, [r3, #8]
      break;
 8006166:	e03b      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	6859      	ldr	r1, [r3, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	461a      	mov	r2, r3
 8006176:	f000 f8cf 	bl	8006318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2150      	movs	r1, #80	; 0x50
 8006180:	4618      	mov	r0, r3
 8006182:	f000 f926 	bl	80063d2 <TIM_ITRx_SetConfig>
      break;
 8006186:	e02b      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	6859      	ldr	r1, [r3, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	461a      	mov	r2, r3
 8006196:	f000 f8ed 	bl	8006374 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2160      	movs	r1, #96	; 0x60
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 f916 	bl	80063d2 <TIM_ITRx_SetConfig>
      break;
 80061a6:	e01b      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	461a      	mov	r2, r3
 80061b6:	f000 f8af 	bl	8006318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2140      	movs	r1, #64	; 0x40
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 f906 	bl	80063d2 <TIM_ITRx_SetConfig>
      break;
 80061c6:	e00b      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4619      	mov	r1, r3
 80061d2:	4610      	mov	r0, r2
 80061d4:	f000 f8fd 	bl	80063d2 <TIM_ITRx_SetConfig>
        break;
 80061d8:	e002      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80061da:	bf00      	nop
 80061dc:	e000      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80061de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr

0800620c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr

0800621e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr

08006242 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr

08006254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a29      	ldr	r2, [pc, #164]	; (800630c <TIM_Base_SetConfig+0xb8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_Base_SetConfig+0x30>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0x30>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a26      	ldr	r2, [pc, #152]	; (8006310 <TIM_Base_SetConfig+0xbc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0x30>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a25      	ldr	r2, [pc, #148]	; (8006314 <TIM_Base_SetConfig+0xc0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a1c      	ldr	r2, [pc, #112]	; (800630c <TIM_Base_SetConfig+0xb8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00b      	beq.n	80062b6 <TIM_Base_SetConfig+0x62>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d007      	beq.n	80062b6 <TIM_Base_SetConfig+0x62>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a19      	ldr	r2, [pc, #100]	; (8006310 <TIM_Base_SetConfig+0xbc>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d003      	beq.n	80062b6 <TIM_Base_SetConfig+0x62>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a18      	ldr	r2, [pc, #96]	; (8006314 <TIM_Base_SetConfig+0xc0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d108      	bne.n	80062c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a07      	ldr	r2, [pc, #28]	; (800630c <TIM_Base_SetConfig+0xb8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d103      	bne.n	80062fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	615a      	str	r2, [r3, #20]
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800

08006318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f023 0201 	bic.w	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f023 030a 	bic.w	r3, r3, #10
 8006354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f023 0210 	bic.w	r2, r3, #16
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800639e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	031b      	lsls	r3, r3, #12
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	621a      	str	r2, [r3, #32]
}
 80063c8:	bf00      	nop
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr

080063d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f043 0307 	orr.w	r3, r3, #7
 80063f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	609a      	str	r2, [r3, #8]
}
 80063fc:	bf00      	nop
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr

08006406 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006406:	b480      	push	{r7}
 8006408:	b087      	sub	sp, #28
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
 8006412:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006420:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	021a      	lsls	r2, r3, #8
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	431a      	orrs	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4313      	orrs	r3, r2
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	609a      	str	r2, [r3, #8]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	bc80      	pop	{r7}
 8006442:	4770      	bx	lr

08006444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006458:	2302      	movs	r3, #2
 800645a:	e046      	b.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a8:	d009      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a10      	ldr	r2, [pc, #64]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d10c      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800

08006500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr

08006512 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr

08006524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e03f      	b.n	80065b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fb f9c4 	bl	80018d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2224      	movs	r2, #36	; 0x24
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f905 	bl	8006778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800657c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800658c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800659c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b08a      	sub	sp, #40	; 0x28
 80065c2:	af02      	add	r7, sp, #8
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	603b      	str	r3, [r7, #0]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d17c      	bne.n	80066d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <HAL_UART_Transmit+0x2c>
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e075      	b.n	80066da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_UART_Transmit+0x3e>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e06e      	b.n	80066da <HAL_UART_Transmit+0x11c>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2221      	movs	r2, #33	; 0x21
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006612:	f7fd ff25 	bl	8004460 <HAL_GetTick>
 8006616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	88fa      	ldrh	r2, [r7, #6]
 800661c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	88fa      	ldrh	r2, [r7, #6]
 8006622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662c:	d108      	bne.n	8006640 <HAL_UART_Transmit+0x82>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	e003      	b.n	8006648 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006644:	2300      	movs	r3, #0
 8006646:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006650:	e02a      	b.n	80066a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f840 	bl	80066e2 <UART_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e036      	b.n	80066da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	3302      	adds	r3, #2
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	e007      	b.n	800669a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	3301      	adds	r3, #1
 8006698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1cf      	bne.n	8006652 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2200      	movs	r2, #0
 80066ba:	2140      	movs	r1, #64	; 0x40
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f810 	bl	80066e2 <UART_WaitOnFlagUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e006      	b.n	80066da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	e000      	b.n	80066da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	4613      	mov	r3, r2
 80066f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f2:	e02c      	b.n	800674e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fa:	d028      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <UART_WaitOnFlagUntilTimeout+0x30>
 8006702:	f7fd fead 	bl	8004460 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	429a      	cmp	r2, r3
 8006710:	d21d      	bcs.n	800674e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006720:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695a      	ldr	r2, [r3, #20]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0201 	bic.w	r2, r2, #1
 8006730:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e00f      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4013      	ands	r3, r2
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	429a      	cmp	r2, r3
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	429a      	cmp	r2, r3
 800676a:	d0c3      	beq.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80067b2:	f023 030c 	bic.w	r3, r3, #12
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	430b      	orrs	r3, r1
 80067be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2c      	ldr	r2, [pc, #176]	; (800688c <UART_SetConfig+0x114>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d103      	bne.n	80067e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067e0:	f7fe fd52 	bl	8005288 <HAL_RCC_GetPCLK2Freq>
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	e002      	b.n	80067ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067e8:	f7fe fd3a 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 80067ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009a      	lsls	r2, r3, #2
 80067f8:	441a      	add	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	4a22      	ldr	r2, [pc, #136]	; (8006890 <UART_SetConfig+0x118>)
 8006806:	fba2 2303 	umull	r2, r3, r2, r3
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	0119      	lsls	r1, r3, #4
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009a      	lsls	r2, r3, #2
 8006818:	441a      	add	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	fbb2 f2f3 	udiv	r2, r2, r3
 8006824:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <UART_SetConfig+0x118>)
 8006826:	fba3 0302 	umull	r0, r3, r3, r2
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	2064      	movs	r0, #100	; 0x64
 800682e:	fb00 f303 	mul.w	r3, r0, r3
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	3332      	adds	r3, #50	; 0x32
 8006838:	4a15      	ldr	r2, [pc, #84]	; (8006890 <UART_SetConfig+0x118>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006844:	4419      	add	r1, r3
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009a      	lsls	r2, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	fbb2 f2f3 	udiv	r2, r2, r3
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <UART_SetConfig+0x118>)
 800685e:	fba3 0302 	umull	r0, r3, r3, r2
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	2064      	movs	r0, #100	; 0x64
 8006866:	fb00 f303 	mul.w	r3, r0, r3
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	3332      	adds	r3, #50	; 0x32
 8006870:	4a07      	ldr	r2, [pc, #28]	; (8006890 <UART_SetConfig+0x118>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	f003 020f 	and.w	r2, r3, #15
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	440a      	add	r2, r1
 8006882:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40013800 	.word	0x40013800
 8006890:	51eb851f 	.word	0x51eb851f

08006894 <config>:
#include "stdio.h"
#include <string.h>

uint8_t sensor_id = 0xAA;

struct config config(){
 8006894:	b4b0      	push	{r4, r5, r7}
 8006896:	b089      	sub	sp, #36	; 0x24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]

	struct config t;
	uint8_t flag = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	77fb      	strb	r3, [r7, #31]
	set_flag(flag,SEND_TEMP_FLAG);
 80068a0:	7ffb      	ldrb	r3, [r7, #31]
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	77fb      	strb	r3, [r7, #31]
	//set_flag(flag,SEND_CO2_FLAG);
	set_flag(flag,SEND_VIBRATION_FLAG);
 80068a8:	7ffb      	ldrb	r3, [r7, #31]
 80068aa:	f043 0304 	orr.w	r3, r3, #4
 80068ae:	77fb      	strb	r3, [r7, #31]

	t.send_flag = flag;
 80068b0:	7ffb      	ldrb	r3, [r7, #31]
 80068b2:	733b      	strb	r3, [r7, #12]
	memcpy(t.key,"HALLO_adwFegadwa", 16);
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <config+0x54>)
 80068b6:	f107 040d 	add.w	r4, r7, #13
 80068ba:	461d      	mov	r5, r3
 80068bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068be:	6020      	str	r0, [r4, #0]
 80068c0:	6061      	str	r1, [r4, #4]
 80068c2:	60a2      	str	r2, [r4, #8]
 80068c4:	60e3      	str	r3, [r4, #12]

	return t;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	461d      	mov	r5, r3
 80068ca:	f107 040c 	add.w	r4, r7, #12
 80068ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068d0:	6028      	str	r0, [r5, #0]
 80068d2:	6069      	str	r1, [r5, #4]
 80068d4:	60aa      	str	r2, [r5, #8]
 80068d6:	60eb      	str	r3, [r5, #12]
 80068d8:	7823      	ldrb	r3, [r4, #0]
 80068da:	742b      	strb	r3, [r5, #16]
}
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	3724      	adds	r7, #36	; 0x24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bcb0      	pop	{r4, r5, r7}
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	0800a620 	.word	0x0800a620

080068ec <comm_builddata>:
#endif

uint8_t gateway_received = 0;
uint8_t message_send = 0;

void comm_builddata(uint8_t *temp, float *value, uint8_t placement){
 80068ec:	b590      	push	{r4, r7, lr}
 80068ee:	b091      	sub	sp, #68	; 0x44
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	71fb      	strb	r3, [r7, #7]
	char tmp[20];
	char stri[20];
	union convert f;
	f.t = *value;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	613b      	str	r3, [r7, #16]
	int i = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
	printf_debug(commmod,"Value: %f",*value);
 8006904:	4b23      	ldr	r3, [pc, #140]	; (8006994 <comm_builddata+0xa8>)
 8006906:	681c      	ldr	r4, [r3, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f7f9 fd8b 	bl	8000428 <__aeabi_f2d>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	4920      	ldr	r1, [pc, #128]	; (8006998 <comm_builddata+0xac>)
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fc67 	bl	80071ec <printf_debug>
	sprintf(tmp, "hex: ");
 800691e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006922:	491e      	ldr	r1, [pc, #120]	; (800699c <comm_builddata+0xb0>)
 8006924:	4618      	mov	r0, r3
 8006926:	f001 faef 	bl	8007f08 <siprintf>
	for(i=0; i<4; i++){
 800692a:	2300      	movs	r3, #0
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800692e:	e022      	b.n	8006976 <comm_builddata+0x8a>
		sprintf(stri,"%02x",f.b[i]);
 8006930:	f107 0210 	add.w	r2, r7, #16
 8006934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006936:	4413      	add	r3, r2
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	f107 0314 	add.w	r3, r7, #20
 8006940:	4917      	ldr	r1, [pc, #92]	; (80069a0 <comm_builddata+0xb4>)
 8006942:	4618      	mov	r0, r3
 8006944:	f001 fae0 	bl	8007f08 <siprintf>
		strcat(tmp, stri);
 8006948:	f107 0214 	add.w	r2, r7, #20
 800694c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006950:	4611      	mov	r1, r2
 8006952:	4618      	mov	r0, r3
 8006954:	f001 faf8 	bl	8007f48 <strcat>
		temp[placement + i] = f.b[i];
 8006958:	79fa      	ldrb	r2, [r7, #7]
 800695a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695c:	4413      	add	r3, r2
 800695e:	461a      	mov	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f107 0110 	add.w	r1, r7, #16
 8006968:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800696a:	440a      	add	r2, r1
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<4; i++){
 8006970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006972:	3301      	adds	r3, #1
 8006974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006978:	2b03      	cmp	r3, #3
 800697a:	ddd9      	ble.n	8006930 <comm_builddata+0x44>
	}
	print_debug(commmod, tmp);
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <comm_builddata+0xa8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fbc8 	bl	800711c <print_debug>
}
 800698c:	bf00      	nop
 800698e:	3744      	adds	r7, #68	; 0x44
 8006990:	46bd      	mov	sp, r7
 8006992:	bd90      	pop	{r4, r7, pc}
 8006994:	2000001c 	.word	0x2000001c
 8006998:	0800a63c 	.word	0x0800a63c
 800699c:	0800a648 	.word	0x0800a648
 80069a0:	0800a650 	.word	0x0800a650

080069a4 <comm_request>:

uint8_t comm_request(uint8_t *temp, struct sensor_values sensor_value){
 80069a4:	b084      	sub	sp, #16
 80069a6:	b590      	push	{r4, r7, lr}
 80069a8:	b0f7      	sub	sp, #476	; 0x1dc
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	f507 74ec 	add.w	r4, r7, #472	; 0x1d8
 80069b0:	f5a4 74ea 	sub.w	r4, r4, #468	; 0x1d4
 80069b4:	6020      	str	r0, [r4, #0]
 80069b6:	f507 70f6 	add.w	r0, r7, #492	; 0x1ec
 80069ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//make sensor data ready for send
	int i;
	char tmp[150];
	char chr[300];
	VECTOR *ptr_data = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	ptr_data = &sensor_value.acc.x;
 80069c4:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80069c8:	3304      	adds	r3, #4
 80069ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

	memset(temp,0,200);
 80069ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80069d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80069d6:	22c8      	movs	r2, #200	; 0xc8
 80069d8:	2100      	movs	r1, #0
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	f000 fe2c 	bl	8007638 <memset>
	temp[0] = sensor_id;
 80069e0:	4b9a      	ldr	r3, [pc, #616]	; (8006c4c <comm_request+0x2a8>)
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80069e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	701a      	strb	r2, [r3, #0]
	temp[1] = DATAPKT;
 80069f0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80069f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3301      	adds	r3, #1
 80069fc:	2201      	movs	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]

	memcpy(&temp[2], &c.send_flag, 1);
 8006a00:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006a04:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	4a90      	ldr	r2, [pc, #576]	; (8006c50 <comm_request+0x2ac>)
 8006a0e:	7812      	ldrb	r2, [r2, #0]
 8006a10:	701a      	strb	r2, [r3, #0]
	comm_builddata(temp,&sensor_value.temperature, 3);
 8006a12:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8006a16:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006a1a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006a1e:	2203      	movs	r2, #3
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	f7ff ff63 	bl	80068ec <comm_builddata>

	for(i=0; i<3;i++){
 8006a26:	2300      	movs	r3, #0
 8006a28:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006a2c:	e045      	b.n	8006aba <comm_request+0x116>
		comm_builddata(temp,&ptr_data->rms, 7+(12*i));
 8006a2e:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8006a32:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	0052      	lsls	r2, r2, #1
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	3307      	adds	r3, #7
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006a4a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	f7ff ff4c 	bl	80068ec <comm_builddata>
		comm_builddata(temp,&ptr_data->peak, 11+(12*i));
 8006a54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006a58:	1d19      	adds	r1, r3, #4
 8006a5a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	0052      	lsls	r2, r2, #1
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	330b      	adds	r3, #11
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006a72:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	f7ff ff38 	bl	80068ec <comm_builddata>
		comm_builddata(temp,&ptr_data->crest, 15+(12*i));
 8006a7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006a80:	f103 0108 	add.w	r1, r3, #8
 8006a84:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	0052      	lsls	r2, r2, #1
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	330f      	adds	r3, #15
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006a9c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	f7ff ff23 	bl	80068ec <comm_builddata>
		ptr_data++;
 8006aa6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006aaa:	330c      	adds	r3, #12
 8006aac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	for(i=0; i<3;i++){
 8006ab0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006aba:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	ddb5      	ble.n	8006a2e <comm_request+0x8a>
	}
	ptr_data = &sensor_value.velo.x;
 8006ac2:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8006ac6:	3328      	adds	r3, #40	; 0x28
 8006ac8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	for(i=0; i<3;i++){
 8006acc:	2300      	movs	r3, #0
 8006ace:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006ad2:	e045      	b.n	8006b60 <comm_request+0x1bc>
		comm_builddata(temp,&ptr_data->rms, 43+(12*i));
 8006ad4:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8006ad8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	461a      	mov	r2, r3
 8006ae0:	0052      	lsls	r2, r2, #1
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	332b      	adds	r3, #43	; 0x2b
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006af0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	f7ff fef9 	bl	80068ec <comm_builddata>
		comm_builddata(temp,&ptr_data->peak, 47+(12*i));
 8006afa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006afe:	1d19      	adds	r1, r3, #4
 8006b00:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	0052      	lsls	r2, r2, #1
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	332f      	adds	r3, #47	; 0x2f
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006b18:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	f7ff fee5 	bl	80068ec <comm_builddata>
		comm_builddata(temp,&ptr_data->crest, 51+(12*i));
 8006b22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006b26:	f103 0108 	add.w	r1, r3, #8
 8006b2a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	0052      	lsls	r2, r2, #1
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	3333      	adds	r3, #51	; 0x33
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006b42:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	f7ff fed0 	bl	80068ec <comm_builddata>
		ptr_data++;
 8006b4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006b50:	330c      	adds	r3, #12
 8006b52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	for(i=0; i<3;i++){
 8006b56:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006b60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	ddb5      	ble.n	8006ad4 <comm_request+0x130>
	}
	ptr_data = &sensor_value.disp.x;
 8006b68:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8006b6c:	334c      	adds	r3, #76	; 0x4c
 8006b6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	for(i=0; i<3;i++){
 8006b72:	2300      	movs	r3, #0
 8006b74:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006b78:	e02a      	b.n	8006bd0 <comm_request+0x22c>
		comm_builddata(temp,&ptr_data->rms, 79+(8*i));
 8006b7a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8006b7e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	334f      	adds	r3, #79	; 0x4f
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006b90:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	f7ff fea9 	bl	80068ec <comm_builddata>
		comm_builddata(temp,&ptr_data->peak, 83+(8*i));
 8006b9a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006b9e:	1d19      	adds	r1, r3, #4
 8006ba0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	3353      	adds	r3, #83	; 0x53
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006bb2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	f7ff fe98 	bl	80068ec <comm_builddata>
		ptr_data++;
 8006bbc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	for(i=0; i<3;i++){
 8006bc6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006bca:	3301      	adds	r3, #1
 8006bcc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006bd0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	ddd0      	ble.n	8006b7a <comm_request+0x1d6>
	}
	for(i=0; i<135;i++){
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006bde:	e01c      	b.n	8006c1a <comm_request+0x276>
		sprintf(tmp,"%02x",temp[i]);
 8006be0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006be4:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8006be8:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	4413      	add	r3, r2
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006bf8:	4916      	ldr	r1, [pc, #88]	; (8006c54 <comm_request+0x2b0>)
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 f984 	bl	8007f08 <siprintf>
		strcat(chr, tmp);
 8006c00:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006c04:	f107 030c 	add.w	r3, r7, #12
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 f99c 	bl	8007f48 <strcat>
	for(i=0; i<135;i++){
 8006c10:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006c14:	3301      	adds	r3, #1
 8006c16:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006c1a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006c1e:	2b86      	cmp	r3, #134	; 0x86
 8006c20:	ddde      	ble.n	8006be0 <comm_request+0x23c>
	}
	comm_printf_debug(chr);
 8006c22:	4b0d      	ldr	r3, [pc, #52]	; (8006c58 <comm_request+0x2b4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f107 020c 	add.w	r2, r7, #12
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fadd 	bl	80071ec <printf_debug>
	message_send = 1;
 8006c32:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <comm_request+0x2b8>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	701a      	strb	r2, [r3, #0]
	return 103;
 8006c38:	2367      	movs	r3, #103	; 0x67
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 8006c40:	46bd      	mov	sp, r7
 8006c42:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006c46:	b004      	add	sp, #16
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20000019 	.word	0x20000019
 8006c50:	200002f8 	.word	0x200002f8
 8006c54:	0800a650 	.word	0x0800a650
 8006c58:	2000001c 	.word	0x2000001c
 8006c5c:	20000375 	.word	0x20000375

08006c60 <comm_received>:
	 }
	 SPSGRF_StartTx((uint8_t *)temp,(size*3));
	}
}

void comm_received(uint8_t *data){
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b09c      	sub	sp, #112	; 0x70
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	union convert f;
	uint16_t tempvalue;
	uint8_t dataframe[20];
	uint8_t enc_data[20];

	if(data[1] == DATAPKT){
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	f040 8090 	bne.w	8006d94 <comm_received+0x134>
#ifdef COMM_DEBUG
		memset(&tmp, 0, 50);
 8006c74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c78:	2232      	movs	r2, #50	; 0x32
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fcdb 	bl	8007638 <memset>

		sprintf(tmp, "Device id: %d \n\r", data[0]);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c8c:	498e      	ldr	r1, [pc, #568]	; (8006ec8 <comm_received+0x268>)
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 f93a 	bl	8007f08 <siprintf>
		comm_print_debug(tmp);
 8006c94:	4b8d      	ldr	r3, [pc, #564]	; (8006ecc <comm_received+0x26c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fa3c 	bl	800711c <print_debug>
		sprintf(tmp, "send flag: %d \n\r", data[2]);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3302      	adds	r3, #2
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006cb0:	4987      	ldr	r1, [pc, #540]	; (8006ed0 <comm_received+0x270>)
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 f928 	bl	8007f08 <siprintf>
		comm_print_debug(tmp);
 8006cb8:	4b84      	ldr	r3, [pc, #528]	; (8006ecc <comm_received+0x26c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fa2a 	bl	800711c <print_debug>

		memcpy(&f.b, &data[3], 4);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3303      	adds	r3, #3
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	63bb      	str	r3, [r7, #56]	; 0x38
		sprintf(tmp, "temperature: %f\n\r", f.t);
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7f9 fba8 	bl	8000428 <__aeabi_f2d>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8006ce0:	497c      	ldr	r1, [pc, #496]	; (8006ed4 <comm_received+0x274>)
 8006ce2:	f001 f911 	bl	8007f08 <siprintf>
		comm_print_debug(tmp);
 8006ce6:	4b79      	ldr	r3, [pc, #484]	; (8006ecc <comm_received+0x26c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fa13 	bl	800711c <print_debug>

		memcpy(&tempvalue, &data[7],2);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3307      	adds	r3, #7
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	86fb      	strh	r3, [r7, #54]	; 0x36
		sprintf(tmp, "x value: %d\n\r", tempvalue);
 8006d00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d02:	461a      	mov	r2, r3
 8006d04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d08:	4973      	ldr	r1, [pc, #460]	; (8006ed8 <comm_received+0x278>)
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 f8fc 	bl	8007f08 <siprintf>
		comm_print_debug(tmp);
 8006d10:	4b6e      	ldr	r3, [pc, #440]	; (8006ecc <comm_received+0x26c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006d18:	4611      	mov	r1, r2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f9fe 	bl	800711c <print_debug>

		memcpy(&tempvalue, &data[9],2);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3309      	adds	r3, #9
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	86fb      	strh	r3, [r7, #54]	; 0x36
		sprintf(tmp, "y value: %d\n\r", tempvalue);
 8006d2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d32:	496a      	ldr	r1, [pc, #424]	; (8006edc <comm_received+0x27c>)
 8006d34:	4618      	mov	r0, r3
 8006d36:	f001 f8e7 	bl	8007f08 <siprintf>
		comm_print_debug(tmp);
 8006d3a:	4b64      	ldr	r3, [pc, #400]	; (8006ecc <comm_received+0x26c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 f9e9 	bl	800711c <print_debug>

		memcpy(&tempvalue, &data[11],2);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	330b      	adds	r3, #11
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	86fb      	strh	r3, [r7, #54]	; 0x36
		sprintf(tmp, "z value: %d\n\r", tempvalue);
 8006d54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d56:	461a      	mov	r2, r3
 8006d58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d5c:	4960      	ldr	r1, [pc, #384]	; (8006ee0 <comm_received+0x280>)
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 f8d2 	bl	8007f08 <siprintf>
		comm_print_debug(tmp);
 8006d64:	4b59      	ldr	r3, [pc, #356]	; (8006ecc <comm_received+0x26c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 f9d4 	bl	800711c <print_debug>
#endif
		message_send = 1;
 8006d74:	4b5b      	ldr	r3, [pc, #364]	; (8006ee4 <comm_received+0x284>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	701a      	strb	r2, [r3, #0]
		comm_encrypt(data, 13 ,enc_data);
 8006d7a:	f107 030c 	add.w	r3, r7, #12
 8006d7e:	461a      	mov	r2, r3
 8006d80:	210d      	movs	r1, #13
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f8d8 	bl	8006f38 <comm_encrypt>
		comm_send(enc_data);
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 f8b9 	bl	8006f04 <comm_send>
			comm_send(last_message);
		}
	}else{
		//ERR
	}
}
 8006d92:	e094      	b.n	8006ebe <comm_received+0x25e>
	}else if(data[1] == COMMAND){
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3301      	adds	r3, #1
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f040 808f 	bne.w	8006ebe <comm_received+0x25e>
		if(data[2] == SENSORS_CHECK){
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3302      	adds	r3, #2
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d142      	bne.n	8006e30 <comm_received+0x1d0>
			comm_print_debug("a sensor is checking whos in range");
 8006daa:	4b48      	ldr	r3, [pc, #288]	; (8006ecc <comm_received+0x26c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	494e      	ldr	r1, [pc, #312]	; (8006ee8 <comm_received+0x288>)
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 f9b3 	bl	800711c <print_debug>
			nodes.node_in_range++;
 8006db6:	4b4d      	ldr	r3, [pc, #308]	; (8006eec <comm_received+0x28c>)
 8006db8:	789b      	ldrb	r3, [r3, #2]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	4b4b      	ldr	r3, [pc, #300]	; (8006eec <comm_received+0x28c>)
 8006dc0:	709a      	strb	r2, [r3, #2]
			nodes.node[nodes.node_in_range].node_id = data[0];
 8006dc2:	4b4a      	ldr	r3, [pc, #296]	; (8006eec <comm_received+0x28c>)
 8006dc4:	789b      	ldrb	r3, [r3, #2]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	7818      	ldrb	r0, [r3, #0]
 8006dcc:	4a47      	ldr	r2, [pc, #284]	; (8006eec <comm_received+0x28c>)
 8006dce:	460b      	mov	r3, r1
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	440b      	add	r3, r1
 8006dd4:	4413      	add	r3, r2
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4602      	mov	r2, r0
 8006dda:	701a      	strb	r2, [r3, #0]
			nodes.node[nodes.node_in_range].node_gw_connected = data[3];
 8006ddc:	4b43      	ldr	r3, [pc, #268]	; (8006eec <comm_received+0x28c>)
 8006dde:	789b      	ldrb	r3, [r3, #2]
 8006de0:	4619      	mov	r1, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	78d8      	ldrb	r0, [r3, #3]
 8006de6:	4a41      	ldr	r2, [pc, #260]	; (8006eec <comm_received+0x28c>)
 8006de8:	460b      	mov	r3, r1
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	440b      	add	r3, r1
 8006dee:	4413      	add	r3, r2
 8006df0:	3305      	adds	r3, #5
 8006df2:	4602      	mov	r2, r0
 8006df4:	701a      	strb	r2, [r3, #0]
			dataframe[0] = MY_ADDRESS_CFG;
 8006df6:	23aa      	movs	r3, #170	; 0xaa
 8006df8:	f887 3020 	strb.w	r3, [r7, #32]
			dataframe[1] = COMMAND;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			dataframe[2] = ACK;
 8006e02:	2302      	movs	r3, #2
 8006e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			dataframe[3] = nodes.gateway_connected;
 8006e08:	4b38      	ldr	r3, [pc, #224]	; (8006eec <comm_received+0x28c>)
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			comm_encrypt(dataframe, 4 ,enc_data);
 8006e10:	f107 020c 	add.w	r2, r7, #12
 8006e14:	f107 0320 	add.w	r3, r7, #32
 8006e18:	2104      	movs	r1, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f88c 	bl	8006f38 <comm_encrypt>
			comm_send(enc_data);
 8006e20:	f107 030c 	add.w	r3, r7, #12
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 f86d 	bl	8006f04 <comm_send>
			if(nodes.gateway_connected == 0 && nodes.node[nodes.node_in_range].node_gw_connected == 1){
 8006e2a:	4b30      	ldr	r3, [pc, #192]	; (8006eec <comm_received+0x28c>)
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b00      	cmp	r3, #0
		if(data[2] == CONV_TO_CONPOINT){
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3302      	adds	r3, #2
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d11b      	bne.n	8006e72 <comm_received+0x212>
			dataframe[0] = MY_ADDRESS_CFG;
 8006e3a:	23aa      	movs	r3, #170	; 0xaa
 8006e3c:	f887 3020 	strb.w	r3, [r7, #32]
			dataframe[1] = COMMAND;
 8006e40:	2300      	movs	r3, #0
 8006e42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			dataframe[2] = ACK;
 8006e46:	2302      	movs	r3, #2
 8006e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			comm_encrypt(dataframe, 3 ,enc_data);
 8006e4c:	f107 020c 	add.w	r2, r7, #12
 8006e50:	f107 0320 	add.w	r3, r7, #32
 8006e54:	2103      	movs	r1, #3
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f86e 	bl	8006f38 <comm_encrypt>
			comm_send(enc_data);
 8006e5c:	f107 030c 	add.w	r3, r7, #12
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f84f 	bl	8006f04 <comm_send>
			comm_print_debug("Sensor asked me to send their messages to the gateway");
 8006e66:	4b19      	ldr	r3, [pc, #100]	; (8006ecc <comm_received+0x26c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4921      	ldr	r1, [pc, #132]	; (8006ef0 <comm_received+0x290>)
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 f955 	bl	800711c <print_debug>
		if(data[2] == ACK){
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3302      	adds	r3, #2
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d108      	bne.n	8006e8e <comm_received+0x22e>
			gateway_received = 1;
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ef4 <comm_received+0x294>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	701a      	strb	r2, [r3, #0]
			comm_print_debug("got ack from gateway");
 8006e82:	4b12      	ldr	r3, [pc, #72]	; (8006ecc <comm_received+0x26c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	491c      	ldr	r1, [pc, #112]	; (8006ef8 <comm_received+0x298>)
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 f947 	bl	800711c <print_debug>
		if(message_send == 1 && gateway_received == 0){
 8006e8e:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <comm_received+0x284>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d113      	bne.n	8006ebe <comm_received+0x25e>
 8006e96:	4b17      	ldr	r3, [pc, #92]	; (8006ef4 <comm_received+0x294>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10f      	bne.n	8006ebe <comm_received+0x25e>
			message_send = 0;
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <comm_received+0x284>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 8006ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ea8:	f7fd fae4 	bl	8004474 <HAL_Delay>
			comm_print_debug("message didn't arrive");
 8006eac:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <comm_received+0x26c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4912      	ldr	r1, [pc, #72]	; (8006efc <comm_received+0x29c>)
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 f932 	bl	800711c <print_debug>
			comm_send(last_message);
 8006eb8:	4811      	ldr	r0, [pc, #68]	; (8006f00 <comm_received+0x2a0>)
 8006eba:	f000 f823 	bl	8006f04 <comm_send>
}
 8006ebe:	bf00      	nop
 8006ec0:	3770      	adds	r7, #112	; 0x70
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	0800a658 	.word	0x0800a658
 8006ecc:	2000001c 	.word	0x2000001c
 8006ed0:	0800a66c 	.word	0x0800a66c
 8006ed4:	0800a680 	.word	0x0800a680
 8006ed8:	0800a694 	.word	0x0800a694
 8006edc:	0800a6a4 	.word	0x0800a6a4
 8006ee0:	0800a6b4 	.word	0x0800a6b4
 8006ee4:	20000375 	.word	0x20000375
 8006ee8:	0800a6c4 	.word	0x0800a6c4
 8006eec:	2000030c 	.word	0x2000030c
 8006ef0:	0800a6e8 	.word	0x0800a6e8
 8006ef4:	20000374 	.word	0x20000374
 8006ef8:	0800a720 	.word	0x0800a720
 8006efc:	0800a738 	.word	0x0800a738
 8006f00:	2000032c 	.word	0x2000032c

08006f04 <comm_send>:

void comm_send(uint8_t * data){
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	SpiritPktBasicSetDestinationAddress(nodes.destination_node);
 8006f0c:	4b08      	ldr	r3, [pc, #32]	; (8006f30 <comm_send+0x2c>)
 8006f0e:	78db      	ldrb	r3, [r3, #3]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fb fdd3 	bl	8002abc <SpiritPktCommonSetDestinationAddress>
	SPSGRF_StartTx(data,16);
 8006f16:	2110      	movs	r1, #16
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fb15 	bl	8007548 <SPSGRF_StartTx>
	memcpy(last_message, data , 16);
 8006f1e:	2210      	movs	r2, #16
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4804      	ldr	r0, [pc, #16]	; (8006f34 <comm_send+0x30>)
 8006f24:	f000 fb7a 	bl	800761c <memcpy>
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	2000030c 	.word	0x2000030c
 8006f34:	2000032c 	.word	0x2000032c

08006f38 <comm_encrypt>:

void comm_encrypt(uint8_t *data, uint8_t len ,uint8_t *enc_data){
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b0ac      	sub	sp, #176	; 0xb0
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	460b      	mov	r3, r1
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	72fb      	strb	r3, [r7, #11]
	uint8_t blocks = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	uint8_t cur_block =0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	uint8_t rest = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	uint8_t encryption[150];
	uint8_t *ptr = encryption;
 8006f58:	f107 0310 	add.w	r3, r7, #16
 8006f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if(len > 16){
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	2b10      	cmp	r3, #16
 8006f64:	d94f      	bls.n	8007006 <comm_encrypt+0xce>
		blocks = len/16;
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	091b      	lsrs	r3, r3, #4
 8006f6a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		while(1){
			SpiritAesWriteDataIn(data , 16);
 8006f6e:	2110      	movs	r1, #16
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f7fa fe79 	bl	8001c68 <SpiritAesWriteDataIn>
			SpiritAesExecuteEncryption();
 8006f76:	f7fa ff23 	bl	8001dc0 <SpiritAesExecuteEncryption>
			while(!irqStatus.IRQ_AES_END);
 8006f7a:	bf00      	nop
 8006f7c:	4b2f      	ldr	r3, [pc, #188]	; (800703c <comm_encrypt+0x104>)
 8006f7e:	78db      	ldrb	r3, [r3, #3]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f8      	beq.n	8006f7c <comm_encrypt+0x44>
			SpiritAesReadDataOut(ptr , 16);
 8006f8a:	2110      	movs	r1, #16
 8006f8c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006f90:	f7fa feac 	bl	8001cec <SpiritAesReadDataOut>
			ptr = ptr +16;
 8006f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f98:	3310      	adds	r3, #16
 8006f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			cur_block++;
 8006f9e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			if(cur_block > blocks){
 8006fa8:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8006fac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d9dc      	bls.n	8006f6e <comm_encrypt+0x36>
				rest = len%16;
 8006fb4:	7afb      	ldrb	r3, [r7, #11]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
				if(rest){
 8006fbe:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d034      	beq.n	8007030 <comm_encrypt+0xf8>
					SpiritAesWriteDataIn(data , rest);
 8006fc6:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8006fca:	4619      	mov	r1, r3
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7fa fe4b 	bl	8001c68 <SpiritAesWriteDataIn>
					SpiritAesExecuteEncryption();
 8006fd2:	f7fa fef5 	bl	8001dc0 <SpiritAesExecuteEncryption>
					while(!irqStatus.IRQ_AES_END);
 8006fd6:	bf00      	nop
 8006fd8:	4b18      	ldr	r3, [pc, #96]	; (800703c <comm_encrypt+0x104>)
 8006fda:	78db      	ldrb	r3, [r3, #3]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0f8      	beq.n	8006fd8 <comm_encrypt+0xa0>
					SpiritAesReadDataOut(ptr , 16);
 8006fe6:	2110      	movs	r1, #16
 8006fe8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006fec:	f7fa fe7e 	bl	8001cec <SpiritAesReadDataOut>
					ptr = ptr +16;
 8006ff0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ff4:	3310      	adds	r3, #16
 8006ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					blocks++;
 8006ffa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006ffe:	3301      	adds	r3, #1
 8007000:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
				break;
 8007004:	e014      	b.n	8007030 <comm_encrypt+0xf8>
			}
		}
	}else{
		SpiritAesWriteDataIn(data , len);
 8007006:	7afb      	ldrb	r3, [r7, #11]
 8007008:	4619      	mov	r1, r3
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f7fa fe2c 	bl	8001c68 <SpiritAesWriteDataIn>
		SpiritAesExecuteEncryption();
 8007010:	f7fa fed6 	bl	8001dc0 <SpiritAesExecuteEncryption>
		while(!irqStatus.IRQ_AES_END);
 8007014:	bf00      	nop
 8007016:	4b09      	ldr	r3, [pc, #36]	; (800703c <comm_encrypt+0x104>)
 8007018:	78db      	ldrb	r3, [r3, #3]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0f8      	beq.n	8007016 <comm_encrypt+0xde>
		SpiritAesReadDataOut(ptr , 16);
 8007024:	2110      	movs	r1, #16
 8007026:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800702a:	f7fa fe5f 	bl	8001cec <SpiritAesReadDataOut>
	}

}
 800702e:	e000      	b.n	8007032 <comm_encrypt+0xfa>
				break;
 8007030:	bf00      	nop
}
 8007032:	bf00      	nop
 8007034:	37b0      	adds	r7, #176	; 0xb0
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20000328 	.word	0x20000328

08007040 <comm_decrypt>:

void comm_decrypt(uint8_t *data){
 8007040:	b580      	push	{r7, lr}
 8007042:	b0a2      	sub	sp, #136	; 0x88
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
	uint8_t rxdata[20];
	SPSGRF_GetRxData(rxdata);
 8007048:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800704c:	4618      	mov	r0, r3
 800704e:	f000 faa8 	bl	80075a2 <SPSGRF_GetRxData>
	char temp[50];
	char str[50];

	SpiritAesWriteDataIn(rxdata, 16);
 8007052:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007056:	2110      	movs	r1, #16
 8007058:	4618      	mov	r0, r3
 800705a:	f7fa fe05 	bl	8001c68 <SpiritAesWriteDataIn>
	SpiritAesDeriveDecKeyExecuteDec();
 800705e:	f7fa fec1 	bl	8001de4 <SpiritAesDeriveDecKeyExecuteDec>
	while(!irqStatus.IRQ_AES_END);
 8007062:	bf00      	nop
 8007064:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <comm_decrypt+0xb4>)
 8007066:	78db      	ldrb	r3, [r3, #3]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f8      	beq.n	8007064 <comm_decrypt+0x24>

	SpiritAesReadDataOut(data , 13);
 8007072:	210d      	movs	r1, #13
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fa fe39 	bl	8001cec <SpiritAesReadDataOut>
	#ifdef DEBUG_ENCRYPTION
	memset(temp,0, 50);
 800707a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800707e:	2232      	movs	r2, #50	; 0x32
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fad8 	bl	8007638 <memset>
	strcpy(temp, "data:");
 8007088:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800708c:	4a1a      	ldr	r2, [pc, #104]	; (80070f8 <comm_decrypt+0xb8>)
 800708e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007092:	6018      	str	r0, [r3, #0]
 8007094:	3304      	adds	r3, #4
 8007096:	8019      	strh	r1, [r3, #0]
	for(int i = 0; i<12; i++){
 8007098:	2300      	movs	r3, #0
 800709a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800709e:	e018      	b.n	80070d2 <comm_decrypt+0x92>
		sprintf(str,"%X", data[i]);
 80070a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	4413      	add	r3, r2
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f107 0308 	add.w	r3, r7, #8
 80070b0:	4912      	ldr	r1, [pc, #72]	; (80070fc <comm_decrypt+0xbc>)
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 ff28 	bl	8007f08 <siprintf>
		strcat(temp,str);
 80070b8:	f107 0208 	add.w	r2, r7, #8
 80070bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 ff40 	bl	8007f48 <strcat>
	for(int i = 0; i<12; i++){
 80070c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070cc:	3301      	adds	r3, #1
 80070ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070d6:	2b0b      	cmp	r3, #11
 80070d8:	dde2      	ble.n	80070a0 <comm_decrypt+0x60>
	}
	comm_print_debug(temp);
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <comm_decrypt+0xc0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 f819 	bl	800711c <print_debug>
	#endif
}
 80070ea:	bf00      	nop
 80070ec:	3788      	adds	r7, #136	; 0x88
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000328 	.word	0x20000328
 80070f8:	0800a750 	.word	0x0800a750
 80070fc:	0800a758 	.word	0x0800a758
 8007100:	2000001c 	.word	0x2000001c

08007104 <comm_start>:

void comm_start(){
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
	SPSGRF_Init();
 8007108:	f000 f8ee 	bl	80072e8 <SPSGRF_Init>
	SpiritAesWriteKey(c.key);
 800710c:	4802      	ldr	r0, [pc, #8]	; (8007118 <comm_start+0x14>)
 800710e:	f7fa fe29 	bl	8001d64 <SpiritAesWriteKey>
	//mesh_init();
}
 8007112:	bf00      	nop
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	200002f9 	.word	0x200002f9

0800711c <print_debug>:

char debug_level = DBL_DEFAULT;

#ifdef ENABLE_DEBUG

void print_debug(const char *module, const char *text){
 800711c:	b580      	push	{r7, lr}
 800711e:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8007122:	af00      	add	r7, sp, #0
 8007124:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8007128:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800712c:	6018      	str	r0, [r3, #0]
 800712e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8007132:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8007136:	6019      	str	r1, [r3, #0]
	char tmp_debug[1000]="";
 8007138:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800713c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	3304      	adds	r3, #4
 8007146:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800714a:	2100      	movs	r1, #0
 800714c:	4618      	mov	r0, r3
 800714e:	f000 fa73 	bl	8007638 <memset>
	strcat(tmp_debug, module);
 8007152:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8007156:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800715a:	f107 0208 	add.w	r2, r7, #8
 800715e:	6819      	ldr	r1, [r3, #0]
 8007160:	4610      	mov	r0, r2
 8007162:	f000 fef1 	bl	8007f48 <strcat>
	strcat(tmp_debug,":\t");
 8007166:	f107 0308 	add.w	r3, r7, #8
 800716a:	4618      	mov	r0, r3
 800716c:	f7f8 fff0 	bl	8000150 <strlen>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	f107 0308 	add.w	r3, r7, #8
 8007178:	4413      	add	r3, r2
 800717a:	4a19      	ldr	r2, [pc, #100]	; (80071e0 <print_debug+0xc4>)
 800717c:	8811      	ldrh	r1, [r2, #0]
 800717e:	7892      	ldrb	r2, [r2, #2]
 8007180:	8019      	strh	r1, [r3, #0]
 8007182:	709a      	strb	r2, [r3, #2]
	strcat(tmp_debug,text);
 8007184:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8007188:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800718c:	f107 0208 	add.w	r2, r7, #8
 8007190:	6819      	ldr	r1, [r3, #0]
 8007192:	4610      	mov	r0, r2
 8007194:	f000 fed8 	bl	8007f48 <strcat>
	strcat(tmp_debug,"\r\n");
 8007198:	f107 0308 	add.w	r3, r7, #8
 800719c:	4618      	mov	r0, r3
 800719e:	f7f8 ffd7 	bl	8000150 <strlen>
 80071a2:	4603      	mov	r3, r0
 80071a4:	461a      	mov	r2, r3
 80071a6:	f107 0308 	add.w	r3, r7, #8
 80071aa:	4413      	add	r3, r2
 80071ac:	4a0d      	ldr	r2, [pc, #52]	; (80071e4 <print_debug+0xc8>)
 80071ae:	8811      	ldrh	r1, [r2, #0]
 80071b0:	7892      	ldrb	r2, [r2, #2]
 80071b2:	8019      	strh	r1, [r3, #0]
 80071b4:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*) tmp_debug, strlen(tmp_debug), 100);
 80071b6:	f107 0308 	add.w	r3, r7, #8
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7f8 ffc8 	bl	8000150 <strlen>
 80071c0:	4603      	mov	r3, r0
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f107 0108 	add.w	r1, r7, #8
 80071c8:	2364      	movs	r3, #100	; 0x64
 80071ca:	4807      	ldr	r0, [pc, #28]	; (80071e8 <print_debug+0xcc>)
 80071cc:	f7ff f9f7 	bl	80065be <HAL_UART_Transmit>
	HAL_Delay(100);
 80071d0:	2064      	movs	r0, #100	; 0x64
 80071d2:	f7fd f94f 	bl	8004474 <HAL_Delay>
}
 80071d6:	bf00      	nop
 80071d8:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	0800a75c 	.word	0x0800a75c
 80071e4:	0800a760 	.word	0x0800a760
 80071e8:	200002b0 	.word	0x200002b0

080071ec <printf_debug>:

void printf_debug(const char *module, const char *text, ...){
 80071ec:	b40e      	push	{r1, r2, r3}
 80071ee:	b580      	push	{r7, lr}
 80071f0:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80071fa:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80071fe:	6018      	str	r0, [r3, #0]
	char tmp_debug[1000]="";
 8007200:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8007204:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	3304      	adds	r3, #4
 800720e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007212:	2100      	movs	r1, #0
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fa0f 	bl	8007638 <memset>
	strcat(tmp_debug, module);
 800721a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800721e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8007222:	f107 020c 	add.w	r2, r7, #12
 8007226:	6819      	ldr	r1, [r3, #0]
 8007228:	4610      	mov	r0, r2
 800722a:	f000 fe8d 	bl	8007f48 <strcat>
	strcat(tmp_debug,":\t");
 800722e:	f107 030c 	add.w	r3, r7, #12
 8007232:	4618      	mov	r0, r3
 8007234:	f7f8 ff8c 	bl	8000150 <strlen>
 8007238:	4603      	mov	r3, r0
 800723a:	461a      	mov	r2, r3
 800723c:	f107 030c 	add.w	r3, r7, #12
 8007240:	4413      	add	r3, r2
 8007242:	4a26      	ldr	r2, [pc, #152]	; (80072dc <printf_debug+0xf0>)
 8007244:	8811      	ldrh	r1, [r2, #0]
 8007246:	7892      	ldrb	r2, [r2, #2]
 8007248:	8019      	strh	r1, [r3, #0]
 800724a:	709a      	strb	r2, [r3, #2]
	size_t len = strlen(tmp_debug);
 800724c:	f107 030c 	add.w	r3, r7, #12
 8007250:	4618      	mov	r0, r3
 8007252:	f7f8 ff7d 	bl	8000150 <strlen>
 8007256:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
	va_list arglist;
	va_start(arglist, text);
 800725a:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800725e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8007262:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8007266:	601a      	str	r2, [r3, #0]
	vsnprintf(tmp_debug + len, 1000 - len, text, arglist);
 8007268:	f107 020c 	add.w	r2, r7, #12
 800726c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8007270:	18d0      	adds	r0, r2, r3
 8007272:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8007276:	f5c3 717a 	rsb	r1, r3, #1000	; 0x3e8
 800727a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800727e:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8007288:	f000 fe98 	bl	8007fbc <vsniprintf>
	va_end(arglist);
	strcat(tmp_debug,"\r\n");
 800728c:	f107 030c 	add.w	r3, r7, #12
 8007290:	4618      	mov	r0, r3
 8007292:	f7f8 ff5d 	bl	8000150 <strlen>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	f107 030c 	add.w	r3, r7, #12
 800729e:	4413      	add	r3, r2
 80072a0:	4a0f      	ldr	r2, [pc, #60]	; (80072e0 <printf_debug+0xf4>)
 80072a2:	8811      	ldrh	r1, [r2, #0]
 80072a4:	7892      	ldrb	r2, [r2, #2]
 80072a6:	8019      	strh	r1, [r3, #0]
 80072a8:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*) tmp_debug, strlen(tmp_debug), 100);
 80072aa:	f107 030c 	add.w	r3, r7, #12
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7f8 ff4e 	bl	8000150 <strlen>
 80072b4:	4603      	mov	r3, r0
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	f107 010c 	add.w	r1, r7, #12
 80072bc:	2364      	movs	r3, #100	; 0x64
 80072be:	4809      	ldr	r0, [pc, #36]	; (80072e4 <printf_debug+0xf8>)
 80072c0:	f7ff f97d 	bl	80065be <HAL_UART_Transmit>
	HAL_Delay(100);
 80072c4:	2064      	movs	r0, #100	; 0x64
 80072c6:	f7fd f8d5 	bl	8004474 <HAL_Delay>
}
 80072ca:	bf00      	nop
 80072cc:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 80072d0:	46bd      	mov	sp, r7
 80072d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072d6:	b003      	add	sp, #12
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	0800a75c 	.word	0x0800a75c
 80072e0:	0800a760 	.word	0x0800a760
 80072e4:	200002b0 	.word	0x200002b0

080072e8 <SPSGRF_Init>:
* @retval None
*/
const char *spsgrfmod = "SPSGRF";
#define spsgrf_print_debug(str) print_debug(spsgrfmod, str)
void SPSGRF_Init(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b0a8      	sub	sp, #160	; 0xa0
 80072ec:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 80072ee:	f7fc fecd 	bl	800408c <RadioSpiInit>

  // restart the radio
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Booting module");
 80072f2:	4b85      	ldr	r3, [pc, #532]	; (8007508 <SPSGRF_Init+0x220>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4985      	ldr	r1, [pc, #532]	; (800750c <SPSGRF_Init+0x224>)
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff ff0f 	bl	800711c <print_debug>
#endif
  SpiritEnterShutdown();
 80072fe:	f7fd f83d 	bl	800437c <RadioEnterShutdown>
  SpiritExitShutdown();
 8007302:	f7fd f847 	bl	8004394 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 8007306:	f7fb f9c3 	bl	8002690 <SpiritManagementWaExtraCurrent>
  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 800730a:	2300      	movs	r3, #0
 800730c:	70fb      	strb	r3, [r7, #3]
 800730e:	e004      	b.n	800731a <SPSGRF_Init+0x32>
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	3301      	adds	r3, #1
 8007316:	b2db      	uxtb	r3, r3
 8007318:	70fb      	strb	r3, [r7, #3]
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2bff      	cmp	r3, #255	; 0xff
 8007320:	d1f6      	bne.n	8007310 <SPSGRF_Init+0x28>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 8007322:	f7fc fe91 	bl	8004048 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8007326:	4b7a      	ldr	r3, [pc, #488]	; (8007510 <SPSGRF_Init+0x228>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b03      	cmp	r3, #3
 8007332:	d1ea      	bne.n	800730a <SPSGRF_Init+0x22>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Initialize radio RF parameters");
 8007334:	4b74      	ldr	r3, [pc, #464]	; (8007508 <SPSGRF_Init+0x220>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4976      	ldr	r1, [pc, #472]	; (8007514 <SPSGRF_Init+0x22c>)
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff feee 	bl	800711c <print_debug>
  char tmp[100];
  sprintf(tmp, "Setting frequency to %f",BASE_FREQUENCY);
 8007340:	1d38      	adds	r0, r7, #4
 8007342:	a36f      	add	r3, pc, #444	; (adr r3, 8007500 <SPSGRF_Init+0x218>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	4973      	ldr	r1, [pc, #460]	; (8007518 <SPSGRF_Init+0x230>)
 800734a:	f000 fddd 	bl	8007f08 <siprintf>
  spsgrf_print_debug(tmp);
 800734e:	4b6e      	ldr	r3, [pc, #440]	; (8007508 <SPSGRF_Init+0x220>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	1d3a      	adds	r2, r7, #4
 8007354:	4611      	mov	r1, r2
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff fee0 	bl	800711c <print_debug>
  sprintf(tmp, "Setting baudrate to %d",DATARATE);
 800735c:	1d3b      	adds	r3, r7, #4
 800735e:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8007362:	496e      	ldr	r1, [pc, #440]	; (800751c <SPSGRF_Init+0x234>)
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fdcf 	bl	8007f08 <siprintf>
    spsgrf_print_debug(tmp);
 800736a:	4b67      	ldr	r3, [pc, #412]	; (8007508 <SPSGRF_Init+0x220>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	1d3a      	adds	r2, r7, #4
 8007370:	4611      	mov	r1, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fed2 	bl	800711c <print_debug>
#endif
  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8007378:	2300      	movs	r3, #0
 800737a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 800737e:	4b68      	ldr	r3, [pc, #416]	; (8007520 <SPSGRF_Init+0x238>)
 8007380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8007384:	4b67      	ldr	r3, [pc, #412]	; (8007524 <SPSGRF_Init+0x23c>)
 8007386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 800738a:	2300      	movs	r3, #0
 800738c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 8007390:	2300      	movs	r3, #0
 8007392:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  xRadioInit.lDatarate = DATARATE;
 8007396:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800739a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 800739e:	f644 6320 	movw	r3, #20000	; 0x4e20
 80073a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  xRadioInit.lBandwidth = BANDWIDTH;
 80073a6:	4b5f      	ldr	r3, [pc, #380]	; (8007524 <SPSGRF_Init+0x23c>)
 80073a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 80073ac:	485e      	ldr	r0, [pc, #376]	; (8007528 <SPSGRF_Init+0x240>)
 80073ae:	f7fc fddb 	bl	8003f68 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 80073b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fb fc26 	bl	8002c08 <SpiritRadioInit>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Setting power level");
 80073bc:	4b52      	ldr	r3, [pc, #328]	; (8007508 <SPSGRF_Init+0x220>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	495a      	ldr	r1, [pc, #360]	; (800752c <SPSGRF_Init+0x244>)
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff feaa 	bl	800711c <print_debug>
#endif
  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 80073c8:	4959      	ldr	r1, [pc, #356]	; (8007530 <SPSGRF_Init+0x248>)
 80073ca:	2007      	movs	r0, #7
 80073cc:	f7fc fc6c 	bl	8003ca8 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 80073d0:	2007      	movs	r0, #7
 80073d2:	f7fc fcbd 	bl	8003d50 <SpiritRadioSetPALevelMaxIndex>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configure packet handler to use the Basic packet format");
 80073d6:	4b4c      	ldr	r3, [pc, #304]	; (8007508 <SPSGRF_Init+0x220>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4956      	ldr	r1, [pc, #344]	; (8007534 <SPSGRF_Init+0x24c>)
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fe9d 	bl	800711c <print_debug>
#endif
  // Configure packet handler to use the Basic packet format
  xBasicInit.xPreambleLength = PREAMBLE_LENGTH;
 80073e2:	2318      	movs	r3, #24
 80073e4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  xBasicInit.xSyncLength = SYNC_LENGTH;
 80073e8:	2306      	movs	r3, #6
 80073ea:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
  xBasicInit.lSyncWords = SYNC_WORD;
 80073ee:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 80073f2:	67bb      	str	r3, [r7, #120]	; 0x78
  xBasicInit.xFixVarLength = LENGTH_TYPE;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  xBasicInit.cPktLengthWidth = LENGTH_WIDTH;
 80073fa:	2307      	movs	r3, #7
 80073fc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  xBasicInit.xCrcMode = CRC_MODE;
 8007400:	2320      	movs	r3, #32
 8007402:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  xBasicInit.xControlLength = CONTROL_LENGTH;
 8007406:	2300      	movs	r3, #0
 8007408:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  xBasicInit.xAddressField = EN_ADDRESS;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  xBasicInit.xFec = EN_FEC;
 8007412:	2300      	movs	r3, #0
 8007414:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  xBasicInit.xDataWhitening = EN_WHITENING;
 8007418:	2301      	movs	r3, #1
 800741a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  SpiritPktBasicInit(&xBasicInit);
 800741e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007422:	4618      	mov	r0, r3
 8007424:	f7fb f95a 	bl	80026dc <SpiritPktBasicInit>
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configuring automatic packet filtering");
 8007428:	4b37      	ldr	r3, [pc, #220]	; (8007508 <SPSGRF_Init+0x220>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4942      	ldr	r1, [pc, #264]	; (8007538 <SPSGRF_Init+0x250>)
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff fe74 	bl	800711c <print_debug>
#endif
  // Configure destination address criteria for automatic packet filtering
  xBasicAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  xBasicAddress.cMyAddress = MY_ADDRESS;
 800743a:	23aa      	movs	r3, #170	; 0xaa
 800743c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  xBasicAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  xBasicAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8007446:	23ee      	movs	r3, #238	; 0xee
 8007448:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  xBasicAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  xBasicAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8007452:	23ff      	movs	r3, #255	; 0xff
 8007454:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  SpiritPktBasicAddressesInit(&xBasicAddress);
 8007458:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800745c:	4618      	mov	r0, r3
 800745e:	f7fb fa13 	bl	8002888 <SpiritPktBasicAddressesInit>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Configuring interrupt pin");
 8007462:	4b29      	ldr	r3, [pc, #164]	; (8007508 <SPSGRF_Init+0x220>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4935      	ldr	r1, [pc, #212]	; (800753c <SPSGRF_Init+0x254>)
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff fe57 	bl	800711c <print_debug>
#endif
  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 800746e:	2302      	movs	r3, #2
 8007470:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8007474:	2302      	movs	r3, #2
 8007476:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 800747a:	2300      	movs	r3, #0
 800747c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  SpiritGpioInit(&xGpioInit);
 8007480:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007484:	4618      	mov	r0, r3
 8007486:	f7fa fdbd 	bl	8002004 <SpiritGpioInit>

#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Enable interrupt types");
 800748a:	4b1f      	ldr	r3, [pc, #124]	; (8007508 <SPSGRF_Init+0x220>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	492c      	ldr	r1, [pc, #176]	; (8007540 <SPSGRF_Init+0x258>)
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff fe43 	bl	800711c <print_debug>
#endif
  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 8007496:	2000      	movs	r0, #0
 8007498:	f7fa fdd8 	bl	800204c <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 800749c:	2101      	movs	r1, #1
 800749e:	2004      	movs	r0, #4
 80074a0:	f7fa fe00 	bl	80020a4 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 80074a4:	2101      	movs	r1, #1
 80074a6:	2001      	movs	r0, #1
 80074a8:	f7fa fdfc 	bl	80020a4 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 80074ac:	2101      	movs	r1, #1
 80074ae:	2002      	movs	r0, #2
 80074b0:	f7fa fdf8 	bl	80020a4 <SpiritIrq>
  SpiritIrq(AES_END, S_ENABLE);
 80074b4:	2101      	movs	r1, #1
 80074b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80074ba:	f7fa fdf3 	bl	80020a4 <SpiritIrq>
  SpiritIrqClearStatus();
 80074be:	f7fa fe89 	bl	80021d4 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80074c2:	2000      	movs	r0, #0
 80074c4:	f7fb fb4c 	bl	8002b60 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80074c8:	2001      	movs	r0, #1
 80074ca:	f7fb fb11 	bl	8002af0 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80074ce:	f06f 0077 	mvn.w	r0, #119	; 0x77
 80074d2:	f7fb fb79 	bl	8002bc8 <SpiritQiSetRssiThresholddBm>

  SpiritAesMode(S_ENABLE);
 80074d6:	2001      	movs	r0, #1
 80074d8:	f7fa fb8c 	bl	8001bf4 <SpiritAesMode>
  spsgrf_print_debug("Set RX timeout to 2000");
#endif
  SpiritTimerSetRxTimeoutMs(2000.0);
#else
#ifdef SPSGRF_DEBUG
  spsgrf_print_debug("Set RX timeout to infinite");
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <SPSGRF_Init+0x220>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4918      	ldr	r1, [pc, #96]	; (8007544 <SPSGRF_Init+0x25c>)
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fe1a 	bl	800711c <print_debug>
#endif
  SET_INFINITE_RX_TIMEOUT();
 80074e8:	2000      	movs	r0, #0
 80074ea:	f7fc fd4b 	bl	8003f84 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 80074ee:	2002      	movs	r0, #2
 80074f0:	f7fc fd62 	bl	8003fb8 <SpiritTimerSetRxTimeoutStopCondition>
}
 80074f4:	bf00      	nop
 80074f6:	37a0      	adds	r7, #160	; 0xa0
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	f3af 8000 	nop.w
 8007500:	80000000 	.word	0x80000000
 8007504:	41c9de50 	.word	0x41c9de50
 8007508:	20000020 	.word	0x20000020
 800750c:	0800a76c 	.word	0x0800a76c
 8007510:	2000036c 	.word	0x2000036c
 8007514:	0800a77c 	.word	0x0800a77c
 8007518:	0800a79c 	.word	0x0800a79c
 800751c:	0800a7b4 	.word	0x0800a7b4
 8007520:	33bca100 	.word	0x33bca100
 8007524:	000186a0 	.word	0x000186a0
 8007528:	02faf080 	.word	0x02faf080
 800752c:	0800a7cc 	.word	0x0800a7cc
 8007530:	4139999a 	.word	0x4139999a
 8007534:	0800a7e0 	.word	0x0800a7e0
 8007538:	0800a818 	.word	0x0800a818
 800753c:	0800a840 	.word	0x0800a840
 8007540:	0800a85c 	.word	0x0800a85c
 8007544:	0800a874 	.word	0x0800a874

08007548 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 8007554:	2072      	movs	r0, #114	; 0x72
 8007556:	f7fa fd3d 	bl	8001fd4 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 800755a:	78fb      	ldrb	r3, [r7, #3]
 800755c:	2b60      	cmp	r3, #96	; 0x60
 800755e:	bf28      	it	cs
 8007560:	2360      	movcs	r3, #96	; 0x60
 8007562:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	4618      	mov	r0, r3
 800756a:	f7fc fe77 	bl	800425c <RadioSpiWriteFifo>
  SpiritPktBasicSetPayloadLength(txLen);
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	b29b      	uxth	r3, r3
 8007572:	4618      	mov	r0, r3
 8007574:	f7fb fa16 	bl	80029a4 <SpiritPktBasicSetPayloadLength>
  SpiritCmdStrobeSabort();
 8007578:	2067      	movs	r0, #103	; 0x67
 800757a:	f7fa fd2b 	bl	8001fd4 <SpiritCmdStrobeCommand>
  SpiritCmdStrobeTx();
 800757e:	f7fb f81f 	bl	80025c0 <SpiritManagementWaCmdStrobeTx>
 8007582:	2060      	movs	r0, #96	; 0x60
 8007584:	f7fa fd26 	bl	8001fd4 <SpiritCmdStrobeCommand>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 8007594:	f7fb f84c 	bl	8002630 <SpiritManagementWaCmdStrobeRx>
 8007598:	2061      	movs	r0, #97	; 0x61
 800759a:	f7fa fd1b 	bl	8001fd4 <SpiritCmdStrobeCommand>
}
 800759e:	bf00      	nop
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 80075aa:	f7fa fe2b 	bl	8002204 <SpiritLinearFifoReadNumElementsRxFifo>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fc fe98 	bl	80042ec <RadioSpiReadFifo>

  return len;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <__errno>:
 80075c8:	4b01      	ldr	r3, [pc, #4]	; (80075d0 <__errno+0x8>)
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20000024 	.word	0x20000024

080075d4 <__libc_init_array>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	2600      	movs	r6, #0
 80075d8:	4d0c      	ldr	r5, [pc, #48]	; (800760c <__libc_init_array+0x38>)
 80075da:	4c0d      	ldr	r4, [pc, #52]	; (8007610 <__libc_init_array+0x3c>)
 80075dc:	1b64      	subs	r4, r4, r5
 80075de:	10a4      	asrs	r4, r4, #2
 80075e0:	42a6      	cmp	r6, r4
 80075e2:	d109      	bne.n	80075f8 <__libc_init_array+0x24>
 80075e4:	f002 ff8a 	bl	800a4fc <_init>
 80075e8:	2600      	movs	r6, #0
 80075ea:	4d0a      	ldr	r5, [pc, #40]	; (8007614 <__libc_init_array+0x40>)
 80075ec:	4c0a      	ldr	r4, [pc, #40]	; (8007618 <__libc_init_array+0x44>)
 80075ee:	1b64      	subs	r4, r4, r5
 80075f0:	10a4      	asrs	r4, r4, #2
 80075f2:	42a6      	cmp	r6, r4
 80075f4:	d105      	bne.n	8007602 <__libc_init_array+0x2e>
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fc:	4798      	blx	r3
 80075fe:	3601      	adds	r6, #1
 8007600:	e7ee      	b.n	80075e0 <__libc_init_array+0xc>
 8007602:	f855 3b04 	ldr.w	r3, [r5], #4
 8007606:	4798      	blx	r3
 8007608:	3601      	adds	r6, #1
 800760a:	e7f2      	b.n	80075f2 <__libc_init_array+0x1e>
 800760c:	0800addc 	.word	0x0800addc
 8007610:	0800addc 	.word	0x0800addc
 8007614:	0800addc 	.word	0x0800addc
 8007618:	0800ade0 	.word	0x0800ade0

0800761c <memcpy>:
 800761c:	440a      	add	r2, r1
 800761e:	4291      	cmp	r1, r2
 8007620:	f100 33ff 	add.w	r3, r0, #4294967295
 8007624:	d100      	bne.n	8007628 <memcpy+0xc>
 8007626:	4770      	bx	lr
 8007628:	b510      	push	{r4, lr}
 800762a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800762e:	4291      	cmp	r1, r2
 8007630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007634:	d1f9      	bne.n	800762a <memcpy+0xe>
 8007636:	bd10      	pop	{r4, pc}

08007638 <memset>:
 8007638:	4603      	mov	r3, r0
 800763a:	4402      	add	r2, r0
 800763c:	4293      	cmp	r3, r2
 800763e:	d100      	bne.n	8007642 <memset+0xa>
 8007640:	4770      	bx	lr
 8007642:	f803 1b01 	strb.w	r1, [r3], #1
 8007646:	e7f9      	b.n	800763c <memset+0x4>

08007648 <__cvt>:
 8007648:	2b00      	cmp	r3, #0
 800764a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800764e:	461f      	mov	r7, r3
 8007650:	bfbb      	ittet	lt
 8007652:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007656:	461f      	movlt	r7, r3
 8007658:	2300      	movge	r3, #0
 800765a:	232d      	movlt	r3, #45	; 0x2d
 800765c:	b088      	sub	sp, #32
 800765e:	4614      	mov	r4, r2
 8007660:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007662:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007664:	7013      	strb	r3, [r2, #0]
 8007666:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007668:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800766c:	f023 0820 	bic.w	r8, r3, #32
 8007670:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007674:	d005      	beq.n	8007682 <__cvt+0x3a>
 8007676:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800767a:	d100      	bne.n	800767e <__cvt+0x36>
 800767c:	3501      	adds	r5, #1
 800767e:	2302      	movs	r3, #2
 8007680:	e000      	b.n	8007684 <__cvt+0x3c>
 8007682:	2303      	movs	r3, #3
 8007684:	aa07      	add	r2, sp, #28
 8007686:	9204      	str	r2, [sp, #16]
 8007688:	aa06      	add	r2, sp, #24
 800768a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800768e:	e9cd 3500 	strd	r3, r5, [sp]
 8007692:	4622      	mov	r2, r4
 8007694:	463b      	mov	r3, r7
 8007696:	f000 fd2b 	bl	80080f0 <_dtoa_r>
 800769a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800769e:	4606      	mov	r6, r0
 80076a0:	d102      	bne.n	80076a8 <__cvt+0x60>
 80076a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076a4:	07db      	lsls	r3, r3, #31
 80076a6:	d522      	bpl.n	80076ee <__cvt+0xa6>
 80076a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076ac:	eb06 0905 	add.w	r9, r6, r5
 80076b0:	d110      	bne.n	80076d4 <__cvt+0x8c>
 80076b2:	7833      	ldrb	r3, [r6, #0]
 80076b4:	2b30      	cmp	r3, #48	; 0x30
 80076b6:	d10a      	bne.n	80076ce <__cvt+0x86>
 80076b8:	2200      	movs	r2, #0
 80076ba:	2300      	movs	r3, #0
 80076bc:	4620      	mov	r0, r4
 80076be:	4639      	mov	r1, r7
 80076c0:	f7f9 f972 	bl	80009a8 <__aeabi_dcmpeq>
 80076c4:	b918      	cbnz	r0, 80076ce <__cvt+0x86>
 80076c6:	f1c5 0501 	rsb	r5, r5, #1
 80076ca:	f8ca 5000 	str.w	r5, [sl]
 80076ce:	f8da 3000 	ldr.w	r3, [sl]
 80076d2:	4499      	add	r9, r3
 80076d4:	2200      	movs	r2, #0
 80076d6:	2300      	movs	r3, #0
 80076d8:	4620      	mov	r0, r4
 80076da:	4639      	mov	r1, r7
 80076dc:	f7f9 f964 	bl	80009a8 <__aeabi_dcmpeq>
 80076e0:	b108      	cbz	r0, 80076e6 <__cvt+0x9e>
 80076e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80076e6:	2230      	movs	r2, #48	; 0x30
 80076e8:	9b07      	ldr	r3, [sp, #28]
 80076ea:	454b      	cmp	r3, r9
 80076ec:	d307      	bcc.n	80076fe <__cvt+0xb6>
 80076ee:	4630      	mov	r0, r6
 80076f0:	9b07      	ldr	r3, [sp, #28]
 80076f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076f4:	1b9b      	subs	r3, r3, r6
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	b008      	add	sp, #32
 80076fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	9107      	str	r1, [sp, #28]
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e7f0      	b.n	80076e8 <__cvt+0xa0>

08007706 <__exponent>:
 8007706:	4603      	mov	r3, r0
 8007708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800770a:	2900      	cmp	r1, #0
 800770c:	f803 2b02 	strb.w	r2, [r3], #2
 8007710:	bfb6      	itet	lt
 8007712:	222d      	movlt	r2, #45	; 0x2d
 8007714:	222b      	movge	r2, #43	; 0x2b
 8007716:	4249      	neglt	r1, r1
 8007718:	2909      	cmp	r1, #9
 800771a:	7042      	strb	r2, [r0, #1]
 800771c:	dd2b      	ble.n	8007776 <__exponent+0x70>
 800771e:	f10d 0407 	add.w	r4, sp, #7
 8007722:	46a4      	mov	ip, r4
 8007724:	270a      	movs	r7, #10
 8007726:	fb91 f6f7 	sdiv	r6, r1, r7
 800772a:	460a      	mov	r2, r1
 800772c:	46a6      	mov	lr, r4
 800772e:	fb07 1516 	mls	r5, r7, r6, r1
 8007732:	2a63      	cmp	r2, #99	; 0x63
 8007734:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007738:	4631      	mov	r1, r6
 800773a:	f104 34ff 	add.w	r4, r4, #4294967295
 800773e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007742:	dcf0      	bgt.n	8007726 <__exponent+0x20>
 8007744:	3130      	adds	r1, #48	; 0x30
 8007746:	f1ae 0502 	sub.w	r5, lr, #2
 800774a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800774e:	4629      	mov	r1, r5
 8007750:	1c44      	adds	r4, r0, #1
 8007752:	4561      	cmp	r1, ip
 8007754:	d30a      	bcc.n	800776c <__exponent+0x66>
 8007756:	f10d 0209 	add.w	r2, sp, #9
 800775a:	eba2 020e 	sub.w	r2, r2, lr
 800775e:	4565      	cmp	r5, ip
 8007760:	bf88      	it	hi
 8007762:	2200      	movhi	r2, #0
 8007764:	4413      	add	r3, r2
 8007766:	1a18      	subs	r0, r3, r0
 8007768:	b003      	add	sp, #12
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007770:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007774:	e7ed      	b.n	8007752 <__exponent+0x4c>
 8007776:	2330      	movs	r3, #48	; 0x30
 8007778:	3130      	adds	r1, #48	; 0x30
 800777a:	7083      	strb	r3, [r0, #2]
 800777c:	70c1      	strb	r1, [r0, #3]
 800777e:	1d03      	adds	r3, r0, #4
 8007780:	e7f1      	b.n	8007766 <__exponent+0x60>
	...

08007784 <_printf_float>:
 8007784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007788:	b091      	sub	sp, #68	; 0x44
 800778a:	460c      	mov	r4, r1
 800778c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007790:	4616      	mov	r6, r2
 8007792:	461f      	mov	r7, r3
 8007794:	4605      	mov	r5, r0
 8007796:	f001 fa99 	bl	8008ccc <_localeconv_r>
 800779a:	6803      	ldr	r3, [r0, #0]
 800779c:	4618      	mov	r0, r3
 800779e:	9309      	str	r3, [sp, #36]	; 0x24
 80077a0:	f7f8 fcd6 	bl	8000150 <strlen>
 80077a4:	2300      	movs	r3, #0
 80077a6:	930e      	str	r3, [sp, #56]	; 0x38
 80077a8:	f8d8 3000 	ldr.w	r3, [r8]
 80077ac:	900a      	str	r0, [sp, #40]	; 0x28
 80077ae:	3307      	adds	r3, #7
 80077b0:	f023 0307 	bic.w	r3, r3, #7
 80077b4:	f103 0208 	add.w	r2, r3, #8
 80077b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80077bc:	f8d4 b000 	ldr.w	fp, [r4]
 80077c0:	f8c8 2000 	str.w	r2, [r8]
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077cc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80077d0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80077d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80077d6:	f04f 32ff 	mov.w	r2, #4294967295
 80077da:	4640      	mov	r0, r8
 80077dc:	4b9c      	ldr	r3, [pc, #624]	; (8007a50 <_printf_float+0x2cc>)
 80077de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077e0:	f7f9 f914 	bl	8000a0c <__aeabi_dcmpun>
 80077e4:	bb70      	cbnz	r0, 8007844 <_printf_float+0xc0>
 80077e6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ea:	4640      	mov	r0, r8
 80077ec:	4b98      	ldr	r3, [pc, #608]	; (8007a50 <_printf_float+0x2cc>)
 80077ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077f0:	f7f9 f8ee 	bl	80009d0 <__aeabi_dcmple>
 80077f4:	bb30      	cbnz	r0, 8007844 <_printf_float+0xc0>
 80077f6:	2200      	movs	r2, #0
 80077f8:	2300      	movs	r3, #0
 80077fa:	4640      	mov	r0, r8
 80077fc:	4651      	mov	r1, sl
 80077fe:	f7f9 f8dd 	bl	80009bc <__aeabi_dcmplt>
 8007802:	b110      	cbz	r0, 800780a <_printf_float+0x86>
 8007804:	232d      	movs	r3, #45	; 0x2d
 8007806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800780a:	4b92      	ldr	r3, [pc, #584]	; (8007a54 <_printf_float+0x2d0>)
 800780c:	4892      	ldr	r0, [pc, #584]	; (8007a58 <_printf_float+0x2d4>)
 800780e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007812:	bf94      	ite	ls
 8007814:	4698      	movls	r8, r3
 8007816:	4680      	movhi	r8, r0
 8007818:	2303      	movs	r3, #3
 800781a:	f04f 0a00 	mov.w	sl, #0
 800781e:	6123      	str	r3, [r4, #16]
 8007820:	f02b 0304 	bic.w	r3, fp, #4
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	4633      	mov	r3, r6
 8007828:	4621      	mov	r1, r4
 800782a:	4628      	mov	r0, r5
 800782c:	9700      	str	r7, [sp, #0]
 800782e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007830:	f000 f9d4 	bl	8007bdc <_printf_common>
 8007834:	3001      	adds	r0, #1
 8007836:	f040 8090 	bne.w	800795a <_printf_float+0x1d6>
 800783a:	f04f 30ff 	mov.w	r0, #4294967295
 800783e:	b011      	add	sp, #68	; 0x44
 8007840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007844:	4642      	mov	r2, r8
 8007846:	4653      	mov	r3, sl
 8007848:	4640      	mov	r0, r8
 800784a:	4651      	mov	r1, sl
 800784c:	f7f9 f8de 	bl	8000a0c <__aeabi_dcmpun>
 8007850:	b148      	cbz	r0, 8007866 <_printf_float+0xe2>
 8007852:	f1ba 0f00 	cmp.w	sl, #0
 8007856:	bfb8      	it	lt
 8007858:	232d      	movlt	r3, #45	; 0x2d
 800785a:	4880      	ldr	r0, [pc, #512]	; (8007a5c <_printf_float+0x2d8>)
 800785c:	bfb8      	it	lt
 800785e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007862:	4b7f      	ldr	r3, [pc, #508]	; (8007a60 <_printf_float+0x2dc>)
 8007864:	e7d3      	b.n	800780e <_printf_float+0x8a>
 8007866:	6863      	ldr	r3, [r4, #4]
 8007868:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	d142      	bne.n	80078f6 <_printf_float+0x172>
 8007870:	2306      	movs	r3, #6
 8007872:	6063      	str	r3, [r4, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	9206      	str	r2, [sp, #24]
 8007878:	aa0e      	add	r2, sp, #56	; 0x38
 800787a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800787e:	aa0d      	add	r2, sp, #52	; 0x34
 8007880:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007884:	9203      	str	r2, [sp, #12]
 8007886:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800788a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	6863      	ldr	r3, [r4, #4]
 8007892:	4642      	mov	r2, r8
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	4628      	mov	r0, r5
 8007898:	4653      	mov	r3, sl
 800789a:	910b      	str	r1, [sp, #44]	; 0x2c
 800789c:	f7ff fed4 	bl	8007648 <__cvt>
 80078a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078a2:	4680      	mov	r8, r0
 80078a4:	2947      	cmp	r1, #71	; 0x47
 80078a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80078a8:	d108      	bne.n	80078bc <_printf_float+0x138>
 80078aa:	1cc8      	adds	r0, r1, #3
 80078ac:	db02      	blt.n	80078b4 <_printf_float+0x130>
 80078ae:	6863      	ldr	r3, [r4, #4]
 80078b0:	4299      	cmp	r1, r3
 80078b2:	dd40      	ble.n	8007936 <_printf_float+0x1b2>
 80078b4:	f1a9 0902 	sub.w	r9, r9, #2
 80078b8:	fa5f f989 	uxtb.w	r9, r9
 80078bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80078c0:	d81f      	bhi.n	8007902 <_printf_float+0x17e>
 80078c2:	464a      	mov	r2, r9
 80078c4:	3901      	subs	r1, #1
 80078c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078ca:	910d      	str	r1, [sp, #52]	; 0x34
 80078cc:	f7ff ff1b 	bl	8007706 <__exponent>
 80078d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078d2:	4682      	mov	sl, r0
 80078d4:	1813      	adds	r3, r2, r0
 80078d6:	2a01      	cmp	r2, #1
 80078d8:	6123      	str	r3, [r4, #16]
 80078da:	dc02      	bgt.n	80078e2 <_printf_float+0x15e>
 80078dc:	6822      	ldr	r2, [r4, #0]
 80078de:	07d2      	lsls	r2, r2, #31
 80078e0:	d501      	bpl.n	80078e6 <_printf_float+0x162>
 80078e2:	3301      	adds	r3, #1
 80078e4:	6123      	str	r3, [r4, #16]
 80078e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d09b      	beq.n	8007826 <_printf_float+0xa2>
 80078ee:	232d      	movs	r3, #45	; 0x2d
 80078f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f4:	e797      	b.n	8007826 <_printf_float+0xa2>
 80078f6:	2947      	cmp	r1, #71	; 0x47
 80078f8:	d1bc      	bne.n	8007874 <_printf_float+0xf0>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1ba      	bne.n	8007874 <_printf_float+0xf0>
 80078fe:	2301      	movs	r3, #1
 8007900:	e7b7      	b.n	8007872 <_printf_float+0xee>
 8007902:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007906:	d118      	bne.n	800793a <_printf_float+0x1b6>
 8007908:	2900      	cmp	r1, #0
 800790a:	6863      	ldr	r3, [r4, #4]
 800790c:	dd0b      	ble.n	8007926 <_printf_float+0x1a2>
 800790e:	6121      	str	r1, [r4, #16]
 8007910:	b913      	cbnz	r3, 8007918 <_printf_float+0x194>
 8007912:	6822      	ldr	r2, [r4, #0]
 8007914:	07d0      	lsls	r0, r2, #31
 8007916:	d502      	bpl.n	800791e <_printf_float+0x19a>
 8007918:	3301      	adds	r3, #1
 800791a:	440b      	add	r3, r1
 800791c:	6123      	str	r3, [r4, #16]
 800791e:	f04f 0a00 	mov.w	sl, #0
 8007922:	65a1      	str	r1, [r4, #88]	; 0x58
 8007924:	e7df      	b.n	80078e6 <_printf_float+0x162>
 8007926:	b913      	cbnz	r3, 800792e <_printf_float+0x1aa>
 8007928:	6822      	ldr	r2, [r4, #0]
 800792a:	07d2      	lsls	r2, r2, #31
 800792c:	d501      	bpl.n	8007932 <_printf_float+0x1ae>
 800792e:	3302      	adds	r3, #2
 8007930:	e7f4      	b.n	800791c <_printf_float+0x198>
 8007932:	2301      	movs	r3, #1
 8007934:	e7f2      	b.n	800791c <_printf_float+0x198>
 8007936:	f04f 0967 	mov.w	r9, #103	; 0x67
 800793a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800793c:	4299      	cmp	r1, r3
 800793e:	db05      	blt.n	800794c <_printf_float+0x1c8>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	6121      	str	r1, [r4, #16]
 8007944:	07d8      	lsls	r0, r3, #31
 8007946:	d5ea      	bpl.n	800791e <_printf_float+0x19a>
 8007948:	1c4b      	adds	r3, r1, #1
 800794a:	e7e7      	b.n	800791c <_printf_float+0x198>
 800794c:	2900      	cmp	r1, #0
 800794e:	bfcc      	ite	gt
 8007950:	2201      	movgt	r2, #1
 8007952:	f1c1 0202 	rsble	r2, r1, #2
 8007956:	4413      	add	r3, r2
 8007958:	e7e0      	b.n	800791c <_printf_float+0x198>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	055a      	lsls	r2, r3, #21
 800795e:	d407      	bmi.n	8007970 <_printf_float+0x1ec>
 8007960:	6923      	ldr	r3, [r4, #16]
 8007962:	4642      	mov	r2, r8
 8007964:	4631      	mov	r1, r6
 8007966:	4628      	mov	r0, r5
 8007968:	47b8      	blx	r7
 800796a:	3001      	adds	r0, #1
 800796c:	d12b      	bne.n	80079c6 <_printf_float+0x242>
 800796e:	e764      	b.n	800783a <_printf_float+0xb6>
 8007970:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007974:	f240 80dd 	bls.w	8007b32 <_printf_float+0x3ae>
 8007978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800797c:	2200      	movs	r2, #0
 800797e:	2300      	movs	r3, #0
 8007980:	f7f9 f812 	bl	80009a8 <__aeabi_dcmpeq>
 8007984:	2800      	cmp	r0, #0
 8007986:	d033      	beq.n	80079f0 <_printf_float+0x26c>
 8007988:	2301      	movs	r3, #1
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	4a35      	ldr	r2, [pc, #212]	; (8007a64 <_printf_float+0x2e0>)
 8007990:	47b8      	blx	r7
 8007992:	3001      	adds	r0, #1
 8007994:	f43f af51 	beq.w	800783a <_printf_float+0xb6>
 8007998:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800799c:	429a      	cmp	r2, r3
 800799e:	db02      	blt.n	80079a6 <_printf_float+0x222>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	07d8      	lsls	r0, r3, #31
 80079a4:	d50f      	bpl.n	80079c6 <_printf_float+0x242>
 80079a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	f43f af42 	beq.w	800783a <_printf_float+0xb6>
 80079b6:	f04f 0800 	mov.w	r8, #0
 80079ba:	f104 091a 	add.w	r9, r4, #26
 80079be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c0:	3b01      	subs	r3, #1
 80079c2:	4543      	cmp	r3, r8
 80079c4:	dc09      	bgt.n	80079da <_printf_float+0x256>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	079b      	lsls	r3, r3, #30
 80079ca:	f100 8102 	bmi.w	8007bd2 <_printf_float+0x44e>
 80079ce:	68e0      	ldr	r0, [r4, #12]
 80079d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079d2:	4298      	cmp	r0, r3
 80079d4:	bfb8      	it	lt
 80079d6:	4618      	movlt	r0, r3
 80079d8:	e731      	b.n	800783e <_printf_float+0xba>
 80079da:	2301      	movs	r3, #1
 80079dc:	464a      	mov	r2, r9
 80079de:	4631      	mov	r1, r6
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b8      	blx	r7
 80079e4:	3001      	adds	r0, #1
 80079e6:	f43f af28 	beq.w	800783a <_printf_float+0xb6>
 80079ea:	f108 0801 	add.w	r8, r8, #1
 80079ee:	e7e6      	b.n	80079be <_printf_float+0x23a>
 80079f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dc38      	bgt.n	8007a68 <_printf_float+0x2e4>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	4a19      	ldr	r2, [pc, #100]	; (8007a64 <_printf_float+0x2e0>)
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f af1a 	beq.w	800783a <_printf_float+0xb6>
 8007a06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	d102      	bne.n	8007a14 <_printf_float+0x290>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	07d9      	lsls	r1, r3, #31
 8007a12:	d5d8      	bpl.n	80079c6 <_printf_float+0x242>
 8007a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f43f af0b 	beq.w	800783a <_printf_float+0xb6>
 8007a24:	f04f 0900 	mov.w	r9, #0
 8007a28:	f104 0a1a 	add.w	sl, r4, #26
 8007a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2e:	425b      	negs	r3, r3
 8007a30:	454b      	cmp	r3, r9
 8007a32:	dc01      	bgt.n	8007a38 <_printf_float+0x2b4>
 8007a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a36:	e794      	b.n	8007962 <_printf_float+0x1de>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4652      	mov	r2, sl
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4628      	mov	r0, r5
 8007a40:	47b8      	blx	r7
 8007a42:	3001      	adds	r0, #1
 8007a44:	f43f aef9 	beq.w	800783a <_printf_float+0xb6>
 8007a48:	f109 0901 	add.w	r9, r9, #1
 8007a4c:	e7ee      	b.n	8007a2c <_printf_float+0x2a8>
 8007a4e:	bf00      	nop
 8007a50:	7fefffff 	.word	0x7fefffff
 8007a54:	0800aa08 	.word	0x0800aa08
 8007a58:	0800aa0c 	.word	0x0800aa0c
 8007a5c:	0800aa14 	.word	0x0800aa14
 8007a60:	0800aa10 	.word	0x0800aa10
 8007a64:	0800aa18 	.word	0x0800aa18
 8007a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	bfa8      	it	ge
 8007a70:	461a      	movge	r2, r3
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	4691      	mov	r9, r2
 8007a76:	dc37      	bgt.n	8007ae8 <_printf_float+0x364>
 8007a78:	f04f 0b00 	mov.w	fp, #0
 8007a7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a80:	f104 021a 	add.w	r2, r4, #26
 8007a84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007a88:	ebaa 0309 	sub.w	r3, sl, r9
 8007a8c:	455b      	cmp	r3, fp
 8007a8e:	dc33      	bgt.n	8007af8 <_printf_float+0x374>
 8007a90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a94:	429a      	cmp	r2, r3
 8007a96:	db3b      	blt.n	8007b10 <_printf_float+0x38c>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	07da      	lsls	r2, r3, #31
 8007a9c:	d438      	bmi.n	8007b10 <_printf_float+0x38c>
 8007a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aa0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007aa2:	eba3 020a 	sub.w	r2, r3, sl
 8007aa6:	eba3 0901 	sub.w	r9, r3, r1
 8007aaa:	4591      	cmp	r9, r2
 8007aac:	bfa8      	it	ge
 8007aae:	4691      	movge	r9, r2
 8007ab0:	f1b9 0f00 	cmp.w	r9, #0
 8007ab4:	dc34      	bgt.n	8007b20 <_printf_float+0x39c>
 8007ab6:	f04f 0800 	mov.w	r8, #0
 8007aba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007abe:	f104 0a1a 	add.w	sl, r4, #26
 8007ac2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ac6:	1a9b      	subs	r3, r3, r2
 8007ac8:	eba3 0309 	sub.w	r3, r3, r9
 8007acc:	4543      	cmp	r3, r8
 8007ace:	f77f af7a 	ble.w	80079c6 <_printf_float+0x242>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b8      	blx	r7
 8007adc:	3001      	adds	r0, #1
 8007ade:	f43f aeac 	beq.w	800783a <_printf_float+0xb6>
 8007ae2:	f108 0801 	add.w	r8, r8, #1
 8007ae6:	e7ec      	b.n	8007ac2 <_printf_float+0x33e>
 8007ae8:	4613      	mov	r3, r2
 8007aea:	4631      	mov	r1, r6
 8007aec:	4642      	mov	r2, r8
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b8      	blx	r7
 8007af2:	3001      	adds	r0, #1
 8007af4:	d1c0      	bne.n	8007a78 <_printf_float+0x2f4>
 8007af6:	e6a0      	b.n	800783a <_printf_float+0xb6>
 8007af8:	2301      	movs	r3, #1
 8007afa:	4631      	mov	r1, r6
 8007afc:	4628      	mov	r0, r5
 8007afe:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b00:	47b8      	blx	r7
 8007b02:	3001      	adds	r0, #1
 8007b04:	f43f ae99 	beq.w	800783a <_printf_float+0xb6>
 8007b08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b0a:	f10b 0b01 	add.w	fp, fp, #1
 8007b0e:	e7b9      	b.n	8007a84 <_printf_float+0x300>
 8007b10:	4631      	mov	r1, r6
 8007b12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b16:	4628      	mov	r0, r5
 8007b18:	47b8      	blx	r7
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d1bf      	bne.n	8007a9e <_printf_float+0x31a>
 8007b1e:	e68c      	b.n	800783a <_printf_float+0xb6>
 8007b20:	464b      	mov	r3, r9
 8007b22:	4631      	mov	r1, r6
 8007b24:	4628      	mov	r0, r5
 8007b26:	eb08 020a 	add.w	r2, r8, sl
 8007b2a:	47b8      	blx	r7
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d1c2      	bne.n	8007ab6 <_printf_float+0x332>
 8007b30:	e683      	b.n	800783a <_printf_float+0xb6>
 8007b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b34:	2a01      	cmp	r2, #1
 8007b36:	dc01      	bgt.n	8007b3c <_printf_float+0x3b8>
 8007b38:	07db      	lsls	r3, r3, #31
 8007b3a:	d537      	bpl.n	8007bac <_printf_float+0x428>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4642      	mov	r2, r8
 8007b40:	4631      	mov	r1, r6
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f ae77 	beq.w	800783a <_printf_float+0xb6>
 8007b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f ae6f 	beq.w	800783a <_printf_float+0xb6>
 8007b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	f7f8 ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8007b68:	b9d8      	cbnz	r0, 8007ba2 <_printf_float+0x41e>
 8007b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b6c:	f108 0201 	add.w	r2, r8, #1
 8007b70:	3b01      	subs	r3, #1
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d10e      	bne.n	8007b9a <_printf_float+0x416>
 8007b7c:	e65d      	b.n	800783a <_printf_float+0xb6>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	464a      	mov	r2, r9
 8007b82:	4631      	mov	r1, r6
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b8      	blx	r7
 8007b88:	3001      	adds	r0, #1
 8007b8a:	f43f ae56 	beq.w	800783a <_printf_float+0xb6>
 8007b8e:	f108 0801 	add.w	r8, r8, #1
 8007b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b94:	3b01      	subs	r3, #1
 8007b96:	4543      	cmp	r3, r8
 8007b98:	dcf1      	bgt.n	8007b7e <_printf_float+0x3fa>
 8007b9a:	4653      	mov	r3, sl
 8007b9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ba0:	e6e0      	b.n	8007964 <_printf_float+0x1e0>
 8007ba2:	f04f 0800 	mov.w	r8, #0
 8007ba6:	f104 091a 	add.w	r9, r4, #26
 8007baa:	e7f2      	b.n	8007b92 <_printf_float+0x40e>
 8007bac:	2301      	movs	r3, #1
 8007bae:	4642      	mov	r2, r8
 8007bb0:	e7df      	b.n	8007b72 <_printf_float+0x3ee>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	464a      	mov	r2, r9
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f43f ae3c 	beq.w	800783a <_printf_float+0xb6>
 8007bc2:	f108 0801 	add.w	r8, r8, #1
 8007bc6:	68e3      	ldr	r3, [r4, #12]
 8007bc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007bca:	1a5b      	subs	r3, r3, r1
 8007bcc:	4543      	cmp	r3, r8
 8007bce:	dcf0      	bgt.n	8007bb2 <_printf_float+0x42e>
 8007bd0:	e6fd      	b.n	80079ce <_printf_float+0x24a>
 8007bd2:	f04f 0800 	mov.w	r8, #0
 8007bd6:	f104 0919 	add.w	r9, r4, #25
 8007bda:	e7f4      	b.n	8007bc6 <_printf_float+0x442>

08007bdc <_printf_common>:
 8007bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	4616      	mov	r6, r2
 8007be2:	4699      	mov	r9, r3
 8007be4:	688a      	ldr	r2, [r1, #8]
 8007be6:	690b      	ldr	r3, [r1, #16]
 8007be8:	4607      	mov	r7, r0
 8007bea:	4293      	cmp	r3, r2
 8007bec:	bfb8      	it	lt
 8007bee:	4613      	movlt	r3, r2
 8007bf0:	6033      	str	r3, [r6, #0]
 8007bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bfc:	b10a      	cbz	r2, 8007c02 <_printf_common+0x26>
 8007bfe:	3301      	adds	r3, #1
 8007c00:	6033      	str	r3, [r6, #0]
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	0699      	lsls	r1, r3, #26
 8007c06:	bf42      	ittt	mi
 8007c08:	6833      	ldrmi	r3, [r6, #0]
 8007c0a:	3302      	addmi	r3, #2
 8007c0c:	6033      	strmi	r3, [r6, #0]
 8007c0e:	6825      	ldr	r5, [r4, #0]
 8007c10:	f015 0506 	ands.w	r5, r5, #6
 8007c14:	d106      	bne.n	8007c24 <_printf_common+0x48>
 8007c16:	f104 0a19 	add.w	sl, r4, #25
 8007c1a:	68e3      	ldr	r3, [r4, #12]
 8007c1c:	6832      	ldr	r2, [r6, #0]
 8007c1e:	1a9b      	subs	r3, r3, r2
 8007c20:	42ab      	cmp	r3, r5
 8007c22:	dc28      	bgt.n	8007c76 <_printf_common+0x9a>
 8007c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c28:	1e13      	subs	r3, r2, #0
 8007c2a:	6822      	ldr	r2, [r4, #0]
 8007c2c:	bf18      	it	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	0692      	lsls	r2, r2, #26
 8007c32:	d42d      	bmi.n	8007c90 <_printf_common+0xb4>
 8007c34:	4649      	mov	r1, r9
 8007c36:	4638      	mov	r0, r7
 8007c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c3c:	47c0      	blx	r8
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d020      	beq.n	8007c84 <_printf_common+0xa8>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	68e5      	ldr	r5, [r4, #12]
 8007c46:	f003 0306 	and.w	r3, r3, #6
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	bf18      	it	ne
 8007c4e:	2500      	movne	r5, #0
 8007c50:	6832      	ldr	r2, [r6, #0]
 8007c52:	f04f 0600 	mov.w	r6, #0
 8007c56:	68a3      	ldr	r3, [r4, #8]
 8007c58:	bf08      	it	eq
 8007c5a:	1aad      	subeq	r5, r5, r2
 8007c5c:	6922      	ldr	r2, [r4, #16]
 8007c5e:	bf08      	it	eq
 8007c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c64:	4293      	cmp	r3, r2
 8007c66:	bfc4      	itt	gt
 8007c68:	1a9b      	subgt	r3, r3, r2
 8007c6a:	18ed      	addgt	r5, r5, r3
 8007c6c:	341a      	adds	r4, #26
 8007c6e:	42b5      	cmp	r5, r6
 8007c70:	d11a      	bne.n	8007ca8 <_printf_common+0xcc>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e008      	b.n	8007c88 <_printf_common+0xac>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4652      	mov	r2, sl
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	47c0      	blx	r8
 8007c80:	3001      	adds	r0, #1
 8007c82:	d103      	bne.n	8007c8c <_printf_common+0xb0>
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8c:	3501      	adds	r5, #1
 8007c8e:	e7c4      	b.n	8007c1a <_printf_common+0x3e>
 8007c90:	2030      	movs	r0, #48	; 0x30
 8007c92:	18e1      	adds	r1, r4, r3
 8007c94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c9e:	4422      	add	r2, r4
 8007ca0:	3302      	adds	r3, #2
 8007ca2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ca6:	e7c5      	b.n	8007c34 <_printf_common+0x58>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	4622      	mov	r2, r4
 8007cac:	4649      	mov	r1, r9
 8007cae:	4638      	mov	r0, r7
 8007cb0:	47c0      	blx	r8
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	d0e6      	beq.n	8007c84 <_printf_common+0xa8>
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	e7d9      	b.n	8007c6e <_printf_common+0x92>
	...

08007cbc <_printf_i>:
 8007cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc0:	7e0f      	ldrb	r7, [r1, #24]
 8007cc2:	4691      	mov	r9, r2
 8007cc4:	2f78      	cmp	r7, #120	; 0x78
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	460c      	mov	r4, r1
 8007cca:	469a      	mov	sl, r3
 8007ccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cd2:	d807      	bhi.n	8007ce4 <_printf_i+0x28>
 8007cd4:	2f62      	cmp	r7, #98	; 0x62
 8007cd6:	d80a      	bhi.n	8007cee <_printf_i+0x32>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	f000 80d9 	beq.w	8007e90 <_printf_i+0x1d4>
 8007cde:	2f58      	cmp	r7, #88	; 0x58
 8007ce0:	f000 80a4 	beq.w	8007e2c <_printf_i+0x170>
 8007ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cec:	e03a      	b.n	8007d64 <_printf_i+0xa8>
 8007cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cf2:	2b15      	cmp	r3, #21
 8007cf4:	d8f6      	bhi.n	8007ce4 <_printf_i+0x28>
 8007cf6:	a101      	add	r1, pc, #4	; (adr r1, 8007cfc <_printf_i+0x40>)
 8007cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cfc:	08007d55 	.word	0x08007d55
 8007d00:	08007d69 	.word	0x08007d69
 8007d04:	08007ce5 	.word	0x08007ce5
 8007d08:	08007ce5 	.word	0x08007ce5
 8007d0c:	08007ce5 	.word	0x08007ce5
 8007d10:	08007ce5 	.word	0x08007ce5
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007ce5 	.word	0x08007ce5
 8007d1c:	08007ce5 	.word	0x08007ce5
 8007d20:	08007ce5 	.word	0x08007ce5
 8007d24:	08007ce5 	.word	0x08007ce5
 8007d28:	08007e77 	.word	0x08007e77
 8007d2c:	08007d99 	.word	0x08007d99
 8007d30:	08007e59 	.word	0x08007e59
 8007d34:	08007ce5 	.word	0x08007ce5
 8007d38:	08007ce5 	.word	0x08007ce5
 8007d3c:	08007e99 	.word	0x08007e99
 8007d40:	08007ce5 	.word	0x08007ce5
 8007d44:	08007d99 	.word	0x08007d99
 8007d48:	08007ce5 	.word	0x08007ce5
 8007d4c:	08007ce5 	.word	0x08007ce5
 8007d50:	08007e61 	.word	0x08007e61
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	1d1a      	adds	r2, r3, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	602a      	str	r2, [r5, #0]
 8007d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d64:	2301      	movs	r3, #1
 8007d66:	e0a4      	b.n	8007eb2 <_printf_i+0x1f6>
 8007d68:	6820      	ldr	r0, [r4, #0]
 8007d6a:	6829      	ldr	r1, [r5, #0]
 8007d6c:	0606      	lsls	r6, r0, #24
 8007d6e:	f101 0304 	add.w	r3, r1, #4
 8007d72:	d50a      	bpl.n	8007d8a <_printf_i+0xce>
 8007d74:	680e      	ldr	r6, [r1, #0]
 8007d76:	602b      	str	r3, [r5, #0]
 8007d78:	2e00      	cmp	r6, #0
 8007d7a:	da03      	bge.n	8007d84 <_printf_i+0xc8>
 8007d7c:	232d      	movs	r3, #45	; 0x2d
 8007d7e:	4276      	negs	r6, r6
 8007d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d84:	230a      	movs	r3, #10
 8007d86:	485e      	ldr	r0, [pc, #376]	; (8007f00 <_printf_i+0x244>)
 8007d88:	e019      	b.n	8007dbe <_printf_i+0x102>
 8007d8a:	680e      	ldr	r6, [r1, #0]
 8007d8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	bf18      	it	ne
 8007d94:	b236      	sxthne	r6, r6
 8007d96:	e7ef      	b.n	8007d78 <_printf_i+0xbc>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	6820      	ldr	r0, [r4, #0]
 8007d9c:	1d19      	adds	r1, r3, #4
 8007d9e:	6029      	str	r1, [r5, #0]
 8007da0:	0601      	lsls	r1, r0, #24
 8007da2:	d501      	bpl.n	8007da8 <_printf_i+0xec>
 8007da4:	681e      	ldr	r6, [r3, #0]
 8007da6:	e002      	b.n	8007dae <_printf_i+0xf2>
 8007da8:	0646      	lsls	r6, r0, #25
 8007daa:	d5fb      	bpl.n	8007da4 <_printf_i+0xe8>
 8007dac:	881e      	ldrh	r6, [r3, #0]
 8007dae:	2f6f      	cmp	r7, #111	; 0x6f
 8007db0:	bf0c      	ite	eq
 8007db2:	2308      	moveq	r3, #8
 8007db4:	230a      	movne	r3, #10
 8007db6:	4852      	ldr	r0, [pc, #328]	; (8007f00 <_printf_i+0x244>)
 8007db8:	2100      	movs	r1, #0
 8007dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dbe:	6865      	ldr	r5, [r4, #4]
 8007dc0:	2d00      	cmp	r5, #0
 8007dc2:	bfa8      	it	ge
 8007dc4:	6821      	ldrge	r1, [r4, #0]
 8007dc6:	60a5      	str	r5, [r4, #8]
 8007dc8:	bfa4      	itt	ge
 8007dca:	f021 0104 	bicge.w	r1, r1, #4
 8007dce:	6021      	strge	r1, [r4, #0]
 8007dd0:	b90e      	cbnz	r6, 8007dd6 <_printf_i+0x11a>
 8007dd2:	2d00      	cmp	r5, #0
 8007dd4:	d04d      	beq.n	8007e72 <_printf_i+0x1b6>
 8007dd6:	4615      	mov	r5, r2
 8007dd8:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ddc:	fb03 6711 	mls	r7, r3, r1, r6
 8007de0:	5dc7      	ldrb	r7, [r0, r7]
 8007de2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007de6:	4637      	mov	r7, r6
 8007de8:	42bb      	cmp	r3, r7
 8007dea:	460e      	mov	r6, r1
 8007dec:	d9f4      	bls.n	8007dd8 <_printf_i+0x11c>
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d10b      	bne.n	8007e0a <_printf_i+0x14e>
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	07de      	lsls	r6, r3, #31
 8007df6:	d508      	bpl.n	8007e0a <_printf_i+0x14e>
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	6861      	ldr	r1, [r4, #4]
 8007dfc:	4299      	cmp	r1, r3
 8007dfe:	bfde      	ittt	le
 8007e00:	2330      	movle	r3, #48	; 0x30
 8007e02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e0a:	1b52      	subs	r2, r2, r5
 8007e0c:	6122      	str	r2, [r4, #16]
 8007e0e:	464b      	mov	r3, r9
 8007e10:	4621      	mov	r1, r4
 8007e12:	4640      	mov	r0, r8
 8007e14:	f8cd a000 	str.w	sl, [sp]
 8007e18:	aa03      	add	r2, sp, #12
 8007e1a:	f7ff fedf 	bl	8007bdc <_printf_common>
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d14c      	bne.n	8007ebc <_printf_i+0x200>
 8007e22:	f04f 30ff 	mov.w	r0, #4294967295
 8007e26:	b004      	add	sp, #16
 8007e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2c:	4834      	ldr	r0, [pc, #208]	; (8007f00 <_printf_i+0x244>)
 8007e2e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e32:	6829      	ldr	r1, [r5, #0]
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e3a:	6029      	str	r1, [r5, #0]
 8007e3c:	061d      	lsls	r5, r3, #24
 8007e3e:	d514      	bpl.n	8007e6a <_printf_i+0x1ae>
 8007e40:	07df      	lsls	r7, r3, #31
 8007e42:	bf44      	itt	mi
 8007e44:	f043 0320 	orrmi.w	r3, r3, #32
 8007e48:	6023      	strmi	r3, [r4, #0]
 8007e4a:	b91e      	cbnz	r6, 8007e54 <_printf_i+0x198>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	f023 0320 	bic.w	r3, r3, #32
 8007e52:	6023      	str	r3, [r4, #0]
 8007e54:	2310      	movs	r3, #16
 8007e56:	e7af      	b.n	8007db8 <_printf_i+0xfc>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	f043 0320 	orr.w	r3, r3, #32
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	2378      	movs	r3, #120	; 0x78
 8007e62:	4828      	ldr	r0, [pc, #160]	; (8007f04 <_printf_i+0x248>)
 8007e64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e68:	e7e3      	b.n	8007e32 <_printf_i+0x176>
 8007e6a:	0659      	lsls	r1, r3, #25
 8007e6c:	bf48      	it	mi
 8007e6e:	b2b6      	uxthmi	r6, r6
 8007e70:	e7e6      	b.n	8007e40 <_printf_i+0x184>
 8007e72:	4615      	mov	r5, r2
 8007e74:	e7bb      	b.n	8007dee <_printf_i+0x132>
 8007e76:	682b      	ldr	r3, [r5, #0]
 8007e78:	6826      	ldr	r6, [r4, #0]
 8007e7a:	1d18      	adds	r0, r3, #4
 8007e7c:	6961      	ldr	r1, [r4, #20]
 8007e7e:	6028      	str	r0, [r5, #0]
 8007e80:	0635      	lsls	r5, r6, #24
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	d501      	bpl.n	8007e8a <_printf_i+0x1ce>
 8007e86:	6019      	str	r1, [r3, #0]
 8007e88:	e002      	b.n	8007e90 <_printf_i+0x1d4>
 8007e8a:	0670      	lsls	r0, r6, #25
 8007e8c:	d5fb      	bpl.n	8007e86 <_printf_i+0x1ca>
 8007e8e:	8019      	strh	r1, [r3, #0]
 8007e90:	2300      	movs	r3, #0
 8007e92:	4615      	mov	r5, r2
 8007e94:	6123      	str	r3, [r4, #16]
 8007e96:	e7ba      	b.n	8007e0e <_printf_i+0x152>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	1d1a      	adds	r2, r3, #4
 8007e9e:	602a      	str	r2, [r5, #0]
 8007ea0:	681d      	ldr	r5, [r3, #0]
 8007ea2:	6862      	ldr	r2, [r4, #4]
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 ff1d 	bl	8008ce4 <memchr>
 8007eaa:	b108      	cbz	r0, 8007eb0 <_printf_i+0x1f4>
 8007eac:	1b40      	subs	r0, r0, r5
 8007eae:	6060      	str	r0, [r4, #4]
 8007eb0:	6863      	ldr	r3, [r4, #4]
 8007eb2:	6123      	str	r3, [r4, #16]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eba:	e7a8      	b.n	8007e0e <_printf_i+0x152>
 8007ebc:	462a      	mov	r2, r5
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	47d0      	blx	sl
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d0ab      	beq.n	8007e22 <_printf_i+0x166>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	079b      	lsls	r3, r3, #30
 8007ece:	d413      	bmi.n	8007ef8 <_printf_i+0x23c>
 8007ed0:	68e0      	ldr	r0, [r4, #12]
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	4298      	cmp	r0, r3
 8007ed6:	bfb8      	it	lt
 8007ed8:	4618      	movlt	r0, r3
 8007eda:	e7a4      	b.n	8007e26 <_printf_i+0x16a>
 8007edc:	2301      	movs	r3, #1
 8007ede:	4632      	mov	r2, r6
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	4640      	mov	r0, r8
 8007ee4:	47d0      	blx	sl
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d09b      	beq.n	8007e22 <_printf_i+0x166>
 8007eea:	3501      	adds	r5, #1
 8007eec:	68e3      	ldr	r3, [r4, #12]
 8007eee:	9903      	ldr	r1, [sp, #12]
 8007ef0:	1a5b      	subs	r3, r3, r1
 8007ef2:	42ab      	cmp	r3, r5
 8007ef4:	dcf2      	bgt.n	8007edc <_printf_i+0x220>
 8007ef6:	e7eb      	b.n	8007ed0 <_printf_i+0x214>
 8007ef8:	2500      	movs	r5, #0
 8007efa:	f104 0619 	add.w	r6, r4, #25
 8007efe:	e7f5      	b.n	8007eec <_printf_i+0x230>
 8007f00:	0800aa1a 	.word	0x0800aa1a
 8007f04:	0800aa2b 	.word	0x0800aa2b

08007f08 <siprintf>:
 8007f08:	b40e      	push	{r1, r2, r3}
 8007f0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f0e:	b500      	push	{lr}
 8007f10:	b09c      	sub	sp, #112	; 0x70
 8007f12:	ab1d      	add	r3, sp, #116	; 0x74
 8007f14:	9002      	str	r0, [sp, #8]
 8007f16:	9006      	str	r0, [sp, #24]
 8007f18:	9107      	str	r1, [sp, #28]
 8007f1a:	9104      	str	r1, [sp, #16]
 8007f1c:	4808      	ldr	r0, [pc, #32]	; (8007f40 <siprintf+0x38>)
 8007f1e:	4909      	ldr	r1, [pc, #36]	; (8007f44 <siprintf+0x3c>)
 8007f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f24:	9105      	str	r1, [sp, #20]
 8007f26:	6800      	ldr	r0, [r0, #0]
 8007f28:	a902      	add	r1, sp, #8
 8007f2a:	9301      	str	r3, [sp, #4]
 8007f2c:	f001 fbb6 	bl	800969c <_svfiprintf_r>
 8007f30:	2200      	movs	r2, #0
 8007f32:	9b02      	ldr	r3, [sp, #8]
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	b01c      	add	sp, #112	; 0x70
 8007f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f3c:	b003      	add	sp, #12
 8007f3e:	4770      	bx	lr
 8007f40:	20000024 	.word	0x20000024
 8007f44:	ffff0208 	.word	0xffff0208

08007f48 <strcat>:
 8007f48:	4602      	mov	r2, r0
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	7814      	ldrb	r4, [r2, #0]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	3201      	adds	r2, #1
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	d1fa      	bne.n	8007f4c <strcat+0x4>
 8007f56:	3b01      	subs	r3, #1
 8007f58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f60:	2a00      	cmp	r2, #0
 8007f62:	d1f9      	bne.n	8007f58 <strcat+0x10>
 8007f64:	bd10      	pop	{r4, pc}

08007f66 <_vsniprintf_r>:
 8007f66:	b530      	push	{r4, r5, lr}
 8007f68:	4614      	mov	r4, r2
 8007f6a:	2c00      	cmp	r4, #0
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	461a      	mov	r2, r3
 8007f70:	b09b      	sub	sp, #108	; 0x6c
 8007f72:	da05      	bge.n	8007f80 <_vsniprintf_r+0x1a>
 8007f74:	238b      	movs	r3, #139	; 0x8b
 8007f76:	6003      	str	r3, [r0, #0]
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	b01b      	add	sp, #108	; 0x6c
 8007f7e:	bd30      	pop	{r4, r5, pc}
 8007f80:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007f84:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007f88:	bf0c      	ite	eq
 8007f8a:	4623      	moveq	r3, r4
 8007f8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f90:	9302      	str	r3, [sp, #8]
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f98:	9100      	str	r1, [sp, #0]
 8007f9a:	9104      	str	r1, [sp, #16]
 8007f9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007fa0:	4669      	mov	r1, sp
 8007fa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007fa4:	f001 fb7a 	bl	800969c <_svfiprintf_r>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	bfbc      	itt	lt
 8007fac:	238b      	movlt	r3, #139	; 0x8b
 8007fae:	602b      	strlt	r3, [r5, #0]
 8007fb0:	2c00      	cmp	r4, #0
 8007fb2:	d0e3      	beq.n	8007f7c <_vsniprintf_r+0x16>
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	9b00      	ldr	r3, [sp, #0]
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	e7df      	b.n	8007f7c <_vsniprintf_r+0x16>

08007fbc <vsniprintf>:
 8007fbc:	b507      	push	{r0, r1, r2, lr}
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	460a      	mov	r2, r1
 8007fc4:	4601      	mov	r1, r0
 8007fc6:	4803      	ldr	r0, [pc, #12]	; (8007fd4 <vsniprintf+0x18>)
 8007fc8:	6800      	ldr	r0, [r0, #0]
 8007fca:	f7ff ffcc 	bl	8007f66 <_vsniprintf_r>
 8007fce:	b003      	add	sp, #12
 8007fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fd4:	20000024 	.word	0x20000024

08007fd8 <quorem>:
 8007fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	6903      	ldr	r3, [r0, #16]
 8007fde:	690c      	ldr	r4, [r1, #16]
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	42a3      	cmp	r3, r4
 8007fe4:	f2c0 8082 	blt.w	80080ec <quorem+0x114>
 8007fe8:	3c01      	subs	r4, #1
 8007fea:	f100 0514 	add.w	r5, r0, #20
 8007fee:	f101 0814 	add.w	r8, r1, #20
 8007ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008000:	3301      	adds	r3, #1
 8008002:	429a      	cmp	r2, r3
 8008004:	fbb2 f6f3 	udiv	r6, r2, r3
 8008008:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800800c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008010:	d331      	bcc.n	8008076 <quorem+0x9e>
 8008012:	f04f 0e00 	mov.w	lr, #0
 8008016:	4640      	mov	r0, r8
 8008018:	46ac      	mov	ip, r5
 800801a:	46f2      	mov	sl, lr
 800801c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008020:	b293      	uxth	r3, r2
 8008022:	fb06 e303 	mla	r3, r6, r3, lr
 8008026:	0c12      	lsrs	r2, r2, #16
 8008028:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800802c:	b29b      	uxth	r3, r3
 800802e:	fb06 e202 	mla	r2, r6, r2, lr
 8008032:	ebaa 0303 	sub.w	r3, sl, r3
 8008036:	f8dc a000 	ldr.w	sl, [ip]
 800803a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800803e:	fa1f fa8a 	uxth.w	sl, sl
 8008042:	4453      	add	r3, sl
 8008044:	f8dc a000 	ldr.w	sl, [ip]
 8008048:	b292      	uxth	r2, r2
 800804a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800804e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008052:	b29b      	uxth	r3, r3
 8008054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008058:	4581      	cmp	r9, r0
 800805a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800805e:	f84c 3b04 	str.w	r3, [ip], #4
 8008062:	d2db      	bcs.n	800801c <quorem+0x44>
 8008064:	f855 300b 	ldr.w	r3, [r5, fp]
 8008068:	b92b      	cbnz	r3, 8008076 <quorem+0x9e>
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	3b04      	subs	r3, #4
 800806e:	429d      	cmp	r5, r3
 8008070:	461a      	mov	r2, r3
 8008072:	d32f      	bcc.n	80080d4 <quorem+0xfc>
 8008074:	613c      	str	r4, [r7, #16]
 8008076:	4638      	mov	r0, r7
 8008078:	f001 f8c0 	bl	80091fc <__mcmp>
 800807c:	2800      	cmp	r0, #0
 800807e:	db25      	blt.n	80080cc <quorem+0xf4>
 8008080:	4628      	mov	r0, r5
 8008082:	f04f 0c00 	mov.w	ip, #0
 8008086:	3601      	adds	r6, #1
 8008088:	f858 1b04 	ldr.w	r1, [r8], #4
 800808c:	f8d0 e000 	ldr.w	lr, [r0]
 8008090:	b28b      	uxth	r3, r1
 8008092:	ebac 0303 	sub.w	r3, ip, r3
 8008096:	fa1f f28e 	uxth.w	r2, lr
 800809a:	4413      	add	r3, r2
 800809c:	0c0a      	lsrs	r2, r1, #16
 800809e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ac:	45c1      	cmp	r9, r8
 80080ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080b2:	f840 3b04 	str.w	r3, [r0], #4
 80080b6:	d2e7      	bcs.n	8008088 <quorem+0xb0>
 80080b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c0:	b922      	cbnz	r2, 80080cc <quorem+0xf4>
 80080c2:	3b04      	subs	r3, #4
 80080c4:	429d      	cmp	r5, r3
 80080c6:	461a      	mov	r2, r3
 80080c8:	d30a      	bcc.n	80080e0 <quorem+0x108>
 80080ca:	613c      	str	r4, [r7, #16]
 80080cc:	4630      	mov	r0, r6
 80080ce:	b003      	add	sp, #12
 80080d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	3b04      	subs	r3, #4
 80080d8:	2a00      	cmp	r2, #0
 80080da:	d1cb      	bne.n	8008074 <quorem+0x9c>
 80080dc:	3c01      	subs	r4, #1
 80080de:	e7c6      	b.n	800806e <quorem+0x96>
 80080e0:	6812      	ldr	r2, [r2, #0]
 80080e2:	3b04      	subs	r3, #4
 80080e4:	2a00      	cmp	r2, #0
 80080e6:	d1f0      	bne.n	80080ca <quorem+0xf2>
 80080e8:	3c01      	subs	r4, #1
 80080ea:	e7eb      	b.n	80080c4 <quorem+0xec>
 80080ec:	2000      	movs	r0, #0
 80080ee:	e7ee      	b.n	80080ce <quorem+0xf6>

080080f0 <_dtoa_r>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	4616      	mov	r6, r2
 80080f6:	461f      	mov	r7, r3
 80080f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80080fa:	b099      	sub	sp, #100	; 0x64
 80080fc:	4605      	mov	r5, r0
 80080fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008102:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008106:	b974      	cbnz	r4, 8008126 <_dtoa_r+0x36>
 8008108:	2010      	movs	r0, #16
 800810a:	f000 fde3 	bl	8008cd4 <malloc>
 800810e:	4602      	mov	r2, r0
 8008110:	6268      	str	r0, [r5, #36]	; 0x24
 8008112:	b920      	cbnz	r0, 800811e <_dtoa_r+0x2e>
 8008114:	21ea      	movs	r1, #234	; 0xea
 8008116:	4ba8      	ldr	r3, [pc, #672]	; (80083b8 <_dtoa_r+0x2c8>)
 8008118:	48a8      	ldr	r0, [pc, #672]	; (80083bc <_dtoa_r+0x2cc>)
 800811a:	f001 fbcf 	bl	80098bc <__assert_func>
 800811e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008122:	6004      	str	r4, [r0, #0]
 8008124:	60c4      	str	r4, [r0, #12]
 8008126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008128:	6819      	ldr	r1, [r3, #0]
 800812a:	b151      	cbz	r1, 8008142 <_dtoa_r+0x52>
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	2301      	movs	r3, #1
 8008130:	4093      	lsls	r3, r2
 8008132:	604a      	str	r2, [r1, #4]
 8008134:	608b      	str	r3, [r1, #8]
 8008136:	4628      	mov	r0, r5
 8008138:	f000 fe22 	bl	8008d80 <_Bfree>
 800813c:	2200      	movs	r2, #0
 800813e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	1e3b      	subs	r3, r7, #0
 8008144:	bfaf      	iteee	ge
 8008146:	2300      	movge	r3, #0
 8008148:	2201      	movlt	r2, #1
 800814a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800814e:	9305      	strlt	r3, [sp, #20]
 8008150:	bfa8      	it	ge
 8008152:	f8c8 3000 	strge.w	r3, [r8]
 8008156:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800815a:	4b99      	ldr	r3, [pc, #612]	; (80083c0 <_dtoa_r+0x2d0>)
 800815c:	bfb8      	it	lt
 800815e:	f8c8 2000 	strlt.w	r2, [r8]
 8008162:	ea33 0309 	bics.w	r3, r3, r9
 8008166:	d119      	bne.n	800819c <_dtoa_r+0xac>
 8008168:	f242 730f 	movw	r3, #9999	; 0x270f
 800816c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008174:	4333      	orrs	r3, r6
 8008176:	f000 857f 	beq.w	8008c78 <_dtoa_r+0xb88>
 800817a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800817c:	b953      	cbnz	r3, 8008194 <_dtoa_r+0xa4>
 800817e:	4b91      	ldr	r3, [pc, #580]	; (80083c4 <_dtoa_r+0x2d4>)
 8008180:	e022      	b.n	80081c8 <_dtoa_r+0xd8>
 8008182:	4b91      	ldr	r3, [pc, #580]	; (80083c8 <_dtoa_r+0x2d8>)
 8008184:	9303      	str	r3, [sp, #12]
 8008186:	3308      	adds	r3, #8
 8008188:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	9803      	ldr	r0, [sp, #12]
 800818e:	b019      	add	sp, #100	; 0x64
 8008190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008194:	4b8b      	ldr	r3, [pc, #556]	; (80083c4 <_dtoa_r+0x2d4>)
 8008196:	9303      	str	r3, [sp, #12]
 8008198:	3303      	adds	r3, #3
 800819a:	e7f5      	b.n	8008188 <_dtoa_r+0x98>
 800819c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80081a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80081a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081a8:	2200      	movs	r2, #0
 80081aa:	2300      	movs	r3, #0
 80081ac:	f7f8 fbfc 	bl	80009a8 <__aeabi_dcmpeq>
 80081b0:	4680      	mov	r8, r0
 80081b2:	b158      	cbz	r0, 80081cc <_dtoa_r+0xdc>
 80081b4:	2301      	movs	r3, #1
 80081b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8558 	beq.w	8008c72 <_dtoa_r+0xb82>
 80081c2:	4882      	ldr	r0, [pc, #520]	; (80083cc <_dtoa_r+0x2dc>)
 80081c4:	6018      	str	r0, [r3, #0]
 80081c6:	1e43      	subs	r3, r0, #1
 80081c8:	9303      	str	r3, [sp, #12]
 80081ca:	e7df      	b.n	800818c <_dtoa_r+0x9c>
 80081cc:	ab16      	add	r3, sp, #88	; 0x58
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	ab17      	add	r3, sp, #92	; 0x5c
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	4628      	mov	r0, r5
 80081d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80081da:	f001 f8b7 	bl	800934c <__d2b>
 80081de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80081e2:	4683      	mov	fp, r0
 80081e4:	2c00      	cmp	r4, #0
 80081e6:	d07f      	beq.n	80082e8 <_dtoa_r+0x1f8>
 80081e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80081f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80081fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80081fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008202:	2200      	movs	r2, #0
 8008204:	4b72      	ldr	r3, [pc, #456]	; (80083d0 <_dtoa_r+0x2e0>)
 8008206:	f7f7 ffaf 	bl	8000168 <__aeabi_dsub>
 800820a:	a365      	add	r3, pc, #404	; (adr r3, 80083a0 <_dtoa_r+0x2b0>)
 800820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008210:	f7f8 f962 	bl	80004d8 <__aeabi_dmul>
 8008214:	a364      	add	r3, pc, #400	; (adr r3, 80083a8 <_dtoa_r+0x2b8>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f7 ffa7 	bl	800016c <__adddf3>
 800821e:	4606      	mov	r6, r0
 8008220:	4620      	mov	r0, r4
 8008222:	460f      	mov	r7, r1
 8008224:	f7f8 f8ee 	bl	8000404 <__aeabi_i2d>
 8008228:	a361      	add	r3, pc, #388	; (adr r3, 80083b0 <_dtoa_r+0x2c0>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f8 f953 	bl	80004d8 <__aeabi_dmul>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4630      	mov	r0, r6
 8008238:	4639      	mov	r1, r7
 800823a:	f7f7 ff97 	bl	800016c <__adddf3>
 800823e:	4606      	mov	r6, r0
 8008240:	460f      	mov	r7, r1
 8008242:	f7f8 fbf9 	bl	8000a38 <__aeabi_d2iz>
 8008246:	2200      	movs	r2, #0
 8008248:	4682      	mov	sl, r0
 800824a:	2300      	movs	r3, #0
 800824c:	4630      	mov	r0, r6
 800824e:	4639      	mov	r1, r7
 8008250:	f7f8 fbb4 	bl	80009bc <__aeabi_dcmplt>
 8008254:	b148      	cbz	r0, 800826a <_dtoa_r+0x17a>
 8008256:	4650      	mov	r0, sl
 8008258:	f7f8 f8d4 	bl	8000404 <__aeabi_i2d>
 800825c:	4632      	mov	r2, r6
 800825e:	463b      	mov	r3, r7
 8008260:	f7f8 fba2 	bl	80009a8 <__aeabi_dcmpeq>
 8008264:	b908      	cbnz	r0, 800826a <_dtoa_r+0x17a>
 8008266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800826a:	f1ba 0f16 	cmp.w	sl, #22
 800826e:	d858      	bhi.n	8008322 <_dtoa_r+0x232>
 8008270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008274:	4b57      	ldr	r3, [pc, #348]	; (80083d4 <_dtoa_r+0x2e4>)
 8008276:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	f7f8 fb9d 	bl	80009bc <__aeabi_dcmplt>
 8008282:	2800      	cmp	r0, #0
 8008284:	d04f      	beq.n	8008326 <_dtoa_r+0x236>
 8008286:	2300      	movs	r3, #0
 8008288:	f10a 3aff 	add.w	sl, sl, #4294967295
 800828c:	930f      	str	r3, [sp, #60]	; 0x3c
 800828e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008290:	1b1c      	subs	r4, r3, r4
 8008292:	1e63      	subs	r3, r4, #1
 8008294:	9309      	str	r3, [sp, #36]	; 0x24
 8008296:	bf49      	itett	mi
 8008298:	f1c4 0301 	rsbmi	r3, r4, #1
 800829c:	2300      	movpl	r3, #0
 800829e:	9306      	strmi	r3, [sp, #24]
 80082a0:	2300      	movmi	r3, #0
 80082a2:	bf54      	ite	pl
 80082a4:	9306      	strpl	r3, [sp, #24]
 80082a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80082a8:	f1ba 0f00 	cmp.w	sl, #0
 80082ac:	db3d      	blt.n	800832a <_dtoa_r+0x23a>
 80082ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80082b4:	4453      	add	r3, sl
 80082b6:	9309      	str	r3, [sp, #36]	; 0x24
 80082b8:	2300      	movs	r3, #0
 80082ba:	930a      	str	r3, [sp, #40]	; 0x28
 80082bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082be:	2b09      	cmp	r3, #9
 80082c0:	f200 808c 	bhi.w	80083dc <_dtoa_r+0x2ec>
 80082c4:	2b05      	cmp	r3, #5
 80082c6:	bfc4      	itt	gt
 80082c8:	3b04      	subgt	r3, #4
 80082ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 80082cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082ce:	bfc8      	it	gt
 80082d0:	2400      	movgt	r4, #0
 80082d2:	f1a3 0302 	sub.w	r3, r3, #2
 80082d6:	bfd8      	it	le
 80082d8:	2401      	movle	r4, #1
 80082da:	2b03      	cmp	r3, #3
 80082dc:	f200 808a 	bhi.w	80083f4 <_dtoa_r+0x304>
 80082e0:	e8df f003 	tbb	[pc, r3]
 80082e4:	5b4d4f2d 	.word	0x5b4d4f2d
 80082e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80082ec:	441c      	add	r4, r3
 80082ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	bfc3      	ittte	gt
 80082f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082fa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80082fe:	fa09 f303 	lslgt.w	r3, r9, r3
 8008302:	f1c3 0320 	rsble	r3, r3, #32
 8008306:	bfc6      	itte	gt
 8008308:	fa26 f000 	lsrgt.w	r0, r6, r0
 800830c:	4318      	orrgt	r0, r3
 800830e:	fa06 f003 	lslle.w	r0, r6, r3
 8008312:	f7f8 f867 	bl	80003e4 <__aeabi_ui2d>
 8008316:	2301      	movs	r3, #1
 8008318:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800831c:	3c01      	subs	r4, #1
 800831e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008320:	e76f      	b.n	8008202 <_dtoa_r+0x112>
 8008322:	2301      	movs	r3, #1
 8008324:	e7b2      	b.n	800828c <_dtoa_r+0x19c>
 8008326:	900f      	str	r0, [sp, #60]	; 0x3c
 8008328:	e7b1      	b.n	800828e <_dtoa_r+0x19e>
 800832a:	9b06      	ldr	r3, [sp, #24]
 800832c:	eba3 030a 	sub.w	r3, r3, sl
 8008330:	9306      	str	r3, [sp, #24]
 8008332:	f1ca 0300 	rsb	r3, sl, #0
 8008336:	930a      	str	r3, [sp, #40]	; 0x28
 8008338:	2300      	movs	r3, #0
 800833a:	930e      	str	r3, [sp, #56]	; 0x38
 800833c:	e7be      	b.n	80082bc <_dtoa_r+0x1cc>
 800833e:	2300      	movs	r3, #0
 8008340:	930b      	str	r3, [sp, #44]	; 0x2c
 8008342:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008344:	2b00      	cmp	r3, #0
 8008346:	dc58      	bgt.n	80083fa <_dtoa_r+0x30a>
 8008348:	f04f 0901 	mov.w	r9, #1
 800834c:	464b      	mov	r3, r9
 800834e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008352:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008356:	2200      	movs	r2, #0
 8008358:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800835a:	6042      	str	r2, [r0, #4]
 800835c:	2204      	movs	r2, #4
 800835e:	f102 0614 	add.w	r6, r2, #20
 8008362:	429e      	cmp	r6, r3
 8008364:	6841      	ldr	r1, [r0, #4]
 8008366:	d94e      	bls.n	8008406 <_dtoa_r+0x316>
 8008368:	4628      	mov	r0, r5
 800836a:	f000 fcc9 	bl	8008d00 <_Balloc>
 800836e:	9003      	str	r0, [sp, #12]
 8008370:	2800      	cmp	r0, #0
 8008372:	d14c      	bne.n	800840e <_dtoa_r+0x31e>
 8008374:	4602      	mov	r2, r0
 8008376:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800837a:	4b17      	ldr	r3, [pc, #92]	; (80083d8 <_dtoa_r+0x2e8>)
 800837c:	e6cc      	b.n	8008118 <_dtoa_r+0x28>
 800837e:	2301      	movs	r3, #1
 8008380:	e7de      	b.n	8008340 <_dtoa_r+0x250>
 8008382:	2300      	movs	r3, #0
 8008384:	930b      	str	r3, [sp, #44]	; 0x2c
 8008386:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008388:	eb0a 0903 	add.w	r9, sl, r3
 800838c:	f109 0301 	add.w	r3, r9, #1
 8008390:	2b01      	cmp	r3, #1
 8008392:	9308      	str	r3, [sp, #32]
 8008394:	bfb8      	it	lt
 8008396:	2301      	movlt	r3, #1
 8008398:	e7dd      	b.n	8008356 <_dtoa_r+0x266>
 800839a:	2301      	movs	r3, #1
 800839c:	e7f2      	b.n	8008384 <_dtoa_r+0x294>
 800839e:	bf00      	nop
 80083a0:	636f4361 	.word	0x636f4361
 80083a4:	3fd287a7 	.word	0x3fd287a7
 80083a8:	8b60c8b3 	.word	0x8b60c8b3
 80083ac:	3fc68a28 	.word	0x3fc68a28
 80083b0:	509f79fb 	.word	0x509f79fb
 80083b4:	3fd34413 	.word	0x3fd34413
 80083b8:	0800aa49 	.word	0x0800aa49
 80083bc:	0800aa60 	.word	0x0800aa60
 80083c0:	7ff00000 	.word	0x7ff00000
 80083c4:	0800aa45 	.word	0x0800aa45
 80083c8:	0800aa3c 	.word	0x0800aa3c
 80083cc:	0800aa19 	.word	0x0800aa19
 80083d0:	3ff80000 	.word	0x3ff80000
 80083d4:	0800ab50 	.word	0x0800ab50
 80083d8:	0800aabb 	.word	0x0800aabb
 80083dc:	2401      	movs	r4, #1
 80083de:	2300      	movs	r3, #0
 80083e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80083e2:	9322      	str	r3, [sp, #136]	; 0x88
 80083e4:	f04f 39ff 	mov.w	r9, #4294967295
 80083e8:	2200      	movs	r2, #0
 80083ea:	2312      	movs	r3, #18
 80083ec:	f8cd 9020 	str.w	r9, [sp, #32]
 80083f0:	9223      	str	r2, [sp, #140]	; 0x8c
 80083f2:	e7b0      	b.n	8008356 <_dtoa_r+0x266>
 80083f4:	2301      	movs	r3, #1
 80083f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80083f8:	e7f4      	b.n	80083e4 <_dtoa_r+0x2f4>
 80083fa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80083fe:	464b      	mov	r3, r9
 8008400:	f8cd 9020 	str.w	r9, [sp, #32]
 8008404:	e7a7      	b.n	8008356 <_dtoa_r+0x266>
 8008406:	3101      	adds	r1, #1
 8008408:	6041      	str	r1, [r0, #4]
 800840a:	0052      	lsls	r2, r2, #1
 800840c:	e7a7      	b.n	800835e <_dtoa_r+0x26e>
 800840e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008410:	9a03      	ldr	r2, [sp, #12]
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	9b08      	ldr	r3, [sp, #32]
 8008416:	2b0e      	cmp	r3, #14
 8008418:	f200 80a8 	bhi.w	800856c <_dtoa_r+0x47c>
 800841c:	2c00      	cmp	r4, #0
 800841e:	f000 80a5 	beq.w	800856c <_dtoa_r+0x47c>
 8008422:	f1ba 0f00 	cmp.w	sl, #0
 8008426:	dd34      	ble.n	8008492 <_dtoa_r+0x3a2>
 8008428:	4a9a      	ldr	r2, [pc, #616]	; (8008694 <_dtoa_r+0x5a4>)
 800842a:	f00a 030f 	and.w	r3, sl, #15
 800842e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008432:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008436:	e9d3 3400 	ldrd	r3, r4, [r3]
 800843a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800843e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008442:	d016      	beq.n	8008472 <_dtoa_r+0x382>
 8008444:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008448:	4b93      	ldr	r3, [pc, #588]	; (8008698 <_dtoa_r+0x5a8>)
 800844a:	2703      	movs	r7, #3
 800844c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008450:	f7f8 f96c 	bl	800072c <__aeabi_ddiv>
 8008454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008458:	f004 040f 	and.w	r4, r4, #15
 800845c:	4e8e      	ldr	r6, [pc, #568]	; (8008698 <_dtoa_r+0x5a8>)
 800845e:	b954      	cbnz	r4, 8008476 <_dtoa_r+0x386>
 8008460:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008468:	f7f8 f960 	bl	800072c <__aeabi_ddiv>
 800846c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008470:	e029      	b.n	80084c6 <_dtoa_r+0x3d6>
 8008472:	2702      	movs	r7, #2
 8008474:	e7f2      	b.n	800845c <_dtoa_r+0x36c>
 8008476:	07e1      	lsls	r1, r4, #31
 8008478:	d508      	bpl.n	800848c <_dtoa_r+0x39c>
 800847a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800847e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008482:	f7f8 f829 	bl	80004d8 <__aeabi_dmul>
 8008486:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800848a:	3701      	adds	r7, #1
 800848c:	1064      	asrs	r4, r4, #1
 800848e:	3608      	adds	r6, #8
 8008490:	e7e5      	b.n	800845e <_dtoa_r+0x36e>
 8008492:	f000 80a5 	beq.w	80085e0 <_dtoa_r+0x4f0>
 8008496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800849a:	f1ca 0400 	rsb	r4, sl, #0
 800849e:	4b7d      	ldr	r3, [pc, #500]	; (8008694 <_dtoa_r+0x5a4>)
 80084a0:	f004 020f 	and.w	r2, r4, #15
 80084a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	f7f8 f814 	bl	80004d8 <__aeabi_dmul>
 80084b0:	2702      	movs	r7, #2
 80084b2:	2300      	movs	r3, #0
 80084b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084b8:	4e77      	ldr	r6, [pc, #476]	; (8008698 <_dtoa_r+0x5a8>)
 80084ba:	1124      	asrs	r4, r4, #4
 80084bc:	2c00      	cmp	r4, #0
 80084be:	f040 8084 	bne.w	80085ca <_dtoa_r+0x4da>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1d2      	bne.n	800846c <_dtoa_r+0x37c>
 80084c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 808b 	beq.w	80085e4 <_dtoa_r+0x4f4>
 80084ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80084d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80084d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084da:	2200      	movs	r2, #0
 80084dc:	4b6f      	ldr	r3, [pc, #444]	; (800869c <_dtoa_r+0x5ac>)
 80084de:	f7f8 fa6d 	bl	80009bc <__aeabi_dcmplt>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d07e      	beq.n	80085e4 <_dtoa_r+0x4f4>
 80084e6:	9b08      	ldr	r3, [sp, #32]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d07b      	beq.n	80085e4 <_dtoa_r+0x4f4>
 80084ec:	f1b9 0f00 	cmp.w	r9, #0
 80084f0:	dd38      	ble.n	8008564 <_dtoa_r+0x474>
 80084f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084f6:	2200      	movs	r2, #0
 80084f8:	4b69      	ldr	r3, [pc, #420]	; (80086a0 <_dtoa_r+0x5b0>)
 80084fa:	f7f7 ffed 	bl	80004d8 <__aeabi_dmul>
 80084fe:	464c      	mov	r4, r9
 8008500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008504:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008508:	3701      	adds	r7, #1
 800850a:	4638      	mov	r0, r7
 800850c:	f7f7 ff7a 	bl	8000404 <__aeabi_i2d>
 8008510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008514:	f7f7 ffe0 	bl	80004d8 <__aeabi_dmul>
 8008518:	2200      	movs	r2, #0
 800851a:	4b62      	ldr	r3, [pc, #392]	; (80086a4 <_dtoa_r+0x5b4>)
 800851c:	f7f7 fe26 	bl	800016c <__adddf3>
 8008520:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008524:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008528:	9611      	str	r6, [sp, #68]	; 0x44
 800852a:	2c00      	cmp	r4, #0
 800852c:	d15d      	bne.n	80085ea <_dtoa_r+0x4fa>
 800852e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008532:	2200      	movs	r2, #0
 8008534:	4b5c      	ldr	r3, [pc, #368]	; (80086a8 <_dtoa_r+0x5b8>)
 8008536:	f7f7 fe17 	bl	8000168 <__aeabi_dsub>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008542:	4633      	mov	r3, r6
 8008544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008546:	f7f8 fa57 	bl	80009f8 <__aeabi_dcmpgt>
 800854a:	2800      	cmp	r0, #0
 800854c:	f040 829c 	bne.w	8008a88 <_dtoa_r+0x998>
 8008550:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008556:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800855a:	f7f8 fa2f 	bl	80009bc <__aeabi_dcmplt>
 800855e:	2800      	cmp	r0, #0
 8008560:	f040 8290 	bne.w	8008a84 <_dtoa_r+0x994>
 8008564:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008568:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800856c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800856e:	2b00      	cmp	r3, #0
 8008570:	f2c0 8152 	blt.w	8008818 <_dtoa_r+0x728>
 8008574:	f1ba 0f0e 	cmp.w	sl, #14
 8008578:	f300 814e 	bgt.w	8008818 <_dtoa_r+0x728>
 800857c:	4b45      	ldr	r3, [pc, #276]	; (8008694 <_dtoa_r+0x5a4>)
 800857e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008582:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008586:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800858a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800858c:	2b00      	cmp	r3, #0
 800858e:	f280 80db 	bge.w	8008748 <_dtoa_r+0x658>
 8008592:	9b08      	ldr	r3, [sp, #32]
 8008594:	2b00      	cmp	r3, #0
 8008596:	f300 80d7 	bgt.w	8008748 <_dtoa_r+0x658>
 800859a:	f040 8272 	bne.w	8008a82 <_dtoa_r+0x992>
 800859e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085a2:	2200      	movs	r2, #0
 80085a4:	4b40      	ldr	r3, [pc, #256]	; (80086a8 <_dtoa_r+0x5b8>)
 80085a6:	f7f7 ff97 	bl	80004d8 <__aeabi_dmul>
 80085aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ae:	f7f8 fa19 	bl	80009e4 <__aeabi_dcmpge>
 80085b2:	9c08      	ldr	r4, [sp, #32]
 80085b4:	4626      	mov	r6, r4
 80085b6:	2800      	cmp	r0, #0
 80085b8:	f040 8248 	bne.w	8008a4c <_dtoa_r+0x95c>
 80085bc:	2331      	movs	r3, #49	; 0x31
 80085be:	9f03      	ldr	r7, [sp, #12]
 80085c0:	f10a 0a01 	add.w	sl, sl, #1
 80085c4:	f807 3b01 	strb.w	r3, [r7], #1
 80085c8:	e244      	b.n	8008a54 <_dtoa_r+0x964>
 80085ca:	07e2      	lsls	r2, r4, #31
 80085cc:	d505      	bpl.n	80085da <_dtoa_r+0x4ea>
 80085ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085d2:	f7f7 ff81 	bl	80004d8 <__aeabi_dmul>
 80085d6:	2301      	movs	r3, #1
 80085d8:	3701      	adds	r7, #1
 80085da:	1064      	asrs	r4, r4, #1
 80085dc:	3608      	adds	r6, #8
 80085de:	e76d      	b.n	80084bc <_dtoa_r+0x3cc>
 80085e0:	2702      	movs	r7, #2
 80085e2:	e770      	b.n	80084c6 <_dtoa_r+0x3d6>
 80085e4:	46d0      	mov	r8, sl
 80085e6:	9c08      	ldr	r4, [sp, #32]
 80085e8:	e78f      	b.n	800850a <_dtoa_r+0x41a>
 80085ea:	9903      	ldr	r1, [sp, #12]
 80085ec:	4b29      	ldr	r3, [pc, #164]	; (8008694 <_dtoa_r+0x5a4>)
 80085ee:	4421      	add	r1, r4
 80085f0:	9112      	str	r1, [sp, #72]	; 0x48
 80085f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80085fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008600:	2900      	cmp	r1, #0
 8008602:	d055      	beq.n	80086b0 <_dtoa_r+0x5c0>
 8008604:	2000      	movs	r0, #0
 8008606:	4929      	ldr	r1, [pc, #164]	; (80086ac <_dtoa_r+0x5bc>)
 8008608:	f7f8 f890 	bl	800072c <__aeabi_ddiv>
 800860c:	463b      	mov	r3, r7
 800860e:	4632      	mov	r2, r6
 8008610:	f7f7 fdaa 	bl	8000168 <__aeabi_dsub>
 8008614:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008618:	9f03      	ldr	r7, [sp, #12]
 800861a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800861e:	f7f8 fa0b 	bl	8000a38 <__aeabi_d2iz>
 8008622:	4604      	mov	r4, r0
 8008624:	f7f7 feee 	bl	8000404 <__aeabi_i2d>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008630:	f7f7 fd9a 	bl	8000168 <__aeabi_dsub>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	3430      	adds	r4, #48	; 0x30
 800863a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800863e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008642:	f807 4b01 	strb.w	r4, [r7], #1
 8008646:	f7f8 f9b9 	bl	80009bc <__aeabi_dcmplt>
 800864a:	2800      	cmp	r0, #0
 800864c:	d174      	bne.n	8008738 <_dtoa_r+0x648>
 800864e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008652:	2000      	movs	r0, #0
 8008654:	4911      	ldr	r1, [pc, #68]	; (800869c <_dtoa_r+0x5ac>)
 8008656:	f7f7 fd87 	bl	8000168 <__aeabi_dsub>
 800865a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800865e:	f7f8 f9ad 	bl	80009bc <__aeabi_dcmplt>
 8008662:	2800      	cmp	r0, #0
 8008664:	f040 80b7 	bne.w	80087d6 <_dtoa_r+0x6e6>
 8008668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800866a:	429f      	cmp	r7, r3
 800866c:	f43f af7a 	beq.w	8008564 <_dtoa_r+0x474>
 8008670:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008674:	2200      	movs	r2, #0
 8008676:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <_dtoa_r+0x5b0>)
 8008678:	f7f7 ff2e 	bl	80004d8 <__aeabi_dmul>
 800867c:	2200      	movs	r2, #0
 800867e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008686:	4b06      	ldr	r3, [pc, #24]	; (80086a0 <_dtoa_r+0x5b0>)
 8008688:	f7f7 ff26 	bl	80004d8 <__aeabi_dmul>
 800868c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008690:	e7c3      	b.n	800861a <_dtoa_r+0x52a>
 8008692:	bf00      	nop
 8008694:	0800ab50 	.word	0x0800ab50
 8008698:	0800ab28 	.word	0x0800ab28
 800869c:	3ff00000 	.word	0x3ff00000
 80086a0:	40240000 	.word	0x40240000
 80086a4:	401c0000 	.word	0x401c0000
 80086a8:	40140000 	.word	0x40140000
 80086ac:	3fe00000 	.word	0x3fe00000
 80086b0:	4630      	mov	r0, r6
 80086b2:	4639      	mov	r1, r7
 80086b4:	f7f7 ff10 	bl	80004d8 <__aeabi_dmul>
 80086b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80086be:	9c03      	ldr	r4, [sp, #12]
 80086c0:	9314      	str	r3, [sp, #80]	; 0x50
 80086c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086c6:	f7f8 f9b7 	bl	8000a38 <__aeabi_d2iz>
 80086ca:	9015      	str	r0, [sp, #84]	; 0x54
 80086cc:	f7f7 fe9a 	bl	8000404 <__aeabi_i2d>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086d8:	f7f7 fd46 	bl	8000168 <__aeabi_dsub>
 80086dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086de:	4606      	mov	r6, r0
 80086e0:	3330      	adds	r3, #48	; 0x30
 80086e2:	f804 3b01 	strb.w	r3, [r4], #1
 80086e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086e8:	460f      	mov	r7, r1
 80086ea:	429c      	cmp	r4, r3
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	d124      	bne.n	800873c <_dtoa_r+0x64c>
 80086f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086f6:	4bb0      	ldr	r3, [pc, #704]	; (80089b8 <_dtoa_r+0x8c8>)
 80086f8:	f7f7 fd38 	bl	800016c <__adddf3>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4630      	mov	r0, r6
 8008702:	4639      	mov	r1, r7
 8008704:	f7f8 f978 	bl	80009f8 <__aeabi_dcmpgt>
 8008708:	2800      	cmp	r0, #0
 800870a:	d163      	bne.n	80087d4 <_dtoa_r+0x6e4>
 800870c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008710:	2000      	movs	r0, #0
 8008712:	49a9      	ldr	r1, [pc, #676]	; (80089b8 <_dtoa_r+0x8c8>)
 8008714:	f7f7 fd28 	bl	8000168 <__aeabi_dsub>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4630      	mov	r0, r6
 800871e:	4639      	mov	r1, r7
 8008720:	f7f8 f94c 	bl	80009bc <__aeabi_dcmplt>
 8008724:	2800      	cmp	r0, #0
 8008726:	f43f af1d 	beq.w	8008564 <_dtoa_r+0x474>
 800872a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800872c:	1e7b      	subs	r3, r7, #1
 800872e:	9314      	str	r3, [sp, #80]	; 0x50
 8008730:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008734:	2b30      	cmp	r3, #48	; 0x30
 8008736:	d0f8      	beq.n	800872a <_dtoa_r+0x63a>
 8008738:	46c2      	mov	sl, r8
 800873a:	e03b      	b.n	80087b4 <_dtoa_r+0x6c4>
 800873c:	4b9f      	ldr	r3, [pc, #636]	; (80089bc <_dtoa_r+0x8cc>)
 800873e:	f7f7 fecb 	bl	80004d8 <__aeabi_dmul>
 8008742:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008746:	e7bc      	b.n	80086c2 <_dtoa_r+0x5d2>
 8008748:	9f03      	ldr	r7, [sp, #12]
 800874a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800874e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008752:	4640      	mov	r0, r8
 8008754:	4649      	mov	r1, r9
 8008756:	f7f7 ffe9 	bl	800072c <__aeabi_ddiv>
 800875a:	f7f8 f96d 	bl	8000a38 <__aeabi_d2iz>
 800875e:	4604      	mov	r4, r0
 8008760:	f7f7 fe50 	bl	8000404 <__aeabi_i2d>
 8008764:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008768:	f7f7 feb6 	bl	80004d8 <__aeabi_dmul>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	4640      	mov	r0, r8
 8008772:	4649      	mov	r1, r9
 8008774:	f7f7 fcf8 	bl	8000168 <__aeabi_dsub>
 8008778:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800877c:	f807 6b01 	strb.w	r6, [r7], #1
 8008780:	9e03      	ldr	r6, [sp, #12]
 8008782:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008786:	1bbe      	subs	r6, r7, r6
 8008788:	45b4      	cmp	ip, r6
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	d136      	bne.n	80087fe <_dtoa_r+0x70e>
 8008790:	f7f7 fcec 	bl	800016c <__adddf3>
 8008794:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008798:	4680      	mov	r8, r0
 800879a:	4689      	mov	r9, r1
 800879c:	f7f8 f92c 	bl	80009f8 <__aeabi_dcmpgt>
 80087a0:	bb58      	cbnz	r0, 80087fa <_dtoa_r+0x70a>
 80087a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087a6:	4640      	mov	r0, r8
 80087a8:	4649      	mov	r1, r9
 80087aa:	f7f8 f8fd 	bl	80009a8 <__aeabi_dcmpeq>
 80087ae:	b108      	cbz	r0, 80087b4 <_dtoa_r+0x6c4>
 80087b0:	07e1      	lsls	r1, r4, #31
 80087b2:	d422      	bmi.n	80087fa <_dtoa_r+0x70a>
 80087b4:	4628      	mov	r0, r5
 80087b6:	4659      	mov	r1, fp
 80087b8:	f000 fae2 	bl	8008d80 <_Bfree>
 80087bc:	2300      	movs	r3, #0
 80087be:	703b      	strb	r3, [r7, #0]
 80087c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80087c2:	f10a 0001 	add.w	r0, sl, #1
 80087c6:	6018      	str	r0, [r3, #0]
 80087c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f43f acde 	beq.w	800818c <_dtoa_r+0x9c>
 80087d0:	601f      	str	r7, [r3, #0]
 80087d2:	e4db      	b.n	800818c <_dtoa_r+0x9c>
 80087d4:	4627      	mov	r7, r4
 80087d6:	463b      	mov	r3, r7
 80087d8:	461f      	mov	r7, r3
 80087da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087de:	2a39      	cmp	r2, #57	; 0x39
 80087e0:	d107      	bne.n	80087f2 <_dtoa_r+0x702>
 80087e2:	9a03      	ldr	r2, [sp, #12]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d1f7      	bne.n	80087d8 <_dtoa_r+0x6e8>
 80087e8:	2230      	movs	r2, #48	; 0x30
 80087ea:	9903      	ldr	r1, [sp, #12]
 80087ec:	f108 0801 	add.w	r8, r8, #1
 80087f0:	700a      	strb	r2, [r1, #0]
 80087f2:	781a      	ldrb	r2, [r3, #0]
 80087f4:	3201      	adds	r2, #1
 80087f6:	701a      	strb	r2, [r3, #0]
 80087f8:	e79e      	b.n	8008738 <_dtoa_r+0x648>
 80087fa:	46d0      	mov	r8, sl
 80087fc:	e7eb      	b.n	80087d6 <_dtoa_r+0x6e6>
 80087fe:	2200      	movs	r2, #0
 8008800:	4b6e      	ldr	r3, [pc, #440]	; (80089bc <_dtoa_r+0x8cc>)
 8008802:	f7f7 fe69 	bl	80004d8 <__aeabi_dmul>
 8008806:	2200      	movs	r2, #0
 8008808:	2300      	movs	r3, #0
 800880a:	4680      	mov	r8, r0
 800880c:	4689      	mov	r9, r1
 800880e:	f7f8 f8cb 	bl	80009a8 <__aeabi_dcmpeq>
 8008812:	2800      	cmp	r0, #0
 8008814:	d09b      	beq.n	800874e <_dtoa_r+0x65e>
 8008816:	e7cd      	b.n	80087b4 <_dtoa_r+0x6c4>
 8008818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800881a:	2a00      	cmp	r2, #0
 800881c:	f000 80d0 	beq.w	80089c0 <_dtoa_r+0x8d0>
 8008820:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008822:	2a01      	cmp	r2, #1
 8008824:	f300 80ae 	bgt.w	8008984 <_dtoa_r+0x894>
 8008828:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800882a:	2a00      	cmp	r2, #0
 800882c:	f000 80a6 	beq.w	800897c <_dtoa_r+0x88c>
 8008830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008834:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008836:	9f06      	ldr	r7, [sp, #24]
 8008838:	9a06      	ldr	r2, [sp, #24]
 800883a:	2101      	movs	r1, #1
 800883c:	441a      	add	r2, r3
 800883e:	9206      	str	r2, [sp, #24]
 8008840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008842:	4628      	mov	r0, r5
 8008844:	441a      	add	r2, r3
 8008846:	9209      	str	r2, [sp, #36]	; 0x24
 8008848:	f000 fb50 	bl	8008eec <__i2b>
 800884c:	4606      	mov	r6, r0
 800884e:	2f00      	cmp	r7, #0
 8008850:	dd0c      	ble.n	800886c <_dtoa_r+0x77c>
 8008852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008854:	2b00      	cmp	r3, #0
 8008856:	dd09      	ble.n	800886c <_dtoa_r+0x77c>
 8008858:	42bb      	cmp	r3, r7
 800885a:	bfa8      	it	ge
 800885c:	463b      	movge	r3, r7
 800885e:	9a06      	ldr	r2, [sp, #24]
 8008860:	1aff      	subs	r7, r7, r3
 8008862:	1ad2      	subs	r2, r2, r3
 8008864:	9206      	str	r2, [sp, #24]
 8008866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	9309      	str	r3, [sp, #36]	; 0x24
 800886c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886e:	b1f3      	cbz	r3, 80088ae <_dtoa_r+0x7be>
 8008870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 80a8 	beq.w	80089c8 <_dtoa_r+0x8d8>
 8008878:	2c00      	cmp	r4, #0
 800887a:	dd10      	ble.n	800889e <_dtoa_r+0x7ae>
 800887c:	4631      	mov	r1, r6
 800887e:	4622      	mov	r2, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f000 fbf1 	bl	8009068 <__pow5mult>
 8008886:	465a      	mov	r2, fp
 8008888:	4601      	mov	r1, r0
 800888a:	4606      	mov	r6, r0
 800888c:	4628      	mov	r0, r5
 800888e:	f000 fb43 	bl	8008f18 <__multiply>
 8008892:	4680      	mov	r8, r0
 8008894:	4659      	mov	r1, fp
 8008896:	4628      	mov	r0, r5
 8008898:	f000 fa72 	bl	8008d80 <_Bfree>
 800889c:	46c3      	mov	fp, r8
 800889e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a0:	1b1a      	subs	r2, r3, r4
 80088a2:	d004      	beq.n	80088ae <_dtoa_r+0x7be>
 80088a4:	4659      	mov	r1, fp
 80088a6:	4628      	mov	r0, r5
 80088a8:	f000 fbde 	bl	8009068 <__pow5mult>
 80088ac:	4683      	mov	fp, r0
 80088ae:	2101      	movs	r1, #1
 80088b0:	4628      	mov	r0, r5
 80088b2:	f000 fb1b 	bl	8008eec <__i2b>
 80088b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088b8:	4604      	mov	r4, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f340 8086 	ble.w	80089cc <_dtoa_r+0x8dc>
 80088c0:	461a      	mov	r2, r3
 80088c2:	4601      	mov	r1, r0
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 fbcf 	bl	8009068 <__pow5mult>
 80088ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088cc:	4604      	mov	r4, r0
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	dd7f      	ble.n	80089d2 <_dtoa_r+0x8e2>
 80088d2:	f04f 0800 	mov.w	r8, #0
 80088d6:	6923      	ldr	r3, [r4, #16]
 80088d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088dc:	6918      	ldr	r0, [r3, #16]
 80088de:	f000 fab7 	bl	8008e50 <__hi0bits>
 80088e2:	f1c0 0020 	rsb	r0, r0, #32
 80088e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e8:	4418      	add	r0, r3
 80088ea:	f010 001f 	ands.w	r0, r0, #31
 80088ee:	f000 8092 	beq.w	8008a16 <_dtoa_r+0x926>
 80088f2:	f1c0 0320 	rsb	r3, r0, #32
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	f340 808a 	ble.w	8008a10 <_dtoa_r+0x920>
 80088fc:	f1c0 001c 	rsb	r0, r0, #28
 8008900:	9b06      	ldr	r3, [sp, #24]
 8008902:	4407      	add	r7, r0
 8008904:	4403      	add	r3, r0
 8008906:	9306      	str	r3, [sp, #24]
 8008908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890a:	4403      	add	r3, r0
 800890c:	9309      	str	r3, [sp, #36]	; 0x24
 800890e:	9b06      	ldr	r3, [sp, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	dd05      	ble.n	8008920 <_dtoa_r+0x830>
 8008914:	4659      	mov	r1, fp
 8008916:	461a      	mov	r2, r3
 8008918:	4628      	mov	r0, r5
 800891a:	f000 fbff 	bl	800911c <__lshift>
 800891e:	4683      	mov	fp, r0
 8008920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	dd05      	ble.n	8008932 <_dtoa_r+0x842>
 8008926:	4621      	mov	r1, r4
 8008928:	461a      	mov	r2, r3
 800892a:	4628      	mov	r0, r5
 800892c:	f000 fbf6 	bl	800911c <__lshift>
 8008930:	4604      	mov	r4, r0
 8008932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d070      	beq.n	8008a1a <_dtoa_r+0x92a>
 8008938:	4621      	mov	r1, r4
 800893a:	4658      	mov	r0, fp
 800893c:	f000 fc5e 	bl	80091fc <__mcmp>
 8008940:	2800      	cmp	r0, #0
 8008942:	da6a      	bge.n	8008a1a <_dtoa_r+0x92a>
 8008944:	2300      	movs	r3, #0
 8008946:	4659      	mov	r1, fp
 8008948:	220a      	movs	r2, #10
 800894a:	4628      	mov	r0, r5
 800894c:	f000 fa3a 	bl	8008dc4 <__multadd>
 8008950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008952:	4683      	mov	fp, r0
 8008954:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8194 	beq.w	8008c86 <_dtoa_r+0xb96>
 800895e:	4631      	mov	r1, r6
 8008960:	2300      	movs	r3, #0
 8008962:	220a      	movs	r2, #10
 8008964:	4628      	mov	r0, r5
 8008966:	f000 fa2d 	bl	8008dc4 <__multadd>
 800896a:	f1b9 0f00 	cmp.w	r9, #0
 800896e:	4606      	mov	r6, r0
 8008970:	f300 8093 	bgt.w	8008a9a <_dtoa_r+0x9aa>
 8008974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008976:	2b02      	cmp	r3, #2
 8008978:	dc57      	bgt.n	8008a2a <_dtoa_r+0x93a>
 800897a:	e08e      	b.n	8008a9a <_dtoa_r+0x9aa>
 800897c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800897e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008982:	e757      	b.n	8008834 <_dtoa_r+0x744>
 8008984:	9b08      	ldr	r3, [sp, #32]
 8008986:	1e5c      	subs	r4, r3, #1
 8008988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898a:	42a3      	cmp	r3, r4
 800898c:	bfb7      	itett	lt
 800898e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008990:	1b1c      	subge	r4, r3, r4
 8008992:	1ae2      	sublt	r2, r4, r3
 8008994:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008996:	bfbe      	ittt	lt
 8008998:	940a      	strlt	r4, [sp, #40]	; 0x28
 800899a:	189b      	addlt	r3, r3, r2
 800899c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800899e:	9b08      	ldr	r3, [sp, #32]
 80089a0:	bfb8      	it	lt
 80089a2:	2400      	movlt	r4, #0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bfbb      	ittet	lt
 80089a8:	9b06      	ldrlt	r3, [sp, #24]
 80089aa:	9a08      	ldrlt	r2, [sp, #32]
 80089ac:	9f06      	ldrge	r7, [sp, #24]
 80089ae:	1a9f      	sublt	r7, r3, r2
 80089b0:	bfac      	ite	ge
 80089b2:	9b08      	ldrge	r3, [sp, #32]
 80089b4:	2300      	movlt	r3, #0
 80089b6:	e73f      	b.n	8008838 <_dtoa_r+0x748>
 80089b8:	3fe00000 	.word	0x3fe00000
 80089bc:	40240000 	.word	0x40240000
 80089c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80089c2:	9f06      	ldr	r7, [sp, #24]
 80089c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80089c6:	e742      	b.n	800884e <_dtoa_r+0x75e>
 80089c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ca:	e76b      	b.n	80088a4 <_dtoa_r+0x7b4>
 80089cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	dc19      	bgt.n	8008a06 <_dtoa_r+0x916>
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	b9bb      	cbnz	r3, 8008a06 <_dtoa_r+0x916>
 80089d6:	9b05      	ldr	r3, [sp, #20]
 80089d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089dc:	b99b      	cbnz	r3, 8008a06 <_dtoa_r+0x916>
 80089de:	9b05      	ldr	r3, [sp, #20]
 80089e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089e4:	0d1b      	lsrs	r3, r3, #20
 80089e6:	051b      	lsls	r3, r3, #20
 80089e8:	b183      	cbz	r3, 8008a0c <_dtoa_r+0x91c>
 80089ea:	f04f 0801 	mov.w	r8, #1
 80089ee:	9b06      	ldr	r3, [sp, #24]
 80089f0:	3301      	adds	r3, #1
 80089f2:	9306      	str	r3, [sp, #24]
 80089f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f6:	3301      	adds	r3, #1
 80089f8:	9309      	str	r3, [sp, #36]	; 0x24
 80089fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f47f af6a 	bne.w	80088d6 <_dtoa_r+0x7e6>
 8008a02:	2001      	movs	r0, #1
 8008a04:	e76f      	b.n	80088e6 <_dtoa_r+0x7f6>
 8008a06:	f04f 0800 	mov.w	r8, #0
 8008a0a:	e7f6      	b.n	80089fa <_dtoa_r+0x90a>
 8008a0c:	4698      	mov	r8, r3
 8008a0e:	e7f4      	b.n	80089fa <_dtoa_r+0x90a>
 8008a10:	f43f af7d 	beq.w	800890e <_dtoa_r+0x81e>
 8008a14:	4618      	mov	r0, r3
 8008a16:	301c      	adds	r0, #28
 8008a18:	e772      	b.n	8008900 <_dtoa_r+0x810>
 8008a1a:	9b08      	ldr	r3, [sp, #32]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dc36      	bgt.n	8008a8e <_dtoa_r+0x99e>
 8008a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	dd33      	ble.n	8008a8e <_dtoa_r+0x99e>
 8008a26:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a2a:	f1b9 0f00 	cmp.w	r9, #0
 8008a2e:	d10d      	bne.n	8008a4c <_dtoa_r+0x95c>
 8008a30:	4621      	mov	r1, r4
 8008a32:	464b      	mov	r3, r9
 8008a34:	2205      	movs	r2, #5
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 f9c4 	bl	8008dc4 <__multadd>
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4658      	mov	r0, fp
 8008a42:	f000 fbdb 	bl	80091fc <__mcmp>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f73f adb8 	bgt.w	80085bc <_dtoa_r+0x4cc>
 8008a4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a4e:	9f03      	ldr	r7, [sp, #12]
 8008a50:	ea6f 0a03 	mvn.w	sl, r3
 8008a54:	f04f 0800 	mov.w	r8, #0
 8008a58:	4621      	mov	r1, r4
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f000 f990 	bl	8008d80 <_Bfree>
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	f43f aea7 	beq.w	80087b4 <_dtoa_r+0x6c4>
 8008a66:	f1b8 0f00 	cmp.w	r8, #0
 8008a6a:	d005      	beq.n	8008a78 <_dtoa_r+0x988>
 8008a6c:	45b0      	cmp	r8, r6
 8008a6e:	d003      	beq.n	8008a78 <_dtoa_r+0x988>
 8008a70:	4641      	mov	r1, r8
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 f984 	bl	8008d80 <_Bfree>
 8008a78:	4631      	mov	r1, r6
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f000 f980 	bl	8008d80 <_Bfree>
 8008a80:	e698      	b.n	80087b4 <_dtoa_r+0x6c4>
 8008a82:	2400      	movs	r4, #0
 8008a84:	4626      	mov	r6, r4
 8008a86:	e7e1      	b.n	8008a4c <_dtoa_r+0x95c>
 8008a88:	46c2      	mov	sl, r8
 8008a8a:	4626      	mov	r6, r4
 8008a8c:	e596      	b.n	80085bc <_dtoa_r+0x4cc>
 8008a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 80fd 	beq.w	8008c94 <_dtoa_r+0xba4>
 8008a9a:	2f00      	cmp	r7, #0
 8008a9c:	dd05      	ble.n	8008aaa <_dtoa_r+0x9ba>
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	463a      	mov	r2, r7
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f000 fb3a 	bl	800911c <__lshift>
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	f1b8 0f00 	cmp.w	r8, #0
 8008aae:	d05c      	beq.n	8008b6a <_dtoa_r+0xa7a>
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	6871      	ldr	r1, [r6, #4]
 8008ab4:	f000 f924 	bl	8008d00 <_Balloc>
 8008ab8:	4607      	mov	r7, r0
 8008aba:	b928      	cbnz	r0, 8008ac8 <_dtoa_r+0x9d8>
 8008abc:	4602      	mov	r2, r0
 8008abe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ac2:	4b7f      	ldr	r3, [pc, #508]	; (8008cc0 <_dtoa_r+0xbd0>)
 8008ac4:	f7ff bb28 	b.w	8008118 <_dtoa_r+0x28>
 8008ac8:	6932      	ldr	r2, [r6, #16]
 8008aca:	f106 010c 	add.w	r1, r6, #12
 8008ace:	3202      	adds	r2, #2
 8008ad0:	0092      	lsls	r2, r2, #2
 8008ad2:	300c      	adds	r0, #12
 8008ad4:	f7fe fda2 	bl	800761c <memcpy>
 8008ad8:	2201      	movs	r2, #1
 8008ada:	4639      	mov	r1, r7
 8008adc:	4628      	mov	r0, r5
 8008ade:	f000 fb1d 	bl	800911c <__lshift>
 8008ae2:	46b0      	mov	r8, r6
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	9b03      	ldr	r3, [sp, #12]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	9308      	str	r3, [sp, #32]
 8008aec:	9b03      	ldr	r3, [sp, #12]
 8008aee:	444b      	add	r3, r9
 8008af0:	930a      	str	r3, [sp, #40]	; 0x28
 8008af2:	9b04      	ldr	r3, [sp, #16]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	9309      	str	r3, [sp, #36]	; 0x24
 8008afa:	9b08      	ldr	r3, [sp, #32]
 8008afc:	4621      	mov	r1, r4
 8008afe:	3b01      	subs	r3, #1
 8008b00:	4658      	mov	r0, fp
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	f7ff fa68 	bl	8007fd8 <quorem>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	3330      	adds	r3, #48	; 0x30
 8008b0e:	9006      	str	r0, [sp, #24]
 8008b10:	4658      	mov	r0, fp
 8008b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b14:	f000 fb72 	bl	80091fc <__mcmp>
 8008b18:	4632      	mov	r2, r6
 8008b1a:	4681      	mov	r9, r0
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f000 fb88 	bl	8009234 <__mdiff>
 8008b24:	68c2      	ldr	r2, [r0, #12]
 8008b26:	4607      	mov	r7, r0
 8008b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b2a:	bb02      	cbnz	r2, 8008b6e <_dtoa_r+0xa7e>
 8008b2c:	4601      	mov	r1, r0
 8008b2e:	4658      	mov	r0, fp
 8008b30:	f000 fb64 	bl	80091fc <__mcmp>
 8008b34:	4602      	mov	r2, r0
 8008b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b38:	4639      	mov	r1, r7
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008b40:	f000 f91e 	bl	8008d80 <_Bfree>
 8008b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b48:	9f08      	ldr	r7, [sp, #32]
 8008b4a:	ea43 0102 	orr.w	r1, r3, r2
 8008b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b50:	430b      	orrs	r3, r1
 8008b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b54:	d10d      	bne.n	8008b72 <_dtoa_r+0xa82>
 8008b56:	2b39      	cmp	r3, #57	; 0x39
 8008b58:	d029      	beq.n	8008bae <_dtoa_r+0xabe>
 8008b5a:	f1b9 0f00 	cmp.w	r9, #0
 8008b5e:	dd01      	ble.n	8008b64 <_dtoa_r+0xa74>
 8008b60:	9b06      	ldr	r3, [sp, #24]
 8008b62:	3331      	adds	r3, #49	; 0x31
 8008b64:	9a04      	ldr	r2, [sp, #16]
 8008b66:	7013      	strb	r3, [r2, #0]
 8008b68:	e776      	b.n	8008a58 <_dtoa_r+0x968>
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	e7b9      	b.n	8008ae2 <_dtoa_r+0x9f2>
 8008b6e:	2201      	movs	r2, #1
 8008b70:	e7e2      	b.n	8008b38 <_dtoa_r+0xa48>
 8008b72:	f1b9 0f00 	cmp.w	r9, #0
 8008b76:	db06      	blt.n	8008b86 <_dtoa_r+0xa96>
 8008b78:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008b7a:	ea41 0909 	orr.w	r9, r1, r9
 8008b7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b80:	ea59 0101 	orrs.w	r1, r9, r1
 8008b84:	d120      	bne.n	8008bc8 <_dtoa_r+0xad8>
 8008b86:	2a00      	cmp	r2, #0
 8008b88:	ddec      	ble.n	8008b64 <_dtoa_r+0xa74>
 8008b8a:	4659      	mov	r1, fp
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	4628      	mov	r0, r5
 8008b90:	9308      	str	r3, [sp, #32]
 8008b92:	f000 fac3 	bl	800911c <__lshift>
 8008b96:	4621      	mov	r1, r4
 8008b98:	4683      	mov	fp, r0
 8008b9a:	f000 fb2f 	bl	80091fc <__mcmp>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	9b08      	ldr	r3, [sp, #32]
 8008ba2:	dc02      	bgt.n	8008baa <_dtoa_r+0xaba>
 8008ba4:	d1de      	bne.n	8008b64 <_dtoa_r+0xa74>
 8008ba6:	07da      	lsls	r2, r3, #31
 8008ba8:	d5dc      	bpl.n	8008b64 <_dtoa_r+0xa74>
 8008baa:	2b39      	cmp	r3, #57	; 0x39
 8008bac:	d1d8      	bne.n	8008b60 <_dtoa_r+0xa70>
 8008bae:	2339      	movs	r3, #57	; 0x39
 8008bb0:	9a04      	ldr	r2, [sp, #16]
 8008bb2:	7013      	strb	r3, [r2, #0]
 8008bb4:	463b      	mov	r3, r7
 8008bb6:	461f      	mov	r7, r3
 8008bb8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	2a39      	cmp	r2, #57	; 0x39
 8008bc0:	d050      	beq.n	8008c64 <_dtoa_r+0xb74>
 8008bc2:	3201      	adds	r2, #1
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	e747      	b.n	8008a58 <_dtoa_r+0x968>
 8008bc8:	2a00      	cmp	r2, #0
 8008bca:	dd03      	ble.n	8008bd4 <_dtoa_r+0xae4>
 8008bcc:	2b39      	cmp	r3, #57	; 0x39
 8008bce:	d0ee      	beq.n	8008bae <_dtoa_r+0xabe>
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	e7c7      	b.n	8008b64 <_dtoa_r+0xa74>
 8008bd4:	9a08      	ldr	r2, [sp, #32]
 8008bd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bd8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008bdc:	428a      	cmp	r2, r1
 8008bde:	d02a      	beq.n	8008c36 <_dtoa_r+0xb46>
 8008be0:	4659      	mov	r1, fp
 8008be2:	2300      	movs	r3, #0
 8008be4:	220a      	movs	r2, #10
 8008be6:	4628      	mov	r0, r5
 8008be8:	f000 f8ec 	bl	8008dc4 <__multadd>
 8008bec:	45b0      	cmp	r8, r6
 8008bee:	4683      	mov	fp, r0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	f04f 020a 	mov.w	r2, #10
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	d107      	bne.n	8008c0e <_dtoa_r+0xb1e>
 8008bfe:	f000 f8e1 	bl	8008dc4 <__multadd>
 8008c02:	4680      	mov	r8, r0
 8008c04:	4606      	mov	r6, r0
 8008c06:	9b08      	ldr	r3, [sp, #32]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	9308      	str	r3, [sp, #32]
 8008c0c:	e775      	b.n	8008afa <_dtoa_r+0xa0a>
 8008c0e:	f000 f8d9 	bl	8008dc4 <__multadd>
 8008c12:	4631      	mov	r1, r6
 8008c14:	4680      	mov	r8, r0
 8008c16:	2300      	movs	r3, #0
 8008c18:	220a      	movs	r2, #10
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f000 f8d2 	bl	8008dc4 <__multadd>
 8008c20:	4606      	mov	r6, r0
 8008c22:	e7f0      	b.n	8008c06 <_dtoa_r+0xb16>
 8008c24:	f1b9 0f00 	cmp.w	r9, #0
 8008c28:	bfcc      	ite	gt
 8008c2a:	464f      	movgt	r7, r9
 8008c2c:	2701      	movle	r7, #1
 8008c2e:	f04f 0800 	mov.w	r8, #0
 8008c32:	9a03      	ldr	r2, [sp, #12]
 8008c34:	4417      	add	r7, r2
 8008c36:	4659      	mov	r1, fp
 8008c38:	2201      	movs	r2, #1
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	9308      	str	r3, [sp, #32]
 8008c3e:	f000 fa6d 	bl	800911c <__lshift>
 8008c42:	4621      	mov	r1, r4
 8008c44:	4683      	mov	fp, r0
 8008c46:	f000 fad9 	bl	80091fc <__mcmp>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	dcb2      	bgt.n	8008bb4 <_dtoa_r+0xac4>
 8008c4e:	d102      	bne.n	8008c56 <_dtoa_r+0xb66>
 8008c50:	9b08      	ldr	r3, [sp, #32]
 8008c52:	07db      	lsls	r3, r3, #31
 8008c54:	d4ae      	bmi.n	8008bb4 <_dtoa_r+0xac4>
 8008c56:	463b      	mov	r3, r7
 8008c58:	461f      	mov	r7, r3
 8008c5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c5e:	2a30      	cmp	r2, #48	; 0x30
 8008c60:	d0fa      	beq.n	8008c58 <_dtoa_r+0xb68>
 8008c62:	e6f9      	b.n	8008a58 <_dtoa_r+0x968>
 8008c64:	9a03      	ldr	r2, [sp, #12]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d1a5      	bne.n	8008bb6 <_dtoa_r+0xac6>
 8008c6a:	2331      	movs	r3, #49	; 0x31
 8008c6c:	f10a 0a01 	add.w	sl, sl, #1
 8008c70:	e779      	b.n	8008b66 <_dtoa_r+0xa76>
 8008c72:	4b14      	ldr	r3, [pc, #80]	; (8008cc4 <_dtoa_r+0xbd4>)
 8008c74:	f7ff baa8 	b.w	80081c8 <_dtoa_r+0xd8>
 8008c78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f47f aa81 	bne.w	8008182 <_dtoa_r+0x92>
 8008c80:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <_dtoa_r+0xbd8>)
 8008c82:	f7ff baa1 	b.w	80081c8 <_dtoa_r+0xd8>
 8008c86:	f1b9 0f00 	cmp.w	r9, #0
 8008c8a:	dc03      	bgt.n	8008c94 <_dtoa_r+0xba4>
 8008c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	f73f aecb 	bgt.w	8008a2a <_dtoa_r+0x93a>
 8008c94:	9f03      	ldr	r7, [sp, #12]
 8008c96:	4621      	mov	r1, r4
 8008c98:	4658      	mov	r0, fp
 8008c9a:	f7ff f99d 	bl	8007fd8 <quorem>
 8008c9e:	9a03      	ldr	r2, [sp, #12]
 8008ca0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008ca4:	f807 3b01 	strb.w	r3, [r7], #1
 8008ca8:	1aba      	subs	r2, r7, r2
 8008caa:	4591      	cmp	r9, r2
 8008cac:	ddba      	ble.n	8008c24 <_dtoa_r+0xb34>
 8008cae:	4659      	mov	r1, fp
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	220a      	movs	r2, #10
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f000 f885 	bl	8008dc4 <__multadd>
 8008cba:	4683      	mov	fp, r0
 8008cbc:	e7eb      	b.n	8008c96 <_dtoa_r+0xba6>
 8008cbe:	bf00      	nop
 8008cc0:	0800aabb 	.word	0x0800aabb
 8008cc4:	0800aa18 	.word	0x0800aa18
 8008cc8:	0800aa3c 	.word	0x0800aa3c

08008ccc <_localeconv_r>:
 8008ccc:	4800      	ldr	r0, [pc, #0]	; (8008cd0 <_localeconv_r+0x4>)
 8008cce:	4770      	bx	lr
 8008cd0:	20000178 	.word	0x20000178

08008cd4 <malloc>:
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <malloc+0xc>)
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	f000 bc0f 	b.w	80094fc <_malloc_r>
 8008cde:	bf00      	nop
 8008ce0:	20000024 	.word	0x20000024

08008ce4 <memchr>:
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	b2c9      	uxtb	r1, r1
 8008cea:	4402      	add	r2, r0
 8008cec:	4293      	cmp	r3, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	d101      	bne.n	8008cf6 <memchr+0x12>
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	e003      	b.n	8008cfe <memchr+0x1a>
 8008cf6:	7804      	ldrb	r4, [r0, #0]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	428c      	cmp	r4, r1
 8008cfc:	d1f6      	bne.n	8008cec <memchr+0x8>
 8008cfe:	bd10      	pop	{r4, pc}

08008d00 <_Balloc>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d04:	4604      	mov	r4, r0
 8008d06:	460d      	mov	r5, r1
 8008d08:	b976      	cbnz	r6, 8008d28 <_Balloc+0x28>
 8008d0a:	2010      	movs	r0, #16
 8008d0c:	f7ff ffe2 	bl	8008cd4 <malloc>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6260      	str	r0, [r4, #36]	; 0x24
 8008d14:	b920      	cbnz	r0, 8008d20 <_Balloc+0x20>
 8008d16:	2166      	movs	r1, #102	; 0x66
 8008d18:	4b17      	ldr	r3, [pc, #92]	; (8008d78 <_Balloc+0x78>)
 8008d1a:	4818      	ldr	r0, [pc, #96]	; (8008d7c <_Balloc+0x7c>)
 8008d1c:	f000 fdce 	bl	80098bc <__assert_func>
 8008d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d24:	6006      	str	r6, [r0, #0]
 8008d26:	60c6      	str	r6, [r0, #12]
 8008d28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d2a:	68f3      	ldr	r3, [r6, #12]
 8008d2c:	b183      	cbz	r3, 8008d50 <_Balloc+0x50>
 8008d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d36:	b9b8      	cbnz	r0, 8008d68 <_Balloc+0x68>
 8008d38:	2101      	movs	r1, #1
 8008d3a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d3e:	1d72      	adds	r2, r6, #5
 8008d40:	4620      	mov	r0, r4
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	f000 fb5e 	bl	8009404 <_calloc_r>
 8008d48:	b160      	cbz	r0, 8008d64 <_Balloc+0x64>
 8008d4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d4e:	e00e      	b.n	8008d6e <_Balloc+0x6e>
 8008d50:	2221      	movs	r2, #33	; 0x21
 8008d52:	2104      	movs	r1, #4
 8008d54:	4620      	mov	r0, r4
 8008d56:	f000 fb55 	bl	8009404 <_calloc_r>
 8008d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d5c:	60f0      	str	r0, [r6, #12]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e4      	bne.n	8008d2e <_Balloc+0x2e>
 8008d64:	2000      	movs	r0, #0
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
 8008d68:	6802      	ldr	r2, [r0, #0]
 8008d6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d74:	e7f7      	b.n	8008d66 <_Balloc+0x66>
 8008d76:	bf00      	nop
 8008d78:	0800aa49 	.word	0x0800aa49
 8008d7c:	0800aacc 	.word	0x0800aacc

08008d80 <_Bfree>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d84:	4605      	mov	r5, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	b976      	cbnz	r6, 8008da8 <_Bfree+0x28>
 8008d8a:	2010      	movs	r0, #16
 8008d8c:	f7ff ffa2 	bl	8008cd4 <malloc>
 8008d90:	4602      	mov	r2, r0
 8008d92:	6268      	str	r0, [r5, #36]	; 0x24
 8008d94:	b920      	cbnz	r0, 8008da0 <_Bfree+0x20>
 8008d96:	218a      	movs	r1, #138	; 0x8a
 8008d98:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <_Bfree+0x3c>)
 8008d9a:	4809      	ldr	r0, [pc, #36]	; (8008dc0 <_Bfree+0x40>)
 8008d9c:	f000 fd8e 	bl	80098bc <__assert_func>
 8008da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008da4:	6006      	str	r6, [r0, #0]
 8008da6:	60c6      	str	r6, [r0, #12]
 8008da8:	b13c      	cbz	r4, 8008dba <_Bfree+0x3a>
 8008daa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008dac:	6862      	ldr	r2, [r4, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008db4:	6021      	str	r1, [r4, #0]
 8008db6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	0800aa49 	.word	0x0800aa49
 8008dc0:	0800aacc 	.word	0x0800aacc

08008dc4 <__multadd>:
 8008dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc8:	4607      	mov	r7, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	461e      	mov	r6, r3
 8008dce:	2000      	movs	r0, #0
 8008dd0:	690d      	ldr	r5, [r1, #16]
 8008dd2:	f101 0c14 	add.w	ip, r1, #20
 8008dd6:	f8dc 3000 	ldr.w	r3, [ip]
 8008dda:	3001      	adds	r0, #1
 8008ddc:	b299      	uxth	r1, r3
 8008dde:	fb02 6101 	mla	r1, r2, r1, r6
 8008de2:	0c1e      	lsrs	r6, r3, #16
 8008de4:	0c0b      	lsrs	r3, r1, #16
 8008de6:	fb02 3306 	mla	r3, r2, r6, r3
 8008dea:	b289      	uxth	r1, r1
 8008dec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008df0:	4285      	cmp	r5, r0
 8008df2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008df6:	f84c 1b04 	str.w	r1, [ip], #4
 8008dfa:	dcec      	bgt.n	8008dd6 <__multadd+0x12>
 8008dfc:	b30e      	cbz	r6, 8008e42 <__multadd+0x7e>
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	42ab      	cmp	r3, r5
 8008e02:	dc19      	bgt.n	8008e38 <__multadd+0x74>
 8008e04:	6861      	ldr	r1, [r4, #4]
 8008e06:	4638      	mov	r0, r7
 8008e08:	3101      	adds	r1, #1
 8008e0a:	f7ff ff79 	bl	8008d00 <_Balloc>
 8008e0e:	4680      	mov	r8, r0
 8008e10:	b928      	cbnz	r0, 8008e1e <__multadd+0x5a>
 8008e12:	4602      	mov	r2, r0
 8008e14:	21b5      	movs	r1, #181	; 0xb5
 8008e16:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <__multadd+0x84>)
 8008e18:	480c      	ldr	r0, [pc, #48]	; (8008e4c <__multadd+0x88>)
 8008e1a:	f000 fd4f 	bl	80098bc <__assert_func>
 8008e1e:	6922      	ldr	r2, [r4, #16]
 8008e20:	f104 010c 	add.w	r1, r4, #12
 8008e24:	3202      	adds	r2, #2
 8008e26:	0092      	lsls	r2, r2, #2
 8008e28:	300c      	adds	r0, #12
 8008e2a:	f7fe fbf7 	bl	800761c <memcpy>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4638      	mov	r0, r7
 8008e32:	f7ff ffa5 	bl	8008d80 <_Bfree>
 8008e36:	4644      	mov	r4, r8
 8008e38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e3c:	3501      	adds	r5, #1
 8008e3e:	615e      	str	r6, [r3, #20]
 8008e40:	6125      	str	r5, [r4, #16]
 8008e42:	4620      	mov	r0, r4
 8008e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e48:	0800aabb 	.word	0x0800aabb
 8008e4c:	0800aacc 	.word	0x0800aacc

08008e50 <__hi0bits>:
 8008e50:	0c02      	lsrs	r2, r0, #16
 8008e52:	0412      	lsls	r2, r2, #16
 8008e54:	4603      	mov	r3, r0
 8008e56:	b9ca      	cbnz	r2, 8008e8c <__hi0bits+0x3c>
 8008e58:	0403      	lsls	r3, r0, #16
 8008e5a:	2010      	movs	r0, #16
 8008e5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e60:	bf04      	itt	eq
 8008e62:	021b      	lsleq	r3, r3, #8
 8008e64:	3008      	addeq	r0, #8
 8008e66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e6a:	bf04      	itt	eq
 8008e6c:	011b      	lsleq	r3, r3, #4
 8008e6e:	3004      	addeq	r0, #4
 8008e70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e74:	bf04      	itt	eq
 8008e76:	009b      	lsleq	r3, r3, #2
 8008e78:	3002      	addeq	r0, #2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	db05      	blt.n	8008e8a <__hi0bits+0x3a>
 8008e7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008e82:	f100 0001 	add.w	r0, r0, #1
 8008e86:	bf08      	it	eq
 8008e88:	2020      	moveq	r0, #32
 8008e8a:	4770      	bx	lr
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e7e5      	b.n	8008e5c <__hi0bits+0xc>

08008e90 <__lo0bits>:
 8008e90:	6803      	ldr	r3, [r0, #0]
 8008e92:	4602      	mov	r2, r0
 8008e94:	f013 0007 	ands.w	r0, r3, #7
 8008e98:	d00b      	beq.n	8008eb2 <__lo0bits+0x22>
 8008e9a:	07d9      	lsls	r1, r3, #31
 8008e9c:	d421      	bmi.n	8008ee2 <__lo0bits+0x52>
 8008e9e:	0798      	lsls	r0, r3, #30
 8008ea0:	bf49      	itett	mi
 8008ea2:	085b      	lsrmi	r3, r3, #1
 8008ea4:	089b      	lsrpl	r3, r3, #2
 8008ea6:	2001      	movmi	r0, #1
 8008ea8:	6013      	strmi	r3, [r2, #0]
 8008eaa:	bf5c      	itt	pl
 8008eac:	2002      	movpl	r0, #2
 8008eae:	6013      	strpl	r3, [r2, #0]
 8008eb0:	4770      	bx	lr
 8008eb2:	b299      	uxth	r1, r3
 8008eb4:	b909      	cbnz	r1, 8008eba <__lo0bits+0x2a>
 8008eb6:	2010      	movs	r0, #16
 8008eb8:	0c1b      	lsrs	r3, r3, #16
 8008eba:	b2d9      	uxtb	r1, r3
 8008ebc:	b909      	cbnz	r1, 8008ec2 <__lo0bits+0x32>
 8008ebe:	3008      	adds	r0, #8
 8008ec0:	0a1b      	lsrs	r3, r3, #8
 8008ec2:	0719      	lsls	r1, r3, #28
 8008ec4:	bf04      	itt	eq
 8008ec6:	091b      	lsreq	r3, r3, #4
 8008ec8:	3004      	addeq	r0, #4
 8008eca:	0799      	lsls	r1, r3, #30
 8008ecc:	bf04      	itt	eq
 8008ece:	089b      	lsreq	r3, r3, #2
 8008ed0:	3002      	addeq	r0, #2
 8008ed2:	07d9      	lsls	r1, r3, #31
 8008ed4:	d403      	bmi.n	8008ede <__lo0bits+0x4e>
 8008ed6:	085b      	lsrs	r3, r3, #1
 8008ed8:	f100 0001 	add.w	r0, r0, #1
 8008edc:	d003      	beq.n	8008ee6 <__lo0bits+0x56>
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	4770      	bx	lr
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	4770      	bx	lr
 8008ee6:	2020      	movs	r0, #32
 8008ee8:	4770      	bx	lr
	...

08008eec <__i2b>:
 8008eec:	b510      	push	{r4, lr}
 8008eee:	460c      	mov	r4, r1
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	f7ff ff05 	bl	8008d00 <_Balloc>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	b928      	cbnz	r0, 8008f06 <__i2b+0x1a>
 8008efa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008efe:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <__i2b+0x24>)
 8008f00:	4804      	ldr	r0, [pc, #16]	; (8008f14 <__i2b+0x28>)
 8008f02:	f000 fcdb 	bl	80098bc <__assert_func>
 8008f06:	2301      	movs	r3, #1
 8008f08:	6144      	str	r4, [r0, #20]
 8008f0a:	6103      	str	r3, [r0, #16]
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	bf00      	nop
 8008f10:	0800aabb 	.word	0x0800aabb
 8008f14:	0800aacc 	.word	0x0800aacc

08008f18 <__multiply>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	4691      	mov	r9, r2
 8008f1e:	690a      	ldr	r2, [r1, #16]
 8008f20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f24:	460c      	mov	r4, r1
 8008f26:	429a      	cmp	r2, r3
 8008f28:	bfbe      	ittt	lt
 8008f2a:	460b      	movlt	r3, r1
 8008f2c:	464c      	movlt	r4, r9
 8008f2e:	4699      	movlt	r9, r3
 8008f30:	6927      	ldr	r7, [r4, #16]
 8008f32:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f36:	68a3      	ldr	r3, [r4, #8]
 8008f38:	6861      	ldr	r1, [r4, #4]
 8008f3a:	eb07 060a 	add.w	r6, r7, sl
 8008f3e:	42b3      	cmp	r3, r6
 8008f40:	b085      	sub	sp, #20
 8008f42:	bfb8      	it	lt
 8008f44:	3101      	addlt	r1, #1
 8008f46:	f7ff fedb 	bl	8008d00 <_Balloc>
 8008f4a:	b930      	cbnz	r0, 8008f5a <__multiply+0x42>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	f240 115d 	movw	r1, #349	; 0x15d
 8008f52:	4b43      	ldr	r3, [pc, #268]	; (8009060 <__multiply+0x148>)
 8008f54:	4843      	ldr	r0, [pc, #268]	; (8009064 <__multiply+0x14c>)
 8008f56:	f000 fcb1 	bl	80098bc <__assert_func>
 8008f5a:	f100 0514 	add.w	r5, r0, #20
 8008f5e:	462b      	mov	r3, r5
 8008f60:	2200      	movs	r2, #0
 8008f62:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f66:	4543      	cmp	r3, r8
 8008f68:	d321      	bcc.n	8008fae <__multiply+0x96>
 8008f6a:	f104 0314 	add.w	r3, r4, #20
 8008f6e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f72:	f109 0314 	add.w	r3, r9, #20
 8008f76:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f7a:	9202      	str	r2, [sp, #8]
 8008f7c:	1b3a      	subs	r2, r7, r4
 8008f7e:	3a15      	subs	r2, #21
 8008f80:	f022 0203 	bic.w	r2, r2, #3
 8008f84:	3204      	adds	r2, #4
 8008f86:	f104 0115 	add.w	r1, r4, #21
 8008f8a:	428f      	cmp	r7, r1
 8008f8c:	bf38      	it	cc
 8008f8e:	2204      	movcc	r2, #4
 8008f90:	9201      	str	r2, [sp, #4]
 8008f92:	9a02      	ldr	r2, [sp, #8]
 8008f94:	9303      	str	r3, [sp, #12]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d80c      	bhi.n	8008fb4 <__multiply+0x9c>
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	dd03      	ble.n	8008fa6 <__multiply+0x8e>
 8008f9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d059      	beq.n	800905a <__multiply+0x142>
 8008fa6:	6106      	str	r6, [r0, #16]
 8008fa8:	b005      	add	sp, #20
 8008faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fae:	f843 2b04 	str.w	r2, [r3], #4
 8008fb2:	e7d8      	b.n	8008f66 <__multiply+0x4e>
 8008fb4:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fb8:	f1ba 0f00 	cmp.w	sl, #0
 8008fbc:	d023      	beq.n	8009006 <__multiply+0xee>
 8008fbe:	46a9      	mov	r9, r5
 8008fc0:	f04f 0c00 	mov.w	ip, #0
 8008fc4:	f104 0e14 	add.w	lr, r4, #20
 8008fc8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008fcc:	f8d9 1000 	ldr.w	r1, [r9]
 8008fd0:	fa1f fb82 	uxth.w	fp, r2
 8008fd4:	b289      	uxth	r1, r1
 8008fd6:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fda:	4461      	add	r1, ip
 8008fdc:	f8d9 c000 	ldr.w	ip, [r9]
 8008fe0:	0c12      	lsrs	r2, r2, #16
 8008fe2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008fe6:	fb0a c202 	mla	r2, sl, r2, ip
 8008fea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fee:	b289      	uxth	r1, r1
 8008ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ff4:	4577      	cmp	r7, lr
 8008ff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ffa:	f849 1b04 	str.w	r1, [r9], #4
 8008ffe:	d8e3      	bhi.n	8008fc8 <__multiply+0xb0>
 8009000:	9a01      	ldr	r2, [sp, #4]
 8009002:	f845 c002 	str.w	ip, [r5, r2]
 8009006:	9a03      	ldr	r2, [sp, #12]
 8009008:	3304      	adds	r3, #4
 800900a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800900e:	f1b9 0f00 	cmp.w	r9, #0
 8009012:	d020      	beq.n	8009056 <__multiply+0x13e>
 8009014:	46ae      	mov	lr, r5
 8009016:	f04f 0a00 	mov.w	sl, #0
 800901a:	6829      	ldr	r1, [r5, #0]
 800901c:	f104 0c14 	add.w	ip, r4, #20
 8009020:	f8bc b000 	ldrh.w	fp, [ip]
 8009024:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009028:	b289      	uxth	r1, r1
 800902a:	fb09 220b 	mla	r2, r9, fp, r2
 800902e:	4492      	add	sl, r2
 8009030:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009034:	f84e 1b04 	str.w	r1, [lr], #4
 8009038:	f85c 2b04 	ldr.w	r2, [ip], #4
 800903c:	f8be 1000 	ldrh.w	r1, [lr]
 8009040:	0c12      	lsrs	r2, r2, #16
 8009042:	fb09 1102 	mla	r1, r9, r2, r1
 8009046:	4567      	cmp	r7, ip
 8009048:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800904c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009050:	d8e6      	bhi.n	8009020 <__multiply+0x108>
 8009052:	9a01      	ldr	r2, [sp, #4]
 8009054:	50a9      	str	r1, [r5, r2]
 8009056:	3504      	adds	r5, #4
 8009058:	e79b      	b.n	8008f92 <__multiply+0x7a>
 800905a:	3e01      	subs	r6, #1
 800905c:	e79d      	b.n	8008f9a <__multiply+0x82>
 800905e:	bf00      	nop
 8009060:	0800aabb 	.word	0x0800aabb
 8009064:	0800aacc 	.word	0x0800aacc

08009068 <__pow5mult>:
 8009068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800906c:	4615      	mov	r5, r2
 800906e:	f012 0203 	ands.w	r2, r2, #3
 8009072:	4606      	mov	r6, r0
 8009074:	460f      	mov	r7, r1
 8009076:	d007      	beq.n	8009088 <__pow5mult+0x20>
 8009078:	4c25      	ldr	r4, [pc, #148]	; (8009110 <__pow5mult+0xa8>)
 800907a:	3a01      	subs	r2, #1
 800907c:	2300      	movs	r3, #0
 800907e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009082:	f7ff fe9f 	bl	8008dc4 <__multadd>
 8009086:	4607      	mov	r7, r0
 8009088:	10ad      	asrs	r5, r5, #2
 800908a:	d03d      	beq.n	8009108 <__pow5mult+0xa0>
 800908c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800908e:	b97c      	cbnz	r4, 80090b0 <__pow5mult+0x48>
 8009090:	2010      	movs	r0, #16
 8009092:	f7ff fe1f 	bl	8008cd4 <malloc>
 8009096:	4602      	mov	r2, r0
 8009098:	6270      	str	r0, [r6, #36]	; 0x24
 800909a:	b928      	cbnz	r0, 80090a8 <__pow5mult+0x40>
 800909c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090a0:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <__pow5mult+0xac>)
 80090a2:	481d      	ldr	r0, [pc, #116]	; (8009118 <__pow5mult+0xb0>)
 80090a4:	f000 fc0a 	bl	80098bc <__assert_func>
 80090a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090ac:	6004      	str	r4, [r0, #0]
 80090ae:	60c4      	str	r4, [r0, #12]
 80090b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090b8:	b94c      	cbnz	r4, 80090ce <__pow5mult+0x66>
 80090ba:	f240 2171 	movw	r1, #625	; 0x271
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ff14 	bl	8008eec <__i2b>
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	f04f 0900 	mov.w	r9, #0
 80090d2:	07eb      	lsls	r3, r5, #31
 80090d4:	d50a      	bpl.n	80090ec <__pow5mult+0x84>
 80090d6:	4639      	mov	r1, r7
 80090d8:	4622      	mov	r2, r4
 80090da:	4630      	mov	r0, r6
 80090dc:	f7ff ff1c 	bl	8008f18 <__multiply>
 80090e0:	4680      	mov	r8, r0
 80090e2:	4639      	mov	r1, r7
 80090e4:	4630      	mov	r0, r6
 80090e6:	f7ff fe4b 	bl	8008d80 <_Bfree>
 80090ea:	4647      	mov	r7, r8
 80090ec:	106d      	asrs	r5, r5, #1
 80090ee:	d00b      	beq.n	8009108 <__pow5mult+0xa0>
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	b938      	cbnz	r0, 8009104 <__pow5mult+0x9c>
 80090f4:	4622      	mov	r2, r4
 80090f6:	4621      	mov	r1, r4
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7ff ff0d 	bl	8008f18 <__multiply>
 80090fe:	6020      	str	r0, [r4, #0]
 8009100:	f8c0 9000 	str.w	r9, [r0]
 8009104:	4604      	mov	r4, r0
 8009106:	e7e4      	b.n	80090d2 <__pow5mult+0x6a>
 8009108:	4638      	mov	r0, r7
 800910a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910e:	bf00      	nop
 8009110:	0800ac18 	.word	0x0800ac18
 8009114:	0800aa49 	.word	0x0800aa49
 8009118:	0800aacc 	.word	0x0800aacc

0800911c <__lshift>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	460c      	mov	r4, r1
 8009122:	4607      	mov	r7, r0
 8009124:	4691      	mov	r9, r2
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	6849      	ldr	r1, [r1, #4]
 800912a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800912e:	68a3      	ldr	r3, [r4, #8]
 8009130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009134:	f108 0601 	add.w	r6, r8, #1
 8009138:	42b3      	cmp	r3, r6
 800913a:	db0b      	blt.n	8009154 <__lshift+0x38>
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff fddf 	bl	8008d00 <_Balloc>
 8009142:	4605      	mov	r5, r0
 8009144:	b948      	cbnz	r0, 800915a <__lshift+0x3e>
 8009146:	4602      	mov	r2, r0
 8009148:	f240 11d9 	movw	r1, #473	; 0x1d9
 800914c:	4b29      	ldr	r3, [pc, #164]	; (80091f4 <__lshift+0xd8>)
 800914e:	482a      	ldr	r0, [pc, #168]	; (80091f8 <__lshift+0xdc>)
 8009150:	f000 fbb4 	bl	80098bc <__assert_func>
 8009154:	3101      	adds	r1, #1
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	e7ee      	b.n	8009138 <__lshift+0x1c>
 800915a:	2300      	movs	r3, #0
 800915c:	f100 0114 	add.w	r1, r0, #20
 8009160:	f100 0210 	add.w	r2, r0, #16
 8009164:	4618      	mov	r0, r3
 8009166:	4553      	cmp	r3, sl
 8009168:	db37      	blt.n	80091da <__lshift+0xbe>
 800916a:	6920      	ldr	r0, [r4, #16]
 800916c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009170:	f104 0314 	add.w	r3, r4, #20
 8009174:	f019 091f 	ands.w	r9, r9, #31
 8009178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800917c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009180:	d02f      	beq.n	80091e2 <__lshift+0xc6>
 8009182:	468a      	mov	sl, r1
 8009184:	f04f 0c00 	mov.w	ip, #0
 8009188:	f1c9 0e20 	rsb	lr, r9, #32
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	fa02 f209 	lsl.w	r2, r2, r9
 8009192:	ea42 020c 	orr.w	r2, r2, ip
 8009196:	f84a 2b04 	str.w	r2, [sl], #4
 800919a:	f853 2b04 	ldr.w	r2, [r3], #4
 800919e:	4298      	cmp	r0, r3
 80091a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80091a4:	d8f2      	bhi.n	800918c <__lshift+0x70>
 80091a6:	1b03      	subs	r3, r0, r4
 80091a8:	3b15      	subs	r3, #21
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	3304      	adds	r3, #4
 80091b0:	f104 0215 	add.w	r2, r4, #21
 80091b4:	4290      	cmp	r0, r2
 80091b6:	bf38      	it	cc
 80091b8:	2304      	movcc	r3, #4
 80091ba:	f841 c003 	str.w	ip, [r1, r3]
 80091be:	f1bc 0f00 	cmp.w	ip, #0
 80091c2:	d001      	beq.n	80091c8 <__lshift+0xac>
 80091c4:	f108 0602 	add.w	r6, r8, #2
 80091c8:	3e01      	subs	r6, #1
 80091ca:	4638      	mov	r0, r7
 80091cc:	4621      	mov	r1, r4
 80091ce:	612e      	str	r6, [r5, #16]
 80091d0:	f7ff fdd6 	bl	8008d80 <_Bfree>
 80091d4:	4628      	mov	r0, r5
 80091d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091da:	f842 0f04 	str.w	r0, [r2, #4]!
 80091de:	3301      	adds	r3, #1
 80091e0:	e7c1      	b.n	8009166 <__lshift+0x4a>
 80091e2:	3904      	subs	r1, #4
 80091e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e8:	4298      	cmp	r0, r3
 80091ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80091ee:	d8f9      	bhi.n	80091e4 <__lshift+0xc8>
 80091f0:	e7ea      	b.n	80091c8 <__lshift+0xac>
 80091f2:	bf00      	nop
 80091f4:	0800aabb 	.word	0x0800aabb
 80091f8:	0800aacc 	.word	0x0800aacc

080091fc <__mcmp>:
 80091fc:	4603      	mov	r3, r0
 80091fe:	690a      	ldr	r2, [r1, #16]
 8009200:	6900      	ldr	r0, [r0, #16]
 8009202:	b530      	push	{r4, r5, lr}
 8009204:	1a80      	subs	r0, r0, r2
 8009206:	d10d      	bne.n	8009224 <__mcmp+0x28>
 8009208:	3314      	adds	r3, #20
 800920a:	3114      	adds	r1, #20
 800920c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009210:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009214:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800921c:	4295      	cmp	r5, r2
 800921e:	d002      	beq.n	8009226 <__mcmp+0x2a>
 8009220:	d304      	bcc.n	800922c <__mcmp+0x30>
 8009222:	2001      	movs	r0, #1
 8009224:	bd30      	pop	{r4, r5, pc}
 8009226:	42a3      	cmp	r3, r4
 8009228:	d3f4      	bcc.n	8009214 <__mcmp+0x18>
 800922a:	e7fb      	b.n	8009224 <__mcmp+0x28>
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	e7f8      	b.n	8009224 <__mcmp+0x28>
	...

08009234 <__mdiff>:
 8009234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	460d      	mov	r5, r1
 800923a:	4607      	mov	r7, r0
 800923c:	4611      	mov	r1, r2
 800923e:	4628      	mov	r0, r5
 8009240:	4614      	mov	r4, r2
 8009242:	f7ff ffdb 	bl	80091fc <__mcmp>
 8009246:	1e06      	subs	r6, r0, #0
 8009248:	d111      	bne.n	800926e <__mdiff+0x3a>
 800924a:	4631      	mov	r1, r6
 800924c:	4638      	mov	r0, r7
 800924e:	f7ff fd57 	bl	8008d00 <_Balloc>
 8009252:	4602      	mov	r2, r0
 8009254:	b928      	cbnz	r0, 8009262 <__mdiff+0x2e>
 8009256:	f240 2132 	movw	r1, #562	; 0x232
 800925a:	4b3a      	ldr	r3, [pc, #232]	; (8009344 <__mdiff+0x110>)
 800925c:	483a      	ldr	r0, [pc, #232]	; (8009348 <__mdiff+0x114>)
 800925e:	f000 fb2d 	bl	80098bc <__assert_func>
 8009262:	2301      	movs	r3, #1
 8009264:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009268:	4610      	mov	r0, r2
 800926a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926e:	bfa4      	itt	ge
 8009270:	4623      	movge	r3, r4
 8009272:	462c      	movge	r4, r5
 8009274:	4638      	mov	r0, r7
 8009276:	6861      	ldr	r1, [r4, #4]
 8009278:	bfa6      	itte	ge
 800927a:	461d      	movge	r5, r3
 800927c:	2600      	movge	r6, #0
 800927e:	2601      	movlt	r6, #1
 8009280:	f7ff fd3e 	bl	8008d00 <_Balloc>
 8009284:	4602      	mov	r2, r0
 8009286:	b918      	cbnz	r0, 8009290 <__mdiff+0x5c>
 8009288:	f44f 7110 	mov.w	r1, #576	; 0x240
 800928c:	4b2d      	ldr	r3, [pc, #180]	; (8009344 <__mdiff+0x110>)
 800928e:	e7e5      	b.n	800925c <__mdiff+0x28>
 8009290:	f102 0814 	add.w	r8, r2, #20
 8009294:	46c2      	mov	sl, r8
 8009296:	f04f 0c00 	mov.w	ip, #0
 800929a:	6927      	ldr	r7, [r4, #16]
 800929c:	60c6      	str	r6, [r0, #12]
 800929e:	692e      	ldr	r6, [r5, #16]
 80092a0:	f104 0014 	add.w	r0, r4, #20
 80092a4:	f105 0914 	add.w	r9, r5, #20
 80092a8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80092ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092b0:	3410      	adds	r4, #16
 80092b2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80092b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80092ba:	fa1f f18b 	uxth.w	r1, fp
 80092be:	448c      	add	ip, r1
 80092c0:	b299      	uxth	r1, r3
 80092c2:	0c1b      	lsrs	r3, r3, #16
 80092c4:	ebac 0101 	sub.w	r1, ip, r1
 80092c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80092d0:	b289      	uxth	r1, r1
 80092d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80092d6:	454e      	cmp	r6, r9
 80092d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80092dc:	f84a 3b04 	str.w	r3, [sl], #4
 80092e0:	d8e7      	bhi.n	80092b2 <__mdiff+0x7e>
 80092e2:	1b73      	subs	r3, r6, r5
 80092e4:	3b15      	subs	r3, #21
 80092e6:	f023 0303 	bic.w	r3, r3, #3
 80092ea:	3515      	adds	r5, #21
 80092ec:	3304      	adds	r3, #4
 80092ee:	42ae      	cmp	r6, r5
 80092f0:	bf38      	it	cc
 80092f2:	2304      	movcc	r3, #4
 80092f4:	4418      	add	r0, r3
 80092f6:	4443      	add	r3, r8
 80092f8:	461e      	mov	r6, r3
 80092fa:	4605      	mov	r5, r0
 80092fc:	4575      	cmp	r5, lr
 80092fe:	d30e      	bcc.n	800931e <__mdiff+0xea>
 8009300:	f10e 0103 	add.w	r1, lr, #3
 8009304:	1a09      	subs	r1, r1, r0
 8009306:	f021 0103 	bic.w	r1, r1, #3
 800930a:	3803      	subs	r0, #3
 800930c:	4586      	cmp	lr, r0
 800930e:	bf38      	it	cc
 8009310:	2100      	movcc	r1, #0
 8009312:	4419      	add	r1, r3
 8009314:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009318:	b18b      	cbz	r3, 800933e <__mdiff+0x10a>
 800931a:	6117      	str	r7, [r2, #16]
 800931c:	e7a4      	b.n	8009268 <__mdiff+0x34>
 800931e:	f855 8b04 	ldr.w	r8, [r5], #4
 8009322:	fa1f f188 	uxth.w	r1, r8
 8009326:	4461      	add	r1, ip
 8009328:	140c      	asrs	r4, r1, #16
 800932a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800932e:	b289      	uxth	r1, r1
 8009330:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009334:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009338:	f846 1b04 	str.w	r1, [r6], #4
 800933c:	e7de      	b.n	80092fc <__mdiff+0xc8>
 800933e:	3f01      	subs	r7, #1
 8009340:	e7e8      	b.n	8009314 <__mdiff+0xe0>
 8009342:	bf00      	nop
 8009344:	0800aabb 	.word	0x0800aabb
 8009348:	0800aacc 	.word	0x0800aacc

0800934c <__d2b>:
 800934c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009350:	2101      	movs	r1, #1
 8009352:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009356:	4690      	mov	r8, r2
 8009358:	461d      	mov	r5, r3
 800935a:	f7ff fcd1 	bl	8008d00 <_Balloc>
 800935e:	4604      	mov	r4, r0
 8009360:	b930      	cbnz	r0, 8009370 <__d2b+0x24>
 8009362:	4602      	mov	r2, r0
 8009364:	f240 310a 	movw	r1, #778	; 0x30a
 8009368:	4b24      	ldr	r3, [pc, #144]	; (80093fc <__d2b+0xb0>)
 800936a:	4825      	ldr	r0, [pc, #148]	; (8009400 <__d2b+0xb4>)
 800936c:	f000 faa6 	bl	80098bc <__assert_func>
 8009370:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009374:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009378:	bb2d      	cbnz	r5, 80093c6 <__d2b+0x7a>
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	f1b8 0300 	subs.w	r3, r8, #0
 8009380:	d026      	beq.n	80093d0 <__d2b+0x84>
 8009382:	4668      	mov	r0, sp
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	f7ff fd83 	bl	8008e90 <__lo0bits>
 800938a:	9900      	ldr	r1, [sp, #0]
 800938c:	b1f0      	cbz	r0, 80093cc <__d2b+0x80>
 800938e:	9a01      	ldr	r2, [sp, #4]
 8009390:	f1c0 0320 	rsb	r3, r0, #32
 8009394:	fa02 f303 	lsl.w	r3, r2, r3
 8009398:	430b      	orrs	r3, r1
 800939a:	40c2      	lsrs	r2, r0
 800939c:	6163      	str	r3, [r4, #20]
 800939e:	9201      	str	r2, [sp, #4]
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	bf14      	ite	ne
 80093a6:	2102      	movne	r1, #2
 80093a8:	2101      	moveq	r1, #1
 80093aa:	61a3      	str	r3, [r4, #24]
 80093ac:	6121      	str	r1, [r4, #16]
 80093ae:	b1c5      	cbz	r5, 80093e2 <__d2b+0x96>
 80093b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093b4:	4405      	add	r5, r0
 80093b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093ba:	603d      	str	r5, [r7, #0]
 80093bc:	6030      	str	r0, [r6, #0]
 80093be:	4620      	mov	r0, r4
 80093c0:	b002      	add	sp, #8
 80093c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093ca:	e7d6      	b.n	800937a <__d2b+0x2e>
 80093cc:	6161      	str	r1, [r4, #20]
 80093ce:	e7e7      	b.n	80093a0 <__d2b+0x54>
 80093d0:	a801      	add	r0, sp, #4
 80093d2:	f7ff fd5d 	bl	8008e90 <__lo0bits>
 80093d6:	2101      	movs	r1, #1
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	6121      	str	r1, [r4, #16]
 80093dc:	6163      	str	r3, [r4, #20]
 80093de:	3020      	adds	r0, #32
 80093e0:	e7e5      	b.n	80093ae <__d2b+0x62>
 80093e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80093e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093ea:	6038      	str	r0, [r7, #0]
 80093ec:	6918      	ldr	r0, [r3, #16]
 80093ee:	f7ff fd2f 	bl	8008e50 <__hi0bits>
 80093f2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80093f6:	6031      	str	r1, [r6, #0]
 80093f8:	e7e1      	b.n	80093be <__d2b+0x72>
 80093fa:	bf00      	nop
 80093fc:	0800aabb 	.word	0x0800aabb
 8009400:	0800aacc 	.word	0x0800aacc

08009404 <_calloc_r>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	fba1 5402 	umull	r5, r4, r1, r2
 800940a:	b934      	cbnz	r4, 800941a <_calloc_r+0x16>
 800940c:	4629      	mov	r1, r5
 800940e:	f000 f875 	bl	80094fc <_malloc_r>
 8009412:	4606      	mov	r6, r0
 8009414:	b928      	cbnz	r0, 8009422 <_calloc_r+0x1e>
 8009416:	4630      	mov	r0, r6
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	220c      	movs	r2, #12
 800941c:	2600      	movs	r6, #0
 800941e:	6002      	str	r2, [r0, #0]
 8009420:	e7f9      	b.n	8009416 <_calloc_r+0x12>
 8009422:	462a      	mov	r2, r5
 8009424:	4621      	mov	r1, r4
 8009426:	f7fe f907 	bl	8007638 <memset>
 800942a:	e7f4      	b.n	8009416 <_calloc_r+0x12>

0800942c <_free_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4605      	mov	r5, r0
 8009430:	2900      	cmp	r1, #0
 8009432:	d040      	beq.n	80094b6 <_free_r+0x8a>
 8009434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009438:	1f0c      	subs	r4, r1, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfb8      	it	lt
 800943e:	18e4      	addlt	r4, r4, r3
 8009440:	f000 fa98 	bl	8009974 <__malloc_lock>
 8009444:	4a1c      	ldr	r2, [pc, #112]	; (80094b8 <_free_r+0x8c>)
 8009446:	6813      	ldr	r3, [r2, #0]
 8009448:	b933      	cbnz	r3, 8009458 <_free_r+0x2c>
 800944a:	6063      	str	r3, [r4, #4]
 800944c:	6014      	str	r4, [r2, #0]
 800944e:	4628      	mov	r0, r5
 8009450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009454:	f000 ba94 	b.w	8009980 <__malloc_unlock>
 8009458:	42a3      	cmp	r3, r4
 800945a:	d908      	bls.n	800946e <_free_r+0x42>
 800945c:	6820      	ldr	r0, [r4, #0]
 800945e:	1821      	adds	r1, r4, r0
 8009460:	428b      	cmp	r3, r1
 8009462:	bf01      	itttt	eq
 8009464:	6819      	ldreq	r1, [r3, #0]
 8009466:	685b      	ldreq	r3, [r3, #4]
 8009468:	1809      	addeq	r1, r1, r0
 800946a:	6021      	streq	r1, [r4, #0]
 800946c:	e7ed      	b.n	800944a <_free_r+0x1e>
 800946e:	461a      	mov	r2, r3
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	b10b      	cbz	r3, 8009478 <_free_r+0x4c>
 8009474:	42a3      	cmp	r3, r4
 8009476:	d9fa      	bls.n	800946e <_free_r+0x42>
 8009478:	6811      	ldr	r1, [r2, #0]
 800947a:	1850      	adds	r0, r2, r1
 800947c:	42a0      	cmp	r0, r4
 800947e:	d10b      	bne.n	8009498 <_free_r+0x6c>
 8009480:	6820      	ldr	r0, [r4, #0]
 8009482:	4401      	add	r1, r0
 8009484:	1850      	adds	r0, r2, r1
 8009486:	4283      	cmp	r3, r0
 8009488:	6011      	str	r1, [r2, #0]
 800948a:	d1e0      	bne.n	800944e <_free_r+0x22>
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	4401      	add	r1, r0
 8009492:	6011      	str	r1, [r2, #0]
 8009494:	6053      	str	r3, [r2, #4]
 8009496:	e7da      	b.n	800944e <_free_r+0x22>
 8009498:	d902      	bls.n	80094a0 <_free_r+0x74>
 800949a:	230c      	movs	r3, #12
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	e7d6      	b.n	800944e <_free_r+0x22>
 80094a0:	6820      	ldr	r0, [r4, #0]
 80094a2:	1821      	adds	r1, r4, r0
 80094a4:	428b      	cmp	r3, r1
 80094a6:	bf01      	itttt	eq
 80094a8:	6819      	ldreq	r1, [r3, #0]
 80094aa:	685b      	ldreq	r3, [r3, #4]
 80094ac:	1809      	addeq	r1, r1, r0
 80094ae:	6021      	streq	r1, [r4, #0]
 80094b0:	6063      	str	r3, [r4, #4]
 80094b2:	6054      	str	r4, [r2, #4]
 80094b4:	e7cb      	b.n	800944e <_free_r+0x22>
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000378 	.word	0x20000378

080094bc <sbrk_aligned>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	4e0e      	ldr	r6, [pc, #56]	; (80094f8 <sbrk_aligned+0x3c>)
 80094c0:	460c      	mov	r4, r1
 80094c2:	6831      	ldr	r1, [r6, #0]
 80094c4:	4605      	mov	r5, r0
 80094c6:	b911      	cbnz	r1, 80094ce <sbrk_aligned+0x12>
 80094c8:	f000 f9e8 	bl	800989c <_sbrk_r>
 80094cc:	6030      	str	r0, [r6, #0]
 80094ce:	4621      	mov	r1, r4
 80094d0:	4628      	mov	r0, r5
 80094d2:	f000 f9e3 	bl	800989c <_sbrk_r>
 80094d6:	1c43      	adds	r3, r0, #1
 80094d8:	d00a      	beq.n	80094f0 <sbrk_aligned+0x34>
 80094da:	1cc4      	adds	r4, r0, #3
 80094dc:	f024 0403 	bic.w	r4, r4, #3
 80094e0:	42a0      	cmp	r0, r4
 80094e2:	d007      	beq.n	80094f4 <sbrk_aligned+0x38>
 80094e4:	1a21      	subs	r1, r4, r0
 80094e6:	4628      	mov	r0, r5
 80094e8:	f000 f9d8 	bl	800989c <_sbrk_r>
 80094ec:	3001      	adds	r0, #1
 80094ee:	d101      	bne.n	80094f4 <sbrk_aligned+0x38>
 80094f0:	f04f 34ff 	mov.w	r4, #4294967295
 80094f4:	4620      	mov	r0, r4
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	2000037c 	.word	0x2000037c

080094fc <_malloc_r>:
 80094fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009500:	1ccd      	adds	r5, r1, #3
 8009502:	f025 0503 	bic.w	r5, r5, #3
 8009506:	3508      	adds	r5, #8
 8009508:	2d0c      	cmp	r5, #12
 800950a:	bf38      	it	cc
 800950c:	250c      	movcc	r5, #12
 800950e:	2d00      	cmp	r5, #0
 8009510:	4607      	mov	r7, r0
 8009512:	db01      	blt.n	8009518 <_malloc_r+0x1c>
 8009514:	42a9      	cmp	r1, r5
 8009516:	d905      	bls.n	8009524 <_malloc_r+0x28>
 8009518:	230c      	movs	r3, #12
 800951a:	2600      	movs	r6, #0
 800951c:	603b      	str	r3, [r7, #0]
 800951e:	4630      	mov	r0, r6
 8009520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009524:	4e2e      	ldr	r6, [pc, #184]	; (80095e0 <_malloc_r+0xe4>)
 8009526:	f000 fa25 	bl	8009974 <__malloc_lock>
 800952a:	6833      	ldr	r3, [r6, #0]
 800952c:	461c      	mov	r4, r3
 800952e:	bb34      	cbnz	r4, 800957e <_malloc_r+0x82>
 8009530:	4629      	mov	r1, r5
 8009532:	4638      	mov	r0, r7
 8009534:	f7ff ffc2 	bl	80094bc <sbrk_aligned>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	4604      	mov	r4, r0
 800953c:	d14d      	bne.n	80095da <_malloc_r+0xde>
 800953e:	6834      	ldr	r4, [r6, #0]
 8009540:	4626      	mov	r6, r4
 8009542:	2e00      	cmp	r6, #0
 8009544:	d140      	bne.n	80095c8 <_malloc_r+0xcc>
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	4631      	mov	r1, r6
 800954a:	4638      	mov	r0, r7
 800954c:	eb04 0803 	add.w	r8, r4, r3
 8009550:	f000 f9a4 	bl	800989c <_sbrk_r>
 8009554:	4580      	cmp	r8, r0
 8009556:	d13a      	bne.n	80095ce <_malloc_r+0xd2>
 8009558:	6821      	ldr	r1, [r4, #0]
 800955a:	3503      	adds	r5, #3
 800955c:	1a6d      	subs	r5, r5, r1
 800955e:	f025 0503 	bic.w	r5, r5, #3
 8009562:	3508      	adds	r5, #8
 8009564:	2d0c      	cmp	r5, #12
 8009566:	bf38      	it	cc
 8009568:	250c      	movcc	r5, #12
 800956a:	4638      	mov	r0, r7
 800956c:	4629      	mov	r1, r5
 800956e:	f7ff ffa5 	bl	80094bc <sbrk_aligned>
 8009572:	3001      	adds	r0, #1
 8009574:	d02b      	beq.n	80095ce <_malloc_r+0xd2>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	442b      	add	r3, r5
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	e00e      	b.n	800959c <_malloc_r+0xa0>
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	1b52      	subs	r2, r2, r5
 8009582:	d41e      	bmi.n	80095c2 <_malloc_r+0xc6>
 8009584:	2a0b      	cmp	r2, #11
 8009586:	d916      	bls.n	80095b6 <_malloc_r+0xba>
 8009588:	1961      	adds	r1, r4, r5
 800958a:	42a3      	cmp	r3, r4
 800958c:	6025      	str	r5, [r4, #0]
 800958e:	bf18      	it	ne
 8009590:	6059      	strne	r1, [r3, #4]
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	bf08      	it	eq
 8009596:	6031      	streq	r1, [r6, #0]
 8009598:	5162      	str	r2, [r4, r5]
 800959a:	604b      	str	r3, [r1, #4]
 800959c:	4638      	mov	r0, r7
 800959e:	f104 060b 	add.w	r6, r4, #11
 80095a2:	f000 f9ed 	bl	8009980 <__malloc_unlock>
 80095a6:	f026 0607 	bic.w	r6, r6, #7
 80095aa:	1d23      	adds	r3, r4, #4
 80095ac:	1af2      	subs	r2, r6, r3
 80095ae:	d0b6      	beq.n	800951e <_malloc_r+0x22>
 80095b0:	1b9b      	subs	r3, r3, r6
 80095b2:	50a3      	str	r3, [r4, r2]
 80095b4:	e7b3      	b.n	800951e <_malloc_r+0x22>
 80095b6:	6862      	ldr	r2, [r4, #4]
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	bf0c      	ite	eq
 80095bc:	6032      	streq	r2, [r6, #0]
 80095be:	605a      	strne	r2, [r3, #4]
 80095c0:	e7ec      	b.n	800959c <_malloc_r+0xa0>
 80095c2:	4623      	mov	r3, r4
 80095c4:	6864      	ldr	r4, [r4, #4]
 80095c6:	e7b2      	b.n	800952e <_malloc_r+0x32>
 80095c8:	4634      	mov	r4, r6
 80095ca:	6876      	ldr	r6, [r6, #4]
 80095cc:	e7b9      	b.n	8009542 <_malloc_r+0x46>
 80095ce:	230c      	movs	r3, #12
 80095d0:	4638      	mov	r0, r7
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	f000 f9d4 	bl	8009980 <__malloc_unlock>
 80095d8:	e7a1      	b.n	800951e <_malloc_r+0x22>
 80095da:	6025      	str	r5, [r4, #0]
 80095dc:	e7de      	b.n	800959c <_malloc_r+0xa0>
 80095de:	bf00      	nop
 80095e0:	20000378 	.word	0x20000378

080095e4 <__ssputs_r>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	688e      	ldr	r6, [r1, #8]
 80095ea:	4682      	mov	sl, r0
 80095ec:	429e      	cmp	r6, r3
 80095ee:	460c      	mov	r4, r1
 80095f0:	4690      	mov	r8, r2
 80095f2:	461f      	mov	r7, r3
 80095f4:	d838      	bhi.n	8009668 <__ssputs_r+0x84>
 80095f6:	898a      	ldrh	r2, [r1, #12]
 80095f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095fc:	d032      	beq.n	8009664 <__ssputs_r+0x80>
 80095fe:	6825      	ldr	r5, [r4, #0]
 8009600:	6909      	ldr	r1, [r1, #16]
 8009602:	3301      	adds	r3, #1
 8009604:	eba5 0901 	sub.w	r9, r5, r1
 8009608:	6965      	ldr	r5, [r4, #20]
 800960a:	444b      	add	r3, r9
 800960c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009610:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009614:	106d      	asrs	r5, r5, #1
 8009616:	429d      	cmp	r5, r3
 8009618:	bf38      	it	cc
 800961a:	461d      	movcc	r5, r3
 800961c:	0553      	lsls	r3, r2, #21
 800961e:	d531      	bpl.n	8009684 <__ssputs_r+0xa0>
 8009620:	4629      	mov	r1, r5
 8009622:	f7ff ff6b 	bl	80094fc <_malloc_r>
 8009626:	4606      	mov	r6, r0
 8009628:	b950      	cbnz	r0, 8009640 <__ssputs_r+0x5c>
 800962a:	230c      	movs	r3, #12
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	f8ca 3000 	str.w	r3, [sl]
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009640:	464a      	mov	r2, r9
 8009642:	6921      	ldr	r1, [r4, #16]
 8009644:	f7fd ffea 	bl	800761c <memcpy>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800964e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	6126      	str	r6, [r4, #16]
 8009656:	444e      	add	r6, r9
 8009658:	6026      	str	r6, [r4, #0]
 800965a:	463e      	mov	r6, r7
 800965c:	6165      	str	r5, [r4, #20]
 800965e:	eba5 0509 	sub.w	r5, r5, r9
 8009662:	60a5      	str	r5, [r4, #8]
 8009664:	42be      	cmp	r6, r7
 8009666:	d900      	bls.n	800966a <__ssputs_r+0x86>
 8009668:	463e      	mov	r6, r7
 800966a:	4632      	mov	r2, r6
 800966c:	4641      	mov	r1, r8
 800966e:	6820      	ldr	r0, [r4, #0]
 8009670:	f000 f966 	bl	8009940 <memmove>
 8009674:	68a3      	ldr	r3, [r4, #8]
 8009676:	2000      	movs	r0, #0
 8009678:	1b9b      	subs	r3, r3, r6
 800967a:	60a3      	str	r3, [r4, #8]
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	4433      	add	r3, r6
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	e7db      	b.n	800963c <__ssputs_r+0x58>
 8009684:	462a      	mov	r2, r5
 8009686:	f000 f981 	bl	800998c <_realloc_r>
 800968a:	4606      	mov	r6, r0
 800968c:	2800      	cmp	r0, #0
 800968e:	d1e1      	bne.n	8009654 <__ssputs_r+0x70>
 8009690:	4650      	mov	r0, sl
 8009692:	6921      	ldr	r1, [r4, #16]
 8009694:	f7ff feca 	bl	800942c <_free_r>
 8009698:	e7c7      	b.n	800962a <__ssputs_r+0x46>
	...

0800969c <_svfiprintf_r>:
 800969c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	4698      	mov	r8, r3
 80096a2:	898b      	ldrh	r3, [r1, #12]
 80096a4:	4607      	mov	r7, r0
 80096a6:	061b      	lsls	r3, r3, #24
 80096a8:	460d      	mov	r5, r1
 80096aa:	4614      	mov	r4, r2
 80096ac:	b09d      	sub	sp, #116	; 0x74
 80096ae:	d50e      	bpl.n	80096ce <_svfiprintf_r+0x32>
 80096b0:	690b      	ldr	r3, [r1, #16]
 80096b2:	b963      	cbnz	r3, 80096ce <_svfiprintf_r+0x32>
 80096b4:	2140      	movs	r1, #64	; 0x40
 80096b6:	f7ff ff21 	bl	80094fc <_malloc_r>
 80096ba:	6028      	str	r0, [r5, #0]
 80096bc:	6128      	str	r0, [r5, #16]
 80096be:	b920      	cbnz	r0, 80096ca <_svfiprintf_r+0x2e>
 80096c0:	230c      	movs	r3, #12
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295
 80096c8:	e0d1      	b.n	800986e <_svfiprintf_r+0x1d2>
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	616b      	str	r3, [r5, #20]
 80096ce:	2300      	movs	r3, #0
 80096d0:	9309      	str	r3, [sp, #36]	; 0x24
 80096d2:	2320      	movs	r3, #32
 80096d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096d8:	2330      	movs	r3, #48	; 0x30
 80096da:	f04f 0901 	mov.w	r9, #1
 80096de:	f8cd 800c 	str.w	r8, [sp, #12]
 80096e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009888 <_svfiprintf_r+0x1ec>
 80096e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096ea:	4623      	mov	r3, r4
 80096ec:	469a      	mov	sl, r3
 80096ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096f2:	b10a      	cbz	r2, 80096f8 <_svfiprintf_r+0x5c>
 80096f4:	2a25      	cmp	r2, #37	; 0x25
 80096f6:	d1f9      	bne.n	80096ec <_svfiprintf_r+0x50>
 80096f8:	ebba 0b04 	subs.w	fp, sl, r4
 80096fc:	d00b      	beq.n	8009716 <_svfiprintf_r+0x7a>
 80096fe:	465b      	mov	r3, fp
 8009700:	4622      	mov	r2, r4
 8009702:	4629      	mov	r1, r5
 8009704:	4638      	mov	r0, r7
 8009706:	f7ff ff6d 	bl	80095e4 <__ssputs_r>
 800970a:	3001      	adds	r0, #1
 800970c:	f000 80aa 	beq.w	8009864 <_svfiprintf_r+0x1c8>
 8009710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009712:	445a      	add	r2, fp
 8009714:	9209      	str	r2, [sp, #36]	; 0x24
 8009716:	f89a 3000 	ldrb.w	r3, [sl]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 80a2 	beq.w	8009864 <_svfiprintf_r+0x1c8>
 8009720:	2300      	movs	r3, #0
 8009722:	f04f 32ff 	mov.w	r2, #4294967295
 8009726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800972a:	f10a 0a01 	add.w	sl, sl, #1
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	9307      	str	r3, [sp, #28]
 8009732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009736:	931a      	str	r3, [sp, #104]	; 0x68
 8009738:	4654      	mov	r4, sl
 800973a:	2205      	movs	r2, #5
 800973c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009740:	4851      	ldr	r0, [pc, #324]	; (8009888 <_svfiprintf_r+0x1ec>)
 8009742:	f7ff facf 	bl	8008ce4 <memchr>
 8009746:	9a04      	ldr	r2, [sp, #16]
 8009748:	b9d8      	cbnz	r0, 8009782 <_svfiprintf_r+0xe6>
 800974a:	06d0      	lsls	r0, r2, #27
 800974c:	bf44      	itt	mi
 800974e:	2320      	movmi	r3, #32
 8009750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009754:	0711      	lsls	r1, r2, #28
 8009756:	bf44      	itt	mi
 8009758:	232b      	movmi	r3, #43	; 0x2b
 800975a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800975e:	f89a 3000 	ldrb.w	r3, [sl]
 8009762:	2b2a      	cmp	r3, #42	; 0x2a
 8009764:	d015      	beq.n	8009792 <_svfiprintf_r+0xf6>
 8009766:	4654      	mov	r4, sl
 8009768:	2000      	movs	r0, #0
 800976a:	f04f 0c0a 	mov.w	ip, #10
 800976e:	9a07      	ldr	r2, [sp, #28]
 8009770:	4621      	mov	r1, r4
 8009772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009776:	3b30      	subs	r3, #48	; 0x30
 8009778:	2b09      	cmp	r3, #9
 800977a:	d94e      	bls.n	800981a <_svfiprintf_r+0x17e>
 800977c:	b1b0      	cbz	r0, 80097ac <_svfiprintf_r+0x110>
 800977e:	9207      	str	r2, [sp, #28]
 8009780:	e014      	b.n	80097ac <_svfiprintf_r+0x110>
 8009782:	eba0 0308 	sub.w	r3, r0, r8
 8009786:	fa09 f303 	lsl.w	r3, r9, r3
 800978a:	4313      	orrs	r3, r2
 800978c:	46a2      	mov	sl, r4
 800978e:	9304      	str	r3, [sp, #16]
 8009790:	e7d2      	b.n	8009738 <_svfiprintf_r+0x9c>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	1d19      	adds	r1, r3, #4
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	9103      	str	r1, [sp, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	bfbb      	ittet	lt
 800979e:	425b      	neglt	r3, r3
 80097a0:	f042 0202 	orrlt.w	r2, r2, #2
 80097a4:	9307      	strge	r3, [sp, #28]
 80097a6:	9307      	strlt	r3, [sp, #28]
 80097a8:	bfb8      	it	lt
 80097aa:	9204      	strlt	r2, [sp, #16]
 80097ac:	7823      	ldrb	r3, [r4, #0]
 80097ae:	2b2e      	cmp	r3, #46	; 0x2e
 80097b0:	d10c      	bne.n	80097cc <_svfiprintf_r+0x130>
 80097b2:	7863      	ldrb	r3, [r4, #1]
 80097b4:	2b2a      	cmp	r3, #42	; 0x2a
 80097b6:	d135      	bne.n	8009824 <_svfiprintf_r+0x188>
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	3402      	adds	r4, #2
 80097bc:	1d1a      	adds	r2, r3, #4
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	9203      	str	r2, [sp, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	bfb8      	it	lt
 80097c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80097ca:	9305      	str	r3, [sp, #20]
 80097cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800988c <_svfiprintf_r+0x1f0>
 80097d0:	2203      	movs	r2, #3
 80097d2:	4650      	mov	r0, sl
 80097d4:	7821      	ldrb	r1, [r4, #0]
 80097d6:	f7ff fa85 	bl	8008ce4 <memchr>
 80097da:	b140      	cbz	r0, 80097ee <_svfiprintf_r+0x152>
 80097dc:	2340      	movs	r3, #64	; 0x40
 80097de:	eba0 000a 	sub.w	r0, r0, sl
 80097e2:	fa03 f000 	lsl.w	r0, r3, r0
 80097e6:	9b04      	ldr	r3, [sp, #16]
 80097e8:	3401      	adds	r4, #1
 80097ea:	4303      	orrs	r3, r0
 80097ec:	9304      	str	r3, [sp, #16]
 80097ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f2:	2206      	movs	r2, #6
 80097f4:	4826      	ldr	r0, [pc, #152]	; (8009890 <_svfiprintf_r+0x1f4>)
 80097f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097fa:	f7ff fa73 	bl	8008ce4 <memchr>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d038      	beq.n	8009874 <_svfiprintf_r+0x1d8>
 8009802:	4b24      	ldr	r3, [pc, #144]	; (8009894 <_svfiprintf_r+0x1f8>)
 8009804:	bb1b      	cbnz	r3, 800984e <_svfiprintf_r+0x1b2>
 8009806:	9b03      	ldr	r3, [sp, #12]
 8009808:	3307      	adds	r3, #7
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	3308      	adds	r3, #8
 8009810:	9303      	str	r3, [sp, #12]
 8009812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009814:	4433      	add	r3, r6
 8009816:	9309      	str	r3, [sp, #36]	; 0x24
 8009818:	e767      	b.n	80096ea <_svfiprintf_r+0x4e>
 800981a:	460c      	mov	r4, r1
 800981c:	2001      	movs	r0, #1
 800981e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009822:	e7a5      	b.n	8009770 <_svfiprintf_r+0xd4>
 8009824:	2300      	movs	r3, #0
 8009826:	f04f 0c0a 	mov.w	ip, #10
 800982a:	4619      	mov	r1, r3
 800982c:	3401      	adds	r4, #1
 800982e:	9305      	str	r3, [sp, #20]
 8009830:	4620      	mov	r0, r4
 8009832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009836:	3a30      	subs	r2, #48	; 0x30
 8009838:	2a09      	cmp	r2, #9
 800983a:	d903      	bls.n	8009844 <_svfiprintf_r+0x1a8>
 800983c:	2b00      	cmp	r3, #0
 800983e:	d0c5      	beq.n	80097cc <_svfiprintf_r+0x130>
 8009840:	9105      	str	r1, [sp, #20]
 8009842:	e7c3      	b.n	80097cc <_svfiprintf_r+0x130>
 8009844:	4604      	mov	r4, r0
 8009846:	2301      	movs	r3, #1
 8009848:	fb0c 2101 	mla	r1, ip, r1, r2
 800984c:	e7f0      	b.n	8009830 <_svfiprintf_r+0x194>
 800984e:	ab03      	add	r3, sp, #12
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	462a      	mov	r2, r5
 8009854:	4638      	mov	r0, r7
 8009856:	4b10      	ldr	r3, [pc, #64]	; (8009898 <_svfiprintf_r+0x1fc>)
 8009858:	a904      	add	r1, sp, #16
 800985a:	f7fd ff93 	bl	8007784 <_printf_float>
 800985e:	1c42      	adds	r2, r0, #1
 8009860:	4606      	mov	r6, r0
 8009862:	d1d6      	bne.n	8009812 <_svfiprintf_r+0x176>
 8009864:	89ab      	ldrh	r3, [r5, #12]
 8009866:	065b      	lsls	r3, r3, #25
 8009868:	f53f af2c 	bmi.w	80096c4 <_svfiprintf_r+0x28>
 800986c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800986e:	b01d      	add	sp, #116	; 0x74
 8009870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009874:	ab03      	add	r3, sp, #12
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	462a      	mov	r2, r5
 800987a:	4638      	mov	r0, r7
 800987c:	4b06      	ldr	r3, [pc, #24]	; (8009898 <_svfiprintf_r+0x1fc>)
 800987e:	a904      	add	r1, sp, #16
 8009880:	f7fe fa1c 	bl	8007cbc <_printf_i>
 8009884:	e7eb      	b.n	800985e <_svfiprintf_r+0x1c2>
 8009886:	bf00      	nop
 8009888:	0800ac24 	.word	0x0800ac24
 800988c:	0800ac2a 	.word	0x0800ac2a
 8009890:	0800ac2e 	.word	0x0800ac2e
 8009894:	08007785 	.word	0x08007785
 8009898:	080095e5 	.word	0x080095e5

0800989c <_sbrk_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	2300      	movs	r3, #0
 80098a0:	4d05      	ldr	r5, [pc, #20]	; (80098b8 <_sbrk_r+0x1c>)
 80098a2:	4604      	mov	r4, r0
 80098a4:	4608      	mov	r0, r1
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	f7f8 f942 	bl	8001b30 <_sbrk>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d102      	bne.n	80098b6 <_sbrk_r+0x1a>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	b103      	cbz	r3, 80098b6 <_sbrk_r+0x1a>
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	20000380 	.word	0x20000380

080098bc <__assert_func>:
 80098bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098be:	4614      	mov	r4, r2
 80098c0:	461a      	mov	r2, r3
 80098c2:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <__assert_func+0x2c>)
 80098c4:	4605      	mov	r5, r0
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68d8      	ldr	r0, [r3, #12]
 80098ca:	b14c      	cbz	r4, 80098e0 <__assert_func+0x24>
 80098cc:	4b07      	ldr	r3, [pc, #28]	; (80098ec <__assert_func+0x30>)
 80098ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098d2:	9100      	str	r1, [sp, #0]
 80098d4:	462b      	mov	r3, r5
 80098d6:	4906      	ldr	r1, [pc, #24]	; (80098f0 <__assert_func+0x34>)
 80098d8:	f000 f80e 	bl	80098f8 <fiprintf>
 80098dc:	f000 faaa 	bl	8009e34 <abort>
 80098e0:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <__assert_func+0x38>)
 80098e2:	461c      	mov	r4, r3
 80098e4:	e7f3      	b.n	80098ce <__assert_func+0x12>
 80098e6:	bf00      	nop
 80098e8:	20000024 	.word	0x20000024
 80098ec:	0800ac35 	.word	0x0800ac35
 80098f0:	0800ac42 	.word	0x0800ac42
 80098f4:	0800ac70 	.word	0x0800ac70

080098f8 <fiprintf>:
 80098f8:	b40e      	push	{r1, r2, r3}
 80098fa:	b503      	push	{r0, r1, lr}
 80098fc:	4601      	mov	r1, r0
 80098fe:	ab03      	add	r3, sp, #12
 8009900:	4805      	ldr	r0, [pc, #20]	; (8009918 <fiprintf+0x20>)
 8009902:	f853 2b04 	ldr.w	r2, [r3], #4
 8009906:	6800      	ldr	r0, [r0, #0]
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	f000 f895 	bl	8009a38 <_vfiprintf_r>
 800990e:	b002      	add	sp, #8
 8009910:	f85d eb04 	ldr.w	lr, [sp], #4
 8009914:	b003      	add	sp, #12
 8009916:	4770      	bx	lr
 8009918:	20000024 	.word	0x20000024

0800991c <__ascii_mbtowc>:
 800991c:	b082      	sub	sp, #8
 800991e:	b901      	cbnz	r1, 8009922 <__ascii_mbtowc+0x6>
 8009920:	a901      	add	r1, sp, #4
 8009922:	b142      	cbz	r2, 8009936 <__ascii_mbtowc+0x1a>
 8009924:	b14b      	cbz	r3, 800993a <__ascii_mbtowc+0x1e>
 8009926:	7813      	ldrb	r3, [r2, #0]
 8009928:	600b      	str	r3, [r1, #0]
 800992a:	7812      	ldrb	r2, [r2, #0]
 800992c:	1e10      	subs	r0, r2, #0
 800992e:	bf18      	it	ne
 8009930:	2001      	movne	r0, #1
 8009932:	b002      	add	sp, #8
 8009934:	4770      	bx	lr
 8009936:	4610      	mov	r0, r2
 8009938:	e7fb      	b.n	8009932 <__ascii_mbtowc+0x16>
 800993a:	f06f 0001 	mvn.w	r0, #1
 800993e:	e7f8      	b.n	8009932 <__ascii_mbtowc+0x16>

08009940 <memmove>:
 8009940:	4288      	cmp	r0, r1
 8009942:	b510      	push	{r4, lr}
 8009944:	eb01 0402 	add.w	r4, r1, r2
 8009948:	d902      	bls.n	8009950 <memmove+0x10>
 800994a:	4284      	cmp	r4, r0
 800994c:	4623      	mov	r3, r4
 800994e:	d807      	bhi.n	8009960 <memmove+0x20>
 8009950:	1e43      	subs	r3, r0, #1
 8009952:	42a1      	cmp	r1, r4
 8009954:	d008      	beq.n	8009968 <memmove+0x28>
 8009956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800995a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800995e:	e7f8      	b.n	8009952 <memmove+0x12>
 8009960:	4601      	mov	r1, r0
 8009962:	4402      	add	r2, r0
 8009964:	428a      	cmp	r2, r1
 8009966:	d100      	bne.n	800996a <memmove+0x2a>
 8009968:	bd10      	pop	{r4, pc}
 800996a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800996e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009972:	e7f7      	b.n	8009964 <memmove+0x24>

08009974 <__malloc_lock>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__malloc_lock+0x8>)
 8009976:	f000 bc19 	b.w	800a1ac <__retarget_lock_acquire_recursive>
 800997a:	bf00      	nop
 800997c:	20000384 	.word	0x20000384

08009980 <__malloc_unlock>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__malloc_unlock+0x8>)
 8009982:	f000 bc14 	b.w	800a1ae <__retarget_lock_release_recursive>
 8009986:	bf00      	nop
 8009988:	20000384 	.word	0x20000384

0800998c <_realloc_r>:
 800998c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009990:	4680      	mov	r8, r0
 8009992:	4614      	mov	r4, r2
 8009994:	460e      	mov	r6, r1
 8009996:	b921      	cbnz	r1, 80099a2 <_realloc_r+0x16>
 8009998:	4611      	mov	r1, r2
 800999a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800999e:	f7ff bdad 	b.w	80094fc <_malloc_r>
 80099a2:	b92a      	cbnz	r2, 80099b0 <_realloc_r+0x24>
 80099a4:	f7ff fd42 	bl	800942c <_free_r>
 80099a8:	4625      	mov	r5, r4
 80099aa:	4628      	mov	r0, r5
 80099ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b0:	f000 fc64 	bl	800a27c <_malloc_usable_size_r>
 80099b4:	4284      	cmp	r4, r0
 80099b6:	4607      	mov	r7, r0
 80099b8:	d802      	bhi.n	80099c0 <_realloc_r+0x34>
 80099ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099be:	d812      	bhi.n	80099e6 <_realloc_r+0x5a>
 80099c0:	4621      	mov	r1, r4
 80099c2:	4640      	mov	r0, r8
 80099c4:	f7ff fd9a 	bl	80094fc <_malloc_r>
 80099c8:	4605      	mov	r5, r0
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d0ed      	beq.n	80099aa <_realloc_r+0x1e>
 80099ce:	42bc      	cmp	r4, r7
 80099d0:	4622      	mov	r2, r4
 80099d2:	4631      	mov	r1, r6
 80099d4:	bf28      	it	cs
 80099d6:	463a      	movcs	r2, r7
 80099d8:	f7fd fe20 	bl	800761c <memcpy>
 80099dc:	4631      	mov	r1, r6
 80099de:	4640      	mov	r0, r8
 80099e0:	f7ff fd24 	bl	800942c <_free_r>
 80099e4:	e7e1      	b.n	80099aa <_realloc_r+0x1e>
 80099e6:	4635      	mov	r5, r6
 80099e8:	e7df      	b.n	80099aa <_realloc_r+0x1e>

080099ea <__sfputc_r>:
 80099ea:	6893      	ldr	r3, [r2, #8]
 80099ec:	b410      	push	{r4}
 80099ee:	3b01      	subs	r3, #1
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	6093      	str	r3, [r2, #8]
 80099f4:	da07      	bge.n	8009a06 <__sfputc_r+0x1c>
 80099f6:	6994      	ldr	r4, [r2, #24]
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	db01      	blt.n	8009a00 <__sfputc_r+0x16>
 80099fc:	290a      	cmp	r1, #10
 80099fe:	d102      	bne.n	8009a06 <__sfputc_r+0x1c>
 8009a00:	bc10      	pop	{r4}
 8009a02:	f000 b949 	b.w	8009c98 <__swbuf_r>
 8009a06:	6813      	ldr	r3, [r2, #0]
 8009a08:	1c58      	adds	r0, r3, #1
 8009a0a:	6010      	str	r0, [r2, #0]
 8009a0c:	7019      	strb	r1, [r3, #0]
 8009a0e:	4608      	mov	r0, r1
 8009a10:	bc10      	pop	{r4}
 8009a12:	4770      	bx	lr

08009a14 <__sfputs_r>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	4606      	mov	r6, r0
 8009a18:	460f      	mov	r7, r1
 8009a1a:	4614      	mov	r4, r2
 8009a1c:	18d5      	adds	r5, r2, r3
 8009a1e:	42ac      	cmp	r4, r5
 8009a20:	d101      	bne.n	8009a26 <__sfputs_r+0x12>
 8009a22:	2000      	movs	r0, #0
 8009a24:	e007      	b.n	8009a36 <__sfputs_r+0x22>
 8009a26:	463a      	mov	r2, r7
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a2e:	f7ff ffdc 	bl	80099ea <__sfputc_r>
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	d1f3      	bne.n	8009a1e <__sfputs_r+0xa>
 8009a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a38 <_vfiprintf_r>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	460d      	mov	r5, r1
 8009a3e:	4614      	mov	r4, r2
 8009a40:	4698      	mov	r8, r3
 8009a42:	4606      	mov	r6, r0
 8009a44:	b09d      	sub	sp, #116	; 0x74
 8009a46:	b118      	cbz	r0, 8009a50 <_vfiprintf_r+0x18>
 8009a48:	6983      	ldr	r3, [r0, #24]
 8009a4a:	b90b      	cbnz	r3, 8009a50 <_vfiprintf_r+0x18>
 8009a4c:	f000 fb10 	bl	800a070 <__sinit>
 8009a50:	4b89      	ldr	r3, [pc, #548]	; (8009c78 <_vfiprintf_r+0x240>)
 8009a52:	429d      	cmp	r5, r3
 8009a54:	d11b      	bne.n	8009a8e <_vfiprintf_r+0x56>
 8009a56:	6875      	ldr	r5, [r6, #4]
 8009a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a5a:	07d9      	lsls	r1, r3, #31
 8009a5c:	d405      	bmi.n	8009a6a <_vfiprintf_r+0x32>
 8009a5e:	89ab      	ldrh	r3, [r5, #12]
 8009a60:	059a      	lsls	r2, r3, #22
 8009a62:	d402      	bmi.n	8009a6a <_vfiprintf_r+0x32>
 8009a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a66:	f000 fba1 	bl	800a1ac <__retarget_lock_acquire_recursive>
 8009a6a:	89ab      	ldrh	r3, [r5, #12]
 8009a6c:	071b      	lsls	r3, r3, #28
 8009a6e:	d501      	bpl.n	8009a74 <_vfiprintf_r+0x3c>
 8009a70:	692b      	ldr	r3, [r5, #16]
 8009a72:	b9eb      	cbnz	r3, 8009ab0 <_vfiprintf_r+0x78>
 8009a74:	4629      	mov	r1, r5
 8009a76:	4630      	mov	r0, r6
 8009a78:	f000 f96e 	bl	8009d58 <__swsetup_r>
 8009a7c:	b1c0      	cbz	r0, 8009ab0 <_vfiprintf_r+0x78>
 8009a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a80:	07dc      	lsls	r4, r3, #31
 8009a82:	d50e      	bpl.n	8009aa2 <_vfiprintf_r+0x6a>
 8009a84:	f04f 30ff 	mov.w	r0, #4294967295
 8009a88:	b01d      	add	sp, #116	; 0x74
 8009a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8e:	4b7b      	ldr	r3, [pc, #492]	; (8009c7c <_vfiprintf_r+0x244>)
 8009a90:	429d      	cmp	r5, r3
 8009a92:	d101      	bne.n	8009a98 <_vfiprintf_r+0x60>
 8009a94:	68b5      	ldr	r5, [r6, #8]
 8009a96:	e7df      	b.n	8009a58 <_vfiprintf_r+0x20>
 8009a98:	4b79      	ldr	r3, [pc, #484]	; (8009c80 <_vfiprintf_r+0x248>)
 8009a9a:	429d      	cmp	r5, r3
 8009a9c:	bf08      	it	eq
 8009a9e:	68f5      	ldreq	r5, [r6, #12]
 8009aa0:	e7da      	b.n	8009a58 <_vfiprintf_r+0x20>
 8009aa2:	89ab      	ldrh	r3, [r5, #12]
 8009aa4:	0598      	lsls	r0, r3, #22
 8009aa6:	d4ed      	bmi.n	8009a84 <_vfiprintf_r+0x4c>
 8009aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aaa:	f000 fb80 	bl	800a1ae <__retarget_lock_release_recursive>
 8009aae:	e7e9      	b.n	8009a84 <_vfiprintf_r+0x4c>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab4:	2320      	movs	r3, #32
 8009ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aba:	2330      	movs	r3, #48	; 0x30
 8009abc:	f04f 0901 	mov.w	r9, #1
 8009ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ac4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009c84 <_vfiprintf_r+0x24c>
 8009ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009acc:	4623      	mov	r3, r4
 8009ace:	469a      	mov	sl, r3
 8009ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ad4:	b10a      	cbz	r2, 8009ada <_vfiprintf_r+0xa2>
 8009ad6:	2a25      	cmp	r2, #37	; 0x25
 8009ad8:	d1f9      	bne.n	8009ace <_vfiprintf_r+0x96>
 8009ada:	ebba 0b04 	subs.w	fp, sl, r4
 8009ade:	d00b      	beq.n	8009af8 <_vfiprintf_r+0xc0>
 8009ae0:	465b      	mov	r3, fp
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f7ff ff94 	bl	8009a14 <__sfputs_r>
 8009aec:	3001      	adds	r0, #1
 8009aee:	f000 80aa 	beq.w	8009c46 <_vfiprintf_r+0x20e>
 8009af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009af4:	445a      	add	r2, fp
 8009af6:	9209      	str	r2, [sp, #36]	; 0x24
 8009af8:	f89a 3000 	ldrb.w	r3, [sl]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 80a2 	beq.w	8009c46 <_vfiprintf_r+0x20e>
 8009b02:	2300      	movs	r3, #0
 8009b04:	f04f 32ff 	mov.w	r2, #4294967295
 8009b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b0c:	f10a 0a01 	add.w	sl, sl, #1
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	9307      	str	r3, [sp, #28]
 8009b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b18:	931a      	str	r3, [sp, #104]	; 0x68
 8009b1a:	4654      	mov	r4, sl
 8009b1c:	2205      	movs	r2, #5
 8009b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b22:	4858      	ldr	r0, [pc, #352]	; (8009c84 <_vfiprintf_r+0x24c>)
 8009b24:	f7ff f8de 	bl	8008ce4 <memchr>
 8009b28:	9a04      	ldr	r2, [sp, #16]
 8009b2a:	b9d8      	cbnz	r0, 8009b64 <_vfiprintf_r+0x12c>
 8009b2c:	06d1      	lsls	r1, r2, #27
 8009b2e:	bf44      	itt	mi
 8009b30:	2320      	movmi	r3, #32
 8009b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b36:	0713      	lsls	r3, r2, #28
 8009b38:	bf44      	itt	mi
 8009b3a:	232b      	movmi	r3, #43	; 0x2b
 8009b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b40:	f89a 3000 	ldrb.w	r3, [sl]
 8009b44:	2b2a      	cmp	r3, #42	; 0x2a
 8009b46:	d015      	beq.n	8009b74 <_vfiprintf_r+0x13c>
 8009b48:	4654      	mov	r4, sl
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	f04f 0c0a 	mov.w	ip, #10
 8009b50:	9a07      	ldr	r2, [sp, #28]
 8009b52:	4621      	mov	r1, r4
 8009b54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b58:	3b30      	subs	r3, #48	; 0x30
 8009b5a:	2b09      	cmp	r3, #9
 8009b5c:	d94e      	bls.n	8009bfc <_vfiprintf_r+0x1c4>
 8009b5e:	b1b0      	cbz	r0, 8009b8e <_vfiprintf_r+0x156>
 8009b60:	9207      	str	r2, [sp, #28]
 8009b62:	e014      	b.n	8009b8e <_vfiprintf_r+0x156>
 8009b64:	eba0 0308 	sub.w	r3, r0, r8
 8009b68:	fa09 f303 	lsl.w	r3, r9, r3
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	46a2      	mov	sl, r4
 8009b70:	9304      	str	r3, [sp, #16]
 8009b72:	e7d2      	b.n	8009b1a <_vfiprintf_r+0xe2>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	1d19      	adds	r1, r3, #4
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	9103      	str	r1, [sp, #12]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bfbb      	ittet	lt
 8009b80:	425b      	neglt	r3, r3
 8009b82:	f042 0202 	orrlt.w	r2, r2, #2
 8009b86:	9307      	strge	r3, [sp, #28]
 8009b88:	9307      	strlt	r3, [sp, #28]
 8009b8a:	bfb8      	it	lt
 8009b8c:	9204      	strlt	r2, [sp, #16]
 8009b8e:	7823      	ldrb	r3, [r4, #0]
 8009b90:	2b2e      	cmp	r3, #46	; 0x2e
 8009b92:	d10c      	bne.n	8009bae <_vfiprintf_r+0x176>
 8009b94:	7863      	ldrb	r3, [r4, #1]
 8009b96:	2b2a      	cmp	r3, #42	; 0x2a
 8009b98:	d135      	bne.n	8009c06 <_vfiprintf_r+0x1ce>
 8009b9a:	9b03      	ldr	r3, [sp, #12]
 8009b9c:	3402      	adds	r4, #2
 8009b9e:	1d1a      	adds	r2, r3, #4
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	9203      	str	r2, [sp, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bfb8      	it	lt
 8009ba8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bac:	9305      	str	r3, [sp, #20]
 8009bae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009c88 <_vfiprintf_r+0x250>
 8009bb2:	2203      	movs	r2, #3
 8009bb4:	4650      	mov	r0, sl
 8009bb6:	7821      	ldrb	r1, [r4, #0]
 8009bb8:	f7ff f894 	bl	8008ce4 <memchr>
 8009bbc:	b140      	cbz	r0, 8009bd0 <_vfiprintf_r+0x198>
 8009bbe:	2340      	movs	r3, #64	; 0x40
 8009bc0:	eba0 000a 	sub.w	r0, r0, sl
 8009bc4:	fa03 f000 	lsl.w	r0, r3, r0
 8009bc8:	9b04      	ldr	r3, [sp, #16]
 8009bca:	3401      	adds	r4, #1
 8009bcc:	4303      	orrs	r3, r0
 8009bce:	9304      	str	r3, [sp, #16]
 8009bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd4:	2206      	movs	r2, #6
 8009bd6:	482d      	ldr	r0, [pc, #180]	; (8009c8c <_vfiprintf_r+0x254>)
 8009bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bdc:	f7ff f882 	bl	8008ce4 <memchr>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d03f      	beq.n	8009c64 <_vfiprintf_r+0x22c>
 8009be4:	4b2a      	ldr	r3, [pc, #168]	; (8009c90 <_vfiprintf_r+0x258>)
 8009be6:	bb1b      	cbnz	r3, 8009c30 <_vfiprintf_r+0x1f8>
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	3307      	adds	r3, #7
 8009bec:	f023 0307 	bic.w	r3, r3, #7
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	9303      	str	r3, [sp, #12]
 8009bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf6:	443b      	add	r3, r7
 8009bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfa:	e767      	b.n	8009acc <_vfiprintf_r+0x94>
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	2001      	movs	r0, #1
 8009c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c04:	e7a5      	b.n	8009b52 <_vfiprintf_r+0x11a>
 8009c06:	2300      	movs	r3, #0
 8009c08:	f04f 0c0a 	mov.w	ip, #10
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	3401      	adds	r4, #1
 8009c10:	9305      	str	r3, [sp, #20]
 8009c12:	4620      	mov	r0, r4
 8009c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c18:	3a30      	subs	r2, #48	; 0x30
 8009c1a:	2a09      	cmp	r2, #9
 8009c1c:	d903      	bls.n	8009c26 <_vfiprintf_r+0x1ee>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d0c5      	beq.n	8009bae <_vfiprintf_r+0x176>
 8009c22:	9105      	str	r1, [sp, #20]
 8009c24:	e7c3      	b.n	8009bae <_vfiprintf_r+0x176>
 8009c26:	4604      	mov	r4, r0
 8009c28:	2301      	movs	r3, #1
 8009c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c2e:	e7f0      	b.n	8009c12 <_vfiprintf_r+0x1da>
 8009c30:	ab03      	add	r3, sp, #12
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	462a      	mov	r2, r5
 8009c36:	4630      	mov	r0, r6
 8009c38:	4b16      	ldr	r3, [pc, #88]	; (8009c94 <_vfiprintf_r+0x25c>)
 8009c3a:	a904      	add	r1, sp, #16
 8009c3c:	f7fd fda2 	bl	8007784 <_printf_float>
 8009c40:	4607      	mov	r7, r0
 8009c42:	1c78      	adds	r0, r7, #1
 8009c44:	d1d6      	bne.n	8009bf4 <_vfiprintf_r+0x1bc>
 8009c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c48:	07d9      	lsls	r1, r3, #31
 8009c4a:	d405      	bmi.n	8009c58 <_vfiprintf_r+0x220>
 8009c4c:	89ab      	ldrh	r3, [r5, #12]
 8009c4e:	059a      	lsls	r2, r3, #22
 8009c50:	d402      	bmi.n	8009c58 <_vfiprintf_r+0x220>
 8009c52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c54:	f000 faab 	bl	800a1ae <__retarget_lock_release_recursive>
 8009c58:	89ab      	ldrh	r3, [r5, #12]
 8009c5a:	065b      	lsls	r3, r3, #25
 8009c5c:	f53f af12 	bmi.w	8009a84 <_vfiprintf_r+0x4c>
 8009c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c62:	e711      	b.n	8009a88 <_vfiprintf_r+0x50>
 8009c64:	ab03      	add	r3, sp, #12
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	462a      	mov	r2, r5
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	4b09      	ldr	r3, [pc, #36]	; (8009c94 <_vfiprintf_r+0x25c>)
 8009c6e:	a904      	add	r1, sp, #16
 8009c70:	f7fe f824 	bl	8007cbc <_printf_i>
 8009c74:	e7e4      	b.n	8009c40 <_vfiprintf_r+0x208>
 8009c76:	bf00      	nop
 8009c78:	0800ad9c 	.word	0x0800ad9c
 8009c7c:	0800adbc 	.word	0x0800adbc
 8009c80:	0800ad7c 	.word	0x0800ad7c
 8009c84:	0800ac24 	.word	0x0800ac24
 8009c88:	0800ac2a 	.word	0x0800ac2a
 8009c8c:	0800ac2e 	.word	0x0800ac2e
 8009c90:	08007785 	.word	0x08007785
 8009c94:	08009a15 	.word	0x08009a15

08009c98 <__swbuf_r>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	460e      	mov	r6, r1
 8009c9c:	4614      	mov	r4, r2
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	b118      	cbz	r0, 8009caa <__swbuf_r+0x12>
 8009ca2:	6983      	ldr	r3, [r0, #24]
 8009ca4:	b90b      	cbnz	r3, 8009caa <__swbuf_r+0x12>
 8009ca6:	f000 f9e3 	bl	800a070 <__sinit>
 8009caa:	4b21      	ldr	r3, [pc, #132]	; (8009d30 <__swbuf_r+0x98>)
 8009cac:	429c      	cmp	r4, r3
 8009cae:	d12b      	bne.n	8009d08 <__swbuf_r+0x70>
 8009cb0:	686c      	ldr	r4, [r5, #4]
 8009cb2:	69a3      	ldr	r3, [r4, #24]
 8009cb4:	60a3      	str	r3, [r4, #8]
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	071a      	lsls	r2, r3, #28
 8009cba:	d52f      	bpl.n	8009d1c <__swbuf_r+0x84>
 8009cbc:	6923      	ldr	r3, [r4, #16]
 8009cbe:	b36b      	cbz	r3, 8009d1c <__swbuf_r+0x84>
 8009cc0:	6923      	ldr	r3, [r4, #16]
 8009cc2:	6820      	ldr	r0, [r4, #0]
 8009cc4:	b2f6      	uxtb	r6, r6
 8009cc6:	1ac0      	subs	r0, r0, r3
 8009cc8:	6963      	ldr	r3, [r4, #20]
 8009cca:	4637      	mov	r7, r6
 8009ccc:	4283      	cmp	r3, r0
 8009cce:	dc04      	bgt.n	8009cda <__swbuf_r+0x42>
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f000 f938 	bl	8009f48 <_fflush_r>
 8009cd8:	bb30      	cbnz	r0, 8009d28 <__swbuf_r+0x90>
 8009cda:	68a3      	ldr	r3, [r4, #8]
 8009cdc:	3001      	adds	r0, #1
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	60a3      	str	r3, [r4, #8]
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	6022      	str	r2, [r4, #0]
 8009ce8:	701e      	strb	r6, [r3, #0]
 8009cea:	6963      	ldr	r3, [r4, #20]
 8009cec:	4283      	cmp	r3, r0
 8009cee:	d004      	beq.n	8009cfa <__swbuf_r+0x62>
 8009cf0:	89a3      	ldrh	r3, [r4, #12]
 8009cf2:	07db      	lsls	r3, r3, #31
 8009cf4:	d506      	bpl.n	8009d04 <__swbuf_r+0x6c>
 8009cf6:	2e0a      	cmp	r6, #10
 8009cf8:	d104      	bne.n	8009d04 <__swbuf_r+0x6c>
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f000 f923 	bl	8009f48 <_fflush_r>
 8009d02:	b988      	cbnz	r0, 8009d28 <__swbuf_r+0x90>
 8009d04:	4638      	mov	r0, r7
 8009d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <__swbuf_r+0x9c>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	d101      	bne.n	8009d12 <__swbuf_r+0x7a>
 8009d0e:	68ac      	ldr	r4, [r5, #8]
 8009d10:	e7cf      	b.n	8009cb2 <__swbuf_r+0x1a>
 8009d12:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <__swbuf_r+0xa0>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	bf08      	it	eq
 8009d18:	68ec      	ldreq	r4, [r5, #12]
 8009d1a:	e7ca      	b.n	8009cb2 <__swbuf_r+0x1a>
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f000 f81a 	bl	8009d58 <__swsetup_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d0cb      	beq.n	8009cc0 <__swbuf_r+0x28>
 8009d28:	f04f 37ff 	mov.w	r7, #4294967295
 8009d2c:	e7ea      	b.n	8009d04 <__swbuf_r+0x6c>
 8009d2e:	bf00      	nop
 8009d30:	0800ad9c 	.word	0x0800ad9c
 8009d34:	0800adbc 	.word	0x0800adbc
 8009d38:	0800ad7c 	.word	0x0800ad7c

08009d3c <__ascii_wctomb>:
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	4608      	mov	r0, r1
 8009d40:	b141      	cbz	r1, 8009d54 <__ascii_wctomb+0x18>
 8009d42:	2aff      	cmp	r2, #255	; 0xff
 8009d44:	d904      	bls.n	8009d50 <__ascii_wctomb+0x14>
 8009d46:	228a      	movs	r2, #138	; 0x8a
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	4770      	bx	lr
 8009d50:	2001      	movs	r0, #1
 8009d52:	700a      	strb	r2, [r1, #0]
 8009d54:	4770      	bx	lr
	...

08009d58 <__swsetup_r>:
 8009d58:	4b32      	ldr	r3, [pc, #200]	; (8009e24 <__swsetup_r+0xcc>)
 8009d5a:	b570      	push	{r4, r5, r6, lr}
 8009d5c:	681d      	ldr	r5, [r3, #0]
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	b125      	cbz	r5, 8009d6e <__swsetup_r+0x16>
 8009d64:	69ab      	ldr	r3, [r5, #24]
 8009d66:	b913      	cbnz	r3, 8009d6e <__swsetup_r+0x16>
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f000 f981 	bl	800a070 <__sinit>
 8009d6e:	4b2e      	ldr	r3, [pc, #184]	; (8009e28 <__swsetup_r+0xd0>)
 8009d70:	429c      	cmp	r4, r3
 8009d72:	d10f      	bne.n	8009d94 <__swsetup_r+0x3c>
 8009d74:	686c      	ldr	r4, [r5, #4]
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d7c:	0719      	lsls	r1, r3, #28
 8009d7e:	d42c      	bmi.n	8009dda <__swsetup_r+0x82>
 8009d80:	06dd      	lsls	r5, r3, #27
 8009d82:	d411      	bmi.n	8009da8 <__swsetup_r+0x50>
 8009d84:	2309      	movs	r3, #9
 8009d86:	6033      	str	r3, [r6, #0]
 8009d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	81a3      	strh	r3, [r4, #12]
 8009d92:	e03e      	b.n	8009e12 <__swsetup_r+0xba>
 8009d94:	4b25      	ldr	r3, [pc, #148]	; (8009e2c <__swsetup_r+0xd4>)
 8009d96:	429c      	cmp	r4, r3
 8009d98:	d101      	bne.n	8009d9e <__swsetup_r+0x46>
 8009d9a:	68ac      	ldr	r4, [r5, #8]
 8009d9c:	e7eb      	b.n	8009d76 <__swsetup_r+0x1e>
 8009d9e:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <__swsetup_r+0xd8>)
 8009da0:	429c      	cmp	r4, r3
 8009da2:	bf08      	it	eq
 8009da4:	68ec      	ldreq	r4, [r5, #12]
 8009da6:	e7e6      	b.n	8009d76 <__swsetup_r+0x1e>
 8009da8:	0758      	lsls	r0, r3, #29
 8009daa:	d512      	bpl.n	8009dd2 <__swsetup_r+0x7a>
 8009dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dae:	b141      	cbz	r1, 8009dc2 <__swsetup_r+0x6a>
 8009db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009db4:	4299      	cmp	r1, r3
 8009db6:	d002      	beq.n	8009dbe <__swsetup_r+0x66>
 8009db8:	4630      	mov	r0, r6
 8009dba:	f7ff fb37 	bl	800942c <_free_r>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6063      	str	r3, [r4, #4]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f043 0308 	orr.w	r3, r3, #8
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	b94b      	cbnz	r3, 8009df2 <__swsetup_r+0x9a>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009de8:	d003      	beq.n	8009df2 <__swsetup_r+0x9a>
 8009dea:	4621      	mov	r1, r4
 8009dec:	4630      	mov	r0, r6
 8009dee:	f000 fa05 	bl	800a1fc <__smakebuf_r>
 8009df2:	89a0      	ldrh	r0, [r4, #12]
 8009df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009df8:	f010 0301 	ands.w	r3, r0, #1
 8009dfc:	d00a      	beq.n	8009e14 <__swsetup_r+0xbc>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60a3      	str	r3, [r4, #8]
 8009e02:	6963      	ldr	r3, [r4, #20]
 8009e04:	425b      	negs	r3, r3
 8009e06:	61a3      	str	r3, [r4, #24]
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	b943      	cbnz	r3, 8009e1e <__swsetup_r+0xc6>
 8009e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e10:	d1ba      	bne.n	8009d88 <__swsetup_r+0x30>
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	0781      	lsls	r1, r0, #30
 8009e16:	bf58      	it	pl
 8009e18:	6963      	ldrpl	r3, [r4, #20]
 8009e1a:	60a3      	str	r3, [r4, #8]
 8009e1c:	e7f4      	b.n	8009e08 <__swsetup_r+0xb0>
 8009e1e:	2000      	movs	r0, #0
 8009e20:	e7f7      	b.n	8009e12 <__swsetup_r+0xba>
 8009e22:	bf00      	nop
 8009e24:	20000024 	.word	0x20000024
 8009e28:	0800ad9c 	.word	0x0800ad9c
 8009e2c:	0800adbc 	.word	0x0800adbc
 8009e30:	0800ad7c 	.word	0x0800ad7c

08009e34 <abort>:
 8009e34:	2006      	movs	r0, #6
 8009e36:	b508      	push	{r3, lr}
 8009e38:	f000 fa50 	bl	800a2dc <raise>
 8009e3c:	2001      	movs	r0, #1
 8009e3e:	f7f7 fe04 	bl	8001a4a <_exit>
	...

08009e44 <__sflush_r>:
 8009e44:	898a      	ldrh	r2, [r1, #12]
 8009e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e48:	4605      	mov	r5, r0
 8009e4a:	0710      	lsls	r0, r2, #28
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	d457      	bmi.n	8009f00 <__sflush_r+0xbc>
 8009e50:	684b      	ldr	r3, [r1, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	dc04      	bgt.n	8009e60 <__sflush_r+0x1c>
 8009e56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	dc01      	bgt.n	8009e60 <__sflush_r+0x1c>
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e62:	2e00      	cmp	r6, #0
 8009e64:	d0fa      	beq.n	8009e5c <__sflush_r+0x18>
 8009e66:	2300      	movs	r3, #0
 8009e68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e6c:	682f      	ldr	r7, [r5, #0]
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	d032      	beq.n	8009ed8 <__sflush_r+0x94>
 8009e72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	075a      	lsls	r2, r3, #29
 8009e78:	d505      	bpl.n	8009e86 <__sflush_r+0x42>
 8009e7a:	6863      	ldr	r3, [r4, #4]
 8009e7c:	1ac0      	subs	r0, r0, r3
 8009e7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e80:	b10b      	cbz	r3, 8009e86 <__sflush_r+0x42>
 8009e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e84:	1ac0      	subs	r0, r0, r3
 8009e86:	2300      	movs	r3, #0
 8009e88:	4602      	mov	r2, r0
 8009e8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	6a21      	ldr	r1, [r4, #32]
 8009e90:	47b0      	blx	r6
 8009e92:	1c43      	adds	r3, r0, #1
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	d106      	bne.n	8009ea6 <__sflush_r+0x62>
 8009e98:	6829      	ldr	r1, [r5, #0]
 8009e9a:	291d      	cmp	r1, #29
 8009e9c:	d82c      	bhi.n	8009ef8 <__sflush_r+0xb4>
 8009e9e:	4a29      	ldr	r2, [pc, #164]	; (8009f44 <__sflush_r+0x100>)
 8009ea0:	40ca      	lsrs	r2, r1
 8009ea2:	07d6      	lsls	r6, r2, #31
 8009ea4:	d528      	bpl.n	8009ef8 <__sflush_r+0xb4>
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	6062      	str	r2, [r4, #4]
 8009eaa:	6922      	ldr	r2, [r4, #16]
 8009eac:	04d9      	lsls	r1, r3, #19
 8009eae:	6022      	str	r2, [r4, #0]
 8009eb0:	d504      	bpl.n	8009ebc <__sflush_r+0x78>
 8009eb2:	1c42      	adds	r2, r0, #1
 8009eb4:	d101      	bne.n	8009eba <__sflush_r+0x76>
 8009eb6:	682b      	ldr	r3, [r5, #0]
 8009eb8:	b903      	cbnz	r3, 8009ebc <__sflush_r+0x78>
 8009eba:	6560      	str	r0, [r4, #84]	; 0x54
 8009ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ebe:	602f      	str	r7, [r5, #0]
 8009ec0:	2900      	cmp	r1, #0
 8009ec2:	d0cb      	beq.n	8009e5c <__sflush_r+0x18>
 8009ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ec8:	4299      	cmp	r1, r3
 8009eca:	d002      	beq.n	8009ed2 <__sflush_r+0x8e>
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f7ff faad 	bl	800942c <_free_r>
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ed6:	e7c2      	b.n	8009e5e <__sflush_r+0x1a>
 8009ed8:	6a21      	ldr	r1, [r4, #32]
 8009eda:	2301      	movs	r3, #1
 8009edc:	4628      	mov	r0, r5
 8009ede:	47b0      	blx	r6
 8009ee0:	1c41      	adds	r1, r0, #1
 8009ee2:	d1c7      	bne.n	8009e74 <__sflush_r+0x30>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d0c4      	beq.n	8009e74 <__sflush_r+0x30>
 8009eea:	2b1d      	cmp	r3, #29
 8009eec:	d001      	beq.n	8009ef2 <__sflush_r+0xae>
 8009eee:	2b16      	cmp	r3, #22
 8009ef0:	d101      	bne.n	8009ef6 <__sflush_r+0xb2>
 8009ef2:	602f      	str	r7, [r5, #0]
 8009ef4:	e7b2      	b.n	8009e5c <__sflush_r+0x18>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	e7ae      	b.n	8009e5e <__sflush_r+0x1a>
 8009f00:	690f      	ldr	r7, [r1, #16]
 8009f02:	2f00      	cmp	r7, #0
 8009f04:	d0aa      	beq.n	8009e5c <__sflush_r+0x18>
 8009f06:	0793      	lsls	r3, r2, #30
 8009f08:	bf18      	it	ne
 8009f0a:	2300      	movne	r3, #0
 8009f0c:	680e      	ldr	r6, [r1, #0]
 8009f0e:	bf08      	it	eq
 8009f10:	694b      	ldreq	r3, [r1, #20]
 8009f12:	1bf6      	subs	r6, r6, r7
 8009f14:	600f      	str	r7, [r1, #0]
 8009f16:	608b      	str	r3, [r1, #8]
 8009f18:	2e00      	cmp	r6, #0
 8009f1a:	dd9f      	ble.n	8009e5c <__sflush_r+0x18>
 8009f1c:	4633      	mov	r3, r6
 8009f1e:	463a      	mov	r2, r7
 8009f20:	4628      	mov	r0, r5
 8009f22:	6a21      	ldr	r1, [r4, #32]
 8009f24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009f28:	47e0      	blx	ip
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	dc06      	bgt.n	8009f3c <__sflush_r+0xf8>
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	f04f 30ff 	mov.w	r0, #4294967295
 8009f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f38:	81a3      	strh	r3, [r4, #12]
 8009f3a:	e790      	b.n	8009e5e <__sflush_r+0x1a>
 8009f3c:	4407      	add	r7, r0
 8009f3e:	1a36      	subs	r6, r6, r0
 8009f40:	e7ea      	b.n	8009f18 <__sflush_r+0xd4>
 8009f42:	bf00      	nop
 8009f44:	20400001 	.word	0x20400001

08009f48 <_fflush_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	690b      	ldr	r3, [r1, #16]
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	460c      	mov	r4, r1
 8009f50:	b913      	cbnz	r3, 8009f58 <_fflush_r+0x10>
 8009f52:	2500      	movs	r5, #0
 8009f54:	4628      	mov	r0, r5
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	b118      	cbz	r0, 8009f62 <_fflush_r+0x1a>
 8009f5a:	6983      	ldr	r3, [r0, #24]
 8009f5c:	b90b      	cbnz	r3, 8009f62 <_fflush_r+0x1a>
 8009f5e:	f000 f887 	bl	800a070 <__sinit>
 8009f62:	4b14      	ldr	r3, [pc, #80]	; (8009fb4 <_fflush_r+0x6c>)
 8009f64:	429c      	cmp	r4, r3
 8009f66:	d11b      	bne.n	8009fa0 <_fflush_r+0x58>
 8009f68:	686c      	ldr	r4, [r5, #4]
 8009f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0ef      	beq.n	8009f52 <_fflush_r+0xa>
 8009f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f74:	07d0      	lsls	r0, r2, #31
 8009f76:	d404      	bmi.n	8009f82 <_fflush_r+0x3a>
 8009f78:	0599      	lsls	r1, r3, #22
 8009f7a:	d402      	bmi.n	8009f82 <_fflush_r+0x3a>
 8009f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f7e:	f000 f915 	bl	800a1ac <__retarget_lock_acquire_recursive>
 8009f82:	4628      	mov	r0, r5
 8009f84:	4621      	mov	r1, r4
 8009f86:	f7ff ff5d 	bl	8009e44 <__sflush_r>
 8009f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	07da      	lsls	r2, r3, #31
 8009f90:	d4e0      	bmi.n	8009f54 <_fflush_r+0xc>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	059b      	lsls	r3, r3, #22
 8009f96:	d4dd      	bmi.n	8009f54 <_fflush_r+0xc>
 8009f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f9a:	f000 f908 	bl	800a1ae <__retarget_lock_release_recursive>
 8009f9e:	e7d9      	b.n	8009f54 <_fflush_r+0xc>
 8009fa0:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <_fflush_r+0x70>)
 8009fa2:	429c      	cmp	r4, r3
 8009fa4:	d101      	bne.n	8009faa <_fflush_r+0x62>
 8009fa6:	68ac      	ldr	r4, [r5, #8]
 8009fa8:	e7df      	b.n	8009f6a <_fflush_r+0x22>
 8009faa:	4b04      	ldr	r3, [pc, #16]	; (8009fbc <_fflush_r+0x74>)
 8009fac:	429c      	cmp	r4, r3
 8009fae:	bf08      	it	eq
 8009fb0:	68ec      	ldreq	r4, [r5, #12]
 8009fb2:	e7da      	b.n	8009f6a <_fflush_r+0x22>
 8009fb4:	0800ad9c 	.word	0x0800ad9c
 8009fb8:	0800adbc 	.word	0x0800adbc
 8009fbc:	0800ad7c 	.word	0x0800ad7c

08009fc0 <std>:
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	b510      	push	{r4, lr}
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8009fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fce:	6083      	str	r3, [r0, #8]
 8009fd0:	8181      	strh	r1, [r0, #12]
 8009fd2:	6643      	str	r3, [r0, #100]	; 0x64
 8009fd4:	81c2      	strh	r2, [r0, #14]
 8009fd6:	6183      	str	r3, [r0, #24]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	2208      	movs	r2, #8
 8009fdc:	305c      	adds	r0, #92	; 0x5c
 8009fde:	f7fd fb2b 	bl	8007638 <memset>
 8009fe2:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <std+0x38>)
 8009fe4:	6224      	str	r4, [r4, #32]
 8009fe6:	6263      	str	r3, [r4, #36]	; 0x24
 8009fe8:	4b04      	ldr	r3, [pc, #16]	; (8009ffc <std+0x3c>)
 8009fea:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fec:	4b04      	ldr	r3, [pc, #16]	; (800a000 <std+0x40>)
 8009fee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ff0:	4b04      	ldr	r3, [pc, #16]	; (800a004 <std+0x44>)
 8009ff2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	bf00      	nop
 8009ff8:	0800a315 	.word	0x0800a315
 8009ffc:	0800a337 	.word	0x0800a337
 800a000:	0800a36f 	.word	0x0800a36f
 800a004:	0800a393 	.word	0x0800a393

0800a008 <_cleanup_r>:
 800a008:	4901      	ldr	r1, [pc, #4]	; (800a010 <_cleanup_r+0x8>)
 800a00a:	f000 b8af 	b.w	800a16c <_fwalk_reent>
 800a00e:	bf00      	nop
 800a010:	08009f49 	.word	0x08009f49

0800a014 <__sfmoreglue>:
 800a014:	2268      	movs	r2, #104	; 0x68
 800a016:	b570      	push	{r4, r5, r6, lr}
 800a018:	1e4d      	subs	r5, r1, #1
 800a01a:	4355      	muls	r5, r2
 800a01c:	460e      	mov	r6, r1
 800a01e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a022:	f7ff fa6b 	bl	80094fc <_malloc_r>
 800a026:	4604      	mov	r4, r0
 800a028:	b140      	cbz	r0, 800a03c <__sfmoreglue+0x28>
 800a02a:	2100      	movs	r1, #0
 800a02c:	e9c0 1600 	strd	r1, r6, [r0]
 800a030:	300c      	adds	r0, #12
 800a032:	60a0      	str	r0, [r4, #8]
 800a034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a038:	f7fd fafe 	bl	8007638 <memset>
 800a03c:	4620      	mov	r0, r4
 800a03e:	bd70      	pop	{r4, r5, r6, pc}

0800a040 <__sfp_lock_acquire>:
 800a040:	4801      	ldr	r0, [pc, #4]	; (800a048 <__sfp_lock_acquire+0x8>)
 800a042:	f000 b8b3 	b.w	800a1ac <__retarget_lock_acquire_recursive>
 800a046:	bf00      	nop
 800a048:	20000385 	.word	0x20000385

0800a04c <__sfp_lock_release>:
 800a04c:	4801      	ldr	r0, [pc, #4]	; (800a054 <__sfp_lock_release+0x8>)
 800a04e:	f000 b8ae 	b.w	800a1ae <__retarget_lock_release_recursive>
 800a052:	bf00      	nop
 800a054:	20000385 	.word	0x20000385

0800a058 <__sinit_lock_acquire>:
 800a058:	4801      	ldr	r0, [pc, #4]	; (800a060 <__sinit_lock_acquire+0x8>)
 800a05a:	f000 b8a7 	b.w	800a1ac <__retarget_lock_acquire_recursive>
 800a05e:	bf00      	nop
 800a060:	20000386 	.word	0x20000386

0800a064 <__sinit_lock_release>:
 800a064:	4801      	ldr	r0, [pc, #4]	; (800a06c <__sinit_lock_release+0x8>)
 800a066:	f000 b8a2 	b.w	800a1ae <__retarget_lock_release_recursive>
 800a06a:	bf00      	nop
 800a06c:	20000386 	.word	0x20000386

0800a070 <__sinit>:
 800a070:	b510      	push	{r4, lr}
 800a072:	4604      	mov	r4, r0
 800a074:	f7ff fff0 	bl	800a058 <__sinit_lock_acquire>
 800a078:	69a3      	ldr	r3, [r4, #24]
 800a07a:	b11b      	cbz	r3, 800a084 <__sinit+0x14>
 800a07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a080:	f7ff bff0 	b.w	800a064 <__sinit_lock_release>
 800a084:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a088:	6523      	str	r3, [r4, #80]	; 0x50
 800a08a:	4b13      	ldr	r3, [pc, #76]	; (800a0d8 <__sinit+0x68>)
 800a08c:	4a13      	ldr	r2, [pc, #76]	; (800a0dc <__sinit+0x6c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	62a2      	str	r2, [r4, #40]	; 0x28
 800a092:	42a3      	cmp	r3, r4
 800a094:	bf08      	it	eq
 800a096:	2301      	moveq	r3, #1
 800a098:	4620      	mov	r0, r4
 800a09a:	bf08      	it	eq
 800a09c:	61a3      	streq	r3, [r4, #24]
 800a09e:	f000 f81f 	bl	800a0e0 <__sfp>
 800a0a2:	6060      	str	r0, [r4, #4]
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f000 f81b 	bl	800a0e0 <__sfp>
 800a0aa:	60a0      	str	r0, [r4, #8]
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 f817 	bl	800a0e0 <__sfp>
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	2104      	movs	r1, #4
 800a0b6:	60e0      	str	r0, [r4, #12]
 800a0b8:	6860      	ldr	r0, [r4, #4]
 800a0ba:	f7ff ff81 	bl	8009fc0 <std>
 800a0be:	2201      	movs	r2, #1
 800a0c0:	2109      	movs	r1, #9
 800a0c2:	68a0      	ldr	r0, [r4, #8]
 800a0c4:	f7ff ff7c 	bl	8009fc0 <std>
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	2112      	movs	r1, #18
 800a0cc:	68e0      	ldr	r0, [r4, #12]
 800a0ce:	f7ff ff77 	bl	8009fc0 <std>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	61a3      	str	r3, [r4, #24]
 800a0d6:	e7d1      	b.n	800a07c <__sinit+0xc>
 800a0d8:	0800aa04 	.word	0x0800aa04
 800a0dc:	0800a009 	.word	0x0800a009

0800a0e0 <__sfp>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	4607      	mov	r7, r0
 800a0e4:	f7ff ffac 	bl	800a040 <__sfp_lock_acquire>
 800a0e8:	4b1e      	ldr	r3, [pc, #120]	; (800a164 <__sfp+0x84>)
 800a0ea:	681e      	ldr	r6, [r3, #0]
 800a0ec:	69b3      	ldr	r3, [r6, #24]
 800a0ee:	b913      	cbnz	r3, 800a0f6 <__sfp+0x16>
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7ff ffbd 	bl	800a070 <__sinit>
 800a0f6:	3648      	adds	r6, #72	; 0x48
 800a0f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	d503      	bpl.n	800a108 <__sfp+0x28>
 800a100:	6833      	ldr	r3, [r6, #0]
 800a102:	b30b      	cbz	r3, 800a148 <__sfp+0x68>
 800a104:	6836      	ldr	r6, [r6, #0]
 800a106:	e7f7      	b.n	800a0f8 <__sfp+0x18>
 800a108:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a10c:	b9d5      	cbnz	r5, 800a144 <__sfp+0x64>
 800a10e:	4b16      	ldr	r3, [pc, #88]	; (800a168 <__sfp+0x88>)
 800a110:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a114:	60e3      	str	r3, [r4, #12]
 800a116:	6665      	str	r5, [r4, #100]	; 0x64
 800a118:	f000 f847 	bl	800a1aa <__retarget_lock_init_recursive>
 800a11c:	f7ff ff96 	bl	800a04c <__sfp_lock_release>
 800a120:	2208      	movs	r2, #8
 800a122:	4629      	mov	r1, r5
 800a124:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a128:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a12c:	6025      	str	r5, [r4, #0]
 800a12e:	61a5      	str	r5, [r4, #24]
 800a130:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a134:	f7fd fa80 	bl	8007638 <memset>
 800a138:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a13c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a140:	4620      	mov	r0, r4
 800a142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a144:	3468      	adds	r4, #104	; 0x68
 800a146:	e7d9      	b.n	800a0fc <__sfp+0x1c>
 800a148:	2104      	movs	r1, #4
 800a14a:	4638      	mov	r0, r7
 800a14c:	f7ff ff62 	bl	800a014 <__sfmoreglue>
 800a150:	4604      	mov	r4, r0
 800a152:	6030      	str	r0, [r6, #0]
 800a154:	2800      	cmp	r0, #0
 800a156:	d1d5      	bne.n	800a104 <__sfp+0x24>
 800a158:	f7ff ff78 	bl	800a04c <__sfp_lock_release>
 800a15c:	230c      	movs	r3, #12
 800a15e:	603b      	str	r3, [r7, #0]
 800a160:	e7ee      	b.n	800a140 <__sfp+0x60>
 800a162:	bf00      	nop
 800a164:	0800aa04 	.word	0x0800aa04
 800a168:	ffff0001 	.word	0xffff0001

0800a16c <_fwalk_reent>:
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a170:	4606      	mov	r6, r0
 800a172:	4688      	mov	r8, r1
 800a174:	2700      	movs	r7, #0
 800a176:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a17a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a17e:	f1b9 0901 	subs.w	r9, r9, #1
 800a182:	d505      	bpl.n	800a190 <_fwalk_reent+0x24>
 800a184:	6824      	ldr	r4, [r4, #0]
 800a186:	2c00      	cmp	r4, #0
 800a188:	d1f7      	bne.n	800a17a <_fwalk_reent+0xe>
 800a18a:	4638      	mov	r0, r7
 800a18c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a190:	89ab      	ldrh	r3, [r5, #12]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d907      	bls.n	800a1a6 <_fwalk_reent+0x3a>
 800a196:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a19a:	3301      	adds	r3, #1
 800a19c:	d003      	beq.n	800a1a6 <_fwalk_reent+0x3a>
 800a19e:	4629      	mov	r1, r5
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	47c0      	blx	r8
 800a1a4:	4307      	orrs	r7, r0
 800a1a6:	3568      	adds	r5, #104	; 0x68
 800a1a8:	e7e9      	b.n	800a17e <_fwalk_reent+0x12>

0800a1aa <__retarget_lock_init_recursive>:
 800a1aa:	4770      	bx	lr

0800a1ac <__retarget_lock_acquire_recursive>:
 800a1ac:	4770      	bx	lr

0800a1ae <__retarget_lock_release_recursive>:
 800a1ae:	4770      	bx	lr

0800a1b0 <__swhatbuf_r>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	460e      	mov	r6, r1
 800a1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	2900      	cmp	r1, #0
 800a1bc:	461d      	mov	r5, r3
 800a1be:	b096      	sub	sp, #88	; 0x58
 800a1c0:	da08      	bge.n	800a1d4 <__swhatbuf_r+0x24>
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1c8:	602a      	str	r2, [r5, #0]
 800a1ca:	061a      	lsls	r2, r3, #24
 800a1cc:	d410      	bmi.n	800a1f0 <__swhatbuf_r+0x40>
 800a1ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d2:	e00e      	b.n	800a1f2 <__swhatbuf_r+0x42>
 800a1d4:	466a      	mov	r2, sp
 800a1d6:	f000 f903 	bl	800a3e0 <_fstat_r>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	dbf1      	blt.n	800a1c2 <__swhatbuf_r+0x12>
 800a1de:	9a01      	ldr	r2, [sp, #4]
 800a1e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1e8:	425a      	negs	r2, r3
 800a1ea:	415a      	adcs	r2, r3
 800a1ec:	602a      	str	r2, [r5, #0]
 800a1ee:	e7ee      	b.n	800a1ce <__swhatbuf_r+0x1e>
 800a1f0:	2340      	movs	r3, #64	; 0x40
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	b016      	add	sp, #88	; 0x58
 800a1f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1fc <__smakebuf_r>:
 800a1fc:	898b      	ldrh	r3, [r1, #12]
 800a1fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a200:	079d      	lsls	r5, r3, #30
 800a202:	4606      	mov	r6, r0
 800a204:	460c      	mov	r4, r1
 800a206:	d507      	bpl.n	800a218 <__smakebuf_r+0x1c>
 800a208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	2301      	movs	r3, #1
 800a212:	6163      	str	r3, [r4, #20]
 800a214:	b002      	add	sp, #8
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	466a      	mov	r2, sp
 800a21a:	ab01      	add	r3, sp, #4
 800a21c:	f7ff ffc8 	bl	800a1b0 <__swhatbuf_r>
 800a220:	9900      	ldr	r1, [sp, #0]
 800a222:	4605      	mov	r5, r0
 800a224:	4630      	mov	r0, r6
 800a226:	f7ff f969 	bl	80094fc <_malloc_r>
 800a22a:	b948      	cbnz	r0, 800a240 <__smakebuf_r+0x44>
 800a22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a230:	059a      	lsls	r2, r3, #22
 800a232:	d4ef      	bmi.n	800a214 <__smakebuf_r+0x18>
 800a234:	f023 0303 	bic.w	r3, r3, #3
 800a238:	f043 0302 	orr.w	r3, r3, #2
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	e7e3      	b.n	800a208 <__smakebuf_r+0xc>
 800a240:	4b0d      	ldr	r3, [pc, #52]	; (800a278 <__smakebuf_r+0x7c>)
 800a242:	62b3      	str	r3, [r6, #40]	; 0x28
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	6020      	str	r0, [r4, #0]
 800a248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	9b00      	ldr	r3, [sp, #0]
 800a250:	6120      	str	r0, [r4, #16]
 800a252:	6163      	str	r3, [r4, #20]
 800a254:	9b01      	ldr	r3, [sp, #4]
 800a256:	b15b      	cbz	r3, 800a270 <__smakebuf_r+0x74>
 800a258:	4630      	mov	r0, r6
 800a25a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a25e:	f000 f8d1 	bl	800a404 <_isatty_r>
 800a262:	b128      	cbz	r0, 800a270 <__smakebuf_r+0x74>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	89a0      	ldrh	r0, [r4, #12]
 800a272:	4305      	orrs	r5, r0
 800a274:	81a5      	strh	r5, [r4, #12]
 800a276:	e7cd      	b.n	800a214 <__smakebuf_r+0x18>
 800a278:	0800a009 	.word	0x0800a009

0800a27c <_malloc_usable_size_r>:
 800a27c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a280:	1f18      	subs	r0, r3, #4
 800a282:	2b00      	cmp	r3, #0
 800a284:	bfbc      	itt	lt
 800a286:	580b      	ldrlt	r3, [r1, r0]
 800a288:	18c0      	addlt	r0, r0, r3
 800a28a:	4770      	bx	lr

0800a28c <_raise_r>:
 800a28c:	291f      	cmp	r1, #31
 800a28e:	b538      	push	{r3, r4, r5, lr}
 800a290:	4604      	mov	r4, r0
 800a292:	460d      	mov	r5, r1
 800a294:	d904      	bls.n	800a2a0 <_raise_r+0x14>
 800a296:	2316      	movs	r3, #22
 800a298:	6003      	str	r3, [r0, #0]
 800a29a:	f04f 30ff 	mov.w	r0, #4294967295
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2a2:	b112      	cbz	r2, 800a2aa <_raise_r+0x1e>
 800a2a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2a8:	b94b      	cbnz	r3, 800a2be <_raise_r+0x32>
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 f830 	bl	800a310 <_getpid_r>
 800a2b0:	462a      	mov	r2, r5
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2ba:	f000 b817 	b.w	800a2ec <_kill_r>
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d00a      	beq.n	800a2d8 <_raise_r+0x4c>
 800a2c2:	1c59      	adds	r1, r3, #1
 800a2c4:	d103      	bne.n	800a2ce <_raise_r+0x42>
 800a2c6:	2316      	movs	r3, #22
 800a2c8:	6003      	str	r3, [r0, #0]
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	e7e7      	b.n	800a29e <_raise_r+0x12>
 800a2ce:	2400      	movs	r4, #0
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2d6:	4798      	blx	r3
 800a2d8:	2000      	movs	r0, #0
 800a2da:	e7e0      	b.n	800a29e <_raise_r+0x12>

0800a2dc <raise>:
 800a2dc:	4b02      	ldr	r3, [pc, #8]	; (800a2e8 <raise+0xc>)
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f7ff bfd3 	b.w	800a28c <_raise_r>
 800a2e6:	bf00      	nop
 800a2e8:	20000024 	.word	0x20000024

0800a2ec <_kill_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	4d06      	ldr	r5, [pc, #24]	; (800a30c <_kill_r+0x20>)
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	602b      	str	r3, [r5, #0]
 800a2fa:	f7f7 fb96 	bl	8001a2a <_kill>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	d102      	bne.n	800a308 <_kill_r+0x1c>
 800a302:	682b      	ldr	r3, [r5, #0]
 800a304:	b103      	cbz	r3, 800a308 <_kill_r+0x1c>
 800a306:	6023      	str	r3, [r4, #0]
 800a308:	bd38      	pop	{r3, r4, r5, pc}
 800a30a:	bf00      	nop
 800a30c:	20000380 	.word	0x20000380

0800a310 <_getpid_r>:
 800a310:	f7f7 bb84 	b.w	8001a1c <_getpid>

0800a314 <__sread>:
 800a314:	b510      	push	{r4, lr}
 800a316:	460c      	mov	r4, r1
 800a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31c:	f000 f894 	bl	800a448 <_read_r>
 800a320:	2800      	cmp	r0, #0
 800a322:	bfab      	itete	ge
 800a324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a326:	89a3      	ldrhlt	r3, [r4, #12]
 800a328:	181b      	addge	r3, r3, r0
 800a32a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a32e:	bfac      	ite	ge
 800a330:	6563      	strge	r3, [r4, #84]	; 0x54
 800a332:	81a3      	strhlt	r3, [r4, #12]
 800a334:	bd10      	pop	{r4, pc}

0800a336 <__swrite>:
 800a336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33a:	461f      	mov	r7, r3
 800a33c:	898b      	ldrh	r3, [r1, #12]
 800a33e:	4605      	mov	r5, r0
 800a340:	05db      	lsls	r3, r3, #23
 800a342:	460c      	mov	r4, r1
 800a344:	4616      	mov	r6, r2
 800a346:	d505      	bpl.n	800a354 <__swrite+0x1e>
 800a348:	2302      	movs	r3, #2
 800a34a:	2200      	movs	r2, #0
 800a34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a350:	f000 f868 	bl	800a424 <_lseek_r>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	4632      	mov	r2, r6
 800a358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a35c:	81a3      	strh	r3, [r4, #12]
 800a35e:	4628      	mov	r0, r5
 800a360:	463b      	mov	r3, r7
 800a362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a36a:	f000 b817 	b.w	800a39c <_write_r>

0800a36e <__sseek>:
 800a36e:	b510      	push	{r4, lr}
 800a370:	460c      	mov	r4, r1
 800a372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a376:	f000 f855 	bl	800a424 <_lseek_r>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	bf15      	itete	ne
 800a380:	6560      	strne	r0, [r4, #84]	; 0x54
 800a382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a38a:	81a3      	strheq	r3, [r4, #12]
 800a38c:	bf18      	it	ne
 800a38e:	81a3      	strhne	r3, [r4, #12]
 800a390:	bd10      	pop	{r4, pc}

0800a392 <__sclose>:
 800a392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a396:	f000 b813 	b.w	800a3c0 <_close_r>
	...

0800a39c <_write_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4d05      	ldr	r5, [pc, #20]	; (800a3bc <_write_r+0x20>)
 800a3a8:	602a      	str	r2, [r5, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f7f7 fb74 	bl	8001a98 <_write>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_write_r+0x1e>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_write_r+0x1e>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	20000380 	.word	0x20000380

0800a3c0 <_close_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	4d05      	ldr	r5, [pc, #20]	; (800a3dc <_close_r+0x1c>)
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	602b      	str	r3, [r5, #0]
 800a3cc:	f7f7 fb80 	bl	8001ad0 <_close>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d102      	bne.n	800a3da <_close_r+0x1a>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	b103      	cbz	r3, 800a3da <_close_r+0x1a>
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	20000380 	.word	0x20000380

0800a3e0 <_fstat_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4d06      	ldr	r5, [pc, #24]	; (800a400 <_fstat_r+0x20>)
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	602b      	str	r3, [r5, #0]
 800a3ee:	f7f7 fb7a 	bl	8001ae6 <_fstat>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	d102      	bne.n	800a3fc <_fstat_r+0x1c>
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	b103      	cbz	r3, 800a3fc <_fstat_r+0x1c>
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	bd38      	pop	{r3, r4, r5, pc}
 800a3fe:	bf00      	nop
 800a400:	20000380 	.word	0x20000380

0800a404 <_isatty_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	2300      	movs	r3, #0
 800a408:	4d05      	ldr	r5, [pc, #20]	; (800a420 <_isatty_r+0x1c>)
 800a40a:	4604      	mov	r4, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	602b      	str	r3, [r5, #0]
 800a410:	f7f7 fb78 	bl	8001b04 <_isatty>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_isatty_r+0x1a>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_isatty_r+0x1a>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	20000380 	.word	0x20000380

0800a424 <_lseek_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	4611      	mov	r1, r2
 800a42c:	2200      	movs	r2, #0
 800a42e:	4d05      	ldr	r5, [pc, #20]	; (800a444 <_lseek_r+0x20>)
 800a430:	602a      	str	r2, [r5, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	f7f7 fb70 	bl	8001b18 <_lseek>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_lseek_r+0x1e>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_lseek_r+0x1e>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20000380 	.word	0x20000380

0800a448 <_read_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4604      	mov	r4, r0
 800a44c:	4608      	mov	r0, r1
 800a44e:	4611      	mov	r1, r2
 800a450:	2200      	movs	r2, #0
 800a452:	4d05      	ldr	r5, [pc, #20]	; (800a468 <_read_r+0x20>)
 800a454:	602a      	str	r2, [r5, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	f7f7 fb01 	bl	8001a5e <_read>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d102      	bne.n	800a466 <_read_r+0x1e>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	b103      	cbz	r3, 800a466 <_read_r+0x1e>
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	20000380 	.word	0x20000380

0800a46c <round>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a472:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800a476:	2c13      	cmp	r4, #19
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4606      	mov	r6, r0
 800a47e:	460d      	mov	r5, r1
 800a480:	dc19      	bgt.n	800a4b6 <round+0x4a>
 800a482:	2c00      	cmp	r4, #0
 800a484:	da09      	bge.n	800a49a <round+0x2e>
 800a486:	3401      	adds	r4, #1
 800a488:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a48c:	d103      	bne.n	800a496 <round+0x2a>
 800a48e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a492:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a496:	2200      	movs	r2, #0
 800a498:	e02a      	b.n	800a4f0 <round+0x84>
 800a49a:	4917      	ldr	r1, [pc, #92]	; (800a4f8 <round+0x8c>)
 800a49c:	4121      	asrs	r1, r4
 800a49e:	ea03 0001 	and.w	r0, r3, r1
 800a4a2:	4302      	orrs	r2, r0
 800a4a4:	d010      	beq.n	800a4c8 <round+0x5c>
 800a4a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a4aa:	fa42 f404 	asr.w	r4, r2, r4
 800a4ae:	4423      	add	r3, r4
 800a4b0:	ea23 0301 	bic.w	r3, r3, r1
 800a4b4:	e7ef      	b.n	800a496 <round+0x2a>
 800a4b6:	2c33      	cmp	r4, #51	; 0x33
 800a4b8:	dd09      	ble.n	800a4ce <round+0x62>
 800a4ba:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a4be:	d103      	bne.n	800a4c8 <round+0x5c>
 800a4c0:	f7f5 fe54 	bl	800016c <__adddf3>
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ce:	f04f 31ff 	mov.w	r1, #4294967295
 800a4d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a4d6:	40f9      	lsrs	r1, r7
 800a4d8:	4208      	tst	r0, r1
 800a4da:	d0f5      	beq.n	800a4c8 <round+0x5c>
 800a4dc:	2001      	movs	r0, #1
 800a4de:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a4e2:	fa00 f404 	lsl.w	r4, r0, r4
 800a4e6:	1912      	adds	r2, r2, r4
 800a4e8:	bf28      	it	cs
 800a4ea:	181b      	addcs	r3, r3, r0
 800a4ec:	ea22 0201 	bic.w	r2, r2, r1
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	e7e6      	b.n	800a4c4 <round+0x58>
 800a4f6:	bf00      	nop
 800a4f8:	000fffff 	.word	0x000fffff

0800a4fc <_init>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	bf00      	nop
 800a500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a502:	bc08      	pop	{r3}
 800a504:	469e      	mov	lr, r3
 800a506:	4770      	bx	lr

0800a508 <_fini>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	bf00      	nop
 800a50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50e:	bc08      	pop	{r3}
 800a510:	469e      	mov	lr, r3
 800a512:	4770      	bx	lr
